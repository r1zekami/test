(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["epicgames-frontend"] = factory();
	else
		root["epicgames-frontend"] = factory();
})(this, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../../library/dist/lib-pixelstreamingfrontend.esm.js":
/*!************************************************************!*\
  !*** ../../library/dist/lib-pixelstreamingfrontend.esm.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AfkLogic": () => (/* binding */ __webpack_exports__AfkLogic),
/* harmony export */   "AfkTimedOutEvent": () => (/* binding */ __webpack_exports__AfkTimedOutEvent),
/* harmony export */   "AfkWarningActivateEvent": () => (/* binding */ __webpack_exports__AfkWarningActivateEvent),
/* harmony export */   "AfkWarningDeactivateEvent": () => (/* binding */ __webpack_exports__AfkWarningDeactivateEvent),
/* harmony export */   "AfkWarningUpdateEvent": () => (/* binding */ __webpack_exports__AfkWarningUpdateEvent),
/* harmony export */   "AggregatedStats": () => (/* binding */ __webpack_exports__AggregatedStats),
/* harmony export */   "CandidatePairStats": () => (/* binding */ __webpack_exports__CandidatePairStats),
/* harmony export */   "CandidateStat": () => (/* binding */ __webpack_exports__CandidateStat),
/* harmony export */   "Config": () => (/* binding */ __webpack_exports__Config),
/* harmony export */   "ControlSchemeType": () => (/* binding */ __webpack_exports__ControlSchemeType),
/* harmony export */   "DataChannelCloseEvent": () => (/* binding */ __webpack_exports__DataChannelCloseEvent),
/* harmony export */   "DataChannelErrorEvent": () => (/* binding */ __webpack_exports__DataChannelErrorEvent),
/* harmony export */   "DataChannelLatencyTestResponseEvent": () => (/* binding */ __webpack_exports__DataChannelLatencyTestResponseEvent),
/* harmony export */   "DataChannelLatencyTestResultEvent": () => (/* binding */ __webpack_exports__DataChannelLatencyTestResultEvent),
/* harmony export */   "DataChannelOpenEvent": () => (/* binding */ __webpack_exports__DataChannelOpenEvent),
/* harmony export */   "DataChannelStats": () => (/* binding */ __webpack_exports__DataChannelStats),
/* harmony export */   "EncoderSettings": () => (/* binding */ __webpack_exports__EncoderSettings),
/* harmony export */   "EventEmitter": () => (/* binding */ __webpack_exports__EventEmitter),
/* harmony export */   "Flags": () => (/* binding */ __webpack_exports__Flags),
/* harmony export */   "HideFreezeFrameEvent": () => (/* binding */ __webpack_exports__HideFreezeFrameEvent),
/* harmony export */   "InboundAudioStats": () => (/* binding */ __webpack_exports__InboundAudioStats),
/* harmony export */   "InboundVideoStats": () => (/* binding */ __webpack_exports__InboundVideoStats),
/* harmony export */   "InitialSettings": () => (/* binding */ __webpack_exports__InitialSettings),
/* harmony export */   "InitialSettingsEvent": () => (/* binding */ __webpack_exports__InitialSettingsEvent),
/* harmony export */   "LatencyTestResultEvent": () => (/* binding */ __webpack_exports__LatencyTestResultEvent),
/* harmony export */   "LatencyTestResults": () => (/* binding */ __webpack_exports__LatencyTestResults),
/* harmony export */   "LoadFreezeFrameEvent": () => (/* binding */ __webpack_exports__LoadFreezeFrameEvent),
/* harmony export */   "Logger": () => (/* binding */ __webpack_exports__Logger),
/* harmony export */   "MessageDirection": () => (/* binding */ __webpack_exports__MessageDirection),
/* harmony export */   "MessageRecv": () => (/* binding */ __webpack_exports__MessageRecv),
/* harmony export */   "MessageSend": () => (/* binding */ __webpack_exports__MessageSend),
/* harmony export */   "MessageStreamerList": () => (/* binding */ __webpack_exports__MessageStreamerList),
/* harmony export */   "NumericParameters": () => (/* binding */ __webpack_exports__NumericParameters),
/* harmony export */   "OptionParameters": () => (/* binding */ __webpack_exports__OptionParameters),
/* harmony export */   "OutBoundVideoStats": () => (/* binding */ __webpack_exports__OutBoundVideoStats),
/* harmony export */   "PixelStreaming": () => (/* binding */ __webpack_exports__PixelStreaming),
/* harmony export */   "PlayStreamErrorEvent": () => (/* binding */ __webpack_exports__PlayStreamErrorEvent),
/* harmony export */   "PlayStreamEvent": () => (/* binding */ __webpack_exports__PlayStreamEvent),
/* harmony export */   "PlayStreamRejectedEvent": () => (/* binding */ __webpack_exports__PlayStreamRejectedEvent),
/* harmony export */   "PlayerCountEvent": () => (/* binding */ __webpack_exports__PlayerCountEvent),
/* harmony export */   "SettingBase": () => (/* binding */ __webpack_exports__SettingBase),
/* harmony export */   "SettingFlag": () => (/* binding */ __webpack_exports__SettingFlag),
/* harmony export */   "SettingNumber": () => (/* binding */ __webpack_exports__SettingNumber),
/* harmony export */   "SettingOption": () => (/* binding */ __webpack_exports__SettingOption),
/* harmony export */   "SettingText": () => (/* binding */ __webpack_exports__SettingText),
/* harmony export */   "SettingsChangedEvent": () => (/* binding */ __webpack_exports__SettingsChangedEvent),
/* harmony export */   "SignallingProtocol": () => (/* binding */ __webpack_exports__SignallingProtocol),
/* harmony export */   "StatsReceivedEvent": () => (/* binding */ __webpack_exports__StatsReceivedEvent),
/* harmony export */   "StreamLoadingEvent": () => (/* binding */ __webpack_exports__StreamLoadingEvent),
/* harmony export */   "StreamPreConnectEvent": () => (/* binding */ __webpack_exports__StreamPreConnectEvent),
/* harmony export */   "StreamPreDisconnectEvent": () => (/* binding */ __webpack_exports__StreamPreDisconnectEvent),
/* harmony export */   "StreamReconnectEvent": () => (/* binding */ __webpack_exports__StreamReconnectEvent),
/* harmony export */   "StreamerIDChangedMessageEvent": () => (/* binding */ __webpack_exports__StreamerIDChangedMessageEvent),
/* harmony export */   "StreamerListMessageEvent": () => (/* binding */ __webpack_exports__StreamerListMessageEvent),
/* harmony export */   "TextParameters": () => (/* binding */ __webpack_exports__TextParameters),
/* harmony export */   "UnquantizedAndDenormalizeUnsigned": () => (/* binding */ __webpack_exports__UnquantizedAndDenormalizeUnsigned),
/* harmony export */   "VideoEncoderAvgQPEvent": () => (/* binding */ __webpack_exports__VideoEncoderAvgQPEvent),
/* harmony export */   "VideoInitializedEvent": () => (/* binding */ __webpack_exports__VideoInitializedEvent),
/* harmony export */   "WebRTCSettings": () => (/* binding */ __webpack_exports__WebRTCSettings),
/* harmony export */   "WebRtcAutoConnectEvent": () => (/* binding */ __webpack_exports__WebRtcAutoConnectEvent),
/* harmony export */   "WebRtcConnectedEvent": () => (/* binding */ __webpack_exports__WebRtcConnectedEvent),
/* harmony export */   "WebRtcConnectingEvent": () => (/* binding */ __webpack_exports__WebRtcConnectingEvent),
/* harmony export */   "WebRtcDisconnectedEvent": () => (/* binding */ __webpack_exports__WebRtcDisconnectedEvent),
/* harmony export */   "WebRtcFailedEvent": () => (/* binding */ __webpack_exports__WebRtcFailedEvent),
/* harmony export */   "WebRtcPlayerController": () => (/* binding */ __webpack_exports__WebRtcPlayerController),
/* harmony export */   "WebRtcSdpEvent": () => (/* binding */ __webpack_exports__WebRtcSdpEvent),
/* harmony export */   "WebRtcTCPRelayDetectedEvent": () => (/* binding */ __webpack_exports__WebRtcTCPRelayDetectedEvent),
/* harmony export */   "WebSocketController": () => (/* binding */ __webpack_exports__WebSocketController),
/* harmony export */   "WebXRController": () => (/* binding */ __webpack_exports__WebXRController),
/* harmony export */   "XrFrameEvent": () => (/* binding */ __webpack_exports__XrFrameEvent),
/* harmony export */   "XrSessionEndedEvent": () => (/* binding */ __webpack_exports__XrSessionEndedEvent),
/* harmony export */   "XrSessionStartedEvent": () => (/* binding */ __webpack_exports__XrSessionStartedEvent)
/* harmony export */ });
/* harmony import */ var sdp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sdp */ "../../library/node_modules/sdp/sdp.js");
/* harmony import */ var sdp__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sdp__WEBPACK_IMPORTED_MODULE_0__);

/******/ var __webpack_modules__ = ({

/***/ "./src/AFK/AFKController.ts":
/*!**********************************!*\
  !*** ./src/AFK/AFKController.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_304__) => {

__nested_webpack_require_304__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_304__.d(__webpack_exports__, {
/* harmony export */   "AFKController": () => (/* binding */ AFKController)
/* harmony export */ });
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_304__(/*! ../Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_304__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_304__(/*! ../Util/EventEmitter */ "./src/Util/EventEmitter.ts");
// Copyright Epic Games, Inc. All Rights Reserved.



class AFKController {
    constructor(config, pixelStreaming, onDismissAfk) {
        // time out logic details
        this.active = false;
        this.countdownActive = false;
        this.warnTimer = undefined;
        this.countDown = 0;
        this.countDownTimer = undefined;
        this.config = config;
        this.pixelStreaming = pixelStreaming;
        this.onDismissAfk = onDismissAfk;
        this.onAFKTimedOutCallback = () => {
            console.log('AFK timed out, did you want to override this callback?');
        };
    }
    /**
     * The methods that occur when an afk event listener is clicked
     */
    onAfkClick() {
        clearInterval(this.countDownTimer);
        if (this.active || this.countdownActive) {
            this.startAfkWarningTimer();
            this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.AfkWarningDeactivateEvent());
        }
    }
    /**
     * Start the warning timer if a timeout is set greater that 0 seconds
     */
    startAfkWarningTimer() {
        if (this.config.getNumericSettingValue(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.NumericParameters.AFKTimeoutSecs) > 0 &&
            this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.Flags.AFKDetection)) {
            this.active = true;
        }
        else {
            this.active = false;
        }
        this.resetAfkWarningTimer();
    }
    /**
     * Stop the afk warning timer
     */
    stopAfkWarningTimer() {
        this.active = false;
        this.countdownActive = false;
        clearTimeout(this.warnTimer);
        clearInterval(this.countDownTimer);
    }
    /**
     * Pause the timer which when elapsed will warn the user they are inactive.
     */
    pauseAfkWarningTimer() {
        this.active = false;
    }
    /**
     * If the user interacts then reset the warning timer.
     */
    resetAfkWarningTimer() {
        if (this.active && this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.Flags.AFKDetection)) {
            clearTimeout(this.warnTimer);
            this.warnTimer = setTimeout(() => this.activateAfkEvent(), this.config.getNumericSettingValue(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.NumericParameters.AFKTimeoutSecs) * 1000);
        }
    }
    /**
     * Show the AFK overlay and begin the countDown
     */
    activateAfkEvent() {
        // Pause the timer while the user is looking at the inactivity warning overlay
        this.pauseAfkWarningTimer();
        // instantiate a new overlay
        this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.AfkWarningActivateEvent({
            countDown: this.countDown,
            dismissAfk: this.onDismissAfk
        }));
        // update our countDown timer and overlay contents
        this.countDown = this.config.getNumericSettingValue(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.NumericParameters.AFKCountdownSecs);
        this.countdownActive = true;
        this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.AfkWarningUpdateEvent({ countDown: this.countDown }));
        // if we are in locked mouse exit pointerlock
        if (!this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.Flags.HoveringMouseMode)) {
            // minor hack to alleviate ios not supporting pointerlock
            if (document.exitPointerLock) {
                document.exitPointerLock();
            }
        }
        // reset our countDown interval accordingly
        this.countDownTimer = setInterval(() => {
            this.countDown--;
            if (this.countDown == 0) {
                // The user failed to click so hide the overlay and disconnect them.
                this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.AfkTimedOutEvent());
                this.onAFKTimedOutCallback();
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'You have been disconnected due to inactivity');
                // switch off the afk feature as stream has closed
                this.stopAfkWarningTimer();
            }
            else {
                this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.AfkWarningUpdateEvent({ countDown: this.countDown }));
            }
        }, 1000);
    }
}


/***/ }),

/***/ "./src/Config/Config.ts":
/*!******************************!*\
  !*** ./src/Config/Config.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_5797__) => {

__nested_webpack_require_5797__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_5797__.d(__webpack_exports__, {
/* harmony export */   "Config": () => (/* binding */ Config),
/* harmony export */   "ControlSchemeType": () => (/* binding */ ControlSchemeType),
/* harmony export */   "Flags": () => (/* binding */ Flags),
/* harmony export */   "NumericParameters": () => (/* binding */ NumericParameters),
/* harmony export */   "OptionParameters": () => (/* binding */ OptionParameters),
/* harmony export */   "TextParameters": () => (/* binding */ TextParameters)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_5797__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _SettingFlag__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_5797__(/*! ./SettingFlag */ "./src/Config/SettingFlag.ts");
/* harmony import */ var _SettingNumber__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_5797__(/*! ./SettingNumber */ "./src/Config/SettingNumber.ts");
/* harmony import */ var _SettingText__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_5797__(/*! ./SettingText */ "./src/Config/SettingText.ts");
/* harmony import */ var _SettingOption__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_5797__(/*! ./SettingOption */ "./src/Config/SettingOption.ts");
/* harmony import */ var _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_5797__(/*! ../Util/EventEmitter */ "./src/Util/EventEmitter.ts");
// Copyright Epic Games, Inc. All Rights Reserved.






/**
 * A collection of flags that can be toggled and are core to all Pixel Streaming experiences.
 * These are used in the `Config.Flags` map.
 */
class Flags {
}
Flags.AutoConnect = 'AutoConnect';
Flags.AutoPlayVideo = 'AutoPlayVideo';
Flags.AFKDetection = 'TimeoutIfIdle';
Flags.BrowserSendOffer = 'OfferToReceive';
Flags.HoveringMouseMode = 'HoveringMouse';
Flags.ForceMonoAudio = 'ForceMonoAudio';
Flags.ForceTURN = 'ForceTURN';
Flags.FakeMouseWithTouches = 'FakeMouseWithTouches';
Flags.IsQualityController = 'ControlsQuality';
Flags.MatchViewportResolution = 'MatchViewportRes';
Flags.StartVideoMuted = 'StartVideoMuted';
Flags.SuppressBrowserKeys = 'SuppressBrowserKeys';
Flags.UseMic = 'UseMic';
Flags.KeyboardInput = 'KeyboardInput';
Flags.MouseInput = 'MouseInput';
Flags.TouchInput = 'TouchInput';
Flags.GamepadInput = 'GamepadInput';
Flags.XRControllerInput = 'XRControllerInput';
Flags.WaitForStreamer = 'WaitForStreamer';
Flags.HideUI = 'HideUI';
const isFlagId = (id) => Object.getOwnPropertyNames(Flags).some((name) => Flags[name] === id);
/**
 * A collection of numeric parameters that are core to all Pixel Streaming experiences.
 *
 */
class NumericParameters {
}
NumericParameters.AFKTimeoutSecs = 'AFKTimeout';
NumericParameters.AFKCountdownSecs = 'AFKCountdown';
NumericParameters.MinQP = 'MinQP';
NumericParameters.MaxQP = 'MaxQP';
NumericParameters.WebRTCFPS = 'WebRTCFPS';
NumericParameters.WebRTCMinBitrate = 'WebRTCMinBitrate';
NumericParameters.WebRTCMaxBitrate = 'WebRTCMaxBitrate';
NumericParameters.MaxReconnectAttempts = 'MaxReconnectAttempts';
NumericParameters.StreamerAutoJoinInterval = 'StreamerAutoJoinInterval';
const isNumericId = (id) => Object.getOwnPropertyNames(NumericParameters).some((name) => NumericParameters[name] === id);
/**
 * A collection of textual parameters that are core to all Pixel Streaming experiences.
 *
 */
class TextParameters {
}
TextParameters.SignallingServerUrl = 'ss';
const isTextId = (id) => Object.getOwnPropertyNames(TextParameters).some((name) => TextParameters[name] === id);
/**
 * A collection of enum based parameters that are core to all Pixel Streaming experiences.
 *
 */
class OptionParameters {
}
OptionParameters.PreferredCodec = 'PreferredCodec';
OptionParameters.StreamerId = 'StreamerId';
const isOptionId = (id) => Object.getOwnPropertyNames(OptionParameters).some((name) => OptionParameters[name] === id);
class Config {
    // ------------ Settings -----------------
    constructor(config = {}) {
        /* A map of flags that can be toggled - options that can be set in the application - e.g. Use Mic? */
        this.flags = new Map();
        /* A map of numerical settings - options that can be in the application - e.g. MinBitrate */
        this.numericParameters = new Map();
        /* A map of text settings - e.g. signalling server url */
        this.textParameters = new Map();
        /* A map of enum based settings - e.g. preferred codec */
        this.optionParameters = new Map();
        const { initialSettings, useUrlParams } = config;
        this._useUrlParams = !!useUrlParams;
        this.populateDefaultSettings(this._useUrlParams, initialSettings);
    }
    /**
     * True if reading configuration initial values from URL parameters, and
     * persisting changes in URL when changed.
     */
    get useUrlParams() {
        return this._useUrlParams;
    }
    /**
     * Populate the default settings for a Pixel Streaming application
     */
    populateDefaultSettings(useUrlParams, settings) {
        /**
         * Text Parameters
         */
        this.textParameters.set(TextParameters.SignallingServerUrl, new _SettingText__WEBPACK_IMPORTED_MODULE_0__.SettingText(TextParameters.SignallingServerUrl, 'Signalling url', 'Url of the signalling server', settings && settings.hasOwnProperty(TextParameters.SignallingServerUrl) ?
            settings[TextParameters.SignallingServerUrl] :
            (location.protocol === 'https:' ? 'wss://' : 'ws://') +
                window.location.hostname +
                // for readability, we omit the port if it's 80
                (window.location.port === '80' ||
                    window.location.port === ''
                    ? ''
                    : `:${window.location.port}`), useUrlParams));
        this.optionParameters.set(OptionParameters.StreamerId, new _SettingOption__WEBPACK_IMPORTED_MODULE_1__.SettingOption(OptionParameters.StreamerId, 'Streamer ID', 'The ID of the streamer to stream.', settings && settings.hasOwnProperty(OptionParameters.StreamerId) ?
            settings[OptionParameters.StreamerId] :
            '', [], useUrlParams));
        /**
         * Enum Parameters
         */
        this.optionParameters.set(OptionParameters.PreferredCodec, new _SettingOption__WEBPACK_IMPORTED_MODULE_1__.SettingOption(OptionParameters.PreferredCodec, 'Preferred Codec', 'The preferred codec to be used during codec negotiation', 'H264 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42e01f', settings && settings.hasOwnProperty(OptionParameters.PreferredCodec) ?
            [settings[OptionParameters.PreferredCodec]] :
            (function () {
                const browserSupportedCodecs = [];
                // Try get the info needed from the RTCRtpReceiver. This is only available on chrome
                if (!RTCRtpReceiver.getCapabilities) {
                    browserSupportedCodecs.push('Only available on Chrome');
                    return browserSupportedCodecs;
                }
                const matcher = /(VP\d|H26\d|AV1).*/;
                const codecs = RTCRtpReceiver.getCapabilities('video').codecs;
                codecs.forEach((codec) => {
                    const str = codec.mimeType.split('/')[1] +
                        ' ' +
                        (codec.sdpFmtpLine || '');
                    const match = matcher.exec(str);
                    if (match !== null) {
                        browserSupportedCodecs.push(str);
                    }
                });
                return browserSupportedCodecs;
            })(), useUrlParams));
        /**
         * Boolean parameters
         */
        this.flags.set(Flags.AutoConnect, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.AutoConnect, 'Auto connect to stream', 'Whether we should attempt to auto connect to the signalling server or show a click to start prompt.', settings && settings.hasOwnProperty(Flags.AutoConnect) ?
            settings[Flags.AutoConnect] :
            true, useUrlParams));
        this.flags.set(Flags.AutoPlayVideo, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.AutoPlayVideo, 'Auto play video', 'When video is ready automatically start playing it as opposed to showing a play button.', settings && settings.hasOwnProperty(Flags.AutoPlayVideo) ?
            settings[Flags.AutoPlayVideo] :
            true, useUrlParams));
        this.flags.set(Flags.BrowserSendOffer, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.BrowserSendOffer, 'Browser send offer', 'Browser will initiate the WebRTC handshake by sending the offer to the streamer', settings && settings.hasOwnProperty(Flags.BrowserSendOffer) ?
            settings[Flags.BrowserSendOffer] :
            false, useUrlParams));
        this.flags.set(Flags.UseMic, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.UseMic, 'Use microphone', 'Make browser request microphone access and open an input audio track.', settings && settings.hasOwnProperty(Flags.UseMic) ?
            settings[Flags.UseMic] :
            false, useUrlParams));
        this.flags.set(Flags.StartVideoMuted, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.StartVideoMuted, 'Start video muted', 'Video will start muted if true.', settings && settings.hasOwnProperty(Flags.StartVideoMuted) ?
            settings[Flags.StartVideoMuted] :
            true, useUrlParams));
        this.flags.set(Flags.SuppressBrowserKeys, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.SuppressBrowserKeys, 'Suppress browser keys', 'Suppress certain browser keys that we use in UE, for example F5 to show shader complexity instead of refresh the page.', settings && settings.hasOwnProperty(Flags.SuppressBrowserKeys) ?
            settings[Flags.SuppressBrowserKeys] :
            true, useUrlParams));
        this.flags.set(Flags.IsQualityController, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.IsQualityController, 'Is quality controller?', 'True if this peer controls stream quality', settings && settings.hasOwnProperty(Flags.IsQualityController) ?
            settings[Flags.IsQualityController] :
            true, useUrlParams));
        this.flags.set(Flags.ForceMonoAudio, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.ForceMonoAudio, 'Force mono audio', 'Force browser to request mono audio in the SDP', settings && settings.hasOwnProperty(Flags.ForceMonoAudio) ?
            settings[Flags.ForceMonoAudio] :
            false, useUrlParams));
        this.flags.set(Flags.ForceTURN, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.ForceTURN, 'Force TURN', 'Only generate TURN/Relayed ICE candidates.', settings && settings.hasOwnProperty(Flags.ForceTURN) ?
            settings[Flags.ForceTURN] :
            false, useUrlParams));
        this.flags.set(Flags.AFKDetection, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.AFKDetection, 'AFK if idle', 'Timeout the experience if user is AFK for a period.', settings && settings.hasOwnProperty(Flags.AFKDetection) ?
            settings[Flags.AFKDetection] :
            false, useUrlParams));
        this.flags.set(Flags.MatchViewportResolution, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.MatchViewportResolution, 'Match viewport resolution', 'Pixel Streaming will be instructed to dynamically resize the video stream to match the size of the video element.', settings && settings.hasOwnProperty(Flags.MatchViewportResolution) ?
            settings[Flags.MatchViewportResolution] :
            true, useUrlParams));
        this.flags.set(Flags.HoveringMouseMode, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.HoveringMouseMode, 'Control Scheme: Locked Mouse', 'Either locked mouse, where the pointer is consumed by the video and locked to it, or hovering mouse, where the mouse is not consumed.', settings && settings.hasOwnProperty(Flags.HoveringMouseMode) ?
            settings[Flags.HoveringMouseMode] :
            false, useUrlParams, (isHoveringMouse, setting) => {
            setting.label = `Control Scheme: ${isHoveringMouse ? 'Hovering' : 'Locked'} Mouse`;
        }));
        this.flags.set(Flags.FakeMouseWithTouches, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.FakeMouseWithTouches, 'Fake mouse with touches', 'A single finger touch is converted into a mouse event. This allows a non-touch application to be controlled partially via a touch device.', settings && settings.hasOwnProperty(Flags.FakeMouseWithTouches) ?
            settings[Flags.FakeMouseWithTouches] :
            false, useUrlParams));
        this.flags.set(Flags.KeyboardInput, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.KeyboardInput, 'Keyboard input', 'If enabled, send keyboard events to streamer', settings && settings.hasOwnProperty(Flags.KeyboardInput) ?
            settings[Flags.KeyboardInput] :
            false, useUrlParams));
        this.flags.set(Flags.MouseInput, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.MouseInput, 'Mouse input', 'If enabled, send mouse events to streamer', settings && settings.hasOwnProperty(Flags.MouseInput) ?
            settings[Flags.MouseInput] :
            false, useUrlParams));
        this.flags.set(Flags.TouchInput, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.TouchInput, 'Touch input', 'If enabled, send touch events to streamer', settings && settings.hasOwnProperty(Flags.TouchInput) ?
            settings[Flags.TouchInput] :
            false, useUrlParams));
        this.flags.set(Flags.GamepadInput, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.GamepadInput, 'Gamepad input', 'If enabled, send gamepad events to streamer', settings && settings.hasOwnProperty(Flags.GamepadInput) ?
            settings[Flags.GamepadInput] :
            false, useUrlParams));
        this.flags.set(Flags.XRControllerInput, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.XRControllerInput, 'XR controller input', 'If enabled, send XR controller events to streamer', settings && settings.hasOwnProperty(Flags.XRControllerInput) ?
            settings[Flags.XRControllerInput] :
            false, useUrlParams));
        this.flags.set(Flags.WaitForStreamer, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.WaitForStreamer, 'Wait for streamer', 'Will continue trying to connect to the first streamer available.', settings && settings.hasOwnProperty(Flags.WaitForStreamer) ?
            settings[Flags.WaitForStreamer] :
            true, useUrlParams));
        this.flags.set(Flags.HideUI, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.HideUI, 'Hide the UI overlay', 'Will hide all UI overlay details', settings && settings.hasOwnProperty(Flags.HideUI) ?
            settings[Flags.HideUI] :
            true, useUrlParams));
        /**
         * Numeric parameters
         */
        this.numericParameters.set(NumericParameters.AFKTimeoutSecs, new _SettingNumber__WEBPACK_IMPORTED_MODULE_3__.SettingNumber(NumericParameters.AFKTimeoutSecs, 'AFK timeout', 'The time (in seconds) it takes for the application to time out if AFK timeout is enabled.', 0 /*min*/, null /*max*/, settings && settings.hasOwnProperty(NumericParameters.AFKTimeoutSecs) ?
            settings[NumericParameters.AFKTimeoutSecs] :
            120, /*value*/ useUrlParams));
        this.numericParameters.set(NumericParameters.AFKCountdownSecs, new _SettingNumber__WEBPACK_IMPORTED_MODULE_3__.SettingNumber(NumericParameters.AFKCountdownSecs, 'AFK countdown', 'The time (in seconds) for a user to respond before the stream is ended after an AFK timeout.', 10 /*min*/, null /*max*/, 10 /*value*/, useUrlParams));
        this.numericParameters.set(NumericParameters.MaxReconnectAttempts, new _SettingNumber__WEBPACK_IMPORTED_MODULE_3__.SettingNumber(NumericParameters.MaxReconnectAttempts, 'Max Reconnects', 'Maximum number of reconnects the application will attempt when a streamer disconnects.', 0 /*min*/, 999 /*max*/, settings && settings.hasOwnProperty(NumericParameters.MaxReconnectAttempts) ?
            settings[NumericParameters.MaxReconnectAttempts] :
            3, /*value*/ useUrlParams));
        this.numericParameters.set(NumericParameters.MinQP, new _SettingNumber__WEBPACK_IMPORTED_MODULE_3__.SettingNumber(NumericParameters.MinQP, 'Min QP', 'The lower bound for the quantization parameter (QP) of the encoder. 0 = Best quality, 51 = worst quality.', 0 /*min*/, 51 /*max*/, settings && settings.hasOwnProperty(NumericParameters.MinQP) ?
            settings[NumericParameters.MinQP] :
            0, /*value*/ useUrlParams));
        this.numericParameters.set(NumericParameters.MaxQP, new _SettingNumber__WEBPACK_IMPORTED_MODULE_3__.SettingNumber(NumericParameters.MaxQP, 'Max QP', 'The upper bound for the quantization parameter (QP) of the encoder. 0 = Best quality, 51 = worst quality.', 0 /*min*/, 51 /*max*/, settings && settings.hasOwnProperty(NumericParameters.MaxQP) ?
            settings[NumericParameters.MaxQP] :
            51, /*value*/ useUrlParams));
        this.numericParameters.set(NumericParameters.WebRTCFPS, new _SettingNumber__WEBPACK_IMPORTED_MODULE_3__.SettingNumber(NumericParameters.WebRTCFPS, 'Max FPS', 'The maximum FPS that WebRTC will try to transmit frames at.', 1 /*min*/, 999 /*max*/, settings && settings.hasOwnProperty(NumericParameters.WebRTCFPS) ?
            settings[NumericParameters.WebRTCFPS] :
            45, /*value*/ useUrlParams));
        this.numericParameters.set(NumericParameters.WebRTCMinBitrate, new _SettingNumber__WEBPACK_IMPORTED_MODULE_3__.SettingNumber(NumericParameters.WebRTCMinBitrate, 'Min Bitrate (kbps)', 'The minimum bitrate that WebRTC should use.', 0 /*min*/, 500000 /*max*/, settings && settings.hasOwnProperty(NumericParameters.WebRTCMinBitrate) ?
            settings[NumericParameters.WebRTCMinBitrate] :
            1000, /*value*/ useUrlParams));
        this.numericParameters.set(NumericParameters.WebRTCMaxBitrate, new _SettingNumber__WEBPACK_IMPORTED_MODULE_3__.SettingNumber(NumericParameters.WebRTCMaxBitrate, 'Max Bitrate (kbps)', 'The maximum bitrate that WebRTC should use.', 0 /*min*/, 500000 /*max*/, settings && settings.hasOwnProperty(NumericParameters.WebRTCMaxBitrate) ?
            settings[NumericParameters.WebRTCMaxBitrate] :
            20000, /*value*/ useUrlParams));
        this.numericParameters.set(NumericParameters.StreamerAutoJoinInterval, new _SettingNumber__WEBPACK_IMPORTED_MODULE_3__.SettingNumber(NumericParameters.StreamerAutoJoinInterval, 'Streamer Auto Join Interval (ms)', 'Delay between retries when waiting for an available streamer.', 500 /*min*/, 900000 /*max*/, settings && settings.hasOwnProperty(NumericParameters.StreamerAutoJoinInterval) ?
            settings[NumericParameters.StreamerAutoJoinInterval] :
            3000, /*value*/ useUrlParams));
    }
    /**
     * Add a callback to fire when the numeric setting is toggled.
     * @param id The id of the flag.
     * @param onChangedListener The callback to fire when the numeric value changes.
     */
    _addOnNumericSettingChangedListener(id, onChangedListener) {
        if (this.numericParameters.has(id)) {
            this.numericParameters
                .get(id)
                .addOnChangedListener(onChangedListener);
        }
    }
    _addOnOptionSettingChangedListener(id, onChangedListener) {
        if (this.optionParameters.has(id)) {
            this.optionParameters
                .get(id)
                .addOnChangedListener(onChangedListener);
        }
    }
    /**
     * @param id The id of the numeric setting we are interested in getting a value for.
     * @returns The numeric value stored in the parameter with the passed id.
     */
    getNumericSettingValue(id) {
        if (this.numericParameters.has(id)) {
            return this.numericParameters.get(id).number;
        }
        else {
            throw new Error(`There is no numeric setting with the id of ${id}`);
        }
    }
    /**
     * @param id The id of the text setting we are interested in getting a value for.
     * @returns The text value stored in the parameter with the passed id.
     */
    getTextSettingValue(id) {
        if (this.textParameters.has(id)) {
            return this.textParameters.get(id).value;
        }
        else {
            throw new Error(`There is no numeric setting with the id of ${id}`);
        }
    }
    /**
     * Set number in the setting.
     * @param id The id of the numeric setting we are interested in.
     * @param value The numeric value to set.
     */
    setNumericSetting(id, value) {
        if (this.numericParameters.has(id)) {
            this.numericParameters.get(id).number = value;
        }
        else {
            throw new Error(`There is no numeric setting with the id of ${id}`);
        }
    }
    /**
     * Add a callback to fire when the flag is toggled.
     * @param id The id of the flag.
     * @param onChangeListener The callback to fire when the value changes.
     */
    _addOnSettingChangedListener(id, onChangeListener) {
        if (this.flags.has(id)) {
            this.flags.get(id).onChange = onChangeListener;
        }
    }
    /**
     * Add a callback to fire when the text is changed.
     * @param id The id of the flag.
     * @param onChangeListener The callback to fire when the value changes.
     */
    _addOnTextSettingChangedListener(id, onChangeListener) {
        if (this.textParameters.has(id)) {
            this.textParameters.get(id).onChange = onChangeListener;
        }
    }
    /**
     * Get the option which has the given id.
     * @param id The id of the option.
     * @returns The SettingOption object matching id
     */
    getSettingOption(id) {
        return this.optionParameters.get(id);
    }
    /**
     * Get the value of the configuration flag which has the given id.
     * @param id The unique id for the flag.
     * @returns True if the flag is enabled.
     */
    isFlagEnabled(id) {
        return this.flags.get(id).flag;
    }
    /**
     * Set flag to be enabled/disabled.
     * @param id The id of the flag to toggle.
     * @param flagEnabled True if the flag should be enabled.
     */
    setFlagEnabled(id, flagEnabled) {
        if (!this.flags.has(id)) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_4__.Logger.Warning(_Logger_Logger__WEBPACK_IMPORTED_MODULE_4__.Logger.GetStackTrace(), `Cannot toggle flag called ${id} - it does not exist in the Config.flags map.`);
        }
        else {
            this.flags.get(id).flag = flagEnabled;
        }
    }
    /**
     * Set the text setting.
     * @param id The id of the setting
     * @param settingValue The value to set in the setting.
     */
    setTextSetting(id, settingValue) {
        if (!this.textParameters.has(id)) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_4__.Logger.Warning(_Logger_Logger__WEBPACK_IMPORTED_MODULE_4__.Logger.GetStackTrace(), `Cannot set text setting called ${id} - it does not exist in the Config.textParameters map.`);
        }
        else {
            this.textParameters.get(id).text = settingValue;
        }
    }
    /**
     * Set the option setting list of options.
     * @param id The id of the setting
     * @param settingOptions The values the setting could take
     */
    setOptionSettingOptions(id, settingOptions) {
        if (!this.optionParameters.has(id)) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_4__.Logger.Warning(_Logger_Logger__WEBPACK_IMPORTED_MODULE_4__.Logger.GetStackTrace(), `Cannot set text setting called ${id} - it does not exist in the Config.optionParameters map.`);
        }
        else {
            this.optionParameters.get(id).options = settingOptions;
        }
    }
    /**
     * Set option enum settings selected option.
     * @param id The id of the setting
     * @param settingOptions The value to select out of all the options
     */
    setOptionSettingValue(id, settingValue) {
        if (!this.optionParameters.has(id)) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_4__.Logger.Warning(_Logger_Logger__WEBPACK_IMPORTED_MODULE_4__.Logger.GetStackTrace(), `Cannot set text setting called ${id} - it does not exist in the Config.enumParameters map.`);
        }
        else {
            const optionSetting = this.optionParameters.get(id);
            const existingOptions = optionSetting.options;
            if (!existingOptions.includes(settingValue)) {
                existingOptions.push(settingValue);
                optionSetting.options = existingOptions;
            }
            optionSetting.selected = settingValue;
        }
    }
    /**
     * Set the label for the flag.
     * @param id The id of the flag.
     * @param label The new label to use for the flag.
     */
    setFlagLabel(id, label) {
        if (!this.flags.has(id)) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_4__.Logger.Warning(_Logger_Logger__WEBPACK_IMPORTED_MODULE_4__.Logger.GetStackTrace(), `Cannot set label for flag called ${id} - it does not exist in the Config.flags map.`);
        }
        else {
            this.flags.get(id).label = label;
        }
    }
    /**
     * Set a subset of all settings in one function call.
     *
     * @param settings A (partial) list of settings to set
     */
    setSettings(settings) {
        for (const key of Object.keys(settings)) {
            if (isFlagId(key)) {
                this.setFlagEnabled(key, settings[key]);
            }
            else if (isNumericId(key)) {
                this.setNumericSetting(key, settings[key]);
            }
            else if (isTextId(key)) {
                this.setTextSetting(key, settings[key]);
            }
            else if (isOptionId(key)) {
                this.setOptionSettingValue(key, settings[key]);
            }
        }
    }
    /**
     * Get all settings
     * @returns All setting values as an object with setting ids as keys
     */
    getSettings() {
        const settings = {};
        for (const [key, value] of this.flags.entries()) {
            settings[key] = value.flag;
        }
        for (const [key, value] of this.numericParameters.entries()) {
            settings[key] = value.number;
        }
        for (const [key, value] of this.textParameters.entries()) {
            settings[key] = value.text;
        }
        for (const [key, value] of this.optionParameters.entries()) {
            settings[key] = value.selected;
        }
        return settings;
    }
    /**
     * Get all Flag settings as an array.
     * @returns All SettingFlag objects
     */
    getFlags() {
        return Array.from(this.flags.values());
    }
    /**
     * Get all Text settings as an array.
     * @returns All SettingText objects
     */
    getTextSettings() {
        return Array.from(this.textParameters.values());
    }
    /**
     * Get all Number settings as an array.
     * @returns All SettingNumber objects
     */
    getNumericSettings() {
        return Array.from(this.numericParameters.values());
    }
    /**
     * Get all Option settings as an array.
     * @returns All SettingOption objects
     */
    getOptionSettings() {
        return Array.from(this.optionParameters.values());
    }
    /**
     * Emit events when settings change.
     * @param eventEmitter
     */
    _registerOnChangeEvents(eventEmitter) {
        for (const key of this.flags.keys()) {
            const flag = this.flags.get(key);
            if (flag) {
                flag.onChangeEmit = (newValue) => eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_5__.SettingsChangedEvent({
                    id: flag.id,
                    type: 'flag',
                    value: newValue,
                    target: flag
                }));
            }
        }
        for (const key of this.numericParameters.keys()) {
            const number = this.numericParameters.get(key);
            if (number) {
                number.onChangeEmit = (newValue) => eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_5__.SettingsChangedEvent({
                    id: number.id,
                    type: 'number',
                    value: newValue,
                    target: number
                }));
            }
        }
        for (const key of this.textParameters.keys()) {
            const text = this.textParameters.get(key);
            if (text) {
                text.onChangeEmit = (newValue) => eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_5__.SettingsChangedEvent({
                    id: text.id,
                    type: 'text',
                    value: newValue,
                    target: text
                }));
            }
        }
        for (const key of this.optionParameters.keys()) {
            const option = this.optionParameters.get(key);
            if (option) {
                option.onChangeEmit = (newValue) => eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_5__.SettingsChangedEvent({
                    id: option.id,
                    type: 'option',
                    value: newValue,
                    target: option
                }));
            }
        }
    }
}
/**
 * The enum associated with the mouse being locked or hovering
 */
var ControlSchemeType;
(function (ControlSchemeType) {
    ControlSchemeType[ControlSchemeType["LockedMouse"] = 0] = "LockedMouse";
    ControlSchemeType[ControlSchemeType["HoveringMouse"] = 1] = "HoveringMouse";
})(ControlSchemeType || (ControlSchemeType = {}));


/***/ }),

/***/ "./src/Config/SettingBase.ts":
/*!***********************************!*\
  !*** ./src/Config/SettingBase.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_36379__) => {

__nested_webpack_require_36379__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_36379__.d(__webpack_exports__, {
/* harmony export */   "SettingBase": () => (/* binding */ SettingBase)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * Base class for a setting that has a text label and an arbitrary setting value it stores.
 */
class SettingBase {
    constructor(id, label, description, defaultSettingValue, 
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    defaultOnChangeListener = () => { }) {
        this.onChange = defaultOnChangeListener;
        this.onChangeEmit = () => {
            /* Do nothing, to be overridden. */
        };
        this.id = id;
        this.description = description;
        this.label = label;
        this.value = defaultSettingValue;
    }
    /**
     * Set the label text for the setting.
     * @param label setting label.
     */
    set label(inLabel) {
        this._label = inLabel;
        this.onChangeEmit(this._value);
    }
    /**
     * @returns The label text for the setting.
     */
    get label() {
        return this._label;
    }
    /**
     * @return The setting's value.
     */
    get value() {
        return this._value;
    }
    /**
     * Update the setting's stored value.
     * @param inValue The new value for the setting.
     */
    set value(inValue) {
        this._value = inValue;
        this.onChange(this._value, this);
        this.onChangeEmit(this._value);
    }
}


/***/ }),

/***/ "./src/Config/SettingFlag.ts":
/*!***********************************!*\
  !*** ./src/Config/SettingFlag.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_38186__) => {

__nested_webpack_require_38186__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_38186__.d(__webpack_exports__, {
/* harmony export */   "SettingFlag": () => (/* binding */ SettingFlag)
/* harmony export */ });
/* harmony import */ var _SettingBase__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_38186__(/*! ./SettingBase */ "./src/Config/SettingBase.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * A boolean flag setting object with a text label.
 */
class SettingFlag extends _SettingBase__WEBPACK_IMPORTED_MODULE_0__.SettingBase {
    constructor(id, label, description, defaultFlagValue, useUrlParams, 
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    defaultOnChangeListener = () => { }) {
        super(id, label, description, defaultFlagValue, defaultOnChangeListener);
        const urlParams = new URLSearchParams(window.location.search);
        if (!useUrlParams || !urlParams.has(this.id)) {
            this.flag = defaultFlagValue;
        }
        else {
            // parse flag from url parameters
            const urlParamFlag = this.getUrlParamFlag();
            this.flag = urlParamFlag;
        }
        this.useUrlParams = useUrlParams;
    }
    /**
     * Parse the flag value from the url parameters.
     * @returns True if the url parameters contains /?id, but False if /?id=false
     */
    getUrlParamFlag() {
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.has(this.id)) {
            if (urlParams.get(this.id) === 'false' ||
                urlParams.get(this.id) === 'False') {
                return false;
            }
            return true;
        }
        return false;
    }
    /**
     * Persist the setting value in URL.
     */
    updateURLParams() {
        if (this.useUrlParams) {
            // set url params
            const urlParams = new URLSearchParams(window.location.search);
            if (this.flag === true) {
                urlParams.set(this.id, 'true');
            }
            else {
                urlParams.set(this.id, 'false');
            }
            window.history.replaceState({}, '', urlParams.toString() !== ''
                ? `${location.pathname}?${urlParams}`
                : `${location.pathname}`);
        }
    }
    /**
     * Enables this flag.
     */
    enable() {
        this.flag = true;
    }
    /**
     * @return The setting's value.
     */
    get flag() {
        return !!this.value;
    }
    /**
     * Update the setting's stored value.
     * @param inValue The new value for the setting.
     */
    set flag(inValue) {
        this.value = inValue;
    }
}


/***/ }),

/***/ "./src/Config/SettingNumber.ts":
/*!*************************************!*\
  !*** ./src/Config/SettingNumber.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_41179__) => {

__nested_webpack_require_41179__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_41179__.d(__webpack_exports__, {
/* harmony export */   "SettingNumber": () => (/* binding */ SettingNumber)
/* harmony export */ });
/* harmony import */ var _SettingBase__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_41179__(/*! ./SettingBase */ "./src/Config/SettingBase.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * A number setting object with a text label. Min and max limit the range of allowed values.
 */
class SettingNumber extends _SettingBase__WEBPACK_IMPORTED_MODULE_0__.SettingBase {
    constructor(id, label, description, min, max, defaultNumber, useUrlParams, 
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    defaultOnChangeListener = () => { }) {
        super(id, label, description, defaultNumber, defaultOnChangeListener);
        this._min = min;
        this._max = max;
        // attempt to read the number from the url params
        const urlParams = new URLSearchParams(window.location.search);
        if (!useUrlParams || !urlParams.has(this.id)) {
            this.number = defaultNumber;
        }
        else {
            const parsedValue = Number.parseFloat(urlParams.get(this.id));
            this.number = Number.isNaN(parsedValue)
                ? defaultNumber
                : parsedValue;
        }
        this.useUrlParams = useUrlParams;
    }
    /**
     * Persist the setting value in URL.
     */
    updateURLParams() {
        if (this.useUrlParams) {
            // set url params like ?id=number
            const urlParams = new URLSearchParams(window.location.search);
            urlParams.set(this.id, this.number.toString());
            window.history.replaceState({}, '', urlParams.toString() !== ''
                ? `${location.pathname}?${urlParams}`
                : `${location.pathname}`);
        }
    }
    /**
     * Set the number value (will be clamped within range).
     */
    set number(newNumber) {
        this.value = this.clamp(newNumber);
    }
    /**
     * @returns The number stored.
     */
    get number() {
        return this.value;
    }
    /**
     * Clamps a number between the min and max values (inclusive).
     * @param inNumber The number to clamp.
     * @returns The clamped number.
     */
    clamp(inNumber) {
        if (this._min == null && this._max == null) {
            return inNumber;
        }
        else if (this._min == null) {
            return Math.min(this._max, inNumber);
        }
        else if (this._max == null) {
            return Math.max(this._min, inNumber);
        }
        else {
            return Math.max(Math.min(this._max, inNumber), this._min);
        }
    }
    /**
     * Returns the minimum value
     * @returns The minimum value
     */
    get min() {
        return this._min;
    }
    /**
     * Returns the maximum value
     * @returns The maximum value
     */
    get max() {
        return this._max;
    }
    /**
     * Add a change listener to the number object.
     */
    addOnChangedListener(onChangedFunc) {
        this.onChange = onChangedFunc;
    }
}


/***/ }),

/***/ "./src/Config/SettingOption.ts":
/*!*************************************!*\
  !*** ./src/Config/SettingOption.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_44675__) => {

__nested_webpack_require_44675__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_44675__.d(__webpack_exports__, {
/* harmony export */   "SettingOption": () => (/* binding */ SettingOption)
/* harmony export */ });
/* harmony import */ var _SettingBase__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_44675__(/*! ./SettingBase */ "./src/Config/SettingBase.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * An Option setting object with a text label. Allows you to specify an array of options and select one of them.
 */
class SettingOption extends _SettingBase__WEBPACK_IMPORTED_MODULE_0__.SettingBase {
    constructor(id, label, description, defaultTextValue, options, useUrlParams, 
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    defaultOnChangeListener = () => { }) {
        super(id, label, description, defaultTextValue, defaultOnChangeListener);
        this.options = options;
        const urlParams = new URLSearchParams(window.location.search);
        const stringToMatch = useUrlParams && urlParams.has(this.id)
            ? this.getUrlParamText()
            : defaultTextValue;
        this.selected = stringToMatch;
        this.useUrlParams = useUrlParams;
    }
    /**
     * Parse the text value from the url parameters.
     * @returns The text value parsed from the url if the url parameters contains /?id=value, but empty string if just /?id or no url param found.
     */
    getUrlParamText() {
        var _a;
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.has(this.id)) {
            return (_a = urlParams.get(this.id)) !== null && _a !== void 0 ? _a : '';
        }
        return '';
    }
    /**
     * Persist the setting value in URL.
     */
    updateURLParams() {
        if (this.useUrlParams) {
            // set url params
            const urlParams = new URLSearchParams(window.location.search);
            urlParams.set(this.id, this.selected);
            window.history.replaceState({}, '', urlParams.toString() !== ''
                ? `${location.pathname}?${urlParams}`
                : `${location.pathname}`);
        }
    }
    /**
     * Add a change listener to the select element.
     */
    addOnChangedListener(onChangedFunc) {
        this.onChange = onChangedFunc;
    }
    /**
     * @returns All available options as an array
     */
    get options() {
        return this._options;
    }
    /**
     * Set options
     * @param values Array of options
     */
    set options(values) {
        this._options = values;
        this.onChangeEmit(this.selected);
    }
    /**
     * @returns Selected option as a string
     */
    get selected() {
        return this.value;
    }
    /**
     * Set selected option if it matches one of the available options
     * @param value Selected option
     */
    set selected(value) {
        // A user may not specify the full possible value so we instead use the closest match.
        // eg ?xxx=H264 would select 'H264 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42001f'
        let filteredList = this.options.filter((option) => option.indexOf(value) !== -1);
        if (filteredList.length) {
            this.value = filteredList[0];
            return;
        }
        // A user has specified a codec with a fmtp string but this codec + fmtp line isn't available.
        // in that case, just use the codec
        filteredList = this.options.filter((option) => option.indexOf(value.split(' ')[0]) !== -1);
        if (filteredList.length) {
            this.value = filteredList[0];
            return;
        }
    }
}


/***/ }),

/***/ "./src/Config/SettingText.ts":
/*!***********************************!*\
  !*** ./src/Config/SettingText.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_48664__) => {

__nested_webpack_require_48664__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_48664__.d(__webpack_exports__, {
/* harmony export */   "SettingText": () => (/* binding */ SettingText)
/* harmony export */ });
/* harmony import */ var _SettingBase__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_48664__(/*! ./SettingBase */ "./src/Config/SettingBase.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * A text setting object with a text label.
 */
class SettingText extends _SettingBase__WEBPACK_IMPORTED_MODULE_0__.SettingBase {
    constructor(id, label, description, defaultTextValue, useUrlParams, 
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    defaultOnChangeListener = () => { }) {
        super(id, label, description, defaultTextValue, defaultOnChangeListener);
        const urlParams = new URLSearchParams(window.location.search);
        if (!useUrlParams || !urlParams.has(this.id)) {
            this.text = defaultTextValue;
        }
        else {
            // parse flag from url parameters
            const urlParamFlag = this.getUrlParamText();
            this.text = urlParamFlag;
        }
        this.useUrlParams = useUrlParams;
    }
    /**
     * Parse the text value from the url parameters.
     * @returns The text value parsed from the url if the url parameters contains /?id=value, but empty string if just /?id or no url param found.
     */
    getUrlParamText() {
        var _a;
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.has(this.id)) {
            return (_a = urlParams.get(this.id)) !== null && _a !== void 0 ? _a : '';
        }
        return '';
    }
    /**
     * Persist the setting value in URL.
     */
    updateURLParams() {
        if (this.useUrlParams) {
            // set url params
            const urlParams = new URLSearchParams(window.location.search);
            urlParams.set(this.id, this.text);
            window.history.replaceState({}, '', urlParams.toString() !== ''
                ? `${location.pathname}?${urlParams}`
                : `${location.pathname}`);
        }
    }
    /**
     * @return The setting's value.
     */
    get text() {
        return this.value;
    }
    /**
     * Update the setting's stored value.
     * @param inValue The new value for the setting.
     */
    set text(inValue) {
        this.value = inValue;
    }
}


/***/ }),

/***/ "./src/DataChannel/DataChannelController.ts":
/*!**************************************************!*\
  !*** ./src/DataChannel/DataChannelController.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_51448__) => {

__nested_webpack_require_51448__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_51448__.d(__webpack_exports__, {
/* harmony export */   "DataChannelController": () => (/* binding */ DataChannelController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_51448__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * Handles the Sending and Receiving of messages to the UE Instance via the Data Channel
 */
class DataChannelController {
    constructor() {
        this.isReceivingFreezeFrame = false;
    }
    /**
     * return the current state of a datachannel controller instance
     * @returns the current DataChannelController instance
     */
    getDataChannelInstance() {
        return this;
    }
    /**
     * To Create and Set up a Data Channel
     * @param peerConnection - The RTC Peer Connection
     * @param label - Label of the Data Channel
     * @param datachannelOptions - Optional RTC DataChannel options
     */
    createDataChannel(peerConnection, label, datachannelOptions) {
        this.peerConnection = peerConnection;
        this.label = label;
        this.datachannelOptions = datachannelOptions;
        if (datachannelOptions == null) {
            this.datachannelOptions = {};
            this.datachannelOptions.ordered = true;
        }
        this.dataChannel = this.peerConnection.createDataChannel(this.label, this.datachannelOptions);
        this.setupDataChannel();
    }
    setupDataChannel() {
        //We Want an Array Buffer not a blob
        this.dataChannel.binaryType = 'arraybuffer';
        this.dataChannel.onopen = (ev) => this.handleOnOpen(ev);
        this.dataChannel.onclose = (ev) => this.handleOnClose(ev);
        this.dataChannel.onmessage = (ev) => this.handleOnMessage(ev);
        this.dataChannel.onerror = (ev) => this.handleOnError(ev);
    }
    /**
     * Handles when the Data Channel is opened
     */
    handleOnOpen(ev) {
        var _a;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Data Channel (${this.label}) opened.`, 7);
        this.onOpen((_a = this.dataChannel) === null || _a === void 0 ? void 0 : _a.label, ev);
    }
    /**
     * Handles when the Data Channel is closed
     */
    handleOnClose(ev) {
        var _a;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Data Channel (${this.label}) closed.`, 7);
        this.onClose((_a = this.dataChannel) === null || _a === void 0 ? void 0 : _a.label, ev);
    }
    /**
     * Handles when a message is received
     * @param event - Message Event
     */
    handleOnMessage(event) {
        // Higher log level to prevent log spam with messages received
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Data Channel (${this.label}) message: ${event}`, 8);
    }
    /**
     * Handles when an error is thrown
     * @param event - Error Event
     */
    handleOnError(event) {
        var _a;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Data Channel (${this.label}) error: ${event}`, 7);
        this.onError((_a = this.dataChannel) === null || _a === void 0 ? void 0 : _a.label, event);
    }
    /**
     * Override to register onOpen handler
     * @param label Data channel label ("datachannel", "send-datachannel", "recv-datachannel")
     * @param ev event
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onOpen(label, ev) {
        // empty default implementation
    }
    /**
     * Override to register onClose handler
     * @param label Data channel label ("datachannel", "send-datachannel", "recv-datachannel")
     * @param ev event
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onClose(label, ev) {
        // empty default implementation
    }
    /**
     * Override to register onError handler
     * @param label Data channel label ("datachannel", "send-datachannel", "recv-datachannel")
     * @param ev event
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onError(label, ev) {
        // empty default implementation
    }
}


/***/ }),

/***/ "./src/DataChannel/DataChannelLatencyTestController.ts":
/*!*************************************************************!*\
  !*** ./src/DataChannel/DataChannelLatencyTestController.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_56351__) => {

__nested_webpack_require_56351__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_56351__.d(__webpack_exports__, {
/* harmony export */   "DataChannelLatencyTestController": () => (/* binding */ DataChannelLatencyTestController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_56351__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _DataChannelLatencyTestResults__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_56351__(/*! ./DataChannelLatencyTestResults */ "./src/DataChannel/DataChannelLatencyTestResults.ts");
// Copyright Epic Games, Inc. All Rights Reserved.


class DataChannelLatencyTestController {
    constructor(sink, callback) {
        this.sink = sink;
        this.callback = callback;
        this.records = new Map();
        this.seq = 0;
    }
    start(config) {
        if (this.isRunning()) {
            return false;
        }
        this.startTime = Date.now();
        this.records.clear();
        this.interval = setInterval((() => {
            if (Date.now() - this.startTime >= config.duration) {
                this.stop();
            }
            else {
                this.sendRequest(config.requestSize, config.responseSize);
            }
        }).bind(this), Math.floor(1000 / config.rps));
        return true;
    }
    stop() {
        if (this.interval) {
            clearInterval(this.interval);
            this.interval = undefined;
            this.callback(this.produceResult());
        }
    }
    produceResult() {
        const resultRecords = new Map(this.records);
        return {
            records: resultRecords,
            dataChannelRtt: Math.ceil(Array.from(this.records.values()).reduce((acc, next) => {
                return acc + (next.playerReceivedTimestamp - next.playerSentTimestamp);
            }, 0) / this.records.size),
            playerToStreamerTime: Math.ceil(Array.from(this.records.values()).reduce((acc, next) => {
                return acc + (next.streamerReceivedTimestamp - next.playerSentTimestamp);
            }, 0) / this.records.size),
            streamerToPlayerTime: Math.ceil(Array.from(this.records.values()).reduce((acc, next) => {
                return acc + (next.playerReceivedTimestamp - next.streamerSentTimestamp);
            }, 0) / this.records.size),
            exportLatencyAsCSV: () => {
                let csv = "Timestamp;RTT;PlayerToStreamer;StreamerToPlayer;\n";
                resultRecords.forEach((record) => {
                    csv += record.playerSentTimestamp + ";";
                    csv += (record.playerReceivedTimestamp - record.playerSentTimestamp) + ";";
                    csv += (record.streamerReceivedTimestamp - record.playerSentTimestamp) + ";";
                    csv += (record.playerReceivedTimestamp - record.streamerSentTimestamp) + ";";
                    csv += "\n";
                });
                return csv;
            }
        };
    }
    isRunning() {
        return !!this.interval;
    }
    receive(response) {
        if (!this.isRunning()) {
            return;
        }
        if (!response) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Undefined response from server");
            return;
        }
        let record = this.records.get(response.Seq);
        if (record) {
            record.update(response);
        }
    }
    sendRequest(requestSize, responseSize) {
        let request = this.createRequest(requestSize, responseSize);
        let record = new _DataChannelLatencyTestResults__WEBPACK_IMPORTED_MODULE_1__.DataChannelLatencyTestRecord(request);
        this.records.set(record.seq, record);
        this.sink(request);
    }
    createRequest(requestSize, responseSize) {
        return {
            Seq: this.seq++,
            FillResponseSize: responseSize,
            Filler: requestSize ? "A".repeat(requestSize) : ""
        };
    }
}


/***/ }),

/***/ "./src/DataChannel/DataChannelLatencyTestResults.ts":
/*!**********************************************************!*\
  !*** ./src/DataChannel/DataChannelLatencyTestResults.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_60802__) => {

__nested_webpack_require_60802__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_60802__.d(__webpack_exports__, {
/* harmony export */   "DataChannelLatencyTestRecord": () => (/* binding */ DataChannelLatencyTestRecord)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
class DataChannelLatencyTestRecord {
    constructor(request) {
        this.seq = request.Seq;
        this.playerSentTimestamp = Date.now();
        this.requestFillerSize = request.Filler ? request.Filler.length : 0;
    }
    update(response) {
        this.playerReceivedTimestamp = Date.now();
        this.streamerReceivedTimestamp = response.ReceivedTimestamp;
        this.streamerSentTimestamp = response.SentTimestamp;
        this.responseFillerSize = response.Filler ? response.Filler.length : 0;
    }
}


/***/ }),

/***/ "./src/DataChannel/DataChannelSender.ts":
/*!**********************************************!*\
  !*** ./src/DataChannel/DataChannelSender.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_61923__) => {

__nested_webpack_require_61923__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_61923__.d(__webpack_exports__, {
/* harmony export */   "DataChannelSender": () => (/* binding */ DataChannelSender)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_61923__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * A class for sending data channel messages
 */
class DataChannelSender {
    /**
     * @param dataChannelProvider - Data channel object type
     */
    constructor(dataChannelProvider) {
        this.dataChannelProvider = dataChannelProvider;
    }
    canSend() {
        return (this.dataChannelProvider.getDataChannelInstance().dataChannel !==
            undefined &&
            this.dataChannelProvider.getDataChannelInstance().dataChannel
                .readyState == 'open');
    }
    /**
     * Send Data over the Data channel to the UE Instance
     * @param data - Message Data Array Buffer
     */
    sendData(data) {
        // reset the afk inactivity
        const dataChannelInstance = this.dataChannelProvider.getDataChannelInstance();
        if (dataChannelInstance.dataChannel.readyState == 'open') {
            dataChannelInstance.dataChannel.send(data);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Message Sent: ${new Uint8Array(data)}`, 6);
            this.resetAfkWarningTimerOnDataSend();
        }
        else {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Message Failed: ${new Uint8Array(data)}`);
        }
    }
    /**
     * An override method for resetting the Afk warning timer when data is sent over the data channel
     */
    resetAfkWarningTimerOnDataSend() {
        // Base Functionality: Do Nothing
    }
}


/***/ }),

/***/ "./src/DataChannel/InitialSettings.ts":
/*!********************************************!*\
  !*** ./src/DataChannel/InitialSettings.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_64215__) => {

__nested_webpack_require_64215__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_64215__.d(__webpack_exports__, {
/* harmony export */   "EncoderSettings": () => (/* binding */ EncoderSettings),
/* harmony export */   "InitialSettings": () => (/* binding */ InitialSettings),
/* harmony export */   "PixelStreamingSettings": () => (/* binding */ PixelStreamingSettings),
/* harmony export */   "WebRTCSettings": () => (/* binding */ WebRTCSettings)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * Latency Test Results Data
 */
class InitialSettings {
    constructor() {
        this.PixelStreamingSettings = new PixelStreamingSettings();
        this.EncoderSettings = new EncoderSettings();
        this.WebRTCSettings = new WebRTCSettings();
    }
    /**
     * Checks for compatibility with the FPS and MaxFPS stats between 4.27 and 5
     */
    ueCompatible() {
        if (this.WebRTCSettings.MaxFPS != null) {
            this.WebRTCSettings.FPS = this.WebRTCSettings.MaxFPS;
        }
    }
}
/**
 * A class for handling Pixel Streaming details
 */
class PixelStreamingSettings {
}
/**
 * A class for handling encoder stats
 */
class EncoderSettings {
}
/**
 * A class for handling web rtc stats
 */
class WebRTCSettings {
}


/***/ }),

/***/ "./src/DataChannel/LatencyTestResults.ts":
/*!***********************************************!*\
  !*** ./src/DataChannel/LatencyTestResults.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_65816__) => {

__nested_webpack_require_65816__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_65816__.d(__webpack_exports__, {
/* harmony export */   "LatencyTestResults": () => (/* binding */ LatencyTestResults)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_65816__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * Latency Test Results Data
 */
class LatencyTestResults {
    constructor() {
        //Fields Set from the latency payload regardless of version
        this.ReceiptTimeMs = null;
        this.TransmissionTimeMs = null;
        //Fields Set from the latency payload from 4.27.2
        this.PreCaptureTimeMs = null;
        this.PostCaptureTimeMs = null;
        this.PreEncodeTimeMs = null;
        this.PostEncodeTimeMs = null;
        //Fields Set from the latency payload from 5.0
        this.EncodeMs = null;
        this.CaptureToSendMs = null;
        //Fields Set when processed
        this.testStartTimeMs = 0;
        this.browserReceiptTimeMs = 0;
        //Fields set from calculations
        this.latencyExcludingDecode = 0;
        this.testDuration = 0;
        //ueLatency: number = 0;
        this.networkLatency = 0;
        this.browserSendLatency = 0;
        this.frameDisplayDeltaTimeMs = 0;
        this.endToEndLatency = 0;
        //uePixelStreamLatency: number = 0;
        this.encodeLatency = 0;
    }
    /**
     * Sets the Delta Time Milliseconds
     * @param DeltaTimeMs - Delta Time Milliseconds
     */
    setFrameDisplayDeltaTime(DeltaTimeMs) {
        if (this.frameDisplayDeltaTimeMs == 0) {
            this.frameDisplayDeltaTimeMs = Math.round(DeltaTimeMs);
        }
    }
    /**
     * Process the encoder times and set them
     */
    processFields() {
        if (this.EncodeMs == null &&
            (this.PreEncodeTimeMs != null || this.PostEncodeTimeMs != null)) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Setting Encode Ms \n ${this.PostEncodeTimeMs} \n ${this.PreEncodeTimeMs}`, 6);
            this.EncodeMs = this.PostEncodeTimeMs - this.PreEncodeTimeMs;
        }
        if (this.CaptureToSendMs == null &&
            (this.PreCaptureTimeMs != null || this.PostCaptureTimeMs != null)) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Setting CaptureToSendMs Ms \n ${this.PostCaptureTimeMs} \n ${this.PreCaptureTimeMs}`, 6);
            this.CaptureToSendMs =
                this.PostCaptureTimeMs - this.PreCaptureTimeMs;
        }
    }
}


/***/ }),

/***/ "./src/FreezeFrame/FreezeFrame.ts":
/*!****************************************!*\
  !*** ./src/FreezeFrame/FreezeFrame.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_68854__) => {

__nested_webpack_require_68854__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_68854__.d(__webpack_exports__, {
/* harmony export */   "FreezeFrame": () => (/* binding */ FreezeFrame)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * A class for managing the freeze frame object
 */
class FreezeFrame {
    /**
     * Construct a freeze frame
     * @param rootDiv the div that a freeze frame element will be injected into
     */
    constructor(rootDiv) {
        this.freezeFrameHeight = 0;
        this.freezeFrameWidth = 0;
        this.rootDiv = rootDiv;
        // create the overlay
        this.rootElement = document.createElement('div');
        this.rootElement.id = 'freezeFrame';
        this.rootElement.style.display = 'none';
        this.rootElement.style.pointerEvents = 'none';
        this.rootElement.style.position = 'absolute';
        this.rootElement.style.zIndex = '20';
        // create the image place holder
        this.imageElement = document.createElement('img');
        this.imageElement.style.position = 'absolute';
        // append the image into the root element and append the element to the root div
        this.rootElement.appendChild(this.imageElement);
        this.rootDiv.appendChild(this.rootElement);
    }
    /**
     * Set the freeze frame element for showing
     */
    setElementForShow() {
        this.rootElement.style.display = 'block';
    }
    /**
     * Set the freeze frame element for hiding
     */
    setElementForHide() {
        this.rootElement.style.display = 'none';
    }
    /**
     * Update the freeze frames image source
     * @param jpeg - the freeze frame image as a byte array data
     */
    updateImageElementSource(jpeg) {
        const base64 = btoa(jpeg.reduce((data, byte) => data + String.fromCharCode(byte), ''));
        this.imageElement.src = 'data:image/jpeg;base64,' + base64;
    }
    /**
     * Set the dimensions for the freeze frame from the element and resize it
     */
    setDimensionsFromElementAndResize() {
        this.freezeFrameHeight = this.imageElement.naturalHeight;
        this.freezeFrameWidth = this.imageElement.naturalWidth;
        this.resize();
    }
    /**
     * Resize a freeze frame element
     */
    resize() {
        if (this.freezeFrameWidth !== 0 && this.freezeFrameHeight !== 0) {
            let displayWidth = 0;
            let displayHeight = 0;
            let displayTop = 0;
            let displayLeft = 0;
            const parentAspectRatio = this.rootDiv.clientWidth / this.rootDiv.clientHeight;
            const videoAspectRatio = this.freezeFrameWidth / this.freezeFrameHeight;
            if (parentAspectRatio < videoAspectRatio) {
                displayWidth = this.rootDiv.clientWidth;
                displayHeight = Math.floor(this.rootDiv.clientWidth / videoAspectRatio);
                displayTop = Math.floor((this.rootDiv.clientHeight - displayHeight) * 0.5);
                displayLeft = 0;
            }
            else {
                displayWidth = Math.floor(this.rootDiv.clientHeight * videoAspectRatio);
                displayHeight = this.rootDiv.clientHeight;
                displayTop = 0;
                displayLeft = Math.floor((this.rootDiv.clientWidth - displayWidth) * 0.5);
            }
            this.rootElement.style.width = this.rootDiv.offsetWidth + 'px';
            this.rootElement.style.height = this.rootDiv.offsetHeight + 'px';
            this.rootElement.style.left = 0 + 'px';
            this.rootElement.style.top = 0 + 'px';
            this.imageElement.style.width = displayWidth + 'px';
            this.imageElement.style.height = displayHeight + 'px';
            this.imageElement.style.left = displayLeft + 'px';
            this.imageElement.style.top = displayTop + 'px';
        }
    }
}


/***/ }),

/***/ "./src/FreezeFrame/FreezeFrameController.ts":
/*!**************************************************!*\
  !*** ./src/FreezeFrame/FreezeFrameController.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_73092__) => {

__nested_webpack_require_73092__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_73092__.d(__webpack_exports__, {
/* harmony export */   "FreezeFrameController": () => (/* binding */ FreezeFrameController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_73092__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _FreezeFrame__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_73092__(/*! ./FreezeFrame */ "./src/FreezeFrame/FreezeFrame.ts");
// Copyright Epic Games, Inc. All Rights Reserved.


/**
 * A class for controlling freeze frame functionality
 */
class FreezeFrameController {
    /**
     * Construct a freeze frame controller
     * @param rootDiv - the div that a freeze frame element will be injected into
     */
    constructor(rootDiv) {
        this.receiving = false;
        this.size = 0;
        this.jpeg = undefined;
        this.valid = false;
        this.freezeFrameDelay = 50;
        this.freezeFrame = new _FreezeFrame__WEBPACK_IMPORTED_MODULE_0__.FreezeFrame(rootDiv);
    }
    /**
     * Show the freeze frame if it is valid
     */
    showFreezeFrame() {
        if (this.valid) {
            this.freezeFrame.setElementForShow();
        }
    }
    /**
     * Hide the freeze frame and set the validity to false
     */
    hideFreezeFrame() {
        this.valid = false;
        this.freezeFrame.setElementForHide();
    }
    /**
     * Update the freeze frames image source and load it
     * @param jpeg - the freeze frame image as a byte array data
     * @param onLoadCallBack - a call back for managing if the play overlay needs to be shown or not
     */
    updateFreezeFrameAndShow(jpeg, onLoadCallBack) {
        this.freezeFrame.updateImageElementSource(jpeg);
        this.freezeFrame.imageElement.onload = () => {
            this.freezeFrame.setDimensionsFromElementAndResize();
            onLoadCallBack();
        };
    }
    /**
     * Process the new freeze frame image and update it
     * @param view - the freeze frame image as a byte array data
     * @param onLoadCallBack - a call back for managing if the play overlay needs to be shown or not
     */
    processFreezeFrameMessage(view, onLoadCallBack) {
        // Reset freeze frame if we got a freeze frame message and we are not "receiving" yet.
        if (!this.receiving) {
            this.receiving = true;
            this.valid = false;
            this.size = 0;
            this.jpeg = undefined;
        }
        // Extract total size of freeze frame (across all chunks)
        this.size = new DataView(view.slice(1, 5).buffer).getInt32(0, true);
        // Get the jpeg part of the payload
        const jpegBytes = view.slice(1 + 4);
        // Append to existing jpeg that holds the freeze frame
        if (this.jpeg) {
            const jpeg = new Uint8Array(this.jpeg.length + jpegBytes.length);
            jpeg.set(this.jpeg, 0);
            jpeg.set(jpegBytes, this.jpeg.length);
            this.jpeg = jpeg;
        }
        // No existing freeze frame jpeg, make one
        else {
            this.jpeg = jpegBytes;
            this.receiving = true;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), `received first chunk of freeze frame: ${this.jpeg.length}/${this.size}`, 6);
        }
        // Finished receiving freeze frame, we can show it now
        if (this.jpeg.length === this.size) {
            this.receiving = false;
            this.valid = true;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), `received complete freeze frame ${this.size}`, 6);
            this.updateFreezeFrameAndShow(this.jpeg, onLoadCallBack);
        }
        // We received more data than the freeze frame payload message indicate (this is an error)
        else if (this.jpeg.length > this.size) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), `received bigger freeze frame than advertised: ${this.jpeg.length}/${this.size}`);
            this.jpeg = undefined;
            this.receiving = false;
        }
    }
}


/***/ }),

/***/ "./src/Inputs/FakeTouchController.ts":
/*!*******************************************!*\
  !*** ./src/Inputs/FakeTouchController.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_77760__) => {

__nested_webpack_require_77760__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_77760__.d(__webpack_exports__, {
/* harmony export */   "FakeTouchController": () => (/* binding */ FakeTouchController),
/* harmony export */   "FakeTouchFinger": () => (/* binding */ FakeTouchFinger)
/* harmony export */ });
/* harmony import */ var _MouseButtons__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_77760__(/*! ./MouseButtons */ "./src/Inputs/MouseButtons.ts");
/* harmony import */ var _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_77760__(/*! ../Util/EventListenerTracker */ "./src/Util/EventListenerTracker.ts");
// Copyright Epic Games, Inc. All Rights Reserved.


/**
 * Allows for the usage of fake touch events and implements ITouchController
 * @param dataChannelController - The controller for the Data channel
 * @param videoElementParent - The video player DOM element
 */
class FakeTouchController {
    /**
     * @param toStreamerMessagesProvider - Stream message instance
     * @param videoElementProvider - Video element instance
     * @param coordinateConverter - A coordinate converter instance
     */
    constructor(toStreamerMessagesProvider, videoElementProvider, coordinateConverter) {
        // Utility for keeping track of event handlers and unregistering them
        this.touchEventListenerTracker = new _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__.EventListenerTracker();
        this.toStreamerMessagesProvider = toStreamerMessagesProvider;
        this.videoElementProvider = videoElementProvider;
        this.coordinateConverter = coordinateConverter;
        const ontouchstart = (ev) => this.onTouchStart(ev);
        const ontouchend = (ev) => this.onTouchEnd(ev);
        const ontouchmove = (ev) => this.onTouchMove(ev);
        document.addEventListener('touchstart', ontouchstart, { passive: false });
        document.addEventListener('touchend', ontouchend, { passive: false });
        document.addEventListener('touchmove', ontouchmove, { passive: false });
        this.touchEventListenerTracker.addUnregisterCallback(() => document.removeEventListener('touchstart', ontouchstart));
        this.touchEventListenerTracker.addUnregisterCallback(() => document.removeEventListener('touchend', ontouchend));
        this.touchEventListenerTracker.addUnregisterCallback(() => document.removeEventListener('touchmove', ontouchmove));
    }
    /**
     * Unregister all touch events
     */
    unregisterTouchEvents() {
        this.touchEventListenerTracker.unregisterAll();
    }
    /**
     * Sets the video Element Parent Client Rect numbers for this class
     * @param videoElementParentClientRect - a html ElementParentClientRect object
     */
    setVideoElementParentClientRect(videoElementParentClientRect) {
        this.videoElementParentClientRect = videoElementParentClientRect;
    }
    /**
     * When a touch event begins
     * @param touch - the activating touch event
     */
    onTouchStart(touch) {
        if (!this.videoElementProvider.isVideoReady() || touch.target !== this.videoElementProvider.getVideoElement()) {
            return;
        }
        if (this.fakeTouchFinger == null) {
            const first_touch = touch.changedTouches[0];
            this.fakeTouchFinger = new FakeTouchFinger(first_touch.identifier, first_touch.clientX - this.videoElementParentClientRect.left, first_touch.clientY - this.videoElementParentClientRect.top);
            const videoElementParent = this.videoElementProvider.getVideoParentElement();
            const mouseEvent = new MouseEvent('mouseenter', first_touch);
            videoElementParent.dispatchEvent(mouseEvent);
            const coord = this.coordinateConverter.normalizeAndQuantizeUnsigned(this.fakeTouchFinger.x, this.fakeTouchFinger.y);
            const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
            toStreamerHandlers.get('MouseDown')([
                _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.mainButton,
                coord.x,
                coord.y
            ]);
        }
        touch.preventDefault();
    }
    /**
     * When a touch event ends
     * @param touchEvent - the activating touch event
     */
    onTouchEnd(touchEvent) {
        if (!this.videoElementProvider.isVideoReady() || this.fakeTouchFinger == null) {
            return;
        }
        const videoElementParent = this.videoElementProvider.getVideoParentElement();
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        for (let t = 0; t < touchEvent.changedTouches.length; t++) {
            const touch = touchEvent.changedTouches[t];
            if (touch.identifier === this.fakeTouchFinger.id) {
                const x = touch.clientX - this.videoElementParentClientRect.left;
                const y = touch.clientY - this.videoElementParentClientRect.top;
                const coord = this.coordinateConverter.normalizeAndQuantizeUnsigned(x, y);
                toStreamerHandlers.get('MouseUp')([
                    _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.mainButton,
                    coord.x,
                    coord.y
                ]);
                const mouseEvent = new MouseEvent('mouseleave', touch);
                videoElementParent.dispatchEvent(mouseEvent);
                this.fakeTouchFinger = null;
                break;
            }
        }
        touchEvent.preventDefault();
    }
    /**
     * On a Move touch event
     * @param touchEvent - the activating touch event
     */
    onTouchMove(touchEvent) {
        if (!this.videoElementProvider.isVideoReady() || this.fakeTouchFinger == null) {
            return;
        }
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        for (let t = 0; t < touchEvent.touches.length; t++) {
            const touch = touchEvent.touches[t];
            if (touch.identifier === this.fakeTouchFinger.id) {
                const x = touch.clientX - this.videoElementParentClientRect.left;
                const y = touch.clientY - this.videoElementParentClientRect.top;
                const coord = this.coordinateConverter.normalizeAndQuantizeUnsigned(x, y);
                const delta = this.coordinateConverter.normalizeAndQuantizeSigned(x - this.fakeTouchFinger.x, y - this.fakeTouchFinger.y);
                toStreamerHandlers.get('MouseMove')([
                    coord.x,
                    coord.y,
                    delta.x,
                    delta.y
                ]);
                this.fakeTouchFinger.x = x;
                this.fakeTouchFinger.y = y;
                break;
            }
        }
        touchEvent.preventDefault();
    }
}
/**
 * The interface for finger position mapping
 */
class FakeTouchFinger {
    /**
     * @param id - the button id
     * @param x - the x axis value
     * @param y - the y axis value
     */
    constructor(id, x, y) {
        this.id = id;
        this.x = x;
        this.y = y;
    }
}


/***/ }),

/***/ "./src/Inputs/GamepadController.ts":
/*!*****************************************!*\
  !*** ./src/Inputs/GamepadController.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_85228__) => {

__nested_webpack_require_85228__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_85228__.d(__webpack_exports__, {
/* harmony export */   "GamePadController": () => (/* binding */ GamePadController),
/* harmony export */   "gamepadLayout": () => (/* binding */ gamepadLayout)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_85228__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_85228__(/*! ../Util/EventListenerTracker */ "./src/Util/EventListenerTracker.ts");
// Copyright Epic Games, Inc. All Rights Reserved.


/**
 * The class that handles the functionality of gamepads and controllers
 */
class GamePadController {
    /**
     * @param toStreamerMessagesProvider - Stream message instance
     */
    constructor(toStreamerMessagesProvider) {
        // Utility for keeping track of event handlers and unregistering them
        this.gamePadEventListenerTracker = new _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__.EventListenerTracker();
        this.toStreamerMessagesProvider = toStreamerMessagesProvider;
        this.requestAnimationFrame = (window.mozRequestAnimationFrame ||
            window.webkitRequestAnimationFrame ||
            window.requestAnimationFrame).bind(window);
        const browserWindow = window;
        const onBeforeUnload = (ev) => this.onBeforeUnload(ev);
        window.addEventListener('beforeunload', onBeforeUnload);
        if ('GamepadEvent' in browserWindow) {
            const onGamePadConnected = (ev) => this.gamePadConnectHandler(ev);
            const onGamePadDisconnected = (ev) => this.gamePadDisconnectHandler(ev);
            window.addEventListener('gamepadconnected', onGamePadConnected);
            window.addEventListener('gamepaddisconnected', onGamePadDisconnected);
            this.gamePadEventListenerTracker.addUnregisterCallback(() => window.removeEventListener('gamepadconnected', onGamePadConnected));
            this.gamePadEventListenerTracker.addUnregisterCallback(() => window.removeEventListener('gamepaddisconnected', onGamePadDisconnected));
        }
        else if ('WebKitGamepadEvent' in browserWindow) {
            const onWebkitGamePadConnected = (ev) => this.gamePadConnectHandler(ev);
            const onWebkitGamePadDisconnected = (ev) => this.gamePadDisconnectHandler(ev);
            window.addEventListener('webkitgamepadconnected', onWebkitGamePadConnected);
            window.addEventListener('webkitgamepaddisconnected', onWebkitGamePadDisconnected);
            this.gamePadEventListenerTracker.addUnregisterCallback(() => window.removeEventListener('webkitgamepadconnected', onWebkitGamePadConnected));
            this.gamePadEventListenerTracker.addUnregisterCallback(() => window.removeEventListener('webkitgamepaddisconnected', onWebkitGamePadDisconnected));
        }
        this.controllers = [];
        if (navigator.getGamepads) {
            for (const gamepad of navigator.getGamepads()) {
                if (gamepad) {
                    this.gamePadConnectHandler(new GamepadEvent('gamepadconnected', { gamepad }));
                }
            }
        }
    }
    /**
     * Unregisters all event handlers
     */
    unregisterGamePadEvents() {
        this.gamePadEventListenerTracker.unregisterAll();
        for (const controller of this.controllers) {
            if (controller.id !== undefined) {
                this.onGamepadDisconnected(controller.id);
            }
        }
        this.controllers = [];
        this.onGamepadConnected = () => { };
        this.onGamepadDisconnected = () => { };
    }
    /**
     * Connects the gamepad handler
     * @param gamePadEvent - the activating gamepad event
     */
    gamePadConnectHandler(gamePadEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'Gamepad connect handler', 6);
        const gamepad = gamePadEvent.gamepad;
        const temp = {
            currentState: gamepad,
            prevState: gamepad,
            id: undefined
        };
        this.controllers.push(temp);
        this.controllers[gamepad.index].currentState = gamepad;
        this.controllers[gamepad.index].prevState = gamepad;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'gamepad: ' + gamepad.id + ' connected', 6);
        window.requestAnimationFrame(() => this.updateStatus());
        this.onGamepadConnected();
    }
    /**
     * Disconnects the gamepad handler
     * @param gamePadEvent - the activating gamepad event
     */
    gamePadDisconnectHandler(gamePadEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'Gamepad disconnect handler', 6);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'gamepad: ' + gamePadEvent.gamepad.id + ' disconnected', 6);
        const deletedController = this.controllers[gamePadEvent.gamepad.index];
        delete this.controllers[gamePadEvent.gamepad.index];
        this.controllers = this.controllers.filter((controller) => controller !== undefined);
        this.onGamepadDisconnected(deletedController.id);
    }
    /**
     * Scan for connected gamepads
     */
    scanGamePads() {
        const gamepads = navigator.getGamepads
            ? navigator.getGamepads()
            : navigator.webkitGetGamepads
                ? navigator.webkitGetGamepads()
                : [];
        for (let i = 0; i < gamepads.length; i++) {
            if (gamepads[i] && gamepads[i].index in this.controllers) {
                this.controllers[gamepads[i].index].currentState = gamepads[i];
            }
        }
    }
    /**
     * Updates the status of the gamepad and sends the inputs
     */
    updateStatus() {
        this.scanGamePads();
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        // Iterate over multiple controllers in the case the multiple gamepads are connected
        for (const controller of this.controllers) {
            // If we haven't received an id (possible if using an older version of UE), return to original functionality
            const controllerIndex = (controller.id === undefined) ? this.controllers.indexOf(controller) : controller.id;
            const currentState = controller.currentState;
            for (let i = 0; i < controller.currentState.buttons.length; i++) {
                const currentButton = controller.currentState.buttons[i];
                const previousButton = controller.prevState.buttons[i];
                if (currentButton.pressed) {
                    // press
                    if (i == gamepadLayout.LeftTrigger) {
                        //                       UEs left analog has a button index of 5
                        toStreamerHandlers.get('GamepadAnalog')([
                            controllerIndex,
                            5,
                            currentButton.value
                        ]);
                    }
                    else if (i == gamepadLayout.RightTrigger) {
                        //                       UEs right analog has a button index of 6
                        toStreamerHandlers.get('GamepadAnalog')([
                            controllerIndex,
                            6,
                            currentButton.value
                        ]);
                    }
                    else {
                        toStreamerHandlers.get('GamepadButtonPressed')([
                            controllerIndex,
                            i,
                            previousButton.pressed ? 1 : 0
                        ]);
                    }
                }
                else if (!currentButton.pressed && previousButton.pressed) {
                    // release
                    if (i == gamepadLayout.LeftTrigger) {
                        //                       UEs left analog has a button index of 5
                        toStreamerHandlers.get('GamepadAnalog')([
                            controllerIndex,
                            5,
                            0
                        ]);
                    }
                    else if (i == gamepadLayout.RightTrigger) {
                        //                       UEs right analog has a button index of 6
                        toStreamerHandlers.get('GamepadAnalog')([
                            controllerIndex,
                            6,
                            0
                        ]);
                    }
                    else {
                        toStreamerHandlers.get('GamepadButtonReleased')([
                            controllerIndex,
                            i,
                            0
                        ]);
                    }
                }
            }
            // Iterate over gamepad axes (we will increment in lots of 2 as there is 2 axes per stick)
            for (let i = 0; i < currentState.axes.length; i += 2) {
                // Horizontal axes are even numbered
                const x = parseFloat(currentState.axes[i].toFixed(4));
                // Vertical axes are odd numbered
                // https://w3c.github.io/gamepad/#remapping Gamepad browser side standard mapping has positive down, negative up. This is downright disgusting. So we fix it.
                const y = -parseFloat(currentState.axes[i + 1].toFixed(4));
                // UE's analog axes follow the same order as the browsers, but start at index 1 so we will offset as such
                toStreamerHandlers.get('GamepadAnalog')([
                    controllerIndex,
                    i + 1,
                    x
                ]); // Horizontal axes, only offset by 1
                toStreamerHandlers.get('GamepadAnalog')([
                    controllerIndex,
                    i + 2,
                    y
                ]); // Vertical axes, offset by two (1 to match UEs axes convention and then another 1 for the vertical axes)
            }
            this.controllers[controllerIndex].prevState = currentState;
        }
        if (this.controllers.length > 0) {
            this.requestAnimationFrame(() => this.updateStatus());
        }
    }
    onGamepadResponseReceived(gamepadId) {
        for (const controller of this.controllers) {
            if (controller.id === undefined) {
                controller.id = gamepadId;
                break;
            }
        }
    }
    /**
     * Event to send the gamepadconnected message to the application
     */
    onGamepadConnected() {
        // Default Functionality: Do Nothing
    }
    /**
     * Event to send the gamepaddisconnected message to the application
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onGamepadDisconnected(controllerIdx) {
        // Default Functionality: Do Nothing
    }
    onBeforeUnload(ev) {
        // When a user navigates away from the page, we need to inform UE of all the disconnecting
        // controllers
        for (const controller of this.controllers) {
            this.onGamepadDisconnected(controller.id);
        }
    }
}
/**
 * Gamepad layout codes enum
 */
var gamepadLayout;
(function (gamepadLayout) {
    gamepadLayout[gamepadLayout["RightClusterBottomButton"] = 0] = "RightClusterBottomButton";
    gamepadLayout[gamepadLayout["RightClusterRightButton"] = 1] = "RightClusterRightButton";
    gamepadLayout[gamepadLayout["RightClusterLeftButton"] = 2] = "RightClusterLeftButton";
    gamepadLayout[gamepadLayout["RightClusterTopButton"] = 3] = "RightClusterTopButton";
    gamepadLayout[gamepadLayout["LeftShoulder"] = 4] = "LeftShoulder";
    gamepadLayout[gamepadLayout["RightShoulder"] = 5] = "RightShoulder";
    gamepadLayout[gamepadLayout["LeftTrigger"] = 6] = "LeftTrigger";
    gamepadLayout[gamepadLayout["RightTrigger"] = 7] = "RightTrigger";
    gamepadLayout[gamepadLayout["SelectOrBack"] = 8] = "SelectOrBack";
    gamepadLayout[gamepadLayout["StartOrForward"] = 9] = "StartOrForward";
    gamepadLayout[gamepadLayout["LeftAnalogPress"] = 10] = "LeftAnalogPress";
    gamepadLayout[gamepadLayout["RightAnalogPress"] = 11] = "RightAnalogPress";
    gamepadLayout[gamepadLayout["LeftClusterTopButton"] = 12] = "LeftClusterTopButton";
    gamepadLayout[gamepadLayout["LeftClusterBottomButton"] = 13] = "LeftClusterBottomButton";
    gamepadLayout[gamepadLayout["LeftClusterLeftButton"] = 14] = "LeftClusterLeftButton";
    gamepadLayout[gamepadLayout["LeftClusterRightButton"] = 15] = "LeftClusterRightButton";
    gamepadLayout[gamepadLayout["CentreButton"] = 16] = "CentreButton";
    // Axes
    gamepadLayout[gamepadLayout["LeftStickHorizontal"] = 0] = "LeftStickHorizontal";
    gamepadLayout[gamepadLayout["LeftStickVertical"] = 1] = "LeftStickVertical";
    gamepadLayout[gamepadLayout["RightStickHorizontal"] = 2] = "RightStickHorizontal";
    gamepadLayout[gamepadLayout["RightStickVertical"] = 3] = "RightStickVertical";
})(gamepadLayout || (gamepadLayout = {}));


/***/ }),

/***/ "./src/Inputs/HoveringMouseEvents.ts":
/*!*******************************************!*\
  !*** ./src/Inputs/HoveringMouseEvents.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_99104__) => {

__nested_webpack_require_99104__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_99104__.d(__webpack_exports__, {
/* harmony export */   "HoveringMouseEvents": () => (/* binding */ HoveringMouseEvents)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_99104__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * Video Player mouse Hover handler
 */
class HoveringMouseEvents {
    /**
     * @param mouseController - Mouse Controller instance
     */
    constructor(mouseController) {
        this.mouseController = mouseController;
    }
    /**
     * Unregister event handlers
     */
    unregisterMouseEvents() {
        // empty for HoveringMouseEvents implementation
    }
    /**
     * Handle the mouse move event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    updateMouseMovePosition(mouseEvent) {
        if (!this.mouseController.videoElementProvider.isVideoReady()) {
            return;
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'MouseMove', 6);
        const coord = this.mouseController.coordinateConverter.normalizeAndQuantizeUnsigned(mouseEvent.offsetX, mouseEvent.offsetY);
        const delta = this.mouseController.coordinateConverter.normalizeAndQuantizeSigned(mouseEvent.movementX, mouseEvent.movementY);
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseMove')([
            coord.x,
            coord.y,
            delta.x,
            delta.y
        ]);
        mouseEvent.preventDefault();
    }
    /**
     * Handle the mouse Down event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    handleMouseDown(mouseEvent) {
        if (!this.mouseController.videoElementProvider.isVideoReady()) {
            return;
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'onMouse Down', 6);
        const coord = this.mouseController.coordinateConverter.normalizeAndQuantizeUnsigned(mouseEvent.offsetX, mouseEvent.offsetY);
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseDown')([
            mouseEvent.button,
            coord.x,
            coord.y
        ]);
        mouseEvent.preventDefault();
    }
    /**
     * Handle the mouse Up event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    handleMouseUp(mouseEvent) {
        if (!this.mouseController.videoElementProvider.isVideoReady()) {
            return;
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'onMouse Up', 6);
        const coord = this.mouseController.coordinateConverter.normalizeAndQuantizeUnsigned(mouseEvent.offsetX, mouseEvent.offsetY);
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseUp')([
            mouseEvent.button,
            coord.x,
            coord.y
        ]);
        mouseEvent.preventDefault();
    }
    /**
     * Consumes the mouse context event. The UE instance has no equivalent and doesn't need to be informed.
     * @param mouseEvent - Mouse Event
     */
    handleContextMenu(mouseEvent) {
        if (!this.mouseController.videoElementProvider.isVideoReady()) {
            return;
        }
        mouseEvent.preventDefault();
    }
    /**
     * Handle the mouse wheel event, sends the mouse wheel data to the UE Instance
     * @param wheelEvent - Mouse Event
     */
    handleMouseWheel(wheelEvent) {
        if (!this.mouseController.videoElementProvider.isVideoReady()) {
            return;
        }
        const coord = this.mouseController.coordinateConverter.normalizeAndQuantizeUnsigned(wheelEvent.offsetX, wheelEvent.offsetY);
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseWheel')([
            wheelEvent.wheelDelta,
            coord.x,
            coord.y
        ]);
        wheelEvent.preventDefault();
    }
    /**
     * Handle the mouse double click event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    handleMouseDouble(mouseEvent) {
        if (!this.mouseController.videoElementProvider.isVideoReady()) {
            return;
        }
        const coord = this.mouseController.coordinateConverter.normalizeAndQuantizeUnsigned(mouseEvent.offsetX, mouseEvent.offsetY);
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseDouble')([
            mouseEvent.button,
            coord.x,
            coord.y
        ]);
    }
    /**
     * Handle the press mouse buttons event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    handlePressMouseButtons(mouseEvent) {
        if (!this.mouseController.videoElementProvider.isVideoReady()) {
            return;
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'onMouse press', 6);
        this.mouseController.pressMouseButtons(mouseEvent.buttons, mouseEvent.offsetX, mouseEvent.offsetY);
    }
    /**
     * Handle the release mouse buttons event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    handleReleaseMouseButtons(mouseEvent) {
        if (!this.mouseController.videoElementProvider.isVideoReady()) {
            return;
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'onMouse release', 6);
        this.mouseController.releaseMouseButtons(mouseEvent.buttons, mouseEvent.offsetX, mouseEvent.offsetY);
    }
}


/***/ }),

/***/ "./src/Inputs/InputClassesFactory.ts":
/*!*******************************************!*\
  !*** ./src/Inputs/InputClassesFactory.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_105748__) => {

__nested_webpack_require_105748__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_105748__.d(__webpack_exports__, {
/* harmony export */   "ActiveKeys": () => (/* binding */ ActiveKeys),
/* harmony export */   "InputClassesFactory": () => (/* binding */ InputClassesFactory)
/* harmony export */ });
/* harmony import */ var _FakeTouchController__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_105748__(/*! ./FakeTouchController */ "./src/Inputs/FakeTouchController.ts");
/* harmony import */ var _KeyboardController__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_105748__(/*! ./KeyboardController */ "./src/Inputs/KeyboardController.ts");
/* harmony import */ var _MouseController__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_105748__(/*! ./MouseController */ "./src/Inputs/MouseController.ts");
/* harmony import */ var _TouchController__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_105748__(/*! ./TouchController */ "./src/Inputs/TouchController.ts");
/* harmony import */ var _GamepadController__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_105748__(/*! ./GamepadController */ "./src/Inputs/GamepadController.ts");
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_105748__(/*! ../Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_105748__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.







/**
 * Class for making and setting up input class types
 */
class InputClassesFactory {
    /**
     * @param toStreamerMessagesProvider - Stream message instance
     * @param videoElementProvider - Video Player instance
     * @param coordinateConverter - A coordinateConverter instance
     */
    constructor(toStreamerMessagesProvider, videoElementProvider, coordinateConverter) {
        this.activeKeys = new ActiveKeys();
        this.toStreamerMessagesProvider = toStreamerMessagesProvider;
        this.videoElementProvider = videoElementProvider;
        this.coordinateConverter = coordinateConverter;
    }
    /**
     * Registers browser key events.
     */
    registerKeyBoard(config) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Register Keyboard Events', 7);
        const keyboardController = new _KeyboardController__WEBPACK_IMPORTED_MODULE_1__.KeyboardController(this.toStreamerMessagesProvider, config, this.activeKeys);
        keyboardController.registerKeyBoardEvents();
        return keyboardController;
    }
    /**
     * register mouse events based on a control type
     * @param controlScheme - if the mouse is either hovering or locked
     */
    registerMouse(controlScheme) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Register Mouse Events', 7);
        const mouseController = new _MouseController__WEBPACK_IMPORTED_MODULE_2__.MouseController(this.toStreamerMessagesProvider, this.videoElementProvider, this.coordinateConverter, this.activeKeys);
        switch (controlScheme) {
            case _Config_Config__WEBPACK_IMPORTED_MODULE_3__.ControlSchemeType.LockedMouse:
                mouseController.registerLockedMouseEvents(mouseController);
                break;
            case _Config_Config__WEBPACK_IMPORTED_MODULE_3__.ControlSchemeType.HoveringMouse:
                mouseController.registerHoveringMouseEvents(mouseController);
                break;
            default:
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'unknown Control Scheme Type Defaulting to Locked Mouse Events');
                mouseController.registerLockedMouseEvents(mouseController);
                break;
        }
        return mouseController;
    }
    /**
     * register touch events
     * @param fakeMouseTouch - the faked mouse touch event
     */
    registerTouch(fakeMouseTouch, videoElementParentClientRect) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Registering Touch', 6);
        if (fakeMouseTouch) {
            const fakeTouchController = new _FakeTouchController__WEBPACK_IMPORTED_MODULE_4__.FakeTouchController(this.toStreamerMessagesProvider, this.videoElementProvider, this.coordinateConverter);
            fakeTouchController.setVideoElementParentClientRect(videoElementParentClientRect);
            return fakeTouchController;
        }
        else {
            return new _TouchController__WEBPACK_IMPORTED_MODULE_5__.TouchController(this.toStreamerMessagesProvider, this.videoElementProvider, this.coordinateConverter);
        }
    }
    /**
     * registers a gamepad
     */
    registerGamePad() {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Register Game Pad', 7);
        const gamePadController = new _GamepadController__WEBPACK_IMPORTED_MODULE_6__.GamePadController(this.toStreamerMessagesProvider);
        return gamePadController;
    }
}
/**
 * A class that keeps track of current active keys
 */
class ActiveKeys {
    constructor() {
        this.activeKeys = [];
        this.activeKeys = [];
    }
    /**
     * Get the current array of active keys
     * @returns - an array of active keys
     */
    getActiveKeys() {
        return this.activeKeys;
    }
}


/***/ }),

/***/ "./src/Inputs/KeyboardController.ts":
/*!******************************************!*\
  !*** ./src/Inputs/KeyboardController.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_111650__) => {

__nested_webpack_require_111650__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_111650__.d(__webpack_exports__, {
/* harmony export */   "KeyboardController": () => (/* binding */ KeyboardController)
/* harmony export */ });
/* harmony import */ var _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_111650__(/*! ./SpecialKeyCodes */ "./src/Inputs/SpecialKeyCodes.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_111650__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_111650__(/*! ../Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_111650__(/*! ../Util/EventListenerTracker */ "./src/Util/EventListenerTracker.ts");
// Copyright Epic Games, Inc. All Rights Reserved.




/**
 * Handles the Keyboard Inputs for the document
 */
class KeyboardController {
    /**
     * @param toStreamerMessagesProvider Stream message provider class object
     * @param config The applications configuration. We're interested in the suppress browser keys option
     * @param activeKeysProvider Active keys provider class object
     */
    constructor(toStreamerMessagesProvider, config, activeKeysProvider) {
        // Utility for keeping track of event handlers and unregistering them
        this.keyboardEventListenerTracker = new _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__.EventListenerTracker();
        /*
         * New browser APIs have moved away from KeyboardEvent.keyCode to KeyboardEvent.Code.
         * For details see: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode#constants_for_keycode_value
         * We still use old KeyboardEvent.keyCode integers in the UE C++ side, so we need a way to map the new
         * string-based KeyboardEvent.Code to the old integers.
         */
        this.CodeToKeyCode = {
            Escape: 27,
            Digit0: 48,
            Digit1: 49,
            Digit2: 50,
            Digit3: 51,
            Digit4: 52,
            Digit5: 53,
            Digit6: 54,
            Digit7: 55,
            Digit8: 56,
            Digit9: 57,
            Minus: 173,
            Equal: 187,
            Backspace: 8,
            Tab: 9,
            KeyQ: 81,
            KeyW: 87,
            KeyE: 69,
            KeyR: 82,
            KeyT: 84,
            KeyY: 89,
            KeyU: 85,
            KeyI: 73,
            KeyO: 79,
            KeyP: 80,
            BracketLeft: 219,
            BracketRight: 221,
            Enter: 13,
            ControlLeft: 17,
            KeyA: 65,
            KeyS: 83,
            KeyD: 68,
            KeyF: 70,
            KeyG: 71,
            KeyH: 72,
            KeyJ: 74,
            KeyK: 75,
            KeyL: 76,
            Semicolon: 186,
            Quote: 222,
            Backquote: 192,
            ShiftLeft: 16,
            Backslash: 220,
            KeyZ: 90,
            KeyX: 88,
            KeyC: 67,
            KeyV: 86,
            KeyB: 66,
            KeyN: 78,
            KeyM: 77,
            Comma: 188,
            Period: 190,
            Slash: 191,
            ShiftRight: 253,
            AltLeft: 18,
            Space: 32,
            CapsLock: 20,
            F1: 112,
            F2: 113,
            F3: 114,
            F4: 115,
            F5: 116,
            F6: 117,
            F7: 118,
            F8: 119,
            F9: 120,
            F10: 121,
            F11: 122,
            F12: 123,
            Pause: 19,
            ScrollLock: 145,
            NumpadDivide: 111,
            NumpadMultiply: 106,
            NumpadSubtract: 109,
            NumpadAdd: 107,
            NumpadDecimal: 110,
            Numpad9: 105,
            Numpad8: 104,
            Numpad7: 103,
            Numpad6: 102,
            Numpad5: 101,
            Numpad4: 100,
            Numpad3: 99,
            Numpad2: 98,
            Numpad1: 97,
            Numpad0: 96,
            NumLock: 144,
            ControlRight: 254,
            AltRight: 255,
            Home: 36,
            End: 35,
            ArrowUp: 38,
            ArrowLeft: 37,
            ArrowRight: 39,
            ArrowDown: 40,
            PageUp: 33,
            PageDown: 34,
            Insert: 45,
            Delete: 46,
            ContextMenu: 93
        };
        this.toStreamerMessagesProvider = toStreamerMessagesProvider;
        this.config = config;
        this.activeKeysProvider = activeKeysProvider;
    }
    /**
     * Registers document keyboard events with the controller
     */
    registerKeyBoardEvents() {
        const compositionEndHandler = (ev) => this.handleOnCompositionEnd(ev);
        const keyDownHandler = (ev) => this.handleOnKeyDown(ev);
        const keyUpHandler = (ev) => this.handleOnKeyUp(ev);
        const keyPressHandler = (ev) => this.handleOnKeyPress(ev);
        document.addEventListener("compositionend", compositionEndHandler);
        document.addEventListener("keydown", keyDownHandler);
        document.addEventListener("keyup", keyUpHandler);
        //This has been deprecated as at Jun 13 2021
        document.addEventListener("keypress", keyPressHandler);
        this.keyboardEventListenerTracker.addUnregisterCallback(() => document.removeEventListener("compositionend", compositionEndHandler));
        this.keyboardEventListenerTracker.addUnregisterCallback(() => document.removeEventListener("keydown", keyDownHandler));
        this.keyboardEventListenerTracker.addUnregisterCallback(() => document.removeEventListener("keyup", keyUpHandler));
        this.keyboardEventListenerTracker.addUnregisterCallback(() => document.removeEventListener("keypress", keyPressHandler));
    }
    /**
     * Unregisters document keyboard events
     */
    unregisterKeyBoardEvents() {
        this.keyboardEventListenerTracker.unregisterAll();
    }
    /**
     * Handles When a key is down
     * @param keyboardEvent - Keyboard event
     */
    handleOnKeyDown(keyboardEvent) {
        const keyCode = this.getKeycode(keyboardEvent);
        if (!keyCode || keyCode === 229) {
            return;
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), `key down ${keyCode}, repeat = ${keyboardEvent.repeat}`, 6);
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('KeyDown')([
            this.getKeycode(keyboardEvent),
            keyboardEvent.repeat ? 1 : 0
        ]);
        const activeKeys = this.activeKeysProvider.getActiveKeys();
        activeKeys.push(keyCode);
        // Backspace is not considered a keypress in JavaScript but we need it
        // to be so characters may be deleted in a UE text entry field.
        if (keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_2__.SpecialKeyCodes.backSpace) {
            document.dispatchEvent(new KeyboardEvent('keypress', {
                charCode: _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_2__.SpecialKeyCodes.backSpace
            }));
        }
        if (this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_3__.Flags.SuppressBrowserKeys) &&
            this.isKeyCodeBrowserKey(keyCode)) {
            keyboardEvent.preventDefault();
        }
    }
    /**
     * handles when a key is up
     * @param keyboardEvent - Keyboard event
     */
    handleOnKeyUp(keyboardEvent) {
        const keyCode = this.getKeycode(keyboardEvent);
        if (!keyCode) {
            return;
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), `key up ${keyCode}`, 6);
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('KeyUp')([keyCode]);
        if (this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_3__.Flags.SuppressBrowserKeys) &&
            this.isKeyCodeBrowserKey(keyCode)) {
            keyboardEvent.preventDefault();
        }
    }
    /**
     * Handles when a key is press
     * @param keyboard - Keyboard Event
     */
    handleOnKeyPress(keyboard) {
        if (!('charCode' in keyboard)) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Warning(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'KeyboardEvent.charCode is deprecated in this browser, cannot send key press.');
            return;
        }
        const charCode = keyboard.charCode;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), `key press ${charCode}`, 6);
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('KeyPress')([charCode]);
    }
    /**
     * Handle whenever composition ends (eg chinese simplified)
     * @param compositionEvent - the composition event
     */
    handleOnCompositionEnd(compositionEvent) {
        if (compositionEvent.data && compositionEvent.data.length) {
            compositionEvent.data.split('').forEach((char) => {
                // This keydown, keypress, keyup flow is required to mimic the way characters are 
                // normally triggered
                this.handleOnKeyDown(new KeyboardEvent('keydown', {
                    keyCode: char.toUpperCase().charCodeAt(0),
                    charCode: char.charCodeAt(0)
                }));
                this.handleOnKeyPress(new KeyboardEvent('keypress', {
                    keyCode: char.toUpperCase().charCodeAt(0),
                    charCode: char.charCodeAt(0)
                }));
                this.handleOnKeyUp(new KeyboardEvent('keyup', {
                    keyCode: char.toUpperCase().charCodeAt(0),
                    charCode: char.charCodeAt(0)
                }));
            });
        }
    }
    /**
     * Gets the Keycode of the Key pressed
     * @param keyboardEvent - Key board Event
     * @returns - the key code of the Key
     */
    getKeycode(keyboardEvent) {
        // If we don't have keyCode property because browser API is deprecated then use KeyboardEvent.code instead.
        // See: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode#constants_for_keycode_value
        if (!('keyCode' in keyboardEvent)) {
            // Convert KeyboardEvent.code string into integer-based key code for backwards compatibility reasons.
            const event = keyboardEvent;
            if (event.code in this.CodeToKeyCode) {
                return this.CodeToKeyCode[event.code];
            }
            else {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Warning(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), `Keyboard code of ${event.code} is not supported in our mapping, ignoring this key.`);
                return null;
            }
        }
        // If we made it here KeyboardEvent.keyCode is still supported so we can safely use it.
        if (keyboardEvent.keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_2__.SpecialKeyCodes.shift &&
            keyboardEvent.code === 'ShiftRight') {
            return _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_2__.SpecialKeyCodes.rightShift;
        }
        else if (keyboardEvent.keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_2__.SpecialKeyCodes.control &&
            keyboardEvent.code === 'ControlRight') {
            return _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_2__.SpecialKeyCodes.rightControl;
        }
        else if (keyboardEvent.keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_2__.SpecialKeyCodes.alt &&
            keyboardEvent.code === 'AltRight') {
            return _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_2__.SpecialKeyCodes.rightAlt;
        }
        else {
            return keyboardEvent.keyCode;
        }
    }
    /**
     * Browser keys do not have a charCode so we only need to test keyCode.
     * @param keyCode - the browser keycode number
     */
    isKeyCodeBrowserKey(keyCode) {
        // Function keys or tab key are considered "browser keys" that we may wish to suppress by preventing them being process by browser.
        return (keyCode >= 112 && keyCode <= 123) || keyCode === 9;
    }
}


/***/ }),

/***/ "./src/Inputs/LockedMouseEvents.ts":
/*!*****************************************!*\
  !*** ./src/Inputs/LockedMouseEvents.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_124616__) => {

__nested_webpack_require_124616__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_124616__.d(__webpack_exports__, {
/* harmony export */   "LockedMouseEvents": () => (/* binding */ LockedMouseEvents)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_124616__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_124616__(/*! ../Util/EventListenerTracker */ "./src/Util/EventListenerTracker.ts");
// Copyright Epic Games, Inc. All Rights Reserved.


/**
 * Handle the mouse locked events
 */
class LockedMouseEvents {
    /**
     * @param videoElementProvider - Video Player instance
     * @param mouseController - Mouse controller instance
     * @param activeKeysProvider - Active keys provider instance
     * @param playerStyleAttributesProvider - Player style attributes instance
     */
    constructor(videoElementProvider, mouseController, activeKeysProvider) {
        this.x = 0;
        this.y = 0;
        this.updateMouseMovePositionEvent = (mouseEvent) => {
            this.updateMouseMovePosition(mouseEvent);
        };
        // Utility for keeping track of event handlers and unregistering them
        this.mouseEventListenerTracker = new _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__.EventListenerTracker();
        this.videoElementProvider = videoElementProvider;
        this.mouseController = mouseController;
        this.activeKeysProvider = activeKeysProvider;
        const videoElementParent = this.videoElementProvider.getVideoParentElement();
        this.x = videoElementParent.getBoundingClientRect().width / 2;
        this.y = videoElementParent.getBoundingClientRect().height / 2;
        this.coord =
            this.mouseController.coordinateConverter.normalizeAndQuantizeUnsigned(this.x, this.y);
    }
    /**
     * Unregisters all event handlers
     */
    unregisterMouseEvents() {
        this.mouseEventListenerTracker.unregisterAll();
    }
    /**
     * Handle when the locked state Changed
     */
    lockStateChange() {
        const videoElementParent = this.videoElementProvider.getVideoParentElement();
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        if (document.pointerLockElement === videoElementParent ||
            document.mozPointerLockElement === videoElementParent) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'Pointer locked', 6);
            document.addEventListener('mousemove', this.updateMouseMovePositionEvent, false);
            this.mouseEventListenerTracker.addUnregisterCallback(() => document.removeEventListener('mousemove', this.updateMouseMovePositionEvent, false));
        }
        else {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'The pointer lock status is now unlocked', 6);
            // !a new arrow function must not be used here as it will be counted as a new function that cannot be removed
            document.removeEventListener('mousemove', this.updateMouseMovePositionEvent, false);
            // If mouse loses focus, send a key up for all of the currently held-down keys
            // This is necessary as when the mouse loses focus, the windows stops listening for events and as such
            // the keyup listener won't get fired
            let activeKeys = this.activeKeysProvider.getActiveKeys();
            const setKeys = new Set(activeKeys);
            const newKeysIterable = [];
            setKeys.forEach((setKey) => {
                newKeysIterable[setKey];
            });
            newKeysIterable.forEach((uniqueKeycode) => {
                toStreamerHandlers.get('KeyUp')([uniqueKeycode]);
            });
            // Reset the active keys back to nothing
            activeKeys = [];
        }
    }
    /**
     * Handle the mouse move event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    updateMouseMovePosition(mouseEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        const styleWidth = this.videoElementProvider.getVideoParentElement().clientWidth;
        const styleHeight = this.videoElementProvider.getVideoParentElement().clientHeight;
        this.x += mouseEvent.movementX;
        this.y += mouseEvent.movementY;
        if (this.x > styleWidth) {
            this.x -= styleWidth;
        }
        if (this.y > styleHeight) {
            this.y -= styleHeight;
        }
        if (this.x < 0) {
            this.x = styleWidth + this.x;
        }
        if (this.y < 0) {
            this.y = styleHeight - this.y;
        }
        this.coord =
            this.mouseController.coordinateConverter.normalizeAndQuantizeUnsigned(this.x, this.y);
        const delta = this.mouseController.coordinateConverter.normalizeAndQuantizeSigned(mouseEvent.movementX, mouseEvent.movementY);
        toStreamerHandlers.get('MouseMove')([
            this.coord.x,
            this.coord.y,
            delta.x,
            delta.y
        ]);
    }
    /**
     * Handle the mouse Down event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    handleMouseDown(mouseEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseDown')([
            mouseEvent.button,
            // We use the store value of this.coord as opposed to the mouseEvent.x/y as the mouseEvent location
            // uses the system cursor location which hasn't moved
            this.coord.x,
            this.coord.y
        ]);
    }
    /**
     * Handle the mouse Up event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    handleMouseUp(mouseEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseUp')([
            mouseEvent.button,
            // We use the store value of this.coord as opposed to the mouseEvent.x/y as the mouseEvent location
            // uses the system cursor location which hasn't moved
            this.coord.x,
            this.coord.y
        ]);
    }
    /**
     * Handle the mouse wheel event, sends the mouse wheel data to the UE Instance
     * @param wheelEvent - Mouse Event
     */
    handleMouseWheel(wheelEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseWheel')([
            wheelEvent.wheelDelta,
            // We use the store value of this.coord as opposed to the mouseEvent.x/y as the mouseEvent location
            // uses the system cursor location which hasn't moved
            this.coord.x,
            this.coord.y
        ]);
    }
    /**
     * Handle the mouse double click event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    handleMouseDouble(mouseEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseDouble')([
            mouseEvent.button,
            // We use the store value of this.coord as opposed to the mouseEvent.x/y as the mouseEvent location
            // uses the system cursor location which hasn't moved
            this.coord.x,
            this.coord.y
        ]);
    }
    /**
     * Handle the press mouse buttons event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    handlePressMouseButtons(mouseEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        this.mouseController.pressMouseButtons(mouseEvent.buttons, this.x, this.y);
    }
    /**
     * Handle the release mouse buttons event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    handleReleaseMouseButtons(mouseEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        this.mouseController.releaseMouseButtons(mouseEvent.buttons, this.x, this.y);
    }
}


/***/ }),

/***/ "./src/Inputs/MouseButtons.ts":
/*!************************************!*\
  !*** ./src/Inputs/MouseButtons.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_133918__) => {

__nested_webpack_require_133918__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_133918__.d(__webpack_exports__, {
/* harmony export */   "MouseButton": () => (/* binding */ MouseButton),
/* harmony export */   "MouseButtonsMask": () => (/* binding */ MouseButtonsMask)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * Mouse Button Data
 * {@link https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button}
 */
class MouseButton {
}
MouseButton.mainButton = 0; // Left button.
MouseButton.auxiliaryButton = 1; // Wheel button.
MouseButton.secondaryButton = 2; // Right button.
MouseButton.fourthButton = 3; // Browser Back button.
MouseButton.fifthButton = 4; // Browser Forward button.
/**
 * Mouse Button Mask Data
 * {@link https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons}
 */
class MouseButtonsMask {
}
MouseButtonsMask.primaryButton = 1; // Left button.
MouseButtonsMask.secondaryButton = 2; // Right button.
MouseButtonsMask.auxiliaryButton = 4; // Wheel button.
MouseButtonsMask.fourthButton = 8; // Browser Back button.
MouseButtonsMask.fifthButton = 16; // Browser Forward button.


/***/ }),

/***/ "./src/Inputs/MouseController.ts":
/*!***************************************!*\
  !*** ./src/Inputs/MouseController.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_135357__) => {

__nested_webpack_require_135357__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_135357__.d(__webpack_exports__, {
/* harmony export */   "MouseController": () => (/* binding */ MouseController)
/* harmony export */ });
/* harmony import */ var _MouseButtons__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_135357__(/*! ./MouseButtons */ "./src/Inputs/MouseButtons.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_135357__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _LockedMouseEvents__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_135357__(/*! ./LockedMouseEvents */ "./src/Inputs/LockedMouseEvents.ts");
/* harmony import */ var _HoveringMouseEvents__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_135357__(/*! ./HoveringMouseEvents */ "./src/Inputs/HoveringMouseEvents.ts");
/* harmony import */ var _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_135357__(/*! ../Util/EventListenerTracker */ "./src/Util/EventListenerTracker.ts");
// Copyright Epic Games, Inc. All Rights Reserved.





/**
 * Handles the Mouse Inputs for the document
 */
class MouseController {
    /**
     * @param toStreamerMessagesProvider - Stream message instance
     * @param videoElementProvider - Video Player instance
     * @param normalizeAndQuantize - A normalize and quantize instance
     */
    constructor(toStreamerMessagesProvider, videoElementProvider, coordinateConverter, activeKeysProvider) {
        // Utility for keeping track of event handlers and unregistering them
        this.mouseEventListenerTracker = new _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__.EventListenerTracker();
        this.toStreamerMessagesProvider = toStreamerMessagesProvider;
        this.coordinateConverter = coordinateConverter;
        this.videoElementProvider = videoElementProvider;
        this.activeKeysProvider = activeKeysProvider;
        this.registerMouseEnterAndLeaveEvents();
    }
    /**
     * Clears all the click events on the current video element parent div
     */
    unregisterMouseEvents() {
        this.mouseEventListenerTracker.unregisterAll();
    }
    /**
     * Register a locked mouse class
     * @param mouseController - a mouse controller instance
     * @param playerStyleAttributesProvider - a player style attributes instance
     */
    registerLockedMouseEvents(mouseController) {
        const videoElementParent = this.videoElementProvider.getVideoParentElement();
        const lockedMouseEvents = new _LockedMouseEvents__WEBPACK_IMPORTED_MODULE_1__.LockedMouseEvents(this.videoElementProvider, mouseController, this.activeKeysProvider);
        videoElementParent.requestPointerLock =
            videoElementParent.requestPointerLock ||
                videoElementParent.mozRequestPointerLock;
        document.exitPointerLock =
            document.exitPointerLock || document.mozExitPointerLock;
        // minor hack to alleviate ios not supporting pointerlock
        if (videoElementParent.requestPointerLock) {
            const onclick = () => {
                videoElementParent.requestPointerLock();
            };
            videoElementParent.addEventListener('click', onclick);
            this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('click', onclick));
        }
        const lockStateChangeListener = () => lockedMouseEvents.lockStateChange();
        document.addEventListener('pointerlockchange', lockStateChangeListener, false);
        document.addEventListener('mozpointerlockchange', lockStateChangeListener, false);
        this.mouseEventListenerTracker.addUnregisterCallback(() => document.removeEventListener('pointerlockchange', lockStateChangeListener, false));
        this.mouseEventListenerTracker.addUnregisterCallback(() => document.removeEventListener('mozpointerlockchange', lockStateChangeListener, false));
        const onmousedown = (mouseEvent) => lockedMouseEvents.handleMouseDown(mouseEvent);
        const onmouseup = (mouseEvent) => lockedMouseEvents.handleMouseUp(mouseEvent);
        const onwheel = (wheelEvent) => lockedMouseEvents.handleMouseWheel(wheelEvent);
        const ondblclick = (mouseEvent) => lockedMouseEvents.handleMouseDouble(mouseEvent);
        videoElementParent.addEventListener('mousedown', onmousedown);
        videoElementParent.addEventListener('mouseup', onmouseup);
        videoElementParent.addEventListener('wheel', onwheel);
        videoElementParent.addEventListener('dblclick', ondblclick);
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('mousedown', onmousedown));
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('mouseup', onmouseup));
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('wheel', onwheel));
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('dblclick', ondblclick));
        this.mouseEventListenerTracker.addUnregisterCallback(() => lockedMouseEvents.unregisterMouseEvents());
        this.mouseEventListenerTracker.addUnregisterCallback(() => {
            if (document.exitPointerLock &&
                (document.pointerLockElement === videoElementParent ||
                    document.mozPointerLockElement === videoElementParent)) {
                document.exitPointerLock();
            }
        });
    }
    /**
     * Register a hovering mouse class
     * @param mouseController - A mouse controller object
     */
    registerHoveringMouseEvents(mouseController) {
        const videoElementParent = this.videoElementProvider.getVideoParentElement();
        const hoveringMouseEvents = new _HoveringMouseEvents__WEBPACK_IMPORTED_MODULE_2__.HoveringMouseEvents(mouseController);
        const onmousemove = (mouseEvent) => hoveringMouseEvents.updateMouseMovePosition(mouseEvent);
        const onmousedown = (mouseEvent) => hoveringMouseEvents.handleMouseDown(mouseEvent);
        const onmouseup = (mouseEvent) => hoveringMouseEvents.handleMouseUp(mouseEvent);
        const oncontextmenu = (mouseEvent) => hoveringMouseEvents.handleContextMenu(mouseEvent);
        const onwheel = (wheelEvent) => hoveringMouseEvents.handleMouseWheel(wheelEvent);
        const ondblclick = (mouseEvent) => hoveringMouseEvents.handleMouseDouble(mouseEvent);
        videoElementParent.addEventListener('mousemove', onmousemove);
        videoElementParent.addEventListener('mousedown', onmousedown);
        videoElementParent.addEventListener('mouseup', onmouseup);
        videoElementParent.addEventListener('contextmenu', oncontextmenu);
        videoElementParent.addEventListener('wheel', onwheel);
        videoElementParent.addEventListener('dblclick', ondblclick);
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('mousemove', onmousemove));
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('mousedown', onmousedown));
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('mouseup', onmouseup));
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('contextmenu', oncontextmenu));
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('wheel', onwheel));
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('dblclick', ondblclick));
        this.mouseEventListenerTracker.addUnregisterCallback(() => hoveringMouseEvents.unregisterMouseEvents());
    }
    /**
     * Set the mouse enter and mouse leave events
     */
    registerMouseEnterAndLeaveEvents() {
        const videoElementParent = this.videoElementProvider.getVideoParentElement();
        // Handle when the Mouse has entered the element
        const onmouseenter = (event) => {
            if (!this.videoElementProvider.isVideoReady()) {
                return;
            }
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_3__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_3__.Logger.GetStackTrace(), 'Mouse Entered', 6);
            this.sendMouseEnter();
            this.pressMouseButtons(event.buttons, event.x, event.y);
        };
        // Handles when the mouse has left the element
        const onmouseleave = (event) => {
            if (!this.videoElementProvider.isVideoReady()) {
                return;
            }
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_3__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_3__.Logger.GetStackTrace(), 'Mouse Left', 6);
            this.sendMouseLeave();
            this.releaseMouseButtons(event.buttons, event.x, event.y);
        };
        videoElementParent.addEventListener('mouseenter', onmouseenter);
        videoElementParent.addEventListener('mouseleave', onmouseleave);
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('mouseenter', onmouseenter));
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('mouseleave', onmouseleave));
    }
    /**
     * Handle when a mouse button is released
     * @param buttons - Mouse Button
     * @param X - Mouse pointer X coordinate
     * @param Y - Mouse pointer Y coordinate
     */
    releaseMouseButtons(buttons, X, Y) {
        const coord = this.coordinateConverter.normalizeAndQuantizeUnsigned(X, Y);
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButtonsMask.primaryButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButton.mainButton, coord.x, coord.y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButtonsMask.secondaryButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButton.secondaryButton, coord.x, coord.y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButtonsMask.auxiliaryButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButton.auxiliaryButton, coord.x, coord.y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButtonsMask.fourthButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButton.fourthButton, coord.x, coord.y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButtonsMask.fifthButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButton.fifthButton, coord.x, coord.y);
        }
    }
    /**
     * Handle when a mouse button is pressed
     * @param buttons - Mouse Button
     * @param X - Mouse pointer X coordinate
     * @param Y - Mouse pointer Y coordinate
     */
    pressMouseButtons(buttons, X, Y) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        const coord = this.coordinateConverter.normalizeAndQuantizeUnsigned(X, Y);
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButtonsMask.primaryButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButton.mainButton, coord.x, coord.y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButtonsMask.secondaryButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButton.secondaryButton, coord.x, coord.y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButtonsMask.auxiliaryButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButton.auxiliaryButton, coord.x, coord.y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButtonsMask.fourthButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButton.fourthButton, coord.x, coord.y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButtonsMask.fifthButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButton.fifthButton, coord.x, coord.y);
        }
    }
    /**
     * Handles mouse enter
     */
    sendMouseEnter() {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseEnter')();
    }
    /**
     * Handles mouse Leave
     */
    sendMouseLeave() {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseLeave')();
    }
    /**
     * Handles when a mouse button is pressed down
     * @param button - Mouse Button Pressed
     * @param X  - Mouse X Coordinate
     * @param Y  - Mouse Y Coordinate
     */
    sendMouseDown(button, X, Y) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_3__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_3__.Logger.GetStackTrace(), `mouse button ${button} down at (${X}, ${Y})`, 6);
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseDown')([button, X, Y]);
    }
    /**
     * Handles when a mouse button is pressed up
     * @param button - Mouse Button Pressed
     * @param X  - Mouse X Coordinate
     * @param Y  - Mouse Y Coordinate
     */
    sendMouseUp(button, X, Y) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_3__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_3__.Logger.GetStackTrace(), `mouse button ${button} up at (${X}, ${Y})`, 6);
        const coord = this.coordinateConverter.normalizeAndQuantizeUnsigned(X, Y);
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseUp')([button, coord.x, coord.y]);
    }
}


/***/ }),

/***/ "./src/Inputs/SpecialKeyCodes.ts":
/*!***************************************!*\
  !*** ./src/Inputs/SpecialKeyCodes.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_150153__) => {

__nested_webpack_require_150153__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_150153__.d(__webpack_exports__, {
/* harmony export */   "SpecialKeyCodes": () => (/* binding */ SpecialKeyCodes)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * Registers the Special Key codes
 *  Must be kept in sync with JavaScriptKeyCodeToFKey C++ array.
 * The index of the entry in the array is the special key code given below.
 */
class SpecialKeyCodes {
}
SpecialKeyCodes.backSpace = 8;
SpecialKeyCodes.shift = 16;
SpecialKeyCodes.control = 17;
SpecialKeyCodes.alt = 18;
SpecialKeyCodes.rightShift = 253;
SpecialKeyCodes.rightControl = 254;
SpecialKeyCodes.rightAlt = 255;


/***/ }),

/***/ "./src/Inputs/TouchController.ts":
/*!***************************************!*\
  !*** ./src/Inputs/TouchController.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_151130__) => {

__nested_webpack_require_151130__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_151130__.d(__webpack_exports__, {
/* harmony export */   "TouchController": () => (/* binding */ TouchController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_151130__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_151130__(/*! ../Util/EventListenerTracker */ "./src/Util/EventListenerTracker.ts");
// Copyright Epic Games, Inc. All Rights Reserved.


/**
 * Handles the Touch input Events
 */
class TouchController {
    /**
     * @param toStreamerMessagesProvider - Stream message instance
     * @param videoElementProvider - Video Player instance
     * @param coordinateConverter - A coordinate converter instance
     */
    constructor(toStreamerMessagesProvider, videoElementProvider, coordinateConverter) {
        this.fingers = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0];
        this.fingerIds = new Map();
        this.maxByteValue = 255;
        // Utility for keeping track of event handlers and unregistering them
        this.touchEventListenerTracker = new _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__.EventListenerTracker();
        this.toStreamerMessagesProvider = toStreamerMessagesProvider;
        this.videoElementProvider = videoElementProvider;
        this.coordinateConverter = coordinateConverter;
        this.videoElementParent = videoElementProvider.getVideoElement();
        const ontouchstart = (ev) => this.onTouchStart(ev);
        const ontouchend = (ev) => this.onTouchEnd(ev);
        const ontouchmove = (ev) => this.onTouchMove(ev);
        this.videoElementParent.addEventListener('touchstart', ontouchstart);
        this.videoElementParent.addEventListener('touchend', ontouchend);
        this.videoElementParent.addEventListener('touchmove', ontouchmove);
        this.touchEventListenerTracker.addUnregisterCallback(() => this.videoElementParent.removeEventListener('touchstart', ontouchstart));
        this.touchEventListenerTracker.addUnregisterCallback(() => this.videoElementParent.removeEventListener('touchend', ontouchend));
        this.touchEventListenerTracker.addUnregisterCallback(() => this.videoElementParent.removeEventListener('touchmove', ontouchmove));
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'Touch Events Registered', 6);
        // is this strictly necessary?
        const preventOnTouchMove = (event) => {
            event.preventDefault();
        };
        document.addEventListener('touchmove', preventOnTouchMove);
        this.touchEventListenerTracker.addUnregisterCallback(() => document.removeEventListener('touchmove', preventOnTouchMove));
    }
    /**
     * Unregister all touch events
     */
    unregisterTouchEvents() {
        this.touchEventListenerTracker.unregisterAll();
    }
    /**
     * Remember a touch command
     * @param touch - the touch command
     */
    rememberTouch(touch) {
        const finger = this.fingers.pop();
        if (finger === undefined) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'exhausted touch identifiers', 6);
        }
        this.fingerIds.set(touch.identifier, finger);
    }
    /**
     * Forgets a touch command
     * @param touch - the touch command
     */
    forgetTouch(touch) {
        this.fingers.push(this.fingerIds.get(touch.identifier));
        // Sort array back into descending order. This means if finger '1' were to lift after finger '0', we would ensure that 0 will be the first index to pop
        this.fingers.sort(function (a, b) {
            return b - a;
        });
        this.fingerIds.delete(touch.identifier);
    }
    /**
     * When a touch event starts
     * @param touchEvent - the touch event being intercepted
     */
    onTouchStart(touchEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        for (let t = 0; t < touchEvent.changedTouches.length; t++) {
            this.rememberTouch(touchEvent.changedTouches[t]);
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'touch start', 6);
        this.emitTouchData('TouchStart', touchEvent.changedTouches);
        touchEvent.preventDefault();
    }
    /**
     * When a touch event ends
     * @param touchEvent - the touch event being intercepted
     */
    onTouchEnd(touchEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'touch end', 6);
        this.emitTouchData('TouchEnd', touchEvent.changedTouches);
        // Re-cycle unique identifiers previously assigned to each touch.
        for (let t = 0; t < touchEvent.changedTouches.length; t++) {
            this.forgetTouch(touchEvent.changedTouches[t]);
        }
        touchEvent.preventDefault();
    }
    /**
     * when a moving touch event occurs
     * @param touchEvent - the touch event being intercepted
     */
    onTouchMove(touchEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'touch move', 6);
        this.emitTouchData('TouchMove', touchEvent.touches);
        touchEvent.preventDefault();
    }
    emitTouchData(type, touches) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        const offset = this.videoElementProvider.getVideoParentElement().getBoundingClientRect();
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        for (let t = 0; t < touches.length; t++) {
            const numTouches = 1; // the number of touches to be sent this message
            const touch = touches[t];
            const x = touch.clientX - offset.left;
            const y = touch.clientY - offset.top;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), `F${this.fingerIds.get(touch.identifier)}=(${x}, ${y})`, 6);
            const coord = this.coordinateConverter.normalizeAndQuantizeUnsigned(x, y);
            switch (type) {
                case 'TouchStart':
                    toStreamerHandlers.get('TouchStart')([
                        numTouches,
                        coord.x,
                        coord.y,
                        this.fingerIds.get(touch.identifier),
                        this.maxByteValue * (touch.force > 0 ? touch.force : 1),
                        coord.inRange ? 1 : 0
                    ]);
                    break;
                case 'TouchEnd':
                    toStreamerHandlers.get('TouchEnd')([
                        numTouches,
                        coord.x,
                        coord.y,
                        this.fingerIds.get(touch.identifier),
                        this.maxByteValue * touch.force,
                        coord.inRange ? 1 : 0
                    ]);
                    break;
                case 'TouchMove':
                    toStreamerHandlers.get('TouchMove')([
                        numTouches,
                        coord.x,
                        coord.y,
                        this.fingerIds.get(touch.identifier),
                        this.maxByteValue * (touch.force > 0 ? touch.force : 1),
                        coord.inRange ? 1 : 0
                    ]);
                    break;
            }
        }
    }
}


/***/ }),

/***/ "./src/Inputs/XRGamepadController.ts":
/*!*******************************************!*\
  !*** ./src/Inputs/XRGamepadController.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_159497__) => {

__nested_webpack_require_159497__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_159497__.d(__webpack_exports__, {
/* harmony export */   "XRGamepadController": () => (/* binding */ XRGamepadController)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * The class that handles the functionality of xrgamepads and controllers
 */
class XRGamepadController {
    /**
     * @param toStreamerMessagesProvider - Stream message instance
     */
    constructor(toStreamerMessagesProvider) {
        this.toStreamerMessagesProvider = toStreamerMessagesProvider;
        this.controllers = [];
    }
    /**
     * Deep copies a gamepad's values by first converting it to a JSON object and then back to a gamepad
     *
     * @param gamepad the original gamepad
     * @returns a new gamepad object, populated with the original gamepads values
     */
    static deepCopyGamepad(gamepad) {
        return JSON.parse(JSON.stringify({
            buttons: gamepad.buttons.map((b) => JSON.parse(JSON.stringify({
                pressed: b.pressed,
                touched: b.touched,
                value: b.value
            }))),
            axes: gamepad.axes
        }));
    }
    updateStatus(source, frame, refSpace) {
        if (source.gamepad) {
            const gamepadPose = frame.getPose(source.gripSpace, refSpace);
            if (!gamepadPose) {
                return;
            }
            let system = 0;
            if (source.profiles.includes('htc-vive')) {
                system = 1;
            }
            else if (source.profiles.includes('oculus-touch')) {
                system = 2;
            }
            // TODO (william.belcher): Add other profiles (Quest, Microsoft Mixed Reality, etc)
            this.toStreamerMessagesProvider.toStreamerHandlers.get('XRSystem')([
                system
            ]);
            // Default: AnyHand (2)
            let handedness = 2;
            switch (source.handedness) {
                case 'left':
                    handedness = 0;
                    break;
                case 'right':
                    handedness = 1;
                    break;
            }
            // Send controller transform
            const matrix = gamepadPose.transform.matrix;
            const mat = [];
            for (let i = 0; i < 16; i++) {
                mat[i] = new Float32Array([matrix[i]])[0];
            }
            // prettier-ignore
            this.toStreamerMessagesProvider.toStreamerHandlers.get('XRControllerTransform')([
                mat[0], mat[4], mat[8], mat[12],
                mat[1], mat[5], mat[9], mat[13],
                mat[2], mat[6], mat[10], mat[14],
                mat[3], mat[7], mat[11], mat[15],
                handedness
            ]);
            // Handle controller buttons and axes
            if (this.controllers[handedness] === undefined) {
                this.controllers[handedness] = {
                    prevState: undefined,
                    currentState: undefined,
                    id: undefined
                };
                this.controllers[handedness].prevState = XRGamepadController.deepCopyGamepad(source.gamepad);
            }
            this.controllers[handedness].currentState = XRGamepadController.deepCopyGamepad(source.gamepad);
            const controller = this.controllers[handedness];
            const currState = controller.currentState;
            const prevState = controller.prevState;
            // Iterate over buttons
            for (let i = 0; i < currState.buttons.length; i++) {
                const currButton = currState.buttons[i];
                const prevButton = prevState.buttons[i];
                if (currButton.pressed) {
                    // press
                    let isRepeat = prevButton.pressed ? 1 : 0;
                    this.toStreamerMessagesProvider.toStreamerHandlers.get('XRButtonPressed')([handedness, i, isRepeat]);
                }
                else if (prevButton.pressed) {
                    this.toStreamerMessagesProvider.toStreamerHandlers.get('XRButtonReleased')([handedness, i, 0]);
                }
                if (currButton.touched) {
                    // touched
                    let isRepeat = prevButton.touched ? 1 : 0;
                    this.toStreamerMessagesProvider.toStreamerHandlers.get('XRButtonTouched')([handedness, i, isRepeat]);
                }
                else if (prevButton.touched) {
                    this.toStreamerMessagesProvider.toStreamerHandlers.get('XRButtonTouchReleased')([handedness, i, 0]);
                }
            }
            // Iterate over gamepad axes
            for (let i = 0; i < currState.axes.length; i++) {
                let curAxisValue = currState.axes[i];
                let prevAxisValue = prevState.axes[i];
                // Only send axis update if there is a change
                if (curAxisValue != prevAxisValue) {
                    this.toStreamerMessagesProvider.toStreamerHandlers.get('XRAnalog')([handedness, i, curAxisValue]);
                }
            }
            this.controllers[handedness].prevState = currState;
        }
    }
}


/***/ }),

/***/ "./src/Logger/Logger.ts":
/*!******************************!*\
  !*** ./src/Logger/Logger.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_165039__) => {

__nested_webpack_require_165039__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_165039__.d(__webpack_exports__, {
/* harmony export */   "Logger": () => (/* binding */ Logger)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
class Logger {
    /**
     * Captures the stack and returns it
     * @returns the current stack
     */
    static GetStackTrace() {
        const error = new Error();
        let formattedStack = 'No Stack Available for this browser';
        // format the error
        if (error.stack) {
            formattedStack = error.stack.toString().replace(/Error/g, '');
        }
        return formattedStack;
    }
    /**
     * Set the log verbosity level
     */
    static SetLoggerVerbosity(verboseLogLevel) {
        if (this.verboseLogLevel != null) {
            this.verboseLogLevel = verboseLogLevel;
        }
    }
    /**
     * The standard logging output
     * @param stack - the stack trace
     * @param message - the message to be logged
     * @param verbosity - the verbosity level
     */
    static Log(stack, message, verbosity) {
        if (verbosity > this.verboseLogLevel) {
            return;
        }
        const returnString = `Level: Log\nMsg: ${message}\nCaller: ${stack}`;
        console.log(returnString);
    }
    /**
     * The standard logging output
     * @param stack - the stack trace
     * @param message - the message to be logged
     * @param verbosity - the verbosity level
     */
    static Info(stack, message, verbosity) {
        if (verbosity > this.verboseLogLevel) {
            return;
        }
        const returnString = `Level: Info\nMsg: ${message}`;
        console.info(returnString);
    }
    /**
     * The standard logging output
     * @param stack - the stack trace
     * @param message - the message to be logged
     */
    static Error(stack, message) {
        const returnString = `Level: Error\nMsg: ${message}\nCaller: ${stack}`;
        console.error(returnString);
    }
    /**
     * The standard logging output
     * @param stack - the stack trace
     * @param message - the message to be logged
     */
    static Warning(stack, message) {
        const returnString = `Level: Warning\nCaller: ${stack}\nMsg: ${message}`;
        console.warn(returnString);
    }
}
Logger.verboseLogLevel = 2;


/***/ }),

/***/ "./src/PeerConnectionController/AggregatedStats.ts":
/*!*********************************************************!*\
  !*** ./src/PeerConnectionController/AggregatedStats.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_167784__) => {

__nested_webpack_require_167784__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_167784__.d(__webpack_exports__, {
/* harmony export */   "AggregatedStats": () => (/* binding */ AggregatedStats)
/* harmony export */ });
/* harmony import */ var _InboundRTPStats__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_167784__(/*! ./InboundRTPStats */ "./src/PeerConnectionController/InboundRTPStats.ts");
/* harmony import */ var _DataChannelStats__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_167784__(/*! ./DataChannelStats */ "./src/PeerConnectionController/DataChannelStats.ts");
/* harmony import */ var _CandidateStat__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_167784__(/*! ./CandidateStat */ "./src/PeerConnectionController/CandidateStat.ts");
/* harmony import */ var _OutBoundRTPStats__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_167784__(/*! ./OutBoundRTPStats */ "./src/PeerConnectionController/OutBoundRTPStats.ts");
/* harmony import */ var _SessionStats__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_167784__(/*! ./SessionStats */ "./src/PeerConnectionController/SessionStats.ts");
/* harmony import */ var _StreamStats__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_167784__(/*! ./StreamStats */ "./src/PeerConnectionController/StreamStats.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_167784__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.







class AggregatedStats {
    constructor() {
        this.inboundVideoStats = new _InboundRTPStats__WEBPACK_IMPORTED_MODULE_0__.InboundVideoStats();
        this.inboundAudioStats = new _InboundRTPStats__WEBPACK_IMPORTED_MODULE_0__.InboundAudioStats();
        this.DataChannelStats = new _DataChannelStats__WEBPACK_IMPORTED_MODULE_1__.DataChannelStats();
        this.outBoundVideoStats = new _OutBoundRTPStats__WEBPACK_IMPORTED_MODULE_2__.OutBoundVideoStats();
        this.sessionStats = new _SessionStats__WEBPACK_IMPORTED_MODULE_3__.SessionStats();
        this.streamStats = new _StreamStats__WEBPACK_IMPORTED_MODULE_4__.StreamStats();
        this.codecs = new Map();
    }
    /**
     * Gather all the information from the RTC Peer Connection Report
     * @param rtcStatsReport - RTC Stats Report
     */
    processStats(rtcStatsReport) {
        this.localCandidates = new Array();
        this.remoteCandidates = new Array();
        this.candidatePairs = new Array();
        rtcStatsReport.forEach((stat) => {
            const type = stat.type;
            switch (type) {
                case 'candidate-pair':
                    this.handleCandidatePair(stat);
                    break;
                case 'certificate':
                    break;
                case 'codec':
                    this.handleCodec(stat);
                    break;
                case 'data-channel':
                    this.handleDataChannel(stat);
                    break;
                case 'inbound-rtp':
                    this.handleInBoundRTP(stat);
                    break;
                case 'local-candidate':
                    this.handleLocalCandidate(stat);
                    break;
                case 'media-source':
                    break;
                case 'media-playout':
                    break;
                case 'outbound-rtp':
                    break;
                case 'peer-connection':
                    break;
                case 'remote-candidate':
                    this.handleRemoteCandidate(stat);
                    break;
                case 'remote-inbound-rtp':
                    break;
                case 'remote-outbound-rtp':
                    this.handleRemoteOutBound(stat);
                    break;
                case 'track':
                    this.handleTrack(stat);
                    break;
                case 'transport':
                    this.handleTransport(stat);
                    break;
                case 'stream':
                    this.handleStream(stat);
                    break;
                default:
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), 'unhandled Stat Type');
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), stat);
                    break;
            }
        });
    }
    /**
     * Process stream stats data from webrtc
     *
     * @param stat - the stats coming in from webrtc
     */
    handleStream(stat) {
        this.streamStats = stat;
    }
    /**
     * Process the Ice Candidate Pair Data
     * @param stat - the stats coming in from ice candidates
     */
    handleCandidatePair(stat) {
        // Add the candidate pair to the candidate pair array
        this.candidatePairs.push(stat);
    }
    /**
     * Process the Data Channel Data
     * @param stat - the stats coming in from the data channel
     */
    handleDataChannel(stat) {
        this.DataChannelStats.bytesReceived = stat.bytesReceived;
        this.DataChannelStats.bytesSent = stat.bytesSent;
        this.DataChannelStats.dataChannelIdentifier =
            stat.dataChannelIdentifier;
        this.DataChannelStats.id = stat.id;
        this.DataChannelStats.label = stat.label;
        this.DataChannelStats.messagesReceived = stat.messagesReceived;
        this.DataChannelStats.messagesSent = stat.messagesSent;
        this.DataChannelStats.protocol = stat.protocol;
        this.DataChannelStats.state = stat.state;
        this.DataChannelStats.timestamp = stat.timestamp;
    }
    /**
     * Process the Local Ice Candidate Data
     * @param stat - local stats
     */
    handleLocalCandidate(stat) {
        const localCandidate = new _CandidateStat__WEBPACK_IMPORTED_MODULE_6__.CandidateStat();
        localCandidate.label = 'local-candidate';
        localCandidate.address = stat.address;
        localCandidate.port = stat.port;
        localCandidate.protocol = stat.protocol;
        localCandidate.candidateType = stat.candidateType;
        localCandidate.id = stat.id;
        localCandidate.relayProtocol = stat.relayProtocol;
        localCandidate.transportId = stat.transportId;
        this.localCandidates.push(localCandidate);
    }
    /**
     * Process the Remote Ice Candidate Data
     * @param stat - ice candidate stats
     */
    handleRemoteCandidate(stat) {
        const RemoteCandidate = new _CandidateStat__WEBPACK_IMPORTED_MODULE_6__.CandidateStat();
        RemoteCandidate.label = 'remote-candidate';
        RemoteCandidate.address = stat.address;
        RemoteCandidate.port = stat.port;
        RemoteCandidate.protocol = stat.protocol;
        RemoteCandidate.id = stat.id;
        RemoteCandidate.candidateType = stat.candidateType;
        RemoteCandidate.relayProtocol = stat.relayProtocol;
        RemoteCandidate.transportId = stat.transportId;
        this.remoteCandidates.push(RemoteCandidate);
    }
    /**
     * Process the Inbound RTP Audio and Video Data
     * @param stat - inbound rtp stats
     */
    handleInBoundRTP(stat) {
        switch (stat.kind) {
            case 'video':
                // Need to convert to unknown first to remove an error around
                // InboundVideoStats having the bitrate member which isn't found on
                // the InboundRTPStats
                this.inboundVideoStats = stat;
                if (this.lastVideoStats != undefined) {
                    this.inboundVideoStats.bitrate =
                        (8 *
                            (this.inboundVideoStats.bytesReceived -
                                this.lastVideoStats.bytesReceived)) /
                            (this.inboundVideoStats.timestamp -
                                this.lastVideoStats.timestamp);
                    this.inboundVideoStats.bitrate = Math.floor(this.inboundVideoStats.bitrate);
                }
                this.lastVideoStats = Object.assign({}, this.inboundVideoStats);
                break;
            case 'audio':
                // Need to convert to unknown first to remove an error around
                // InboundAudioStats having the bitrate member which isn't found on
                // the InboundRTPStats
                this.inboundAudioStats = stat;
                if (this.lastAudioStats != undefined) {
                    this.inboundAudioStats.bitrate =
                        (8 *
                            (this.inboundAudioStats.bytesReceived -
                                this.lastAudioStats.bytesReceived)) /
                            (this.inboundAudioStats.timestamp -
                                this.lastAudioStats.timestamp);
                    this.inboundAudioStats.bitrate = Math.floor(this.inboundAudioStats.bitrate);
                }
                this.lastAudioStats = Object.assign({}, this.inboundAudioStats);
                break;
            default:
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), 'Kind is not handled');
                break;
        }
    }
    /**
     * Process the outbound RTP Audio and Video Data
     * @param stat - remote outbound stats
     */
    handleRemoteOutBound(stat) {
        switch (stat.kind) {
            case 'video':
                this.outBoundVideoStats.bytesSent = stat.bytesSent;
                this.outBoundVideoStats.id = stat.id;
                this.outBoundVideoStats.localId = stat.localId;
                this.outBoundVideoStats.packetsSent = stat.packetsSent;
                this.outBoundVideoStats.remoteTimestamp = stat.remoteTimestamp;
                this.outBoundVideoStats.timestamp = stat.timestamp;
                break;
            case 'audio':
                break;
            default:
                break;
        }
    }
    /**
     * Process the Inbound Video Track Data
     * @param stat - video track stats
     */
    handleTrack(stat) {
        // we only want to extract stats from the video track
        if (stat.type === 'track' &&
            (stat.trackIdentifier === 'video_label' || stat.kind === 'video')) {
            this.inboundVideoStats.framesDropped = stat.framesDropped;
            this.inboundVideoStats.framesReceived = stat.framesReceived;
            this.inboundVideoStats.frameHeight = stat.frameHeight;
            this.inboundVideoStats.frameWidth = stat.frameWidth;
        }
    }
    handleTransport(stat) {
        this.transportStats = stat;
    }
    handleCodec(stat) {
        const codecId = stat.id;
        const codecType = `${stat.mimeType
            .replace('video/', '')
            .replace('audio/', '')}${stat.sdpFmtpLine ? ` ${stat.sdpFmtpLine}` : ''}`;
        this.codecs.set(codecId, codecType);
    }
    handleSessionStatistics(videoStartTime, inputController, videoEncoderAvgQP) {
        const deltaTime = Date.now() - videoStartTime;
        this.sessionStats.runTime = new Date(deltaTime)
            .toISOString()
            .substr(11, 8)
            .toString();
        const controlsStreamInput = inputController === null
            ? 'Not sent yet'
            : inputController
                ? 'true'
                : 'false';
        this.sessionStats.controlsStreamInput = controlsStreamInput;
        this.sessionStats.videoEncoderAvgQP = videoEncoderAvgQP;
    }
    /**
     * Check if a value coming in from our stats is actually a number
     * @param value - the number to be checked
     */
    isNumber(value) {
        return typeof value === 'number' && isFinite(value);
    }
    /**
     * Helper function to return the active candidate pair
     * @returns The candidate pair that is currently receiving data
     */
    getActiveCandidatePair() {
        // Check if the RTCTransport stat is not undefined
        if (this.transportStats) {
            // Return the candidate pair that matches the transport candidate pair id
            return this.candidatePairs.find((candidatePair) => candidatePair.id === this.transportStats.selectedCandidatePairId, null);
        }
        // Fall back to the selected candidate pair
        return this.candidatePairs.find((candidatePair) => candidatePair.selected, null);
    }
}


/***/ }),

/***/ "./src/PeerConnectionController/CandidatePairStats.ts":
/*!************************************************************!*\
  !*** ./src/PeerConnectionController/CandidatePairStats.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_180733__) => {

__nested_webpack_require_180733__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_180733__.d(__webpack_exports__, {
/* harmony export */   "CandidatePairStats": () => (/* binding */ CandidatePairStats)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * ICE Candidate Pair Stats collected from the RTC Stats Report
 */
class CandidatePairStats {
}


/***/ }),

/***/ "./src/PeerConnectionController/CandidateStat.ts":
/*!*******************************************************!*\
  !*** ./src/PeerConnectionController/CandidateStat.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_181445__) => {

__nested_webpack_require_181445__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_181445__.d(__webpack_exports__, {
/* harmony export */   "CandidateStat": () => (/* binding */ CandidateStat)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * ICE Candidate Stat collected from the RTC Stats Report
 */
class CandidateStat {
}


/***/ }),

/***/ "./src/PeerConnectionController/DataChannelStats.ts":
/*!**********************************************************!*\
  !*** ./src/PeerConnectionController/DataChannelStats.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_182148__) => {

__nested_webpack_require_182148__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_182148__.d(__webpack_exports__, {
/* harmony export */   "DataChannelStats": () => (/* binding */ DataChannelStats)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * Data Channel Stats collected from the RTC Stats Report
 */
class DataChannelStats {
}


/***/ }),

/***/ "./src/PeerConnectionController/InboundRTPStats.ts":
/*!*********************************************************!*\
  !*** ./src/PeerConnectionController/InboundRTPStats.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_182856__) => {

__nested_webpack_require_182856__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_182856__.d(__webpack_exports__, {
/* harmony export */   "InboundAudioStats": () => (/* binding */ InboundAudioStats),
/* harmony export */   "InboundRTPStats": () => (/* binding */ InboundRTPStats),
/* harmony export */   "InboundVideoStats": () => (/* binding */ InboundVideoStats)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * Inbound Audio Stats collected from the RTC Stats Report
 */
class InboundAudioStats {
}
/**
 * Inbound Video Stats collected from the RTC Stats Report
 */
class InboundVideoStats {
}
/**
 * Inbound Stats collected from the RTC Stats Report
 */
class InboundRTPStats {
}


/***/ }),

/***/ "./src/PeerConnectionController/OutBoundRTPStats.ts":
/*!**********************************************************!*\
  !*** ./src/PeerConnectionController/OutBoundRTPStats.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_183930__) => {

__nested_webpack_require_183930__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_183930__.d(__webpack_exports__, {
/* harmony export */   "OutBoundRTPStats": () => (/* binding */ OutBoundRTPStats),
/* harmony export */   "OutBoundVideoStats": () => (/* binding */ OutBoundVideoStats)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * Outbound Video Stats collected from the RTC Stats Report
 */
class OutBoundVideoStats {
}
/**
 * Outbound Stats collected from the RTC Stats Report
 */
class OutBoundRTPStats {
}


/***/ }),

/***/ "./src/PeerConnectionController/PeerConnectionController.ts":
/*!******************************************************************!*\
  !*** ./src/PeerConnectionController/PeerConnectionController.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_184859__) => {

__nested_webpack_require_184859__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_184859__.d(__webpack_exports__, {
/* harmony export */   "PeerConnectionController": () => (/* binding */ PeerConnectionController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_184859__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_184859__(/*! ../Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _AggregatedStats__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_184859__(/*! ./AggregatedStats */ "./src/PeerConnectionController/AggregatedStats.ts");
/* harmony import */ var sdp__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_184859__(/*! sdp */ "sdp");
/* harmony import */ var _Util_RTCUtils__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_184859__(/*! ../Util/RTCUtils */ "./src/Util/RTCUtils.ts");
// Copyright Epic Games, Inc. All Rights Reserved.
var __awaiter = ( false) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





/**
 * Handles the Peer Connection
 */
class PeerConnectionController {
    /**
     * Create a new RTC Peer Connection client
     * @param options - Peer connection Options
     * @param config - The config for our PS experience.
     */
    constructor(options, config, preferredCodec) {
        this.config = config;
        this.createPeerConnection(options, preferredCodec);
    }
    createPeerConnection(options, preferredCodec) {
        // Set the ICE transport to relay if TURN enabled
        if (this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.Flags.ForceTURN)) {
            options.iceTransportPolicy = 'relay';
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Forcing TURN usage by setting ICE Transport Policy in peer connection config.');
        }
        // build a new peer connection with the options
        this.peerConnection = new RTCPeerConnection(options);
        this.peerConnection.onsignalingstatechange = (ev) => this.handleSignalStateChange(ev);
        this.peerConnection.oniceconnectionstatechange = (ev) => this.handleIceConnectionStateChange(ev);
        this.peerConnection.onicegatheringstatechange = (ev) => this.handleIceGatheringStateChange(ev);
        this.peerConnection.ontrack = (ev) => this.handleOnTrack(ev);
        this.peerConnection.onicecandidate = (ev) => this.handleIceCandidate(ev);
        this.peerConnection.ondatachannel = (ev) => this.handleDataChannel(ev);
        this.aggregatedStats = new _AggregatedStats__WEBPACK_IMPORTED_MODULE_3__.AggregatedStats();
        this.preferredCodec = preferredCodec;
        this.updateCodecSelection = true;
    }
    /**
     * Create an offer for the Web RTC handshake and send the offer to the signaling server via websocket
     * @param offerOptions - RTC Offer Options
     */
    createOffer(offerOptions, config) {
        return __awaiter(this, void 0, void 0, function* () {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Create Offer', 6);
            const isLocalhostConnection = location.hostname === 'localhost' ||
                location.hostname === '127.0.0.1';
            const isHttpsConnection = location.protocol === 'https:';
            let useMic = config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.Flags.UseMic);
            if (useMic && !(isLocalhostConnection || isHttpsConnection)) {
                useMic = false;
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Microphone access in the browser will not work if you are not on HTTPS or localhost. Disabling mic access.');
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), "For testing you can enable HTTP microphone access Chrome by visiting chrome://flags/ and enabling 'unsafely-treat-insecure-origin-as-secure'");
            }
            this.setupTransceiversAsync(useMic).finally(() => {
                var _a;
                (_a = this.peerConnection) === null || _a === void 0 ? void 0 : _a.createOffer(offerOptions).then((offer) => {
                    var _a;
                    this.showTextOverlayConnecting();
                    offer.sdp = this.mungeSDP(offer.sdp, useMic);
                    (_a = this.peerConnection) === null || _a === void 0 ? void 0 : _a.setLocalDescription(offer);
                    this.onSendWebRTCOffer(offer);
                }).catch(() => {
                    this.showTextOverlaySetupFailure();
                });
            });
        });
    }
    /**
     *
     */
    receiveOffer(offer, config) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Receive Offer', 6);
            (_a = this.peerConnection) === null || _a === void 0 ? void 0 : _a.setRemoteDescription(offer).then(() => {
                const isLocalhostConnection = location.hostname === 'localhost' ||
                    location.hostname === '127.0.0.1';
                const isHttpsConnection = location.protocol === 'https:';
                let useMic = config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.Flags.UseMic);
                if (useMic && !(isLocalhostConnection || isHttpsConnection)) {
                    useMic = false;
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Microphone access in the browser will not work if you are not on HTTPS or localhost. Disabling mic access.');
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), "For testing you can enable HTTP microphone access Chrome by visiting chrome://flags/ and enabling 'unsafely-treat-insecure-origin-as-secure'");
                }
                // Add our list of preferred codecs, in order of preference
                this.config.setOptionSettingOptions(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.OptionParameters.PreferredCodec, this.fuzzyIntersectUEAndBrowserCodecs(offer));
                this.setupTransceiversAsync(useMic).finally(() => {
                    var _a;
                    (_a = this.peerConnection) === null || _a === void 0 ? void 0 : _a.createAnswer().then((Answer) => {
                        var _a;
                        Answer.sdp = this.mungeSDP(Answer.sdp, useMic);
                        return (_a = this.peerConnection) === null || _a === void 0 ? void 0 : _a.setLocalDescription(Answer);
                    }).then(() => {
                        var _a;
                        this.onSendWebRTCAnswer((_a = this.peerConnection) === null || _a === void 0 ? void 0 : _a.currentLocalDescription);
                    }).catch(() => {
                        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'createAnswer() failed');
                    });
                });
            });
        });
    }
    /**
     * Set the Remote Descriptor from the signaling server to the RTC Peer Connection
     * @param answer - RTC Session Descriptor from the Signaling Server
     */
    receiveAnswer(answer) {
        var _a;
        (_a = this.peerConnection) === null || _a === void 0 ? void 0 : _a.setRemoteDescription(answer);
        // Add our list of preferred codecs, in order of preference
        this.config.setOptionSettingOptions(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.OptionParameters.PreferredCodec, this.fuzzyIntersectUEAndBrowserCodecs(answer));
    }
    /**
     * Generate Aggregated Stats and then fire a onVideo Stats event
     */
    generateStats() {
        var _a;
        (_a = this.peerConnection) === null || _a === void 0 ? void 0 : _a.getStats(null).then((StatsData) => {
            this.aggregatedStats.processStats(StatsData);
            this.onVideoStats(this.aggregatedStats);
            // Update the preferred codec selection based on what was actually negotiated
            if (this.updateCodecSelection && !!this.aggregatedStats.inboundVideoStats.codecId) {
                this.config.setOptionSettingValue(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.OptionParameters.PreferredCodec, this.aggregatedStats.codecs.get(this.aggregatedStats.inboundVideoStats.codecId));
            }
        });
    }
    /**
     * Close The Peer Connection
     */
    close() {
        if (this.peerConnection) {
            this.peerConnection.close();
            this.peerConnection = null;
        }
    }
    /**
     * Modify the Session Descriptor
     * @param sdp - Session Descriptor as a string
     * @param useMic - Is the microphone in use
     * @returns A modified Session Descriptor
     */
    mungeSDP(sdp, useMic) {
        let mungedSDP = sdp.replace(/(a=fmtp:\d+ .*level-asymmetry-allowed=.*)\r\n/gm, '$1;x-google-start-bitrate=10000;x-google-max-bitrate=100000\r\n');
        // set max bitrate to highest bitrate Opus supports
        let audioSDP = 'maxaveragebitrate=510000;';
        if (useMic) {
            // set the max capture rate to 48khz (so we can send high quality audio from mic)
            audioSDP += 'sprop-maxcapturerate=48000;';
        }
        // Force mono or stereo based on whether ?forceMono was passed or not
        audioSDP += this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.Flags.ForceMonoAudio)
            ? 'stereo=0;'
            : 'stereo=1;';
        // enable in-band forward error correction for opus audio
        audioSDP += 'useinbandfec=1';
        // We use the line 'useinbandfec=1' (which Opus uses) to set our Opus specific audio parameters.
        mungedSDP = mungedSDP.replace('useinbandfec=1', audioSDP);
        return mungedSDP;
    }
    /**
     * When a Ice Candidate is received add to the RTC Peer Connection
     * @param iceCandidate - RTC Ice Candidate from the Signaling Server
     */
    handleOnIce(iceCandidate) {
        var _a;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'peerconnection handleOnIce', 6);
        // // if forcing TURN, reject any candidates not relay
        if (this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.Flags.ForceTURN)) {
            // check if no relay address is found, if so, we are assuming it means no TURN server
            if (iceCandidate.candidate.indexOf('relay') < 0) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), `Dropping candidate because it was not TURN relay. | Type= ${iceCandidate.type} | Protocol= ${iceCandidate.protocol} | Address=${iceCandidate.address} | Port=${iceCandidate.port} |`, 6);
                return;
            }
        }
        (_a = this.peerConnection) === null || _a === void 0 ? void 0 : _a.addIceCandidate(iceCandidate);
    }
    /**
     * When the RTC Peer Connection Signaling server state Changes
     * @param state - Signaling Server State Change Event
     */
    handleSignalStateChange(state) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'signaling state change: ' + state, 6);
    }
    /**
     * Handle when the Ice Connection State Changes
     * @param state - Ice Connection State
     */
    handleIceConnectionStateChange(state) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'ice connection state change: ' + state, 6);
        this.onIceConnectionStateChange(state);
    }
    /**
     * Handle when the Ice Gathering State Changes
     * @param state - Ice Gathering State Change
     */
    handleIceGatheringStateChange(state) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'ice gathering state change: ' + JSON.stringify(state), 6);
    }
    /**
     * Activates the onTrack method
     * @param event - The webRtc track event
     */
    handleOnTrack(event) {
        this.onTrack(event);
    }
    /**
     * Activates the onPeerIceCandidate
     * @param event - The peer ice candidate
     */
    handleIceCandidate(event) {
        this.onPeerIceCandidate(event);
    }
    /**
     * Activates the onDataChannel
     * @param event - The peer's data channel
     */
    handleDataChannel(event) {
        this.onDataChannel(event);
    }
    /**
     * An override method for onTrack for use outside of the PeerConnectionController
     * @param trackEvent - The webRtc track event
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onTrack(trackEvent) {
        // Default Functionality: Do Nothing
    }
    /**
     * An override method for onIceConnectionStateChange for use outside of the PeerConnectionController
     * @param event - The webRtc iceconnectionstatechange event
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onIceConnectionStateChange(event) {
        // Default Functionality: Do Nothing
    }
    /**
     * An override method for onPeerIceCandidate for use outside of the PeerConnectionController
     * @param peerConnectionIceEvent - The peer ice candidate
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onPeerIceCandidate(peerConnectionIceEvent) {
        // Default Functionality: Do Nothing
    }
    /**
     * An override method for onDataChannel for use outside of the PeerConnectionController
     * @param datachannelEvent - The peer's data channel
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onDataChannel(datachannelEvent) {
        // Default Functionality: Do Nothing
    }
    /**
     * Find the intersection between UE and browser codecs, with fuzzy matching if some parameters are mismatched.
     * @param sdp The remote sdp
     * @returns The intersection between browser supported codecs and ue supported codecs.
     */
    fuzzyIntersectUEAndBrowserCodecs(sdp) {
        // We want to build an array of all supported codecs on both sides
        const allSupportedCodecs = new Array();
        const allUECodecs = this.parseAvailableCodecs(sdp);
        const allBrowserCodecs = this.config.getSettingOption(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.OptionParameters.PreferredCodec).options;
        for (const ueCodec of allUECodecs) {
            // Check if browser codecs directly matches UE codec (with parameters and everything)
            if (allBrowserCodecs.includes(ueCodec)) {
                allSupportedCodecs.push(ueCodec);
                continue;
            }
            // Otherwise check if browser codec at least contains a match for the UE codec name (without parameters).
            else {
                const ueCodecNameAndParams = ueCodec.split(" ");
                const ueCodecName = ueCodecNameAndParams[0];
                for (const browserCodec of allBrowserCodecs) {
                    if (browserCodec.includes(ueCodecName)) {
                        // We pass browser codec here as they option contain extra parameters.
                        allSupportedCodecs.push(browserCodec);
                        break;
                    }
                }
            }
        }
        return allSupportedCodecs;
    }
    /**
     * Setup tracks on the RTC Peer Connection
     * @param useMic - is mic in use
     */
    setupTransceiversAsync(useMic) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        return __awaiter(this, void 0, void 0, function* () {
            // Setup a transceiver for receiving video (if we need to)
            let hasVideoReceiver = false;
            for (const transceiver of (_b = (_a = this.peerConnection) === null || _a === void 0 ? void 0 : _a.getTransceivers()) !== null && _b !== void 0 ? _b : []) {
                if (transceiver && transceiver.receiver && transceiver.receiver.track && transceiver.receiver.track.kind === 'video') {
                    hasVideoReceiver = true;
                    break;
                }
            }
            if (!hasVideoReceiver) {
                (_c = this.peerConnection) === null || _c === void 0 ? void 0 : _c.addTransceiver('video', { direction: 'recvonly' });
            }
            if (RTCRtpReceiver.getCapabilities && this.preferredCodec != '') {
                for (const transceiver of (_e = (_d = this.peerConnection) === null || _d === void 0 ? void 0 : _d.getTransceivers()) !== null && _e !== void 0 ? _e : []) {
                    if (transceiver &&
                        transceiver.receiver &&
                        transceiver.receiver.track &&
                        transceiver.receiver.track.kind === 'video' &&
                        transceiver.setCodecPreferences) {
                        // Get our preferred codec from the codecs options drop down
                        const preferredRTPCodec = this.preferredCodec.split(' ');
                        const preferredRTCRtpCodecCapability = {
                            mimeType: 'video/' + preferredRTPCodec[0] /* Name */,
                            clockRate: 90000,
                            sdpFmtpLine: preferredRTPCodec[1] ? preferredRTPCodec[1] : ''
                        };
                        // Populate a list of codecs we will support with our preferred one in the first position
                        const ourSupportedCodecs = [preferredRTCRtpCodecCapability];
                        // Go through all codecs the browser supports and add them to the list (in any order)
                        RTCRtpReceiver.getCapabilities('video').codecs.forEach((browserSupportedCodec) => {
                            // Don't add our preferred codec again, but add everything else
                            if (browserSupportedCodec.mimeType != preferredRTCRtpCodecCapability.mimeType) {
                                ourSupportedCodecs.push(browserSupportedCodec);
                            }
                            else if ((browserSupportedCodec === null || browserSupportedCodec === void 0 ? void 0 : browserSupportedCodec.sdpFmtpLine) != (preferredRTCRtpCodecCapability === null || preferredRTCRtpCodecCapability === void 0 ? void 0 : preferredRTCRtpCodecCapability.sdpFmtpLine)) {
                                ourSupportedCodecs.push(browserSupportedCodec);
                            }
                        });
                        for (const codec of ourSupportedCodecs) {
                            if ((codec === null || codec === void 0 ? void 0 : codec.sdpFmtpLine) === undefined || codec.sdpFmtpLine === '') {
                                // We can't dynamically add members to the codec, so instead remove the field if it's empty
                                delete codec.sdpFmtpLine;
                            }
                        }
                        transceiver.setCodecPreferences(ourSupportedCodecs);
                    }
                }
            }
            let hasAudioReceiver = false;
            for (const transceiver of (_g = (_f = this.peerConnection) === null || _f === void 0 ? void 0 : _f.getTransceivers()) !== null && _g !== void 0 ? _g : []) {
                if (transceiver && transceiver.receiver && transceiver.receiver.track && transceiver.receiver.track.kind === 'audio') {
                    hasAudioReceiver = true;
                    break;
                }
            }
            // Setup a transceiver for sending mic audio to UE and receiving audio from UE
            if (!useMic) {
                if (!hasAudioReceiver) {
                    (_h = this.peerConnection) === null || _h === void 0 ? void 0 : _h.addTransceiver('audio', {
                        direction: 'recvonly'
                    });
                }
            }
            else {
                // set the audio options based on mic usage
                const audioOptions = {
                    autoGainControl: false,
                    channelCount: 1,
                    echoCancellation: false,
                    latency: 0,
                    noiseSuppression: false,
                    sampleRate: 48000,
                    sampleSize: 16,
                    volume: 1.0
                };
                // set the media send options
                const mediaSendOptions = {
                    video: false,
                    audio: audioOptions
                };
                // Note using mic on android chrome requires SSL or chrome://flags/ "unsafely-treat-insecure-origin-as-secure"
                const stream = yield navigator.mediaDevices.getUserMedia(mediaSendOptions);
                if (stream) {
                    if (hasAudioReceiver) {
                        for (const transceiver of (_k = (_j = this.peerConnection) === null || _j === void 0 ? void 0 : _j.getTransceivers()) !== null && _k !== void 0 ? _k : []) {
                            if (_Util_RTCUtils__WEBPACK_IMPORTED_MODULE_4__.RTCUtils.canTransceiverReceiveAudio(transceiver)) {
                                for (const track of stream.getTracks()) {
                                    if (track.kind && track.kind == 'audio') {
                                        transceiver.sender.replaceTrack(track);
                                        transceiver.direction = 'sendrecv';
                                    }
                                }
                            }
                        }
                    }
                    else {
                        for (const track of stream.getTracks()) {
                            if (track.kind && track.kind == 'audio') {
                                (_l = this.peerConnection) === null || _l === void 0 ? void 0 : _l.addTransceiver(track, {
                                    direction: 'sendrecv'
                                });
                            }
                        }
                    }
                }
                else {
                    if (!hasAudioReceiver) {
                        (_m = this.peerConnection) === null || _m === void 0 ? void 0 : _m.addTransceiver('audio', {
                            direction: 'recvonly'
                        });
                    }
                }
            }
        });
    }
    /**
     * And override event for when the video stats are fired
     * @param event - Aggregated Stats
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onVideoStats(event) {
        // Default Functionality: Do Nothing
    }
    /**
     * Event to send the RTC offer to the Signaling server
     * @param offer - RTC Offer
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onSendWebRTCOffer(offer) {
        // Default Functionality: Do Nothing
    }
    /**
     * Event to send the RTC Answer to the Signaling server
     * @param answer - RTC Answer
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onSendWebRTCAnswer(answer) {
        // Default Functionality: Do Nothing
    }
    /**
     * An override for showing the Peer connection connecting Overlay
     */
    showTextOverlayConnecting() {
        // Default Functionality: Do Nothing
    }
    /**
     * An override for showing the Peer connection Failed overlay
     */
    showTextOverlaySetupFailure() {
        // Default Functionality: Do Nothing
    }
    parseAvailableCodecs(rtcSessionDescription) {
        // No point in updating the available codecs if on FF
        if (!RTCRtpReceiver.getCapabilities)
            return ['Only available on Chrome'];
        const ueSupportedCodecs = [];
        const sections = (0,sdp__WEBPACK_IMPORTED_MODULE_0__.splitSections)(rtcSessionDescription.sdp);
        // discard the session information as we only want media related info
        sections.shift();
        sections.forEach((mediaSection) => {
            const { codecs } = (0,sdp__WEBPACK_IMPORTED_MODULE_0__.parseRtpParameters)(mediaSection);
            // Filter only for VPX / H26X / AV1
            const matcher = /(VP\d|H26\d|AV1).*/;
            codecs.forEach((c) => {
                const str = c.name +
                    ' ' +
                    Object.keys(c.parameters || {})
                        .map((p) => p + '=' + c.parameters[p])
                        .join(';');
                const match = matcher.exec(str);
                if (match !== null) {
                    if (c.name == 'VP9') {
                        // UE answers don't specify profile but we know we want profile 0
                        c.parameters = {
                            'profile-id': '0'
                        };
                    }
                    const codecStr = c.name +
                        ' ' +
                        Object.keys(c.parameters || {})
                            .map((p) => p + '=' + c.parameters[p])
                            .join(';');
                    ueSupportedCodecs.push(codecStr);
                }
            });
        });
        return ueSupportedCodecs;
    }
}


/***/ }),

/***/ "./src/PeerConnectionController/SessionStats.ts":
/*!******************************************************!*\
  !*** ./src/PeerConnectionController/SessionStats.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_212028__) => {

__nested_webpack_require_212028__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_212028__.d(__webpack_exports__, {
/* harmony export */   "SessionStats": () => (/* binding */ SessionStats)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * Session statistics
 */
class SessionStats {
}


/***/ }),

/***/ "./src/PeerConnectionController/StreamStats.ts":
/*!*****************************************************!*\
  !*** ./src/PeerConnectionController/StreamStats.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_212672__) => {

__nested_webpack_require_212672__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_212672__.d(__webpack_exports__, {
/* harmony export */   "StreamStats": () => (/* binding */ StreamStats)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * Class to hold the stream stats data coming in from webRtc
 */
class StreamStats {
}


/***/ }),

/***/ "./src/PixelStreaming/PixelStreaming.ts":
/*!**********************************************!*\
  !*** ./src/PixelStreaming/PixelStreaming.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_213324__) => {

__nested_webpack_require_213324__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_213324__.d(__webpack_exports__, {
/* harmony export */   "PixelStreaming": () => (/* binding */ PixelStreaming)
/* harmony export */ });
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_213324__(/*! ../Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _WebRtcPlayer_WebRtcPlayerController__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_213324__(/*! ../WebRtcPlayer/WebRtcPlayerController */ "./src/WebRtcPlayer/WebRtcPlayerController.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_213324__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _UI_OnScreenKeyboard__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_213324__(/*! ../UI/OnScreenKeyboard */ "./src/UI/OnScreenKeyboard.ts");
/* harmony import */ var _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_213324__(/*! ../Util/EventEmitter */ "./src/Util/EventEmitter.ts");
/* harmony import */ var _WebXR_WebXRController__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_213324__(/*! ../WebXR/WebXRController */ "./src/WebXR/WebXRController.ts");
/* harmony import */ var _UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_213324__(/*! ../UeInstanceMessage/StreamMessageController */ "./src/UeInstanceMessage/StreamMessageController.ts");
/* harmony import */ var _DataChannel_DataChannelLatencyTestController__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_213324__(/*! ../DataChannel/DataChannelLatencyTestController */ "./src/DataChannel/DataChannelLatencyTestController.ts");
/* harmony import */ var _Util_RTCUtils__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_213324__(/*! ../Util/RTCUtils */ "./src/Util/RTCUtils.ts");
// Copyright Epic Games, Inc. All Rights Reserved.










/**
 * The key class for the browser side of a Pixel Streaming application, it includes:
 * WebRTC handling, XR support, input handling, and emitters for lifetime and state change events.
 * Users are encouraged to use this class as is, through composition, or extend it. In any case,
 * this will likely be the core of your Pixel Streaming experience in terms of functionality.
 */
class PixelStreaming {
    /**
     * @param config - A newly instantiated config object
     * @param overrides - Parameters to override default behaviour
     * returns the base Pixel streaming object
     */
    constructor(config, overrides) {
        this.allowConsoleCommands = false;
        this.config = config;
        if (overrides === null || overrides === void 0 ? void 0 : overrides.videoElementParent) {
            this._videoElementParent = overrides.videoElementParent;
        }
        this._eventEmitter = new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
        this.configureSettings();
        // setup WebRTC
        this.setWebRtcPlayerController(new _WebRtcPlayer_WebRtcPlayerController__WEBPACK_IMPORTED_MODULE_1__.WebRtcPlayerController(this.config, this));
        // Onscreen keyboard
        this.onScreenKeyboardHelper = new _UI_OnScreenKeyboard__WEBPACK_IMPORTED_MODULE_2__.OnScreenKeyboard(this.videoElementParent);
        this.onScreenKeyboardHelper.unquantizeAndDenormalizeUnsigned = (x, y) => this._webRtcController.requestUnquantizedAndDenormalizeUnsigned(x, y);
        this._activateOnScreenKeyboard = (command) => this.onScreenKeyboardHelper.showOnScreenKeyboard(command);
        this._webXrController = new _WebXR_WebXRController__WEBPACK_IMPORTED_MODULE_3__.WebXRController(this._webRtcController);
        this._setupWebRtcTCPRelayDetection = this._setupWebRtcTCPRelayDetection.bind(this);
        // Add event listener for the webRtcConnected event
        this._eventEmitter.addEventListener("webRtcConnected", (webRtcConnectedEvent) => {
            // Bind to the stats received event
            this._eventEmitter.addEventListener("statsReceived", this._setupWebRtcTCPRelayDetection);
        });
    }
    /**
     * Gets the element that contains the video stream element.
     */
    get videoElementParent() {
        if (!this._videoElementParent) {
            this._videoElementParent = document.createElement('div');
            this._videoElementParent.id = 'videoElementParent';
        }
        return this._videoElementParent;
    }
    /**
     * Configure the settings with on change listeners and any additional per experience settings.
     */
    configureSettings() {
        this.config._addOnSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.IsQualityController, (wantsQualityController) => {
            // If the setting has been set to true (either programatically or the user has flicked the toggle)
            // and we aren't currently quality controller, send the request
            if (wantsQualityController === true &&
                !this._webRtcController.isQualityController) {
                this._webRtcController.sendRequestQualityControlOwnership();
            }
        });
        this.config._addOnSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.AFKDetection, (isAFKEnabled) => {
            this._webRtcController.setAfkEnabled(isAFKEnabled);
        });
        this.config._addOnSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.MatchViewportResolution, () => {
            this._webRtcController.videoPlayer.updateVideoStreamSize();
        });
        this.config._addOnSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.HoveringMouseMode, (isHoveringMouse) => {
            this.config.setFlagLabel(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.HoveringMouseMode, `Control Scheme: ${isHoveringMouse ? 'Hovering' : 'Locked'} Mouse`);
            this._webRtcController.setMouseInputEnabled(this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.MouseInput));
        });
        // user input
        this.config._addOnSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.KeyboardInput, (isEnabled) => {
            this._webRtcController.setKeyboardInputEnabled(isEnabled);
        });
        this.config._addOnSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.MouseInput, (isEnabled) => {
            this._webRtcController.setMouseInputEnabled(isEnabled);
        });
        this.config._addOnSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.FakeMouseWithTouches, (_isFakeMouseEnabled) => {
            this._webRtcController.setTouchInputEnabled(this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.TouchInput));
        });
        this.config._addOnSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.TouchInput, (isEnabled) => {
            this._webRtcController.setTouchInputEnabled(isEnabled);
        });
        this.config._addOnSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.GamepadInput, (isEnabled) => {
            this._webRtcController.setGamePadInputEnabled(isEnabled);
        });
        // encoder settings
        this.config._addOnNumericSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.MinQP, (newValue) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '--------  Sending MinQP  --------', 7);
            this._webRtcController.sendEncoderMinQP(newValue);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '-------------------------------------------', 7);
        });
        this.config._addOnNumericSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.MaxQP, (newValue) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '--------  Sending encoder settings  --------', 7);
            this._webRtcController.sendEncoderMaxQP(newValue);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '-------------------------------------------', 7);
        });
        // WebRTC settings
        this.config._addOnNumericSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCMinBitrate, (newValue) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '--------  Sending web rtc settings  --------', 7);
            this._webRtcController.sendWebRTCMinBitrate(newValue * 1000 /* kbps to bps */);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '-------------------------------------------', 7);
        });
        this.config._addOnNumericSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCMaxBitrate, (newValue) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '--------  Sending web rtc settings  --------', 7);
            this._webRtcController.sendWebRTCMaxBitrate(newValue * 1000 /* kbps to bps */);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '-------------------------------------------', 7);
        });
        this.config._addOnNumericSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCFPS, (newValue) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '--------  Sending web rtc settings  --------', 7);
            this._webRtcController.sendWebRTCFps(newValue);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '-------------------------------------------', 7);
        });
        this.config._addOnOptionSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.OptionParameters.PreferredCodec, (newValue) => {
            if (this._webRtcController) {
                this._webRtcController.setPreferredCodec(newValue);
            }
        });
        this.config._registerOnChangeEvents(this._eventEmitter);
    }
    /**
     * Activate the on screen keyboard when receiving the command from the streamer
     * @param command - the keyboard command
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _activateOnScreenKeyboard(command) {
        throw new Error('Method not implemented.');
    }
    /**
     * Set the input control ownership
     * @param inputControlOwnership - does the user have input control ownership
     */
    _onInputControlOwnership(inputControlOwnership) {
        this._inputController = inputControlOwnership;
    }
    /**
     * Instantiate the WebRTCPlayerController interface to provide WebRTCPlayerController functionality within this class and set up anything that requires it
     * @param webRtcPlayerController - a WebRtcPlayerController controller instance
     */
    setWebRtcPlayerController(webRtcPlayerController) {
        this._webRtcController = webRtcPlayerController;
        this._webRtcController.setPreferredCodec(this.config.getSettingOption(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.OptionParameters.PreferredCodec)
            .selected);
        this._webRtcController.resizePlayerStyle();
        // connect if auto connect flag is enabled
        this.checkForAutoConnect();
    }
    /**
     * Connect to signaling server.
     */
    connect() {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.StreamPreConnectEvent());
        this._webRtcController.connectToSignallingServer();
    }
    /**
     * Reconnects to the signaling server. If connection is up, disconnects first
     * before establishing a new connection
     */
    reconnect() {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.StreamReconnectEvent());
        this._webRtcController.tryReconnect("Reconnecting...");
    }
    /**
     * Disconnect from the signaling server and close open peer connections.
     */
    disconnect() {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.StreamPreDisconnectEvent());
        this._webRtcController.close();
    }
    /**
     * Play the stream. Can be called only after a peer connection has been established.
     */
    play() {
        this._onStreamLoading();
        this._webRtcController.playStream();
    }
    /**
     * Auto connect if AutoConnect flag is enabled
     */
    checkForAutoConnect() {
        // set up if the auto play will be used or regular click to start
        if (this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.AutoConnect)) {
            // if autoplaying show an info overlay while while waiting for the connection to begin
            this._onWebRtcAutoConnect();
            this._webRtcController.connectToSignallingServer();
        }
    }
    /**
     * Will unmute the microphone track which is sent to Unreal Engine.
     * By default, will only unmute an existing mic track.
     *
     * @param forceEnable Can be used for cases when this object wasn't initialized with a mic track.
     * If this parameter is true, the connection will be restarted with a microphone.
     * Warning: this takes some time, as a full renegotiation and reconnection will happen.
     */
    unmuteMicrophone(forceEnable = false) {
        // If there's an existing mic track, we just set muted state
        if (this.config.isFlagEnabled('UseMic')) {
            this.setMicrophoneMuted(false);
            return;
        }
        // If there's no pre-existing mic track, and caller is ok with full reset, we enable and reset
        if (forceEnable) {
            this.config.setFlagEnabled("UseMic", true);
            this.reconnect();
            return;
        }
        // If we prefer not to force a reconnection, just warn the user that this operation didn't happen
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Warning(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), 'Trying to unmute mic, but PixelStreaming was initialized with no microphone track. Call with forceEnable == true to re-connect with a mic track.');
    }
    muteMicrophone() {
        if (this.config.isFlagEnabled('UseMic')) {
            this.setMicrophoneMuted(true);
            return;
        }
        // If there wasn't a mic track, just let user know there's nothing to mute
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), 'Trying to mute mic, but PixelStreaming has no microphone track, so sending sound is already disabled.');
    }
    setMicrophoneMuted(mute) {
        var _a, _b, _c, _d;
        for (const transceiver of (_d = (_c = (_b = (_a = this._webRtcController) === null || _a === void 0 ? void 0 : _a.peerConnectionController) === null || _b === void 0 ? void 0 : _b.peerConnection) === null || _c === void 0 ? void 0 : _c.getTransceivers()) !== null && _d !== void 0 ? _d : []) {
            if (_Util_RTCUtils__WEBPACK_IMPORTED_MODULE_6__.RTCUtils.canTransceiverSendAudio(transceiver)) {
                transceiver.sender.track.enabled = !mute;
            }
        }
    }
    /**
     * Emit an event on auto connecting
     */
    _onWebRtcAutoConnect() {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.WebRtcAutoConnectEvent());
    }
    /**
     * Set up functionality to happen when receiving a webRTC answer
     */
    _onWebRtcSdp() {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.WebRtcSdpEvent());
    }
    /**
     * Emits a StreamLoading event
     */
    _onStreamLoading() {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.StreamLoadingEvent());
    }
    /**
     * Event fired when the video is disconnected - emits given eventString or an override
     * message from webRtcController if one has been set
     * @param eventString - a string describing why the connection closed
     * @param allowClickToReconnect - true if we want to allow the user to retry the connection with a click
     */
    _onDisconnect(eventString, allowClickToReconnect) {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.WebRtcDisconnectedEvent({
            eventString: eventString,
            allowClickToReconnect: allowClickToReconnect
        }));
    }
    /**
     * Handles when Web Rtc is connecting
     */
    _onWebRtcConnecting() {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.WebRtcConnectingEvent());
    }
    /**
     * Handles when Web Rtc has connected
     */
    _onWebRtcConnected() {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.WebRtcConnectedEvent());
    }
    /**
     * Handles when Web Rtc fails to connect
     */
    _onWebRtcFailed() {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.WebRtcFailedEvent());
    }
    /**
     * Handle when the Video has been Initialized
     */
    _onVideoInitialized() {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.VideoInitializedEvent());
        this._videoStartTime = Date.now();
    }
    /**
     * Set up functionality to happen when receiving latency test results
     * @param latency - latency test results object
     */
    _onLatencyTestResult(latencyTimings) {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.LatencyTestResultEvent({ latencyTimings }));
    }
    _onDataChannelLatencyTestResponse(response) {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.DataChannelLatencyTestResponseEvent({ response }));
    }
    /**
     * Set up functionality to happen when receiving video statistics
     * @param videoStats - video statistics as a aggregate stats object
     */
    _onVideoStats(videoStats) {
        // Duration
        if (!this._videoStartTime || this._videoStartTime === undefined) {
            this._videoStartTime = Date.now();
        }
        videoStats.handleSessionStatistics(this._videoStartTime, this._inputController, this._webRtcController.videoAvgQp);
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.StatsReceivedEvent({ aggregatedStats: videoStats }));
    }
    /**
     * Set up functionality to happen when calculating the average video encoder qp
     * @param QP - the quality number of the stream
     */
    _onVideoEncoderAvgQP(QP) {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.VideoEncoderAvgQPEvent({ avgQP: QP }));
    }
    /**
     * Set up functionality to happen when receiving and handling initial settings for the UE app
     * @param settings - initial UE app settings
     */
    _onInitialSettings(settings) {
        var _a;
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.InitialSettingsEvent({ settings }));
        if (settings.PixelStreamingSettings) {
            this.allowConsoleCommands =
                (_a = settings.PixelStreamingSettings.AllowPixelStreamingCommands) !== null && _a !== void 0 ? _a : false;
            if (this.allowConsoleCommands === false) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '-AllowPixelStreamingCommands=false, sending arbitrary console commands from browser to UE is disabled.');
            }
        }
        const useUrlParams = this.config.useUrlParams;
        const urlParams = new URLSearchParams(window.location.search);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), `using URL parameters ${useUrlParams}`);
        if (settings.EncoderSettings) {
            this.config.setNumericSetting(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.MinQP, 
            // If a setting is set in the URL, make sure we respect that value as opposed to what the application sends us
            (useUrlParams && urlParams.has(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.MinQP))
                ? Number.parseFloat(urlParams.get(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.MinQP))
                : settings.EncoderSettings.MinQP);
            this.config.setNumericSetting(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.MaxQP, (useUrlParams && urlParams.has(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.MaxQP))
                ? Number.parseFloat(urlParams.get(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.MaxQP))
                : settings.EncoderSettings.MaxQP);
        }
        if (settings.WebRTCSettings) {
            this.config.setNumericSetting(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCMinBitrate, (useUrlParams && urlParams.has(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCMinBitrate))
                ? Number.parseFloat(urlParams.get(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCMinBitrate))
                : (settings.WebRTCSettings.MinBitrate / 1000) /* bps to kbps */);
            this.config.setNumericSetting(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCMaxBitrate, (useUrlParams && urlParams.has(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCMaxBitrate))
                ? Number.parseFloat(urlParams.get(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCMaxBitrate))
                : (settings.WebRTCSettings.MaxBitrate / 1000) /* bps to kbps */);
            this.config.setNumericSetting(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCFPS, (useUrlParams && urlParams.has(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCFPS))
                ? Number.parseFloat(urlParams.get(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCFPS))
                : settings.WebRTCSettings.FPS);
        }
    }
    /**
     * Set up functionality to happen when setting quality control ownership of a stream
     * @param hasQualityOwnership - does this user have quality ownership of the stream true / false
     */
    _onQualityControlOwnership(hasQualityOwnership) {
        this.config.setFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.IsQualityController, hasQualityOwnership);
    }
    _onPlayerCount(playerCount) {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.PlayerCountEvent({ count: playerCount }));
    }
    // Sets up to emit the webrtc tcp relay detect event 
    _setupWebRtcTCPRelayDetection(statsReceivedEvent) {
        // Get the active candidate pair
        let activeCandidatePair = statsReceivedEvent.data.aggregatedStats.getActiveCandidatePair();
        // Check if the active candidate pair is not null
        if (activeCandidatePair != null) {
            // Get the local candidate assigned to the active candidate pair
            let localCandidate = statsReceivedEvent.data.aggregatedStats.localCandidates.find((candidate) => candidate.id == activeCandidatePair.localCandidateId, null);
            // Check if the local candidate is not null, candidate type is relay and the relay protocol is tcp
            if (localCandidate != null && localCandidate.candidateType == 'relay' && localCandidate.relayProtocol == 'tcp') {
                // Send the web rtc tcp relay detected event
                this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.WebRtcTCPRelayDetectedEvent());
            }
            // The check is completed and the stats listen event can be removed
            this._eventEmitter.removeEventListener("statsReceived", this._setupWebRtcTCPRelayDetection);
        }
    }
    /**
     * Request a connection latency test.
     * NOTE: There are plans to refactor all request* functions. Expect changes if you use this!
     * @returns
     */
    requestLatencyTest() {
        if (!this._webRtcController.videoPlayer.isVideoReady()) {
            return false;
        }
        this._webRtcController.sendLatencyTest();
        return true;
    }
    /**
     * Request a data channel latency test.
     * NOTE: There are plans to refactor all request* functions. Expect changes if you use this!
     */
    requestDataChannelLatencyTest(config) {
        if (!this._webRtcController.videoPlayer.isVideoReady()) {
            return false;
        }
        if (!this._dataChannelLatencyTestController) {
            this._dataChannelLatencyTestController = new _DataChannel_DataChannelLatencyTestController__WEBPACK_IMPORTED_MODULE_7__.DataChannelLatencyTestController(this._webRtcController.sendDataChannelLatencyTest.bind(this._webRtcController), (result) => {
                this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.DataChannelLatencyTestResultEvent({ result }));
            });
            this.addEventListener("dataChannelLatencyTestResponse", ({ data: { response } }) => {
                this._dataChannelLatencyTestController.receive(response);
            });
        }
        return this._dataChannelLatencyTestController.start(config);
    }
    /**
     * Request for the UE application to show FPS counter.
     * NOTE: There are plans to refactor all request* functions. Expect changes if you use this!
     * @returns
     */
    requestShowFps() {
        if (!this._webRtcController.videoPlayer.isVideoReady()) {
            return false;
        }
        this._webRtcController.sendShowFps();
        return true;
    }
    /**
     * Request for a new IFrame from the UE application.
     * NOTE: There are plans to refactor all request* functions. Expect changes if you use this!
     * @returns
     */
    requestIframe() {
        if (!this._webRtcController.videoPlayer.isVideoReady()) {
            return false;
        }
        this._webRtcController.sendIframeRequest();
        return true;
    }
    /**
     * Send data to UE application. The data will be run through JSON.stringify() so e.g. strings
     * and any serializable plain JSON objects with no recurrence can be sent.
     * @returns true if succeeded, false if rejected
     */
    emitUIInteraction(descriptor) {
        if (!this._webRtcController.videoPlayer.isVideoReady()) {
            return false;
        }
        this._webRtcController.emitUIInteraction(descriptor);
        return true;
    }
    /**
     * Send a command to UE application. Blocks ConsoleCommand descriptors unless UE
     * has signaled that it allows console commands.
     * @returns true if succeeded, false if rejected
     */
    emitCommand(descriptor) {
        if (!this._webRtcController.videoPlayer.isVideoReady()) {
            return false;
        }
        if (!this.allowConsoleCommands && 'ConsoleCommand' in descriptor) {
            return false;
        }
        this._webRtcController.emitCommand(descriptor);
        return true;
    }
    /**
     * Send a console command to UE application. Only allowed if UE has signaled that it allows
     * console commands.
     * @returns true if succeeded, false if rejected
     */
    emitConsoleCommand(command) {
        if (!this.allowConsoleCommands || !this._webRtcController.videoPlayer.isVideoReady()) {
            return false;
        }
        this._webRtcController.emitConsoleCommand(command);
        return true;
    }
    /**
     * Add a UE -> browser response event listener
     * @param name - The name of the response handler
     * @param listener - The method to be activated when a message is received
     */
    addResponseEventListener(name, listener) {
        this._webRtcController.responseController.addResponseEventListener(name, listener);
    }
    /**
     * Remove a UE -> browser response event listener
     * @param name - The name of the response handler
     */
    removeResponseEventListener(name) {
        this._webRtcController.responseController.removeResponseEventListener(name);
    }
    /**
     * Dispatch a new event.
     * @param e event
     * @returns
     */
    dispatchEvent(e) {
        return this._eventEmitter.dispatchEvent(e);
    }
    /**
     * Register an event handler.
     * @param type event name
     * @param listener event handler function
     */
    addEventListener(type, listener) {
        this._eventEmitter.addEventListener(type, listener);
    }
    /**
     * Remove an event handler.
     * @param type event name
     * @param listener event handler function
     */
    removeEventListener(type, listener) {
        this._eventEmitter.removeEventListener(type, listener);
    }
    /**
     * Enable/disable XR mode.
     */
    toggleXR() {
        this.webXrController.xrClicked();
    }
    /**
     * Pass in a function to generate a signalling server URL.
     * This function is useful if you need to programmatically construct your signalling server URL.
     * @param signallingUrlBuilderFunc A function that generates a signalling server url.
     */
    setSignallingUrlBuilder(signallingUrlBuilderFunc) {
        this._webRtcController.signallingUrlBuilder = signallingUrlBuilderFunc;
    }
    /**
     * Public getter for the websocket controller. Access to this property allows you to send
     * custom websocket messages.
     */
    get webSocketController() {
        return this._webRtcController.webSocketController;
    }
    /**
     * Public getter for the webXrController controller. Used for all XR features.
     */
    get webXrController() {
        return this._webXrController;
    }
    registerMessageHandler(name, direction, handler) {
        if (direction === _UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_8__.MessageDirection.FromStreamer && typeof handler === 'undefined') {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Warning(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), `Unable to register an undefined handler for ${name}`);
            return;
        }
        if (direction === _UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_8__.MessageDirection.ToStreamer && typeof handler === 'undefined') {
            this._webRtcController.streamMessageController.registerMessageHandler(direction, name, (data) => this._webRtcController.sendMessageController.sendMessageToStreamer(name, data));
        }
        else {
            this._webRtcController.streamMessageController.registerMessageHandler(direction, name, (data) => handler(data));
        }
    }
    get toStreamerHandlers() {
        return this._webRtcController.streamMessageController.toStreamerHandlers;
    }
    isReconnecting() {
        return this._webRtcController.isReconnecting;
    }
}


/***/ }),

/***/ "./src/UI/OnScreenKeyboard.ts":
/*!************************************!*\
  !*** ./src/UI/OnScreenKeyboard.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_245772__) => {

__nested_webpack_require_245772__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_245772__.d(__webpack_exports__, {
/* harmony export */   "OnScreenKeyboard": () => (/* binding */ OnScreenKeyboard)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * Class for handling on screen keyboard usage
 */
class OnScreenKeyboard {
    /**
     *
     * @param videoElementParent The div element the video player is injected into
     */
    constructor(videoElementParent) {
        this.editTextButton = null;
        this.hiddenInput = null;
        if ('ontouchstart' in document.documentElement) {
            this.createOnScreenKeyboardHelpers(videoElementParent);
        }
    }
    /**
     * An override for unquantizeAndDenormalizeUnsigned
     * @param x the x axis point
     * @param y the y axis point
     * @returns unquantizeAndDenormalizeUnsigned object
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    unquantizeAndDenormalizeUnsigned(x, y) {
        return null;
    }
    /**
     * Creates on screen keyboard helpers
     * @param videoElementParent The div element the video player i injected into
     */
    createOnScreenKeyboardHelpers(videoElementParent) {
        if (!this.hiddenInput) {
            this.hiddenInput = document.createElement('input');
            this.hiddenInput.id = 'hiddenInput';
            this.hiddenInput.maxLength = 0;
            // Set inline style so that users not using the UI library
            // will  still have this element display correctly
            this.hiddenInput.style.position = 'absolute';
            this.hiddenInput.style.left = '-10%';
            this.hiddenInput.style.width = '0px';
            this.hiddenInput.style.opacity = '0';
            videoElementParent.appendChild(this.hiddenInput);
        }
        if (!this.editTextButton) {
            this.editTextButton = document.createElement('button');
            this.editTextButton.id = 'editTextButton';
            this.editTextButton.innerHTML = 'edit text';
            videoElementParent.appendChild(this.editTextButton);
            // Hide the 'edit text' button.
            this.editTextButton.style.display = 'none';
            this.editTextButton.addEventListener('touchend', (event) => {
                // Show the on-screen keyboard.
                this.hiddenInput.focus();
                event.preventDefault();
            });
        }
    }
    /**
     * Shows the on screen keyboard
     * @param command the command received via the data channel containing keyboard positions
     */
    showOnScreenKeyboard(command) {
        if (command.showOnScreenKeyboard) {
            // Show the 'edit text' button.
            this.editTextButton.style.display = 'default';
            // Place the 'edit text' button near the UE input widget.
            const pos = this.unquantizeAndDenormalizeUnsigned(command.x, command.y);
            this.editTextButton.style.top = pos.y.toString() + 'px';
            this.editTextButton.style.left = (pos.x - 40).toString() + 'px';
        }
        else {
            // Hide the 'edit text' button.
            this.editTextButton.style.display = 'none';
            // Hide the on-screen keyboard.
            this.hiddenInput.blur();
        }
    }
}


/***/ }),

/***/ "./src/UeInstanceMessage/ResponseController.ts":
/*!*****************************************************!*\
  !*** ./src/UeInstanceMessage/ResponseController.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_249481__) => {

__nested_webpack_require_249481__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_249481__.d(__webpack_exports__, {
/* harmony export */   "ResponseController": () => (/* binding */ ResponseController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_249481__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

class ResponseController {
    constructor() {
        this.responseEventListeners = new Map();
    }
    /**
     * Add a response event listener to the response map
     * @param name - The name of the response
     * @param listener - The method to be activated when the response is selected
     */
    addResponseEventListener(name, listener) {
        this.responseEventListeners.set(name, listener);
    }
    /**
     * Remove a response event listener to the response map
     * @param name - The name of the response
     */
    removeResponseEventListener(name) {
        this.responseEventListeners.delete(name);
    }
    /**
     * Handle a response when receiving one form the streamer
     * @param message - Data received from the data channel with the command in question
     */
    onResponse(message) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'DataChannelReceiveMessageType.Response', 6);
        const responses = new TextDecoder('utf-16').decode(message.slice(1));
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), responses, 6);
        this.responseEventListeners.forEach((listener) => {
            listener(responses);
        });
    }
}


/***/ }),

/***/ "./src/UeInstanceMessage/SendMessageController.ts":
/*!********************************************************!*\
  !*** ./src/UeInstanceMessage/SendMessageController.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_251605__) => {

__nested_webpack_require_251605__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_251605__.d(__webpack_exports__, {
/* harmony export */   "SendMessageController": () => (/* binding */ SendMessageController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_251605__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

class SendMessageController {
    /**
     * @param dataChannelSender - Data channel instance
     * @param toStreamerMessagesMapProvider - Stream Messages instance
     */
    constructor(dataChannelSender, toStreamerMessagesMapProvider) {
        this.dataChannelSender = dataChannelSender;
        this.toStreamerMessagesMapProvider = toStreamerMessagesMapProvider;
    }
    /**
     * Send a message to the streamer through the data channel
     * @param messageType - the type of message we are sending
     * @param messageData - the message data we are sending over the data channel
     * @returns - nil
     */
    sendMessageToStreamer(messageType, messageData) {
        if (messageData === undefined) {
            messageData = [];
        }
        const toStreamerMessages = this.toStreamerMessagesMapProvider.toStreamerMessages;
        const messageFormat = toStreamerMessages.get(messageType);
        if (messageFormat === undefined) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Attempted to send a message to the streamer with message type: ${messageType}, but the frontend hasn't been configured to send such a message. Check you've added the message type in your cpp`);
            return;
        }
        if (messageFormat.structure && messageData && messageFormat.structure.length !== messageData.length) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Provided message data doesn't match expected layout. Expected [ ${messageFormat.structure.map((element) => {
                switch (element) {
                    case 'uint8':
                    case 'uint16':
                    case 'int16':
                    case 'float':
                    case 'double':
                        return 'number';
                    case 'string':
                        return 'string';
                }
            }).toString()} ] but received [ ${messageData.map((element) => typeof element).toString()} ]`);
            return;
        }
        let byteLength = 0;
        const textEncoder = new TextEncoder();
        // One loop to calculate the length in bytes of all of the provided data
        messageData.forEach((element, idx) => {
            const type = messageFormat.structure[idx];
            switch (type) {
                case 'uint8':
                    byteLength += 1;
                    break;
                case 'uint16':
                    byteLength += 2;
                    break;
                case 'int16':
                    byteLength += 2;
                    break;
                case 'float':
                    byteLength += 4;
                    break;
                case 'double':
                    byteLength += 8;
                    break;
                case 'string':
                    // 2 bytes for string length
                    byteLength += 2;
                    // 2 bytes per characters
                    byteLength += 2 * textEncoder.encode(element).length;
                    break;
            }
        });
        const data = new DataView(new ArrayBuffer(byteLength + 1));
        data.setUint8(0, messageFormat.id);
        let byteOffset = 1;
        messageData.forEach((element, idx) => {
            const type = messageFormat.structure[idx];
            switch (type) {
                case 'uint8':
                    data.setUint8(byteOffset, element);
                    byteOffset += 1;
                    break;
                case 'uint16':
                    data.setUint16(byteOffset, element, true);
                    byteOffset += 2;
                    break;
                case 'int16':
                    data.setInt16(byteOffset, element, true);
                    byteOffset += 2;
                    break;
                case 'float':
                    data.setFloat32(byteOffset, element, true);
                    byteOffset += 4;
                    break;
                case 'double':
                    data.setFloat64(byteOffset, element, true);
                    byteOffset += 8;
                    break;
                case 'string':
                    data.setUint16(byteOffset, element.length, true);
                    byteOffset += 2;
                    for (let i = 0; i < element.length; i++) {
                        data.setUint16(byteOffset, element.charCodeAt(i), true);
                        byteOffset += 2;
                    }
                    break;
            }
        });
        if (!this.dataChannelSender.canSend()) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Data channel cannot send yet, skipping sending message: ${messageType} - ${new Uint8Array(data.buffer)}`);
            return;
        }
        this.dataChannelSender.sendData(data.buffer);
    }
}


/***/ }),

/***/ "./src/UeInstanceMessage/StreamMessageController.ts":
/*!**********************************************************!*\
  !*** ./src/UeInstanceMessage/StreamMessageController.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_257525__) => {

__nested_webpack_require_257525__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_257525__.d(__webpack_exports__, {
/* harmony export */   "MessageDirection": () => (/* binding */ MessageDirection),
/* harmony export */   "StreamMessageController": () => (/* binding */ StreamMessageController),
/* harmony export */   "ToStreamerMessage": () => (/* binding */ ToStreamerMessage)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_257525__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

class ToStreamerMessage {
}
class StreamMessageController {
    constructor() {
        this.toStreamerHandlers = new Map();
        this.fromStreamerHandlers = new Map();
        this.toStreamerMessages = new Map();
        this.fromStreamerMessages = new Map();
    }
    /**
     * Populate the Default message protocol
     */
    populateDefaultProtocol() {
        /*
         * Control Messages. Range = 0..49.
         */
        this.toStreamerMessages.set('IFrameRequest', {
            id: 0,
            structure: []
        });
        this.toStreamerMessages.set('RequestQualityControl', {
            id: 1,
            structure: []
        });
        this.toStreamerMessages.set('FpsRequest', {
            id: 2,
            structure: []
        });
        this.toStreamerMessages.set('AverageBitrateRequest', {
            id: 3,
            structure: []
        });
        this.toStreamerMessages.set('StartStreaming', {
            id: 4,
            structure: []
        });
        this.toStreamerMessages.set('StopStreaming', {
            id: 5,
            structure: []
        });
        this.toStreamerMessages.set('LatencyTest', {
            id: 6,
            structure: ['string']
        });
        this.toStreamerMessages.set('RequestInitialSettings', {
            id: 7,
            structure: []
        });
        this.toStreamerMessages.set('TestEcho', {
            id: 8,
            structure: []
        });
        this.toStreamerMessages.set('DataChannelLatencyTest', {
            id: 9,
            structure: []
        });
        /*
         * Input Messages. Range = 50..89.
         */
        // Generic Input Messages. Range = 50..59.
        this.toStreamerMessages.set('UIInteraction', {
            id: 50,
            structure: ['string']
        });
        this.toStreamerMessages.set('Command', {
            id: 51,
            structure: ['string']
        });
        // Keyboard Input Message. Range = 60..69.
        this.toStreamerMessages.set('KeyDown', {
            id: 60,
            //            keyCode  isRepeat
            structure: ['uint8', 'uint8']
        });
        this.toStreamerMessages.set('KeyUp', {
            id: 61,
            //            keyCode
            structure: ['uint8']
        });
        this.toStreamerMessages.set('KeyPress', {
            id: 62,
            //            charcode
            structure: ['uint16']
        });
        // Mouse Input Messages. Range = 70..79.
        this.toStreamerMessages.set('MouseEnter', {
            id: 70,
            structure: []
        });
        this.toStreamerMessages.set('MouseLeave', {
            id: 71,
            structure: []
        });
        this.toStreamerMessages.set('MouseDown', {
            id: 72,
            //              button     x         y
            structure: ['uint8', 'uint16', 'uint16']
        });
        this.toStreamerMessages.set('MouseUp', {
            id: 73,
            //              button     x         y
            structure: ['uint8', 'uint16', 'uint16']
        });
        this.toStreamerMessages.set('MouseMove', {
            id: 74,
            //              x           y      deltaX    deltaY
            structure: ['uint16', 'uint16', 'int16', 'int16']
        });
        this.toStreamerMessages.set('MouseWheel', {
            id: 75,
            //              delta       x        y
            structure: ['int16', 'uint16', 'uint16']
        });
        this.toStreamerMessages.set('MouseDouble', {
            id: 76,
            //              button     x         y
            structure: ['uint8', 'uint16', 'uint16']
        });
        // Touch Input Messages. Range = 80..89.
        this.toStreamerMessages.set('TouchStart', {
            id: 80,
            //          numtouches(1)   x       y        idx     force     valid
            structure: ['uint8', 'uint16', 'uint16', 'uint8', 'uint8', 'uint8']
        });
        this.toStreamerMessages.set('TouchEnd', {
            id: 81,
            //          numtouches(1)   x       y        idx     force     valid
            structure: ['uint8', 'uint16', 'uint16', 'uint8', 'uint8', 'uint8']
        });
        this.toStreamerMessages.set('TouchMove', {
            id: 82,
            //          numtouches(1)   x       y       idx      force     valid
            structure: ['uint8', 'uint16', 'uint16', 'uint8', 'uint8', 'uint8']
        });
        // Gamepad Input Messages. Range = 90..99
        this.toStreamerMessages.set('GamepadConnected', {
            id: 93,
            structure: []
        });
        this.toStreamerMessages.set('GamepadButtonPressed', {
            id: 90,
            //         ctrlerId   button  isRepeat
            structure: ['uint8', 'uint8', 'uint8']
        });
        this.toStreamerMessages.set('GamepadButtonReleased', {
            id: 91,
            //         ctrlerId   button  isRepeat(0)
            structure: ['uint8', 'uint8', 'uint8']
        });
        this.toStreamerMessages.set('GamepadAnalog', {
            id: 92,
            //         ctrlerId   button  analogValue
            structure: ['uint8', 'uint8', 'double']
        });
        this.toStreamerMessages.set('GamepadDisconnected', {
            id: 94,
            //          ctrlerId
            structure: ['uint8']
        });
        this.fromStreamerMessages.set(0, 'QualityControlOwnership');
        this.fromStreamerMessages.set(1, 'Response');
        this.fromStreamerMessages.set(2, 'Command');
        this.fromStreamerMessages.set(3, 'FreezeFrame');
        this.fromStreamerMessages.set(4, 'UnfreezeFrame');
        this.fromStreamerMessages.set(5, 'VideoEncoderAvgQP');
        this.fromStreamerMessages.set(6, 'LatencyTest');
        this.fromStreamerMessages.set(7, 'InitialSettings');
        this.fromStreamerMessages.set(8, 'FileExtension');
        this.fromStreamerMessages.set(9, 'FileMimeType');
        this.fromStreamerMessages.set(10, 'FileContents');
        this.fromStreamerMessages.set(11, 'TestEcho');
        this.fromStreamerMessages.set(12, 'InputControlOwnership');
        this.fromStreamerMessages.set(13, 'GamepadResponse');
        this.fromStreamerMessages.set(14, 'DataChannelLatencyTest');
        this.fromStreamerMessages.set(255, 'Protocol');
    }
    /**
     * Register a message handler
     * @param messageDirection - the direction of the message; toStreamer or fromStreamer
     * @param messageType - the type of the message
     * @param messageHandler - the function or method to be executed when this handler is called
     */
    registerMessageHandler(messageDirection, messageType, messageHandler) {
        switch (messageDirection) {
            case MessageDirection.ToStreamer:
                this.toStreamerHandlers.set(messageType, messageHandler);
                break;
            case MessageDirection.FromStreamer:
                this.fromStreamerHandlers.set(messageType, messageHandler);
                break;
            default:
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Unknown message direction ${messageDirection}`);
        }
    }
}
/**
 * The enum for message directions
 */
var MessageDirection;
(function (MessageDirection) {
    MessageDirection[MessageDirection["ToStreamer"] = 0] = "ToStreamer";
    MessageDirection[MessageDirection["FromStreamer"] = 1] = "FromStreamer";
})(MessageDirection || (MessageDirection = {}));


/***/ }),

/***/ "./src/UeInstanceMessage/ToStreamerMessagesController.ts":
/*!***************************************************************!*\
  !*** ./src/UeInstanceMessage/ToStreamerMessagesController.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_266240__) => {

__nested_webpack_require_266240__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_266240__.d(__webpack_exports__, {
/* harmony export */   "ToStreamerMessagesController": () => (/* binding */ ToStreamerMessagesController)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
class ToStreamerMessagesController {
    /**
     * @param sendMessageController - Stream message controller instance
     */
    constructor(sendMessageController) {
        this.sendMessageController = sendMessageController;
    }
    /**
     * Send Request to Take Quality Control to the UE Instance
     */
    SendRequestQualityControl() {
        this.sendMessageController.sendMessageToStreamer('RequestQualityControl');
    }
    /**
     * Send Max FPS Request to the UE Instance
     */
    SendMaxFpsRequest() {
        this.sendMessageController.sendMessageToStreamer('FpsRequest');
    }
    /**
     * Send Average Bitrate Request to the UE Instance
     */
    SendAverageBitrateRequest() {
        this.sendMessageController.sendMessageToStreamer('AverageBitrateRequest');
    }
    /**
     * Send a Start Streaming Message to the UE Instance
     */
    SendStartStreaming() {
        this.sendMessageController.sendMessageToStreamer('StartStreaming');
    }
    /**
     * Send a Stop Streaming Message to the UE Instance
     */
    SendStopStreaming() {
        this.sendMessageController.sendMessageToStreamer('StopStreaming');
    }
    /**
     * Send a Request Initial Settings to the UE Instance
     */
    SendRequestInitialSettings() {
        this.sendMessageController.sendMessageToStreamer('RequestInitialSettings');
    }
}


/***/ }),

/***/ "./src/Util/CoordinateConverter.ts":
/*!*****************************************!*\
  !*** ./src/Util/CoordinateConverter.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_268212__) => {

__nested_webpack_require_268212__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_268212__.d(__webpack_exports__, {
/* harmony export */   "CoordinateConverter": () => (/* binding */ CoordinateConverter),
/* harmony export */   "NormalizedQuantizedSignedCoord": () => (/* binding */ NormalizedQuantizedSignedCoord),
/* harmony export */   "NormalizedQuantizedUnsignedCoord": () => (/* binding */ NormalizedQuantizedUnsignedCoord),
/* harmony export */   "UnquantizedDenormalizedUnsignedCoord": () => (/* binding */ UnquantizedDenormalizedUnsignedCoord)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_268212__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * Converts coordinates from element relative coordinates to values normalized within the value range of a short (and back again)
 */
class CoordinateConverter {
    /**
     * @param videoElementProvider - the div element that the video player will be injected into
     */
    constructor(videoElementProvider) {
        this.videoElementProvider = videoElementProvider;
        this.normalizeAndQuantizeUnsignedFunc = () => {
            throw new Error('Normalize and quantize unsigned, method not implemented.');
        };
        this.normalizeAndQuantizeSignedFunc = () => {
            throw new Error('Normalize and unquantize signed, method not implemented.');
        };
        this.denormalizeAndUnquantizeUnsignedFunc = () => {
            throw new Error('Denormalize and unquantize unsigned, method not implemented.');
        };
    }
    /**
     * The surface method for setterNormalizeAndQuantizeUnsigned
     * @param x - x axis point
     * @param y - y axis point
     */
    normalizeAndQuantizeUnsigned(x, y) {
        return this.normalizeAndQuantizeUnsignedFunc(x, y);
    }
    /**
     * The surface method for setterUnquantizeAndDenormalizeUnsigned
     * @param x - x axis point
     * @param y - y axis point
     */
    unquantizeAndDenormalizeUnsigned(x, y) {
        return this.denormalizeAndUnquantizeUnsignedFunc(x, y);
    }
    /**
     * The surface method for setterNormalizeAndQuantizeSigned
     * @param x - x axis point
     * @param y - y axis point
     */
    normalizeAndQuantizeSigned(x, y) {
        return this.normalizeAndQuantizeSignedFunc(x, y);
    }
    /**
     * set up the Normalize And Quantize methods based on the aspect ratio and the video player ratio
     */
    setupNormalizeAndQuantize() {
        this.videoElementParent =
            this.videoElementProvider.getVideoParentElement();
        this.videoElement = this.videoElementProvider.getVideoElement();
        if (this.videoElementParent && this.videoElement) {
            const playerWidth = this.videoElementParent.clientWidth || 1;
            const playerHeight = this.videoElementParent.clientHeight || 1;
            const videoWidth = this.videoElement.videoWidth || 1;
            const videoHeight = this.videoElement.videoHeight || 1;
            const playerAspectRatio = playerHeight / playerWidth;
            const videoAspectRatio = videoHeight / videoWidth;
            if (playerAspectRatio > videoAspectRatio) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Setup Normalize and Quantize for playerAspectRatio > videoAspectRatio', 6);
                this.ratio = playerAspectRatio / videoAspectRatio;
                this.normalizeAndQuantizeUnsignedFunc = (x, y) => this.normalizeAndQuantizeUnsignedPlayerBigger(x, y);
                this.normalizeAndQuantizeSignedFunc = (x, y) => this.normalizeAndQuantizeSignedPlayerBigger(x, y);
                this.denormalizeAndUnquantizeUnsignedFunc = (x, y) => this.denormalizeAndUnquantizeUnsignedPlayerBigger(x, y);
            }
            else {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Setup Normalize and Quantize for playerAspectRatio <= videoAspectRatio', 6);
                this.ratio = videoAspectRatio / playerAspectRatio;
                this.normalizeAndQuantizeUnsignedFunc = (x, y) => this.normalizeAndQuantizeUnsignedPlayerSmaller(x, y);
                this.normalizeAndQuantizeSignedFunc = (x, y) => this.normalizeAndQuantizeSignedPlayerSmaller(x, y);
                this.denormalizeAndUnquantizeUnsignedFunc = (x, y) => this.denormalizeAndUnquantizeUnsignedPlayerSmaller(x, y);
            }
        }
    }
    /**
     * normalizeAndQuantizeUnsigned for playerAspectRatio > videoAspectRatio
     * @param x - x axis point
     * @param y - y axis point
     */
    normalizeAndQuantizeUnsignedPlayerBigger(x, y) {
        const normalizedX = x / this.videoElementParent.clientWidth;
        const normalizedY = this.ratio * (y / this.videoElementParent.clientHeight - 0.5) + 0.5;
        if (normalizedX < 0.0 ||
            normalizedX > 1.0 ||
            normalizedY < 0.0 ||
            normalizedY > 1.0) {
            return new NormalizedQuantizedUnsignedCoord(false, 65535, 65535);
        }
        else {
            return new NormalizedQuantizedUnsignedCoord(true, normalizedX * 65536, normalizedY * 65536);
        }
    }
    /**
     * unquantizeAndDenormalizeUnsigned for playerAspectRatio > videoAspectRatio
     * @param x - x axis point
     * @param y - y axis point
     */
    denormalizeAndUnquantizeUnsignedPlayerBigger(x, y) {
        const normalizedX = x / 65536;
        const normalizedY = (y / 65536 - 0.5) / this.ratio + 0.5;
        return new UnquantizedDenormalizedUnsignedCoord(normalizedX * this.videoElementParent.clientWidth, normalizedY * this.videoElementParent.clientHeight);
    }
    /**
     * normalizeAndQuantizeSigned for playerAspectRatio > videoAspectRatio
     * @param x - x axis point
     * @param y - y axis point
     */
    normalizeAndQuantizeSignedPlayerBigger(x, y) {
        const normalizedX = x / (0.5 * this.videoElementParent.clientWidth);
        const normalizedY = (this.ratio * y) / (0.5 * this.videoElementParent.clientHeight);
        return new NormalizedQuantizedSignedCoord(normalizedX * 32767, normalizedY * 32767);
    }
    /**
     * normalizeAndQuantizeUnsigned for playerAspectRatio <= videoAspectRatio
     * @param x - x axis point
     * @param y - y axis point
     */
    normalizeAndQuantizeUnsignedPlayerSmaller(x, y) {
        const normalizedX = this.ratio * (x / this.videoElementParent.clientWidth - 0.5) + 0.5;
        const normalizedY = y / this.videoElementParent.clientHeight;
        if (normalizedX < 0.0 ||
            normalizedX > 1.0 ||
            normalizedY < 0.0 ||
            normalizedY > 1.0) {
            return new NormalizedQuantizedUnsignedCoord(false, 65535, 65535);
        }
        else {
            return new NormalizedQuantizedUnsignedCoord(true, normalizedX * 65536, normalizedY * 65536);
        }
    }
    /**
     * unquantizeAndDenormalizeUnsigned for playerAspectRatio <= videoAspectRatio
     * @param x - x axis point
     * @param y - y axis point
     */
    denormalizeAndUnquantizeUnsignedPlayerSmaller(x, y) {
        const normalizedX = (x / 65536 - 0.5) / this.ratio + 0.5;
        const normalizedY = y / 65536;
        return new UnquantizedDenormalizedUnsignedCoord(normalizedX * this.videoElementParent.clientWidth, normalizedY * this.videoElementParent.clientHeight);
    }
    /**
     * normalizeAndQuantizeSigned for playerAspectRatio <= videoAspectRatio
     * @param x - x axis point
     * @param y - y axis point
     */
    normalizeAndQuantizeSignedPlayerSmaller(x, y) {
        const normalizedX = (this.ratio * x) / (0.5 * this.videoElementParent.clientWidth);
        const normalizedY = y / (0.5 * this.videoElementParent.clientHeight);
        return new NormalizedQuantizedSignedCoord(normalizedX * 32767, normalizedY * 32767);
    }
}
/**
 * A class for NormalizeAndQuantizeUnsigned objects
 */
class NormalizedQuantizedUnsignedCoord {
    constructor(inRange, x, y) {
        this.inRange = inRange;
        this.x = x;
        this.y = y;
    }
}
/**
 * A class for UnquantizedAndDenormalizeUnsigned objects
 */
class UnquantizedDenormalizedUnsignedCoord {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
}
/**
 * A class for NormalizedQuantizedSignedCoord objects
 */
class NormalizedQuantizedSignedCoord {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
}


/***/ }),

/***/ "./src/Util/EventEmitter.ts":
/*!**********************************!*\
  !*** ./src/Util/EventEmitter.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_277183__) => {

__nested_webpack_require_277183__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_277183__.d(__webpack_exports__, {
/* harmony export */   "AfkTimedOutEvent": () => (/* binding */ AfkTimedOutEvent),
/* harmony export */   "AfkWarningActivateEvent": () => (/* binding */ AfkWarningActivateEvent),
/* harmony export */   "AfkWarningDeactivateEvent": () => (/* binding */ AfkWarningDeactivateEvent),
/* harmony export */   "AfkWarningUpdateEvent": () => (/* binding */ AfkWarningUpdateEvent),
/* harmony export */   "DataChannelCloseEvent": () => (/* binding */ DataChannelCloseEvent),
/* harmony export */   "DataChannelErrorEvent": () => (/* binding */ DataChannelErrorEvent),
/* harmony export */   "DataChannelLatencyTestResponseEvent": () => (/* binding */ DataChannelLatencyTestResponseEvent),
/* harmony export */   "DataChannelLatencyTestResultEvent": () => (/* binding */ DataChannelLatencyTestResultEvent),
/* harmony export */   "DataChannelOpenEvent": () => (/* binding */ DataChannelOpenEvent),
/* harmony export */   "EventEmitter": () => (/* binding */ EventEmitter),
/* harmony export */   "HideFreezeFrameEvent": () => (/* binding */ HideFreezeFrameEvent),
/* harmony export */   "InitialSettingsEvent": () => (/* binding */ InitialSettingsEvent),
/* harmony export */   "LatencyTestResultEvent": () => (/* binding */ LatencyTestResultEvent),
/* harmony export */   "LoadFreezeFrameEvent": () => (/* binding */ LoadFreezeFrameEvent),
/* harmony export */   "PlayStreamErrorEvent": () => (/* binding */ PlayStreamErrorEvent),
/* harmony export */   "PlayStreamEvent": () => (/* binding */ PlayStreamEvent),
/* harmony export */   "PlayStreamRejectedEvent": () => (/* binding */ PlayStreamRejectedEvent),
/* harmony export */   "PlayerCountEvent": () => (/* binding */ PlayerCountEvent),
/* harmony export */   "SettingsChangedEvent": () => (/* binding */ SettingsChangedEvent),
/* harmony export */   "StatsReceivedEvent": () => (/* binding */ StatsReceivedEvent),
/* harmony export */   "StreamLoadingEvent": () => (/* binding */ StreamLoadingEvent),
/* harmony export */   "StreamPreConnectEvent": () => (/* binding */ StreamPreConnectEvent),
/* harmony export */   "StreamPreDisconnectEvent": () => (/* binding */ StreamPreDisconnectEvent),
/* harmony export */   "StreamReconnectEvent": () => (/* binding */ StreamReconnectEvent),
/* harmony export */   "StreamerIDChangedMessageEvent": () => (/* binding */ StreamerIDChangedMessageEvent),
/* harmony export */   "StreamerListMessageEvent": () => (/* binding */ StreamerListMessageEvent),
/* harmony export */   "VideoEncoderAvgQPEvent": () => (/* binding */ VideoEncoderAvgQPEvent),
/* harmony export */   "VideoInitializedEvent": () => (/* binding */ VideoInitializedEvent),
/* harmony export */   "WebRtcAutoConnectEvent": () => (/* binding */ WebRtcAutoConnectEvent),
/* harmony export */   "WebRtcConnectedEvent": () => (/* binding */ WebRtcConnectedEvent),
/* harmony export */   "WebRtcConnectingEvent": () => (/* binding */ WebRtcConnectingEvent),
/* harmony export */   "WebRtcDisconnectedEvent": () => (/* binding */ WebRtcDisconnectedEvent),
/* harmony export */   "WebRtcFailedEvent": () => (/* binding */ WebRtcFailedEvent),
/* harmony export */   "WebRtcSdpEvent": () => (/* binding */ WebRtcSdpEvent),
/* harmony export */   "WebRtcTCPRelayDetectedEvent": () => (/* binding */ WebRtcTCPRelayDetectedEvent),
/* harmony export */   "XrFrameEvent": () => (/* binding */ XrFrameEvent),
/* harmony export */   "XrSessionEndedEvent": () => (/* binding */ XrSessionEndedEvent),
/* harmony export */   "XrSessionStartedEvent": () => (/* binding */ XrSessionStartedEvent)
/* harmony export */ });
/**
 * An event that is emitted when AFK disconnect is about to happen.
 * Can be cancelled by calling the callback function provided as part of the event.
 */
class AfkWarningActivateEvent extends Event {
    constructor(data) {
        super('afkWarningActivate');
        this.data = data;
    }
}
/**
 * An event that is emitted when the AFK disconnect countdown is updated.
 */
class AfkWarningUpdateEvent extends Event {
    constructor(data) {
        super('afkWarningUpdate');
        this.data = data;
    }
}
/**
 * An event that is emitted when AFK warning is deactivated.
 */
class AfkWarningDeactivateEvent extends Event {
    constructor() {
        super('afkWarningDeactivate');
    }
}
/**
 * An event that is emitted when AFK countdown reaches 0 and the user is disconnected.
 */
class AfkTimedOutEvent extends Event {
    constructor() {
        super('afkTimedOut');
    }
}
/**
 * An event that is emitted when we receive new video quality value.
 */
class VideoEncoderAvgQPEvent extends Event {
    constructor(data) {
        super('videoEncoderAvgQP');
        this.data = data;
    }
}
/**
 * An event that is emitted after a WebRtc connection has been negotiated.
 */
class WebRtcSdpEvent extends Event {
    constructor() {
        super('webRtcSdp');
    }
}
/**
 * An event that is emitted when auto connecting.
 */
class WebRtcAutoConnectEvent extends Event {
    constructor() {
        super('webRtcAutoConnect');
    }
}
/**
 * An event that is emitted when sending a WebRtc offer.
 */
class WebRtcConnectingEvent extends Event {
    constructor() {
        super('webRtcConnecting');
    }
}
/**
 * An event that is emitted when WebRtc connection has been established.
 */
class WebRtcConnectedEvent extends Event {
    constructor() {
        super('webRtcConnected');
    }
}
/**
 * An event that is emitted if WebRtc connection has failed.
 */
class WebRtcFailedEvent extends Event {
    constructor() {
        super('webRtcFailed');
    }
}
/**
 * An event that is emitted if WebRtc connection is disconnected.
 */
class WebRtcDisconnectedEvent extends Event {
    constructor(data) {
        super('webRtcDisconnected');
        this.data = data;
    }
}
/**
 * An event that is emitted when RTCDataChannel is opened.
 */
class DataChannelOpenEvent extends Event {
    constructor(data) {
        super('dataChannelOpen');
        this.data = data;
    }
}
/**
 * An event that is emitted when RTCDataChannel is closed.
 */
class DataChannelCloseEvent extends Event {
    constructor(data) {
        super('dataChannelClose');
        this.data = data;
    }
}
/**
 * An event that is emitted on RTCDataChannel errors.
 */
class DataChannelErrorEvent extends Event {
    constructor(data) {
        super('dataChannelError');
        this.data = data;
    }
}
/**
 * An event that is emitted when the video stream has been initialized.
 */
class VideoInitializedEvent extends Event {
    constructor() {
        super('videoInitialized');
    }
}
/**
 * An event that is emitted when video stream loading starts.
 */
class StreamLoadingEvent extends Event {
    constructor() {
        super('streamLoading');
    }
}
/**
 * An event that is emitted when video stream loading has finished.
 */
class StreamPreConnectEvent extends Event {
    constructor() {
        super('streamConnect');
    }
}
/**
 * An event that is emitted when video stream has stopped.
 */
class StreamPreDisconnectEvent extends Event {
    constructor() {
        super('streamDisconnect');
    }
}
/**
 * An event that is emitted when video stream is reconnecting.
 */
class StreamReconnectEvent extends Event {
    constructor() {
        super('streamReconnect');
    }
}
/**
 * An event that is emitted if there are errors loading the video stream.
 */
class PlayStreamErrorEvent extends Event {
    constructor(data) {
        super('playStreamError');
        this.data = data;
    }
}
/**
 * An event that is emitted before trying to start video playback.
 */
class PlayStreamEvent extends Event {
    constructor() {
        super('playStream');
    }
}
/**
 * An event that is emitted if the browser rejects video playback. Can happen for example if
 * video auto-play without user interaction is refused by the browser.
 */
class PlayStreamRejectedEvent extends Event {
    constructor(data) {
        super('playStreamRejected');
        this.data = data;
    }
}
/**
 * An event that is emitted when receiving a full FreezeFrame image from UE.
 */
class LoadFreezeFrameEvent extends Event {
    constructor(data) {
        super('loadFreezeFrame');
        this.data = data;
    }
}
/**
 * An event that is emitted when receiving UnfreezeFrame message from UE and video playback is about to be resumed.
 */
class HideFreezeFrameEvent extends Event {
    constructor() {
        super('hideFreezeFrame');
    }
}
/**
 * An event that is emitted when receiving WebRTC statistics.
 */
class StatsReceivedEvent extends Event {
    constructor(data) {
        super('statsReceived');
        this.data = data;
    }
}
/**
 * An event that is emitted when streamer list changes.
 */
class StreamerListMessageEvent extends Event {
    constructor(data) {
        super('streamerListMessage');
        this.data = data;
    }
}
/**
 * An event that is emitted when a subscribed to streamer's id changes.
 */
class StreamerIDChangedMessageEvent extends Event {
    constructor(data) {
        super('StreamerIDChangedMessage');
        this.data = data;
    }
}
/**
 * An event that is emitted when receiving latency test results.
 */
class LatencyTestResultEvent extends Event {
    constructor(data) {
        super('latencyTestResult');
        this.data = data;
    }
}
/**
 * An event that is emitted when receiving data channel latency test response from server.
 * This event is handled by DataChannelLatencyTestController
 */
class DataChannelLatencyTestResponseEvent extends Event {
    constructor(data) {
        super('dataChannelLatencyTestResponse');
        this.data = data;
    }
}
/**
 * An event that is emitted when data channel latency test results are ready.
 */
class DataChannelLatencyTestResultEvent extends Event {
    constructor(data) {
        super('dataChannelLatencyTestResult');
        this.data = data;
    }
}
/**
 * An event that is emitted when receiving initial settings from UE.
 */
class InitialSettingsEvent extends Event {
    constructor(data) {
        super('initialSettings');
        this.data = data;
    }
}
/**
 * An event that is emitted when PixelStreaming settings change.
 */
class SettingsChangedEvent extends Event {
    constructor(data) {
        super('settingsChanged');
        this.data = data;
    }
}
/**
 * Event emitted when an XR Session starts
 */
class XrSessionStartedEvent extends Event {
    constructor() {
        super('xrSessionStarted');
    }
}
/**
 * Event emitted when an XR Session ends
 */
class XrSessionEndedEvent extends Event {
    constructor() {
        super('xrSessionEnded');
    }
}
/**
 * Event emitted when an XR Frame is complete
 */
class XrFrameEvent extends Event {
    constructor(data) {
        super('xrFrame');
        this.data = data;
    }
}
/**
 * An event that is emitted when receiving a player count from the signalling server
 */
class PlayerCountEvent extends Event {
    constructor(data) {
        super('playerCount');
        this.data = data;
    }
}
/**
 * An event that is emitted when the webRTC connections is relayed over TCP.
 */
class WebRtcTCPRelayDetectedEvent extends Event {
    constructor() {
        super('webRtcTCPRelayDetected');
    }
}
class EventEmitter extends EventTarget {
    /**
     * Dispatch a new event.
     * @param e event
     * @returns
     */
    dispatchEvent(e) {
        return super.dispatchEvent(e);
    }
    /**
     * Register an event handler.
     * @param type event name
     * @param listener event handler function
     */
    addEventListener(type, listener) {
        super.addEventListener(type, listener);
    }
    /**
     * Remove an event handler.
     * @param type event name
     * @param listener event handler function
     */
    removeEventListener(type, listener) {
        super.removeEventListener(type, listener);
    }
}


/***/ }),

/***/ "./src/Util/EventListenerTracker.ts":
/*!******************************************!*\
  !*** ./src/Util/EventListenerTracker.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_289702__) => {

__nested_webpack_require_289702__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_289702__.d(__webpack_exports__, {
/* harmony export */   "EventListenerTracker": () => (/* binding */ EventListenerTracker)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
class EventListenerTracker {
    constructor() {
        this.unregisterCallbacks = [];
    }
    /**
     * Add a new callback that is executed when unregisterAll is called.
     * @param callback
     */
    addUnregisterCallback(callback) {
        this.unregisterCallbacks.push(callback);
    }
    /**
     * Execute all callbacks and clear the list.
     */
    unregisterAll() {
        for (const callback of this.unregisterCallbacks) {
            callback();
        }
        this.unregisterCallbacks = [];
    }
}


/***/ }),

/***/ "./src/Util/FileUtil.ts":
/*!******************************!*\
  !*** ./src/Util/FileUtil.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_290759__) => {

__nested_webpack_require_290759__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_290759__.d(__webpack_exports__, {
/* harmony export */   "FileTemplate": () => (/* binding */ FileTemplate),
/* harmony export */   "FileUtil": () => (/* binding */ FileUtil)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_290759__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * Utility function for populate file information from byte buffers.
 */
class FileUtil {
    /**
     * Processes a files extension when received over data channel
     * @param view - the file extension data
     */
    static setExtensionFromBytes(view, file) {
        // Reset file if we got a file message and we are not "receiving" it yet
        if (!file.receiving) {
            file.mimetype = '';
            file.extension = '';
            file.receiving = true;
            file.valid = false;
            file.size = 0;
            file.data = [];
            file.timestampStart = new Date().getTime();
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Received first chunk of file', 6);
        }
        const extensionAsString = new TextDecoder('utf-16').decode(view.slice(1));
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), extensionAsString, 6);
        file.extension = extensionAsString;
    }
    /**
     * Processes a files mime type when received over data channel
     * @param view - the file mime type data
     */
    static setMimeTypeFromBytes(view, file) {
        // Reset file if we got a file message and we are not "receiving" it yet
        if (!file.receiving) {
            file.mimetype = '';
            file.extension = '';
            file.receiving = true;
            file.valid = false;
            file.size = 0;
            file.data = [];
            file.timestampStart = new Date().getTime();
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Received first chunk of file', 6);
        }
        const mimeAsString = new TextDecoder('utf-16').decode(view.slice(1));
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), mimeAsString, 6);
        file.mimetype = mimeAsString;
    }
    /**
     * Processes a files contents when received over data channel
     * @param view - the file contents data
     */
    static setContentsFromBytes(view, file) {
        // If we haven't received the initial setup instructions, return
        if (!file.receiving)
            return;
        // Extract the total size of the file (across all chunks)
        file.size = Math.ceil(new DataView(view.slice(1, 5).buffer).getInt32(0, true) /
            16379 /* The maximum number of payload bits per message*/);
        // Get the file part of the payload
        const fileBytes = view.slice(1 + 4);
        // Append to existing data that holds the file
        file.data.push(fileBytes);
        // Uncomment for debug
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Received file chunk: ${file.data.length}/${file.size}`, 6);
        if (file.data.length === file.size) {
            file.receiving = false;
            file.valid = true;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Received complete file', 6);
            const transferDuration = new Date().getTime() - file.timestampStart;
            const transferBitrate = Math.round((file.size * 16 * 1024) / transferDuration);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Average transfer bitrate: ${transferBitrate}kb/s over ${transferDuration / 1000} seconds`, 6);
            // File reconstruction
            /**
             * Example code to reconstruct the file
             *
             * This code reconstructs the received data into the original file based on the mime type and extension provided and then downloads the reconstructed file
             */
            const received = new Blob(file.data, { type: file.mimetype });
            const a = document.createElement('a');
            a.setAttribute('href', URL.createObjectURL(received));
            a.setAttribute('download', `transfer.${file.extension}`);
            document.body.append(a);
            // if you are so inclined to make it auto-download, do something like: a.click();
            a.remove();
        }
        else if (file.data.length > file.size) {
            file.receiving = false;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Received bigger file than advertised: ${file.data.length}/${file.size}`);
        }
    }
}
/**
 * A class that represents a template for a downloaded file
 */
class FileTemplate {
    constructor() {
        this.mimetype = '';
        this.extension = '';
        this.receiving = false;
        this.size = 0;
        this.data = [];
        this.valid = false;
    }
}


/***/ }),

/***/ "./src/Util/RTCUtils.ts":
/*!******************************!*\
  !*** ./src/Util/RTCUtils.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_296567__) => {

__nested_webpack_require_296567__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_296567__.d(__webpack_exports__, {
/* harmony export */   "RTCUtils": () => (/* binding */ RTCUtils)
/* harmony export */ });
class RTCUtils {
    static isVideoTransciever(transceiver) {
        return this.canTransceiverReceiveVideo(transceiver) || this.canTransceiverSendVideo(transceiver);
    }
    static canTransceiverReceiveVideo(transceiver) {
        return !!transceiver &&
            (transceiver.direction === 'sendrecv' || transceiver.direction === 'recvonly') &&
            transceiver.receiver &&
            transceiver.receiver.track &&
            transceiver.receiver.track.kind === 'video';
    }
    static canTransceiverSendVideo(transceiver) {
        return !!transceiver &&
            (transceiver.direction === 'sendrecv' || transceiver.direction === 'sendonly') &&
            transceiver.sender &&
            transceiver.sender.track &&
            transceiver.sender.track.kind === 'video';
    }
    static isAudioTransciever(transceiver) {
        return this.canTransceiverReceiveAudio(transceiver) || this.canTransceiverSendAudio(transceiver);
    }
    static canTransceiverReceiveAudio(transceiver) {
        return !!transceiver &&
            (transceiver.direction === 'sendrecv' || transceiver.direction === 'recvonly') &&
            transceiver.receiver &&
            transceiver.receiver.track &&
            transceiver.receiver.track.kind === 'audio';
    }
    static canTransceiverSendAudio(transceiver) {
        return !!transceiver &&
            (transceiver.direction === 'sendrecv' || transceiver.direction === 'sendonly') &&
            transceiver.sender &&
            transceiver.sender.track &&
            transceiver.sender.track.kind === 'audio';
    }
}


/***/ }),

/***/ "./src/VideoPlayer/StreamController.ts":
/*!*********************************************!*\
  !*** ./src/VideoPlayer/StreamController.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_298692__) => {

__nested_webpack_require_298692__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_298692__.d(__webpack_exports__, {
/* harmony export */   "StreamController": () => (/* binding */ StreamController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_298692__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * Video Player Controller handles the creation of the video HTML element and all handlers
 */
class StreamController {
    /**
     * @param videoElementProvider Video Player instance
     */
    constructor(videoElementProvider) {
        this.videoElementProvider = videoElementProvider;
        this.audioElement = document.createElement('Audio');
        this.videoElementProvider.setAudioElement(this.audioElement);
    }
    /**
     * Handles when the Peer connection has a track event
     * @param rtcTrackEvent - RTC Track Event
     */
    handleOnTrack(rtcTrackEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'handleOnTrack ' + JSON.stringify(rtcTrackEvent.streams), 6);
        // Do not add the track if the ID is `probator` as this is special track created by mediasoup for bitrate probing.
        // Refer to https://github.com/EpicGamesExt/PixelStreamingInfrastructure/pull/86 for more details.
        if (rtcTrackEvent.track.id == 'probator') {
            return;
        }
        const videoElement = this.videoElementProvider.getVideoElement();
        if (rtcTrackEvent.track) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Got track - ' +
                rtcTrackEvent.track.kind +
                ' id=' +
                rtcTrackEvent.track.id +
                ' readyState=' +
                rtcTrackEvent.track.readyState, 6);
        }
        if (rtcTrackEvent.track.kind == 'audio') {
            this.CreateAudioTrack(rtcTrackEvent.streams[0]);
            return;
        }
        else if (rtcTrackEvent.track.kind == 'video' &&
            videoElement.srcObject !== rtcTrackEvent.streams[0]) {
            videoElement.srcObject = rtcTrackEvent.streams[0];
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Set video source from video track ontrack.');
            return;
        }
    }
    /**
     * Creates the audio device when receiving an RTCTrackEvent with the kind of "audio"
     * @param audioMediaStream - Audio Media stream track
     */
    CreateAudioTrack(audioMediaStream) {
        const videoElement = this.videoElementProvider.getVideoElement();
        // do nothing the video has the same media stream as the audio track we have here (they are linked)
        if (videoElement.srcObject == audioMediaStream) {
            return;
        }
        // video element has some other media stream that is not associated with this audio track
        else if (videoElement.srcObject &&
            videoElement.srcObject !== audioMediaStream) {
            // create a new audio element
            this.audioElement.srcObject = audioMediaStream;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Created new audio element to play separate audio stream.');
        }
    }
}


/***/ }),

/***/ "./src/VideoPlayer/VideoPlayer.ts":
/*!****************************************!*\
  !*** ./src/VideoPlayer/VideoPlayer.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_302533__) => {

__nested_webpack_require_302533__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_302533__.d(__webpack_exports__, {
/* harmony export */   "VideoPlayer": () => (/* binding */ VideoPlayer)
/* harmony export */ });
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_302533__(/*! ../Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_302533__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.


/**
 * The video player html element
 */
class VideoPlayer {
    /**
     * @param videoElementParent the html div the the video player will be injected into
     * @param config the applications configuration. We're interested in the startVideoMuted flag
     */
    constructor(videoElementParent, config) {
        this.lastTimeResized = new Date().getTime();
        this.videoElement = document.createElement('video');
        this.config = config;
        this.videoElement.id = 'streamingVideo';
        this.videoElement.disablePictureInPicture = true;
        this.videoElement.playsInline = true;
        this.videoElement.style.width = '100%';
        this.videoElement.style.height = '100%';
        this.videoElement.style.position = 'absolute';
        this.videoElement.style.pointerEvents = 'all';
        videoElementParent.appendChild(this.videoElement);
        this.onResizePlayerCallback = () => {
            console.log('Resolution changed, restyling player, did you forget to override this function?');
        };
        this.onMatchViewportResolutionCallback = () => {
            console.log('Resolution changed and match viewport resolution is turned on, did you forget to override this function?');
        };
        // set play for video (and audio)
        this.videoElement.onclick = () => {
            if (this.audioElement != undefined && this.audioElement.paused) {
                this.audioElement.play();
            }
            if (this.videoElement.paused) {
                this.videoElement.play();
            }
        };
        this.videoElement.onloadedmetadata = () => {
            this.onVideoInitialized();
        };
        // set resize events to the windows if it is resized or its orientation is changed
        window.addEventListener('resize', () => this.resizePlayerStyle(), true);
        window.addEventListener('orientationchange', () => this.onOrientationChange());
    }
    setAudioElement(audioElement) {
        this.audioElement = audioElement;
    }
    /**
     * Sets up the video element with any application config and plays the video element.
     * @returns A promise for if playing the video was successful or not.
     */
    play() {
        this.videoElement.muted = this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_0__.Flags.StartVideoMuted);
        this.videoElement.autoplay = this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_0__.Flags.AutoPlayVideo);
        return this.videoElement.play();
    }
    /**
     * @returns True if the video element is paused.
     */
    isPaused() {
        return this.videoElement.paused;
    }
    /**
     * @returns - whether the video element is playing.
     */
    isVideoReady() {
        return (this.videoElement.readyState !== undefined &&
            this.videoElement.readyState > 0);
    }
    /**
     * @returns True if the video element has a valid video source (srcObject).
     */
    hasVideoSource() {
        return (this.videoElement.srcObject !== undefined &&
            this.videoElement.srcObject !== null);
    }
    /**
     * Get the current context of the html video element
     * @returns - the current context of the video element
     */
    getVideoElement() {
        return this.videoElement;
    }
    /**
     * Get the current context of the html video elements parent
     * @returns - the current context of the video elements parent
     */
    getVideoParentElement() {
        return this.videoElement.parentElement;
    }
    /**
     * Set the Video Elements src object tracks to enable
     * @param enabled - Enable Tracks on the Src Object
     */
    setVideoEnabled(enabled) {
        // this is a temporary hack until type scripts video element is updated to reflect the need for tracks on a html video element
        const videoElement = this.videoElement;
        videoElement.srcObject
            .getTracks()
            .forEach((track) => (track.enabled = enabled));
    }
    /**
     * An override for when the video has been initialized with a srcObject
     */
    onVideoInitialized() {
        // Default Functionality: Do Nothing
    }
    /**
     * On the orientation change of a window clear the timeout
     */
    onOrientationChange() {
        clearTimeout(this.orientationChangeTimeout);
        this.orientationChangeTimeout = window.setTimeout(() => {
            this.resizePlayerStyle();
        }, 500);
    }
    /**
     * Resizes the player style based on the window height and width
     * @returns - nil if requirements are satisfied
     */
    resizePlayerStyle() {
        const videoElementParent = this.getVideoParentElement();
        if (!videoElementParent) {
            return;
        }
        this.updateVideoStreamSize();
        if (videoElementParent.classList.contains('fixed-size')) {
            this.onResizePlayerCallback();
            return;
        }
        // controls for resizing the player
        this.resizePlayerStyleToFillParentElement();
        this.onResizePlayerCallback();
    }
    /**
     * Resizes the player element to fill the parent element
     */
    resizePlayerStyleToFillParentElement() {
        const videoElementParent = this.getVideoParentElement();
        //Video is not initialized yet so set videoElementParent to size of parent element
        const styleWidth = '100%';
        const styleHeight = '100%';
        const styleTop = 0;
        const styleLeft = 0;
        videoElementParent.setAttribute('style', 'top: ' +
            styleTop +
            'px; left: ' +
            styleLeft +
            'px; width: ' +
            styleWidth +
            '; height: ' +
            styleHeight +
            '; cursor: default;');
    }
    updateVideoStreamSize() {
        if (!this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_0__.Flags.MatchViewportResolution)) {
            return;
        }
        const now = new Date().getTime();
        if (now - this.lastTimeResized > 300) {
            const videoElementParent = this.getVideoParentElement();
            if (!videoElementParent) {
                return;
            }
            this.onMatchViewportResolutionCallback(videoElementParent.clientWidth, videoElementParent.clientHeight);
            this.lastTimeResized = new Date().getTime();
        }
        else {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'Resizing too often - skipping', 6);
            clearTimeout(this.resizeTimeoutHandle);
            this.resizeTimeoutHandle = window.setTimeout(() => this.updateVideoStreamSize(), 100);
        }
    }
}


/***/ }),

/***/ "./src/WebRtcPlayer/WebRtcPlayerController.ts":
/*!****************************************************!*\
  !*** ./src/WebRtcPlayer/WebRtcPlayerController.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_310274__) => {

__nested_webpack_require_310274__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_310274__.d(__webpack_exports__, {
/* harmony export */   "WebRtcPlayerController": () => (/* binding */ WebRtcPlayerController)
/* harmony export */ });
/* harmony import */ var _WebSockets_WebSocketController__WEBPACK_IMPORTED_MODULE_10__ = __nested_webpack_require_310274__(/*! ../WebSockets/WebSocketController */ "./src/WebSockets/WebSocketController.ts");
/* harmony import */ var _VideoPlayer_StreamController__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_310274__(/*! ../VideoPlayer/StreamController */ "./src/VideoPlayer/StreamController.ts");
/* harmony import */ var _FreezeFrame_FreezeFrameController__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_310274__(/*! ../FreezeFrame/FreezeFrameController */ "./src/FreezeFrame/FreezeFrameController.ts");
/* harmony import */ var _AFK_AFKController__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_310274__(/*! ../AFK/AFKController */ "./src/AFK/AFKController.ts");
/* harmony import */ var _DataChannel_DataChannelController__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_310274__(/*! ../DataChannel/DataChannelController */ "./src/DataChannel/DataChannelController.ts");
/* harmony import */ var _PeerConnectionController_PeerConnectionController__WEBPACK_IMPORTED_MODULE_17__ = __nested_webpack_require_310274__(/*! ../PeerConnectionController/PeerConnectionController */ "./src/PeerConnectionController/PeerConnectionController.ts");
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_11__ = __nested_webpack_require_310274__(/*! ../Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_19__ = __nested_webpack_require_310274__(/*! ../DataChannel/InitialSettings */ "./src/DataChannel/InitialSettings.ts");
/* harmony import */ var _DataChannel_LatencyTestResults__WEBPACK_IMPORTED_MODULE_18__ = __nested_webpack_require_310274__(/*! ../DataChannel/LatencyTestResults */ "./src/DataChannel/LatencyTestResults.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__ = __nested_webpack_require_310274__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Util_FileUtil__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_310274__(/*! ../Util/FileUtil */ "./src/Util/FileUtil.ts");
/* harmony import */ var _Inputs_InputClassesFactory__WEBPACK_IMPORTED_MODULE_14__ = __nested_webpack_require_310274__(/*! ../Inputs/InputClassesFactory */ "./src/Inputs/InputClassesFactory.ts");
/* harmony import */ var _VideoPlayer_VideoPlayer__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_310274__(/*! ../VideoPlayer/VideoPlayer */ "./src/VideoPlayer/VideoPlayer.ts");
/* harmony import */ var _UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__ = __nested_webpack_require_310274__(/*! ../UeInstanceMessage/StreamMessageController */ "./src/UeInstanceMessage/StreamMessageController.ts");
/* harmony import */ var _UeInstanceMessage_ResponseController__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_310274__(/*! ../UeInstanceMessage/ResponseController */ "./src/UeInstanceMessage/ResponseController.ts");
/* harmony import */ var _UeInstanceMessage_SendMessageController__WEBPACK_IMPORTED_MODULE_12__ = __nested_webpack_require_310274__(/*! ../UeInstanceMessage/SendMessageController */ "./src/UeInstanceMessage/SendMessageController.ts");
/* harmony import */ var _UeInstanceMessage_ToStreamerMessagesController__WEBPACK_IMPORTED_MODULE_13__ = __nested_webpack_require_310274__(/*! ../UeInstanceMessage/ToStreamerMessagesController */ "./src/UeInstanceMessage/ToStreamerMessagesController.ts");
/* harmony import */ var _DataChannel_DataChannelSender__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_310274__(/*! ../DataChannel/DataChannelSender */ "./src/DataChannel/DataChannelSender.ts");
/* harmony import */ var _Util_CoordinateConverter__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_310274__(/*! ../Util/CoordinateConverter */ "./src/Util/CoordinateConverter.ts");
/* harmony import */ var _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_16__ = __nested_webpack_require_310274__(/*! ../Util/EventEmitter */ "./src/Util/EventEmitter.ts");
// Copyright Epic Games, Inc. All Rights Reserved.




















/**
 * Entry point for the WebRTC Player
 */
class WebRtcPlayerController {
    /**
     *
     * @param config - the frontend config object
     * @param pixelStreaming - the PixelStreaming object
     */
    constructor(config, pixelStreaming) {
        this.shouldShowPlayOverlay = true;
        this.autoJoinTimer = undefined;
        this.config = config;
        this.pixelStreaming = pixelStreaming;
        this.responseController = new _UeInstanceMessage_ResponseController__WEBPACK_IMPORTED_MODULE_0__.ResponseController();
        this.file = new _Util_FileUtil__WEBPACK_IMPORTED_MODULE_1__.FileTemplate();
        this.sdpConstraints = {
            offerToReceiveAudio: true,
            offerToReceiveVideo: true
        };
        // set up the afk logic class and connect up its method for closing the signaling server
        this.afkController = new _AFK_AFKController__WEBPACK_IMPORTED_MODULE_2__.AFKController(this.config, this.pixelStreaming, this.onAfkTriggered.bind(this));
        this.afkController.onAFKTimedOutCallback = () => {
            this.closeSignalingServer('You have been disconnected due to inactivity');
        };
        this.freezeFrameController = new _FreezeFrame_FreezeFrameController__WEBPACK_IMPORTED_MODULE_3__.FreezeFrameController(this.pixelStreaming.videoElementParent);
        this.videoPlayer = new _VideoPlayer_VideoPlayer__WEBPACK_IMPORTED_MODULE_4__.VideoPlayer(this.pixelStreaming.videoElementParent, this.config);
        this.videoPlayer.onVideoInitialized = () => this.handleVideoInitialized();
        // When in match viewport resolution mode, when the browser viewport is resized we send a resize command back to UE.
        this.videoPlayer.onMatchViewportResolutionCallback = (width, height) => {
            const descriptor = {
                'Resolution.Width': width,
                'Resolution.Height': height
            };
            this.streamMessageController.toStreamerHandlers.get('Command')([JSON.stringify(descriptor)]);
        };
        // Every time video player is resized in browser we need to reinitialize the mouse coordinate conversion and freeze frame sizing logic.
        this.videoPlayer.onResizePlayerCallback = () => {
            this.setUpMouseAndFreezeFrame();
        };
        this.streamController = new _VideoPlayer_StreamController__WEBPACK_IMPORTED_MODULE_5__.StreamController(this.videoPlayer);
        this.coordinateConverter = new _Util_CoordinateConverter__WEBPACK_IMPORTED_MODULE_6__.CoordinateConverter(this.videoPlayer);
        this.sendrecvDataChannelController = new _DataChannel_DataChannelController__WEBPACK_IMPORTED_MODULE_7__.DataChannelController();
        this.recvDataChannelController = new _DataChannel_DataChannelController__WEBPACK_IMPORTED_MODULE_7__.DataChannelController();
        this.registerDataChannelEventEmitters(this.sendrecvDataChannelController);
        this.registerDataChannelEventEmitters(this.recvDataChannelController);
        this.dataChannelSender = new _DataChannel_DataChannelSender__WEBPACK_IMPORTED_MODULE_8__.DataChannelSender(this.sendrecvDataChannelController);
        this.dataChannelSender.resetAfkWarningTimerOnDataSend = () => this.afkController.resetAfkWarningTimer();
        this.streamMessageController = new _UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.StreamMessageController();
        // set up websocket methods
        this.webSocketController = new _WebSockets_WebSocketController__WEBPACK_IMPORTED_MODULE_10__.WebSocketController();
        this.webSocketController.onConfig = (messageConfig) => this.handleOnConfigMessage(messageConfig);
        this.webSocketController.onStreamerList = (messageList) => this.handleStreamerListMessage(messageList);
        this.webSocketController.onStreamerIDChanged = (message) => this.handleStreamerIDChangedMessage(message);
        this.webSocketController.onPlayerCount = (playerCount) => {
            this.pixelStreaming._onPlayerCount(playerCount.count);
        };
        this.webSocketController.onOpen.addEventListener('open', () => {
            const BrowserSendsOffer = this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.BrowserSendOffer);
            if (!BrowserSendsOffer) {
                this.webSocketController.requestStreamerList();
            }
        });
        this.webSocketController.onClose.addEventListener('close', (event) => {
            // when we refresh the page during a stream we get the going away code.
            // in that case we don't want to reconnect since we're navigating away.
            // https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent/code
            // lists all the codes. 
            const CODE_GOING_AWAY = 1001;
            const willTryReconnect = this.shouldReconnect
                && event.detail.code != CODE_GOING_AWAY
                && this.config.getNumericSettingValue(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.NumericParameters.MaxReconnectAttempts) > 0;
            const disconnectMessage = this.disconnectMessage ? this.disconnectMessage : event.detail.reason;
            this.pixelStreaming._onDisconnect(disconnectMessage, !willTryReconnect && !this.isReconnecting);
            this.afkController.stopAfkWarningTimer();
            // stop sending stats on interval if we have closed our connection
            if (this.statsTimerHandle && this.statsTimerHandle !== undefined) {
                window.clearInterval(this.statsTimerHandle);
            }
            // reset the stream quality icon.
            this.setVideoEncoderAvgQP(0);
            // unregister all input device event handlers on disconnect
            this.setTouchInputEnabled(false);
            this.setMouseInputEnabled(false);
            this.setKeyboardInputEnabled(false);
            this.setGamePadInputEnabled(false);
            if (willTryReconnect) {
                // need a small delay here to prevent reconnect spamming
                setTimeout(() => {
                    this.isReconnecting = true;
                    this.reconnectAttempt++;
                    this.tryReconnect(event.detail.reason);
                }, 2000);
            }
        });
        // set up the final webRtc player controller methods from within our application so a connection can be activated
        this.sendMessageController = new _UeInstanceMessage_SendMessageController__WEBPACK_IMPORTED_MODULE_12__.SendMessageController(this.dataChannelSender, this.streamMessageController);
        this.toStreamerMessagesController = new _UeInstanceMessage_ToStreamerMessagesController__WEBPACK_IMPORTED_MODULE_13__.ToStreamerMessagesController(this.sendMessageController);
        this.registerMessageHandlers();
        this.streamMessageController.populateDefaultProtocol();
        this.inputClassesFactory = new _Inputs_InputClassesFactory__WEBPACK_IMPORTED_MODULE_14__.InputClassesFactory(this.streamMessageController, this.videoPlayer, this.coordinateConverter);
        this.isUsingSFU = false;
        this.isQualityController = false;
        this.preferredCodec = '';
        this.shouldReconnect = true;
        this.isReconnecting = false;
        this.reconnectAttempt = 0;
        this.config._addOnOptionSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.OptionParameters.StreamerId, (streamerid) => {
            if (streamerid === "") {
                return;
            }
            // close the current peer connection and create a new one
            this.peerConnectionController.peerConnection.close();
            this.peerConnectionController.createPeerConnection(this.peerConfig, this.preferredCodec);
            this.subscribedStream = streamerid;
            this.webSocketController.sendSubscribe(streamerid);
        });
        this.setVideoEncoderAvgQP(-1);
        this.signallingUrlBuilder = () => {
            let signallingServerUrl = this.config.getTextSettingValue(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.TextParameters.SignallingServerUrl);
            // If we are connecting to the SFU add a special url parameter to the url
            if (this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.BrowserSendOffer)) {
                signallingServerUrl += '?' + _Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.BrowserSendOffer + '=true';
            }
            // This code is no longer needed, but is a good example for how subsequent config flags can be appended
            // if (this.config.isFlagEnabled(Flags.BrowserSendOffer)) {
            //     signallingServerUrl += (signallingServerUrl.includes('?') ? '&' : '?') + Flags.BrowserSendOffer + '=true';
            // }
            return signallingServerUrl;
        };
    }
    /**
     * Make a request to UnquantizedAndDenormalizeUnsigned coordinates
     * @param x x axis coordinate
     * @param y y axis coordinate
     */
    requestUnquantizedAndDenormalizeUnsigned(x, y) {
        return this.coordinateConverter.unquantizeAndDenormalizeUnsigned(x, y);
    }
    /**
     * Handles when a message is received
     * @param event - Message Event
     */
    handleOnMessage(event) {
        const message = new Uint8Array(event.data);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), 'Message incoming:' + message, 6);
        //try {
        const messageType = this.streamMessageController.fromStreamerMessages.get(message[0]);
        this.streamMessageController.fromStreamerHandlers.get(messageType)(event.data);
        //} catch (e) {
        //Logger.Error(Logger.GetStackTrace(), `Custom data channel message with message type that is unknown to the Pixel Streaming protocol. Does your PixelStreamingProtocol need updating? The message type was: ${message[0]}`);
        //}
    }
    /**
     * Register message all handlers
     */
    registerMessageHandlers() {
        // From Streamer
        // Message events from the streamer have a data type of ArrayBuffer as we force this type in the DatachannelController
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'QualityControlOwnership', (data) => this.onQualityControlOwnership(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'Response', (data) => this.responseController.onResponse(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'Command', (data) => {
            this.onCommand(data);
        });
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'FreezeFrame', (data) => this.onFreezeFrameMessage(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'UnfreezeFrame', () => this.invalidateFreezeFrameAndEnableVideo());
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'VideoEncoderAvgQP', (data) => this.handleVideoEncoderAvgQP(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'LatencyTest', (data) => this.handleLatencyTestResult(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'DataChannelLatencyTest', (data) => this.handleDataChannelLatencyTestResponse(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'InitialSettings', (data) => this.handleInitialSettings(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'FileExtension', (data) => this.onFileExtension(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'FileMimeType', (data) => this.onFileMimeType(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'FileContents', (data) => this.onFileContents(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'TestEcho', () => {
            /* Do nothing */
        });
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'InputControlOwnership', (data) => this.onInputControlOwnership(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'GamepadResponse', (data) => this.onGamepadResponse(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'Protocol', (data) => this.onProtocolMessage(data));
        // To Streamer
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'IFrameRequest', () => this.sendMessageController.sendMessageToStreamer('IFrameRequest'));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'RequestQualityControl', () => this.sendMessageController.sendMessageToStreamer('RequestQualityControl'));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'FpsRequest', () => this.sendMessageController.sendMessageToStreamer('FpsRequest'));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'AverageBitrateRequest', () => this.sendMessageController.sendMessageToStreamer('AverageBitrateRequest'));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'StartStreaming', () => this.sendMessageController.sendMessageToStreamer('StartStreaming'));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'StopStreaming', () => this.sendMessageController.sendMessageToStreamer('StopStreaming'));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'LatencyTest', (data) => this.sendMessageController.sendMessageToStreamer('LatencyTest', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'RequestInitialSettings', () => this.sendMessageController.sendMessageToStreamer('RequestInitialSettings'));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'TestEcho', () => {
            /* Do nothing */
        });
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'UIInteraction', (data) => this.sendMessageController.sendMessageToStreamer('UIInteraction', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'Command', (data) => this.sendMessageController.sendMessageToStreamer('Command', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'TextboxEntry', (data) => this.sendMessageController.sendMessageToStreamer('TextboxEntry', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'KeyDown', (data) => this.sendMessageController.sendMessageToStreamer('KeyDown', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'KeyUp', (data) => this.sendMessageController.sendMessageToStreamer('KeyUp', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'KeyPress', (data) => this.sendMessageController.sendMessageToStreamer('KeyPress', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'MouseEnter', (data) => this.sendMessageController.sendMessageToStreamer('MouseEnter', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'MouseLeave', (data) => this.sendMessageController.sendMessageToStreamer('MouseLeave', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'MouseDown', (data) => this.sendMessageController.sendMessageToStreamer('MouseDown', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'MouseUp', (data) => this.sendMessageController.sendMessageToStreamer('MouseUp', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'MouseMove', (data) => this.sendMessageController.sendMessageToStreamer('MouseMove', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'MouseWheel', (data) => this.sendMessageController.sendMessageToStreamer('MouseWheel', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'MouseDouble', (data) => this.sendMessageController.sendMessageToStreamer('MouseDouble', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'TouchStart', (data) => this.sendMessageController.sendMessageToStreamer('TouchStart', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'TouchEnd', (data) => this.sendMessageController.sendMessageToStreamer('TouchEnd', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'TouchMove', (data) => this.sendMessageController.sendMessageToStreamer('TouchMove', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'GamepadConnected', () => this.sendMessageController.sendMessageToStreamer('GamepadConnected'));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'GamepadButtonPressed', (data) => this.sendMessageController.sendMessageToStreamer('GamepadButtonPressed', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'GamepadButtonReleased', (data) => this.sendMessageController.sendMessageToStreamer('GamepadButtonReleased', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'GamepadAnalog', (data) => this.sendMessageController.sendMessageToStreamer('GamepadAnalog', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'GamepadDisconnected', (data) => this.sendMessageController.sendMessageToStreamer('GamepadDisconnected', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'XREyeViews', (data) => this.sendMessageController.sendMessageToStreamer('XREyeViews', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'XRHMDTransform', (data) => this.sendMessageController.sendMessageToStreamer('XRHMDTransform', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'XRControllerTransform', (data) => this.sendMessageController.sendMessageToStreamer('XRControllerTransform', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'XRSystem', (data) => this.sendMessageController.sendMessageToStreamer('XRSystem', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'XRButtonTouched', (data) => this.sendMessageController.sendMessageToStreamer('XRButtonTouched', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'XRButtonTouchReleased', (data) => this.sendMessageController.sendMessageToStreamer('XRButtonTouchReleased', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'XRButtonPressed', (data) => this.sendMessageController.sendMessageToStreamer('XRButtonPressed', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'XRButtonReleased', (data) => this.sendMessageController.sendMessageToStreamer('XRButtonReleased', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'XRAnalog', (data) => this.sendMessageController.sendMessageToStreamer('XRAnalog', data));
    }
    /**
     * Activate the logic associated with a command from UE
     * @param message
     */
    onCommand(message) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), 'DataChannelReceiveMessageType.Command', 6);
        const commandAsString = new TextDecoder('utf-16').decode(message.slice(1));
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), 'Data Channel Command: ' + commandAsString, 6);
        const command = JSON.parse(commandAsString);
        if (command.command === 'onScreenKeyboard') {
            this.pixelStreaming._activateOnScreenKeyboard(command);
        }
    }
    /**
     * Handles a protocol message received from the streamer
     * @param message the message data from the streamer
     */
    onProtocolMessage(message) {
        try {
            const protocolString = new TextDecoder('utf-16').decode(message.slice(1));
            const protocolJSON = JSON.parse(protocolString);
            if (!Object.prototype.hasOwnProperty.call(protocolJSON, 'Direction')) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), 'Malformed protocol received. Ensure the protocol message contains a direction');
            }
            const direction = protocolJSON.Direction;
            delete protocolJSON.Direction;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), `Received new ${direction == _UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer
                ? 'FromStreamer'
                : 'ToStreamer'} protocol. Updating existing protocol...`);
            Object.keys(protocolJSON).forEach((messageType) => {
                const message = protocolJSON[messageType];
                switch (direction) {
                    case _UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer:
                        // Check that the message contains all the relevant params
                        if (!Object.prototype.hasOwnProperty.call(message, 'id')) {
                            _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), `ToStreamer->${messageType} protocol definition was malformed as it didn't contain at least an id\n
                                           Definition was: ${JSON.stringify(message, null, 2)}`);
                            // return in a forEach is equivalent to a continue in a normal for loop
                            return;
                        }
                        // UE5.1 and UE5.2 don't send a structure for these message types, but they actually do have a structure so ignore updating them
                        if ((messageType === "UIInteraction" || messageType === "Command" || messageType === "LatencyTest")) {
                            return;
                        }
                        if (this.streamMessageController.toStreamerHandlers.get(messageType)) {
                            // If we've registered a handler for this message type we can add it to our supported messages. ie registerMessageHandler(...)
                            this.streamMessageController.toStreamerMessages.set(messageType, message);
                        }
                        else {
                            _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), `There was no registered handler for "${messageType}" - try adding one using registerMessageHandler(MessageDirection.ToStreamer, "${messageType}", myHandler)`);
                        }
                        break;
                    case _UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer:
                        // Check that the message contains all the relevant params
                        if (!Object.prototype.hasOwnProperty.call(message, 'id')) {
                            _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), `FromStreamer->${messageType} protocol definition was malformed as it didn't contain at least an id\n
                            Definition was: ${JSON.stringify(message, null, 2)}`);
                            // return in a forEach is equivalent to a continue in a normal for loop
                            return;
                        }
                        if (this.streamMessageController.fromStreamerHandlers.get(messageType)) {
                            // If we've registered a handler for this message type. ie registerMessageHandler(...)
                            this.streamMessageController.fromStreamerMessages.set(message.id, messageType);
                        }
                        else {
                            _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), `There was no registered handler for "${message}" - try adding one using registerMessageHandler(MessageDirection.FromStreamer, "${messageType}", myHandler)`);
                        }
                        break;
                    default:
                        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), `Unknown direction: ${direction}`);
                }
            });
            // Once the protocol has been received, we can send our control messages
            this.toStreamerMessagesController.SendRequestInitialSettings();
            this.toStreamerMessagesController.SendRequestQualityControl();
        }
        catch (e) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), e);
        }
    }
    /**
     * Handles an input control message when it is received from the streamer
     * @param message The input control message
     */
    onInputControlOwnership(message) {
        const view = new Uint8Array(message);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), 'DataChannelReceiveMessageType.InputControlOwnership', 6);
        const inputControlOwnership = new Boolean(view[1]).valueOf();
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), `Received input controller message - will your input control the stream: ${inputControlOwnership}`);
        this.pixelStreaming._onInputControlOwnership(inputControlOwnership);
    }
    /**
     *
     * @param message
     */
    onGamepadResponse(message) {
        const responseString = new TextDecoder('utf-16').decode(message.slice(1));
        const responseJSON = JSON.parse(responseString);
        this.gamePadController.onGamepadResponseReceived(responseJSON.controllerId);
    }
    onAfkTriggered() {
        this.afkController.onAfkClick();
        // if the stream is paused play it, if we can
        if (this.videoPlayer.isPaused() && this.videoPlayer.hasVideoSource()) {
            this.playStream();
        }
    }
    /**
     * Set whether we should timeout when afk.
     * @param afkEnabled If true we timeout when idle for some given amount of time.
     */
    setAfkEnabled(afkEnabled) {
        if (afkEnabled) {
            this.onAfkTriggered();
        }
        else {
            this.afkController.stopAfkWarningTimer();
        }
    }
    /**
     * Attempt a reconnection to the signalling server
     */
    tryReconnect(message) {
        // if there is no webSocketController return immediately or this will not work
        if (!this.webSocketController) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), 'The Web Socket Controller does not exist so this will not work right now.');
            return;
        }
        // if the connection is open, first close it. wait some time and try again.
        this.isReconnecting = true;
        if (this.webSocketController.webSocket && this.webSocketController.webSocket.readyState != WebSocket.CLOSED) {
            this.closeSignalingServer(`${message} Restarting stream...`);
            setTimeout(() => {
                this.tryReconnect(message);
            }, 3000);
        }
        else {
            this.pixelStreaming._onWebRtcAutoConnect();
            this.connectToSignallingServer();
        }
    }
    /**
     * Loads a freeze frame if it is required otherwise shows the play overlay
     */
    loadFreezeFrameOrShowPlayOverlay() {
        this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_16__.LoadFreezeFrameEvent({
            shouldShowPlayOverlay: this.shouldShowPlayOverlay,
            isValid: this.freezeFrameController.valid,
            jpegData: this.freezeFrameController.jpeg
        }));
        if (this.shouldShowPlayOverlay === true) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), 'showing play overlay');
            this.resizePlayerStyle();
        }
        else {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), 'showing freeze frame');
            this.freezeFrameController.showFreezeFrame();
        }
        setTimeout(() => {
            this.videoPlayer.setVideoEnabled(false);
        }, this.freezeFrameController.freezeFrameDelay);
    }
    /**
     * Process the freeze frame and load it
     * @param message The freeze frame data in bytes
     */
    onFreezeFrameMessage(message) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), 'DataChannelReceiveMessageType.FreezeFrame', 6);
        const view = new Uint8Array(message);
        this.freezeFrameController.processFreezeFrameMessage(view, () => this.loadFreezeFrameOrShowPlayOverlay());
    }
    /**
     * Enable the video after hiding a freeze frame
     */
    invalidateFreezeFrameAndEnableVideo() {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), 'DataChannelReceiveMessageType.FreezeFrame', 6);
        setTimeout(() => {
            this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_16__.HideFreezeFrameEvent());
            this.freezeFrameController.hideFreezeFrame();
        }, this.freezeFrameController.freezeFrameDelay);
        if (this.videoPlayer.getVideoElement()) {
            this.videoPlayer.setVideoEnabled(true);
        }
    }
    /**
     * Prep datachannel data for processing file extension
     * @param data the file extension data
     */
    onFileExtension(data) {
        const view = new Uint8Array(data);
        _Util_FileUtil__WEBPACK_IMPORTED_MODULE_1__.FileUtil.setExtensionFromBytes(view, this.file);
    }
    /**
     * Prep datachannel data for processing the file mime type
     * @param data the file mime type data
     */
    onFileMimeType(data) {
        const view = new Uint8Array(data);
        _Util_FileUtil__WEBPACK_IMPORTED_MODULE_1__.FileUtil.setMimeTypeFromBytes(view, this.file);
    }
    /**
     * Prep datachannel data for processing the file contents
     * @param data the file contents data
     */
    onFileContents(data) {
        const view = new Uint8Array(data);
        _Util_FileUtil__WEBPACK_IMPORTED_MODULE_1__.FileUtil.setContentsFromBytes(view, this.file);
    }
    /**
     * Plays the stream audio and video source and sets up other pieces while the stream starts
     */
    playStream() {
        if (!this.videoPlayer.getVideoElement()) {
            const message = 'Could not play video stream because the video player was not initialized correctly.';
            this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_16__.PlayStreamErrorEvent({ message }));
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), message);
            // close the connection
            this.closeSignalingServer('Stream not initialized correctly');
            return;
        }
        if (!this.videoPlayer.hasVideoSource()) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Warning(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), 'Cannot play stream, the video element has no srcObject to play.');
            return;
        }
        this.setTouchInputEnabled(this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.TouchInput));
        this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_16__.PlayStreamEvent());
        if (this.streamController.audioElement.srcObject) {
            const startMuted = this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.StartVideoMuted);
            this.streamController.audioElement.muted = startMuted;
            if (startMuted) {
                this.playVideo();
            }
            else {
                this.streamController.audioElement
                    .play()
                    .then(() => {
                    this.playVideo();
                })
                    .catch((onRejectedReason) => {
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), onRejectedReason);
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), 'Browser does not support autoplaying video without interaction - to resolve this we are going to show the play button overlay.');
                    this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_16__.PlayStreamRejectedEvent({
                        reason: onRejectedReason
                    }));
                });
            }
        }
        else {
            this.playVideo();
        }
        this.shouldShowPlayOverlay = false;
        this.freezeFrameController.showFreezeFrame();
    }
    /**
     * Plays the video stream
     */
    playVideo() {
        // handle play() with promise as it is an asynchronous call
        this.videoPlayer.play().catch((onRejectedReason) => {
            if (this.streamController.audioElement.srcObject) {
                this.streamController.audioElement.pause();
            }
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), onRejectedReason);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), 'Browser does not support autoplaying video without interaction - to resolve this we are going to show the play button overlay.');
            this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_16__.PlayStreamRejectedEvent({ reason: onRejectedReason }));
        });
    }
    /**
     * Enable the video to play automatically if enableAutoplay is true
     */
    autoPlayVideoOrSetUpPlayOverlay() {
        if (this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.AutoPlayVideo)) {
            // attempt to play the video
            this.playStream();
        }
        this.resizePlayerStyle();
    }
    /**
     * Connect to the Signaling server
     */
    connectToSignallingServer() {
        this.locallyClosed = false;
        this.shouldReconnect = true;
        this.disconnectMessage = null;
        const signallingUrl = this.signallingUrlBuilder();
        this.webSocketController.connect(signallingUrl);
    }
    /**
     * This will start the handshake to the signalling server
     * @param peerConfig  - RTC Configuration Options from the Signaling server
     * @remark RTC Peer Connection on Ice Candidate event have it handled by handle Send Ice Candidate
     */
    startSession(peerConfig) {
        this.peerConfig = peerConfig;
        // check for forcing turn
        if (this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.ForceTURN)) {
            // check for a turn server
            const hasTurnServer = this.checkTurnServerAvailability(peerConfig);
            // close and error if turn is forced and there is no turn server
            if (!hasTurnServer) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), 'No turn server was found in the Peer Connection Options. TURN cannot be forced, closing connection. Please use STUN instead');
                this.closeSignalingServer('TURN cannot be forced, closing connection. Please use STUN instead.');
                return;
            }
        }
        // set up the peer connection controller
        this.peerConnectionController = new _PeerConnectionController_PeerConnectionController__WEBPACK_IMPORTED_MODULE_17__.PeerConnectionController(this.peerConfig, this.config, this.preferredCodec);
        // set up peer connection controller video stats
        this.peerConnectionController.onVideoStats = (event) => this.handleVideoStats(event);
        /* When the Peer Connection wants to send an offer have it handled */
        this.peerConnectionController.onSendWebRTCOffer = (offer) => this.handleSendWebRTCOffer(offer);
        /* When the Peer Connection wants to send an answer have it handled */
        this.peerConnectionController.onSendWebRTCAnswer = (offer) => this.handleSendWebRTCAnswer(offer);
        /* When the Peer Connection ice candidate is added have it handled */
        this.peerConnectionController.onPeerIceCandidate = (peerConnectionIceEvent) => this.handleSendIceCandidate(peerConnectionIceEvent);
        /* When the Peer Connection has a data channel created for it by the browser, handle it */
        this.peerConnectionController.onDataChannel = (datachannelEvent) => this.handleDataChannel(datachannelEvent);
        // set up webRtc text overlays
        this.peerConnectionController.showTextOverlayConnecting = () => this.pixelStreaming._onWebRtcConnecting();
        this.peerConnectionController.showTextOverlaySetupFailure = () => this.pixelStreaming._onWebRtcFailed();
        let webRtcConnectedSent = false;
        this.peerConnectionController.onIceConnectionStateChange = () => {
            // Browsers emit "connected" when getting first connection and "completed" when finishing
            // candidate checking. However, sometimes browsers can skip "connected" and only emit "completed".
            // Therefore need to check both cases and emit onWebRtcConnected only once on the first hit.
            if (!webRtcConnectedSent &&
                ["connected", "completed"].includes(this.peerConnectionController.peerConnection.iceConnectionState)) {
                this.pixelStreaming._onWebRtcConnected();
                webRtcConnectedSent = true;
            }
        };
        /* RTC Peer Connection on Track event -> handle on track */
        this.peerConnectionController.onTrack = (trackEvent) => this.streamController.handleOnTrack(trackEvent);
        /* Start the Hand shake process by creating an Offer */
        const BrowserSendsOffer = this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.BrowserSendOffer);
        if (BrowserSendsOffer) {
            // If browser is sending the offer, create an offer and send it to the streamer
            this.sendrecvDataChannelController.createDataChannel(this.peerConnectionController.peerConnection, 'cirrus', this.datachannelOptions);
            this.sendrecvDataChannelController.handleOnMessage = (ev) => this.handleOnMessage(ev);
            this.peerConnectionController.createOffer(this.sdpConstraints, this.config);
        }
    }
    /**
     * Checks the peer connection options for a turn server and returns true or false
     */
    checkTurnServerAvailability(options) {
        // if iceServers is empty return false this should not be the general use case but is here incase
        if (!options.iceServers) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), 'A turn sever was not found');
            return false;
        }
        // loop through the ice servers to check for a turn url
        for (const iceServer of options.iceServers) {
            for (const url of iceServer.urls) {
                if (url.includes('turn')) {
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), `A turn sever was found at ${url}`);
                    return true;
                }
            }
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), 'A turn sever was not found');
        return false;
    }
    /**
     * Handles when a Config Message is received contains the Peer Connection Options required (STUN and TURN Server Info)
     * @param messageConfig - Config Message received from the signaling server
     */
    handleOnConfigMessage(messageConfig) {
        this.resizePlayerStyle();
        // Tell the WebRtcController to start a session with the peer options sent from the signaling server
        this.startSession(messageConfig.peerConnectionOptions);
        // When the signaling server sends a WebRTC Answer over the websocket connection have the WebRtcController handle the message
        this.webSocketController.onWebRtcAnswer = (messageAnswer) => this.handleWebRtcAnswer(messageAnswer);
        this.webSocketController.onWebRtcOffer = (messageOffer) => this.handleWebRtcOffer(messageOffer);
        this.webSocketController.onWebRtcPeerDataChannels = (messageDataChannels) => this.handleWebRtcSFUPeerDatachannels(messageDataChannels);
        // When the signaling server sends a IceCandidate over the websocket connection have the WebRtcController handle the message
        this.webSocketController.onIceCandidate = (iceCandidate) => this.handleIceCandidate(iceCandidate);
    }
    /**
     * Handles when the signalling server gives us the list of streamer ids.
     */
    handleStreamerListMessage(messageStreamerList) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), `Got streamer list ${messageStreamerList.ids}`, 6);
        let wantedStreamerId = null;
        // get the current selected streamer id option
        var streamerIDOption = this.config.getSettingOption(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.OptionParameters.StreamerId);
        const existingSelection = streamerIDOption.selected.toString().trim();
        if (!!existingSelection) {
            // default to selected option if it exists
            wantedStreamerId = streamerIDOption.selected;
        }
        // add the streamers to the UI
        const settingOptions = [...messageStreamerList.ids]; // copy the original messageStreamerList.ids
        settingOptions.unshift(''); // add an empty option at the top
        this.config.setOptionSettingOptions(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.OptionParameters.StreamerId, settingOptions);
        let autoSelectedStreamerId = null;
        const waitForStreamer = this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.WaitForStreamer);
        const reconnectLimit = this.config.getNumericSettingValue(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.NumericParameters.MaxReconnectAttempts);
        const reconnectDelay = this.config.getNumericSettingValue(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.NumericParameters.StreamerAutoJoinInterval);
        // first we figure out a wanted streamer id through various means
        const useUrlParams = this.config.useUrlParams;
        const urlParams = new URLSearchParams(window.location.search);
        if (useUrlParams && urlParams.has(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.OptionParameters.StreamerId)) {
            // if we've set the streamer id on the url we only want that streamer id
            wantedStreamerId = urlParams.get(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.OptionParameters.StreamerId);
        }
        else if (this.subscribedStream) {
            // we were previously subscribed to a streamer, we want that
            wantedStreamerId = this.subscribedStream;
        }
        // now lets see if we can pick it.
        if (wantedStreamerId && messageStreamerList.ids.includes(wantedStreamerId)) {
            // if the wanted stream is in the list. we pick that
            autoSelectedStreamerId = wantedStreamerId;
        }
        else if ((!wantedStreamerId || !waitForStreamer) && messageStreamerList.ids.length == 1) {
            // otherwise, if we're not waiting for the wanted streamer and there's only one streamer, connect to it
            autoSelectedStreamerId = messageStreamerList.ids[0];
        }
        // if we found a streamer id to auto select, select it
        if (autoSelectedStreamerId) {
            this.isReconnecting = false;
            this.reconnectAttempt = 0;
            this.config.setOptionSettingValue(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.OptionParameters.StreamerId, autoSelectedStreamerId);
        }
        else {
            // no auto selected streamer.
            // if we're waiting for a streamer then try reconnecting
            if (waitForStreamer) {
                if (this.reconnectAttempt < reconnectLimit) {
                    // still reconnects available
                    this.isReconnecting = true;
                    this.reconnectAttempt++;
                    setTimeout(() => {
                        this.webSocketController.requestStreamerList();
                    }, reconnectDelay);
                }
                else {
                    // We've exhausted our reconnect attempts, return to main screen
                    this.reconnectAttempt = 0;
                    this.isReconnecting = false;
                    this.shouldReconnect = false;
                }
            }
        }
        // dispatch this event finally
        this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_16__.StreamerListMessageEvent({
            messageStreamerList,
            autoSelectedStreamerId,
            wantedStreamerId
        }));
    }
    handleStreamerIDChangedMessage(streamerIDChangedMessage) {
        const newID = streamerIDChangedMessage.newID;
        // need to edit the selected streamer in the settings list
        var streamerListOptions = this.config.getSettingOption(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.OptionParameters.StreamerId);
        // temporarily prevent onChange from firing (it would try to subscribe to the streamer again)
        var oldOnChange = streamerListOptions.onChange;
        streamerListOptions.onChange = () => { };
        // change the selected entry.
        var streamerList = streamerListOptions.options;
        for (var i = 0; i < streamerList.length; ++i) {
            if (streamerList[i] == this.subscribedStream) {
                streamerList[i] = newID;
                break;
            }
        }
        // update the list
        streamerListOptions.options = streamerList;
        // update the selected entry
        streamerListOptions.selected = newID;
        // restore the old change notifier.
        streamerListOptions.onChange = oldOnChange;
        // remember which stream we're subscribe to
        this.subscribedStream = streamerIDChangedMessage.newID;
        // notify any listeners
        this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_16__.StreamerIDChangedMessageEvent({
            newID
        }));
    }
    /**
     * Handle the RTC Answer from the signaling server
     * @param Answer - Answer SDP from the peer.
     */
    handleWebRtcAnswer(Answer) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), `Got answer sdp ${Answer.sdp}`, 6);
        const sdpAnswer = {
            sdp: Answer.sdp,
            type: 'answer'
        };
        this.peerConnectionController.receiveAnswer(sdpAnswer);
        this.handlePostWebrtcNegotiation();
    }
    /**
     * Handle the RTC offer from a WebRTC peer (received through the signalling server).
     * @param Offer - Offer SDP from the peer.
     */
    handleWebRtcOffer(Offer) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), `Got offer sdp ${Offer.sdp}`, 6);
        this.isUsingSFU = Offer.sfu ? Offer.sfu : false;
        if (this.isUsingSFU) {
            // Disable negotiating with the sfu as the sfu only supports one codec at a time
            this.peerConnectionController.preferredCodec = '';
        }
        const sdpOffer = {
            sdp: Offer.sdp,
            type: 'offer'
        };
        this.peerConnectionController.receiveOffer(sdpOffer, this.config);
        this.handlePostWebrtcNegotiation();
    }
    /**
     * Handle when the SFU provides the peer with its data channels
     * @param DataChannels - The message from the SFU containing the data channels ids
     */
    handleWebRtcSFUPeerDatachannels(DataChannels) {
        const SendOptions = {
            ordered: true,
            negotiated: true,
            id: DataChannels.sendStreamId
        };
        const unidirectional = DataChannels.sendStreamId != DataChannels.recvStreamId;
        this.sendrecvDataChannelController.createDataChannel(this.peerConnectionController.peerConnection, unidirectional ? 'send-datachannel' : 'datachannel', SendOptions);
        if (unidirectional) {
            const RecvOptions = {
                ordered: true,
                negotiated: true,
                id: DataChannels.recvStreamId
            };
            this.recvDataChannelController.createDataChannel(this.peerConnectionController.peerConnection, 'recv-datachannel', RecvOptions);
            this.recvDataChannelController.handleOnOpen = () => this.webSocketController.sendSFURecvDataChannelReady();
            // If we're uni-directional, only the recv data channel should handle incoming messages
            this.recvDataChannelController.handleOnMessage = (ev) => this.handleOnMessage(ev);
        }
        else {
            // else our primary datachannel is send/recv so it can handle incoming messages
            this.sendrecvDataChannelController.handleOnMessage = (ev) => this.handleOnMessage(ev);
        }
    }
    handlePostWebrtcNegotiation() {
        // start the afk warning timer as PS is now running
        this.afkController.startAfkWarningTimer();
        // show the overlay that we have negotiated a connection
        this.pixelStreaming._onWebRtcSdp();
        if (this.statsTimerHandle && this.statsTimerHandle !== undefined) {
            window.clearInterval(this.statsTimerHandle);
        }
        this.statsTimerHandle = window.setInterval(() => this.getStats(), 1000);
        /*  */
        this.setMouseInputEnabled(this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.MouseInput));
        this.setKeyboardInputEnabled(this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.KeyboardInput));
        this.setGamePadInputEnabled(this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.GamepadInput));
    }
    /**
     * When an ice Candidate is received from the Signaling server add it to the Peer Connection Client
     * @param iceCandidate - Ice Candidate from Server
     */
    handleIceCandidate(iceCandidate) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), 'Web RTC Controller: onWebRtcIce', 6);
        const candidate = new RTCIceCandidate(iceCandidate);
        this.peerConnectionController.handleOnIce(candidate);
    }
    /**
     * Send the ice Candidate to the signaling server via websocket
     * @param iceEvent - RTC Peer ConnectionIceEvent) {
     */
    handleSendIceCandidate(iceEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), 'OnIceCandidate', 6);
        if (iceEvent.candidate && iceEvent.candidate.candidate) {
            this.webSocketController.sendIceCandidate(iceEvent.candidate);
        }
    }
    /**
     * Send the ice Candidate to the signaling server via websocket
     * @param iceEvent - RTC Peer ConnectionIceEvent) {
     */
    handleDataChannel(datachannelEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), 'Data channel created for us by browser as we are a receiving peer.', 6);
        this.sendrecvDataChannelController.dataChannel =
            datachannelEvent.channel;
        // Data channel was created for us, so we just need to setup its callbacks and array type
        this.sendrecvDataChannelController.setupDataChannel();
        this.sendrecvDataChannelController.handleOnMessage = (ev) => this.handleOnMessage(ev);
    }
    /**
     * Send the RTC Offer Session to the Signaling server via websocket
     * @param offer - RTC Session Description
     */
    handleSendWebRTCOffer(offer) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), 'Sending the offer to the Server', 6);
        const extraParams = {
            minBitrateBps: 1000 * this.config.getNumericSettingValue(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.NumericParameters.WebRTCMinBitrate),
            maxBitrateBps: 1000 * this.config.getNumericSettingValue(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.NumericParameters.WebRTCMaxBitrate)
        };
        this.webSocketController.sendWebRtcOffer(offer, extraParams);
    }
    /**
     * Send the RTC Offer Session to the Signaling server via websocket
     * @param answer - RTC Session Description
     */
    handleSendWebRTCAnswer(answer) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), 'Sending the answer to the Server', 6);
        const extraParams = {
            minBitrateBps: 1000 * this.config.getNumericSettingValue(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.NumericParameters.WebRTCMinBitrate),
            maxBitrateBps: 1000 * this.config.getNumericSettingValue(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.NumericParameters.WebRTCMaxBitrate)
        };
        this.webSocketController.sendWebRtcAnswer(answer, extraParams);
        if (this.isUsingSFU) {
            this.webSocketController.sendWebRtcDatachannelRequest();
        }
    }
    /**
     * Set the freeze frame overlay to the player div
     */
    setUpMouseAndFreezeFrame() {
        // Calculating and normalizing positions depends on the width and height of the player.
        this.videoElementParentClientRect = this.videoPlayer
            .getVideoParentElement()
            .getBoundingClientRect();
        this.coordinateConverter.setupNormalizeAndQuantize();
        this.freezeFrameController.freezeFrame.resize();
    }
    /**
     * Close the Connection to the signaling server
     */
    closeSignalingServer(message) {
        var _a;
        // We explicitly called close, therefore we don't want to trigger auto reconnect
        this.locallyClosed = true;
        this.shouldReconnect = false;
        this.disconnectMessage = message;
        (_a = this.webSocketController) === null || _a === void 0 ? void 0 : _a.close();
    }
    /**
     * Close the peer connection
     */
    closePeerConnection() {
        var _a;
        (_a = this.peerConnectionController) === null || _a === void 0 ? void 0 : _a.close();
    }
    /**
     * Close all connections
     */
    close() {
        this.closeSignalingServer('');
        this.closePeerConnection();
    }
    /**
     * Fires a Video Stats Event in the RTC Peer Connection
     */
    getStats() {
        this.peerConnectionController.generateStats();
    }
    /**
     * Send a Latency Test Request to the UE Instance
     */
    sendLatencyTest() {
        this.latencyStartTime = Date.now();
        this.streamMessageController.toStreamerHandlers.get('LatencyTest')([JSON.stringify({
                StartTime: this.latencyStartTime
            })]);
    }
    /**
     * Send a Data Channel Latency Test Request to the UE Instance
     */
    sendDataChannelLatencyTest(descriptor) {
        this.streamMessageController.toStreamerHandlers.get('DataChannelLatencyTest')([JSON.stringify(descriptor)]);
    }
    /**
     * Send the MinQP encoder setting to the UE Instance.
     * @param minQP - The lower bound for QP when encoding
     * valid values are (1-51) where:
     * 1 = Best quality but highest bitrate.
     * 51 = Worst quality but lowest bitrate.
     * By default the minQP is 1 meaning the encoder is free
     * to aim for the best quality it can on the given network link.
     */
    sendEncoderMinQP(minQP) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), `MinQP=${minQP}\n`, 6);
        if (minQP != null) {
            this.streamMessageController.toStreamerHandlers.get('Command')([JSON.stringify({
                    'Encoder.MinQP': minQP
                })]);
        }
    }
    /**
     * Send the MaxQP encoder setting to the UE Instance.
     * @param maxQP - The upper bound for QP when encoding
     * valid values are (1-51) where:
     * 1 = Best quality but highest bitrate.
     * 51 = Worst quality but lowest bitrate.
     * By default the maxQP is 51 meaning the encoder is free
     * to drop quality as low as needed on the given network link.
     */
    sendEncoderMaxQP(maxQP) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), `MaxQP=${maxQP}\n`, 6);
        if (maxQP != null) {
            this.streamMessageController.toStreamerHandlers.get('Command')([JSON.stringify({
                    'Encoder.MaxQP': maxQP
                })]);
        }
    }
    /**
     * Send the { WebRTC.MinBitrate: SomeNumber }} command to UE to set
     * the minimum bitrate that we allow WebRTC to use
     * (note setting this too high in poor networks can be problematic).
     * @param minBitrate - The minimum bitrate we would like WebRTC to not fall below.
     */
    sendWebRTCMinBitrate(minBitrate) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), `WebRTC Min Bitrate=${minBitrate}`, 6);
        if (minBitrate != null) {
            this.streamMessageController.toStreamerHandlers.get('Command')([JSON.stringify({
                    'WebRTC.MinBitrate': minBitrate
                })]);
        }
    }
    /**
     * Send the { WebRTC.MaxBitrate: SomeNumber }} command to UE to set
     * the minimum bitrate that we allow WebRTC to use
     * (note setting this too low could result in blocky video).
     * @param minBitrate - The minimum bitrate we would like WebRTC to not fall below.
     */
    sendWebRTCMaxBitrate(maxBitrate) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), `WebRTC Max Bitrate=${maxBitrate}`, 6);
        if (maxBitrate != null) {
            this.streamMessageController.toStreamerHandlers.get('Command')([JSON.stringify({
                    'WebRTC.MaxBitrate': maxBitrate
                })]);
        }
    }
    /**
     * Send the { WebRTC.Fps: SomeNumber }} UE 5.0+
     * and { WebRTC.MaxFps } UE 4.27 command to set
     * the maximum fps we would like WebRTC to stream at.
     * @param fps - The maximum stream fps.
     */
    sendWebRTCFps(fps) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), `WebRTC FPS=${fps}`, 6);
        if (fps != null) {
            this.streamMessageController.toStreamerHandlers.get('Command')([JSON.stringify({ 'WebRTC.Fps': fps })]);
            /* TODO: Remove when UE 4.27 unsupported. */
            this.streamMessageController.toStreamerHandlers.get('Command')([JSON.stringify({ 'WebRTC.MaxFps': fps })]);
        }
    }
    /**
     * Sends the UI Descriptor `stat fps` to the UE Instance
     */
    sendShowFps() {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), '----   Sending show stat to UE   ----', 6);
        this.streamMessageController.toStreamerHandlers.get('Command')([JSON.stringify({ 'stat.fps': '' })]);
    }
    /**
     * Send an Iframe request to the streamer
     */
    sendIframeRequest() {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), '----   Sending Request for an IFrame  ----', 6);
        this.streamMessageController.toStreamerHandlers.get('IFrameRequest')();
    }
    /**
     * Send a UIInteraction message
     */
    emitUIInteraction(descriptor) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), '----   Sending custom UIInteraction message   ----', 6);
        this.streamMessageController.toStreamerHandlers.get('UIInteraction')([JSON.stringify(descriptor)]);
    }
    /**
     * Send a Command message
     */
    emitCommand(descriptor) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), '----   Sending custom Command message   ----', 6);
        this.streamMessageController.toStreamerHandlers.get('Command')([JSON.stringify(descriptor)]);
    }
    /**
     * Send a console command message
     */
    emitConsoleCommand(command) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), '----   Sending custom Command:ConsoleCommand message   ----', 6);
        this.streamMessageController.toStreamerHandlers.get('Command')([JSON.stringify({
                ConsoleCommand: command,
            })]);
    }
    /**
     * Sends a request to the UE Instance to have ownership of Quality
     */
    sendRequestQualityControlOwnership() {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), '----   Sending Request to Control Quality  ----', 6);
        this.toStreamerMessagesController.SendRequestQualityControl();
    }
    /**
     * Handles when a Latency Test Result are received from the UE Instance
     * @param message - Latency Test Timings
     */
    handleLatencyTestResult(message) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), 'DataChannelReceiveMessageType.latencyTest', 6);
        const latencyAsString = new TextDecoder('utf-16').decode(message.slice(1));
        const latencyTestResults = new _DataChannel_LatencyTestResults__WEBPACK_IMPORTED_MODULE_18__.LatencyTestResults();
        Object.assign(latencyTestResults, JSON.parse(latencyAsString));
        latencyTestResults.processFields();
        latencyTestResults.testStartTimeMs = this.latencyStartTime;
        latencyTestResults.browserReceiptTimeMs = Date.now();
        latencyTestResults.latencyExcludingDecode = ~~(latencyTestResults.browserReceiptTimeMs -
            latencyTestResults.testStartTimeMs);
        latencyTestResults.testDuration = ~~(latencyTestResults.TransmissionTimeMs -
            latencyTestResults.ReceiptTimeMs);
        latencyTestResults.networkLatency = ~~(latencyTestResults.latencyExcludingDecode -
            latencyTestResults.testDuration);
        if (latencyTestResults.frameDisplayDeltaTimeMs &&
            latencyTestResults.browserReceiptTimeMs) {
            latencyTestResults.endToEndLatency =
                ~~(latencyTestResults.frameDisplayDeltaTimeMs +
                    latencyTestResults.networkLatency,
                    +latencyTestResults.CaptureToSendMs);
        }
        this.pixelStreaming._onLatencyTestResult(latencyTestResults);
    }
    /**
     * Handles when a Data Channel Latency Test Response is received from the UE Instance
     * @param message - Data Channel Latency Test Response
     */
    handleDataChannelLatencyTestResponse(message) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), 'DataChannelReceiveMessageType.dataChannelLatencyResponse', 6);
        const responseAsString = new TextDecoder('utf-16').decode(message.slice(1));
        const latencyTestResponse = JSON.parse(responseAsString);
        this.pixelStreaming._onDataChannelLatencyTestResponse(latencyTestResponse);
    }
    /**
     * Handles when the Encoder and Web RTC Settings are received from the UE Instance
     * @param message - Initial Encoder and Web RTC Settings
     */
    handleInitialSettings(message) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), 'DataChannelReceiveMessageType.InitialSettings', 6);
        const payloadAsString = new TextDecoder('utf-16').decode(message.slice(1));
        const parsedInitialSettings = JSON.parse(payloadAsString);
        const initialSettings = new _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_19__.InitialSettings();
        if (parsedInitialSettings.Encoder) {
            initialSettings.EncoderSettings = parsedInitialSettings.Encoder;
        }
        if (parsedInitialSettings.WebRTC) {
            initialSettings.WebRTCSettings = parsedInitialSettings.WebRTC;
        }
        if (parsedInitialSettings.PixelStreaming) {
            initialSettings.PixelStreamingSettings =
                parsedInitialSettings.PixelStreaming;
        }
        if (parsedInitialSettings.ConfigOptions && parsedInitialSettings.ConfigOptions.DefaultToHover !== undefined) {
            this.config.setFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.HoveringMouseMode, !!parsedInitialSettings.ConfigOptions.DefaultToHover);
        }
        initialSettings.ueCompatible();
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), payloadAsString, 6);
        this.pixelStreaming._onInitialSettings(initialSettings);
    }
    /**
     * Handles when the Quantization Parameter are received from the UE Instance
     * @param message - Encoders Quantization Parameter
     */
    handleVideoEncoderAvgQP(message) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), 'DataChannelReceiveMessageType.VideoEncoderAvgQP', 6);
        const AvgQP = Number(new TextDecoder('utf-16').decode(message.slice(1)));
        this.setVideoEncoderAvgQP(AvgQP);
    }
    /**
     * Handles when the video element has been loaded with a srcObject
     */
    handleVideoInitialized() {
        this.pixelStreaming._onVideoInitialized();
        // either autoplay the video or set up the play overlay
        this.autoPlayVideoOrSetUpPlayOverlay();
        this.resizePlayerStyle();
        this.videoPlayer.updateVideoStreamSize();
    }
    /**
     * Flag set if the user has Quality Ownership
     * @param message - Does the current client have Quality Ownership
     */
    onQualityControlOwnership(message) {
        const view = new Uint8Array(message);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), 'DataChannelReceiveMessageType.QualityControlOwnership', 6);
        this.isQualityController = new Boolean(view[1]).valueOf();
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), `Received quality controller message, will control quality: ${this.isQualityController}`);
        this.pixelStreaming._onQualityControlOwnership(this.isQualityController);
    }
    /**
     * Handles when the Aggregated stats are Collected
     * @param stats - Aggregated Stats
     */
    handleVideoStats(stats) {
        this.pixelStreaming._onVideoStats(stats);
    }
    /**
     * To Resize the Video Player element
     */
    resizePlayerStyle() {
        this.videoPlayer.resizePlayerStyle();
    }
    setPreferredCodec(codec) {
        this.preferredCodec = codec;
        if (this.peerConnectionController) {
            this.peerConnectionController.preferredCodec = codec;
            this.peerConnectionController.updateCodecSelection = false;
        }
    }
    setVideoEncoderAvgQP(avgQP) {
        this.videoAvgQp = avgQP;
        this.pixelStreaming._onVideoEncoderAvgQP(this.videoAvgQp);
    }
    /**
     * enables/disables keyboard event listeners
     */
    setKeyboardInputEnabled(isEnabled) {
        var _a;
        (_a = this.keyboardController) === null || _a === void 0 ? void 0 : _a.unregisterKeyBoardEvents();
        if (isEnabled) {
            this.keyboardController = this.inputClassesFactory.registerKeyBoard(this.config);
        }
    }
    /**
     * enables/disables mouse event listeners
     */
    setMouseInputEnabled(isEnabled) {
        var _a;
        (_a = this.mouseController) === null || _a === void 0 ? void 0 : _a.unregisterMouseEvents();
        if (isEnabled) {
            const mouseMode = this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.HoveringMouseMode)
                ? _Config_Config__WEBPACK_IMPORTED_MODULE_11__.ControlSchemeType.HoveringMouse
                : _Config_Config__WEBPACK_IMPORTED_MODULE_11__.ControlSchemeType.LockedMouse;
            this.mouseController =
                this.inputClassesFactory.registerMouse(mouseMode);
        }
    }
    /**
     * enables/disables touch event listeners
     */
    setTouchInputEnabled(isEnabled) {
        var _a;
        (_a = this.touchController) === null || _a === void 0 ? void 0 : _a.unregisterTouchEvents();
        if (isEnabled) {
            this.touchController = this.inputClassesFactory.registerTouch(this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.FakeMouseWithTouches), this.videoElementParentClientRect);
        }
    }
    /**
     * enables/disables game pad event listeners
     */
    setGamePadInputEnabled(isEnabled) {
        var _a;
        (_a = this.gamePadController) === null || _a === void 0 ? void 0 : _a.unregisterGamePadEvents();
        if (isEnabled) {
            this.gamePadController = this.inputClassesFactory.registerGamePad();
            this.gamePadController.onGamepadConnected = () => {
                this.streamMessageController.toStreamerHandlers.get('GamepadConnected')();
            };
            this.gamePadController.onGamepadDisconnected = (controllerIdx) => {
                this.streamMessageController.toStreamerHandlers.get('GamepadDisconnected')([controllerIdx]);
            };
        }
    }
    registerDataChannelEventEmitters(dataChannel) {
        dataChannel.onOpen = (label, event) => this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_16__.DataChannelOpenEvent({ label, event }));
        dataChannel.onClose = (label, event) => this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_16__.DataChannelCloseEvent({ label, event }));
        dataChannel.onError = (label, event) => this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_16__.DataChannelErrorEvent({ label, event }));
    }
    registerMessageHandler(name, direction, handler) {
        if (direction === _UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer && typeof handler === 'undefined') {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.Warning(_Logger_Logger__WEBPACK_IMPORTED_MODULE_15__.Logger.GetStackTrace(), `Unable to register handler for ${name} as no handler was passed`);
        }
        this.streamMessageController.registerMessageHandler(direction, name, (data) => (typeof handler === 'undefined' && direction === _UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer) ?
            this.sendMessageController.sendMessageToStreamer(name, data) :
            handler(data));
    }
}


/***/ }),

/***/ "./src/WebSockets/MessageReceive.ts":
/*!******************************************!*\
  !*** ./src/WebSockets/MessageReceive.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_393436__) => {

__nested_webpack_require_393436__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_393436__.d(__webpack_exports__, {
/* harmony export */   "MessageAnswer": () => (/* binding */ MessageAnswer),
/* harmony export */   "MessageAuthRequired": () => (/* binding */ MessageAuthRequired),
/* harmony export */   "MessageConfig": () => (/* binding */ MessageConfig),
/* harmony export */   "MessageIceCandidate": () => (/* binding */ MessageIceCandidate),
/* harmony export */   "MessageOffer": () => (/* binding */ MessageOffer),
/* harmony export */   "MessageOnScreenKeyboard": () => (/* binding */ MessageOnScreenKeyboard),
/* harmony export */   "MessagePeerDataChannels": () => (/* binding */ MessagePeerDataChannels),
/* harmony export */   "MessagePlayerCount": () => (/* binding */ MessagePlayerCount),
/* harmony export */   "MessageRecv": () => (/* binding */ MessageRecv),
/* harmony export */   "MessageRecvTypes": () => (/* binding */ MessageRecvTypes),
/* harmony export */   "MessageStreamerIDChanged": () => (/* binding */ MessageStreamerIDChanged),
/* harmony export */   "MessageStreamerList": () => (/* binding */ MessageStreamerList)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * The Types of Messages that will be received
 */
var MessageRecvTypes;
(function (MessageRecvTypes) {
    MessageRecvTypes["CONFIG"] = "config";
    MessageRecvTypes["STREAMER_LIST"] = "streamerList";
    MessageRecvTypes["STREAMER_ID_CHANGED"] = "streamerIDChanged";
    MessageRecvTypes["PLAYER_COUNT"] = "playerCount";
    MessageRecvTypes["OFFER"] = "offer";
    MessageRecvTypes["ANSWER"] = "answer";
    MessageRecvTypes["ICE_CANDIDATE"] = "iceCandidate";
    MessageRecvTypes["PEER_DATA_CHANNELS"] = "peerDataChannels";
    MessageRecvTypes["PING"] = "ping";
    MessageRecvTypes["WARNING"] = "warning";
})(MessageRecvTypes || (MessageRecvTypes = {}));
/**
 * Concrete Received Message wrapper
 */
class MessageRecv {
}
/**
 * Authentication Required Message wrapper
 */
class MessageAuthRequired extends MessageRecv {
}
/**
 * Config Message Wrapper
 */
class MessageConfig extends MessageRecv {
}
/**
 * Streamer List Message Wrapper
 */
class MessageStreamerList extends MessageRecv {
}
/**
 * Streamer ID Changed Message Wrapper
 */
class MessageStreamerIDChanged extends MessageRecv {
}
/**
 * Player Count Message wrapper
 */
class MessagePlayerCount extends MessageRecv {
}
/**
 * Web RTC offer Answer Message wrapper
 */
class MessageAnswer extends MessageRecv {
}
/**
 * WebRTC sdp offer Message wrapper.
 */
class MessageOffer extends MessageRecv {
}
/**
 * Ice Candidate Message wrapper
 */
class MessageIceCandidate extends MessageRecv {
}
/**
 * Peer Data Channels Message wrapper
 */
class MessagePeerDataChannels extends MessageRecv {
}
class MessageOnScreenKeyboard {
}


/***/ }),

/***/ "./src/WebSockets/MessageSend.ts":
/*!***************************************!*\
  !*** ./src/WebSockets/MessageSend.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_396590__) => {

__nested_webpack_require_396590__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_396590__.d(__webpack_exports__, {
/* harmony export */   "MessageIceCandidate": () => (/* binding */ MessageIceCandidate),
/* harmony export */   "MessageListStreamers": () => (/* binding */ MessageListStreamers),
/* harmony export */   "MessagePong": () => (/* binding */ MessagePong),
/* harmony export */   "MessageSFURecvDataChannelReady": () => (/* binding */ MessageSFURecvDataChannelReady),
/* harmony export */   "MessageSend": () => (/* binding */ MessageSend),
/* harmony export */   "MessageSendTypes": () => (/* binding */ MessageSendTypes),
/* harmony export */   "MessageSubscribe": () => (/* binding */ MessageSubscribe),
/* harmony export */   "MessageUnsubscribe": () => (/* binding */ MessageUnsubscribe),
/* harmony export */   "MessageWebRTCAnswer": () => (/* binding */ MessageWebRTCAnswer),
/* harmony export */   "MessageWebRTCDatachannelRequest": () => (/* binding */ MessageWebRTCDatachannelRequest),
/* harmony export */   "MessageWebRTCOffer": () => (/* binding */ MessageWebRTCOffer)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_396590__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * The Send Types that are pushed from the signaling server
 */
var MessageSendTypes;
(function (MessageSendTypes) {
    MessageSendTypes["LIST_STREAMERS"] = "listStreamers";
    MessageSendTypes["SUBSCRIBE"] = "subscribe";
    MessageSendTypes["UNSUBSCRIBE"] = "unsubscribe";
    MessageSendTypes["ICE_CANDIDATE"] = "iceCandidate";
    MessageSendTypes["OFFER"] = "offer";
    MessageSendTypes["ANSWER"] = "answer";
    MessageSendTypes["DATACHANNELREQUEST"] = "dataChannelRequest";
    MessageSendTypes["SFURECVDATACHANNELREADY"] = "peerDataChannelsReady";
    MessageSendTypes["PONG"] = "pong";
})(MessageSendTypes || (MessageSendTypes = {}));
/**
 * A Wrapper for the message to send to the signaling server
 */
class MessageSend {
    /**
     * A filter for controlling what parameters to actually send.
     * Good for excluding default values or hidden internals.
     * Example for including everything but zero bitrate fields...
     * sendFilter(key: string, value: any) {
     *   if ((key == "minBitrate" || key == "maxBitrate") && value <= 0) return undefined;
     *   return value;
     * }
     * Return undefined to exclude the property completely.
     */
    sendFilter(key, value) {
        return value;
    }
    /**
     * Turns the wrapper into a JSON String
     * @returns - JSON String of the Message to send
     */
    payload() {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Sending => \n' + JSON.stringify(this, this.sendFilter, 4), 6);
        return JSON.stringify(this, this.sendFilter);
    }
}
class MessageListStreamers extends MessageSend {
    constructor() {
        super();
        this.type = MessageSendTypes.LIST_STREAMERS;
    }
}
class MessageSubscribe extends MessageSend {
    constructor(streamerid) {
        super();
        this.type = MessageSendTypes.SUBSCRIBE;
        this.streamerId = streamerid;
    }
}
class MessageUnsubscribe extends MessageSend {
    constructor() {
        super();
        this.type = MessageSendTypes.UNSUBSCRIBE;
    }
}
/**
 * Instance Request Message Wrapper
 */
class MessagePong extends MessageSend {
    constructor(time) {
        super();
        this.type = MessageSendTypes.PONG;
        this.time = time;
    }
}
/**
 *  Web RTC Offer message wrapper
 */
class MessageWebRTCOffer extends MessageSend {
    /**
     * @param offer - Generated Web RTC Offer
     */
    constructor(offer, extraParams) {
        super();
        this.type = MessageSendTypes.OFFER;
        this.minBitrate = 0;
        this.maxBitrate = 0;
        if (offer) {
            this.type = offer.type;
            this.sdp = offer.sdp;
            this.minBitrate = extraParams.minBitrateBps;
            this.maxBitrate = extraParams.maxBitrateBps;
        }
    }
    sendFilter(key, value) {
        if ((key == "minBitrate" || key == "maxBitrate") && value <= 0)
            return undefined;
        return value;
    }
}
/**
 *  Web RTC Answer message wrapper
 */
class MessageWebRTCAnswer extends MessageSend {
    /**
     * @param answer - Generated Web RTC Offer
     */
    constructor(answer, extraParams) {
        super();
        this.type = MessageSendTypes.ANSWER;
        this.minBitrate = 0;
        this.maxBitrate = 0;
        if (answer) {
            this.type = answer.type;
            this.sdp = answer.sdp;
            this.minBitrate = extraParams.minBitrateBps;
            this.maxBitrate = extraParams.maxBitrateBps;
        }
    }
    sendFilter(key, value) {
        if ((key == "minBitrate" || key == "maxBitrate") && value <= 0)
            return undefined;
        return value;
    }
}
/**
 *  Web RTC Data channel request message wrapper
 */
class MessageWebRTCDatachannelRequest extends MessageSend {
    constructor() {
        super();
        this.type = MessageSendTypes.DATACHANNELREQUEST;
    }
}
/**
 *  Web RTC SFU Data channel ready message wrapper
 */
class MessageSFURecvDataChannelReady extends MessageSend {
    constructor() {
        super();
        this.type = MessageSendTypes.SFURECVDATACHANNELREADY;
    }
}
/**
 * RTC Ice Candidate Wrapper
 */
class MessageIceCandidate {
    /**
     * @param candidate - RTC Ice Candidate
     */
    constructor(candidate) {
        this.type = MessageSendTypes.ICE_CANDIDATE;
        this.candidate = candidate;
    }
    /**
     * Turns the wrapper into a JSON String
     * @returns - JSON String of the Message to send
     */
    payload() {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Sending => \n' + JSON.stringify(this, undefined, 4), 6);
        return JSON.stringify(this);
    }
}


/***/ }),

/***/ "./src/WebSockets/SignallingProtocol.ts":
/*!**********************************************!*\
  !*** ./src/WebSockets/SignallingProtocol.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_403096__) => {

__nested_webpack_require_403096__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_403096__.d(__webpack_exports__, {
/* harmony export */   "SignallingProtocol": () => (/* binding */ SignallingProtocol)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_403096__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _MessageReceive__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_403096__(/*! ./MessageReceive */ "./src/WebSockets/MessageReceive.ts");
/* harmony import */ var _MessageSend__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_403096__(/*! ./MessageSend */ "./src/WebSockets/MessageSend.ts");
// Copyright Epic Games, Inc. All Rights Reserved.



/**
 * Signalling protocol for handling messages from the signalling server.
 */
class SignallingProtocol {
    constructor() {
        this.FromUEMessageHandlers = new Map();
    }
    addMessageHandler(messageId, messageHandler) {
        this.FromUEMessageHandlers.set(messageId, messageHandler);
    }
    handleMessage(messageId, messageData) {
        if (this.FromUEMessageHandlers.has(messageId)) {
            this.FromUEMessageHandlers.get(messageId)(messageData);
        }
        else {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Message type of ${messageId} does not have a message handler registered on the frontend - ignoring message.`);
        }
    }
    /**
     * Setup any default signalling message handling, these can be overridden or additional handlers added with `addMessageHandler`.
     * @param websocketController The controller to setup these handlers on.
     */
    static setupDefaultHandlers(websocketController) {
        // PING
        websocketController.signallingProtocol.addMessageHandler(_MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.PING, (pingPayload) => {
            // send our pong payload back to the signalling server
            const pongPayload = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessagePong(new Date().getTime()).payload();
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.PING + ': ' + pingPayload, 6);
            websocketController.webSocket.send(pongPayload);
        });
        // CONFIG
        websocketController.signallingProtocol.addMessageHandler(_MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.CONFIG, (configPayload) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.CONFIG, 6);
            const config = JSON.parse(configPayload);
            websocketController.onConfig(config);
        });
        // STREAMER_LIST
        websocketController.signallingProtocol.addMessageHandler(_MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.STREAMER_LIST, (listPayload) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.STREAMER_LIST, 6);
            const streamerList = JSON.parse(listPayload);
            websocketController.onStreamerList(streamerList);
        });
        // STREAMER_ID_CHANGED
        websocketController.signallingProtocol.addMessageHandler(_MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.STREAMER_ID_CHANGED, (idPayload) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.STREAMER_ID_CHANGED, 6);
            const streamerIdMessage = JSON.parse(idPayload);
            websocketController.onStreamerIDChanged(streamerIdMessage);
        });
        // PLAYER_COUNT
        websocketController.signallingProtocol.addMessageHandler(_MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.PLAYER_COUNT, (playerCountPayload) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.PLAYER_COUNT, 6);
            const playerCount = JSON.parse(playerCountPayload);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Player Count: ' + playerCount.count, 6);
            websocketController.onPlayerCount(playerCount);
        });
        // ANSWER
        websocketController.signallingProtocol.addMessageHandler(_MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.ANSWER, (answerPayload) => {
            // send our pong payload back to the signalling server
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.ANSWER, 6);
            const answer = JSON.parse(answerPayload);
            websocketController.onWebRtcAnswer(answer);
        });
        // OFFER
        websocketController.signallingProtocol.addMessageHandler(_MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.OFFER, (offerPayload) => {
            // send our pong payload back to the signalling server
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.OFFER, 6);
            const offer = JSON.parse(offerPayload);
            websocketController.onWebRtcOffer(offer);
        });
        // ICE CANDIDATE
        websocketController.signallingProtocol.addMessageHandler(_MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.ICE_CANDIDATE, (iceCandidatePayload) => {
            // send our pong payload back to the signalling server
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.ICE_CANDIDATE, 6);
            const iceCandidate = JSON.parse(iceCandidatePayload);
            websocketController.onIceCandidate(iceCandidate.candidate);
        });
        // WARNING
        websocketController.signallingProtocol.addMessageHandler(_MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.WARNING, (warningPayload) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Warning(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Warning received: ${warningPayload}`);
        });
        // PEER DATA CHANNELS
        websocketController.signallingProtocol.addMessageHandler(_MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.PEER_DATA_CHANNELS, (peerDataChannelsPayload) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.PEER_DATA_CHANNELS, 6);
            const peerDataChannels = JSON.parse(peerDataChannelsPayload);
            websocketController.onWebRtcPeerDataChannels(peerDataChannels);
        });
    }
}


/***/ }),

/***/ "./src/WebSockets/WebSocketController.ts":
/*!***********************************************!*\
  !*** ./src/WebSockets/WebSocketController.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_410957__) => {

__nested_webpack_require_410957__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_410957__.d(__webpack_exports__, {
/* harmony export */   "WebSocketController": () => (/* binding */ WebSocketController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_410957__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _MessageSend__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_410957__(/*! ./MessageSend */ "./src/WebSockets/MessageSend.ts");
/* harmony import */ var _SignallingProtocol__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_410957__(/*! ./SignallingProtocol */ "./src/WebSockets/SignallingProtocol.ts");
// Copyright Epic Games, Inc. All Rights Reserved.



/**
 * The controller for the WebSocket and all associated methods
 */
class WebSocketController {
    constructor() {
        this.WS_OPEN_STATE = 1;
        this.onOpen = new EventTarget();
        this.onClose = new EventTarget();
        this.signallingProtocol = new _SignallingProtocol__WEBPACK_IMPORTED_MODULE_0__.SignallingProtocol();
        _SignallingProtocol__WEBPACK_IMPORTED_MODULE_0__.SignallingProtocol.setupDefaultHandlers(this);
    }
    /**
     * Connect to the signaling server
     * @param connectionURL - The Address of the signaling server
     * @returns - If there is a connection
     */
    connect(connectionURL) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), connectionURL, 6);
        try {
            this.webSocket = new WebSocket(connectionURL);
            this.webSocket.onopen = (event) => this.handleOnOpen(event);
            this.webSocket.onerror = () => this.handleOnError();
            this.webSocket.onclose = (event) => this.handleOnClose(event);
            this.webSocket.onmessage = (event) => this.handleOnMessage(event);
            this.webSocket.onmessagebinary = (event) => this.handleOnMessageBinary(event);
            return true;
        }
        catch (error) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Error(error, error);
            return false;
        }
    }
    /**
     * Handles what happens when a message is received in binary form
     * @param event - Message Received
     */
    handleOnMessageBinary(event) {
        // if the event is empty return
        if (!event || !event.data) {
            return;
        }
        // handle the binary and then handle the message
        event.data
            .text()
            .then((messageString) => {
            // build a new message
            const constructedMessage = new MessageEvent('messageFromBinary', {
                data: messageString
            });
            // send the new stringified event back into `onmessage`
            this.handleOnMessage(constructedMessage);
        })
            .catch((error) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), `Failed to parse binary blob from websocket, reason: ${error}`);
        });
    }
    /**
     * Handles what happens when a message is received
     * @param event - Message Received
     */
    handleOnMessage(event) {
        // Check if websocket message is binary, if so, stringify it.
        if (event.data && event.data instanceof Blob) {
            this.handleOnMessageBinary(event);
            return;
        }
        const message = JSON.parse(event.data);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'received => \n' +
            JSON.stringify(JSON.parse(event.data), undefined, 4), 6);
        // Send to our signalling protocol to handle the incoming message
        this.signallingProtocol.handleMessage(message.type, event.data);
    }
    /**
     * Handles when the Websocket is opened
     * @param event - Not Used
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    handleOnOpen(event) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'Connected to the signalling server via WebSocket', 6);
        this.onOpen.dispatchEvent(new Event('open'));
    }
    /**
     * Handles when there is an error on the websocket
     * @param event - Error Payload
     */
    handleOnError() {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'WebSocket error');
    }
    /**
     * Handles when the Websocket is closed
     * @param event - Close Event
     */
    handleOnClose(event) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'Disconnected to the signalling server via WebSocket: ' +
            JSON.stringify(event.code) +
            ' - ' +
            event.reason);
        this.onClose.dispatchEvent(new CustomEvent('close', { 'detail': event }));
    }
    requestStreamerList() {
        const payload = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageListStreamers();
        this.webSocket.send(payload.payload());
    }
    sendSubscribe(streamerid) {
        const payload = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageSubscribe(streamerid);
        this.webSocket.send(payload.payload());
    }
    sendUnsubscribe() {
        const payload = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageUnsubscribe();
        this.webSocket.send(payload.payload());
    }
    sendWebRtcOffer(offer, extraParams) {
        const payload = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageWebRTCOffer(offer, extraParams);
        this.webSocket.send(payload.payload());
    }
    sendWebRtcAnswer(answer, extraParams) {
        const payload = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageWebRTCAnswer(answer, extraParams);
        this.webSocket.send(payload.payload());
    }
    sendWebRtcDatachannelRequest() {
        const payload = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageWebRTCDatachannelRequest();
        this.webSocket.send(payload.payload());
    }
    sendSFURecvDataChannelReady() {
        const payload = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageSFURecvDataChannelReady();
        this.webSocket.send(payload.payload());
    }
    /**
     * Sends an RTC Ice Candidate to the Server
     * @param candidate - RTC Ice Candidate
     */
    sendIceCandidate(candidate) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'Sending Ice Candidate');
        if (this.webSocket &&
            this.webSocket.readyState === this.WS_OPEN_STATE) {
            //ws.send(JSON.stringify({ type: 'iceCandidate', candidate: candidate }));
            const IceCandidate = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageIceCandidate(candidate);
            this.webSocket.send(IceCandidate.payload());
        }
    }
    /**
     * Closes the Websocket connection
     */
    close() {
        var _a;
        (_a = this.webSocket) === null || _a === void 0 ? void 0 : _a.close();
    }
    /**
     * The Message Contains the payload of the peer connection options used for the RTC Peer hand shake
     * @param messageConfig - Config Message received from he signaling server
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function
    onConfig(messageConfig) { }
    /**
     * The Message contains all the ids of streamers available on the server.
     * @param messageStreamerList - The message with the list of the available streamer ids.
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function
    onStreamerList(messageStreamerList) { }
    /**
     * The Message contains the new id of a subscribed to streamer.
     * @param message - Message conaining the new id of the streamer.
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function
    onStreamerIDChanged(message) { }
    /**
     * @param iceCandidate - Ice Candidate sent from the Signaling server server's RTC hand shake
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function
    onIceCandidate(iceCandidate) { }
    /**
     * Event is fired when the websocket receives the answer for the RTC peer Connection
     * @param messageAnswer - The RTC Answer payload from the signaling server
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function
    onWebRtcAnswer(messageAnswer) { }
    /**
     * Event is fired when the websocket receives the offer for the RTC peer Connection
     * @param messageOffer - The sdp offer
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function
    onWebRtcOffer(messageOffer) { }
    /**
     * Event is fired when the websocket receives the data channels for the RTC peer Connection from the SFU
     * @param messageDataChannels - The data channels details
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function
    onWebRtcPeerDataChannels(messageDataChannels) { }
    /**
     * Event is fired when the websocket receives the an updated player count from cirrus
     * @param MessagePlayerCount - The new player count
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function
    onPlayerCount(playerCount) { }
}


/***/ }),

/***/ "./src/WebXR/WebXRController.ts":
/*!**************************************!*\
  !*** ./src/WebXR/WebXRController.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_421164__) => {

__nested_webpack_require_421164__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_421164__.d(__webpack_exports__, {
/* harmony export */   "WebXRController": () => (/* binding */ WebXRController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_421164__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Inputs_XRGamepadController__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_421164__(/*! ../Inputs/XRGamepadController */ "./src/Inputs/XRGamepadController.ts");
/* harmony import */ var _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_421164__(/*! ../Util/EventEmitter */ "./src/Util/EventEmitter.ts");
/* harmony import */ var _pixelstreamingfrontend__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_421164__(/*! ../pixelstreamingfrontend */ "./src/Config/Config.ts");
// Copyright Epic Games, Inc. All Rights Reserved.




class WebXRController {
    constructor(webRtcPlayerController) {
        this.xrViewerPose = null;
        this.videoTexture = null;
        this.prevVideoWidth = 0;
        this.prevVideoHeight = 0;
        this.leftView = null;
        this.rightView = null;
        this.xrSession = null;
        this.webRtcController = webRtcPlayerController;
        this.xrGamepadController = new _Inputs_XRGamepadController__WEBPACK_IMPORTED_MODULE_0__.XRGamepadController(this.webRtcController.streamMessageController);
        this.onSessionEnded = new EventTarget();
        this.onSessionStarted = new EventTarget();
        this.onFrame = new EventTarget();
    }
    xrClicked() {
        if (!this.xrSession) {
            if (!navigator.xr) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "This browser does not support XR.");
                return;
            }
            navigator.xr
                /* Request immersive-vr session without any optional features. */
                .requestSession('immersive-vr', { optionalFeatures: [] })
                .then((session) => {
                this.onXrSessionStarted(session);
            });
        }
        else {
            this.xrSession.end();
        }
    }
    onXrSessionEnded() {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'XR Session ended');
        this.xrSession = null;
        this.onSessionEnded.dispatchEvent(new Event('xrSessionEnded'));
    }
    initGL() {
        if (this.gl) {
            return;
        }
        const canvas = document.createElement('canvas');
        this.gl = canvas.getContext('webgl2', {
            xrCompatible: true
        });
        // Set our clear color
        this.gl.clearColor(0.0, 0.0, 0.0, 1);
    }
    initShaders() {
        // shader source code
        const vertexShaderSource = `
        attribute vec2 a_position;
        attribute vec2 a_texCoord;

        // varyings
        varying vec2 v_texCoord;

        void main() {
           gl_Position = vec4(a_position.x, a_position.y, 0, 1);
           // pass the texCoord to the fragment shader
           // The GPU will interpolate this value between points.
           v_texCoord = a_texCoord;
        }
        `;
        const fragmentShaderSource = `
        precision mediump float;

        // our texture
        uniform sampler2D u_image;

        // the texCoords passed in from the vertex shader.
        varying vec2 v_texCoord;

        void main() {
           gl_FragColor = texture2D(u_image, v_texCoord);
        }
        `;
        // setup vertex shader
        const vertexShader = this.gl.createShader(this.gl.VERTEX_SHADER);
        this.gl.shaderSource(vertexShader, vertexShaderSource);
        this.gl.compileShader(vertexShader);
        // setup fragment shader
        const fragmentShader = this.gl.createShader(this.gl.FRAGMENT_SHADER);
        this.gl.shaderSource(fragmentShader, fragmentShaderSource);
        this.gl.compileShader(fragmentShader);
        // setup GLSL program
        const shaderProgram = this.gl.createProgram();
        this.gl.attachShader(shaderProgram, vertexShader);
        this.gl.attachShader(shaderProgram, fragmentShader);
        this.gl.linkProgram(shaderProgram);
        this.gl.useProgram(shaderProgram);
        // look up where vertex data needs to go
        this.positionLocation = this.gl.getAttribLocation(shaderProgram, 'a_position');
        this.texcoordLocation = this.gl.getAttribLocation(shaderProgram, 'a_texCoord');
    }
    updateVideoTexture() {
        if (!this.videoTexture) {
            // Create our texture that we use in our shader
            // and bind it once because we never use any other texture.
            this.videoTexture = this.gl.createTexture();
            this.gl.bindTexture(this.gl.TEXTURE_2D, this.videoTexture);
            // Set the parameters so we can render any size image.
            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);
            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);
            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR);
            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);
        }
        let videoHeight = this.webRtcController.videoPlayer.getVideoElement().videoHeight;
        let videoWidth = this.webRtcController.videoPlayer.getVideoElement().videoWidth;
        if (this.prevVideoHeight != videoHeight || this.prevVideoWidth != videoWidth) {
            // Do full update of texture if dimensions do not match
            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, videoWidth, videoHeight, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, this.webRtcController.videoPlayer.getVideoElement());
        }
        else {
            // If dimensions match just update the sub region
            this.gl.texSubImage2D(this.gl.TEXTURE_2D, 0, 0, 0, videoWidth, videoHeight, this.gl.RGBA, this.gl.UNSIGNED_BYTE, this.webRtcController.videoPlayer.getVideoElement());
        }
        // Update prev video width/height
        this.prevVideoHeight = videoHeight;
        this.prevVideoWidth = videoWidth;
    }
    initBuffers() {
        // Create out position buffer and its vertex shader attribute
        {
            // Create a buffer to put the the vertices of the plane we will draw the video stream onto
            this.positionBuffer = this.gl.createBuffer();
            // Bind the position buffer
            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);
            // Enable `positionLocation` to be used as vertex shader attribute
            this.gl.enableVertexAttribArray(this.positionLocation);
            // Note: positions are passed in clip-space coordinates [-1..1] so no need to convert in-shader
            // prettier-ignore
            this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([
                -1.0, 1.0,
                1.0, 1.0,
                -1.0, -1.0,
                -1.0, -1.0,
                1.0, 1.0,
                1.0, -1.0
            ]), this.gl.STATIC_DRAW);
            // Tell position attribute of the vertex shader how to get data out of the bound buffer (the positionBuffer)
            this.gl.vertexAttribPointer(this.positionLocation, 2 /*size*/, this.gl.FLOAT /*type*/, false /*normalize*/, 0 /*stride*/, 0 /*offset*/);
        }
        // Create our texture coordinate buffers for accessing our texture
        {
            this.texcoordBuffer = this.gl.createBuffer();
            // Bind the texture coordinate buffer
            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.texcoordBuffer);
            // Enable `texcoordLocation` to be used as a vertext shader attribute
            this.gl.enableVertexAttribArray(this.texcoordLocation);
            // The texture coordinates to apply for rectangle we are drawing
            this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([
                0.0, 0.0,
                1.0, 0.0,
                0.0, 1.0,
                0.0, 1.0,
                1.0, 0.0,
                1.0, 1.0
            ]), this.gl.STATIC_DRAW);
            // Tell texture coordinate attribute of the vertex shader how to get data out of the bound buffer (the texcoordBuffer)
            this.gl.vertexAttribPointer(this.texcoordLocation, 2 /*size*/, this.gl.FLOAT /*type*/, false /*normalize*/, 0 /*stride*/, 0 /*offset*/);
        }
    }
    onXrSessionStarted(session) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'XR Session started');
        this.xrSession = session;
        this.xrSession.addEventListener('end', () => {
            this.onXrSessionEnded();
        });
        // Initialization
        this.initGL();
        this.initShaders();
        this.initBuffers();
        session.requestReferenceSpace('local').then((refSpace) => {
            this.xrRefSpace = refSpace;
            // Set up our base layer (i.e. a projection layer that fills the entire XR viewport).
            this.xrSession.updateRenderState({
                baseLayer: new XRWebGLLayer(this.xrSession, this.gl)
            });
            // Update target framerate to 90 fps if 90 fps is supported in this XR device
            if (this.xrSession.supportedFrameRates) {
                for (let frameRate of this.xrSession.supportedFrameRates) {
                    if (frameRate == 90) {
                        session.updateTargetFrameRate(90);
                    }
                }
            }
            // Binding to each new frame to get latest XR updates
            this.xrSession.requestAnimationFrame(this.onXrFrame.bind(this));
        });
        this.onSessionStarted.dispatchEvent(new Event('xrSessionStarted'));
    }
    sendXRDataToUE() {
        if (this.leftView == null || this.rightView == null) {
            return;
        }
        const leftEyeTrans = this.leftView.transform.matrix;
        const leftEyeProj = this.leftView.projectionMatrix;
        const rightEyeTrans = this.rightView.transform.matrix;
        const rightEyeProj = this.rightView.projectionMatrix;
        ;
        // send transform (4x4) and projection matrix (4x4) data for each eye (left first, then right)
        // prettier-ignore
        this.webRtcController.streamMessageController.toStreamerHandlers.get('XREyeViews')([
            // Left eye 4x4 transform matrix
            leftEyeTrans[0], leftEyeTrans[4], leftEyeTrans[8], leftEyeTrans[12],
            leftEyeTrans[1], leftEyeTrans[5], leftEyeTrans[9], leftEyeTrans[13],
            leftEyeTrans[2], leftEyeTrans[6], leftEyeTrans[10], leftEyeTrans[14],
            leftEyeTrans[3], leftEyeTrans[7], leftEyeTrans[11], leftEyeTrans[15],
            // Left eye 4x4 projection matrix
            leftEyeProj[0], leftEyeProj[4], leftEyeProj[8], leftEyeProj[12],
            leftEyeProj[1], leftEyeProj[5], leftEyeProj[9], leftEyeProj[13],
            leftEyeProj[2], leftEyeProj[6], leftEyeProj[10], leftEyeProj[14],
            leftEyeProj[3], leftEyeProj[7], leftEyeProj[11], leftEyeProj[15],
            // Right eye 4x4 transform matrix
            rightEyeTrans[0], rightEyeTrans[4], rightEyeTrans[8], rightEyeTrans[12],
            rightEyeTrans[1], rightEyeTrans[5], rightEyeTrans[9], rightEyeTrans[13],
            rightEyeTrans[2], rightEyeTrans[6], rightEyeTrans[10], rightEyeTrans[14],
            rightEyeTrans[3], rightEyeTrans[7], rightEyeTrans[11], rightEyeTrans[15],
            // right eye 4x4 projection matrix
            rightEyeProj[0], rightEyeProj[4], rightEyeProj[8], rightEyeProj[12],
            rightEyeProj[1], rightEyeProj[5], rightEyeProj[9], rightEyeProj[13],
            rightEyeProj[2], rightEyeProj[6], rightEyeProj[10], rightEyeProj[14],
            rightEyeProj[3], rightEyeProj[7], rightEyeProj[11], rightEyeProj[15]
        ]);
    }
    onXrFrame(time, frame) {
        this.xrViewerPose = frame.getViewerPose(this.xrRefSpace);
        if (this.xrViewerPose) {
            this.updateViews();
            if (this.leftView == null || this.rightView == null) {
                return;
            }
            this.sendXRDataToUE();
            this.updateVideoTexture();
            this.render();
        }
        if (this.webRtcController.config.isFlagEnabled(_pixelstreamingfrontend__WEBPACK_IMPORTED_MODULE_2__.Flags.XRControllerInput)) {
            this.xrSession.inputSources.forEach((source, index, array) => {
                this.xrGamepadController.updateStatus(source, frame, this.xrRefSpace);
            }, this);
        }
        this.xrSession.requestAnimationFrame((time, frame) => this.onXrFrame(time, frame));
        this.onFrame.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_3__.XrFrameEvent({ time, frame }));
    }
    updateViews() {
        if (!this.xrViewerPose) {
            return;
        }
        for (const view of this.xrViewerPose.views) {
            if (view.eye === "left") {
                this.leftView = view;
            }
            else if (view.eye === "right") {
                this.rightView = view;
            }
        }
    }
    render() {
        if (!this.gl) {
            return;
        }
        // Bind the framebuffer to the base layer's framebuffer
        const glLayer = this.xrSession.renderState.baseLayer;
        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, glLayer.framebuffer);
        // Set the relevant portion of clip space
        this.gl.viewport(0, 0, glLayer.framebufferWidth, glLayer.framebufferHeight);
        // Draw the rectangle we will show the video stream texture on
        this.gl.drawArrays(this.gl.TRIANGLES /*primitiveType*/, 0 /*offset*/, 6 /*count*/);
    }
    static isSessionSupported(mode) {
        if (location.protocol !== "https:") {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Info(null, "WebXR requires https, if you want WebXR use https.");
        }
        if (navigator.xr) {
            return navigator.xr.isSessionSupported(mode);
        }
        else {
            return new Promise(() => {
                return false;
            });
        }
    }
}


/***/ }),

/***/ "sdp":
/*!**********************!*\
  !*** external "sdp" ***!
  \**********************/
/***/ ((module) => {

var x = y => { var x = {}; __nested_webpack_require_436289__.d(x, y); return x; }
var y = x => () => x
module.exports = sdp__WEBPACK_IMPORTED_MODULE_0__;

/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __nested_webpack_require_436289__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_436289__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__nested_webpack_require_436289__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__nested_webpack_require_436289__.o(definition, key) && !__nested_webpack_require_436289__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__nested_webpack_require_436289__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__nested_webpack_require_436289__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!***************************************!*\
  !*** ./src/pixelstreamingfrontend.ts ***!
  \***************************************/
__nested_webpack_require_436289__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_436289__.d(__webpack_exports__, {
/* harmony export */   "AfkLogic": () => (/* reexport safe */ _AFK_AFKController__WEBPACK_IMPORTED_MODULE_9__.AFKController),
/* harmony export */   "AfkTimedOutEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.AfkTimedOutEvent),
/* harmony export */   "AfkWarningActivateEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.AfkWarningActivateEvent),
/* harmony export */   "AfkWarningDeactivateEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.AfkWarningDeactivateEvent),
/* harmony export */   "AfkWarningUpdateEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.AfkWarningUpdateEvent),
/* harmony export */   "AggregatedStats": () => (/* reexport safe */ _PeerConnectionController_AggregatedStats__WEBPACK_IMPORTED_MODULE_12__.AggregatedStats),
/* harmony export */   "CandidatePairStats": () => (/* reexport safe */ _PeerConnectionController_CandidatePairStats__WEBPACK_IMPORTED_MODULE_20__.CandidatePairStats),
/* harmony export */   "CandidateStat": () => (/* reexport safe */ _PeerConnectionController_CandidateStat__WEBPACK_IMPORTED_MODULE_21__.CandidateStat),
/* harmony export */   "Config": () => (/* reexport safe */ _Config_Config__WEBPACK_IMPORTED_MODULE_2__.Config),
/* harmony export */   "ControlSchemeType": () => (/* reexport safe */ _Config_Config__WEBPACK_IMPORTED_MODULE_2__.ControlSchemeType),
/* harmony export */   "DataChannelCloseEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.DataChannelCloseEvent),
/* harmony export */   "DataChannelErrorEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.DataChannelErrorEvent),
/* harmony export */   "DataChannelLatencyTestResponseEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.DataChannelLatencyTestResponseEvent),
/* harmony export */   "DataChannelLatencyTestResultEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.DataChannelLatencyTestResultEvent),
/* harmony export */   "DataChannelOpenEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.DataChannelOpenEvent),
/* harmony export */   "DataChannelStats": () => (/* reexport safe */ _PeerConnectionController_DataChannelStats__WEBPACK_IMPORTED_MODULE_22__.DataChannelStats),
/* harmony export */   "EncoderSettings": () => (/* reexport safe */ _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_11__.EncoderSettings),
/* harmony export */   "EventEmitter": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.EventEmitter),
/* harmony export */   "Flags": () => (/* reexport safe */ _Config_Config__WEBPACK_IMPORTED_MODULE_2__.Flags),
/* harmony export */   "HideFreezeFrameEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.HideFreezeFrameEvent),
/* harmony export */   "InboundAudioStats": () => (/* reexport safe */ _PeerConnectionController_InboundRTPStats__WEBPACK_IMPORTED_MODULE_23__.InboundAudioStats),
/* harmony export */   "InboundVideoStats": () => (/* reexport safe */ _PeerConnectionController_InboundRTPStats__WEBPACK_IMPORTED_MODULE_23__.InboundVideoStats),
/* harmony export */   "InitialSettings": () => (/* reexport safe */ _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_11__.InitialSettings),
/* harmony export */   "InitialSettingsEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.InitialSettingsEvent),
/* harmony export */   "LatencyTestResultEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.LatencyTestResultEvent),
/* harmony export */   "LatencyTestResults": () => (/* reexport safe */ _DataChannel_LatencyTestResults__WEBPACK_IMPORTED_MODULE_10__.LatencyTestResults),
/* harmony export */   "LoadFreezeFrameEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.LoadFreezeFrameEvent),
/* harmony export */   "Logger": () => (/* reexport safe */ _Logger_Logger__WEBPACK_IMPORTED_MODULE_13__.Logger),
/* harmony export */   "MessageDirection": () => (/* reexport safe */ _UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_15__.MessageDirection),
/* harmony export */   "MessageRecv": () => (/* reexport safe */ _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_17__.MessageRecv),
/* harmony export */   "MessageSend": () => (/* reexport safe */ _WebSockets_MessageSend__WEBPACK_IMPORTED_MODULE_16__.MessageSend),
/* harmony export */   "MessageStreamerList": () => (/* reexport safe */ _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_17__.MessageStreamerList),
/* harmony export */   "NumericParameters": () => (/* reexport safe */ _Config_Config__WEBPACK_IMPORTED_MODULE_2__.NumericParameters),
/* harmony export */   "OptionParameters": () => (/* reexport safe */ _Config_Config__WEBPACK_IMPORTED_MODULE_2__.OptionParameters),
/* harmony export */   "OutBoundVideoStats": () => (/* reexport safe */ _PeerConnectionController_OutBoundRTPStats__WEBPACK_IMPORTED_MODULE_24__.OutBoundVideoStats),
/* harmony export */   "PixelStreaming": () => (/* reexport safe */ _PixelStreaming_PixelStreaming__WEBPACK_IMPORTED_MODULE_8__.PixelStreaming),
/* harmony export */   "PlayStreamErrorEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.PlayStreamErrorEvent),
/* harmony export */   "PlayStreamEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.PlayStreamEvent),
/* harmony export */   "PlayStreamRejectedEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.PlayStreamRejectedEvent),
/* harmony export */   "PlayerCountEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.PlayerCountEvent),
/* harmony export */   "SettingBase": () => (/* reexport safe */ _Config_SettingBase__WEBPACK_IMPORTED_MODULE_3__.SettingBase),
/* harmony export */   "SettingFlag": () => (/* reexport safe */ _Config_SettingFlag__WEBPACK_IMPORTED_MODULE_4__.SettingFlag),
/* harmony export */   "SettingNumber": () => (/* reexport safe */ _Config_SettingNumber__WEBPACK_IMPORTED_MODULE_5__.SettingNumber),
/* harmony export */   "SettingOption": () => (/* reexport safe */ _Config_SettingOption__WEBPACK_IMPORTED_MODULE_6__.SettingOption),
/* harmony export */   "SettingText": () => (/* reexport safe */ _Config_SettingText__WEBPACK_IMPORTED_MODULE_7__.SettingText),
/* harmony export */   "SettingsChangedEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.SettingsChangedEvent),
/* harmony export */   "SignallingProtocol": () => (/* reexport safe */ _WebSockets_SignallingProtocol__WEBPACK_IMPORTED_MODULE_19__.SignallingProtocol),
/* harmony export */   "StatsReceivedEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.StatsReceivedEvent),
/* harmony export */   "StreamLoadingEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.StreamLoadingEvent),
/* harmony export */   "StreamPreConnectEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.StreamPreConnectEvent),
/* harmony export */   "StreamPreDisconnectEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.StreamPreDisconnectEvent),
/* harmony export */   "StreamReconnectEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.StreamReconnectEvent),
/* harmony export */   "StreamerIDChangedMessageEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.StreamerIDChangedMessageEvent),
/* harmony export */   "StreamerListMessageEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.StreamerListMessageEvent),
/* harmony export */   "TextParameters": () => (/* reexport safe */ _Config_Config__WEBPACK_IMPORTED_MODULE_2__.TextParameters),
/* harmony export */   "UnquantizedAndDenormalizeUnsigned": () => (/* reexport safe */ _Util_CoordinateConverter__WEBPACK_IMPORTED_MODULE_14__.UnquantizedDenormalizedUnsignedCoord),
/* harmony export */   "VideoEncoderAvgQPEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.VideoEncoderAvgQPEvent),
/* harmony export */   "VideoInitializedEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.VideoInitializedEvent),
/* harmony export */   "WebRTCSettings": () => (/* reexport safe */ _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_11__.WebRTCSettings),
/* harmony export */   "WebRtcAutoConnectEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.WebRtcAutoConnectEvent),
/* harmony export */   "WebRtcConnectedEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.WebRtcConnectedEvent),
/* harmony export */   "WebRtcConnectingEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.WebRtcConnectingEvent),
/* harmony export */   "WebRtcDisconnectedEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.WebRtcDisconnectedEvent),
/* harmony export */   "WebRtcFailedEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.WebRtcFailedEvent),
/* harmony export */   "WebRtcPlayerController": () => (/* reexport safe */ _WebRtcPlayer_WebRtcPlayerController__WEBPACK_IMPORTED_MODULE_0__.WebRtcPlayerController),
/* harmony export */   "WebRtcSdpEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.WebRtcSdpEvent),
/* harmony export */   "WebRtcTCPRelayDetectedEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.WebRtcTCPRelayDetectedEvent),
/* harmony export */   "WebSocketController": () => (/* reexport safe */ _WebSockets_WebSocketController__WEBPACK_IMPORTED_MODULE_18__.WebSocketController),
/* harmony export */   "WebXRController": () => (/* reexport safe */ _WebXR_WebXRController__WEBPACK_IMPORTED_MODULE_1__.WebXRController),
/* harmony export */   "XrFrameEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.XrFrameEvent),
/* harmony export */   "XrSessionEndedEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.XrSessionEndedEvent),
/* harmony export */   "XrSessionStartedEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__.XrSessionStartedEvent)
/* harmony export */ });
/* harmony import */ var _WebRtcPlayer_WebRtcPlayerController__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_436289__(/*! ./WebRtcPlayer/WebRtcPlayerController */ "./src/WebRtcPlayer/WebRtcPlayerController.ts");
/* harmony import */ var _WebXR_WebXRController__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_436289__(/*! ./WebXR/WebXRController */ "./src/WebXR/WebXRController.ts");
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_436289__(/*! ./Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _Config_SettingBase__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_436289__(/*! ./Config/SettingBase */ "./src/Config/SettingBase.ts");
/* harmony import */ var _Config_SettingFlag__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_436289__(/*! ./Config/SettingFlag */ "./src/Config/SettingFlag.ts");
/* harmony import */ var _Config_SettingNumber__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_436289__(/*! ./Config/SettingNumber */ "./src/Config/SettingNumber.ts");
/* harmony import */ var _Config_SettingOption__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_436289__(/*! ./Config/SettingOption */ "./src/Config/SettingOption.ts");
/* harmony import */ var _Config_SettingText__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_436289__(/*! ./Config/SettingText */ "./src/Config/SettingText.ts");
/* harmony import */ var _PixelStreaming_PixelStreaming__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_436289__(/*! ./PixelStreaming/PixelStreaming */ "./src/PixelStreaming/PixelStreaming.ts");
/* harmony import */ var _AFK_AFKController__WEBPACK_IMPORTED_MODULE_9__ = __nested_webpack_require_436289__(/*! ./AFK/AFKController */ "./src/AFK/AFKController.ts");
/* harmony import */ var _DataChannel_LatencyTestResults__WEBPACK_IMPORTED_MODULE_10__ = __nested_webpack_require_436289__(/*! ./DataChannel/LatencyTestResults */ "./src/DataChannel/LatencyTestResults.ts");
/* harmony import */ var _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_11__ = __nested_webpack_require_436289__(/*! ./DataChannel/InitialSettings */ "./src/DataChannel/InitialSettings.ts");
/* harmony import */ var _PeerConnectionController_AggregatedStats__WEBPACK_IMPORTED_MODULE_12__ = __nested_webpack_require_436289__(/*! ./PeerConnectionController/AggregatedStats */ "./src/PeerConnectionController/AggregatedStats.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_13__ = __nested_webpack_require_436289__(/*! ./Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Util_CoordinateConverter__WEBPACK_IMPORTED_MODULE_14__ = __nested_webpack_require_436289__(/*! ./Util/CoordinateConverter */ "./src/Util/CoordinateConverter.ts");
/* harmony import */ var _UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_15__ = __nested_webpack_require_436289__(/*! ./UeInstanceMessage/StreamMessageController */ "./src/UeInstanceMessage/StreamMessageController.ts");
/* harmony import */ var _WebSockets_MessageSend__WEBPACK_IMPORTED_MODULE_16__ = __nested_webpack_require_436289__(/*! ./WebSockets/MessageSend */ "./src/WebSockets/MessageSend.ts");
/* harmony import */ var _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_17__ = __nested_webpack_require_436289__(/*! ./WebSockets/MessageReceive */ "./src/WebSockets/MessageReceive.ts");
/* harmony import */ var _WebSockets_WebSocketController__WEBPACK_IMPORTED_MODULE_18__ = __nested_webpack_require_436289__(/*! ./WebSockets/WebSocketController */ "./src/WebSockets/WebSocketController.ts");
/* harmony import */ var _WebSockets_SignallingProtocol__WEBPACK_IMPORTED_MODULE_19__ = __nested_webpack_require_436289__(/*! ./WebSockets/SignallingProtocol */ "./src/WebSockets/SignallingProtocol.ts");
/* harmony import */ var _PeerConnectionController_CandidatePairStats__WEBPACK_IMPORTED_MODULE_20__ = __nested_webpack_require_436289__(/*! ./PeerConnectionController/CandidatePairStats */ "./src/PeerConnectionController/CandidatePairStats.ts");
/* harmony import */ var _PeerConnectionController_CandidateStat__WEBPACK_IMPORTED_MODULE_21__ = __nested_webpack_require_436289__(/*! ./PeerConnectionController/CandidateStat */ "./src/PeerConnectionController/CandidateStat.ts");
/* harmony import */ var _PeerConnectionController_DataChannelStats__WEBPACK_IMPORTED_MODULE_22__ = __nested_webpack_require_436289__(/*! ./PeerConnectionController/DataChannelStats */ "./src/PeerConnectionController/DataChannelStats.ts");
/* harmony import */ var _PeerConnectionController_InboundRTPStats__WEBPACK_IMPORTED_MODULE_23__ = __nested_webpack_require_436289__(/*! ./PeerConnectionController/InboundRTPStats */ "./src/PeerConnectionController/InboundRTPStats.ts");
/* harmony import */ var _PeerConnectionController_OutBoundRTPStats__WEBPACK_IMPORTED_MODULE_24__ = __nested_webpack_require_436289__(/*! ./PeerConnectionController/OutBoundRTPStats */ "./src/PeerConnectionController/OutBoundRTPStats.ts");
/* harmony import */ var _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_25__ = __nested_webpack_require_436289__(/*! ./Util/EventEmitter */ "./src/Util/EventEmitter.ts");
// Copyright Epic Games, Inc. All Rights Reserved.



























})();

var __webpack_exports__AfkLogic = __webpack_exports__.AfkLogic;
var __webpack_exports__AfkTimedOutEvent = __webpack_exports__.AfkTimedOutEvent;
var __webpack_exports__AfkWarningActivateEvent = __webpack_exports__.AfkWarningActivateEvent;
var __webpack_exports__AfkWarningDeactivateEvent = __webpack_exports__.AfkWarningDeactivateEvent;
var __webpack_exports__AfkWarningUpdateEvent = __webpack_exports__.AfkWarningUpdateEvent;
var __webpack_exports__AggregatedStats = __webpack_exports__.AggregatedStats;
var __webpack_exports__CandidatePairStats = __webpack_exports__.CandidatePairStats;
var __webpack_exports__CandidateStat = __webpack_exports__.CandidateStat;
var __webpack_exports__Config = __webpack_exports__.Config;
var __webpack_exports__ControlSchemeType = __webpack_exports__.ControlSchemeType;
var __webpack_exports__DataChannelCloseEvent = __webpack_exports__.DataChannelCloseEvent;
var __webpack_exports__DataChannelErrorEvent = __webpack_exports__.DataChannelErrorEvent;
var __webpack_exports__DataChannelLatencyTestResponseEvent = __webpack_exports__.DataChannelLatencyTestResponseEvent;
var __webpack_exports__DataChannelLatencyTestResultEvent = __webpack_exports__.DataChannelLatencyTestResultEvent;
var __webpack_exports__DataChannelOpenEvent = __webpack_exports__.DataChannelOpenEvent;
var __webpack_exports__DataChannelStats = __webpack_exports__.DataChannelStats;
var __webpack_exports__EncoderSettings = __webpack_exports__.EncoderSettings;
var __webpack_exports__EventEmitter = __webpack_exports__.EventEmitter;
var __webpack_exports__Flags = __webpack_exports__.Flags;
var __webpack_exports__HideFreezeFrameEvent = __webpack_exports__.HideFreezeFrameEvent;
var __webpack_exports__InboundAudioStats = __webpack_exports__.InboundAudioStats;
var __webpack_exports__InboundVideoStats = __webpack_exports__.InboundVideoStats;
var __webpack_exports__InitialSettings = __webpack_exports__.InitialSettings;
var __webpack_exports__InitialSettingsEvent = __webpack_exports__.InitialSettingsEvent;
var __webpack_exports__LatencyTestResultEvent = __webpack_exports__.LatencyTestResultEvent;
var __webpack_exports__LatencyTestResults = __webpack_exports__.LatencyTestResults;
var __webpack_exports__LoadFreezeFrameEvent = __webpack_exports__.LoadFreezeFrameEvent;
var __webpack_exports__Logger = __webpack_exports__.Logger;
var __webpack_exports__MessageDirection = __webpack_exports__.MessageDirection;
var __webpack_exports__MessageRecv = __webpack_exports__.MessageRecv;
var __webpack_exports__MessageSend = __webpack_exports__.MessageSend;
var __webpack_exports__MessageStreamerList = __webpack_exports__.MessageStreamerList;
var __webpack_exports__NumericParameters = __webpack_exports__.NumericParameters;
var __webpack_exports__OptionParameters = __webpack_exports__.OptionParameters;
var __webpack_exports__OutBoundVideoStats = __webpack_exports__.OutBoundVideoStats;
var __webpack_exports__PixelStreaming = __webpack_exports__.PixelStreaming;
var __webpack_exports__PlayStreamErrorEvent = __webpack_exports__.PlayStreamErrorEvent;
var __webpack_exports__PlayStreamEvent = __webpack_exports__.PlayStreamEvent;
var __webpack_exports__PlayStreamRejectedEvent = __webpack_exports__.PlayStreamRejectedEvent;
var __webpack_exports__PlayerCountEvent = __webpack_exports__.PlayerCountEvent;
var __webpack_exports__SettingBase = __webpack_exports__.SettingBase;
var __webpack_exports__SettingFlag = __webpack_exports__.SettingFlag;
var __webpack_exports__SettingNumber = __webpack_exports__.SettingNumber;
var __webpack_exports__SettingOption = __webpack_exports__.SettingOption;
var __webpack_exports__SettingText = __webpack_exports__.SettingText;
var __webpack_exports__SettingsChangedEvent = __webpack_exports__.SettingsChangedEvent;
var __webpack_exports__SignallingProtocol = __webpack_exports__.SignallingProtocol;
var __webpack_exports__StatsReceivedEvent = __webpack_exports__.StatsReceivedEvent;
var __webpack_exports__StreamLoadingEvent = __webpack_exports__.StreamLoadingEvent;
var __webpack_exports__StreamPreConnectEvent = __webpack_exports__.StreamPreConnectEvent;
var __webpack_exports__StreamPreDisconnectEvent = __webpack_exports__.StreamPreDisconnectEvent;
var __webpack_exports__StreamReconnectEvent = __webpack_exports__.StreamReconnectEvent;
var __webpack_exports__StreamerIDChangedMessageEvent = __webpack_exports__.StreamerIDChangedMessageEvent;
var __webpack_exports__StreamerListMessageEvent = __webpack_exports__.StreamerListMessageEvent;
var __webpack_exports__TextParameters = __webpack_exports__.TextParameters;
var __webpack_exports__UnquantizedAndDenormalizeUnsigned = __webpack_exports__.UnquantizedAndDenormalizeUnsigned;
var __webpack_exports__VideoEncoderAvgQPEvent = __webpack_exports__.VideoEncoderAvgQPEvent;
var __webpack_exports__VideoInitializedEvent = __webpack_exports__.VideoInitializedEvent;
var __webpack_exports__WebRTCSettings = __webpack_exports__.WebRTCSettings;
var __webpack_exports__WebRtcAutoConnectEvent = __webpack_exports__.WebRtcAutoConnectEvent;
var __webpack_exports__WebRtcConnectedEvent = __webpack_exports__.WebRtcConnectedEvent;
var __webpack_exports__WebRtcConnectingEvent = __webpack_exports__.WebRtcConnectingEvent;
var __webpack_exports__WebRtcDisconnectedEvent = __webpack_exports__.WebRtcDisconnectedEvent;
var __webpack_exports__WebRtcFailedEvent = __webpack_exports__.WebRtcFailedEvent;
var __webpack_exports__WebRtcPlayerController = __webpack_exports__.WebRtcPlayerController;
var __webpack_exports__WebRtcSdpEvent = __webpack_exports__.WebRtcSdpEvent;
var __webpack_exports__WebRtcTCPRelayDetectedEvent = __webpack_exports__.WebRtcTCPRelayDetectedEvent;
var __webpack_exports__WebSocketController = __webpack_exports__.WebSocketController;
var __webpack_exports__WebXRController = __webpack_exports__.WebXRController;
var __webpack_exports__XrFrameEvent = __webpack_exports__.XrFrameEvent;
var __webpack_exports__XrSessionEndedEvent = __webpack_exports__.XrSessionEndedEvent;
var __webpack_exports__XrSessionStartedEvent = __webpack_exports__.XrSessionStartedEvent;


//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "../../library/node_modules/sdp/sdp.js":
/*!*********************************************!*\
  !*** ../../library/node_modules/sdp/sdp.js ***!
  \*********************************************/
/***/ ((module) => {

/* eslint-env node */


// SDP helpers.
const SDPUtils = {};

// Generate an alphanumeric identifier for cname or mids.
// TODO: use UUIDs instead? https://gist.github.com/jed/982883
SDPUtils.generateIdentifier = function() {
  return Math.random().toString(36).substring(2, 12);
};

// The RTCP CNAME used by all peerconnections from the same JS.
SDPUtils.localCName = SDPUtils.generateIdentifier();

// Splits SDP into lines, dealing with both CRLF and LF.
SDPUtils.splitLines = function(blob) {
  return blob.trim().split('\n').map(line => line.trim());
};
// Splits SDP into sessionpart and mediasections. Ensures CRLF.
SDPUtils.splitSections = function(blob) {
  const parts = blob.split('\nm=');
  return parts.map((part, index) => (index > 0 ?
    'm=' + part : part).trim() + '\r\n');
};

// Returns the session description.
SDPUtils.getDescription = function(blob) {
  const sections = SDPUtils.splitSections(blob);
  return sections && sections[0];
};

// Returns the individual media sections.
SDPUtils.getMediaSections = function(blob) {
  const sections = SDPUtils.splitSections(blob);
  sections.shift();
  return sections;
};

// Returns lines that start with a certain prefix.
SDPUtils.matchPrefix = function(blob, prefix) {
  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);
};

// Parses an ICE candidate line. Sample input:
// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8
// rport 55996"
// Input can be prefixed with a=.
SDPUtils.parseCandidate = function(line) {
  let parts;
  // Parse both variants.
  if (line.indexOf('a=candidate:') === 0) {
    parts = line.substring(12).split(' ');
  } else {
    parts = line.substring(10).split(' ');
  }

  const candidate = {
    foundation: parts[0],
    component: {1: 'rtp', 2: 'rtcp'}[parts[1]] || parts[1],
    protocol: parts[2].toLowerCase(),
    priority: parseInt(parts[3], 10),
    ip: parts[4],
    address: parts[4], // address is an alias for ip.
    port: parseInt(parts[5], 10),
    // skip parts[6] == 'typ'
    type: parts[7],
  };

  for (let i = 8; i < parts.length; i += 2) {
    switch (parts[i]) {
      case 'raddr':
        candidate.relatedAddress = parts[i + 1];
        break;
      case 'rport':
        candidate.relatedPort = parseInt(parts[i + 1], 10);
        break;
      case 'tcptype':
        candidate.tcpType = parts[i + 1];
        break;
      case 'ufrag':
        candidate.ufrag = parts[i + 1]; // for backward compatibility.
        candidate.usernameFragment = parts[i + 1];
        break;
      default: // extension handling, in particular ufrag. Don't overwrite.
        if (candidate[parts[i]] === undefined) {
          candidate[parts[i]] = parts[i + 1];
        }
        break;
    }
  }
  return candidate;
};

// Translates a candidate object into SDP candidate attribute.
// This does not include the a= prefix!
SDPUtils.writeCandidate = function(candidate) {
  const sdp = [];
  sdp.push(candidate.foundation);

  const component = candidate.component;
  if (component === 'rtp') {
    sdp.push(1);
  } else if (component === 'rtcp') {
    sdp.push(2);
  } else {
    sdp.push(component);
  }
  sdp.push(candidate.protocol.toUpperCase());
  sdp.push(candidate.priority);
  sdp.push(candidate.address || candidate.ip);
  sdp.push(candidate.port);

  const type = candidate.type;
  sdp.push('typ');
  sdp.push(type);
  if (type !== 'host' && candidate.relatedAddress &&
      candidate.relatedPort) {
    sdp.push('raddr');
    sdp.push(candidate.relatedAddress);
    sdp.push('rport');
    sdp.push(candidate.relatedPort);
  }
  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {
    sdp.push('tcptype');
    sdp.push(candidate.tcpType);
  }
  if (candidate.usernameFragment || candidate.ufrag) {
    sdp.push('ufrag');
    sdp.push(candidate.usernameFragment || candidate.ufrag);
  }
  return 'candidate:' + sdp.join(' ');
};

// Parses an ice-options line, returns an array of option tags.
// Sample input:
// a=ice-options:foo bar
SDPUtils.parseIceOptions = function(line) {
  return line.substring(14).split(' ');
};

// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:
// a=rtpmap:111 opus/48000/2
SDPUtils.parseRtpMap = function(line) {
  let parts = line.substring(9).split(' ');
  const parsed = {
    payloadType: parseInt(parts.shift(), 10), // was: id
  };

  parts = parts[0].split('/');

  parsed.name = parts[0];
  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate
  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;
  // legacy alias, got renamed back to channels in ORTC.
  parsed.numChannels = parsed.channels;
  return parsed;
};

// Generates a rtpmap line from RTCRtpCodecCapability or
// RTCRtpCodecParameters.
SDPUtils.writeRtpMap = function(codec) {
  let pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  const channels = codec.channels || codec.numChannels || 1;
  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +
      (channels !== 1 ? '/' + channels : '') + '\r\n';
};

// Parses a extmap line (headerextension from RFC 5285). Sample input:
// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset
SDPUtils.parseExtmap = function(line) {
  const parts = line.substring(9).split(' ');
  return {
    id: parseInt(parts[0], 10),
    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',
    uri: parts[1],
    attributes: parts.slice(2).join(' '),
  };
};

// Generates an extmap line from RTCRtpHeaderExtensionParameters or
// RTCRtpHeaderExtension.
SDPUtils.writeExtmap = function(headerExtension) {
  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +
      (headerExtension.direction && headerExtension.direction !== 'sendrecv'
        ? '/' + headerExtension.direction
        : '') +
      ' ' + headerExtension.uri +
      (headerExtension.attributes ? ' ' + headerExtension.attributes : '') +
      '\r\n';
};

// Parses a fmtp line, returns dictionary. Sample input:
// a=fmtp:96 vbr=on;cng=on
// Also deals with vbr=on; cng=on
SDPUtils.parseFmtp = function(line) {
  const parsed = {};
  let kv;
  const parts = line.substring(line.indexOf(' ') + 1).split(';');
  for (let j = 0; j < parts.length; j++) {
    kv = parts[j].trim().split('=');
    parsed[kv[0].trim()] = kv[1];
  }
  return parsed;
};

// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeFmtp = function(codec) {
  let line = '';
  let pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.parameters && Object.keys(codec.parameters).length) {
    const params = [];
    Object.keys(codec.parameters).forEach(param => {
      if (codec.parameters[param] !== undefined) {
        params.push(param + '=' + codec.parameters[param]);
      } else {
        params.push(param);
      }
    });
    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\r\n';
  }
  return line;
};

// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:
// a=rtcp-fb:98 nack rpsi
SDPUtils.parseRtcpFb = function(line) {
  const parts = line.substring(line.indexOf(' ') + 1).split(' ');
  return {
    type: parts.shift(),
    parameter: parts.join(' '),
  };
};

// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeRtcpFb = function(codec) {
  let lines = '';
  let pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {
    // FIXME: special handling for trr-int?
    codec.rtcpFeedback.forEach(fb => {
      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +
      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +
          '\r\n';
    });
  }
  return lines;
};

// Parses a RFC 5576 ssrc media attribute. Sample input:
// a=ssrc:3735928559 cname:something
SDPUtils.parseSsrcMedia = function(line) {
  const sp = line.indexOf(' ');
  const parts = {
    ssrc: parseInt(line.substring(7, sp), 10),
  };
  const colon = line.indexOf(':', sp);
  if (colon > -1) {
    parts.attribute = line.substring(sp + 1, colon);
    parts.value = line.substring(colon + 1);
  } else {
    parts.attribute = line.substring(sp + 1);
  }
  return parts;
};

// Parse a ssrc-group line (see RFC 5576). Sample input:
// a=ssrc-group:semantics 12 34
SDPUtils.parseSsrcGroup = function(line) {
  const parts = line.substring(13).split(' ');
  return {
    semantics: parts.shift(),
    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),
  };
};

// Extracts the MID (RFC 5888) from a media section.
// Returns the MID or undefined if no mid line was found.
SDPUtils.getMid = function(mediaSection) {
  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];
  if (mid) {
    return mid.substring(6);
  }
};

// Parses a fingerprint line for DTLS-SRTP.
SDPUtils.parseFingerprint = function(line) {
  const parts = line.substring(14).split(' ');
  return {
    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.
    value: parts[1].toUpperCase(), // the definition is upper-case in RFC 4572.
  };
};

// Extracts DTLS parameters from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the fingerprint line as input. See also getIceParameters.
SDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {
  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=fingerprint:');
  // Note: a=setup line is ignored since we use the 'auto' role in Edge.
  return {
    role: 'auto',
    fingerprints: lines.map(SDPUtils.parseFingerprint),
  };
};

// Serializes DTLS parameters to SDP.
SDPUtils.writeDtlsParameters = function(params, setupType) {
  let sdp = 'a=setup:' + setupType + '\r\n';
  params.fingerprints.forEach(fp => {
    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\r\n';
  });
  return sdp;
};

// Parses a=crypto lines into
//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members
SDPUtils.parseCryptoLine = function(line) {
  const parts = line.substring(9).split(' ');
  return {
    tag: parseInt(parts[0], 10),
    cryptoSuite: parts[1],
    keyParams: parts[2],
    sessionParams: parts.slice(3),
  };
};

SDPUtils.writeCryptoLine = function(parameters) {
  return 'a=crypto:' + parameters.tag + ' ' +
    parameters.cryptoSuite + ' ' +
    (typeof parameters.keyParams === 'object'
      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)
      : parameters.keyParams) +
    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +
    '\r\n';
};

// Parses the crypto key parameters into
//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*
SDPUtils.parseCryptoKeyParams = function(keyParams) {
  if (keyParams.indexOf('inline:') !== 0) {
    return null;
  }
  const parts = keyParams.substring(7).split('|');
  return {
    keyMethod: 'inline',
    keySalt: parts[0],
    lifeTime: parts[1],
    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,
    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,
  };
};

SDPUtils.writeCryptoKeyParams = function(keyParams) {
  return keyParams.keyMethod + ':'
    + keyParams.keySalt +
    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +
    (keyParams.mkiValue && keyParams.mkiLength
      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength
      : '');
};

// Extracts all SDES parameters.
SDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {
  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=crypto:');
  return lines.map(SDPUtils.parseCryptoLine);
};

// Parses ICE information from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the ice-ufrag and ice-pwd lines as input.
SDPUtils.getIceParameters = function(mediaSection, sessionpart) {
  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=ice-ufrag:')[0];
  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=ice-pwd:')[0];
  if (!(ufrag && pwd)) {
    return null;
  }
  return {
    usernameFragment: ufrag.substring(12),
    password: pwd.substring(10),
  };
};

// Serializes ICE parameters to SDP.
SDPUtils.writeIceParameters = function(params) {
  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\r\n' +
      'a=ice-pwd:' + params.password + '\r\n';
  if (params.iceLite) {
    sdp += 'a=ice-lite\r\n';
  }
  return sdp;
};

// Parses the SDP media section and returns RTCRtpParameters.
SDPUtils.parseRtpParameters = function(mediaSection) {
  const description = {
    codecs: [],
    headerExtensions: [],
    fecMechanisms: [],
    rtcp: [],
  };
  const lines = SDPUtils.splitLines(mediaSection);
  const mline = lines[0].split(' ');
  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]
    const pt = mline[i];
    const rtpmapline = SDPUtils.matchPrefix(
      mediaSection, 'a=rtpmap:' + pt + ' ')[0];
    if (rtpmapline) {
      const codec = SDPUtils.parseRtpMap(rtpmapline);
      const fmtps = SDPUtils.matchPrefix(
        mediaSection, 'a=fmtp:' + pt + ' ');
      // Only the first a=fmtp:<pt> is considered.
      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};
      codec.rtcpFeedback = SDPUtils.matchPrefix(
        mediaSection, 'a=rtcp-fb:' + pt + ' ')
        .map(SDPUtils.parseRtcpFb);
      description.codecs.push(codec);
      // parse FEC mechanisms from rtpmap lines.
      switch (codec.name.toUpperCase()) {
        case 'RED':
        case 'ULPFEC':
          description.fecMechanisms.push(codec.name.toUpperCase());
          break;
        default: // only RED and ULPFEC are recognized as FEC mechanisms.
          break;
      }
    }
  }
  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {
    description.headerExtensions.push(SDPUtils.parseExtmap(line));
  });
  const wildcardRtcpFb = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-fb:* ')
    .map(SDPUtils.parseRtcpFb);
  description.codecs.forEach(codec => {
    wildcardRtcpFb.forEach(fb=> {
      const duplicate = codec.rtcpFeedback.find(existingFeedback => {
        return existingFeedback.type === fb.type &&
          existingFeedback.parameter === fb.parameter;
      });
      if (!duplicate) {
        codec.rtcpFeedback.push(fb);
      }
    });
  });
  // FIXME: parse rtcp.
  return description;
};

// Generates parts of the SDP media section describing the capabilities /
// parameters.
SDPUtils.writeRtpDescription = function(kind, caps) {
  let sdp = '';

  // Build the mline.
  sdp += 'm=' + kind + ' ';
  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.
  sdp += ' UDP/TLS/RTP/SAVPF ';
  sdp += caps.codecs.map(codec => {
    if (codec.preferredPayloadType !== undefined) {
      return codec.preferredPayloadType;
    }
    return codec.payloadType;
  }).join(' ') + '\r\n';

  sdp += 'c=IN IP4 0.0.0.0\r\n';
  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\r\n';

  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.
  caps.codecs.forEach(codec => {
    sdp += SDPUtils.writeRtpMap(codec);
    sdp += SDPUtils.writeFmtp(codec);
    sdp += SDPUtils.writeRtcpFb(codec);
  });
  let maxptime = 0;
  caps.codecs.forEach(codec => {
    if (codec.maxptime > maxptime) {
      maxptime = codec.maxptime;
    }
  });
  if (maxptime > 0) {
    sdp += 'a=maxptime:' + maxptime + '\r\n';
  }

  if (caps.headerExtensions) {
    caps.headerExtensions.forEach(extension => {
      sdp += SDPUtils.writeExtmap(extension);
    });
  }
  // FIXME: write fecMechanisms.
  return sdp;
};

// Parses the SDP media section and returns an array of
// RTCRtpEncodingParameters.
SDPUtils.parseRtpEncodingParameters = function(mediaSection) {
  const encodingParameters = [];
  const description = SDPUtils.parseRtpParameters(mediaSection);
  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;
  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;

  // filter a=ssrc:... cname:, ignore PlanB-msid
  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(line => SDPUtils.parseSsrcMedia(line))
    .filter(parts => parts.attribute === 'cname');
  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;
  let secondarySsrc;

  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')
    .map(line => {
      const parts = line.substring(17).split(' ');
      return parts.map(part => parseInt(part, 10));
    });
  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {
    secondarySsrc = flows[0][1];
  }

  description.codecs.forEach(codec => {
    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {
      let encParam = {
        ssrc: primarySsrc,
        codecPayloadType: parseInt(codec.parameters.apt, 10),
      };
      if (primarySsrc && secondarySsrc) {
        encParam.rtx = {ssrc: secondarySsrc};
      }
      encodingParameters.push(encParam);
      if (hasRed) {
        encParam = JSON.parse(JSON.stringify(encParam));
        encParam.fec = {
          ssrc: primarySsrc,
          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',
        };
        encodingParameters.push(encParam);
      }
    }
  });
  if (encodingParameters.length === 0 && primarySsrc) {
    encodingParameters.push({
      ssrc: primarySsrc,
    });
  }

  // we support both b=AS and b=TIAS but interpret AS as TIAS.
  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');
  if (bandwidth.length) {
    if (bandwidth[0].indexOf('b=TIAS:') === 0) {
      bandwidth = parseInt(bandwidth[0].substring(7), 10);
    } else if (bandwidth[0].indexOf('b=AS:') === 0) {
      // use formula from JSEP to convert b=AS to TIAS value.
      bandwidth = parseInt(bandwidth[0].substring(5), 10) * 1000 * 0.95
          - (50 * 40 * 8);
    } else {
      bandwidth = undefined;
    }
    encodingParameters.forEach(params => {
      params.maxBitrate = bandwidth;
    });
  }
  return encodingParameters;
};

// parses http://draft.ortc.org/#rtcrtcpparameters*
SDPUtils.parseRtcpParameters = function(mediaSection) {
  const rtcpParameters = {};

  // Gets the first SSRC. Note that with RTX there might be multiple
  // SSRCs.
  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(line => SDPUtils.parseSsrcMedia(line))
    .filter(obj => obj.attribute === 'cname')[0];
  if (remoteSsrc) {
    rtcpParameters.cname = remoteSsrc.value;
    rtcpParameters.ssrc = remoteSsrc.ssrc;
  }

  // Edge uses the compound attribute instead of reducedSize
  // compound is !reducedSize
  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');
  rtcpParameters.reducedSize = rsize.length > 0;
  rtcpParameters.compound = rsize.length === 0;

  // parses the rtcp-mux attrіbute.
  // Note that Edge does not support unmuxed RTCP.
  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');
  rtcpParameters.mux = mux.length > 0;

  return rtcpParameters;
};

SDPUtils.writeRtcpParameters = function(rtcpParameters) {
  let sdp = '';
  if (rtcpParameters.reducedSize) {
    sdp += 'a=rtcp-rsize\r\n';
  }
  if (rtcpParameters.mux) {
    sdp += 'a=rtcp-mux\r\n';
  }
  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {
    sdp += 'a=ssrc:' + rtcpParameters.ssrc +
      ' cname:' + rtcpParameters.cname + '\r\n';
  }
  return sdp;
};


// parses either a=msid: or a=ssrc:... msid lines and returns
// the id of the MediaStream and MediaStreamTrack.
SDPUtils.parseMsid = function(mediaSection) {
  let parts;
  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');
  if (spec.length === 1) {
    parts = spec[0].substring(7).split(' ');
    return {stream: parts[0], track: parts[1]};
  }
  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(line => SDPUtils.parseSsrcMedia(line))
    .filter(msidParts => msidParts.attribute === 'msid');
  if (planB.length > 0) {
    parts = planB[0].value.split(' ');
    return {stream: parts[0], track: parts[1]};
  }
};

// SCTP
// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back
// to draft-ietf-mmusic-sctp-sdp-05
SDPUtils.parseSctpDescription = function(mediaSection) {
  const mline = SDPUtils.parseMLine(mediaSection);
  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');
  let maxMessageSize;
  if (maxSizeLine.length > 0) {
    maxMessageSize = parseInt(maxSizeLine[0].substring(19), 10);
  }
  if (isNaN(maxMessageSize)) {
    maxMessageSize = 65536;
  }
  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');
  if (sctpPort.length > 0) {
    return {
      port: parseInt(sctpPort[0].substring(12), 10),
      protocol: mline.fmt,
      maxMessageSize,
    };
  }
  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');
  if (sctpMapLines.length > 0) {
    const parts = sctpMapLines[0]
      .substring(10)
      .split(' ');
    return {
      port: parseInt(parts[0], 10),
      protocol: parts[1],
      maxMessageSize,
    };
  }
};

// SCTP
// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers
// support by now receiving in this format, unless we originally parsed
// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line
// protocol of DTLS/SCTP -- without UDP/ or TCP/)
SDPUtils.writeSctpDescription = function(media, sctp) {
  let output = [];
  if (media.protocol !== 'DTLS/SCTP') {
    output = [
      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\r\n',
      'c=IN IP4 0.0.0.0\r\n',
      'a=sctp-port:' + sctp.port + '\r\n',
    ];
  } else {
    output = [
      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\r\n',
      'c=IN IP4 0.0.0.0\r\n',
      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\r\n',
    ];
  }
  if (sctp.maxMessageSize !== undefined) {
    output.push('a=max-message-size:' + sctp.maxMessageSize + '\r\n');
  }
  return output.join('');
};

// Generate a session ID for SDP.
// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1
// recommends using a cryptographically random +ve 64-bit value
// but right now this should be acceptable and within the right range
SDPUtils.generateSessionId = function() {
  return Math.random().toString().substr(2, 22);
};

// Write boiler plate for start of SDP
// sessId argument is optional - if not supplied it will
// be generated randomly
// sessVersion is optional and defaults to 2
// sessUser is optional and defaults to 'thisisadapterortc'
SDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {
  let sessionId;
  const version = sessVer !== undefined ? sessVer : 2;
  if (sessId) {
    sessionId = sessId;
  } else {
    sessionId = SDPUtils.generateSessionId();
  }
  const user = sessUser || 'thisisadapterortc';
  // FIXME: sess-id should be an NTP timestamp.
  return 'v=0\r\n' +
      'o=' + user + ' ' + sessionId + ' ' + version +
        ' IN IP4 127.0.0.1\r\n' +
      's=-\r\n' +
      't=0 0\r\n';
};

// Gets the direction from the mediaSection or the sessionpart.
SDPUtils.getDirection = function(mediaSection, sessionpart) {
  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.
  const lines = SDPUtils.splitLines(mediaSection);
  for (let i = 0; i < lines.length; i++) {
    switch (lines[i]) {
      case 'a=sendrecv':
      case 'a=sendonly':
      case 'a=recvonly':
      case 'a=inactive':
        return lines[i].substring(2);
      default:
        // FIXME: What should happen here?
    }
  }
  if (sessionpart) {
    return SDPUtils.getDirection(sessionpart);
  }
  return 'sendrecv';
};

SDPUtils.getKind = function(mediaSection) {
  const lines = SDPUtils.splitLines(mediaSection);
  const mline = lines[0].split(' ');
  return mline[0].substring(2);
};

SDPUtils.isRejected = function(mediaSection) {
  return mediaSection.split(' ', 2)[1] === '0';
};

SDPUtils.parseMLine = function(mediaSection) {
  const lines = SDPUtils.splitLines(mediaSection);
  const parts = lines[0].substring(2).split(' ');
  return {
    kind: parts[0],
    port: parseInt(parts[1], 10),
    protocol: parts[2],
    fmt: parts.slice(3).join(' '),
  };
};

SDPUtils.parseOLine = function(mediaSection) {
  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];
  const parts = line.substring(2).split(' ');
  return {
    username: parts[0],
    sessionId: parts[1],
    sessionVersion: parseInt(parts[2], 10),
    netType: parts[3],
    addressType: parts[4],
    address: parts[5],
  };
};

// a very naive interpretation of a valid SDP.
SDPUtils.isValidSDP = function(blob) {
  if (typeof blob !== 'string' || blob.length === 0) {
    return false;
  }
  const lines = SDPUtils.splitLines(blob);
  for (let i = 0; i < lines.length; i++) {
    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {
      return false;
    }
    // TODO: check the modifier a bit more.
  }
  return true;
};

// Expose public methods.
if (true) {
  module.exports = SDPUtils;
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!***********************!*\
  !*** ./src/uiless.ts ***!
  \***********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _epicgames_ps_lib_pixelstreamingfrontend_ue5_4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @epicgames-ps/lib-pixelstreamingfrontend-ue5.4 */ "../../library/dist/lib-pixelstreamingfrontend.esm.js");
// Copyright Epic Games, Inc. All Rights Reserved.

document.body.onload = function () {
    // Example of how to set the logger level
    // Logger.SetLoggerVerbosity(10);
    // Create a config object
    var config = new _epicgames_ps_lib_pixelstreamingfrontend_ue5_4__WEBPACK_IMPORTED_MODULE_0__.Config({
        initialSettings: {
            AutoPlayVideo: true,
            AutoConnect: true,
            ss: "ws://176.99.130.225:80",
            StartVideoMuted: true,
            WaitForStreamer: true,
            StartVideoMuted: true,
            WaitForStreamer: true,
            MinBitrate: 1000,
            WebRTCMaxBitrate: 20000,
            PreferredCodec: "H264",
            MaxFPS: 60,
            UseAdaptiveBitrate: true
        }
    });
    // Create a PixelStreaming instance and attach the video element to an existing parent div
    var pixelStreaming = new _epicgames_ps_lib_pixelstreamingfrontend_ue5_4__WEBPACK_IMPORTED_MODULE_0__.PixelStreaming(config, { videoElementParent: document.getElementById("videoParentElement") });
    // If browser denies autoplay, show "Click to play" and register a click-to-play handler
    pixelStreaming.addEventListener("playStreamRejected", function () {
        var clickToPlay = document.getElementById("clickToPlayElement");
        clickToPlay.className = "visible";
        clickToPlay.onclick = function () {
            pixelStreaming.play();
            clickToPlay.className = "";
            clickToPlay.onclick = undefined;
        };
    });
};

})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWlsZXNzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxPOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNWdUQ7QUFDdkQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsOEJBQW1COztBQUV6RSw4QkFBbUI7QUFDbkIscUJBQXFCLDhCQUFtQjtBQUN4QztBQUNBLHNCQUFzQjtBQUN0Qix1RUFBdUUsOEJBQW1CO0FBQzFGLHVFQUF1RSw4QkFBbUI7QUFDMUYsMkVBQTJFLDhCQUFtQjtBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxzSEFBc0gsMkJBQTJCO0FBQ2pKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEhBQThILDJCQUEyQjtBQUN6SjtBQUNBLFNBQVM7QUFDVDtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELCtCQUFtQjs7QUFFekUsK0JBQW1CO0FBQ25CLHFCQUFxQiwrQkFBbUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCLHVFQUF1RSwrQkFBbUI7QUFDMUYscUVBQXFFLCtCQUFtQjtBQUN4Rix1RUFBdUUsK0JBQW1CO0FBQzFGLHFFQUFxRSwrQkFBbUI7QUFDeEYsdUVBQXVFLCtCQUFtQjtBQUMxRiwyRUFBMkUsK0JBQW1CO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGdDQUFnQztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixxQkFBcUI7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ1JBQWdSLHFCQUFxQjtBQUNyUztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLHlDQUF5QztBQUN4RixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEVBQTBFLEdBQUc7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBFQUEwRSxHQUFHO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBFQUEwRSxHQUFHO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdLQUF3SyxJQUFJO0FBQzVLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZLQUE2SyxJQUFJO0FBQ2pMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZLQUE2SyxJQUFJO0FBQ2pMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZLQUE2SyxJQUFJO0FBQ2pMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtLQUErSyxJQUFJO0FBQ25MO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw4Q0FBOEM7OztBQUcvQyxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGdDQUFtQjs7QUFFekUsZ0NBQW1CO0FBQ25CLHFCQUFxQixnQ0FBbUI7QUFDeEM7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGdDQUFtQjs7QUFFekUsZ0NBQW1CO0FBQ25CLHFCQUFxQixnQ0FBbUI7QUFDeEM7QUFDQSxzQkFBc0I7QUFDdEIscUVBQXFFLGdDQUFtQjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDLHFCQUFxQixrQkFBa0IsR0FBRyxVQUFVO0FBQ3BELHFCQUFxQixrQkFBa0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsZ0NBQW1COztBQUV6RSxnQ0FBbUI7QUFDbkIscUJBQXFCLGdDQUFtQjtBQUN4QztBQUNBLHNCQUFzQjtBQUN0QixxRUFBcUUsZ0NBQW1CO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDLHFCQUFxQixrQkFBa0IsR0FBRyxVQUFVO0FBQ3BELHFCQUFxQixrQkFBa0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGdDQUFtQjs7QUFFekUsZ0NBQW1CO0FBQ25CLHFCQUFxQixnQ0FBbUI7QUFDeEM7QUFDQSxzQkFBc0I7QUFDdEIscUVBQXFFLGdDQUFtQjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUMscUJBQXFCLGtCQUFrQixHQUFHLFVBQVU7QUFDcEQscUJBQXFCLGtCQUFrQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFFQUFxRSxxQkFBcUI7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxnQ0FBbUI7O0FBRXpFLGdDQUFtQjtBQUNuQixxQkFBcUIsZ0NBQW1CO0FBQ3hDO0FBQ0Esc0JBQXNCO0FBQ3RCLHFFQUFxRSxnQ0FBbUI7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDLHFCQUFxQixrQkFBa0IsR0FBRyxVQUFVO0FBQ3BELHFCQUFxQixrQkFBa0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsZ0NBQW1COztBQUV6RSxnQ0FBbUI7QUFDbkIscUJBQXFCLGdDQUFtQjtBQUN4QztBQUNBLHNCQUFzQjtBQUN0Qix1RUFBdUUsZ0NBQW1CO0FBQzFGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0pBQW9KLFdBQVc7QUFDL0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvSkFBb0osV0FBVztBQUMvSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0pBQW9KLFdBQVcsYUFBYSxNQUFNO0FBQ2xMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0pBQW9KLFdBQVcsV0FBVyxNQUFNO0FBQ2hMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxnQ0FBbUI7O0FBRXpFLGdDQUFtQjtBQUNuQixxQkFBcUIsZ0NBQW1CO0FBQ3hDO0FBQ0Esc0JBQXNCO0FBQ3RCLHVFQUF1RSxnQ0FBbUI7QUFDMUYsdUZBQXVGLGdDQUFtQjtBQUMxRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxxQ0FBcUMsSUFBSSxpQkFBaUIsaUJBQWlCO0FBQzNFO0FBQ0EsMERBQTBEO0FBQzFELDZGQUE2RjtBQUM3RiwrRkFBK0Y7QUFDL0YsK0ZBQStGO0FBQy9GO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGdDQUFtQjs7QUFFekUsZ0NBQW1CO0FBQ25CLHFCQUFxQixnQ0FBbUI7QUFDeEM7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxnQ0FBbUI7O0FBRXpFLGdDQUFtQjtBQUNuQixxQkFBcUIsZ0NBQW1CO0FBQ3hDO0FBQ0Esc0JBQXNCO0FBQ3RCLHVFQUF1RSxnQ0FBbUI7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0pBQXdKLHFCQUFxQjtBQUM3SztBQUNBO0FBQ0E7QUFDQSw0SkFBNEoscUJBQXFCO0FBQ2pMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxnQ0FBbUI7O0FBRXpFLGdDQUFtQjtBQUNuQixxQkFBcUIsZ0NBQW1CO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGdDQUFtQjs7QUFFekUsZ0NBQW1CO0FBQ25CLHFCQUFxQixnQ0FBbUI7QUFDeEM7QUFDQSxzQkFBc0I7QUFDdEIsdUVBQXVFLGdDQUFtQjtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0pBQStKLHVCQUF1QixLQUFLLHFCQUFxQjtBQUNoTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdLQUF3Syx3QkFBd0IsS0FBSyxzQkFBc0I7QUFDM047QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxnQ0FBbUI7O0FBRXpFLGdDQUFtQjtBQUNuQixxQkFBcUIsZ0NBQW1CO0FBQ3hDO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxnQ0FBbUI7O0FBRXpFLGdDQUFtQjtBQUNuQixxQkFBcUIsZ0NBQW1CO0FBQ3hDO0FBQ0Esc0JBQXNCO0FBQ3RCLHVFQUF1RSxnQ0FBbUI7QUFDMUYscUVBQXFFLGdDQUFtQjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0xBQWdMLGlCQUFpQixHQUFHLFVBQVU7QUFDOU07QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlLQUF5SyxVQUFVO0FBQ25MO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMExBQTBMLGlCQUFpQixHQUFHLFVBQVU7QUFDeE47QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxnQ0FBbUI7O0FBRXpFLGdDQUFtQjtBQUNuQixxQkFBcUIsZ0NBQW1CO0FBQ3hDO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEIsc0VBQXNFLGdDQUFtQjtBQUN6RixtRkFBbUYsZ0NBQW1CO0FBQ3RHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRUFBZ0UsZ0JBQWdCO0FBQ2hGLDREQUE0RCxnQkFBZ0I7QUFDNUUsOERBQThELGdCQUFnQjtBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isc0NBQXNDO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QiwrQkFBK0I7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxnQ0FBbUI7O0FBRXpFLGdDQUFtQjtBQUNuQixxQkFBcUIsZ0NBQW1CO0FBQ3hDO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEIsdUVBQXVFLGdDQUFtQjtBQUMxRixtRkFBbUYsZ0NBQW1CO0FBQ3RHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0ZBQXNGLFNBQVM7QUFDL0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IscUJBQXFCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDRDQUE0QztBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDhCQUE4QjtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHNDQUFzQzs7O0FBR3ZDLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsZ0NBQW1COztBQUV6RSxnQ0FBbUI7QUFDbkIscUJBQXFCLGdDQUFtQjtBQUN4QztBQUNBLHNCQUFzQjtBQUN0Qix1RUFBdUUsZ0NBQW1CO0FBQzFGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsaUNBQW1COztBQUV6RSxpQ0FBbUI7QUFDbkIscUJBQXFCLGlDQUFtQjtBQUN4QztBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCLDZFQUE2RSxpQ0FBbUI7QUFDaEcsNEVBQTRFLGlDQUFtQjtBQUMvRix5RUFBeUUsaUNBQW1CO0FBQzVGLHlFQUF5RSxpQ0FBbUI7QUFDNUYsMkVBQTJFLGlDQUFtQjtBQUM5Rix1RUFBdUUsaUNBQW1CO0FBQzFGLHVFQUF1RSxpQ0FBbUI7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGlDQUFtQjs7QUFFekUsaUNBQW1CO0FBQ25CLHFCQUFxQixpQ0FBbUI7QUFDeEM7QUFDQSxzQkFBc0I7QUFDdEIseUVBQXlFLGlDQUFtQjtBQUM1Rix1RUFBdUUsaUNBQW1CO0FBQzFGLHVFQUF1RSxpQ0FBbUI7QUFDMUYsbUZBQW1GLGlDQUFtQjtBQUN0RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrSUFBK0ksUUFBUSxhQUFhLHFCQUFxQjtBQUN6TDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNklBQTZJLFFBQVE7QUFDcko7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdKQUFnSixTQUFTO0FBQ3pKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUtBQW1LLFlBQVk7QUFDL0s7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxpQ0FBbUI7O0FBRXpFLGlDQUFtQjtBQUNuQixxQkFBcUIsaUNBQW1CO0FBQ3hDO0FBQ0Esc0JBQXNCO0FBQ3RCLHVFQUF1RSxpQ0FBbUI7QUFDMUYsbUZBQW1GLGlDQUFtQjtBQUN0RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGlDQUFtQjs7QUFFekUsaUNBQW1CO0FBQ25CLHFCQUFxQixpQ0FBbUI7QUFDeEM7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCLGlDQUFpQztBQUNqQyxpQ0FBaUM7QUFDakMsOEJBQThCO0FBQzlCLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQyxzQ0FBc0M7QUFDdEMsc0NBQXNDO0FBQ3RDLG1DQUFtQztBQUNuQyxtQ0FBbUM7OztBQUduQyxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGlDQUFtQjs7QUFFekUsaUNBQW1CO0FBQ25CLHFCQUFxQixpQ0FBbUI7QUFDeEM7QUFDQSxzQkFBc0I7QUFDdEIsc0VBQXNFLGlDQUFtQjtBQUN6Rix1RUFBdUUsaUNBQW1CO0FBQzFGLDJFQUEyRSxpQ0FBbUI7QUFDOUYsNkVBQTZFLGlDQUFtQjtBQUNoRyxtRkFBbUYsaUNBQW1CO0FBQ3RHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUpBQW1KLFFBQVEsV0FBVyxFQUFFLElBQUksRUFBRTtBQUM5SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1KQUFtSixRQUFRLFNBQVMsRUFBRSxJQUFJLEVBQUU7QUFDNUs7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxpQ0FBbUI7O0FBRXpFLGlDQUFtQjtBQUNuQixxQkFBcUIsaUNBQW1CO0FBQ3hDO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxpQ0FBbUI7O0FBRXpFLGlDQUFtQjtBQUNuQixxQkFBcUIsaUNBQW1CO0FBQ3hDO0FBQ0Esc0JBQXNCO0FBQ3RCLHVFQUF1RSxpQ0FBbUI7QUFDMUYsbUZBQW1GLGlDQUFtQjtBQUN0RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHNDQUFzQztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHNDQUFzQztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixvQkFBb0I7QUFDNUMsa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBLDJJQUEySSxxQ0FBcUMsSUFBSSxFQUFFLElBQUksRUFBRTtBQUM1TDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsaUNBQW1COztBQUV6RSxpQ0FBbUI7QUFDbkIscUJBQXFCLGlDQUFtQjtBQUN4QztBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsUUFBUTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsOEJBQThCO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsMkJBQTJCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsaUNBQW1COztBQUV6RSxpQ0FBbUI7QUFDbkIscUJBQXFCLGlDQUFtQjtBQUN4QztBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsUUFBUSxZQUFZLE1BQU07QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELFFBQVE7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxRQUFRLFlBQVksTUFBTTtBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELE1BQU0sU0FBUyxRQUFRO0FBQy9FO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGlDQUFtQjs7QUFFekUsaUNBQW1CO0FBQ25CLHFCQUFxQixpQ0FBbUI7QUFDeEM7QUFDQSxzQkFBc0I7QUFDdEIseUVBQXlFLGlDQUFtQjtBQUM1RiwwRUFBMEUsaUNBQW1CO0FBQzdGLHVFQUF1RSxpQ0FBbUI7QUFDMUYsMEVBQTBFLGlDQUFtQjtBQUM3RixzRUFBc0UsaUNBQW1CO0FBQ3pGLHFFQUFxRSxpQ0FBbUI7QUFDeEYsdUVBQXVFLGlDQUFtQjtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRDtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQSxtQ0FBbUMsRUFBRSx1QkFBdUIsaUJBQWlCLE9BQU87QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsaUNBQW1COztBQUV6RSxpQ0FBbUI7QUFDbkIscUJBQXFCLGlDQUFtQjtBQUN4QztBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsaUNBQW1COztBQUV6RSxpQ0FBbUI7QUFDbkIscUJBQXFCLGlDQUFtQjtBQUN4QztBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsaUNBQW1COztBQUV6RSxpQ0FBbUI7QUFDbkIscUJBQXFCLGlDQUFtQjtBQUN4QztBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsaUNBQW1COztBQUV6RSxpQ0FBbUI7QUFDbkIscUJBQXFCLGlDQUFtQjtBQUN4QztBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsaUNBQW1COztBQUV6RSxpQ0FBbUI7QUFDbkIscUJBQXFCLGlDQUFtQjtBQUN4QztBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsaUNBQW1COztBQUV6RSxpQ0FBbUI7QUFDbkIscUJBQXFCLGlDQUFtQjtBQUN4QztBQUNBLHNCQUFzQjtBQUN0Qix1RUFBdUUsaUNBQW1CO0FBQzFGLHVFQUF1RSxpQ0FBbUI7QUFDMUYseUVBQXlFLGlDQUFtQjtBQUM1Riw0REFBNEQsaUNBQW1CO0FBQy9FLHVFQUF1RSxpQ0FBbUI7QUFDMUY7QUFDQSxpQkFBaUIsTUFBZ0M7QUFDakQsNEJBQTRCLCtEQUErRCxpQkFBaUI7QUFDNUc7QUFDQSxvQ0FBb0MsTUFBTSwrQkFBK0IsWUFBWTtBQUNyRixtQ0FBbUMsTUFBTSxtQ0FBbUMsWUFBWTtBQUN4RixnQ0FBZ0M7QUFDaEM7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxxQkFBcUI7QUFDckIsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkZBQTJGLDZCQUE2QjtBQUN4SDtBQUNBLGlEQUFpRDtBQUNqRDtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4Qix3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlNQUF5TSxtQkFBbUIsY0FBYyx1QkFBdUIsWUFBWSxzQkFBc0IsU0FBUyxtQkFBbUI7QUFDL1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2R0FBNkcsdUJBQXVCO0FBQ3BJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRDtBQUN0RDtBQUNBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsaUNBQW1COztBQUV6RSxpQ0FBbUI7QUFDbkIscUJBQXFCLGlDQUFtQjtBQUN4QztBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsaUNBQW1COztBQUV6RSxpQ0FBbUI7QUFDbkIscUJBQXFCLGlDQUFtQjtBQUN4QztBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsaUNBQW1COztBQUV6RSxpQ0FBbUI7QUFDbkIscUJBQXFCLGlDQUFtQjtBQUN4QztBQUNBLHNCQUFzQjtBQUN0Qix1RUFBdUUsaUNBQW1CO0FBQzFGLDZGQUE2RixpQ0FBbUI7QUFDaEgsdUVBQXVFLGlDQUFtQjtBQUMxRiw2RUFBNkUsaUNBQW1CO0FBQ2hHLDJFQUEyRSxpQ0FBbUI7QUFDOUYsK0VBQStFLGlDQUFtQjtBQUNsRyxtR0FBbUcsaUNBQW1CO0FBQ3RILHNHQUFzRyxpQ0FBbUI7QUFDekgsdUVBQXVFLGlDQUFtQjtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSw2SEFBNkgseUNBQXlDO0FBQ3RLO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNIQUFzSCxnQkFBZ0I7QUFDdEk7QUFDQTtBQUNBLG1JQUFtSSxVQUFVO0FBQzdJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrSEFBa0gsNkJBQTZCO0FBQy9JO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNIQUFzSCxXQUFXO0FBQ2pJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0hBQW9ILFVBQVU7QUFDOUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEpBQTRKLGFBQWE7QUFDeks7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0hBQWdILG9CQUFvQjtBQUNwSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlJQUF5SSxRQUFRO0FBQ2pKLGFBQWE7QUFDYix1RUFBdUUsUUFBUSxZQUFZO0FBQzNGO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwTEFBMEwsS0FBSztBQUMvTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxpQ0FBbUI7O0FBRXpFLGlDQUFtQjtBQUNuQixxQkFBcUIsaUNBQW1CO0FBQ3hDO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGlDQUFtQjs7QUFFekUsaUNBQW1CO0FBQ25CLHFCQUFxQixpQ0FBbUI7QUFDeEM7QUFDQSxzQkFBc0I7QUFDdEIsdUVBQXVFLGlDQUFtQjtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGlDQUFtQjs7QUFFekUsaUNBQW1CO0FBQ25CLHFCQUFxQixpQ0FBbUI7QUFDeEM7QUFDQSxzQkFBc0I7QUFDdEIsdUVBQXVFLGlDQUFtQjtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyTUFBMk0sWUFBWTtBQUN2TjtBQUNBO0FBQ0E7QUFDQSw0TUFBNE07QUFDNU07QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGNBQWMsbUJBQW1CLHlEQUF5RDtBQUN2RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxvQkFBb0I7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLG1NQUFtTSxhQUFhLElBQUksNEJBQTRCO0FBQ2hQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsaUNBQW1COztBQUV6RSxpQ0FBbUI7QUFDbkIscUJBQXFCLGlDQUFtQjtBQUN4QztBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEIsdUVBQXVFLGlDQUFtQjtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBK0Q7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0tBQXdLLGlCQUFpQjtBQUN6TDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsNENBQTRDOzs7QUFHN0MsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxpQ0FBbUI7O0FBRXpFLGlDQUFtQjtBQUNuQixxQkFBcUIsaUNBQW1CO0FBQ3hDO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxpQ0FBbUI7O0FBRXpFLGlDQUFtQjtBQUNuQixxQkFBcUIsaUNBQW1CO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCLHVFQUF1RSxpQ0FBbUI7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGlDQUFtQjs7QUFFekUsaUNBQW1CO0FBQ25CLHFCQUFxQixpQ0FBbUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsaUNBQW1COztBQUV6RSxpQ0FBbUI7QUFDbkIscUJBQXFCLGlDQUFtQjtBQUN4QztBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxpQ0FBbUI7O0FBRXpFLGlDQUFtQjtBQUNuQixxQkFBcUIsaUNBQW1CO0FBQ3hDO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEIsdUVBQXVFLGlDQUFtQjtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkpBQTJKLGlCQUFpQixHQUFHLFVBQVU7QUFDekw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0tBQW9LLGdCQUFnQixZQUFZLHlCQUF5QjtBQUN6TjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQscUJBQXFCO0FBQ3hFO0FBQ0E7QUFDQSxtREFBbUQsZUFBZTtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrTEFBa0wsaUJBQWlCLEdBQUcsVUFBVTtBQUNoTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxpQ0FBbUI7O0FBRXpFLGlDQUFtQjtBQUNuQixxQkFBcUIsaUNBQW1CO0FBQ3hDO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxpQ0FBbUI7O0FBRXpFLGlDQUFtQjtBQUNuQixxQkFBcUIsaUNBQW1CO0FBQ3hDO0FBQ0Esc0JBQXNCO0FBQ3RCLHVFQUF1RSxpQ0FBbUI7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsaUNBQW1COztBQUV6RSxpQ0FBbUI7QUFDbkIscUJBQXFCLGlDQUFtQjtBQUN4QztBQUNBLHNCQUFzQjtBQUN0Qix1RUFBdUUsaUNBQW1CO0FBQzFGLHVFQUF1RSxpQ0FBbUI7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxlQUFlO0FBQ2Y7QUFDQSxlQUFlLGdCQUFnQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsaUNBQW1COztBQUV6RSxpQ0FBbUI7QUFDbkIscUJBQXFCLGlDQUFtQjtBQUN4QztBQUNBLHNCQUFzQjtBQUN0Qix5RkFBeUYsaUNBQW1CO0FBQzVHLHNGQUFzRixpQ0FBbUI7QUFDekcsMkZBQTJGLGlDQUFtQjtBQUM5RywyRUFBMkUsaUNBQW1CO0FBQzlGLDJGQUEyRixpQ0FBbUI7QUFDOUcsNEdBQTRHLGlDQUFtQjtBQUMvSCx3RUFBd0UsaUNBQW1CO0FBQzNGLHNGQUFzRixpQ0FBbUI7QUFDekcseUZBQXlGLGlDQUFtQjtBQUM1Ryx3RUFBd0UsaUNBQW1CO0FBQzNGLHVFQUF1RSxpQ0FBbUI7QUFDMUYscUZBQXFGLGlDQUFtQjtBQUN4RyxpRkFBaUYsaUNBQW1CO0FBQ3BHLG1HQUFtRyxpQ0FBbUI7QUFDdEgsOEZBQThGLGlDQUFtQjtBQUNqSCxrR0FBa0csaUNBQW1CO0FBQ3JILHlHQUF5RyxpQ0FBbUI7QUFDNUgsdUZBQXVGLGlDQUFtQjtBQUMxRyxrRkFBa0YsaUNBQW1CO0FBQ3JHLDRFQUE0RSxpQ0FBbUI7QUFDL0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaLHVOQUF1TixXQUFXO0FBQ2xPO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUpBQXlKO0FBQ3pKO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBLQUEwSyxhQUFhO0FBQ3ZMLDZEQUE2RCxpQ0FBaUM7QUFDOUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbU1BQW1NLFlBQVksZ0ZBQWdGLFlBQVk7QUFDM1M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRLQUE0SyxhQUFhO0FBQ3pMLDhDQUE4QyxpQ0FBaUM7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1NQUFtTSxRQUFRLGtGQUFrRixZQUFZO0FBQ3pTO0FBQ0E7QUFDQTtBQUNBLDZLQUE2SyxVQUFVO0FBQ3ZMO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ05BQWdOLHNCQUFzQjtBQUN0TztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsU0FBUztBQUNsRDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEhBQTBILFNBQVM7QUFDbkk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2SEFBNkgsMEJBQTBCO0FBQ3ZKLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEtBQThLLElBQUk7QUFDbEw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBKQUEwSix3QkFBd0I7QUFDbEw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZEO0FBQzdELG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUJBQXlCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVKQUF1SixXQUFXO0FBQ2xLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNKQUFzSixVQUFVO0FBQ2hLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhJQUE4SSxNQUFNO0FBQ3BKO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4SUFBOEksTUFBTTtBQUNwSjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGlDQUFpQztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkpBQTJKLFdBQVc7QUFDdEs7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpQ0FBaUM7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJKQUEySixXQUFXO0FBQ3RLO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsMEJBQTBCO0FBQzVDLGFBQWEsZ0JBQWdCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUpBQW1KLElBQUk7QUFDdko7QUFDQSw2RkFBNkYsbUJBQW1CO0FBQ2hIO0FBQ0EsNkZBQTZGLHNCQUFzQjtBQUNuSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlGQUF5RixnQkFBZ0I7QUFDekc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbU1BQW1NLHlCQUF5QjtBQUM1TjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkpBQTZKLGNBQWM7QUFDM0ssK0pBQStKLGNBQWM7QUFDN0ssK0pBQStKLGNBQWM7QUFDN0s7QUFDQTtBQUNBO0FBQ0EsK0tBQStLLE1BQU07QUFDckw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGlDQUFtQjs7QUFFekUsaUNBQW1CO0FBQ25CLHFCQUFxQixpQ0FBbUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw0Q0FBNEM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsaUNBQW1COztBQUV6RSxpQ0FBbUI7QUFDbkIscUJBQXFCLGlDQUFtQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCLHVFQUF1RSxpQ0FBbUI7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDRDQUE0QztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGlDQUFtQjs7QUFFekUsaUNBQW1CO0FBQ25CLHFCQUFxQixpQ0FBbUI7QUFDeEM7QUFDQSxzQkFBc0I7QUFDdEIsdUVBQXVFLGlDQUFtQjtBQUMxRix3RUFBd0UsaUNBQW1CO0FBQzNGLHFFQUFxRSxpQ0FBbUI7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0SkFBNEosV0FBVztBQUN2SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGdLQUFnSyxlQUFlO0FBQy9LLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsaUNBQW1COztBQUV6RSxpQ0FBbUI7QUFDbkIscUJBQXFCLGlDQUFtQjtBQUN4QztBQUNBLHNCQUFzQjtBQUN0Qix1RUFBdUUsaUNBQW1CO0FBQzFGLHFFQUFxRSxpQ0FBbUI7QUFDeEYsNEVBQTRFLGlDQUFtQjtBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsZ01BQWdNLE1BQU07QUFDdE0sU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RCxpQkFBaUI7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsNENBQTRDO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsaUNBQW1COztBQUV6RSxpQ0FBbUI7QUFDbkIscUJBQXFCLGlDQUFtQjtBQUN4QztBQUNBLHNCQUFzQjtBQUN0Qix1RUFBdUUsaUNBQW1CO0FBQzFGLG9GQUFvRixpQ0FBbUI7QUFDdkcsMkVBQTJFLGlDQUFtQjtBQUM5RixnRkFBZ0YsaUNBQW1CO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELHNCQUFzQjtBQUN4RTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0Esc0dBQXNHLGFBQWE7QUFDbkg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGVBQWUsWUFBWSxpQ0FBbUIsVUFBVTtBQUN4RDtBQUNBLGlCQUFpQixnQ0FBK0I7O0FBRWhELE9BQU87O0FBRVAsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsaUNBQW1CO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLGlDQUFtQjtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLGlDQUFtQjtBQUM3QjtBQUNBLGVBQWUsaUNBQW1CLHdCQUF3QixpQ0FBbUI7QUFDN0UsbURBQW1ELHdDQUF3QztBQUMzRjtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsVUFBVSxpQ0FBbUI7QUFDN0IsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxpQ0FBbUI7QUFDN0I7QUFDQSxpRUFBaUUsaUJBQWlCO0FBQ2xGO0FBQ0EsMERBQTBELGFBQWE7QUFDdkU7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFtQjtBQUNuQixxQkFBcUIsaUNBQW1CO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0Qiw2RkFBNkYsaUNBQW1CO0FBQ2hILCtFQUErRSxpQ0FBbUI7QUFDbEcsdUVBQXVFLGlDQUFtQjtBQUMxRiw0RUFBNEUsaUNBQW1CO0FBQy9GLDRFQUE0RSxpQ0FBbUI7QUFDL0YsOEVBQThFLGlDQUFtQjtBQUNqRyw4RUFBOEUsaUNBQW1CO0FBQ2pHLDRFQUE0RSxpQ0FBbUI7QUFDL0YsdUZBQXVGLGlDQUFtQjtBQUMxRywyRUFBMkUsaUNBQW1CO0FBQzlGLHlGQUF5RixpQ0FBbUI7QUFDNUcsc0ZBQXNGLGlDQUFtQjtBQUN6RyxtR0FBbUcsaUNBQW1CO0FBQ3RILHdFQUF3RSxpQ0FBbUI7QUFDM0YsbUZBQW1GLGlDQUFtQjtBQUN0RyxvR0FBb0csaUNBQW1CO0FBQ3ZILGlGQUFpRixpQ0FBbUI7QUFDcEcsb0ZBQW9GLGlDQUFtQjtBQUN2Ryx5RkFBeUYsaUNBQW1CO0FBQzVHLHdGQUF3RixpQ0FBbUI7QUFDM0csc0dBQXNHLGlDQUFtQjtBQUN6SCxpR0FBaUcsaUNBQW1CO0FBQ3BILG9HQUFvRyxpQ0FBbUI7QUFDdkgsbUdBQW1HLGlDQUFtQjtBQUN0SCxvR0FBb0csaUNBQW1CO0FBQ3ZILDRFQUE0RSxpQ0FBbUI7QUFDL0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3N6STs7QUFFdHpJLDJDQUEyQyxjQUFjOzs7Ozs7Ozs7O0FDOWhTekQ7QUFDYTs7QUFFYjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLG9CQUFvQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQixrQkFBa0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvQkFBb0I7QUFDcEIsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RDtBQUM5RCxrQkFBa0Isa0JBQWtCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isa0JBQWtCLE9BQU87QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixrQkFBa0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isa0JBQWtCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSSxJQUEwQjtBQUM5QjtBQUNBOzs7Ozs7O1VDaHlCQTtVQUNBOztVQUVBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBOztVQUVBO1VBQ0E7O1VBRUE7VUFDQTtVQUNBOzs7OztXQ3RCQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0EsaUNBQWlDLFdBQVc7V0FDNUM7V0FDQTs7Ozs7V0NQQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLHlDQUF5Qyx3Q0FBd0M7V0FDakY7V0FDQTtXQUNBOzs7OztXQ1BBOzs7OztXQ0FBO1dBQ0E7V0FDQTtXQUNBLHVEQUF1RCxpQkFBaUI7V0FDeEU7V0FDQSxnREFBZ0QsYUFBYTtXQUM3RDs7Ozs7Ozs7Ozs7O0FDTkE7QUFDd0Y7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsa0ZBQU07QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSw2QkFBNkIsMEZBQWMsV0FBVyxtRUFBbUU7QUFDekg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXBpY2dhbWVzLWZyb250ZW5kL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9lcGljZ2FtZXMtZnJvbnRlbmQvLi4vLi4vbGlicmFyeS9kaXN0L2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLmVzbS5qcyIsIndlYnBhY2s6Ly9lcGljZ2FtZXMtZnJvbnRlbmQvLi4vLi4vbGlicmFyeS9ub2RlX21vZHVsZXMvc2RwL3NkcC5qcyIsIndlYnBhY2s6Ly9lcGljZ2FtZXMtZnJvbnRlbmQvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vZXBpY2dhbWVzLWZyb250ZW5kL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2VwaWNnYW1lcy1mcm9udGVuZC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vZXBpY2dhbWVzLWZyb250ZW5kL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vZXBpY2dhbWVzLWZyb250ZW5kL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vZXBpY2dhbWVzLWZyb250ZW5kLy4vc3JjL3VpbGVzcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJlcGljZ2FtZXMtZnJvbnRlbmRcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiZXBpY2dhbWVzLWZyb250ZW5kXCJdID0gZmFjdG9yeSgpO1xufSkodGhpcywgKCkgPT4ge1xucmV0dXJuICIsImltcG9ydCAqIGFzIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfc2RwX18gZnJvbSBcInNkcFwiO1xuLyoqKioqKi8gdmFyIF9fd2VicGFja19tb2R1bGVzX18gPSAoe1xuXG4vKioqLyBcIi4vc3JjL0FGSy9BRktDb250cm9sbGVyLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL0FGSy9BRktDb250cm9sbGVyLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkFGS0NvbnRyb2xsZXJcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQUZLQ29udHJvbGxlcilcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9Db25maWcvQ29uZmlnICovIFwiLi9zcmMvQ29uZmlnL0NvbmZpZy50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vTG9nZ2VyL0xvZ2dlciAqLyBcIi4vc3JjL0xvZ2dlci9Mb2dnZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9VdGlsL0V2ZW50RW1pdHRlciAqLyBcIi4vc3JjL1V0aWwvRXZlbnRFbWl0dGVyLnRzXCIpO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcblxyXG5cclxuY2xhc3MgQUZLQ29udHJvbGxlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcsIHBpeGVsU3RyZWFtaW5nLCBvbkRpc21pc3NBZmspIHtcclxuICAgICAgICAvLyB0aW1lIG91dCBsb2dpYyBkZXRhaWxzXHJcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmNvdW50ZG93bkFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMud2FyblRpbWVyID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuY291bnREb3duID0gMDtcclxuICAgICAgICB0aGlzLmNvdW50RG93blRpbWVyID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xyXG4gICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcgPSBwaXhlbFN0cmVhbWluZztcclxuICAgICAgICB0aGlzLm9uRGlzbWlzc0FmayA9IG9uRGlzbWlzc0FmaztcclxuICAgICAgICB0aGlzLm9uQUZLVGltZWRPdXRDYWxsYmFjayA9ICgpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ0FGSyB0aW1lZCBvdXQsIGRpZCB5b3Ugd2FudCB0byBvdmVycmlkZSB0aGlzIGNhbGxiYWNrPycpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtZXRob2RzIHRoYXQgb2NjdXIgd2hlbiBhbiBhZmsgZXZlbnQgbGlzdGVuZXIgaXMgY2xpY2tlZFxyXG4gICAgICovXHJcbiAgICBvbkFma0NsaWNrKCkge1xyXG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5jb3VudERvd25UaW1lcik7XHJcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlIHx8IHRoaXMuY291bnRkb3duQWN0aXZlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRBZmtXYXJuaW5nVGltZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5kaXNwYXRjaEV2ZW50KG5ldyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5BZmtXYXJuaW5nRGVhY3RpdmF0ZUV2ZW50KCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU3RhcnQgdGhlIHdhcm5pbmcgdGltZXIgaWYgYSB0aW1lb3V0IGlzIHNldCBncmVhdGVyIHRoYXQgMCBzZWNvbmRzXHJcbiAgICAgKi9cclxuICAgIHN0YXJ0QWZrV2FybmluZ1RpbWVyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5nZXROdW1lcmljU2V0dGluZ1ZhbHVlKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTnVtZXJpY1BhcmFtZXRlcnMuQUZLVGltZW91dFNlY3MpID4gMCAmJlxyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uRmxhZ3MuQUZLRGV0ZWN0aW9uKSkge1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlc2V0QWZrV2FybmluZ1RpbWVyKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFN0b3AgdGhlIGFmayB3YXJuaW5nIHRpbWVyXHJcbiAgICAgKi9cclxuICAgIHN0b3BBZmtXYXJuaW5nVGltZXIoKSB7XHJcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmNvdW50ZG93bkFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLndhcm5UaW1lcik7XHJcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmNvdW50RG93blRpbWVyKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUGF1c2UgdGhlIHRpbWVyIHdoaWNoIHdoZW4gZWxhcHNlZCB3aWxsIHdhcm4gdGhlIHVzZXIgdGhleSBhcmUgaW5hY3RpdmUuXHJcbiAgICAgKi9cclxuICAgIHBhdXNlQWZrV2FybmluZ1RpbWVyKCkge1xyXG4gICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIElmIHRoZSB1c2VyIGludGVyYWN0cyB0aGVuIHJlc2V0IHRoZSB3YXJuaW5nIHRpbWVyLlxyXG4gICAgICovXHJcbiAgICByZXNldEFma1dhcm5pbmdUaW1lcigpIHtcclxuICAgICAgICBpZiAodGhpcy5hY3RpdmUgJiYgdGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkZsYWdzLkFGS0RldGVjdGlvbikpIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMud2FyblRpbWVyKTtcclxuICAgICAgICAgICAgdGhpcy53YXJuVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMuYWN0aXZhdGVBZmtFdmVudCgpLCB0aGlzLmNvbmZpZy5nZXROdW1lcmljU2V0dGluZ1ZhbHVlKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTnVtZXJpY1BhcmFtZXRlcnMuQUZLVGltZW91dFNlY3MpICogMTAwMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTaG93IHRoZSBBRksgb3ZlcmxheSBhbmQgYmVnaW4gdGhlIGNvdW50RG93blxyXG4gICAgICovXHJcbiAgICBhY3RpdmF0ZUFma0V2ZW50KCkge1xyXG4gICAgICAgIC8vIFBhdXNlIHRoZSB0aW1lciB3aGlsZSB0aGUgdXNlciBpcyBsb29raW5nIGF0IHRoZSBpbmFjdGl2aXR5IHdhcm5pbmcgb3ZlcmxheVxyXG4gICAgICAgIHRoaXMucGF1c2VBZmtXYXJuaW5nVGltZXIoKTtcclxuICAgICAgICAvLyBpbnN0YW50aWF0ZSBhIG5ldyBvdmVybGF5XHJcbiAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5kaXNwYXRjaEV2ZW50KG5ldyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5BZmtXYXJuaW5nQWN0aXZhdGVFdmVudCh7XHJcbiAgICAgICAgICAgIGNvdW50RG93bjogdGhpcy5jb3VudERvd24sXHJcbiAgICAgICAgICAgIGRpc21pc3NBZms6IHRoaXMub25EaXNtaXNzQWZrXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIC8vIHVwZGF0ZSBvdXIgY291bnREb3duIHRpbWVyIGFuZCBvdmVybGF5IGNvbnRlbnRzXHJcbiAgICAgICAgdGhpcy5jb3VudERvd24gPSB0aGlzLmNvbmZpZy5nZXROdW1lcmljU2V0dGluZ1ZhbHVlKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTnVtZXJpY1BhcmFtZXRlcnMuQUZLQ291bnRkb3duU2Vjcyk7XHJcbiAgICAgICAgdGhpcy5jb3VudGRvd25BY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuZGlzcGF0Y2hFdmVudChuZXcgX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uQWZrV2FybmluZ1VwZGF0ZUV2ZW50KHsgY291bnREb3duOiB0aGlzLmNvdW50RG93biB9KSk7XHJcbiAgICAgICAgLy8gaWYgd2UgYXJlIGluIGxvY2tlZCBtb3VzZSBleGl0IHBvaW50ZXJsb2NrXHJcbiAgICAgICAgaWYgKCF0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uRmxhZ3MuSG92ZXJpbmdNb3VzZU1vZGUpKSB7XHJcbiAgICAgICAgICAgIC8vIG1pbm9yIGhhY2sgdG8gYWxsZXZpYXRlIGlvcyBub3Qgc3VwcG9ydGluZyBwb2ludGVybG9ja1xyXG4gICAgICAgICAgICBpZiAoZG9jdW1lbnQuZXhpdFBvaW50ZXJMb2NrKSB7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5leGl0UG9pbnRlckxvY2soKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyByZXNldCBvdXIgY291bnREb3duIGludGVydmFsIGFjY29yZGluZ2x5XHJcbiAgICAgICAgdGhpcy5jb3VudERvd25UaW1lciA9IHNldEludGVydmFsKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jb3VudERvd24tLTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY291bnREb3duID09IDApIHtcclxuICAgICAgICAgICAgICAgIC8vIFRoZSB1c2VyIGZhaWxlZCB0byBjbGljayBzbyBoaWRlIHRoZSBvdmVybGF5IGFuZCBkaXNjb25uZWN0IHRoZW0uXHJcbiAgICAgICAgICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLmRpc3BhdGNoRXZlbnQobmV3IF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkFma1RpbWVkT3V0RXZlbnQoKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uQUZLVGltZWRPdXRDYWxsYmFjaygpO1xyXG4gICAgICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ1lvdSBoYXZlIGJlZW4gZGlzY29ubmVjdGVkIGR1ZSB0byBpbmFjdGl2aXR5Jyk7XHJcbiAgICAgICAgICAgICAgICAvLyBzd2l0Y2ggb2ZmIHRoZSBhZmsgZmVhdHVyZSBhcyBzdHJlYW0gaGFzIGNsb3NlZFxyXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wQWZrV2FybmluZ1RpbWVyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLmRpc3BhdGNoRXZlbnQobmV3IF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkFma1dhcm5pbmdVcGRhdGVFdmVudCh7IGNvdW50RG93bjogdGhpcy5jb3VudERvd24gfSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgMTAwMCk7XHJcbiAgICB9XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL0NvbmZpZy9Db25maWcudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9Db25maWcvQ29uZmlnLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiQ29uZmlnXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIENvbmZpZyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiQ29udHJvbFNjaGVtZVR5cGVcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQ29udHJvbFNjaGVtZVR5cGUpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkZsYWdzXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIEZsYWdzKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJOdW1lcmljUGFyYW1ldGVyc1wiOiAoKSA9PiAoLyogYmluZGluZyAqLyBOdW1lcmljUGFyYW1ldGVycyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiT3B0aW9uUGFyYW1ldGVyc1wiOiAoKSA9PiAoLyogYmluZGluZyAqLyBPcHRpb25QYXJhbWV0ZXJzKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJUZXh0UGFyYW1ldGVyc1wiOiAoKSA9PiAoLyogYmluZGluZyAqLyBUZXh0UGFyYW1ldGVycylcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9Mb2dnZXIvTG9nZ2VyICovIFwiLi9zcmMvTG9nZ2VyL0xvZ2dlci50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfU2V0dGluZ0ZsYWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vU2V0dGluZ0ZsYWcgKi8gXCIuL3NyYy9Db25maWcvU2V0dGluZ0ZsYWcudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1NldHRpbmdOdW1iZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vU2V0dGluZ051bWJlciAqLyBcIi4vc3JjL0NvbmZpZy9TZXR0aW5nTnVtYmVyLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9TZXR0aW5nVGV4dF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9TZXR0aW5nVGV4dCAqLyBcIi4vc3JjL0NvbmZpZy9TZXR0aW5nVGV4dC50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfU2V0dGluZ09wdGlvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9TZXR0aW5nT3B0aW9uICovIFwiLi9zcmMvQ29uZmlnL1NldHRpbmdPcHRpb24udHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9VdGlsL0V2ZW50RW1pdHRlciAqLyBcIi4vc3JjL1V0aWwvRXZlbnRFbWl0dGVyLnRzXCIpO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEEgY29sbGVjdGlvbiBvZiBmbGFncyB0aGF0IGNhbiBiZSB0b2dnbGVkIGFuZCBhcmUgY29yZSB0byBhbGwgUGl4ZWwgU3RyZWFtaW5nIGV4cGVyaWVuY2VzLlxyXG4gKiBUaGVzZSBhcmUgdXNlZCBpbiB0aGUgYENvbmZpZy5GbGFnc2AgbWFwLlxyXG4gKi9cclxuY2xhc3MgRmxhZ3Mge1xyXG59XHJcbkZsYWdzLkF1dG9Db25uZWN0ID0gJ0F1dG9Db25uZWN0JztcclxuRmxhZ3MuQXV0b1BsYXlWaWRlbyA9ICdBdXRvUGxheVZpZGVvJztcclxuRmxhZ3MuQUZLRGV0ZWN0aW9uID0gJ1RpbWVvdXRJZklkbGUnO1xyXG5GbGFncy5Ccm93c2VyU2VuZE9mZmVyID0gJ09mZmVyVG9SZWNlaXZlJztcclxuRmxhZ3MuSG92ZXJpbmdNb3VzZU1vZGUgPSAnSG92ZXJpbmdNb3VzZSc7XHJcbkZsYWdzLkZvcmNlTW9ub0F1ZGlvID0gJ0ZvcmNlTW9ub0F1ZGlvJztcclxuRmxhZ3MuRm9yY2VUVVJOID0gJ0ZvcmNlVFVSTic7XHJcbkZsYWdzLkZha2VNb3VzZVdpdGhUb3VjaGVzID0gJ0Zha2VNb3VzZVdpdGhUb3VjaGVzJztcclxuRmxhZ3MuSXNRdWFsaXR5Q29udHJvbGxlciA9ICdDb250cm9sc1F1YWxpdHknO1xyXG5GbGFncy5NYXRjaFZpZXdwb3J0UmVzb2x1dGlvbiA9ICdNYXRjaFZpZXdwb3J0UmVzJztcclxuRmxhZ3MuU3RhcnRWaWRlb011dGVkID0gJ1N0YXJ0VmlkZW9NdXRlZCc7XHJcbkZsYWdzLlN1cHByZXNzQnJvd3NlcktleXMgPSAnU3VwcHJlc3NCcm93c2VyS2V5cyc7XHJcbkZsYWdzLlVzZU1pYyA9ICdVc2VNaWMnO1xyXG5GbGFncy5LZXlib2FyZElucHV0ID0gJ0tleWJvYXJkSW5wdXQnO1xyXG5GbGFncy5Nb3VzZUlucHV0ID0gJ01vdXNlSW5wdXQnO1xyXG5GbGFncy5Ub3VjaElucHV0ID0gJ1RvdWNoSW5wdXQnO1xyXG5GbGFncy5HYW1lcGFkSW5wdXQgPSAnR2FtZXBhZElucHV0JztcclxuRmxhZ3MuWFJDb250cm9sbGVySW5wdXQgPSAnWFJDb250cm9sbGVySW5wdXQnO1xyXG5GbGFncy5XYWl0Rm9yU3RyZWFtZXIgPSAnV2FpdEZvclN0cmVhbWVyJztcclxuRmxhZ3MuSGlkZVVJID0gJ0hpZGVVSSc7XHJcbmNvbnN0IGlzRmxhZ0lkID0gKGlkKSA9PiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhGbGFncykuc29tZSgobmFtZSkgPT4gRmxhZ3NbbmFtZV0gPT09IGlkKTtcclxuLyoqXHJcbiAqIEEgY29sbGVjdGlvbiBvZiBudW1lcmljIHBhcmFtZXRlcnMgdGhhdCBhcmUgY29yZSB0byBhbGwgUGl4ZWwgU3RyZWFtaW5nIGV4cGVyaWVuY2VzLlxyXG4gKlxyXG4gKi9cclxuY2xhc3MgTnVtZXJpY1BhcmFtZXRlcnMge1xyXG59XHJcbk51bWVyaWNQYXJhbWV0ZXJzLkFGS1RpbWVvdXRTZWNzID0gJ0FGS1RpbWVvdXQnO1xyXG5OdW1lcmljUGFyYW1ldGVycy5BRktDb3VudGRvd25TZWNzID0gJ0FGS0NvdW50ZG93bic7XHJcbk51bWVyaWNQYXJhbWV0ZXJzLk1pblFQID0gJ01pblFQJztcclxuTnVtZXJpY1BhcmFtZXRlcnMuTWF4UVAgPSAnTWF4UVAnO1xyXG5OdW1lcmljUGFyYW1ldGVycy5XZWJSVENGUFMgPSAnV2ViUlRDRlBTJztcclxuTnVtZXJpY1BhcmFtZXRlcnMuV2ViUlRDTWluQml0cmF0ZSA9ICdXZWJSVENNaW5CaXRyYXRlJztcclxuTnVtZXJpY1BhcmFtZXRlcnMuV2ViUlRDTWF4Qml0cmF0ZSA9ICdXZWJSVENNYXhCaXRyYXRlJztcclxuTnVtZXJpY1BhcmFtZXRlcnMuTWF4UmVjb25uZWN0QXR0ZW1wdHMgPSAnTWF4UmVjb25uZWN0QXR0ZW1wdHMnO1xyXG5OdW1lcmljUGFyYW1ldGVycy5TdHJlYW1lckF1dG9Kb2luSW50ZXJ2YWwgPSAnU3RyZWFtZXJBdXRvSm9pbkludGVydmFsJztcclxuY29uc3QgaXNOdW1lcmljSWQgPSAoaWQpID0+IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE51bWVyaWNQYXJhbWV0ZXJzKS5zb21lKChuYW1lKSA9PiBOdW1lcmljUGFyYW1ldGVyc1tuYW1lXSA9PT0gaWQpO1xyXG4vKipcclxuICogQSBjb2xsZWN0aW9uIG9mIHRleHR1YWwgcGFyYW1ldGVycyB0aGF0IGFyZSBjb3JlIHRvIGFsbCBQaXhlbCBTdHJlYW1pbmcgZXhwZXJpZW5jZXMuXHJcbiAqXHJcbiAqL1xyXG5jbGFzcyBUZXh0UGFyYW1ldGVycyB7XHJcbn1cclxuVGV4dFBhcmFtZXRlcnMuU2lnbmFsbGluZ1NlcnZlclVybCA9ICdzcyc7XHJcbmNvbnN0IGlzVGV4dElkID0gKGlkKSA9PiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhUZXh0UGFyYW1ldGVycykuc29tZSgobmFtZSkgPT4gVGV4dFBhcmFtZXRlcnNbbmFtZV0gPT09IGlkKTtcclxuLyoqXHJcbiAqIEEgY29sbGVjdGlvbiBvZiBlbnVtIGJhc2VkIHBhcmFtZXRlcnMgdGhhdCBhcmUgY29yZSB0byBhbGwgUGl4ZWwgU3RyZWFtaW5nIGV4cGVyaWVuY2VzLlxyXG4gKlxyXG4gKi9cclxuY2xhc3MgT3B0aW9uUGFyYW1ldGVycyB7XHJcbn1cclxuT3B0aW9uUGFyYW1ldGVycy5QcmVmZXJyZWRDb2RlYyA9ICdQcmVmZXJyZWRDb2RlYyc7XHJcbk9wdGlvblBhcmFtZXRlcnMuU3RyZWFtZXJJZCA9ICdTdHJlYW1lcklkJztcclxuY29uc3QgaXNPcHRpb25JZCA9IChpZCkgPT4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoT3B0aW9uUGFyYW1ldGVycykuc29tZSgobmFtZSkgPT4gT3B0aW9uUGFyYW1ldGVyc1tuYW1lXSA9PT0gaWQpO1xyXG5jbGFzcyBDb25maWcge1xyXG4gICAgLy8gLS0tLS0tLS0tLS0tIFNldHRpbmdzIC0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSkge1xyXG4gICAgICAgIC8qIEEgbWFwIG9mIGZsYWdzIHRoYXQgY2FuIGJlIHRvZ2dsZWQgLSBvcHRpb25zIHRoYXQgY2FuIGJlIHNldCBpbiB0aGUgYXBwbGljYXRpb24gLSBlLmcuIFVzZSBNaWM/ICovXHJcbiAgICAgICAgdGhpcy5mbGFncyA9IG5ldyBNYXAoKTtcclxuICAgICAgICAvKiBBIG1hcCBvZiBudW1lcmljYWwgc2V0dGluZ3MgLSBvcHRpb25zIHRoYXQgY2FuIGJlIGluIHRoZSBhcHBsaWNhdGlvbiAtIGUuZy4gTWluQml0cmF0ZSAqL1xyXG4gICAgICAgIHRoaXMubnVtZXJpY1BhcmFtZXRlcnMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgLyogQSBtYXAgb2YgdGV4dCBzZXR0aW5ncyAtIGUuZy4gc2lnbmFsbGluZyBzZXJ2ZXIgdXJsICovXHJcbiAgICAgICAgdGhpcy50ZXh0UGFyYW1ldGVycyA9IG5ldyBNYXAoKTtcclxuICAgICAgICAvKiBBIG1hcCBvZiBlbnVtIGJhc2VkIHNldHRpbmdzIC0gZS5nLiBwcmVmZXJyZWQgY29kZWMgKi9cclxuICAgICAgICB0aGlzLm9wdGlvblBhcmFtZXRlcnMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgY29uc3QgeyBpbml0aWFsU2V0dGluZ3MsIHVzZVVybFBhcmFtcyB9ID0gY29uZmlnO1xyXG4gICAgICAgIHRoaXMuX3VzZVVybFBhcmFtcyA9ICEhdXNlVXJsUGFyYW1zO1xyXG4gICAgICAgIHRoaXMucG9wdWxhdGVEZWZhdWx0U2V0dGluZ3ModGhpcy5fdXNlVXJsUGFyYW1zLCBpbml0aWFsU2V0dGluZ3MpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUcnVlIGlmIHJlYWRpbmcgY29uZmlndXJhdGlvbiBpbml0aWFsIHZhbHVlcyBmcm9tIFVSTCBwYXJhbWV0ZXJzLCBhbmRcclxuICAgICAqIHBlcnNpc3RpbmcgY2hhbmdlcyBpbiBVUkwgd2hlbiBjaGFuZ2VkLlxyXG4gICAgICovXHJcbiAgICBnZXQgdXNlVXJsUGFyYW1zKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl91c2VVcmxQYXJhbXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFBvcHVsYXRlIHRoZSBkZWZhdWx0IHNldHRpbmdzIGZvciBhIFBpeGVsIFN0cmVhbWluZyBhcHBsaWNhdGlvblxyXG4gICAgICovXHJcbiAgICBwb3B1bGF0ZURlZmF1bHRTZXR0aW5ncyh1c2VVcmxQYXJhbXMsIHNldHRpbmdzKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGV4dCBQYXJhbWV0ZXJzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy50ZXh0UGFyYW1ldGVycy5zZXQoVGV4dFBhcmFtZXRlcnMuU2lnbmFsbGluZ1NlcnZlclVybCwgbmV3IF9TZXR0aW5nVGV4dF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlNldHRpbmdUZXh0KFRleHRQYXJhbWV0ZXJzLlNpZ25hbGxpbmdTZXJ2ZXJVcmwsICdTaWduYWxsaW5nIHVybCcsICdVcmwgb2YgdGhlIHNpZ25hbGxpbmcgc2VydmVyJywgc2V0dGluZ3MgJiYgc2V0dGluZ3MuaGFzT3duUHJvcGVydHkoVGV4dFBhcmFtZXRlcnMuU2lnbmFsbGluZ1NlcnZlclVybCkgP1xyXG4gICAgICAgICAgICBzZXR0aW5nc1tUZXh0UGFyYW1ldGVycy5TaWduYWxsaW5nU2VydmVyVXJsXSA6XHJcbiAgICAgICAgICAgIChsb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2h0dHBzOicgPyAnd3NzOi8vJyA6ICd3czovLycpICtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSArXHJcbiAgICAgICAgICAgICAgICAvLyBmb3IgcmVhZGFiaWxpdHksIHdlIG9taXQgdGhlIHBvcnQgaWYgaXQncyA4MFxyXG4gICAgICAgICAgICAgICAgKHdpbmRvdy5sb2NhdGlvbi5wb3J0ID09PSAnODAnIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnBvcnQgPT09ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgPyAnJ1xyXG4gICAgICAgICAgICAgICAgICAgIDogYDoke3dpbmRvdy5sb2NhdGlvbi5wb3J0fWApLCB1c2VVcmxQYXJhbXMpKTtcclxuICAgICAgICB0aGlzLm9wdGlvblBhcmFtZXRlcnMuc2V0KE9wdGlvblBhcmFtZXRlcnMuU3RyZWFtZXJJZCwgbmV3IF9TZXR0aW5nT3B0aW9uX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uU2V0dGluZ09wdGlvbihPcHRpb25QYXJhbWV0ZXJzLlN0cmVhbWVySWQsICdTdHJlYW1lciBJRCcsICdUaGUgSUQgb2YgdGhlIHN0cmVhbWVyIHRvIHN0cmVhbS4nLCBzZXR0aW5ncyAmJiBzZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShPcHRpb25QYXJhbWV0ZXJzLlN0cmVhbWVySWQpID9cclxuICAgICAgICAgICAgc2V0dGluZ3NbT3B0aW9uUGFyYW1ldGVycy5TdHJlYW1lcklkXSA6XHJcbiAgICAgICAgICAgICcnLCBbXSwgdXNlVXJsUGFyYW1zKSk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRW51bSBQYXJhbWV0ZXJzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5vcHRpb25QYXJhbWV0ZXJzLnNldChPcHRpb25QYXJhbWV0ZXJzLlByZWZlcnJlZENvZGVjLCBuZXcgX1NldHRpbmdPcHRpb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5TZXR0aW5nT3B0aW9uKE9wdGlvblBhcmFtZXRlcnMuUHJlZmVycmVkQ29kZWMsICdQcmVmZXJyZWQgQ29kZWMnLCAnVGhlIHByZWZlcnJlZCBjb2RlYyB0byBiZSB1c2VkIGR1cmluZyBjb2RlYyBuZWdvdGlhdGlvbicsICdIMjY0IGxldmVsLWFzeW1tZXRyeS1hbGxvd2VkPTE7cGFja2V0aXphdGlvbi1tb2RlPTE7cHJvZmlsZS1sZXZlbC1pZD00MmUwMWYnLCBzZXR0aW5ncyAmJiBzZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShPcHRpb25QYXJhbWV0ZXJzLlByZWZlcnJlZENvZGVjKSA/XHJcbiAgICAgICAgICAgIFtzZXR0aW5nc1tPcHRpb25QYXJhbWV0ZXJzLlByZWZlcnJlZENvZGVjXV0gOlxyXG4gICAgICAgICAgICAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYnJvd3NlclN1cHBvcnRlZENvZGVjcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgLy8gVHJ5IGdldCB0aGUgaW5mbyBuZWVkZWQgZnJvbSB0aGUgUlRDUnRwUmVjZWl2ZXIuIFRoaXMgaXMgb25seSBhdmFpbGFibGUgb24gY2hyb21lXHJcbiAgICAgICAgICAgICAgICBpZiAoIVJUQ1J0cFJlY2VpdmVyLmdldENhcGFiaWxpdGllcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyb3dzZXJTdXBwb3J0ZWRDb2RlY3MucHVzaCgnT25seSBhdmFpbGFibGUgb24gQ2hyb21lJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJyb3dzZXJTdXBwb3J0ZWRDb2RlY3M7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtYXRjaGVyID0gLyhWUFxcZHxIMjZcXGR8QVYxKS4qLztcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvZGVjcyA9IFJUQ1J0cFJlY2VpdmVyLmdldENhcGFiaWxpdGllcygndmlkZW8nKS5jb2RlY3M7XHJcbiAgICAgICAgICAgICAgICBjb2RlY3MuZm9yRWFjaCgoY29kZWMpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHIgPSBjb2RlYy5taW1lVHlwZS5zcGxpdCgnLycpWzFdICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJyAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGNvZGVjLnNkcEZtdHBMaW5lIHx8ICcnKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRjaCA9IG1hdGNoZXIuZXhlYyhzdHIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicm93c2VyU3VwcG9ydGVkQ29kZWNzLnB1c2goc3RyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBicm93c2VyU3VwcG9ydGVkQ29kZWNzO1xyXG4gICAgICAgICAgICB9KSgpLCB1c2VVcmxQYXJhbXMpKTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBCb29sZWFuIHBhcmFtZXRlcnNcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmZsYWdzLnNldChGbGFncy5BdXRvQ29ubmVjdCwgbmV3IF9TZXR0aW5nRmxhZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlNldHRpbmdGbGFnKEZsYWdzLkF1dG9Db25uZWN0LCAnQXV0byBjb25uZWN0IHRvIHN0cmVhbScsICdXaGV0aGVyIHdlIHNob3VsZCBhdHRlbXB0IHRvIGF1dG8gY29ubmVjdCB0byB0aGUgc2lnbmFsbGluZyBzZXJ2ZXIgb3Igc2hvdyBhIGNsaWNrIHRvIHN0YXJ0IHByb21wdC4nLCBzZXR0aW5ncyAmJiBzZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShGbGFncy5BdXRvQ29ubmVjdCkgP1xyXG4gICAgICAgICAgICBzZXR0aW5nc1tGbGFncy5BdXRvQ29ubmVjdF0gOlxyXG4gICAgICAgICAgICBmYWxzZSwgdXNlVXJsUGFyYW1zKSk7XHJcbiAgICAgICAgdGhpcy5mbGFncy5zZXQoRmxhZ3MuQXV0b1BsYXlWaWRlbywgbmV3IF9TZXR0aW5nRmxhZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlNldHRpbmdGbGFnKEZsYWdzLkF1dG9QbGF5VmlkZW8sICdBdXRvIHBsYXkgdmlkZW8nLCAnV2hlbiB2aWRlbyBpcyByZWFkeSBhdXRvbWF0aWNhbGx5IHN0YXJ0IHBsYXlpbmcgaXQgYXMgb3Bwb3NlZCB0byBzaG93aW5nIGEgcGxheSBidXR0b24uJywgc2V0dGluZ3MgJiYgc2V0dGluZ3MuaGFzT3duUHJvcGVydHkoRmxhZ3MuQXV0b1BsYXlWaWRlbykgP1xyXG4gICAgICAgICAgICBzZXR0aW5nc1tGbGFncy5BdXRvUGxheVZpZGVvXSA6XHJcbiAgICAgICAgICAgIHRydWUsIHVzZVVybFBhcmFtcykpO1xyXG4gICAgICAgIHRoaXMuZmxhZ3Muc2V0KEZsYWdzLkJyb3dzZXJTZW5kT2ZmZXIsIG5ldyBfU2V0dGluZ0ZsYWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5TZXR0aW5nRmxhZyhGbGFncy5Ccm93c2VyU2VuZE9mZmVyLCAnQnJvd3NlciBzZW5kIG9mZmVyJywgJ0Jyb3dzZXIgd2lsbCBpbml0aWF0ZSB0aGUgV2ViUlRDIGhhbmRzaGFrZSBieSBzZW5kaW5nIHRoZSBvZmZlciB0byB0aGUgc3RyZWFtZXInLCBzZXR0aW5ncyAmJiBzZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShGbGFncy5Ccm93c2VyU2VuZE9mZmVyKSA/XHJcbiAgICAgICAgICAgIHNldHRpbmdzW0ZsYWdzLkJyb3dzZXJTZW5kT2ZmZXJdIDpcclxuICAgICAgICAgICAgZmFsc2UsIHVzZVVybFBhcmFtcykpO1xyXG4gICAgICAgIHRoaXMuZmxhZ3Muc2V0KEZsYWdzLlVzZU1pYywgbmV3IF9TZXR0aW5nRmxhZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlNldHRpbmdGbGFnKEZsYWdzLlVzZU1pYywgJ1VzZSBtaWNyb3Bob25lJywgJ01ha2UgYnJvd3NlciByZXF1ZXN0IG1pY3JvcGhvbmUgYWNjZXNzIGFuZCBvcGVuIGFuIGlucHV0IGF1ZGlvIHRyYWNrLicsIHNldHRpbmdzICYmIHNldHRpbmdzLmhhc093blByb3BlcnR5KEZsYWdzLlVzZU1pYykgP1xyXG4gICAgICAgICAgICBzZXR0aW5nc1tGbGFncy5Vc2VNaWNdIDpcclxuICAgICAgICAgICAgZmFsc2UsIHVzZVVybFBhcmFtcykpO1xyXG4gICAgICAgIHRoaXMuZmxhZ3Muc2V0KEZsYWdzLlN0YXJ0VmlkZW9NdXRlZCwgbmV3IF9TZXR0aW5nRmxhZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlNldHRpbmdGbGFnKEZsYWdzLlN0YXJ0VmlkZW9NdXRlZCwgJ1N0YXJ0IHZpZGVvIG11dGVkJywgJ1ZpZGVvIHdpbGwgc3RhcnQgbXV0ZWQgaWYgdHJ1ZS4nLCBzZXR0aW5ncyAmJiBzZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShGbGFncy5TdGFydFZpZGVvTXV0ZWQpID9cclxuICAgICAgICAgICAgc2V0dGluZ3NbRmxhZ3MuU3RhcnRWaWRlb011dGVkXSA6XHJcbiAgICAgICAgICAgIGZhbHNlLCB1c2VVcmxQYXJhbXMpKTtcclxuICAgICAgICB0aGlzLmZsYWdzLnNldChGbGFncy5TdXBwcmVzc0Jyb3dzZXJLZXlzLCBuZXcgX1NldHRpbmdGbGFnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uU2V0dGluZ0ZsYWcoRmxhZ3MuU3VwcHJlc3NCcm93c2VyS2V5cywgJ1N1cHByZXNzIGJyb3dzZXIga2V5cycsICdTdXBwcmVzcyBjZXJ0YWluIGJyb3dzZXIga2V5cyB0aGF0IHdlIHVzZSBpbiBVRSwgZm9yIGV4YW1wbGUgRjUgdG8gc2hvdyBzaGFkZXIgY29tcGxleGl0eSBpbnN0ZWFkIG9mIHJlZnJlc2ggdGhlIHBhZ2UuJywgc2V0dGluZ3MgJiYgc2V0dGluZ3MuaGFzT3duUHJvcGVydHkoRmxhZ3MuU3VwcHJlc3NCcm93c2VyS2V5cykgP1xyXG4gICAgICAgICAgICBzZXR0aW5nc1tGbGFncy5TdXBwcmVzc0Jyb3dzZXJLZXlzXSA6XHJcbiAgICAgICAgICAgIHRydWUsIHVzZVVybFBhcmFtcykpO1xyXG4gICAgICAgIHRoaXMuZmxhZ3Muc2V0KEZsYWdzLklzUXVhbGl0eUNvbnRyb2xsZXIsIG5ldyBfU2V0dGluZ0ZsYWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5TZXR0aW5nRmxhZyhGbGFncy5Jc1F1YWxpdHlDb250cm9sbGVyLCAnSXMgcXVhbGl0eSBjb250cm9sbGVyPycsICdUcnVlIGlmIHRoaXMgcGVlciBjb250cm9scyBzdHJlYW0gcXVhbGl0eScsIHNldHRpbmdzICYmIHNldHRpbmdzLmhhc093blByb3BlcnR5KEZsYWdzLklzUXVhbGl0eUNvbnRyb2xsZXIpID9cclxuICAgICAgICAgICAgc2V0dGluZ3NbRmxhZ3MuSXNRdWFsaXR5Q29udHJvbGxlcl0gOlxyXG4gICAgICAgICAgICB0cnVlLCB1c2VVcmxQYXJhbXMpKTtcclxuICAgICAgICB0aGlzLmZsYWdzLnNldChGbGFncy5Gb3JjZU1vbm9BdWRpbywgbmV3IF9TZXR0aW5nRmxhZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlNldHRpbmdGbGFnKEZsYWdzLkZvcmNlTW9ub0F1ZGlvLCAnRm9yY2UgbW9ubyBhdWRpbycsICdGb3JjZSBicm93c2VyIHRvIHJlcXVlc3QgbW9ubyBhdWRpbyBpbiB0aGUgU0RQJywgc2V0dGluZ3MgJiYgc2V0dGluZ3MuaGFzT3duUHJvcGVydHkoRmxhZ3MuRm9yY2VNb25vQXVkaW8pID9cclxuICAgICAgICAgICAgc2V0dGluZ3NbRmxhZ3MuRm9yY2VNb25vQXVkaW9dIDpcclxuICAgICAgICAgICAgZmFsc2UsIHVzZVVybFBhcmFtcykpO1xyXG4gICAgICAgIHRoaXMuZmxhZ3Muc2V0KEZsYWdzLkZvcmNlVFVSTiwgbmV3IF9TZXR0aW5nRmxhZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlNldHRpbmdGbGFnKEZsYWdzLkZvcmNlVFVSTiwgJ0ZvcmNlIFRVUk4nLCAnT25seSBnZW5lcmF0ZSBUVVJOL1JlbGF5ZWQgSUNFIGNhbmRpZGF0ZXMuJywgc2V0dGluZ3MgJiYgc2V0dGluZ3MuaGFzT3duUHJvcGVydHkoRmxhZ3MuRm9yY2VUVVJOKSA/XHJcbiAgICAgICAgICAgIHNldHRpbmdzW0ZsYWdzLkZvcmNlVFVSTl0gOlxyXG4gICAgICAgICAgICBmYWxzZSwgdXNlVXJsUGFyYW1zKSk7XHJcbiAgICAgICAgdGhpcy5mbGFncy5zZXQoRmxhZ3MuQUZLRGV0ZWN0aW9uLCBuZXcgX1NldHRpbmdGbGFnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uU2V0dGluZ0ZsYWcoRmxhZ3MuQUZLRGV0ZWN0aW9uLCAnQUZLIGlmIGlkbGUnLCAnVGltZW91dCB0aGUgZXhwZXJpZW5jZSBpZiB1c2VyIGlzIEFGSyBmb3IgYSBwZXJpb2QuJywgc2V0dGluZ3MgJiYgc2V0dGluZ3MuaGFzT3duUHJvcGVydHkoRmxhZ3MuQUZLRGV0ZWN0aW9uKSA/XHJcbiAgICAgICAgICAgIHNldHRpbmdzW0ZsYWdzLkFGS0RldGVjdGlvbl0gOlxyXG4gICAgICAgICAgICBmYWxzZSwgdXNlVXJsUGFyYW1zKSk7XHJcbiAgICAgICAgdGhpcy5mbGFncy5zZXQoRmxhZ3MuTWF0Y2hWaWV3cG9ydFJlc29sdXRpb24sIG5ldyBfU2V0dGluZ0ZsYWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5TZXR0aW5nRmxhZyhGbGFncy5NYXRjaFZpZXdwb3J0UmVzb2x1dGlvbiwgJ01hdGNoIHZpZXdwb3J0IHJlc29sdXRpb24nLCAnUGl4ZWwgU3RyZWFtaW5nIHdpbGwgYmUgaW5zdHJ1Y3RlZCB0byBkeW5hbWljYWxseSByZXNpemUgdGhlIHZpZGVvIHN0cmVhbSB0byBtYXRjaCB0aGUgc2l6ZSBvZiB0aGUgdmlkZW8gZWxlbWVudC4nLCBzZXR0aW5ncyAmJiBzZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShGbGFncy5NYXRjaFZpZXdwb3J0UmVzb2x1dGlvbikgP1xyXG4gICAgICAgICAgICBzZXR0aW5nc1tGbGFncy5NYXRjaFZpZXdwb3J0UmVzb2x1dGlvbl0gOlxyXG4gICAgICAgICAgICBmYWxzZSwgdXNlVXJsUGFyYW1zKSk7XHJcbiAgICAgICAgdGhpcy5mbGFncy5zZXQoRmxhZ3MuSG92ZXJpbmdNb3VzZU1vZGUsIG5ldyBfU2V0dGluZ0ZsYWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5TZXR0aW5nRmxhZyhGbGFncy5Ib3ZlcmluZ01vdXNlTW9kZSwgJ0NvbnRyb2wgU2NoZW1lOiBMb2NrZWQgTW91c2UnLCAnRWl0aGVyIGxvY2tlZCBtb3VzZSwgd2hlcmUgdGhlIHBvaW50ZXIgaXMgY29uc3VtZWQgYnkgdGhlIHZpZGVvIGFuZCBsb2NrZWQgdG8gaXQsIG9yIGhvdmVyaW5nIG1vdXNlLCB3aGVyZSB0aGUgbW91c2UgaXMgbm90IGNvbnN1bWVkLicsIHNldHRpbmdzICYmIHNldHRpbmdzLmhhc093blByb3BlcnR5KEZsYWdzLkhvdmVyaW5nTW91c2VNb2RlKSA/XHJcbiAgICAgICAgICAgIHNldHRpbmdzW0ZsYWdzLkhvdmVyaW5nTW91c2VNb2RlXSA6XHJcbiAgICAgICAgICAgIGZhbHNlLCB1c2VVcmxQYXJhbXMsIChpc0hvdmVyaW5nTW91c2UsIHNldHRpbmcpID0+IHtcclxuICAgICAgICAgICAgc2V0dGluZy5sYWJlbCA9IGBDb250cm9sIFNjaGVtZTogJHtpc0hvdmVyaW5nTW91c2UgPyAnSG92ZXJpbmcnIDogJ0xvY2tlZCd9IE1vdXNlYDtcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgdGhpcy5mbGFncy5zZXQoRmxhZ3MuRmFrZU1vdXNlV2l0aFRvdWNoZXMsIG5ldyBfU2V0dGluZ0ZsYWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5TZXR0aW5nRmxhZyhGbGFncy5GYWtlTW91c2VXaXRoVG91Y2hlcywgJ0Zha2UgbW91c2Ugd2l0aCB0b3VjaGVzJywgJ0Egc2luZ2xlIGZpbmdlciB0b3VjaCBpcyBjb252ZXJ0ZWQgaW50byBhIG1vdXNlIGV2ZW50LiBUaGlzIGFsbG93cyBhIG5vbi10b3VjaCBhcHBsaWNhdGlvbiB0byBiZSBjb250cm9sbGVkIHBhcnRpYWxseSB2aWEgYSB0b3VjaCBkZXZpY2UuJywgc2V0dGluZ3MgJiYgc2V0dGluZ3MuaGFzT3duUHJvcGVydHkoRmxhZ3MuRmFrZU1vdXNlV2l0aFRvdWNoZXMpID9cclxuICAgICAgICAgICAgc2V0dGluZ3NbRmxhZ3MuRmFrZU1vdXNlV2l0aFRvdWNoZXNdIDpcclxuICAgICAgICAgICAgZmFsc2UsIHVzZVVybFBhcmFtcykpO1xyXG4gICAgICAgIHRoaXMuZmxhZ3Muc2V0KEZsYWdzLktleWJvYXJkSW5wdXQsIG5ldyBfU2V0dGluZ0ZsYWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5TZXR0aW5nRmxhZyhGbGFncy5LZXlib2FyZElucHV0LCAnS2V5Ym9hcmQgaW5wdXQnLCAnSWYgZW5hYmxlZCwgc2VuZCBrZXlib2FyZCBldmVudHMgdG8gc3RyZWFtZXInLCBzZXR0aW5ncyAmJiBzZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShGbGFncy5LZXlib2FyZElucHV0KSA/XHJcbiAgICAgICAgICAgIHNldHRpbmdzW0ZsYWdzLktleWJvYXJkSW5wdXRdIDpcclxuICAgICAgICAgICAgdHJ1ZSwgdXNlVXJsUGFyYW1zKSk7XHJcbiAgICAgICAgdGhpcy5mbGFncy5zZXQoRmxhZ3MuTW91c2VJbnB1dCwgbmV3IF9TZXR0aW5nRmxhZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlNldHRpbmdGbGFnKEZsYWdzLk1vdXNlSW5wdXQsICdNb3VzZSBpbnB1dCcsICdJZiBlbmFibGVkLCBzZW5kIG1vdXNlIGV2ZW50cyB0byBzdHJlYW1lcicsIHNldHRpbmdzICYmIHNldHRpbmdzLmhhc093blByb3BlcnR5KEZsYWdzLk1vdXNlSW5wdXQpID9cclxuICAgICAgICAgICAgc2V0dGluZ3NbRmxhZ3MuTW91c2VJbnB1dF0gOlxyXG4gICAgICAgICAgICB0cnVlLCB1c2VVcmxQYXJhbXMpKTtcclxuICAgICAgICB0aGlzLmZsYWdzLnNldChGbGFncy5Ub3VjaElucHV0LCBuZXcgX1NldHRpbmdGbGFnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uU2V0dGluZ0ZsYWcoRmxhZ3MuVG91Y2hJbnB1dCwgJ1RvdWNoIGlucHV0JywgJ0lmIGVuYWJsZWQsIHNlbmQgdG91Y2ggZXZlbnRzIHRvIHN0cmVhbWVyJywgc2V0dGluZ3MgJiYgc2V0dGluZ3MuaGFzT3duUHJvcGVydHkoRmxhZ3MuVG91Y2hJbnB1dCkgP1xyXG4gICAgICAgICAgICBzZXR0aW5nc1tGbGFncy5Ub3VjaElucHV0XSA6XHJcbiAgICAgICAgICAgIHRydWUsIHVzZVVybFBhcmFtcykpO1xyXG4gICAgICAgIHRoaXMuZmxhZ3Muc2V0KEZsYWdzLkdhbWVwYWRJbnB1dCwgbmV3IF9TZXR0aW5nRmxhZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlNldHRpbmdGbGFnKEZsYWdzLkdhbWVwYWRJbnB1dCwgJ0dhbWVwYWQgaW5wdXQnLCAnSWYgZW5hYmxlZCwgc2VuZCBnYW1lcGFkIGV2ZW50cyB0byBzdHJlYW1lcicsIHNldHRpbmdzICYmIHNldHRpbmdzLmhhc093blByb3BlcnR5KEZsYWdzLkdhbWVwYWRJbnB1dCkgP1xyXG4gICAgICAgICAgICBzZXR0aW5nc1tGbGFncy5HYW1lcGFkSW5wdXRdIDpcclxuICAgICAgICAgICAgdHJ1ZSwgdXNlVXJsUGFyYW1zKSk7XHJcbiAgICAgICAgdGhpcy5mbGFncy5zZXQoRmxhZ3MuWFJDb250cm9sbGVySW5wdXQsIG5ldyBfU2V0dGluZ0ZsYWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5TZXR0aW5nRmxhZyhGbGFncy5YUkNvbnRyb2xsZXJJbnB1dCwgJ1hSIGNvbnRyb2xsZXIgaW5wdXQnLCAnSWYgZW5hYmxlZCwgc2VuZCBYUiBjb250cm9sbGVyIGV2ZW50cyB0byBzdHJlYW1lcicsIHNldHRpbmdzICYmIHNldHRpbmdzLmhhc093blByb3BlcnR5KEZsYWdzLlhSQ29udHJvbGxlcklucHV0KSA/XHJcbiAgICAgICAgICAgIHNldHRpbmdzW0ZsYWdzLlhSQ29udHJvbGxlcklucHV0XSA6XHJcbiAgICAgICAgICAgIHRydWUsIHVzZVVybFBhcmFtcykpO1xyXG4gICAgICAgIHRoaXMuZmxhZ3Muc2V0KEZsYWdzLldhaXRGb3JTdHJlYW1lciwgbmV3IF9TZXR0aW5nRmxhZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlNldHRpbmdGbGFnKEZsYWdzLldhaXRGb3JTdHJlYW1lciwgJ1dhaXQgZm9yIHN0cmVhbWVyJywgJ1dpbGwgY29udGludWUgdHJ5aW5nIHRvIGNvbm5lY3QgdG8gdGhlIGZpcnN0IHN0cmVhbWVyIGF2YWlsYWJsZS4nLCBzZXR0aW5ncyAmJiBzZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShGbGFncy5XYWl0Rm9yU3RyZWFtZXIpID9cclxuICAgICAgICAgICAgc2V0dGluZ3NbRmxhZ3MuV2FpdEZvclN0cmVhbWVyXSA6XHJcbiAgICAgICAgICAgIHRydWUsIHVzZVVybFBhcmFtcykpO1xyXG4gICAgICAgIHRoaXMuZmxhZ3Muc2V0KEZsYWdzLkhpZGVVSSwgbmV3IF9TZXR0aW5nRmxhZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlNldHRpbmdGbGFnKEZsYWdzLkhpZGVVSSwgJ0hpZGUgdGhlIFVJIG92ZXJsYXknLCAnV2lsbCBoaWRlIGFsbCBVSSBvdmVybGF5IGRldGFpbHMnLCBzZXR0aW5ncyAmJiBzZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShGbGFncy5IaWRlVUkpID9cclxuICAgICAgICAgICAgc2V0dGluZ3NbRmxhZ3MuSGlkZVVJXSA6XHJcbiAgICAgICAgICAgIGZhbHNlLCB1c2VVcmxQYXJhbXMpKTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBOdW1lcmljIHBhcmFtZXRlcnNcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLm51bWVyaWNQYXJhbWV0ZXJzLnNldChOdW1lcmljUGFyYW1ldGVycy5BRktUaW1lb3V0U2VjcywgbmV3IF9TZXR0aW5nTnVtYmVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18uU2V0dGluZ051bWJlcihOdW1lcmljUGFyYW1ldGVycy5BRktUaW1lb3V0U2VjcywgJ0FGSyB0aW1lb3V0JywgJ1RoZSB0aW1lIChpbiBzZWNvbmRzKSBpdCB0YWtlcyBmb3IgdGhlIGFwcGxpY2F0aW9uIHRvIHRpbWUgb3V0IGlmIEFGSyB0aW1lb3V0IGlzIGVuYWJsZWQuJywgMCAvKm1pbiovLCBudWxsIC8qbWF4Ki8sIHNldHRpbmdzICYmIHNldHRpbmdzLmhhc093blByb3BlcnR5KE51bWVyaWNQYXJhbWV0ZXJzLkFGS1RpbWVvdXRTZWNzKSA/XHJcbiAgICAgICAgICAgIHNldHRpbmdzW051bWVyaWNQYXJhbWV0ZXJzLkFGS1RpbWVvdXRTZWNzXSA6XHJcbiAgICAgICAgICAgIDEyMCwgLyp2YWx1ZSovIHVzZVVybFBhcmFtcykpO1xyXG4gICAgICAgIHRoaXMubnVtZXJpY1BhcmFtZXRlcnMuc2V0KE51bWVyaWNQYXJhbWV0ZXJzLkFGS0NvdW50ZG93blNlY3MsIG5ldyBfU2V0dGluZ051bWJlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fLlNldHRpbmdOdW1iZXIoTnVtZXJpY1BhcmFtZXRlcnMuQUZLQ291bnRkb3duU2VjcywgJ0FGSyBjb3VudGRvd24nLCAnVGhlIHRpbWUgKGluIHNlY29uZHMpIGZvciBhIHVzZXIgdG8gcmVzcG9uZCBiZWZvcmUgdGhlIHN0cmVhbSBpcyBlbmRlZCBhZnRlciBhbiBBRksgdGltZW91dC4nLCAxMCAvKm1pbiovLCBudWxsIC8qbWF4Ki8sIDEwIC8qdmFsdWUqLywgdXNlVXJsUGFyYW1zKSk7XHJcbiAgICAgICAgdGhpcy5udW1lcmljUGFyYW1ldGVycy5zZXQoTnVtZXJpY1BhcmFtZXRlcnMuTWF4UmVjb25uZWN0QXR0ZW1wdHMsIG5ldyBfU2V0dGluZ051bWJlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fLlNldHRpbmdOdW1iZXIoTnVtZXJpY1BhcmFtZXRlcnMuTWF4UmVjb25uZWN0QXR0ZW1wdHMsICdNYXggUmVjb25uZWN0cycsICdNYXhpbXVtIG51bWJlciBvZiByZWNvbm5lY3RzIHRoZSBhcHBsaWNhdGlvbiB3aWxsIGF0dGVtcHQgd2hlbiBhIHN0cmVhbWVyIGRpc2Nvbm5lY3RzLicsIDAgLyptaW4qLywgOTk5IC8qbWF4Ki8sIHNldHRpbmdzICYmIHNldHRpbmdzLmhhc093blByb3BlcnR5KE51bWVyaWNQYXJhbWV0ZXJzLk1heFJlY29ubmVjdEF0dGVtcHRzKSA/XHJcbiAgICAgICAgICAgIHNldHRpbmdzW051bWVyaWNQYXJhbWV0ZXJzLk1heFJlY29ubmVjdEF0dGVtcHRzXSA6XHJcbiAgICAgICAgICAgIDMsIC8qdmFsdWUqLyB1c2VVcmxQYXJhbXMpKTtcclxuICAgICAgICB0aGlzLm51bWVyaWNQYXJhbWV0ZXJzLnNldChOdW1lcmljUGFyYW1ldGVycy5NaW5RUCwgbmV3IF9TZXR0aW5nTnVtYmVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18uU2V0dGluZ051bWJlcihOdW1lcmljUGFyYW1ldGVycy5NaW5RUCwgJ01pbiBRUCcsICdUaGUgbG93ZXIgYm91bmQgZm9yIHRoZSBxdWFudGl6YXRpb24gcGFyYW1ldGVyIChRUCkgb2YgdGhlIGVuY29kZXIuIDAgPSBCZXN0IHF1YWxpdHksIDUxID0gd29yc3QgcXVhbGl0eS4nLCAwIC8qbWluKi8sIDUxIC8qbWF4Ki8sIHNldHRpbmdzICYmIHNldHRpbmdzLmhhc093blByb3BlcnR5KE51bWVyaWNQYXJhbWV0ZXJzLk1pblFQKSA/XHJcbiAgICAgICAgICAgIHNldHRpbmdzW051bWVyaWNQYXJhbWV0ZXJzLk1pblFQXSA6XHJcbiAgICAgICAgICAgIDAsIC8qdmFsdWUqLyB1c2VVcmxQYXJhbXMpKTtcclxuICAgICAgICB0aGlzLm51bWVyaWNQYXJhbWV0ZXJzLnNldChOdW1lcmljUGFyYW1ldGVycy5NYXhRUCwgbmV3IF9TZXR0aW5nTnVtYmVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18uU2V0dGluZ051bWJlcihOdW1lcmljUGFyYW1ldGVycy5NYXhRUCwgJ01heCBRUCcsICdUaGUgdXBwZXIgYm91bmQgZm9yIHRoZSBxdWFudGl6YXRpb24gcGFyYW1ldGVyIChRUCkgb2YgdGhlIGVuY29kZXIuIDAgPSBCZXN0IHF1YWxpdHksIDUxID0gd29yc3QgcXVhbGl0eS4nLCAwIC8qbWluKi8sIDUxIC8qbWF4Ki8sIHNldHRpbmdzICYmIHNldHRpbmdzLmhhc093blByb3BlcnR5KE51bWVyaWNQYXJhbWV0ZXJzLk1heFFQKSA/XHJcbiAgICAgICAgICAgIHNldHRpbmdzW051bWVyaWNQYXJhbWV0ZXJzLk1heFFQXSA6XHJcbiAgICAgICAgICAgIDUxLCAvKnZhbHVlKi8gdXNlVXJsUGFyYW1zKSk7XHJcbiAgICAgICAgdGhpcy5udW1lcmljUGFyYW1ldGVycy5zZXQoTnVtZXJpY1BhcmFtZXRlcnMuV2ViUlRDRlBTLCBuZXcgX1NldHRpbmdOdW1iZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXy5TZXR0aW5nTnVtYmVyKE51bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ0ZQUywgJ01heCBGUFMnLCAnVGhlIG1heGltdW0gRlBTIHRoYXQgV2ViUlRDIHdpbGwgdHJ5IHRvIHRyYW5zbWl0IGZyYW1lcyBhdC4nLCAxIC8qbWluKi8sIDk5OSAvKm1heCovLCBzZXR0aW5ncyAmJiBzZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShOdW1lcmljUGFyYW1ldGVycy5XZWJSVENGUFMpID9cclxuICAgICAgICAgICAgc2V0dGluZ3NbTnVtZXJpY1BhcmFtZXRlcnMuV2ViUlRDRlBTXSA6XHJcbiAgICAgICAgICAgIDYwLCAvKnZhbHVlKi8gdXNlVXJsUGFyYW1zKSk7XHJcbiAgICAgICAgdGhpcy5udW1lcmljUGFyYW1ldGVycy5zZXQoTnVtZXJpY1BhcmFtZXRlcnMuV2ViUlRDTWluQml0cmF0ZSwgbmV3IF9TZXR0aW5nTnVtYmVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18uU2V0dGluZ051bWJlcihOdW1lcmljUGFyYW1ldGVycy5XZWJSVENNaW5CaXRyYXRlLCAnTWluIEJpdHJhdGUgKGticHMpJywgJ1RoZSBtaW5pbXVtIGJpdHJhdGUgdGhhdCBXZWJSVEMgc2hvdWxkIHVzZS4nLCAwIC8qbWluKi8sIDUwMDAwMCAvKm1heCovLCBzZXR0aW5ncyAmJiBzZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShOdW1lcmljUGFyYW1ldGVycy5XZWJSVENNaW5CaXRyYXRlKSA/XHJcbiAgICAgICAgICAgIHNldHRpbmdzW051bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ01pbkJpdHJhdGVdIDpcclxuICAgICAgICAgICAgMCwgLyp2YWx1ZSovIHVzZVVybFBhcmFtcykpO1xyXG4gICAgICAgIHRoaXMubnVtZXJpY1BhcmFtZXRlcnMuc2V0KE51bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ01heEJpdHJhdGUsIG5ldyBfU2V0dGluZ051bWJlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fLlNldHRpbmdOdW1iZXIoTnVtZXJpY1BhcmFtZXRlcnMuV2ViUlRDTWF4Qml0cmF0ZSwgJ01heCBCaXRyYXRlIChrYnBzKScsICdUaGUgbWF4aW11bSBiaXRyYXRlIHRoYXQgV2ViUlRDIHNob3VsZCB1c2UuJywgMCAvKm1pbiovLCA1MDAwMDAgLyptYXgqLywgc2V0dGluZ3MgJiYgc2V0dGluZ3MuaGFzT3duUHJvcGVydHkoTnVtZXJpY1BhcmFtZXRlcnMuV2ViUlRDTWF4Qml0cmF0ZSkgP1xyXG4gICAgICAgICAgICBzZXR0aW5nc1tOdW1lcmljUGFyYW1ldGVycy5XZWJSVENNYXhCaXRyYXRlXSA6XHJcbiAgICAgICAgICAgIDAsIC8qdmFsdWUqLyB1c2VVcmxQYXJhbXMpKTtcclxuICAgICAgICB0aGlzLm51bWVyaWNQYXJhbWV0ZXJzLnNldChOdW1lcmljUGFyYW1ldGVycy5TdHJlYW1lckF1dG9Kb2luSW50ZXJ2YWwsIG5ldyBfU2V0dGluZ051bWJlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fLlNldHRpbmdOdW1iZXIoTnVtZXJpY1BhcmFtZXRlcnMuU3RyZWFtZXJBdXRvSm9pbkludGVydmFsLCAnU3RyZWFtZXIgQXV0byBKb2luIEludGVydmFsIChtcyknLCAnRGVsYXkgYmV0d2VlbiByZXRyaWVzIHdoZW4gd2FpdGluZyBmb3IgYW4gYXZhaWxhYmxlIHN0cmVhbWVyLicsIDUwMCAvKm1pbiovLCA5MDAwMDAgLyptYXgqLywgc2V0dGluZ3MgJiYgc2V0dGluZ3MuaGFzT3duUHJvcGVydHkoTnVtZXJpY1BhcmFtZXRlcnMuU3RyZWFtZXJBdXRvSm9pbkludGVydmFsKSA/XHJcbiAgICAgICAgICAgIHNldHRpbmdzW051bWVyaWNQYXJhbWV0ZXJzLlN0cmVhbWVyQXV0b0pvaW5JbnRlcnZhbF0gOlxyXG4gICAgICAgICAgICAzMDAwLCAvKnZhbHVlKi8gdXNlVXJsUGFyYW1zKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFkZCBhIGNhbGxiYWNrIHRvIGZpcmUgd2hlbiB0aGUgbnVtZXJpYyBzZXR0aW5nIGlzIHRvZ2dsZWQuXHJcbiAgICAgKiBAcGFyYW0gaWQgVGhlIGlkIG9mIHRoZSBmbGFnLlxyXG4gICAgICogQHBhcmFtIG9uQ2hhbmdlZExpc3RlbmVyIFRoZSBjYWxsYmFjayB0byBmaXJlIHdoZW4gdGhlIG51bWVyaWMgdmFsdWUgY2hhbmdlcy5cclxuICAgICAqL1xyXG4gICAgX2FkZE9uTnVtZXJpY1NldHRpbmdDaGFuZ2VkTGlzdGVuZXIoaWQsIG9uQ2hhbmdlZExpc3RlbmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubnVtZXJpY1BhcmFtZXRlcnMuaGFzKGlkKSkge1xyXG4gICAgICAgICAgICB0aGlzLm51bWVyaWNQYXJhbWV0ZXJzXHJcbiAgICAgICAgICAgICAgICAuZ2V0KGlkKVxyXG4gICAgICAgICAgICAgICAgLmFkZE9uQ2hhbmdlZExpc3RlbmVyKG9uQ2hhbmdlZExpc3RlbmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBfYWRkT25PcHRpb25TZXR0aW5nQ2hhbmdlZExpc3RlbmVyKGlkLCBvbkNoYW5nZWRMaXN0ZW5lcikge1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvblBhcmFtZXRlcnMuaGFzKGlkKSkge1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvblBhcmFtZXRlcnNcclxuICAgICAgICAgICAgICAgIC5nZXQoaWQpXHJcbiAgICAgICAgICAgICAgICAuYWRkT25DaGFuZ2VkTGlzdGVuZXIob25DaGFuZ2VkTGlzdGVuZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGlkIFRoZSBpZCBvZiB0aGUgbnVtZXJpYyBzZXR0aW5nIHdlIGFyZSBpbnRlcmVzdGVkIGluIGdldHRpbmcgYSB2YWx1ZSBmb3IuXHJcbiAgICAgKiBAcmV0dXJucyBUaGUgbnVtZXJpYyB2YWx1ZSBzdG9yZWQgaW4gdGhlIHBhcmFtZXRlciB3aXRoIHRoZSBwYXNzZWQgaWQuXHJcbiAgICAgKi9cclxuICAgIGdldE51bWVyaWNTZXR0aW5nVmFsdWUoaWQpIHtcclxuICAgICAgICBpZiAodGhpcy5udW1lcmljUGFyYW1ldGVycy5oYXMoaWQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bWVyaWNQYXJhbWV0ZXJzLmdldChpZCkubnVtYmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGVyZSBpcyBubyBudW1lcmljIHNldHRpbmcgd2l0aCB0aGUgaWQgb2YgJHtpZH1gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBpZCBUaGUgaWQgb2YgdGhlIHRleHQgc2V0dGluZyB3ZSBhcmUgaW50ZXJlc3RlZCBpbiBnZXR0aW5nIGEgdmFsdWUgZm9yLlxyXG4gICAgICogQHJldHVybnMgVGhlIHRleHQgdmFsdWUgc3RvcmVkIGluIHRoZSBwYXJhbWV0ZXIgd2l0aCB0aGUgcGFzc2VkIGlkLlxyXG4gICAgICovXHJcbiAgICBnZXRUZXh0U2V0dGluZ1ZhbHVlKGlkKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudGV4dFBhcmFtZXRlcnMuaGFzKGlkKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50ZXh0UGFyYW1ldGVycy5nZXQoaWQpLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGVyZSBpcyBubyBudW1lcmljIHNldHRpbmcgd2l0aCB0aGUgaWQgb2YgJHtpZH1gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldCBudW1iZXIgaW4gdGhlIHNldHRpbmcuXHJcbiAgICAgKiBAcGFyYW0gaWQgVGhlIGlkIG9mIHRoZSBudW1lcmljIHNldHRpbmcgd2UgYXJlIGludGVyZXN0ZWQgaW4uXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIG51bWVyaWMgdmFsdWUgdG8gc2V0LlxyXG4gICAgICovXHJcbiAgICBzZXROdW1lcmljU2V0dGluZyhpZCwgdmFsdWUpIHtcclxuICAgICAgICBpZiAodGhpcy5udW1lcmljUGFyYW1ldGVycy5oYXMoaWQpKSB7XHJcbiAgICAgICAgICAgIHRoaXMubnVtZXJpY1BhcmFtZXRlcnMuZ2V0KGlkKS5udW1iZXIgPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlcmUgaXMgbm8gbnVtZXJpYyBzZXR0aW5nIHdpdGggdGhlIGlkIG9mICR7aWR9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgYSBjYWxsYmFjayB0byBmaXJlIHdoZW4gdGhlIGZsYWcgaXMgdG9nZ2xlZC5cclxuICAgICAqIEBwYXJhbSBpZCBUaGUgaWQgb2YgdGhlIGZsYWcuXHJcbiAgICAgKiBAcGFyYW0gb25DaGFuZ2VMaXN0ZW5lciBUaGUgY2FsbGJhY2sgdG8gZmlyZSB3aGVuIHRoZSB2YWx1ZSBjaGFuZ2VzLlxyXG4gICAgICovXHJcbiAgICBfYWRkT25TZXR0aW5nQ2hhbmdlZExpc3RlbmVyKGlkLCBvbkNoYW5nZUxpc3RlbmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZmxhZ3MuaGFzKGlkKSkge1xyXG4gICAgICAgICAgICB0aGlzLmZsYWdzLmdldChpZCkub25DaGFuZ2UgPSBvbkNoYW5nZUxpc3RlbmVyO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkIGEgY2FsbGJhY2sgdG8gZmlyZSB3aGVuIHRoZSB0ZXh0IGlzIGNoYW5nZWQuXHJcbiAgICAgKiBAcGFyYW0gaWQgVGhlIGlkIG9mIHRoZSBmbGFnLlxyXG4gICAgICogQHBhcmFtIG9uQ2hhbmdlTGlzdGVuZXIgVGhlIGNhbGxiYWNrIHRvIGZpcmUgd2hlbiB0aGUgdmFsdWUgY2hhbmdlcy5cclxuICAgICAqL1xyXG4gICAgX2FkZE9uVGV4dFNldHRpbmdDaGFuZ2VkTGlzdGVuZXIoaWQsIG9uQ2hhbmdlTGlzdGVuZXIpIHtcclxuICAgICAgICBpZiAodGhpcy50ZXh0UGFyYW1ldGVycy5oYXMoaWQpKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGV4dFBhcmFtZXRlcnMuZ2V0KGlkKS5vbkNoYW5nZSA9IG9uQ2hhbmdlTGlzdGVuZXI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIG9wdGlvbiB3aGljaCBoYXMgdGhlIGdpdmVuIGlkLlxyXG4gICAgICogQHBhcmFtIGlkIFRoZSBpZCBvZiB0aGUgb3B0aW9uLlxyXG4gICAgICogQHJldHVybnMgVGhlIFNldHRpbmdPcHRpb24gb2JqZWN0IG1hdGNoaW5nIGlkXHJcbiAgICAgKi9cclxuICAgIGdldFNldHRpbmdPcHRpb24oaWQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25QYXJhbWV0ZXJzLmdldChpZCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgdmFsdWUgb2YgdGhlIGNvbmZpZ3VyYXRpb24gZmxhZyB3aGljaCBoYXMgdGhlIGdpdmVuIGlkLlxyXG4gICAgICogQHBhcmFtIGlkIFRoZSB1bmlxdWUgaWQgZm9yIHRoZSBmbGFnLlxyXG4gICAgICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgZmxhZyBpcyBlbmFibGVkLlxyXG4gICAgICovXHJcbiAgICBpc0ZsYWdFbmFibGVkKGlkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmxhZ3MuZ2V0KGlkKS5mbGFnO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgZmxhZyB0byBiZSBlbmFibGVkL2Rpc2FibGVkLlxyXG4gICAgICogQHBhcmFtIGlkIFRoZSBpZCBvZiB0aGUgZmxhZyB0byB0b2dnbGUuXHJcbiAgICAgKiBAcGFyYW0gZmxhZ0VuYWJsZWQgVHJ1ZSBpZiB0aGUgZmxhZyBzaG91bGQgYmUgZW5hYmxlZC5cclxuICAgICAqL1xyXG4gICAgc2V0RmxhZ0VuYWJsZWQoaWQsIGZsYWdFbmFibGVkKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmZsYWdzLmhhcyhpZCkpIHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5Mb2dnZXIuV2FybmluZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBDYW5ub3QgdG9nZ2xlIGZsYWcgY2FsbGVkICR7aWR9IC0gaXQgZG9lcyBub3QgZXhpc3QgaW4gdGhlIENvbmZpZy5mbGFncyBtYXAuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmZsYWdzLmdldChpZCkuZmxhZyA9IGZsYWdFbmFibGVkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRoZSB0ZXh0IHNldHRpbmcuXHJcbiAgICAgKiBAcGFyYW0gaWQgVGhlIGlkIG9mIHRoZSBzZXR0aW5nXHJcbiAgICAgKiBAcGFyYW0gc2V0dGluZ1ZhbHVlIFRoZSB2YWx1ZSB0byBzZXQgaW4gdGhlIHNldHRpbmcuXHJcbiAgICAgKi9cclxuICAgIHNldFRleHRTZXR0aW5nKGlkLCBzZXR0aW5nVmFsdWUpIHtcclxuICAgICAgICBpZiAoIXRoaXMudGV4dFBhcmFtZXRlcnMuaGFzKGlkKSkge1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLkxvZ2dlci5XYXJuaW5nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYENhbm5vdCBzZXQgdGV4dCBzZXR0aW5nIGNhbGxlZCAke2lkfSAtIGl0IGRvZXMgbm90IGV4aXN0IGluIHRoZSBDb25maWcudGV4dFBhcmFtZXRlcnMgbWFwLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy50ZXh0UGFyYW1ldGVycy5nZXQoaWQpLnRleHQgPSBzZXR0aW5nVmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIG9wdGlvbiBzZXR0aW5nIGxpc3Qgb2Ygb3B0aW9ucy5cclxuICAgICAqIEBwYXJhbSBpZCBUaGUgaWQgb2YgdGhlIHNldHRpbmdcclxuICAgICAqIEBwYXJhbSBzZXR0aW5nT3B0aW9ucyBUaGUgdmFsdWVzIHRoZSBzZXR0aW5nIGNvdWxkIHRha2VcclxuICAgICAqL1xyXG4gICAgc2V0T3B0aW9uU2V0dGluZ09wdGlvbnMoaWQsIHNldHRpbmdPcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvblBhcmFtZXRlcnMuaGFzKGlkKSkge1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLkxvZ2dlci5XYXJuaW5nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYENhbm5vdCBzZXQgdGV4dCBzZXR0aW5nIGNhbGxlZCAke2lkfSAtIGl0IGRvZXMgbm90IGV4aXN0IGluIHRoZSBDb25maWcub3B0aW9uUGFyYW1ldGVycyBtYXAuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvblBhcmFtZXRlcnMuZ2V0KGlkKS5vcHRpb25zID0gc2V0dGluZ09wdGlvbnM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgb3B0aW9uIGVudW0gc2V0dGluZ3Mgc2VsZWN0ZWQgb3B0aW9uLlxyXG4gICAgICogQHBhcmFtIGlkIFRoZSBpZCBvZiB0aGUgc2V0dGluZ1xyXG4gICAgICogQHBhcmFtIHNldHRpbmdPcHRpb25zIFRoZSB2YWx1ZSB0byBzZWxlY3Qgb3V0IG9mIGFsbCB0aGUgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBzZXRPcHRpb25TZXR0aW5nVmFsdWUoaWQsIHNldHRpbmdWYWx1ZSkge1xyXG4gICAgICAgIGlmICghdGhpcy5vcHRpb25QYXJhbWV0ZXJzLmhhcyhpZCkpIHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5Mb2dnZXIuV2FybmluZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBDYW5ub3Qgc2V0IHRleHQgc2V0dGluZyBjYWxsZWQgJHtpZH0gLSBpdCBkb2VzIG5vdCBleGlzdCBpbiB0aGUgQ29uZmlnLmVudW1QYXJhbWV0ZXJzIG1hcC5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvblNldHRpbmcgPSB0aGlzLm9wdGlvblBhcmFtZXRlcnMuZ2V0KGlkKTtcclxuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdPcHRpb25zID0gb3B0aW9uU2V0dGluZy5vcHRpb25zO1xyXG4gICAgICAgICAgICBpZiAoIWV4aXN0aW5nT3B0aW9ucy5pbmNsdWRlcyhzZXR0aW5nVmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBleGlzdGluZ09wdGlvbnMucHVzaChzZXR0aW5nVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgb3B0aW9uU2V0dGluZy5vcHRpb25zID0gZXhpc3RpbmdPcHRpb25zO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wdGlvblNldHRpbmcuc2VsZWN0ZWQgPSBzZXR0aW5nVmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIGxhYmVsIGZvciB0aGUgZmxhZy5cclxuICAgICAqIEBwYXJhbSBpZCBUaGUgaWQgb2YgdGhlIGZsYWcuXHJcbiAgICAgKiBAcGFyYW0gbGFiZWwgVGhlIG5ldyBsYWJlbCB0byB1c2UgZm9yIHRoZSBmbGFnLlxyXG4gICAgICovXHJcbiAgICBzZXRGbGFnTGFiZWwoaWQsIGxhYmVsKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmZsYWdzLmhhcyhpZCkpIHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5Mb2dnZXIuV2FybmluZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBDYW5ub3Qgc2V0IGxhYmVsIGZvciBmbGFnIGNhbGxlZCAke2lkfSAtIGl0IGRvZXMgbm90IGV4aXN0IGluIHRoZSBDb25maWcuZmxhZ3MgbWFwLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5mbGFncy5nZXQoaWQpLmxhYmVsID0gbGFiZWw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgYSBzdWJzZXQgb2YgYWxsIHNldHRpbmdzIGluIG9uZSBmdW5jdGlvbiBjYWxsLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBzZXR0aW5ncyBBIChwYXJ0aWFsKSBsaXN0IG9mIHNldHRpbmdzIHRvIHNldFxyXG4gICAgICovXHJcbiAgICBzZXRTZXR0aW5ncyhzZXR0aW5ncykge1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHNldHRpbmdzKSkge1xyXG4gICAgICAgICAgICBpZiAoaXNGbGFnSWQoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRGbGFnRW5hYmxlZChrZXksIHNldHRpbmdzW2tleV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzTnVtZXJpY0lkKGtleSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0TnVtZXJpY1NldHRpbmcoa2V5LCBzZXR0aW5nc1trZXldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChpc1RleHRJZChrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFRleHRTZXR0aW5nKGtleSwgc2V0dGluZ3Nba2V5XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNPcHRpb25JZChrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldE9wdGlvblNldHRpbmdWYWx1ZShrZXksIHNldHRpbmdzW2tleV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYWxsIHNldHRpbmdzXHJcbiAgICAgKiBAcmV0dXJucyBBbGwgc2V0dGluZyB2YWx1ZXMgYXMgYW4gb2JqZWN0IHdpdGggc2V0dGluZyBpZHMgYXMga2V5c1xyXG4gICAgICovXHJcbiAgICBnZXRTZXR0aW5ncygpIHtcclxuICAgICAgICBjb25zdCBzZXR0aW5ncyA9IHt9O1xyXG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIHRoaXMuZmxhZ3MuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgIHNldHRpbmdzW2tleV0gPSB2YWx1ZS5mbGFnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiB0aGlzLm51bWVyaWNQYXJhbWV0ZXJzLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICBzZXR0aW5nc1trZXldID0gdmFsdWUubnVtYmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiB0aGlzLnRleHRQYXJhbWV0ZXJzLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICBzZXR0aW5nc1trZXldID0gdmFsdWUudGV4dDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgdGhpcy5vcHRpb25QYXJhbWV0ZXJzLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICBzZXR0aW5nc1trZXldID0gdmFsdWUuc2VsZWN0ZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzZXR0aW5ncztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2V0IGFsbCBGbGFnIHNldHRpbmdzIGFzIGFuIGFycmF5LlxyXG4gICAgICogQHJldHVybnMgQWxsIFNldHRpbmdGbGFnIG9iamVjdHNcclxuICAgICAqL1xyXG4gICAgZ2V0RmxhZ3MoKSB7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5mbGFncy52YWx1ZXMoKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldCBhbGwgVGV4dCBzZXR0aW5ncyBhcyBhbiBhcnJheS5cclxuICAgICAqIEByZXR1cm5zIEFsbCBTZXR0aW5nVGV4dCBvYmplY3RzXHJcbiAgICAgKi9cclxuICAgIGdldFRleHRTZXR0aW5ncygpIHtcclxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnRleHRQYXJhbWV0ZXJzLnZhbHVlcygpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2V0IGFsbCBOdW1iZXIgc2V0dGluZ3MgYXMgYW4gYXJyYXkuXHJcbiAgICAgKiBAcmV0dXJucyBBbGwgU2V0dGluZ051bWJlciBvYmplY3RzXHJcbiAgICAgKi9cclxuICAgIGdldE51bWVyaWNTZXR0aW5ncygpIHtcclxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLm51bWVyaWNQYXJhbWV0ZXJzLnZhbHVlcygpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2V0IGFsbCBPcHRpb24gc2V0dGluZ3MgYXMgYW4gYXJyYXkuXHJcbiAgICAgKiBAcmV0dXJucyBBbGwgU2V0dGluZ09wdGlvbiBvYmplY3RzXHJcbiAgICAgKi9cclxuICAgIGdldE9wdGlvblNldHRpbmdzKCkge1xyXG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMub3B0aW9uUGFyYW1ldGVycy52YWx1ZXMoKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEVtaXQgZXZlbnRzIHdoZW4gc2V0dGluZ3MgY2hhbmdlLlxyXG4gICAgICogQHBhcmFtIGV2ZW50RW1pdHRlclxyXG4gICAgICovXHJcbiAgICBfcmVnaXN0ZXJPbkNoYW5nZUV2ZW50cyhldmVudEVtaXR0ZXIpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiB0aGlzLmZsYWdzLmtleXMoKSkge1xyXG4gICAgICAgICAgICBjb25zdCBmbGFnID0gdGhpcy5mbGFncy5nZXQoa2V5KTtcclxuICAgICAgICAgICAgaWYgKGZsYWcpIHtcclxuICAgICAgICAgICAgICAgIGZsYWcub25DaGFuZ2VFbWl0ID0gKG5ld1ZhbHVlKSA9PiBldmVudEVtaXR0ZXIuZGlzcGF0Y2hFdmVudChuZXcgX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18uU2V0dGluZ3NDaGFuZ2VkRXZlbnQoe1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBmbGFnLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdmbGFnJyxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbmV3VmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBmbGFnXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgdGhpcy5udW1lcmljUGFyYW1ldGVycy5rZXlzKCkpIHtcclxuICAgICAgICAgICAgY29uc3QgbnVtYmVyID0gdGhpcy5udW1lcmljUGFyYW1ldGVycy5nZXQoa2V5KTtcclxuICAgICAgICAgICAgaWYgKG51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgbnVtYmVyLm9uQ2hhbmdlRW1pdCA9IChuZXdWYWx1ZSkgPT4gZXZlbnRFbWl0dGVyLmRpc3BhdGNoRXZlbnQobmV3IF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fLlNldHRpbmdzQ2hhbmdlZEV2ZW50KHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogbnVtYmVyLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBuZXdWYWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IG51bWJlclxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHRoaXMudGV4dFBhcmFtZXRlcnMua2V5cygpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRleHQgPSB0aGlzLnRleHRQYXJhbWV0ZXJzLmdldChrZXkpO1xyXG4gICAgICAgICAgICBpZiAodGV4dCkge1xyXG4gICAgICAgICAgICAgICAgdGV4dC5vbkNoYW5nZUVtaXQgPSAobmV3VmFsdWUpID0+IGV2ZW50RW1pdHRlci5kaXNwYXRjaEV2ZW50KG5ldyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5TZXR0aW5nc0NoYW5nZWRFdmVudCh7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHRleHQuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBuZXdWYWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IHRleHRcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiB0aGlzLm9wdGlvblBhcmFtZXRlcnMua2V5cygpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbiA9IHRoaXMub3B0aW9uUGFyYW1ldGVycy5nZXQoa2V5KTtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbikge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9uLm9uQ2hhbmdlRW1pdCA9IChuZXdWYWx1ZSkgPT4gZXZlbnRFbWl0dGVyLmRpc3BhdGNoRXZlbnQobmV3IF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fLlNldHRpbmdzQ2hhbmdlZEV2ZW50KHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogb3B0aW9uLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdvcHRpb24nLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBuZXdWYWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IG9wdGlvblxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBUaGUgZW51bSBhc3NvY2lhdGVkIHdpdGggdGhlIG1vdXNlIGJlaW5nIGxvY2tlZCBvciBob3ZlcmluZ1xyXG4gKi9cclxudmFyIENvbnRyb2xTY2hlbWVUeXBlO1xyXG4oZnVuY3Rpb24gKENvbnRyb2xTY2hlbWVUeXBlKSB7XHJcbiAgICBDb250cm9sU2NoZW1lVHlwZVtDb250cm9sU2NoZW1lVHlwZVtcIkxvY2tlZE1vdXNlXCJdID0gMF0gPSBcIkxvY2tlZE1vdXNlXCI7XHJcbiAgICBDb250cm9sU2NoZW1lVHlwZVtDb250cm9sU2NoZW1lVHlwZVtcIkhvdmVyaW5nTW91c2VcIl0gPSAxXSA9IFwiSG92ZXJpbmdNb3VzZVwiO1xyXG59KShDb250cm9sU2NoZW1lVHlwZSB8fCAoQ29udHJvbFNjaGVtZVR5cGUgPSB7fSkpO1xyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvQ29uZmlnL1NldHRpbmdCYXNlLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9Db25maWcvU2V0dGluZ0Jhc2UudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlNldHRpbmdCYXNlXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFNldHRpbmdCYXNlKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4vKipcclxuICogQmFzZSBjbGFzcyBmb3IgYSBzZXR0aW5nIHRoYXQgaGFzIGEgdGV4dCBsYWJlbCBhbmQgYW4gYXJiaXRyYXJ5IHNldHRpbmcgdmFsdWUgaXQgc3RvcmVzLlxyXG4gKi9cclxuY2xhc3MgU2V0dGluZ0Jhc2Uge1xyXG4gICAgY29uc3RydWN0b3IoaWQsIGxhYmVsLCBkZXNjcmlwdGlvbiwgZGVmYXVsdFNldHRpbmdWYWx1ZSwgXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXHJcbiAgICBkZWZhdWx0T25DaGFuZ2VMaXN0ZW5lciA9ICgpID0+IHsgfSkge1xyXG4gICAgICAgIHRoaXMub25DaGFuZ2UgPSBkZWZhdWx0T25DaGFuZ2VMaXN0ZW5lcjtcclxuICAgICAgICB0aGlzLm9uQ2hhbmdlRW1pdCA9ICgpID0+IHtcclxuICAgICAgICAgICAgLyogRG8gbm90aGluZywgdG8gYmUgb3ZlcnJpZGRlbi4gKi9cclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuaWQgPSBpZDtcclxuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XHJcbiAgICAgICAgdGhpcy5sYWJlbCA9IGxhYmVsO1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSBkZWZhdWx0U2V0dGluZ1ZhbHVlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIGxhYmVsIHRleHQgZm9yIHRoZSBzZXR0aW5nLlxyXG4gICAgICogQHBhcmFtIGxhYmVsIHNldHRpbmcgbGFiZWwuXHJcbiAgICAgKi9cclxuICAgIHNldCBsYWJlbChpbkxhYmVsKSB7XHJcbiAgICAgICAgdGhpcy5fbGFiZWwgPSBpbkxhYmVsO1xyXG4gICAgICAgIHRoaXMub25DaGFuZ2VFbWl0KHRoaXMuX3ZhbHVlKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybnMgVGhlIGxhYmVsIHRleHQgZm9yIHRoZSBzZXR0aW5nLlxyXG4gICAgICovXHJcbiAgICBnZXQgbGFiZWwoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xhYmVsO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIFRoZSBzZXR0aW5nJ3MgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIGdldCB2YWx1ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZSB0aGUgc2V0dGluZydzIHN0b3JlZCB2YWx1ZS5cclxuICAgICAqIEBwYXJhbSBpblZhbHVlIFRoZSBuZXcgdmFsdWUgZm9yIHRoZSBzZXR0aW5nLlxyXG4gICAgICovXHJcbiAgICBzZXQgdmFsdWUoaW5WYWx1ZSkge1xyXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gaW5WYWx1ZTtcclxuICAgICAgICB0aGlzLm9uQ2hhbmdlKHRoaXMuX3ZhbHVlLCB0aGlzKTtcclxuICAgICAgICB0aGlzLm9uQ2hhbmdlRW1pdCh0aGlzLl92YWx1ZSk7XHJcbiAgICB9XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL0NvbmZpZy9TZXR0aW5nRmxhZy50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvQ29uZmlnL1NldHRpbmdGbGFnLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJTZXR0aW5nRmxhZ1wiOiAoKSA9PiAoLyogYmluZGluZyAqLyBTZXR0aW5nRmxhZylcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9TZXR0aW5nQmFzZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9TZXR0aW5nQmFzZSAqLyBcIi4vc3JjL0NvbmZpZy9TZXR0aW5nQmFzZS50c1wiKTtcbi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG4vKipcclxuICogQSBib29sZWFuIGZsYWcgc2V0dGluZyBvYmplY3Qgd2l0aCBhIHRleHQgbGFiZWwuXHJcbiAqL1xyXG5jbGFzcyBTZXR0aW5nRmxhZyBleHRlbmRzIF9TZXR0aW5nQmFzZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlNldHRpbmdCYXNlIHtcclxuICAgIGNvbnN0cnVjdG9yKGlkLCBsYWJlbCwgZGVzY3JpcHRpb24sIGRlZmF1bHRGbGFnVmFsdWUsIHVzZVVybFBhcmFtcywgXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXHJcbiAgICBkZWZhdWx0T25DaGFuZ2VMaXN0ZW5lciA9ICgpID0+IHsgfSkge1xyXG4gICAgICAgIHN1cGVyKGlkLCBsYWJlbCwgZGVzY3JpcHRpb24sIGRlZmF1bHRGbGFnVmFsdWUsIGRlZmF1bHRPbkNoYW5nZUxpc3RlbmVyKTtcclxuICAgICAgICBjb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xyXG4gICAgICAgIGlmICghdXNlVXJsUGFyYW1zIHx8ICF1cmxQYXJhbXMuaGFzKHRoaXMuaWQpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmxhZyA9IGRlZmF1bHRGbGFnVmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBwYXJzZSBmbGFnIGZyb20gdXJsIHBhcmFtZXRlcnNcclxuICAgICAgICAgICAgY29uc3QgdXJsUGFyYW1GbGFnID0gdGhpcy5nZXRVcmxQYXJhbUZsYWcoKTtcclxuICAgICAgICAgICAgdGhpcy5mbGFnID0gdXJsUGFyYW1GbGFnO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnVzZVVybFBhcmFtcyA9IHVzZVVybFBhcmFtcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUGFyc2UgdGhlIGZsYWcgdmFsdWUgZnJvbSB0aGUgdXJsIHBhcmFtZXRlcnMuXHJcbiAgICAgKiBAcmV0dXJucyBUcnVlIGlmIHRoZSB1cmwgcGFyYW1ldGVycyBjb250YWlucyAvP2lkLCBidXQgRmFsc2UgaWYgLz9pZD1mYWxzZVxyXG4gICAgICovXHJcbiAgICBnZXRVcmxQYXJhbUZsYWcoKSB7XHJcbiAgICAgICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcclxuICAgICAgICBpZiAodXJsUGFyYW1zLmhhcyh0aGlzLmlkKSkge1xyXG4gICAgICAgICAgICBpZiAodXJsUGFyYW1zLmdldCh0aGlzLmlkKSA9PT0gJ2ZhbHNlJyB8fFxyXG4gICAgICAgICAgICAgICAgdXJsUGFyYW1zLmdldCh0aGlzLmlkKSA9PT0gJ0ZhbHNlJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFBlcnNpc3QgdGhlIHNldHRpbmcgdmFsdWUgaW4gVVJMLlxyXG4gICAgICovXHJcbiAgICB1cGRhdGVVUkxQYXJhbXMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudXNlVXJsUGFyYW1zKSB7XHJcbiAgICAgICAgICAgIC8vIHNldCB1cmwgcGFyYW1zXHJcbiAgICAgICAgICAgIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmZsYWcgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIHVybFBhcmFtcy5zZXQodGhpcy5pZCwgJ3RydWUnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHVybFBhcmFtcy5zZXQodGhpcy5pZCwgJ2ZhbHNlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHt9LCAnJywgdXJsUGFyYW1zLnRvU3RyaW5nKCkgIT09ICcnXHJcbiAgICAgICAgICAgICAgICA/IGAke2xvY2F0aW9uLnBhdGhuYW1lfT8ke3VybFBhcmFtc31gXHJcbiAgICAgICAgICAgICAgICA6IGAke2xvY2F0aW9uLnBhdGhuYW1lfWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRW5hYmxlcyB0aGlzIGZsYWcuXHJcbiAgICAgKi9cclxuICAgIGVuYWJsZSgpIHtcclxuICAgICAgICB0aGlzLmZsYWcgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIFRoZSBzZXR0aW5nJ3MgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIGdldCBmbGFnKCkge1xyXG4gICAgICAgIHJldHVybiAhIXRoaXMudmFsdWU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZSB0aGUgc2V0dGluZydzIHN0b3JlZCB2YWx1ZS5cclxuICAgICAqIEBwYXJhbSBpblZhbHVlIFRoZSBuZXcgdmFsdWUgZm9yIHRoZSBzZXR0aW5nLlxyXG4gICAgICovXHJcbiAgICBzZXQgZmxhZyhpblZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IGluVmFsdWU7XHJcbiAgICB9XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL0NvbmZpZy9TZXR0aW5nTnVtYmVyLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL0NvbmZpZy9TZXR0aW5nTnVtYmVyLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlNldHRpbmdOdW1iZXJcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gU2V0dGluZ051bWJlcilcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9TZXR0aW5nQmFzZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9TZXR0aW5nQmFzZSAqLyBcIi4vc3JjL0NvbmZpZy9TZXR0aW5nQmFzZS50c1wiKTtcbi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG4vKipcclxuICogQSBudW1iZXIgc2V0dGluZyBvYmplY3Qgd2l0aCBhIHRleHQgbGFiZWwuIE1pbiBhbmQgbWF4IGxpbWl0IHRoZSByYW5nZSBvZiBhbGxvd2VkIHZhbHVlcy5cclxuICovXHJcbmNsYXNzIFNldHRpbmdOdW1iZXIgZXh0ZW5kcyBfU2V0dGluZ0Jhc2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5TZXR0aW5nQmFzZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihpZCwgbGFiZWwsIGRlc2NyaXB0aW9uLCBtaW4sIG1heCwgZGVmYXVsdE51bWJlciwgdXNlVXJsUGFyYW1zLCBcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cclxuICAgIGRlZmF1bHRPbkNoYW5nZUxpc3RlbmVyID0gKCkgPT4geyB9KSB7XHJcbiAgICAgICAgc3VwZXIoaWQsIGxhYmVsLCBkZXNjcmlwdGlvbiwgZGVmYXVsdE51bWJlciwgZGVmYXVsdE9uQ2hhbmdlTGlzdGVuZXIpO1xyXG4gICAgICAgIHRoaXMuX21pbiA9IG1pbjtcclxuICAgICAgICB0aGlzLl9tYXggPSBtYXg7XHJcbiAgICAgICAgLy8gYXR0ZW1wdCB0byByZWFkIHRoZSBudW1iZXIgZnJvbSB0aGUgdXJsIHBhcmFtc1xyXG4gICAgICAgIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XHJcbiAgICAgICAgaWYgKCF1c2VVcmxQYXJhbXMgfHwgIXVybFBhcmFtcy5oYXModGhpcy5pZCkpIHtcclxuICAgICAgICAgICAgdGhpcy5udW1iZXIgPSBkZWZhdWx0TnVtYmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgcGFyc2VkVmFsdWUgPSBOdW1iZXIucGFyc2VGbG9hdCh1cmxQYXJhbXMuZ2V0KHRoaXMuaWQpKTtcclxuICAgICAgICAgICAgdGhpcy5udW1iZXIgPSBOdW1iZXIuaXNOYU4ocGFyc2VkVmFsdWUpXHJcbiAgICAgICAgICAgICAgICA/IGRlZmF1bHROdW1iZXJcclxuICAgICAgICAgICAgICAgIDogcGFyc2VkVmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudXNlVXJsUGFyYW1zID0gdXNlVXJsUGFyYW1zO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBQZXJzaXN0IHRoZSBzZXR0aW5nIHZhbHVlIGluIFVSTC5cclxuICAgICAqL1xyXG4gICAgdXBkYXRlVVJMUGFyYW1zKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnVzZVVybFBhcmFtcykge1xyXG4gICAgICAgICAgICAvLyBzZXQgdXJsIHBhcmFtcyBsaWtlID9pZD1udW1iZXJcclxuICAgICAgICAgICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcclxuICAgICAgICAgICAgdXJsUGFyYW1zLnNldCh0aGlzLmlkLCB0aGlzLm51bWJlci50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHt9LCAnJywgdXJsUGFyYW1zLnRvU3RyaW5nKCkgIT09ICcnXHJcbiAgICAgICAgICAgICAgICA/IGAke2xvY2F0aW9uLnBhdGhuYW1lfT8ke3VybFBhcmFtc31gXHJcbiAgICAgICAgICAgICAgICA6IGAke2xvY2F0aW9uLnBhdGhuYW1lfWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRoZSBudW1iZXIgdmFsdWUgKHdpbGwgYmUgY2xhbXBlZCB3aXRoaW4gcmFuZ2UpLlxyXG4gICAgICovXHJcbiAgICBzZXQgbnVtYmVyKG5ld051bWJlcikge1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLmNsYW1wKG5ld051bWJlcik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm5zIFRoZSBudW1iZXIgc3RvcmVkLlxyXG4gICAgICovXHJcbiAgICBnZXQgbnVtYmVyKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDbGFtcHMgYSBudW1iZXIgYmV0d2VlbiB0aGUgbWluIGFuZCBtYXggdmFsdWVzIChpbmNsdXNpdmUpLlxyXG4gICAgICogQHBhcmFtIGluTnVtYmVyIFRoZSBudW1iZXIgdG8gY2xhbXAuXHJcbiAgICAgKiBAcmV0dXJucyBUaGUgY2xhbXBlZCBudW1iZXIuXHJcbiAgICAgKi9cclxuICAgIGNsYW1wKGluTnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX21pbiA9PSBudWxsICYmIHRoaXMuX21heCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpbk51bWJlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5fbWluID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGgubWluKHRoaXMuX21heCwgaW5OdW1iZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLl9tYXggPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5tYXgodGhpcy5fbWluLCBpbk51bWJlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5tYXgoTWF0aC5taW4odGhpcy5fbWF4LCBpbk51bWJlciksIHRoaXMuX21pbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBtaW5pbXVtIHZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyBUaGUgbWluaW11bSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBnZXQgbWluKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9taW47XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIG1heGltdW0gdmFsdWVcclxuICAgICAqIEByZXR1cm5zIFRoZSBtYXhpbXVtIHZhbHVlXHJcbiAgICAgKi9cclxuICAgIGdldCBtYXgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21heDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkIGEgY2hhbmdlIGxpc3RlbmVyIHRvIHRoZSBudW1iZXIgb2JqZWN0LlxyXG4gICAgICovXHJcbiAgICBhZGRPbkNoYW5nZWRMaXN0ZW5lcihvbkNoYW5nZWRGdW5jKSB7XHJcbiAgICAgICAgdGhpcy5vbkNoYW5nZSA9IG9uQ2hhbmdlZEZ1bmM7XHJcbiAgICB9XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL0NvbmZpZy9TZXR0aW5nT3B0aW9uLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL0NvbmZpZy9TZXR0aW5nT3B0aW9uLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlNldHRpbmdPcHRpb25cIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gU2V0dGluZ09wdGlvbilcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9TZXR0aW5nQmFzZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9TZXR0aW5nQmFzZSAqLyBcIi4vc3JjL0NvbmZpZy9TZXR0aW5nQmFzZS50c1wiKTtcbi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG4vKipcclxuICogQW4gT3B0aW9uIHNldHRpbmcgb2JqZWN0IHdpdGggYSB0ZXh0IGxhYmVsLiBBbGxvd3MgeW91IHRvIHNwZWNpZnkgYW4gYXJyYXkgb2Ygb3B0aW9ucyBhbmQgc2VsZWN0IG9uZSBvZiB0aGVtLlxyXG4gKi9cclxuY2xhc3MgU2V0dGluZ09wdGlvbiBleHRlbmRzIF9TZXR0aW5nQmFzZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlNldHRpbmdCYXNlIHtcclxuICAgIGNvbnN0cnVjdG9yKGlkLCBsYWJlbCwgZGVzY3JpcHRpb24sIGRlZmF1bHRUZXh0VmFsdWUsIG9wdGlvbnMsIHVzZVVybFBhcmFtcywgXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXHJcbiAgICBkZWZhdWx0T25DaGFuZ2VMaXN0ZW5lciA9ICgpID0+IHsgfSkge1xyXG4gICAgICAgIHN1cGVyKGlkLCBsYWJlbCwgZGVzY3JpcHRpb24sIGRlZmF1bHRUZXh0VmFsdWUsIGRlZmF1bHRPbkNoYW5nZUxpc3RlbmVyKTtcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgICAgIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XHJcbiAgICAgICAgY29uc3Qgc3RyaW5nVG9NYXRjaCA9IHVzZVVybFBhcmFtcyAmJiB1cmxQYXJhbXMuaGFzKHRoaXMuaWQpXHJcbiAgICAgICAgICAgID8gdGhpcy5nZXRVcmxQYXJhbVRleHQoKVxyXG4gICAgICAgICAgICA6IGRlZmF1bHRUZXh0VmFsdWU7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZCA9IHN0cmluZ1RvTWF0Y2g7XHJcbiAgICAgICAgdGhpcy51c2VVcmxQYXJhbXMgPSB1c2VVcmxQYXJhbXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFBhcnNlIHRoZSB0ZXh0IHZhbHVlIGZyb20gdGhlIHVybCBwYXJhbWV0ZXJzLlxyXG4gICAgICogQHJldHVybnMgVGhlIHRleHQgdmFsdWUgcGFyc2VkIGZyb20gdGhlIHVybCBpZiB0aGUgdXJsIHBhcmFtZXRlcnMgY29udGFpbnMgLz9pZD12YWx1ZSwgYnV0IGVtcHR5IHN0cmluZyBpZiBqdXN0IC8/aWQgb3Igbm8gdXJsIHBhcmFtIGZvdW5kLlxyXG4gICAgICovXHJcbiAgICBnZXRVcmxQYXJhbVRleHQoKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XHJcbiAgICAgICAgaWYgKHVybFBhcmFtcy5oYXModGhpcy5pZCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChfYSA9IHVybFBhcmFtcy5nZXQodGhpcy5pZCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFBlcnNpc3QgdGhlIHNldHRpbmcgdmFsdWUgaW4gVVJMLlxyXG4gICAgICovXHJcbiAgICB1cGRhdGVVUkxQYXJhbXMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudXNlVXJsUGFyYW1zKSB7XHJcbiAgICAgICAgICAgIC8vIHNldCB1cmwgcGFyYW1zXHJcbiAgICAgICAgICAgIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XHJcbiAgICAgICAgICAgIHVybFBhcmFtcy5zZXQodGhpcy5pZCwgdGhpcy5zZWxlY3RlZCk7XHJcbiAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7fSwgJycsIHVybFBhcmFtcy50b1N0cmluZygpICE9PSAnJ1xyXG4gICAgICAgICAgICAgICAgPyBgJHtsb2NhdGlvbi5wYXRobmFtZX0/JHt1cmxQYXJhbXN9YFxyXG4gICAgICAgICAgICAgICAgOiBgJHtsb2NhdGlvbi5wYXRobmFtZX1gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFkZCBhIGNoYW5nZSBsaXN0ZW5lciB0byB0aGUgc2VsZWN0IGVsZW1lbnQuXHJcbiAgICAgKi9cclxuICAgIGFkZE9uQ2hhbmdlZExpc3RlbmVyKG9uQ2hhbmdlZEZ1bmMpIHtcclxuICAgICAgICB0aGlzLm9uQ2hhbmdlID0gb25DaGFuZ2VkRnVuYztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybnMgQWxsIGF2YWlsYWJsZSBvcHRpb25zIGFzIGFuIGFycmF5XHJcbiAgICAgKi9cclxuICAgIGdldCBvcHRpb25zKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgb3B0aW9uc1xyXG4gICAgICogQHBhcmFtIHZhbHVlcyBBcnJheSBvZiBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIHNldCBvcHRpb25zKHZhbHVlcykge1xyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSB2YWx1ZXM7XHJcbiAgICAgICAgdGhpcy5vbkNoYW5nZUVtaXQodGhpcy5zZWxlY3RlZCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm5zIFNlbGVjdGVkIG9wdGlvbiBhcyBhIHN0cmluZ1xyXG4gICAgICovXHJcbiAgICBnZXQgc2VsZWN0ZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldCBzZWxlY3RlZCBvcHRpb24gaWYgaXQgbWF0Y2hlcyBvbmUgb2YgdGhlIGF2YWlsYWJsZSBvcHRpb25zXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgU2VsZWN0ZWQgb3B0aW9uXHJcbiAgICAgKi9cclxuICAgIHNldCBzZWxlY3RlZCh2YWx1ZSkge1xyXG4gICAgICAgIC8vIEEgdXNlciBtYXkgbm90IHNwZWNpZnkgdGhlIGZ1bGwgcG9zc2libGUgdmFsdWUgc28gd2UgaW5zdGVhZCB1c2UgdGhlIGNsb3Nlc3QgbWF0Y2guXHJcbiAgICAgICAgLy8gZWcgP3h4eD1IMjY0IHdvdWxkIHNlbGVjdCAnSDI2NCBsZXZlbC1hc3ltbWV0cnktYWxsb3dlZD0xO3BhY2tldGl6YXRpb24tbW9kZT0xO3Byb2ZpbGUtbGV2ZWwtaWQ9NDIwMDFmJ1xyXG4gICAgICAgIGxldCBmaWx0ZXJlZExpc3QgPSB0aGlzLm9wdGlvbnMuZmlsdGVyKChvcHRpb24pID0+IG9wdGlvbi5pbmRleE9mKHZhbHVlKSAhPT0gLTEpO1xyXG4gICAgICAgIGlmIChmaWx0ZXJlZExpc3QubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBmaWx0ZXJlZExpc3RbMF07XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQSB1c2VyIGhhcyBzcGVjaWZpZWQgYSBjb2RlYyB3aXRoIGEgZm10cCBzdHJpbmcgYnV0IHRoaXMgY29kZWMgKyBmbXRwIGxpbmUgaXNuJ3QgYXZhaWxhYmxlLlxyXG4gICAgICAgIC8vIGluIHRoYXQgY2FzZSwganVzdCB1c2UgdGhlIGNvZGVjXHJcbiAgICAgICAgZmlsdGVyZWRMaXN0ID0gdGhpcy5vcHRpb25zLmZpbHRlcigob3B0aW9uKSA9PiBvcHRpb24uaW5kZXhPZih2YWx1ZS5zcGxpdCgnICcpWzBdKSAhPT0gLTEpO1xyXG4gICAgICAgIGlmIChmaWx0ZXJlZExpc3QubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBmaWx0ZXJlZExpc3RbMF07XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL0NvbmZpZy9TZXR0aW5nVGV4dC50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvQ29uZmlnL1NldHRpbmdUZXh0LnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJTZXR0aW5nVGV4dFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBTZXR0aW5nVGV4dClcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9TZXR0aW5nQmFzZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9TZXR0aW5nQmFzZSAqLyBcIi4vc3JjL0NvbmZpZy9TZXR0aW5nQmFzZS50c1wiKTtcbi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG4vKipcclxuICogQSB0ZXh0IHNldHRpbmcgb2JqZWN0IHdpdGggYSB0ZXh0IGxhYmVsLlxyXG4gKi9cclxuY2xhc3MgU2V0dGluZ1RleHQgZXh0ZW5kcyBfU2V0dGluZ0Jhc2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5TZXR0aW5nQmFzZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihpZCwgbGFiZWwsIGRlc2NyaXB0aW9uLCBkZWZhdWx0VGV4dFZhbHVlLCB1c2VVcmxQYXJhbXMsIFxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxyXG4gICAgZGVmYXVsdE9uQ2hhbmdlTGlzdGVuZXIgPSAoKSA9PiB7IH0pIHtcclxuICAgICAgICBzdXBlcihpZCwgbGFiZWwsIGRlc2NyaXB0aW9uLCBkZWZhdWx0VGV4dFZhbHVlLCBkZWZhdWx0T25DaGFuZ2VMaXN0ZW5lcik7XHJcbiAgICAgICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcclxuICAgICAgICBpZiAoIXVzZVVybFBhcmFtcyB8fCAhdXJsUGFyYW1zLmhhcyh0aGlzLmlkKSkge1xyXG4gICAgICAgICAgICB0aGlzLnRleHQgPSBkZWZhdWx0VGV4dFZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gcGFyc2UgZmxhZyBmcm9tIHVybCBwYXJhbWV0ZXJzXHJcbiAgICAgICAgICAgIGNvbnN0IHVybFBhcmFtRmxhZyA9IHRoaXMuZ2V0VXJsUGFyYW1UZXh0KCk7XHJcbiAgICAgICAgICAgIHRoaXMudGV4dCA9IHVybFBhcmFtRmxhZztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy51c2VVcmxQYXJhbXMgPSB1c2VVcmxQYXJhbXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFBhcnNlIHRoZSB0ZXh0IHZhbHVlIGZyb20gdGhlIHVybCBwYXJhbWV0ZXJzLlxyXG4gICAgICogQHJldHVybnMgVGhlIHRleHQgdmFsdWUgcGFyc2VkIGZyb20gdGhlIHVybCBpZiB0aGUgdXJsIHBhcmFtZXRlcnMgY29udGFpbnMgLz9pZD12YWx1ZSwgYnV0IGVtcHR5IHN0cmluZyBpZiBqdXN0IC8/aWQgb3Igbm8gdXJsIHBhcmFtIGZvdW5kLlxyXG4gICAgICovXHJcbiAgICBnZXRVcmxQYXJhbVRleHQoKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XHJcbiAgICAgICAgaWYgKHVybFBhcmFtcy5oYXModGhpcy5pZCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChfYSA9IHVybFBhcmFtcy5nZXQodGhpcy5pZCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFBlcnNpc3QgdGhlIHNldHRpbmcgdmFsdWUgaW4gVVJMLlxyXG4gICAgICovXHJcbiAgICB1cGRhdGVVUkxQYXJhbXMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudXNlVXJsUGFyYW1zKSB7XHJcbiAgICAgICAgICAgIC8vIHNldCB1cmwgcGFyYW1zXHJcbiAgICAgICAgICAgIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XHJcbiAgICAgICAgICAgIHVybFBhcmFtcy5zZXQodGhpcy5pZCwgdGhpcy50ZXh0KTtcclxuICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHt9LCAnJywgdXJsUGFyYW1zLnRvU3RyaW5nKCkgIT09ICcnXHJcbiAgICAgICAgICAgICAgICA/IGAke2xvY2F0aW9uLnBhdGhuYW1lfT8ke3VybFBhcmFtc31gXHJcbiAgICAgICAgICAgICAgICA6IGAke2xvY2F0aW9uLnBhdGhuYW1lfWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiBUaGUgc2V0dGluZydzIHZhbHVlLlxyXG4gICAgICovXHJcbiAgICBnZXQgdGV4dCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlIHRoZSBzZXR0aW5nJ3Mgc3RvcmVkIHZhbHVlLlxyXG4gICAgICogQHBhcmFtIGluVmFsdWUgVGhlIG5ldyB2YWx1ZSBmb3IgdGhlIHNldHRpbmcuXHJcbiAgICAgKi9cclxuICAgIHNldCB0ZXh0KGluVmFsdWUpIHtcclxuICAgICAgICB0aGlzLnZhbHVlID0gaW5WYWx1ZTtcclxuICAgIH1cclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvRGF0YUNoYW5uZWwvRGF0YUNoYW5uZWxDb250cm9sbGVyLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9EYXRhQ2hhbm5lbC9EYXRhQ2hhbm5lbENvbnRyb2xsZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkRhdGFDaGFubmVsQ29udHJvbGxlclwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBEYXRhQ2hhbm5lbENvbnRyb2xsZXIpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vTG9nZ2VyL0xvZ2dlciAqLyBcIi4vc3JjL0xvZ2dlci9Mb2dnZXIudHNcIik7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuLyoqXHJcbiAqIEhhbmRsZXMgdGhlIFNlbmRpbmcgYW5kIFJlY2VpdmluZyBvZiBtZXNzYWdlcyB0byB0aGUgVUUgSW5zdGFuY2UgdmlhIHRoZSBEYXRhIENoYW5uZWxcclxuICovXHJcbmNsYXNzIERhdGFDaGFubmVsQ29udHJvbGxlciB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmlzUmVjZWl2aW5nRnJlZXplRnJhbWUgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlIG9mIGEgZGF0YWNoYW5uZWwgY29udHJvbGxlciBpbnN0YW5jZVxyXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgRGF0YUNoYW5uZWxDb250cm9sbGVyIGluc3RhbmNlXHJcbiAgICAgKi9cclxuICAgIGdldERhdGFDaGFubmVsSW5zdGFuY2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRvIENyZWF0ZSBhbmQgU2V0IHVwIGEgRGF0YSBDaGFubmVsXHJcbiAgICAgKiBAcGFyYW0gcGVlckNvbm5lY3Rpb24gLSBUaGUgUlRDIFBlZXIgQ29ubmVjdGlvblxyXG4gICAgICogQHBhcmFtIGxhYmVsIC0gTGFiZWwgb2YgdGhlIERhdGEgQ2hhbm5lbFxyXG4gICAgICogQHBhcmFtIGRhdGFjaGFubmVsT3B0aW9ucyAtIE9wdGlvbmFsIFJUQyBEYXRhQ2hhbm5lbCBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZURhdGFDaGFubmVsKHBlZXJDb25uZWN0aW9uLCBsYWJlbCwgZGF0YWNoYW5uZWxPcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbiA9IHBlZXJDb25uZWN0aW9uO1xyXG4gICAgICAgIHRoaXMubGFiZWwgPSBsYWJlbDtcclxuICAgICAgICB0aGlzLmRhdGFjaGFubmVsT3B0aW9ucyA9IGRhdGFjaGFubmVsT3B0aW9ucztcclxuICAgICAgICBpZiAoZGF0YWNoYW5uZWxPcHRpb25zID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5kYXRhY2hhbm5lbE9wdGlvbnMgPSB7fTtcclxuICAgICAgICAgICAgdGhpcy5kYXRhY2hhbm5lbE9wdGlvbnMub3JkZXJlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZGF0YUNoYW5uZWwgPSB0aGlzLnBlZXJDb25uZWN0aW9uLmNyZWF0ZURhdGFDaGFubmVsKHRoaXMubGFiZWwsIHRoaXMuZGF0YWNoYW5uZWxPcHRpb25zKTtcclxuICAgICAgICB0aGlzLnNldHVwRGF0YUNoYW5uZWwoKTtcclxuICAgIH1cclxuICAgIHNldHVwRGF0YUNoYW5uZWwoKSB7XHJcbiAgICAgICAgLy9XZSBXYW50IGFuIEFycmF5IEJ1ZmZlciBub3QgYSBibG9iXHJcbiAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbC5iaW5hcnlUeXBlID0gJ2FycmF5YnVmZmVyJztcclxuICAgICAgICB0aGlzLmRhdGFDaGFubmVsLm9ub3BlbiA9IChldikgPT4gdGhpcy5oYW5kbGVPbk9wZW4oZXYpO1xyXG4gICAgICAgIHRoaXMuZGF0YUNoYW5uZWwub25jbG9zZSA9IChldikgPT4gdGhpcy5oYW5kbGVPbkNsb3NlKGV2KTtcclxuICAgICAgICB0aGlzLmRhdGFDaGFubmVsLm9ubWVzc2FnZSA9IChldikgPT4gdGhpcy5oYW5kbGVPbk1lc3NhZ2UoZXYpO1xyXG4gICAgICAgIHRoaXMuZGF0YUNoYW5uZWwub25lcnJvciA9IChldikgPT4gdGhpcy5oYW5kbGVPbkVycm9yKGV2KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB3aGVuIHRoZSBEYXRhIENoYW5uZWwgaXMgb3BlbmVkXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZU9uT3Blbihldikge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgRGF0YSBDaGFubmVsICgke3RoaXMubGFiZWx9KSBvcGVuZWQuYCwgNyk7XHJcbiAgICAgICAgdGhpcy5vbk9wZW4oKF9hID0gdGhpcy5kYXRhQ2hhbm5lbCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxhYmVsLCBldik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgd2hlbiB0aGUgRGF0YSBDaGFubmVsIGlzIGNsb3NlZFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVPbkNsb3NlKGV2KSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBEYXRhIENoYW5uZWwgKCR7dGhpcy5sYWJlbH0pIGNsb3NlZC5gLCA3KTtcclxuICAgICAgICB0aGlzLm9uQ2xvc2UoKF9hID0gdGhpcy5kYXRhQ2hhbm5lbCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxhYmVsLCBldik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgd2hlbiBhIG1lc3NhZ2UgaXMgcmVjZWl2ZWRcclxuICAgICAqIEBwYXJhbSBldmVudCAtIE1lc3NhZ2UgRXZlbnRcclxuICAgICAqL1xyXG4gICAgaGFuZGxlT25NZXNzYWdlKGV2ZW50KSB7XHJcbiAgICAgICAgLy8gSGlnaGVyIGxvZyBsZXZlbCB0byBwcmV2ZW50IGxvZyBzcGFtIHdpdGggbWVzc2FnZXMgcmVjZWl2ZWRcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgRGF0YSBDaGFubmVsICgke3RoaXMubGFiZWx9KSBtZXNzYWdlOiAke2V2ZW50fWAsIDgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIHdoZW4gYW4gZXJyb3IgaXMgdGhyb3duXHJcbiAgICAgKiBAcGFyYW0gZXZlbnQgLSBFcnJvciBFdmVudFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVPbkVycm9yKGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBEYXRhIENoYW5uZWwgKCR7dGhpcy5sYWJlbH0pIGVycm9yOiAke2V2ZW50fWAsIDcpO1xyXG4gICAgICAgIHRoaXMub25FcnJvcigoX2EgPSB0aGlzLmRhdGFDaGFubmVsKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGFiZWwsIGV2ZW50KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogT3ZlcnJpZGUgdG8gcmVnaXN0ZXIgb25PcGVuIGhhbmRsZXJcclxuICAgICAqIEBwYXJhbSBsYWJlbCBEYXRhIGNoYW5uZWwgbGFiZWwgKFwiZGF0YWNoYW5uZWxcIiwgXCJzZW5kLWRhdGFjaGFubmVsXCIsIFwicmVjdi1kYXRhY2hhbm5lbFwiKVxyXG4gICAgICogQHBhcmFtIGV2IGV2ZW50XHJcbiAgICAgKi9cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcclxuICAgIG9uT3BlbihsYWJlbCwgZXYpIHtcclxuICAgICAgICAvLyBlbXB0eSBkZWZhdWx0IGltcGxlbWVudGF0aW9uXHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE92ZXJyaWRlIHRvIHJlZ2lzdGVyIG9uQ2xvc2UgaGFuZGxlclxyXG4gICAgICogQHBhcmFtIGxhYmVsIERhdGEgY2hhbm5lbCBsYWJlbCAoXCJkYXRhY2hhbm5lbFwiLCBcInNlbmQtZGF0YWNoYW5uZWxcIiwgXCJyZWN2LWRhdGFjaGFubmVsXCIpXHJcbiAgICAgKiBAcGFyYW0gZXYgZXZlbnRcclxuICAgICAqL1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgb25DbG9zZShsYWJlbCwgZXYpIHtcclxuICAgICAgICAvLyBlbXB0eSBkZWZhdWx0IGltcGxlbWVudGF0aW9uXHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE92ZXJyaWRlIHRvIHJlZ2lzdGVyIG9uRXJyb3IgaGFuZGxlclxyXG4gICAgICogQHBhcmFtIGxhYmVsIERhdGEgY2hhbm5lbCBsYWJlbCAoXCJkYXRhY2hhbm5lbFwiLCBcInNlbmQtZGF0YWNoYW5uZWxcIiwgXCJyZWN2LWRhdGFjaGFubmVsXCIpXHJcbiAgICAgKiBAcGFyYW0gZXYgZXZlbnRcclxuICAgICAqL1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgb25FcnJvcihsYWJlbCwgZXYpIHtcclxuICAgICAgICAvLyBlbXB0eSBkZWZhdWx0IGltcGxlbWVudGF0aW9uXHJcbiAgICB9XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL0RhdGFDaGFubmVsL0RhdGFDaGFubmVsTGF0ZW5jeVRlc3RDb250cm9sbGVyLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL0RhdGFDaGFubmVsL0RhdGFDaGFubmVsTGF0ZW5jeVRlc3RDb250cm9sbGVyLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkRhdGFDaGFubmVsTGF0ZW5jeVRlc3RDb250cm9sbGVyXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIERhdGFDaGFubmVsTGF0ZW5jeVRlc3RDb250cm9sbGVyKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL0xvZ2dlci9Mb2dnZXIgKi8gXCIuL3NyYy9Mb2dnZXIvTG9nZ2VyLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9EYXRhQ2hhbm5lbExhdGVuY3lUZXN0UmVzdWx0c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9EYXRhQ2hhbm5lbExhdGVuY3lUZXN0UmVzdWx0cyAqLyBcIi4vc3JjL0RhdGFDaGFubmVsL0RhdGFDaGFubmVsTGF0ZW5jeVRlc3RSZXN1bHRzLnRzXCIpO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcblxyXG5jbGFzcyBEYXRhQ2hhbm5lbExhdGVuY3lUZXN0Q29udHJvbGxlciB7XHJcbiAgICBjb25zdHJ1Y3RvcihzaW5rLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuc2luayA9IHNpbms7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xyXG4gICAgICAgIHRoaXMucmVjb3JkcyA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLnNlcSA9IDA7XHJcbiAgICB9XHJcbiAgICBzdGFydChjb25maWcpIHtcclxuICAgICAgICBpZiAodGhpcy5pc1J1bm5pbmcoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgICAgICB0aGlzLnJlY29yZHMuY2xlYXIoKTtcclxuICAgICAgICB0aGlzLmludGVydmFsID0gc2V0SW50ZXJ2YWwoKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKERhdGUubm93KCkgLSB0aGlzLnN0YXJ0VGltZSA+PSBjb25maWcuZHVyYXRpb24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kUmVxdWVzdChjb25maWcucmVxdWVzdFNpemUsIGNvbmZpZy5yZXNwb25zZVNpemUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkuYmluZCh0aGlzKSwgTWF0aC5mbG9vcigxMDAwIC8gY29uZmlnLnJwcykpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgc3RvcCgpIHtcclxuICAgICAgICBpZiAodGhpcy5pbnRlcnZhbCkge1xyXG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpO1xyXG4gICAgICAgICAgICB0aGlzLmludGVydmFsID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB0aGlzLmNhbGxiYWNrKHRoaXMucHJvZHVjZVJlc3VsdCgpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwcm9kdWNlUmVzdWx0KCkge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdFJlY29yZHMgPSBuZXcgTWFwKHRoaXMucmVjb3Jkcyk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcmVjb3JkczogcmVzdWx0UmVjb3JkcyxcclxuICAgICAgICAgICAgZGF0YUNoYW5uZWxSdHQ6IE1hdGguY2VpbChBcnJheS5mcm9tKHRoaXMucmVjb3Jkcy52YWx1ZXMoKSkucmVkdWNlKChhY2MsIG5leHQpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhY2MgKyAobmV4dC5wbGF5ZXJSZWNlaXZlZFRpbWVzdGFtcCAtIG5leHQucGxheWVyU2VudFRpbWVzdGFtcCk7XHJcbiAgICAgICAgICAgIH0sIDApIC8gdGhpcy5yZWNvcmRzLnNpemUpLFxyXG4gICAgICAgICAgICBwbGF5ZXJUb1N0cmVhbWVyVGltZTogTWF0aC5jZWlsKEFycmF5LmZyb20odGhpcy5yZWNvcmRzLnZhbHVlcygpKS5yZWR1Y2UoKGFjYywgbmV4dCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjYyArIChuZXh0LnN0cmVhbWVyUmVjZWl2ZWRUaW1lc3RhbXAgLSBuZXh0LnBsYXllclNlbnRUaW1lc3RhbXApO1xyXG4gICAgICAgICAgICB9LCAwKSAvIHRoaXMucmVjb3Jkcy5zaXplKSxcclxuICAgICAgICAgICAgc3RyZWFtZXJUb1BsYXllclRpbWU6IE1hdGguY2VpbChBcnJheS5mcm9tKHRoaXMucmVjb3Jkcy52YWx1ZXMoKSkucmVkdWNlKChhY2MsIG5leHQpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhY2MgKyAobmV4dC5wbGF5ZXJSZWNlaXZlZFRpbWVzdGFtcCAtIG5leHQuc3RyZWFtZXJTZW50VGltZXN0YW1wKTtcclxuICAgICAgICAgICAgfSwgMCkgLyB0aGlzLnJlY29yZHMuc2l6ZSksXHJcbiAgICAgICAgICAgIGV4cG9ydExhdGVuY3lBc0NTVjogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGNzdiA9IFwiVGltZXN0YW1wO1JUVDtQbGF5ZXJUb1N0cmVhbWVyO1N0cmVhbWVyVG9QbGF5ZXI7XFxuXCI7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRSZWNvcmRzLmZvckVhY2goKHJlY29yZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNzdiArPSByZWNvcmQucGxheWVyU2VudFRpbWVzdGFtcCArIFwiO1wiO1xyXG4gICAgICAgICAgICAgICAgICAgIGNzdiArPSAocmVjb3JkLnBsYXllclJlY2VpdmVkVGltZXN0YW1wIC0gcmVjb3JkLnBsYXllclNlbnRUaW1lc3RhbXApICsgXCI7XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgY3N2ICs9IChyZWNvcmQuc3RyZWFtZXJSZWNlaXZlZFRpbWVzdGFtcCAtIHJlY29yZC5wbGF5ZXJTZW50VGltZXN0YW1wKSArIFwiO1wiO1xyXG4gICAgICAgICAgICAgICAgICAgIGNzdiArPSAocmVjb3JkLnBsYXllclJlY2VpdmVkVGltZXN0YW1wIC0gcmVjb3JkLnN0cmVhbWVyU2VudFRpbWVzdGFtcCkgKyBcIjtcIjtcclxuICAgICAgICAgICAgICAgICAgICBjc3YgKz0gXCJcXG5cIjtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNzdjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBpc1J1bm5pbmcoKSB7XHJcbiAgICAgICAgcmV0dXJuICEhdGhpcy5pbnRlcnZhbDtcclxuICAgIH1cclxuICAgIHJlY2VpdmUocmVzcG9uc2UpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNSdW5uaW5nKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkVycm9yKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgXCJVbmRlZmluZWQgcmVzcG9uc2UgZnJvbSBzZXJ2ZXJcIik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHJlY29yZCA9IHRoaXMucmVjb3Jkcy5nZXQocmVzcG9uc2UuU2VxKTtcclxuICAgICAgICBpZiAocmVjb3JkKSB7XHJcbiAgICAgICAgICAgIHJlY29yZC51cGRhdGUocmVzcG9uc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNlbmRSZXF1ZXN0KHJlcXVlc3RTaXplLCByZXNwb25zZVNpemUpIHtcclxuICAgICAgICBsZXQgcmVxdWVzdCA9IHRoaXMuY3JlYXRlUmVxdWVzdChyZXF1ZXN0U2l6ZSwgcmVzcG9uc2VTaXplKTtcclxuICAgICAgICBsZXQgcmVjb3JkID0gbmV3IF9EYXRhQ2hhbm5lbExhdGVuY3lUZXN0UmVzdWx0c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkRhdGFDaGFubmVsTGF0ZW5jeVRlc3RSZWNvcmQocmVxdWVzdCk7XHJcbiAgICAgICAgdGhpcy5yZWNvcmRzLnNldChyZWNvcmQuc2VxLCByZWNvcmQpO1xyXG4gICAgICAgIHRoaXMuc2luayhyZXF1ZXN0KTtcclxuICAgIH1cclxuICAgIGNyZWF0ZVJlcXVlc3QocmVxdWVzdFNpemUsIHJlc3BvbnNlU2l6ZSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIFNlcTogdGhpcy5zZXErKyxcclxuICAgICAgICAgICAgRmlsbFJlc3BvbnNlU2l6ZTogcmVzcG9uc2VTaXplLFxyXG4gICAgICAgICAgICBGaWxsZXI6IHJlcXVlc3RTaXplID8gXCJBXCIucmVwZWF0KHJlcXVlc3RTaXplKSA6IFwiXCJcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9EYXRhQ2hhbm5lbC9EYXRhQ2hhbm5lbExhdGVuY3lUZXN0UmVzdWx0cy50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9EYXRhQ2hhbm5lbC9EYXRhQ2hhbm5lbExhdGVuY3lUZXN0UmVzdWx0cy50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJEYXRhQ2hhbm5lbExhdGVuY3lUZXN0UmVjb3JkXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIERhdGFDaGFubmVsTGF0ZW5jeVRlc3RSZWNvcmQpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbmNsYXNzIERhdGFDaGFubmVsTGF0ZW5jeVRlc3RSZWNvcmQge1xyXG4gICAgY29uc3RydWN0b3IocmVxdWVzdCkge1xyXG4gICAgICAgIHRoaXMuc2VxID0gcmVxdWVzdC5TZXE7XHJcbiAgICAgICAgdGhpcy5wbGF5ZXJTZW50VGltZXN0YW1wID0gRGF0ZS5ub3coKTtcclxuICAgICAgICB0aGlzLnJlcXVlc3RGaWxsZXJTaXplID0gcmVxdWVzdC5GaWxsZXIgPyByZXF1ZXN0LkZpbGxlci5sZW5ndGggOiAwO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgdGhpcy5wbGF5ZXJSZWNlaXZlZFRpbWVzdGFtcCA9IERhdGUubm93KCk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1lclJlY2VpdmVkVGltZXN0YW1wID0gcmVzcG9uc2UuUmVjZWl2ZWRUaW1lc3RhbXA7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1lclNlbnRUaW1lc3RhbXAgPSByZXNwb25zZS5TZW50VGltZXN0YW1wO1xyXG4gICAgICAgIHRoaXMucmVzcG9uc2VGaWxsZXJTaXplID0gcmVzcG9uc2UuRmlsbGVyID8gcmVzcG9uc2UuRmlsbGVyLmxlbmd0aCA6IDA7XHJcbiAgICB9XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL0RhdGFDaGFubmVsL0RhdGFDaGFubmVsU2VuZGVyLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL0RhdGFDaGFubmVsL0RhdGFDaGFubmVsU2VuZGVyLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkRhdGFDaGFubmVsU2VuZGVyXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIERhdGFDaGFubmVsU2VuZGVyKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL0xvZ2dlci9Mb2dnZXIgKi8gXCIuL3NyYy9Mb2dnZXIvTG9nZ2VyLnRzXCIpO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcbi8qKlxyXG4gKiBBIGNsYXNzIGZvciBzZW5kaW5nIGRhdGEgY2hhbm5lbCBtZXNzYWdlc1xyXG4gKi9cclxuY2xhc3MgRGF0YUNoYW5uZWxTZW5kZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gZGF0YUNoYW5uZWxQcm92aWRlciAtIERhdGEgY2hhbm5lbCBvYmplY3QgdHlwZVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhQ2hhbm5lbFByb3ZpZGVyKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbFByb3ZpZGVyID0gZGF0YUNoYW5uZWxQcm92aWRlcjtcclxuICAgIH1cclxuICAgIGNhblNlbmQoKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLmRhdGFDaGFubmVsUHJvdmlkZXIuZ2V0RGF0YUNoYW5uZWxJbnN0YW5jZSgpLmRhdGFDaGFubmVsICE9PVxyXG4gICAgICAgICAgICB1bmRlZmluZWQgJiZcclxuICAgICAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbFByb3ZpZGVyLmdldERhdGFDaGFubmVsSW5zdGFuY2UoKS5kYXRhQ2hhbm5lbFxyXG4gICAgICAgICAgICAgICAgLnJlYWR5U3RhdGUgPT0gJ29wZW4nKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2VuZCBEYXRhIG92ZXIgdGhlIERhdGEgY2hhbm5lbCB0byB0aGUgVUUgSW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSBkYXRhIC0gTWVzc2FnZSBEYXRhIEFycmF5IEJ1ZmZlclxyXG4gICAgICovXHJcbiAgICBzZW5kRGF0YShkYXRhKSB7XHJcbiAgICAgICAgLy8gcmVzZXQgdGhlIGFmayBpbmFjdGl2aXR5XHJcbiAgICAgICAgY29uc3QgZGF0YUNoYW5uZWxJbnN0YW5jZSA9IHRoaXMuZGF0YUNoYW5uZWxQcm92aWRlci5nZXREYXRhQ2hhbm5lbEluc3RhbmNlKCk7XHJcbiAgICAgICAgaWYgKGRhdGFDaGFubmVsSW5zdGFuY2UuZGF0YUNoYW5uZWwucmVhZHlTdGF0ZSA9PSAnb3BlbicpIHtcclxuICAgICAgICAgICAgZGF0YUNoYW5uZWxJbnN0YW5jZS5kYXRhQ2hhbm5lbC5zZW5kKGRhdGEpO1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgTWVzc2FnZSBTZW50OiAke25ldyBVaW50OEFycmF5KGRhdGEpfWAsIDYpO1xyXG4gICAgICAgICAgICB0aGlzLnJlc2V0QWZrV2FybmluZ1RpbWVyT25EYXRhU2VuZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuRXJyb3IoX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgTWVzc2FnZSBGYWlsZWQ6ICR7bmV3IFVpbnQ4QXJyYXkoZGF0YSl9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBvdmVycmlkZSBtZXRob2QgZm9yIHJlc2V0dGluZyB0aGUgQWZrIHdhcm5pbmcgdGltZXIgd2hlbiBkYXRhIGlzIHNlbnQgb3ZlciB0aGUgZGF0YSBjaGFubmVsXHJcbiAgICAgKi9cclxuICAgIHJlc2V0QWZrV2FybmluZ1RpbWVyT25EYXRhU2VuZCgpIHtcclxuICAgICAgICAvLyBCYXNlIEZ1bmN0aW9uYWxpdHk6IERvIE5vdGhpbmdcclxuICAgIH1cclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvRGF0YUNoYW5uZWwvSW5pdGlhbFNldHRpbmdzLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9EYXRhQ2hhbm5lbC9Jbml0aWFsU2V0dGluZ3MudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkVuY29kZXJTZXR0aW5nc1wiOiAoKSA9PiAoLyogYmluZGluZyAqLyBFbmNvZGVyU2V0dGluZ3MpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkluaXRpYWxTZXR0aW5nc1wiOiAoKSA9PiAoLyogYmluZGluZyAqLyBJbml0aWFsU2V0dGluZ3MpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlBpeGVsU3RyZWFtaW5nU2V0dGluZ3NcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gUGl4ZWxTdHJlYW1pbmdTZXR0aW5ncyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiV2ViUlRDU2V0dGluZ3NcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gV2ViUlRDU2V0dGluZ3MpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbi8qKlxyXG4gKiBMYXRlbmN5IFRlc3QgUmVzdWx0cyBEYXRhXHJcbiAqL1xyXG5jbGFzcyBJbml0aWFsU2V0dGluZ3Mge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5QaXhlbFN0cmVhbWluZ1NldHRpbmdzID0gbmV3IFBpeGVsU3RyZWFtaW5nU2V0dGluZ3MoKTtcclxuICAgICAgICB0aGlzLkVuY29kZXJTZXR0aW5ncyA9IG5ldyBFbmNvZGVyU2V0dGluZ3MoKTtcclxuICAgICAgICB0aGlzLldlYlJUQ1NldHRpbmdzID0gbmV3IFdlYlJUQ1NldHRpbmdzKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENoZWNrcyBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIHRoZSBGUFMgYW5kIE1heEZQUyBzdGF0cyBiZXR3ZWVuIDQuMjcgYW5kIDVcclxuICAgICAqL1xyXG4gICAgdWVDb21wYXRpYmxlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLldlYlJUQ1NldHRpbmdzLk1heEZQUyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuV2ViUlRDU2V0dGluZ3MuRlBTID0gdGhpcy5XZWJSVENTZXR0aW5ncy5NYXhGUFM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBIGNsYXNzIGZvciBoYW5kbGluZyBQaXhlbCBTdHJlYW1pbmcgZGV0YWlsc1xyXG4gKi9cclxuY2xhc3MgUGl4ZWxTdHJlYW1pbmdTZXR0aW5ncyB7XHJcbn1cclxuLyoqXHJcbiAqIEEgY2xhc3MgZm9yIGhhbmRsaW5nIGVuY29kZXIgc3RhdHNcclxuICovXHJcbmNsYXNzIEVuY29kZXJTZXR0aW5ncyB7XHJcbn1cclxuLyoqXHJcbiAqIEEgY2xhc3MgZm9yIGhhbmRsaW5nIHdlYiBydGMgc3RhdHNcclxuICovXHJcbmNsYXNzIFdlYlJUQ1NldHRpbmdzIHtcclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvRGF0YUNoYW5uZWwvTGF0ZW5jeVRlc3RSZXN1bHRzLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9EYXRhQ2hhbm5lbC9MYXRlbmN5VGVzdFJlc3VsdHMudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkxhdGVuY3lUZXN0UmVzdWx0c1wiOiAoKSA9PiAoLyogYmluZGluZyAqLyBMYXRlbmN5VGVzdFJlc3VsdHMpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vTG9nZ2VyL0xvZ2dlciAqLyBcIi4vc3JjL0xvZ2dlci9Mb2dnZXIudHNcIik7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuLyoqXHJcbiAqIExhdGVuY3kgVGVzdCBSZXN1bHRzIERhdGFcclxuICovXHJcbmNsYXNzIExhdGVuY3lUZXN0UmVzdWx0cyB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAvL0ZpZWxkcyBTZXQgZnJvbSB0aGUgbGF0ZW5jeSBwYXlsb2FkIHJlZ2FyZGxlc3Mgb2YgdmVyc2lvblxyXG4gICAgICAgIHRoaXMuUmVjZWlwdFRpbWVNcyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5UcmFuc21pc3Npb25UaW1lTXMgPSBudWxsO1xyXG4gICAgICAgIC8vRmllbGRzIFNldCBmcm9tIHRoZSBsYXRlbmN5IHBheWxvYWQgZnJvbSA0LjI3LjJcclxuICAgICAgICB0aGlzLlByZUNhcHR1cmVUaW1lTXMgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuUG9zdENhcHR1cmVUaW1lTXMgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuUHJlRW5jb2RlVGltZU1zID0gbnVsbDtcclxuICAgICAgICB0aGlzLlBvc3RFbmNvZGVUaW1lTXMgPSBudWxsO1xyXG4gICAgICAgIC8vRmllbGRzIFNldCBmcm9tIHRoZSBsYXRlbmN5IHBheWxvYWQgZnJvbSA1LjBcclxuICAgICAgICB0aGlzLkVuY29kZU1zID0gbnVsbDtcclxuICAgICAgICB0aGlzLkNhcHR1cmVUb1NlbmRNcyA9IG51bGw7XHJcbiAgICAgICAgLy9GaWVsZHMgU2V0IHdoZW4gcHJvY2Vzc2VkXHJcbiAgICAgICAgdGhpcy50ZXN0U3RhcnRUaW1lTXMgPSAwO1xyXG4gICAgICAgIHRoaXMuYnJvd3NlclJlY2VpcHRUaW1lTXMgPSAwO1xyXG4gICAgICAgIC8vRmllbGRzIHNldCBmcm9tIGNhbGN1bGF0aW9uc1xyXG4gICAgICAgIHRoaXMubGF0ZW5jeUV4Y2x1ZGluZ0RlY29kZSA9IDA7XHJcbiAgICAgICAgdGhpcy50ZXN0RHVyYXRpb24gPSAwO1xyXG4gICAgICAgIC8vdWVMYXRlbmN5OiBudW1iZXIgPSAwO1xyXG4gICAgICAgIHRoaXMubmV0d29ya0xhdGVuY3kgPSAwO1xyXG4gICAgICAgIHRoaXMuYnJvd3NlclNlbmRMYXRlbmN5ID0gMDtcclxuICAgICAgICB0aGlzLmZyYW1lRGlzcGxheURlbHRhVGltZU1zID0gMDtcclxuICAgICAgICB0aGlzLmVuZFRvRW5kTGF0ZW5jeSA9IDA7XHJcbiAgICAgICAgLy91ZVBpeGVsU3RyZWFtTGF0ZW5jeTogbnVtYmVyID0gMDtcclxuICAgICAgICB0aGlzLmVuY29kZUxhdGVuY3kgPSAwO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSBEZWx0YSBUaW1lIE1pbGxpc2Vjb25kc1xyXG4gICAgICogQHBhcmFtIERlbHRhVGltZU1zIC0gRGVsdGEgVGltZSBNaWxsaXNlY29uZHNcclxuICAgICAqL1xyXG4gICAgc2V0RnJhbWVEaXNwbGF5RGVsdGFUaW1lKERlbHRhVGltZU1zKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZnJhbWVEaXNwbGF5RGVsdGFUaW1lTXMgPT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmZyYW1lRGlzcGxheURlbHRhVGltZU1zID0gTWF0aC5yb3VuZChEZWx0YVRpbWVNcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9jZXNzIHRoZSBlbmNvZGVyIHRpbWVzIGFuZCBzZXQgdGhlbVxyXG4gICAgICovXHJcbiAgICBwcm9jZXNzRmllbGRzKCkge1xyXG4gICAgICAgIGlmICh0aGlzLkVuY29kZU1zID09IG51bGwgJiZcclxuICAgICAgICAgICAgKHRoaXMuUHJlRW5jb2RlVGltZU1zICE9IG51bGwgfHwgdGhpcy5Qb3N0RW5jb2RlVGltZU1zICE9IG51bGwpKSB7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBTZXR0aW5nIEVuY29kZSBNcyBcXG4gJHt0aGlzLlBvc3RFbmNvZGVUaW1lTXN9IFxcbiAke3RoaXMuUHJlRW5jb2RlVGltZU1zfWAsIDYpO1xyXG4gICAgICAgICAgICB0aGlzLkVuY29kZU1zID0gdGhpcy5Qb3N0RW5jb2RlVGltZU1zIC0gdGhpcy5QcmVFbmNvZGVUaW1lTXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLkNhcHR1cmVUb1NlbmRNcyA9PSBudWxsICYmXHJcbiAgICAgICAgICAgICh0aGlzLlByZUNhcHR1cmVUaW1lTXMgIT0gbnVsbCB8fCB0aGlzLlBvc3RDYXB0dXJlVGltZU1zICE9IG51bGwpKSB7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBTZXR0aW5nIENhcHR1cmVUb1NlbmRNcyBNcyBcXG4gJHt0aGlzLlBvc3RDYXB0dXJlVGltZU1zfSBcXG4gJHt0aGlzLlByZUNhcHR1cmVUaW1lTXN9YCwgNik7XHJcbiAgICAgICAgICAgIHRoaXMuQ2FwdHVyZVRvU2VuZE1zID1cclxuICAgICAgICAgICAgICAgIHRoaXMuUG9zdENhcHR1cmVUaW1lTXMgLSB0aGlzLlByZUNhcHR1cmVUaW1lTXM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9GcmVlemVGcmFtZS9GcmVlemVGcmFtZS50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9GcmVlemVGcmFtZS9GcmVlemVGcmFtZS50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJGcmVlemVGcmFtZVwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBGcmVlemVGcmFtZSlcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuLyoqXHJcbiAqIEEgY2xhc3MgZm9yIG1hbmFnaW5nIHRoZSBmcmVlemUgZnJhbWUgb2JqZWN0XHJcbiAqL1xyXG5jbGFzcyBGcmVlemVGcmFtZSB7XHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdCBhIGZyZWV6ZSBmcmFtZVxyXG4gICAgICogQHBhcmFtIHJvb3REaXYgdGhlIGRpdiB0aGF0IGEgZnJlZXplIGZyYW1lIGVsZW1lbnQgd2lsbCBiZSBpbmplY3RlZCBpbnRvXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHJvb3REaXYpIHtcclxuICAgICAgICB0aGlzLmZyZWV6ZUZyYW1lSGVpZ2h0ID0gMDtcclxuICAgICAgICB0aGlzLmZyZWV6ZUZyYW1lV2lkdGggPSAwO1xyXG4gICAgICAgIHRoaXMucm9vdERpdiA9IHJvb3REaXY7XHJcbiAgICAgICAgLy8gY3JlYXRlIHRoZSBvdmVybGF5XHJcbiAgICAgICAgdGhpcy5yb290RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHRoaXMucm9vdEVsZW1lbnQuaWQgPSAnZnJlZXplRnJhbWUnO1xyXG4gICAgICAgIHRoaXMucm9vdEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB0aGlzLnJvb3RFbGVtZW50LnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnbm9uZSc7XHJcbiAgICAgICAgdGhpcy5yb290RWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgICAgICAgdGhpcy5yb290RWxlbWVudC5zdHlsZS56SW5kZXggPSAnMjAnO1xyXG4gICAgICAgIC8vIGNyZWF0ZSB0aGUgaW1hZ2UgcGxhY2UgaG9sZGVyXHJcbiAgICAgICAgdGhpcy5pbWFnZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcclxuICAgICAgICB0aGlzLmltYWdlRWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgICAgICAgLy8gYXBwZW5kIHRoZSBpbWFnZSBpbnRvIHRoZSByb290IGVsZW1lbnQgYW5kIGFwcGVuZCB0aGUgZWxlbWVudCB0byB0aGUgcm9vdCBkaXZcclxuICAgICAgICB0aGlzLnJvb3RFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuaW1hZ2VFbGVtZW50KTtcclxuICAgICAgICB0aGlzLnJvb3REaXYuYXBwZW5kQ2hpbGQodGhpcy5yb290RWxlbWVudCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgZnJlZXplIGZyYW1lIGVsZW1lbnQgZm9yIHNob3dpbmdcclxuICAgICAqL1xyXG4gICAgc2V0RWxlbWVudEZvclNob3coKSB7XHJcbiAgICAgICAgdGhpcy5yb290RWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRoZSBmcmVlemUgZnJhbWUgZWxlbWVudCBmb3IgaGlkaW5nXHJcbiAgICAgKi9cclxuICAgIHNldEVsZW1lbnRGb3JIaWRlKCkge1xyXG4gICAgICAgIHRoaXMucm9vdEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlIHRoZSBmcmVlemUgZnJhbWVzIGltYWdlIHNvdXJjZVxyXG4gICAgICogQHBhcmFtIGpwZWcgLSB0aGUgZnJlZXplIGZyYW1lIGltYWdlIGFzIGEgYnl0ZSBhcnJheSBkYXRhXHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZUltYWdlRWxlbWVudFNvdXJjZShqcGVnKSB7XHJcbiAgICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShqcGVnLnJlZHVjZSgoZGF0YSwgYnl0ZSkgPT4gZGF0YSArIFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZSksICcnKSk7XHJcbiAgICAgICAgdGhpcy5pbWFnZUVsZW1lbnQuc3JjID0gJ2RhdGE6aW1hZ2UvanBlZztiYXNlNjQsJyArIGJhc2U2NDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRoZSBkaW1lbnNpb25zIGZvciB0aGUgZnJlZXplIGZyYW1lIGZyb20gdGhlIGVsZW1lbnQgYW5kIHJlc2l6ZSBpdFxyXG4gICAgICovXHJcbiAgICBzZXREaW1lbnNpb25zRnJvbUVsZW1lbnRBbmRSZXNpemUoKSB7XHJcbiAgICAgICAgdGhpcy5mcmVlemVGcmFtZUhlaWdodCA9IHRoaXMuaW1hZ2VFbGVtZW50Lm5hdHVyYWxIZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5mcmVlemVGcmFtZVdpZHRoID0gdGhpcy5pbWFnZUVsZW1lbnQubmF0dXJhbFdpZHRoO1xyXG4gICAgICAgIHRoaXMucmVzaXplKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlc2l6ZSBhIGZyZWV6ZSBmcmFtZSBlbGVtZW50XHJcbiAgICAgKi9cclxuICAgIHJlc2l6ZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5mcmVlemVGcmFtZVdpZHRoICE9PSAwICYmIHRoaXMuZnJlZXplRnJhbWVIZWlnaHQgIT09IDApIHtcclxuICAgICAgICAgICAgbGV0IGRpc3BsYXlXaWR0aCA9IDA7XHJcbiAgICAgICAgICAgIGxldCBkaXNwbGF5SGVpZ2h0ID0gMDtcclxuICAgICAgICAgICAgbGV0IGRpc3BsYXlUb3AgPSAwO1xyXG4gICAgICAgICAgICBsZXQgZGlzcGxheUxlZnQgPSAwO1xyXG4gICAgICAgICAgICBjb25zdCBwYXJlbnRBc3BlY3RSYXRpbyA9IHRoaXMucm9vdERpdi5jbGllbnRXaWR0aCAvIHRoaXMucm9vdERpdi5jbGllbnRIZWlnaHQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHZpZGVvQXNwZWN0UmF0aW8gPSB0aGlzLmZyZWV6ZUZyYW1lV2lkdGggLyB0aGlzLmZyZWV6ZUZyYW1lSGVpZ2h0O1xyXG4gICAgICAgICAgICBpZiAocGFyZW50QXNwZWN0UmF0aW8gPCB2aWRlb0FzcGVjdFJhdGlvKSB7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5V2lkdGggPSB0aGlzLnJvb3REaXYuY2xpZW50V2lkdGg7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5SGVpZ2h0ID0gTWF0aC5mbG9vcih0aGlzLnJvb3REaXYuY2xpZW50V2lkdGggLyB2aWRlb0FzcGVjdFJhdGlvKTtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXlUb3AgPSBNYXRoLmZsb29yKCh0aGlzLnJvb3REaXYuY2xpZW50SGVpZ2h0IC0gZGlzcGxheUhlaWdodCkgKiAwLjUpO1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheUxlZnQgPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheVdpZHRoID0gTWF0aC5mbG9vcih0aGlzLnJvb3REaXYuY2xpZW50SGVpZ2h0ICogdmlkZW9Bc3BlY3RSYXRpbyk7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5SGVpZ2h0ID0gdGhpcy5yb290RGl2LmNsaWVudEhlaWdodDtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXlUb3AgPSAwO1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheUxlZnQgPSBNYXRoLmZsb29yKCh0aGlzLnJvb3REaXYuY2xpZW50V2lkdGggLSBkaXNwbGF5V2lkdGgpICogMC41KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnJvb3RFbGVtZW50LnN0eWxlLndpZHRoID0gdGhpcy5yb290RGl2Lm9mZnNldFdpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgdGhpcy5yb290RWxlbWVudC5zdHlsZS5oZWlnaHQgPSB0aGlzLnJvb3REaXYub2Zmc2V0SGVpZ2h0ICsgJ3B4JztcclxuICAgICAgICAgICAgdGhpcy5yb290RWxlbWVudC5zdHlsZS5sZWZ0ID0gMCArICdweCc7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdEVsZW1lbnQuc3R5bGUudG9wID0gMCArICdweCc7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VFbGVtZW50LnN0eWxlLndpZHRoID0gZGlzcGxheVdpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgdGhpcy5pbWFnZUVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gZGlzcGxheUhlaWdodCArICdweCc7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VFbGVtZW50LnN0eWxlLmxlZnQgPSBkaXNwbGF5TGVmdCArICdweCc7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VFbGVtZW50LnN0eWxlLnRvcCA9IGRpc3BsYXlUb3AgKyAncHgnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvRnJlZXplRnJhbWUvRnJlZXplRnJhbWVDb250cm9sbGVyLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9GcmVlemVGcmFtZS9GcmVlemVGcmFtZUNvbnRyb2xsZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkZyZWV6ZUZyYW1lQ29udHJvbGxlclwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBGcmVlemVGcmFtZUNvbnRyb2xsZXIpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vTG9nZ2VyL0xvZ2dlciAqLyBcIi4vc3JjL0xvZ2dlci9Mb2dnZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0ZyZWV6ZUZyYW1lX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0ZyZWV6ZUZyYW1lICovIFwiLi9zcmMvRnJlZXplRnJhbWUvRnJlZXplRnJhbWUudHNcIik7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuXHJcbi8qKlxyXG4gKiBBIGNsYXNzIGZvciBjb250cm9sbGluZyBmcmVlemUgZnJhbWUgZnVuY3Rpb25hbGl0eVxyXG4gKi9cclxuY2xhc3MgRnJlZXplRnJhbWVDb250cm9sbGVyIHtcclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0IGEgZnJlZXplIGZyYW1lIGNvbnRyb2xsZXJcclxuICAgICAqIEBwYXJhbSByb290RGl2IC0gdGhlIGRpdiB0aGF0IGEgZnJlZXplIGZyYW1lIGVsZW1lbnQgd2lsbCBiZSBpbmplY3RlZCBpbnRvXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHJvb3REaXYpIHtcclxuICAgICAgICB0aGlzLnJlY2VpdmluZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc2l6ZSA9IDA7XHJcbiAgICAgICAgdGhpcy5qcGVnID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMudmFsaWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmZyZWV6ZUZyYW1lRGVsYXkgPSA1MDtcclxuICAgICAgICB0aGlzLmZyZWV6ZUZyYW1lID0gbmV3IF9GcmVlemVGcmFtZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkZyZWV6ZUZyYW1lKHJvb3REaXYpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTaG93IHRoZSBmcmVlemUgZnJhbWUgaWYgaXQgaXMgdmFsaWRcclxuICAgICAqL1xyXG4gICAgc2hvd0ZyZWV6ZUZyYW1lKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnZhbGlkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZnJlZXplRnJhbWUuc2V0RWxlbWVudEZvclNob3coKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhpZGUgdGhlIGZyZWV6ZSBmcmFtZSBhbmQgc2V0IHRoZSB2YWxpZGl0eSB0byBmYWxzZVxyXG4gICAgICovXHJcbiAgICBoaWRlRnJlZXplRnJhbWUoKSB7XHJcbiAgICAgICAgdGhpcy52YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZnJlZXplRnJhbWUuc2V0RWxlbWVudEZvckhpZGUoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlIHRoZSBmcmVlemUgZnJhbWVzIGltYWdlIHNvdXJjZSBhbmQgbG9hZCBpdFxyXG4gICAgICogQHBhcmFtIGpwZWcgLSB0aGUgZnJlZXplIGZyYW1lIGltYWdlIGFzIGEgYnl0ZSBhcnJheSBkYXRhXHJcbiAgICAgKiBAcGFyYW0gb25Mb2FkQ2FsbEJhY2sgLSBhIGNhbGwgYmFjayBmb3IgbWFuYWdpbmcgaWYgdGhlIHBsYXkgb3ZlcmxheSBuZWVkcyB0byBiZSBzaG93biBvciBub3RcclxuICAgICAqL1xyXG4gICAgdXBkYXRlRnJlZXplRnJhbWVBbmRTaG93KGpwZWcsIG9uTG9hZENhbGxCYWNrKSB7XHJcbiAgICAgICAgdGhpcy5mcmVlemVGcmFtZS51cGRhdGVJbWFnZUVsZW1lbnRTb3VyY2UoanBlZyk7XHJcbiAgICAgICAgdGhpcy5mcmVlemVGcmFtZS5pbWFnZUVsZW1lbnQub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmZyZWV6ZUZyYW1lLnNldERpbWVuc2lvbnNGcm9tRWxlbWVudEFuZFJlc2l6ZSgpO1xyXG4gICAgICAgICAgICBvbkxvYWRDYWxsQmFjaygpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFByb2Nlc3MgdGhlIG5ldyBmcmVlemUgZnJhbWUgaW1hZ2UgYW5kIHVwZGF0ZSBpdFxyXG4gICAgICogQHBhcmFtIHZpZXcgLSB0aGUgZnJlZXplIGZyYW1lIGltYWdlIGFzIGEgYnl0ZSBhcnJheSBkYXRhXHJcbiAgICAgKiBAcGFyYW0gb25Mb2FkQ2FsbEJhY2sgLSBhIGNhbGwgYmFjayBmb3IgbWFuYWdpbmcgaWYgdGhlIHBsYXkgb3ZlcmxheSBuZWVkcyB0byBiZSBzaG93biBvciBub3RcclxuICAgICAqL1xyXG4gICAgcHJvY2Vzc0ZyZWV6ZUZyYW1lTWVzc2FnZSh2aWV3LCBvbkxvYWRDYWxsQmFjaykge1xyXG4gICAgICAgIC8vIFJlc2V0IGZyZWV6ZSBmcmFtZSBpZiB3ZSBnb3QgYSBmcmVlemUgZnJhbWUgbWVzc2FnZSBhbmQgd2UgYXJlIG5vdCBcInJlY2VpdmluZ1wiIHlldC5cclxuICAgICAgICBpZiAoIXRoaXMucmVjZWl2aW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVjZWl2aW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy52YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLnNpemUgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLmpwZWcgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEV4dHJhY3QgdG90YWwgc2l6ZSBvZiBmcmVlemUgZnJhbWUgKGFjcm9zcyBhbGwgY2h1bmtzKVxyXG4gICAgICAgIHRoaXMuc2l6ZSA9IG5ldyBEYXRhVmlldyh2aWV3LnNsaWNlKDEsIDUpLmJ1ZmZlcikuZ2V0SW50MzIoMCwgdHJ1ZSk7XHJcbiAgICAgICAgLy8gR2V0IHRoZSBqcGVnIHBhcnQgb2YgdGhlIHBheWxvYWRcclxuICAgICAgICBjb25zdCBqcGVnQnl0ZXMgPSB2aWV3LnNsaWNlKDEgKyA0KTtcclxuICAgICAgICAvLyBBcHBlbmQgdG8gZXhpc3RpbmcganBlZyB0aGF0IGhvbGRzIHRoZSBmcmVlemUgZnJhbWVcclxuICAgICAgICBpZiAodGhpcy5qcGVnKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGpwZWcgPSBuZXcgVWludDhBcnJheSh0aGlzLmpwZWcubGVuZ3RoICsganBlZ0J5dGVzLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIGpwZWcuc2V0KHRoaXMuanBlZywgMCk7XHJcbiAgICAgICAgICAgIGpwZWcuc2V0KGpwZWdCeXRlcywgdGhpcy5qcGVnLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIHRoaXMuanBlZyA9IGpwZWc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIE5vIGV4aXN0aW5nIGZyZWV6ZSBmcmFtZSBqcGVnLCBtYWtlIG9uZVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmpwZWcgPSBqcGVnQnl0ZXM7XHJcbiAgICAgICAgICAgIHRoaXMucmVjZWl2aW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYHJlY2VpdmVkIGZpcnN0IGNodW5rIG9mIGZyZWV6ZSBmcmFtZTogJHt0aGlzLmpwZWcubGVuZ3RofS8ke3RoaXMuc2l6ZX1gLCA2KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gRmluaXNoZWQgcmVjZWl2aW5nIGZyZWV6ZSBmcmFtZSwgd2UgY2FuIHNob3cgaXQgbm93XHJcbiAgICAgICAgaWYgKHRoaXMuanBlZy5sZW5ndGggPT09IHRoaXMuc2l6ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlY2VpdmluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLnZhbGlkID0gdHJ1ZTtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYHJlY2VpdmVkIGNvbXBsZXRlIGZyZWV6ZSBmcmFtZSAke3RoaXMuc2l6ZX1gLCA2KTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVGcmVlemVGcmFtZUFuZFNob3codGhpcy5qcGVnLCBvbkxvYWRDYWxsQmFjayk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFdlIHJlY2VpdmVkIG1vcmUgZGF0YSB0aGFuIHRoZSBmcmVlemUgZnJhbWUgcGF5bG9hZCBtZXNzYWdlIGluZGljYXRlICh0aGlzIGlzIGFuIGVycm9yKVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuanBlZy5sZW5ndGggPiB0aGlzLnNpemUpIHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuRXJyb3IoX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgcmVjZWl2ZWQgYmlnZ2VyIGZyZWV6ZSBmcmFtZSB0aGFuIGFkdmVydGlzZWQ6ICR7dGhpcy5qcGVnLmxlbmd0aH0vJHt0aGlzLnNpemV9YCk7XHJcbiAgICAgICAgICAgIHRoaXMuanBlZyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgdGhpcy5yZWNlaXZpbmcgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL0lucHV0cy9GYWtlVG91Y2hDb250cm9sbGVyLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL0lucHV0cy9GYWtlVG91Y2hDb250cm9sbGVyLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkZha2VUb3VjaENvbnRyb2xsZXJcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gRmFrZVRvdWNoQ29udHJvbGxlciksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiRmFrZVRvdWNoRmluZ2VyXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIEZha2VUb3VjaEZpbmdlcilcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9Nb3VzZUJ1dHRvbnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vTW91c2VCdXR0b25zICovIFwiLi9zcmMvSW5wdXRzL01vdXNlQnV0dG9ucy50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfVXRpbF9FdmVudExpc3RlbmVyVHJhY2tlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vVXRpbC9FdmVudExpc3RlbmVyVHJhY2tlciAqLyBcIi4vc3JjL1V0aWwvRXZlbnRMaXN0ZW5lclRyYWNrZXIudHNcIik7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuXHJcbi8qKlxyXG4gKiBBbGxvd3MgZm9yIHRoZSB1c2FnZSBvZiBmYWtlIHRvdWNoIGV2ZW50cyBhbmQgaW1wbGVtZW50cyBJVG91Y2hDb250cm9sbGVyXHJcbiAqIEBwYXJhbSBkYXRhQ2hhbm5lbENvbnRyb2xsZXIgLSBUaGUgY29udHJvbGxlciBmb3IgdGhlIERhdGEgY2hhbm5lbFxyXG4gKiBAcGFyYW0gdmlkZW9FbGVtZW50UGFyZW50IC0gVGhlIHZpZGVvIHBsYXllciBET00gZWxlbWVudFxyXG4gKi9cclxuY2xhc3MgRmFrZVRvdWNoQ29udHJvbGxlciB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB0b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlciAtIFN0cmVhbSBtZXNzYWdlIGluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gdmlkZW9FbGVtZW50UHJvdmlkZXIgLSBWaWRlbyBlbGVtZW50IGluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gY29vcmRpbmF0ZUNvbnZlcnRlciAtIEEgY29vcmRpbmF0ZSBjb252ZXJ0ZXIgaW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIsIHZpZGVvRWxlbWVudFByb3ZpZGVyLCBjb29yZGluYXRlQ29udmVydGVyKSB7XHJcbiAgICAgICAgLy8gVXRpbGl0eSBmb3Iga2VlcGluZyB0cmFjayBvZiBldmVudCBoYW5kbGVycyBhbmQgdW5yZWdpc3RlcmluZyB0aGVtXHJcbiAgICAgICAgdGhpcy50b3VjaEV2ZW50TGlzdGVuZXJUcmFja2VyID0gbmV3IF9VdGlsX0V2ZW50TGlzdGVuZXJUcmFja2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uRXZlbnRMaXN0ZW5lclRyYWNrZXIoKTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyID0gdG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXI7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlciA9IHZpZGVvRWxlbWVudFByb3ZpZGVyO1xyXG4gICAgICAgIHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlciA9IGNvb3JkaW5hdGVDb252ZXJ0ZXI7XHJcbiAgICAgICAgY29uc3Qgb250b3VjaHN0YXJ0ID0gKGV2KSA9PiB0aGlzLm9uVG91Y2hTdGFydChldik7XHJcbiAgICAgICAgY29uc3Qgb250b3VjaGVuZCA9IChldikgPT4gdGhpcy5vblRvdWNoRW5kKGV2KTtcclxuICAgICAgICBjb25zdCBvbnRvdWNobW92ZSA9IChldikgPT4gdGhpcy5vblRvdWNoTW92ZShldik7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9udG91Y2hzdGFydCwgeyBwYXNzaXZlOiBmYWxzZSB9KTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9udG91Y2hlbmQsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgb250b3VjaG1vdmUsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XHJcbiAgICAgICAgdGhpcy50b3VjaEV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjaygoKSA9PiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb250b3VjaHN0YXJ0KSk7XHJcbiAgICAgICAgdGhpcy50b3VjaEV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjaygoKSA9PiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9udG91Y2hlbmQpKTtcclxuICAgICAgICB0aGlzLnRvdWNoRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9udG91Y2htb3ZlKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFVucmVnaXN0ZXIgYWxsIHRvdWNoIGV2ZW50c1xyXG4gICAgICovXHJcbiAgICB1bnJlZ2lzdGVyVG91Y2hFdmVudHMoKSB7XHJcbiAgICAgICAgdGhpcy50b3VjaEV2ZW50TGlzdGVuZXJUcmFja2VyLnVucmVnaXN0ZXJBbGwoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgdmlkZW8gRWxlbWVudCBQYXJlbnQgQ2xpZW50IFJlY3QgbnVtYmVycyBmb3IgdGhpcyBjbGFzc1xyXG4gICAgICogQHBhcmFtIHZpZGVvRWxlbWVudFBhcmVudENsaWVudFJlY3QgLSBhIGh0bWwgRWxlbWVudFBhcmVudENsaWVudFJlY3Qgb2JqZWN0XHJcbiAgICAgKi9cclxuICAgIHNldFZpZGVvRWxlbWVudFBhcmVudENsaWVudFJlY3QodmlkZW9FbGVtZW50UGFyZW50Q2xpZW50UmVjdCkge1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50UGFyZW50Q2xpZW50UmVjdCA9IHZpZGVvRWxlbWVudFBhcmVudENsaWVudFJlY3Q7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFdoZW4gYSB0b3VjaCBldmVudCBiZWdpbnNcclxuICAgICAqIEBwYXJhbSB0b3VjaCAtIHRoZSBhY3RpdmF0aW5nIHRvdWNoIGV2ZW50XHJcbiAgICAgKi9cclxuICAgIG9uVG91Y2hTdGFydCh0b3VjaCkge1xyXG4gICAgICAgIGlmICghdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSB8fCB0b3VjaC50YXJnZXQgIT09IHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuZ2V0VmlkZW9FbGVtZW50KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5mYWtlVG91Y2hGaW5nZXIgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjb25zdCBmaXJzdF90b3VjaCA9IHRvdWNoLmNoYW5nZWRUb3VjaGVzWzBdO1xyXG4gICAgICAgICAgICB0aGlzLmZha2VUb3VjaEZpbmdlciA9IG5ldyBGYWtlVG91Y2hGaW5nZXIoZmlyc3RfdG91Y2guaWRlbnRpZmllciwgZmlyc3RfdG91Y2guY2xpZW50WCAtIHRoaXMudmlkZW9FbGVtZW50UGFyZW50Q2xpZW50UmVjdC5sZWZ0LCBmaXJzdF90b3VjaC5jbGllbnRZIC0gdGhpcy52aWRlb0VsZW1lbnRQYXJlbnRDbGllbnRSZWN0LnRvcCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHZpZGVvRWxlbWVudFBhcmVudCA9IHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuZ2V0VmlkZW9QYXJlbnRFbGVtZW50KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG1vdXNlRXZlbnQgPSBuZXcgTW91c2VFdmVudCgnbW91c2VlbnRlcicsIGZpcnN0X3RvdWNoKTtcclxuICAgICAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LmRpc3BhdGNoRXZlbnQobW91c2VFdmVudCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvb3JkID0gdGhpcy5jb29yZGluYXRlQ29udmVydGVyLm5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWQodGhpcy5mYWtlVG91Y2hGaW5nZXIueCwgdGhpcy5mYWtlVG91Y2hGaW5nZXIueSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRvU3RyZWFtZXJIYW5kbGVycyA9IHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzO1xyXG4gICAgICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdNb3VzZURvd24nKShbXHJcbiAgICAgICAgICAgICAgICBfTW91c2VCdXR0b25zX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTW91c2VCdXR0b24ubWFpbkJ1dHRvbixcclxuICAgICAgICAgICAgICAgIGNvb3JkLngsXHJcbiAgICAgICAgICAgICAgICBjb29yZC55XHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0b3VjaC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBXaGVuIGEgdG91Y2ggZXZlbnQgZW5kc1xyXG4gICAgICogQHBhcmFtIHRvdWNoRXZlbnQgLSB0aGUgYWN0aXZhdGluZyB0b3VjaCBldmVudFxyXG4gICAgICovXHJcbiAgICBvblRvdWNoRW5kKHRvdWNoRXZlbnQpIHtcclxuICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkgfHwgdGhpcy5mYWtlVG91Y2hGaW5nZXIgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHZpZGVvRWxlbWVudFBhcmVudCA9IHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuZ2V0VmlkZW9QYXJlbnRFbGVtZW50KCk7XHJcbiAgICAgICAgY29uc3QgdG9TdHJlYW1lckhhbmRsZXJzID0gdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnM7XHJcbiAgICAgICAgZm9yIChsZXQgdCA9IDA7IHQgPCB0b3VjaEV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aDsgdCsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRvdWNoID0gdG91Y2hFdmVudC5jaGFuZ2VkVG91Y2hlc1t0XTtcclxuICAgICAgICAgICAgaWYgKHRvdWNoLmlkZW50aWZpZXIgPT09IHRoaXMuZmFrZVRvdWNoRmluZ2VyLmlkKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB4ID0gdG91Y2guY2xpZW50WCAtIHRoaXMudmlkZW9FbGVtZW50UGFyZW50Q2xpZW50UmVjdC5sZWZ0O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeSA9IHRvdWNoLmNsaWVudFkgLSB0aGlzLnZpZGVvRWxlbWVudFBhcmVudENsaWVudFJlY3QudG9wO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29vcmQgPSB0aGlzLmNvb3JkaW5hdGVDb252ZXJ0ZXIubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZCh4LCB5KTtcclxuICAgICAgICAgICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ01vdXNlVXAnKShbXHJcbiAgICAgICAgICAgICAgICAgICAgX01vdXNlQnV0dG9uc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLk1vdXNlQnV0dG9uLm1haW5CdXR0b24sXHJcbiAgICAgICAgICAgICAgICAgICAgY29vcmQueCxcclxuICAgICAgICAgICAgICAgICAgICBjb29yZC55XHJcbiAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vdXNlRXZlbnQgPSBuZXcgTW91c2VFdmVudCgnbW91c2VsZWF2ZScsIHRvdWNoKTtcclxuICAgICAgICAgICAgICAgIHZpZGVvRWxlbWVudFBhcmVudC5kaXNwYXRjaEV2ZW50KG1vdXNlRXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mYWtlVG91Y2hGaW5nZXIgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdG91Y2hFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBPbiBhIE1vdmUgdG91Y2ggZXZlbnRcclxuICAgICAqIEBwYXJhbSB0b3VjaEV2ZW50IC0gdGhlIGFjdGl2YXRpbmcgdG91Y2ggZXZlbnRcclxuICAgICAqL1xyXG4gICAgb25Ub3VjaE1vdmUodG91Y2hFdmVudCkge1xyXG4gICAgICAgIGlmICghdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSB8fCB0aGlzLmZha2VUb3VjaEZpbmdlciA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdG9TdHJlYW1lckhhbmRsZXJzID0gdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnM7XHJcbiAgICAgICAgZm9yIChsZXQgdCA9IDA7IHQgPCB0b3VjaEV2ZW50LnRvdWNoZXMubGVuZ3RoOyB0KyspIHtcclxuICAgICAgICAgICAgY29uc3QgdG91Y2ggPSB0b3VjaEV2ZW50LnRvdWNoZXNbdF07XHJcbiAgICAgICAgICAgIGlmICh0b3VjaC5pZGVudGlmaWVyID09PSB0aGlzLmZha2VUb3VjaEZpbmdlci5pZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeCA9IHRvdWNoLmNsaWVudFggLSB0aGlzLnZpZGVvRWxlbWVudFBhcmVudENsaWVudFJlY3QubGVmdDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHkgPSB0b3VjaC5jbGllbnRZIC0gdGhpcy52aWRlb0VsZW1lbnRQYXJlbnRDbGllbnRSZWN0LnRvcDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvb3JkID0gdGhpcy5jb29yZGluYXRlQ29udmVydGVyLm5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWQoeCwgeSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkZWx0YSA9IHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlci5ub3JtYWxpemVBbmRRdWFudGl6ZVNpZ25lZCh4IC0gdGhpcy5mYWtlVG91Y2hGaW5nZXIueCwgeSAtIHRoaXMuZmFrZVRvdWNoRmluZ2VyLnkpO1xyXG4gICAgICAgICAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnTW91c2VNb3ZlJykoW1xyXG4gICAgICAgICAgICAgICAgICAgIGNvb3JkLngsXHJcbiAgICAgICAgICAgICAgICAgICAgY29vcmQueSxcclxuICAgICAgICAgICAgICAgICAgICBkZWx0YS54LFxyXG4gICAgICAgICAgICAgICAgICAgIGRlbHRhLnlcclxuICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mYWtlVG91Y2hGaW5nZXIueCA9IHg7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZha2VUb3VjaEZpbmdlci55ID0geTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRvdWNoRXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogVGhlIGludGVyZmFjZSBmb3IgZmluZ2VyIHBvc2l0aW9uIG1hcHBpbmdcclxuICovXHJcbmNsYXNzIEZha2VUb3VjaEZpbmdlciB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBpZCAtIHRoZSBidXR0b24gaWRcclxuICAgICAqIEBwYXJhbSB4IC0gdGhlIHggYXhpcyB2YWx1ZVxyXG4gICAgICogQHBhcmFtIHkgLSB0aGUgeSBheGlzIHZhbHVlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGlkLCB4LCB5KSB7XHJcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgICAgIHRoaXMueCA9IHg7XHJcbiAgICAgICAgdGhpcy55ID0geTtcclxuICAgIH1cclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvSW5wdXRzL0dhbWVwYWRDb250cm9sbGVyLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9JbnB1dHMvR2FtZXBhZENvbnRyb2xsZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkdhbWVQYWRDb250cm9sbGVyXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIEdhbWVQYWRDb250cm9sbGVyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJnYW1lcGFkTGF5b3V0XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIGdhbWVwYWRMYXlvdXQpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vTG9nZ2VyL0xvZ2dlciAqLyBcIi4vc3JjL0xvZ2dlci9Mb2dnZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1V0aWxfRXZlbnRMaXN0ZW5lclRyYWNrZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL1V0aWwvRXZlbnRMaXN0ZW5lclRyYWNrZXIgKi8gXCIuL3NyYy9VdGlsL0V2ZW50TGlzdGVuZXJUcmFja2VyLnRzXCIpO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcblxyXG4vKipcclxuICogVGhlIGNsYXNzIHRoYXQgaGFuZGxlcyB0aGUgZnVuY3Rpb25hbGl0eSBvZiBnYW1lcGFkcyBhbmQgY29udHJvbGxlcnNcclxuICovXHJcbmNsYXNzIEdhbWVQYWRDb250cm9sbGVyIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyIC0gU3RyZWFtIG1lc3NhZ2UgaW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIpIHtcclxuICAgICAgICAvLyBVdGlsaXR5IGZvciBrZWVwaW5nIHRyYWNrIG9mIGV2ZW50IGhhbmRsZXJzIGFuZCB1bnJlZ2lzdGVyaW5nIHRoZW1cclxuICAgICAgICB0aGlzLmdhbWVQYWRFdmVudExpc3RlbmVyVHJhY2tlciA9IG5ldyBfVXRpbF9FdmVudExpc3RlbmVyVHJhY2tlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkV2ZW50TGlzdGVuZXJUcmFja2VyKCk7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlciA9IHRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyO1xyXG4gICAgICAgIHRoaXMucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gKHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcclxuICAgICAgICAgICAgd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKS5iaW5kKHdpbmRvdyk7XHJcbiAgICAgICAgY29uc3QgYnJvd3NlcldpbmRvdyA9IHdpbmRvdztcclxuICAgICAgICBjb25zdCBvbkJlZm9yZVVubG9hZCA9IChldikgPT4gdGhpcy5vbkJlZm9yZVVubG9hZChldik7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIG9uQmVmb3JlVW5sb2FkKTtcclxuICAgICAgICBpZiAoJ0dhbWVwYWRFdmVudCcgaW4gYnJvd3NlcldpbmRvdykge1xyXG4gICAgICAgICAgICBjb25zdCBvbkdhbWVQYWRDb25uZWN0ZWQgPSAoZXYpID0+IHRoaXMuZ2FtZVBhZENvbm5lY3RIYW5kbGVyKGV2KTtcclxuICAgICAgICAgICAgY29uc3Qgb25HYW1lUGFkRGlzY29ubmVjdGVkID0gKGV2KSA9PiB0aGlzLmdhbWVQYWREaXNjb25uZWN0SGFuZGxlcihldik7XHJcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdnYW1lcGFkY29ubmVjdGVkJywgb25HYW1lUGFkQ29ubmVjdGVkKTtcclxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2dhbWVwYWRkaXNjb25uZWN0ZWQnLCBvbkdhbWVQYWREaXNjb25uZWN0ZWQpO1xyXG4gICAgICAgICAgICB0aGlzLmdhbWVQYWRFdmVudExpc3RlbmVyVHJhY2tlci5hZGRVbnJlZ2lzdGVyQ2FsbGJhY2soKCkgPT4gd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2dhbWVwYWRjb25uZWN0ZWQnLCBvbkdhbWVQYWRDb25uZWN0ZWQpKTtcclxuICAgICAgICAgICAgdGhpcy5nYW1lUGFkRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdnYW1lcGFkZGlzY29ubmVjdGVkJywgb25HYW1lUGFkRGlzY29ubmVjdGVkKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCdXZWJLaXRHYW1lcGFkRXZlbnQnIGluIGJyb3dzZXJXaW5kb3cpIHtcclxuICAgICAgICAgICAgY29uc3Qgb25XZWJraXRHYW1lUGFkQ29ubmVjdGVkID0gKGV2KSA9PiB0aGlzLmdhbWVQYWRDb25uZWN0SGFuZGxlcihldik7XHJcbiAgICAgICAgICAgIGNvbnN0IG9uV2Via2l0R2FtZVBhZERpc2Nvbm5lY3RlZCA9IChldikgPT4gdGhpcy5nYW1lUGFkRGlzY29ubmVjdEhhbmRsZXIoZXYpO1xyXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignd2Via2l0Z2FtZXBhZGNvbm5lY3RlZCcsIG9uV2Via2l0R2FtZVBhZENvbm5lY3RlZCk7XHJcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd3ZWJraXRnYW1lcGFkZGlzY29ubmVjdGVkJywgb25XZWJraXRHYW1lUGFkRGlzY29ubmVjdGVkKTtcclxuICAgICAgICAgICAgdGhpcy5nYW1lUGFkRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd3ZWJraXRnYW1lcGFkY29ubmVjdGVkJywgb25XZWJraXRHYW1lUGFkQ29ubmVjdGVkKSk7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZVBhZEV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjaygoKSA9PiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2Via2l0Z2FtZXBhZGRpc2Nvbm5lY3RlZCcsIG9uV2Via2l0R2FtZVBhZERpc2Nvbm5lY3RlZCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJzID0gW107XHJcbiAgICAgICAgaWYgKG5hdmlnYXRvci5nZXRHYW1lcGFkcykge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGdhbWVwYWQgb2YgbmF2aWdhdG9yLmdldEdhbWVwYWRzKCkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChnYW1lcGFkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lUGFkQ29ubmVjdEhhbmRsZXIobmV3IEdhbWVwYWRFdmVudCgnZ2FtZXBhZGNvbm5lY3RlZCcsIHsgZ2FtZXBhZCB9KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFVucmVnaXN0ZXJzIGFsbCBldmVudCBoYW5kbGVyc1xyXG4gICAgICovXHJcbiAgICB1bnJlZ2lzdGVyR2FtZVBhZEV2ZW50cygpIHtcclxuICAgICAgICB0aGlzLmdhbWVQYWRFdmVudExpc3RlbmVyVHJhY2tlci51bnJlZ2lzdGVyQWxsKCk7XHJcbiAgICAgICAgZm9yIChjb25zdCBjb250cm9sbGVyIG9mIHRoaXMuY29udHJvbGxlcnMpIHtcclxuICAgICAgICAgICAgaWYgKGNvbnRyb2xsZXIuaWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkdhbWVwYWREaXNjb25uZWN0ZWQoY29udHJvbGxlci5pZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVycyA9IFtdO1xyXG4gICAgICAgIHRoaXMub25HYW1lcGFkQ29ubmVjdGVkID0gKCkgPT4geyB9O1xyXG4gICAgICAgIHRoaXMub25HYW1lcGFkRGlzY29ubmVjdGVkID0gKCkgPT4geyB9O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25uZWN0cyB0aGUgZ2FtZXBhZCBoYW5kbGVyXHJcbiAgICAgKiBAcGFyYW0gZ2FtZVBhZEV2ZW50IC0gdGhlIGFjdGl2YXRpbmcgZ2FtZXBhZCBldmVudFxyXG4gICAgICovXHJcbiAgICBnYW1lUGFkQ29ubmVjdEhhbmRsZXIoZ2FtZVBhZEV2ZW50KSB7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ0dhbWVwYWQgY29ubmVjdCBoYW5kbGVyJywgNik7XHJcbiAgICAgICAgY29uc3QgZ2FtZXBhZCA9IGdhbWVQYWRFdmVudC5nYW1lcGFkO1xyXG4gICAgICAgIGNvbnN0IHRlbXAgPSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRTdGF0ZTogZ2FtZXBhZCxcclxuICAgICAgICAgICAgcHJldlN0YXRlOiBnYW1lcGFkLFxyXG4gICAgICAgICAgICBpZDogdW5kZWZpbmVkXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJzLnB1c2godGVtcCk7XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyc1tnYW1lcGFkLmluZGV4XS5jdXJyZW50U3RhdGUgPSBnYW1lcGFkO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlcnNbZ2FtZXBhZC5pbmRleF0ucHJldlN0YXRlID0gZ2FtZXBhZDtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnZ2FtZXBhZDogJyArIGdhbWVwYWQuaWQgKyAnIGNvbm5lY3RlZCcsIDYpO1xyXG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy51cGRhdGVTdGF0dXMoKSk7XHJcbiAgICAgICAgdGhpcy5vbkdhbWVwYWRDb25uZWN0ZWQoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRGlzY29ubmVjdHMgdGhlIGdhbWVwYWQgaGFuZGxlclxyXG4gICAgICogQHBhcmFtIGdhbWVQYWRFdmVudCAtIHRoZSBhY3RpdmF0aW5nIGdhbWVwYWQgZXZlbnRcclxuICAgICAqL1xyXG4gICAgZ2FtZVBhZERpc2Nvbm5lY3RIYW5kbGVyKGdhbWVQYWRFdmVudCkge1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdHYW1lcGFkIGRpc2Nvbm5lY3QgaGFuZGxlcicsIDYpO1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdnYW1lcGFkOiAnICsgZ2FtZVBhZEV2ZW50LmdhbWVwYWQuaWQgKyAnIGRpc2Nvbm5lY3RlZCcsIDYpO1xyXG4gICAgICAgIGNvbnN0IGRlbGV0ZWRDb250cm9sbGVyID0gdGhpcy5jb250cm9sbGVyc1tnYW1lUGFkRXZlbnQuZ2FtZXBhZC5pbmRleF07XHJcbiAgICAgICAgZGVsZXRlIHRoaXMuY29udHJvbGxlcnNbZ2FtZVBhZEV2ZW50LmdhbWVwYWQuaW5kZXhdO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlcnMgPSB0aGlzLmNvbnRyb2xsZXJzLmZpbHRlcigoY29udHJvbGxlcikgPT4gY29udHJvbGxlciAhPT0gdW5kZWZpbmVkKTtcclxuICAgICAgICB0aGlzLm9uR2FtZXBhZERpc2Nvbm5lY3RlZChkZWxldGVkQ29udHJvbGxlci5pZCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNjYW4gZm9yIGNvbm5lY3RlZCBnYW1lcGFkc1xyXG4gICAgICovXHJcbiAgICBzY2FuR2FtZVBhZHMoKSB7XHJcbiAgICAgICAgY29uc3QgZ2FtZXBhZHMgPSBuYXZpZ2F0b3IuZ2V0R2FtZXBhZHNcclxuICAgICAgICAgICAgPyBuYXZpZ2F0b3IuZ2V0R2FtZXBhZHMoKVxyXG4gICAgICAgICAgICA6IG5hdmlnYXRvci53ZWJraXRHZXRHYW1lcGFkc1xyXG4gICAgICAgICAgICAgICAgPyBuYXZpZ2F0b3Iud2Via2l0R2V0R2FtZXBhZHMoKVxyXG4gICAgICAgICAgICAgICAgOiBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdhbWVwYWRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChnYW1lcGFkc1tpXSAmJiBnYW1lcGFkc1tpXS5pbmRleCBpbiB0aGlzLmNvbnRyb2xsZXJzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJzW2dhbWVwYWRzW2ldLmluZGV4XS5jdXJyZW50U3RhdGUgPSBnYW1lcGFkc1tpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlcyB0aGUgc3RhdHVzIG9mIHRoZSBnYW1lcGFkIGFuZCBzZW5kcyB0aGUgaW5wdXRzXHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZVN0YXR1cygpIHtcclxuICAgICAgICB0aGlzLnNjYW5HYW1lUGFkcygpO1xyXG4gICAgICAgIGNvbnN0IHRvU3RyZWFtZXJIYW5kbGVycyA9IHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzO1xyXG4gICAgICAgIC8vIEl0ZXJhdGUgb3ZlciBtdWx0aXBsZSBjb250cm9sbGVycyBpbiB0aGUgY2FzZSB0aGUgbXVsdGlwbGUgZ2FtZXBhZHMgYXJlIGNvbm5lY3RlZFxyXG4gICAgICAgIGZvciAoY29uc3QgY29udHJvbGxlciBvZiB0aGlzLmNvbnRyb2xsZXJzKSB7XHJcbiAgICAgICAgICAgIC8vIElmIHdlIGhhdmVuJ3QgcmVjZWl2ZWQgYW4gaWQgKHBvc3NpYmxlIGlmIHVzaW5nIGFuIG9sZGVyIHZlcnNpb24gb2YgVUUpLCByZXR1cm4gdG8gb3JpZ2luYWwgZnVuY3Rpb25hbGl0eVxyXG4gICAgICAgICAgICBjb25zdCBjb250cm9sbGVySW5kZXggPSAoY29udHJvbGxlci5pZCA9PT0gdW5kZWZpbmVkKSA/IHRoaXMuY29udHJvbGxlcnMuaW5kZXhPZihjb250cm9sbGVyKSA6IGNvbnRyb2xsZXIuaWQ7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IGNvbnRyb2xsZXIuY3VycmVudFN0YXRlO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRyb2xsZXIuY3VycmVudFN0YXRlLmJ1dHRvbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRCdXR0b24gPSBjb250cm9sbGVyLmN1cnJlbnRTdGF0ZS5idXR0b25zW2ldO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJldmlvdXNCdXR0b24gPSBjb250cm9sbGVyLnByZXZTdGF0ZS5idXR0b25zW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRCdXR0b24ucHJlc3NlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHByZXNzXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT0gZ2FtZXBhZExheW91dC5MZWZ0VHJpZ2dlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgVUVzIGxlZnQgYW5hbG9nIGhhcyBhIGJ1dHRvbiBpbmRleCBvZiA1XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ0dhbWVwYWRBbmFsb2cnKShbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVySW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA1LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEJ1dHRvbi52YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaSA9PSBnYW1lcGFkTGF5b3V0LlJpZ2h0VHJpZ2dlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgVUVzIHJpZ2h0IGFuYWxvZyBoYXMgYSBidXR0b24gaW5kZXggb2YgNlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdHYW1lcGFkQW5hbG9nJykoW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgNixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRCdXR0b24udmFsdWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdHYW1lcGFkQnV0dG9uUHJlc3NlZCcpKFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJJbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0J1dHRvbi5wcmVzc2VkID8gMSA6IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIWN1cnJlbnRCdXR0b24ucHJlc3NlZCAmJiBwcmV2aW91c0J1dHRvbi5wcmVzc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVsZWFzZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09IGdhbWVwYWRMYXlvdXQuTGVmdFRyaWdnZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgIFVFcyBsZWZ0IGFuYWxvZyBoYXMgYSBidXR0b24gaW5kZXggb2YgNVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdHYW1lcGFkQW5hbG9nJykoW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgNSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGkgPT0gZ2FtZXBhZExheW91dC5SaWdodFRyaWdnZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgIFVFcyByaWdodCBhbmFsb2cgaGFzIGEgYnV0dG9uIGluZGV4IG9mIDZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnR2FtZXBhZEFuYWxvZycpKFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJJbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDYsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnR2FtZXBhZEJ1dHRvblJlbGVhc2VkJykoW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIEl0ZXJhdGUgb3ZlciBnYW1lcGFkIGF4ZXMgKHdlIHdpbGwgaW5jcmVtZW50IGluIGxvdHMgb2YgMiBhcyB0aGVyZSBpcyAyIGF4ZXMgcGVyIHN0aWNrKVxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJlbnRTdGF0ZS5heGVzLmxlbmd0aDsgaSArPSAyKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBIb3Jpem9udGFsIGF4ZXMgYXJlIGV2ZW4gbnVtYmVyZWRcclxuICAgICAgICAgICAgICAgIGNvbnN0IHggPSBwYXJzZUZsb2F0KGN1cnJlbnRTdGF0ZS5heGVzW2ldLnRvRml4ZWQoNCkpO1xyXG4gICAgICAgICAgICAgICAgLy8gVmVydGljYWwgYXhlcyBhcmUgb2RkIG51bWJlcmVkXHJcbiAgICAgICAgICAgICAgICAvLyBodHRwczovL3czYy5naXRodWIuaW8vZ2FtZXBhZC8jcmVtYXBwaW5nIEdhbWVwYWQgYnJvd3NlciBzaWRlIHN0YW5kYXJkIG1hcHBpbmcgaGFzIHBvc2l0aXZlIGRvd24sIG5lZ2F0aXZlIHVwLiBUaGlzIGlzIGRvd25yaWdodCBkaXNndXN0aW5nLiBTbyB3ZSBmaXggaXQuXHJcbiAgICAgICAgICAgICAgICBjb25zdCB5ID0gLXBhcnNlRmxvYXQoY3VycmVudFN0YXRlLmF4ZXNbaSArIDFdLnRvRml4ZWQoNCkpO1xyXG4gICAgICAgICAgICAgICAgLy8gVUUncyBhbmFsb2cgYXhlcyBmb2xsb3cgdGhlIHNhbWUgb3JkZXIgYXMgdGhlIGJyb3dzZXJzLCBidXQgc3RhcnQgYXQgaW5kZXggMSBzbyB3ZSB3aWxsIG9mZnNldCBhcyBzdWNoXHJcbiAgICAgICAgICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdHYW1lcGFkQW5hbG9nJykoW1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJJbmRleCxcclxuICAgICAgICAgICAgICAgICAgICBpICsgMSxcclxuICAgICAgICAgICAgICAgICAgICB4XHJcbiAgICAgICAgICAgICAgICBdKTsgLy8gSG9yaXpvbnRhbCBheGVzLCBvbmx5IG9mZnNldCBieSAxXHJcbiAgICAgICAgICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdHYW1lcGFkQW5hbG9nJykoW1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJJbmRleCxcclxuICAgICAgICAgICAgICAgICAgICBpICsgMixcclxuICAgICAgICAgICAgICAgICAgICB5XHJcbiAgICAgICAgICAgICAgICBdKTsgLy8gVmVydGljYWwgYXhlcywgb2Zmc2V0IGJ5IHR3byAoMSB0byBtYXRjaCBVRXMgYXhlcyBjb252ZW50aW9uIGFuZCB0aGVuIGFub3RoZXIgMSBmb3IgdGhlIHZlcnRpY2FsIGF4ZXMpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyc1tjb250cm9sbGVySW5kZXhdLnByZXZTdGF0ZSA9IGN1cnJlbnRTdGF0ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuY29udHJvbGxlcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLnVwZGF0ZVN0YXR1cygpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBvbkdhbWVwYWRSZXNwb25zZVJlY2VpdmVkKGdhbWVwYWRJZCkge1xyXG4gICAgICAgIGZvciAoY29uc3QgY29udHJvbGxlciBvZiB0aGlzLmNvbnRyb2xsZXJzKSB7XHJcbiAgICAgICAgICAgIGlmIChjb250cm9sbGVyLmlkID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuaWQgPSBnYW1lcGFkSWQ7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRXZlbnQgdG8gc2VuZCB0aGUgZ2FtZXBhZGNvbm5lY3RlZCBtZXNzYWdlIHRvIHRoZSBhcHBsaWNhdGlvblxyXG4gICAgICovXHJcbiAgICBvbkdhbWVwYWRDb25uZWN0ZWQoKSB7XHJcbiAgICAgICAgLy8gRGVmYXVsdCBGdW5jdGlvbmFsaXR5OiBEbyBOb3RoaW5nXHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEV2ZW50IHRvIHNlbmQgdGhlIGdhbWVwYWRkaXNjb25uZWN0ZWQgbWVzc2FnZSB0byB0aGUgYXBwbGljYXRpb25cclxuICAgICAqL1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgb25HYW1lcGFkRGlzY29ubmVjdGVkKGNvbnRyb2xsZXJJZHgpIHtcclxuICAgICAgICAvLyBEZWZhdWx0IEZ1bmN0aW9uYWxpdHk6IERvIE5vdGhpbmdcclxuICAgIH1cclxuICAgIG9uQmVmb3JlVW5sb2FkKGV2KSB7XHJcbiAgICAgICAgLy8gV2hlbiBhIHVzZXIgbmF2aWdhdGVzIGF3YXkgZnJvbSB0aGUgcGFnZSwgd2UgbmVlZCB0byBpbmZvcm0gVUUgb2YgYWxsIHRoZSBkaXNjb25uZWN0aW5nXHJcbiAgICAgICAgLy8gY29udHJvbGxlcnNcclxuICAgICAgICBmb3IgKGNvbnN0IGNvbnRyb2xsZXIgb2YgdGhpcy5jb250cm9sbGVycykge1xyXG4gICAgICAgICAgICB0aGlzLm9uR2FtZXBhZERpc2Nvbm5lY3RlZChjb250cm9sbGVyLmlkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEdhbWVwYWQgbGF5b3V0IGNvZGVzIGVudW1cclxuICovXHJcbnZhciBnYW1lcGFkTGF5b3V0O1xyXG4oZnVuY3Rpb24gKGdhbWVwYWRMYXlvdXQpIHtcclxuICAgIGdhbWVwYWRMYXlvdXRbZ2FtZXBhZExheW91dFtcIlJpZ2h0Q2x1c3RlckJvdHRvbUJ1dHRvblwiXSA9IDBdID0gXCJSaWdodENsdXN0ZXJCb3R0b21CdXR0b25cIjtcclxuICAgIGdhbWVwYWRMYXlvdXRbZ2FtZXBhZExheW91dFtcIlJpZ2h0Q2x1c3RlclJpZ2h0QnV0dG9uXCJdID0gMV0gPSBcIlJpZ2h0Q2x1c3RlclJpZ2h0QnV0dG9uXCI7XHJcbiAgICBnYW1lcGFkTGF5b3V0W2dhbWVwYWRMYXlvdXRbXCJSaWdodENsdXN0ZXJMZWZ0QnV0dG9uXCJdID0gMl0gPSBcIlJpZ2h0Q2x1c3RlckxlZnRCdXR0b25cIjtcclxuICAgIGdhbWVwYWRMYXlvdXRbZ2FtZXBhZExheW91dFtcIlJpZ2h0Q2x1c3RlclRvcEJ1dHRvblwiXSA9IDNdID0gXCJSaWdodENsdXN0ZXJUb3BCdXR0b25cIjtcclxuICAgIGdhbWVwYWRMYXlvdXRbZ2FtZXBhZExheW91dFtcIkxlZnRTaG91bGRlclwiXSA9IDRdID0gXCJMZWZ0U2hvdWxkZXJcIjtcclxuICAgIGdhbWVwYWRMYXlvdXRbZ2FtZXBhZExheW91dFtcIlJpZ2h0U2hvdWxkZXJcIl0gPSA1XSA9IFwiUmlnaHRTaG91bGRlclwiO1xyXG4gICAgZ2FtZXBhZExheW91dFtnYW1lcGFkTGF5b3V0W1wiTGVmdFRyaWdnZXJcIl0gPSA2XSA9IFwiTGVmdFRyaWdnZXJcIjtcclxuICAgIGdhbWVwYWRMYXlvdXRbZ2FtZXBhZExheW91dFtcIlJpZ2h0VHJpZ2dlclwiXSA9IDddID0gXCJSaWdodFRyaWdnZXJcIjtcclxuICAgIGdhbWVwYWRMYXlvdXRbZ2FtZXBhZExheW91dFtcIlNlbGVjdE9yQmFja1wiXSA9IDhdID0gXCJTZWxlY3RPckJhY2tcIjtcclxuICAgIGdhbWVwYWRMYXlvdXRbZ2FtZXBhZExheW91dFtcIlN0YXJ0T3JGb3J3YXJkXCJdID0gOV0gPSBcIlN0YXJ0T3JGb3J3YXJkXCI7XHJcbiAgICBnYW1lcGFkTGF5b3V0W2dhbWVwYWRMYXlvdXRbXCJMZWZ0QW5hbG9nUHJlc3NcIl0gPSAxMF0gPSBcIkxlZnRBbmFsb2dQcmVzc1wiO1xyXG4gICAgZ2FtZXBhZExheW91dFtnYW1lcGFkTGF5b3V0W1wiUmlnaHRBbmFsb2dQcmVzc1wiXSA9IDExXSA9IFwiUmlnaHRBbmFsb2dQcmVzc1wiO1xyXG4gICAgZ2FtZXBhZExheW91dFtnYW1lcGFkTGF5b3V0W1wiTGVmdENsdXN0ZXJUb3BCdXR0b25cIl0gPSAxMl0gPSBcIkxlZnRDbHVzdGVyVG9wQnV0dG9uXCI7XHJcbiAgICBnYW1lcGFkTGF5b3V0W2dhbWVwYWRMYXlvdXRbXCJMZWZ0Q2x1c3RlckJvdHRvbUJ1dHRvblwiXSA9IDEzXSA9IFwiTGVmdENsdXN0ZXJCb3R0b21CdXR0b25cIjtcclxuICAgIGdhbWVwYWRMYXlvdXRbZ2FtZXBhZExheW91dFtcIkxlZnRDbHVzdGVyTGVmdEJ1dHRvblwiXSA9IDE0XSA9IFwiTGVmdENsdXN0ZXJMZWZ0QnV0dG9uXCI7XHJcbiAgICBnYW1lcGFkTGF5b3V0W2dhbWVwYWRMYXlvdXRbXCJMZWZ0Q2x1c3RlclJpZ2h0QnV0dG9uXCJdID0gMTVdID0gXCJMZWZ0Q2x1c3RlclJpZ2h0QnV0dG9uXCI7XHJcbiAgICBnYW1lcGFkTGF5b3V0W2dhbWVwYWRMYXlvdXRbXCJDZW50cmVCdXR0b25cIl0gPSAxNl0gPSBcIkNlbnRyZUJ1dHRvblwiO1xyXG4gICAgLy8gQXhlc1xyXG4gICAgZ2FtZXBhZExheW91dFtnYW1lcGFkTGF5b3V0W1wiTGVmdFN0aWNrSG9yaXpvbnRhbFwiXSA9IDBdID0gXCJMZWZ0U3RpY2tIb3Jpem9udGFsXCI7XHJcbiAgICBnYW1lcGFkTGF5b3V0W2dhbWVwYWRMYXlvdXRbXCJMZWZ0U3RpY2tWZXJ0aWNhbFwiXSA9IDFdID0gXCJMZWZ0U3RpY2tWZXJ0aWNhbFwiO1xyXG4gICAgZ2FtZXBhZExheW91dFtnYW1lcGFkTGF5b3V0W1wiUmlnaHRTdGlja0hvcml6b250YWxcIl0gPSAyXSA9IFwiUmlnaHRTdGlja0hvcml6b250YWxcIjtcclxuICAgIGdhbWVwYWRMYXlvdXRbZ2FtZXBhZExheW91dFtcIlJpZ2h0U3RpY2tWZXJ0aWNhbFwiXSA9IDNdID0gXCJSaWdodFN0aWNrVmVydGljYWxcIjtcclxufSkoZ2FtZXBhZExheW91dCB8fCAoZ2FtZXBhZExheW91dCA9IHt9KSk7XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9JbnB1dHMvSG92ZXJpbmdNb3VzZUV2ZW50cy50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9JbnB1dHMvSG92ZXJpbmdNb3VzZUV2ZW50cy50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJIb3ZlcmluZ01vdXNlRXZlbnRzXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIEhvdmVyaW5nTW91c2VFdmVudHMpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vTG9nZ2VyL0xvZ2dlciAqLyBcIi4vc3JjL0xvZ2dlci9Mb2dnZXIudHNcIik7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuLyoqXHJcbiAqIFZpZGVvIFBsYXllciBtb3VzZSBIb3ZlciBoYW5kbGVyXHJcbiAqL1xyXG5jbGFzcyBIb3ZlcmluZ01vdXNlRXZlbnRzIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIG1vdXNlQ29udHJvbGxlciAtIE1vdXNlIENvbnRyb2xsZXIgaW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IobW91c2VDb250cm9sbGVyKSB7XHJcbiAgICAgICAgdGhpcy5tb3VzZUNvbnRyb2xsZXIgPSBtb3VzZUNvbnRyb2xsZXI7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFVucmVnaXN0ZXIgZXZlbnQgaGFuZGxlcnNcclxuICAgICAqL1xyXG4gICAgdW5yZWdpc3Rlck1vdXNlRXZlbnRzKCkge1xyXG4gICAgICAgIC8vIGVtcHR5IGZvciBIb3ZlcmluZ01vdXNlRXZlbnRzIGltcGxlbWVudGF0aW9uXHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZSB0aGUgbW91c2UgbW92ZSBldmVudCwgc2VuZHMgdGhlIG1vdXNlIGRhdGEgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gbW91c2VFdmVudCAtIE1vdXNlIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZU1vdXNlTW92ZVBvc2l0aW9uKG1vdXNlRXZlbnQpIHtcclxuICAgICAgICBpZiAoIXRoaXMubW91c2VDb250cm9sbGVyLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ01vdXNlTW92ZScsIDYpO1xyXG4gICAgICAgIGNvbnN0IGNvb3JkID0gdGhpcy5tb3VzZUNvbnRyb2xsZXIuY29vcmRpbmF0ZUNvbnZlcnRlci5ub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkKG1vdXNlRXZlbnQub2Zmc2V0WCwgbW91c2VFdmVudC5vZmZzZXRZKTtcclxuICAgICAgICBjb25zdCBkZWx0YSA9IHRoaXMubW91c2VDb250cm9sbGVyLmNvb3JkaW5hdGVDb252ZXJ0ZXIubm9ybWFsaXplQW5kUXVhbnRpemVTaWduZWQobW91c2VFdmVudC5tb3ZlbWVudFgsIG1vdXNlRXZlbnQubW92ZW1lbnRZKTtcclxuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPSB0aGlzLm1vdXNlQ29udHJvbGxlci50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnM7XHJcbiAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnTW91c2VNb3ZlJykoW1xyXG4gICAgICAgICAgICBjb29yZC54LFxyXG4gICAgICAgICAgICBjb29yZC55LFxyXG4gICAgICAgICAgICBkZWx0YS54LFxyXG4gICAgICAgICAgICBkZWx0YS55XHJcbiAgICAgICAgXSk7XHJcbiAgICAgICAgbW91c2VFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGUgdGhlIG1vdXNlIERvd24gZXZlbnQsIHNlbmRzIHRoZSBtb3VzZSBkYXRhIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIG1vdXNlRXZlbnQgLSBNb3VzZSBFdmVudFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVNb3VzZURvd24obW91c2VFdmVudCkge1xyXG4gICAgICAgIGlmICghdGhpcy5tb3VzZUNvbnRyb2xsZXIudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnb25Nb3VzZSBEb3duJywgNik7XHJcbiAgICAgICAgY29uc3QgY29vcmQgPSB0aGlzLm1vdXNlQ29udHJvbGxlci5jb29yZGluYXRlQ29udmVydGVyLm5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWQobW91c2VFdmVudC5vZmZzZXRYLCBtb3VzZUV2ZW50Lm9mZnNldFkpO1xyXG4gICAgICAgIGNvbnN0IHRvU3RyZWFtZXJIYW5kbGVycyA9IHRoaXMubW91c2VDb250cm9sbGVyLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcclxuICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdNb3VzZURvd24nKShbXHJcbiAgICAgICAgICAgIG1vdXNlRXZlbnQuYnV0dG9uLFxyXG4gICAgICAgICAgICBjb29yZC54LFxyXG4gICAgICAgICAgICBjb29yZC55XHJcbiAgICAgICAgXSk7XHJcbiAgICAgICAgbW91c2VFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGUgdGhlIG1vdXNlIFVwIGV2ZW50LCBzZW5kcyB0aGUgbW91c2UgZGF0YSB0byB0aGUgVUUgSW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSBtb3VzZUV2ZW50IC0gTW91c2UgRXZlbnRcclxuICAgICAqL1xyXG4gICAgaGFuZGxlTW91c2VVcChtb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLm1vdXNlQ29udHJvbGxlci52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdvbk1vdXNlIFVwJywgNik7XHJcbiAgICAgICAgY29uc3QgY29vcmQgPSB0aGlzLm1vdXNlQ29udHJvbGxlci5jb29yZGluYXRlQ29udmVydGVyLm5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWQobW91c2VFdmVudC5vZmZzZXRYLCBtb3VzZUV2ZW50Lm9mZnNldFkpO1xyXG4gICAgICAgIGNvbnN0IHRvU3RyZWFtZXJIYW5kbGVycyA9IHRoaXMubW91c2VDb250cm9sbGVyLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcclxuICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdNb3VzZVVwJykoW1xyXG4gICAgICAgICAgICBtb3VzZUV2ZW50LmJ1dHRvbixcclxuICAgICAgICAgICAgY29vcmQueCxcclxuICAgICAgICAgICAgY29vcmQueVxyXG4gICAgICAgIF0pO1xyXG4gICAgICAgIG1vdXNlRXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ29uc3VtZXMgdGhlIG1vdXNlIGNvbnRleHQgZXZlbnQuIFRoZSBVRSBpbnN0YW5jZSBoYXMgbm8gZXF1aXZhbGVudCBhbmQgZG9lc24ndCBuZWVkIHRvIGJlIGluZm9ybWVkLlxyXG4gICAgICogQHBhcmFtIG1vdXNlRXZlbnQgLSBNb3VzZSBFdmVudFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVDb250ZXh0TWVudShtb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLm1vdXNlQ29udHJvbGxlci52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1vdXNlRXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHRoZSBtb3VzZSB3aGVlbCBldmVudCwgc2VuZHMgdGhlIG1vdXNlIHdoZWVsIGRhdGEgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gd2hlZWxFdmVudCAtIE1vdXNlIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZU1vdXNlV2hlZWwod2hlZWxFdmVudCkge1xyXG4gICAgICAgIGlmICghdGhpcy5tb3VzZUNvbnRyb2xsZXIudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjb29yZCA9IHRoaXMubW91c2VDb250cm9sbGVyLmNvb3JkaW5hdGVDb252ZXJ0ZXIubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZCh3aGVlbEV2ZW50Lm9mZnNldFgsIHdoZWVsRXZlbnQub2Zmc2V0WSk7XHJcbiAgICAgICAgY29uc3QgdG9TdHJlYW1lckhhbmRsZXJzID0gdGhpcy5tb3VzZUNvbnRyb2xsZXIudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzO1xyXG4gICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ01vdXNlV2hlZWwnKShbXHJcbiAgICAgICAgICAgIHdoZWVsRXZlbnQud2hlZWxEZWx0YSxcclxuICAgICAgICAgICAgY29vcmQueCxcclxuICAgICAgICAgICAgY29vcmQueVxyXG4gICAgICAgIF0pO1xyXG4gICAgICAgIHdoZWVsRXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHRoZSBtb3VzZSBkb3VibGUgY2xpY2sgZXZlbnQsIHNlbmRzIHRoZSBtb3VzZSBkYXRhIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIG1vdXNlRXZlbnQgLSBNb3VzZSBFdmVudFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVNb3VzZURvdWJsZShtb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLm1vdXNlQ29udHJvbGxlci52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNvb3JkID0gdGhpcy5tb3VzZUNvbnRyb2xsZXIuY29vcmRpbmF0ZUNvbnZlcnRlci5ub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkKG1vdXNlRXZlbnQub2Zmc2V0WCwgbW91c2VFdmVudC5vZmZzZXRZKTtcclxuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPSB0aGlzLm1vdXNlQ29udHJvbGxlci50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnM7XHJcbiAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnTW91c2VEb3VibGUnKShbXHJcbiAgICAgICAgICAgIG1vdXNlRXZlbnQuYnV0dG9uLFxyXG4gICAgICAgICAgICBjb29yZC54LFxyXG4gICAgICAgICAgICBjb29yZC55XHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZSB0aGUgcHJlc3MgbW91c2UgYnV0dG9ucyBldmVudCwgc2VuZHMgdGhlIG1vdXNlIGRhdGEgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gbW91c2VFdmVudCAtIE1vdXNlIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZVByZXNzTW91c2VCdXR0b25zKG1vdXNlRXZlbnQpIHtcclxuICAgICAgICBpZiAoIXRoaXMubW91c2VDb250cm9sbGVyLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ29uTW91c2UgcHJlc3MnLCA2KTtcclxuICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci5wcmVzc01vdXNlQnV0dG9ucyhtb3VzZUV2ZW50LmJ1dHRvbnMsIG1vdXNlRXZlbnQub2Zmc2V0WCwgbW91c2VFdmVudC5vZmZzZXRZKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHRoZSByZWxlYXNlIG1vdXNlIGJ1dHRvbnMgZXZlbnQsIHNlbmRzIHRoZSBtb3VzZSBkYXRhIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIG1vdXNlRXZlbnQgLSBNb3VzZSBFdmVudFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVSZWxlYXNlTW91c2VCdXR0b25zKG1vdXNlRXZlbnQpIHtcclxuICAgICAgICBpZiAoIXRoaXMubW91c2VDb250cm9sbGVyLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ29uTW91c2UgcmVsZWFzZScsIDYpO1xyXG4gICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyLnJlbGVhc2VNb3VzZUJ1dHRvbnMobW91c2VFdmVudC5idXR0b25zLCBtb3VzZUV2ZW50Lm9mZnNldFgsIG1vdXNlRXZlbnQub2Zmc2V0WSk7XHJcbiAgICB9XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL0lucHV0cy9JbnB1dENsYXNzZXNGYWN0b3J5LnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL0lucHV0cy9JbnB1dENsYXNzZXNGYWN0b3J5LnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkFjdGl2ZUtleXNcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQWN0aXZlS2V5cyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiSW5wdXRDbGFzc2VzRmFjdG9yeVwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBJbnB1dENsYXNzZXNGYWN0b3J5KVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0Zha2VUb3VjaENvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vRmFrZVRvdWNoQ29udHJvbGxlciAqLyBcIi4vc3JjL0lucHV0cy9GYWtlVG91Y2hDb250cm9sbGVyLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9LZXlib2FyZENvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vS2V5Ym9hcmRDb250cm9sbGVyICovIFwiLi9zcmMvSW5wdXRzL0tleWJvYXJkQ29udHJvbGxlci50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTW91c2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL01vdXNlQ29udHJvbGxlciAqLyBcIi4vc3JjL0lucHV0cy9Nb3VzZUNvbnRyb2xsZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1RvdWNoQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9Ub3VjaENvbnRyb2xsZXIgKi8gXCIuL3NyYy9JbnB1dHMvVG91Y2hDb250cm9sbGVyLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9HYW1lcGFkQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9HYW1lcGFkQ29udHJvbGxlciAqLyBcIi4vc3JjL0lucHV0cy9HYW1lcGFkQ29udHJvbGxlci50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vQ29uZmlnL0NvbmZpZyAqLyBcIi4vc3JjL0NvbmZpZy9Db25maWcudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL0xvZ2dlci9Mb2dnZXIgKi8gXCIuL3NyYy9Mb2dnZXIvTG9nZ2VyLnRzXCIpO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGFzcyBmb3IgbWFraW5nIGFuZCBzZXR0aW5nIHVwIGlucHV0IGNsYXNzIHR5cGVzXHJcbiAqL1xyXG5jbGFzcyBJbnB1dENsYXNzZXNGYWN0b3J5IHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyIC0gU3RyZWFtIG1lc3NhZ2UgaW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSB2aWRlb0VsZW1lbnRQcm92aWRlciAtIFZpZGVvIFBsYXllciBpbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIGNvb3JkaW5hdGVDb252ZXJ0ZXIgLSBBIGNvb3JkaW5hdGVDb252ZXJ0ZXIgaW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIsIHZpZGVvRWxlbWVudFByb3ZpZGVyLCBjb29yZGluYXRlQ29udmVydGVyKSB7XHJcbiAgICAgICAgdGhpcy5hY3RpdmVLZXlzID0gbmV3IEFjdGl2ZUtleXMoKTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyID0gdG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXI7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlciA9IHZpZGVvRWxlbWVudFByb3ZpZGVyO1xyXG4gICAgICAgIHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlciA9IGNvb3JkaW5hdGVDb252ZXJ0ZXI7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlZ2lzdGVycyBicm93c2VyIGtleSBldmVudHMuXHJcbiAgICAgKi9cclxuICAgIHJlZ2lzdGVyS2V5Qm9hcmQoY29uZmlnKSB7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ1JlZ2lzdGVyIEtleWJvYXJkIEV2ZW50cycsIDcpO1xyXG4gICAgICAgIGNvbnN0IGtleWJvYXJkQ29udHJvbGxlciA9IG5ldyBfS2V5Ym9hcmRDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uS2V5Ym9hcmRDb250cm9sbGVyKHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIsIGNvbmZpZywgdGhpcy5hY3RpdmVLZXlzKTtcclxuICAgICAgICBrZXlib2FyZENvbnRyb2xsZXIucmVnaXN0ZXJLZXlCb2FyZEV2ZW50cygpO1xyXG4gICAgICAgIHJldHVybiBrZXlib2FyZENvbnRyb2xsZXI7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIHJlZ2lzdGVyIG1vdXNlIGV2ZW50cyBiYXNlZCBvbiBhIGNvbnRyb2wgdHlwZVxyXG4gICAgICogQHBhcmFtIGNvbnRyb2xTY2hlbWUgLSBpZiB0aGUgbW91c2UgaXMgZWl0aGVyIGhvdmVyaW5nIG9yIGxvY2tlZFxyXG4gICAgICovXHJcbiAgICByZWdpc3Rlck1vdXNlKGNvbnRyb2xTY2hlbWUpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnUmVnaXN0ZXIgTW91c2UgRXZlbnRzJywgNyk7XHJcbiAgICAgICAgY29uc3QgbW91c2VDb250cm9sbGVyID0gbmV3IF9Nb3VzZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5Nb3VzZUNvbnRyb2xsZXIodGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlciwgdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlciwgdGhpcy5jb29yZGluYXRlQ29udmVydGVyLCB0aGlzLmFjdGl2ZUtleXMpO1xyXG4gICAgICAgIHN3aXRjaCAoY29udHJvbFNjaGVtZSkge1xyXG4gICAgICAgICAgICBjYXNlIF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18uQ29udHJvbFNjaGVtZVR5cGUuTG9ja2VkTW91c2U6XHJcbiAgICAgICAgICAgICAgICBtb3VzZUNvbnRyb2xsZXIucmVnaXN0ZXJMb2NrZWRNb3VzZUV2ZW50cyhtb3VzZUNvbnRyb2xsZXIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXy5Db250cm9sU2NoZW1lVHlwZS5Ib3ZlcmluZ01vdXNlOlxyXG4gICAgICAgICAgICAgICAgbW91c2VDb250cm9sbGVyLnJlZ2lzdGVySG92ZXJpbmdNb3VzZUV2ZW50cyhtb3VzZUNvbnRyb2xsZXIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5JbmZvKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ3Vua25vd24gQ29udHJvbCBTY2hlbWUgVHlwZSBEZWZhdWx0aW5nIHRvIExvY2tlZCBNb3VzZSBFdmVudHMnKTtcclxuICAgICAgICAgICAgICAgIG1vdXNlQ29udHJvbGxlci5yZWdpc3RlckxvY2tlZE1vdXNlRXZlbnRzKG1vdXNlQ29udHJvbGxlcik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1vdXNlQ29udHJvbGxlcjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogcmVnaXN0ZXIgdG91Y2ggZXZlbnRzXHJcbiAgICAgKiBAcGFyYW0gZmFrZU1vdXNlVG91Y2ggLSB0aGUgZmFrZWQgbW91c2UgdG91Y2ggZXZlbnRcclxuICAgICAqL1xyXG4gICAgcmVnaXN0ZXJUb3VjaChmYWtlTW91c2VUb3VjaCwgdmlkZW9FbGVtZW50UGFyZW50Q2xpZW50UmVjdCkge1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdSZWdpc3RlcmluZyBUb3VjaCcsIDYpO1xyXG4gICAgICAgIGlmIChmYWtlTW91c2VUb3VjaCkge1xyXG4gICAgICAgICAgICBjb25zdCBmYWtlVG91Y2hDb250cm9sbGVyID0gbmV3IF9GYWtlVG91Y2hDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uRmFrZVRvdWNoQ29udHJvbGxlcih0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLCB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLCB0aGlzLmNvb3JkaW5hdGVDb252ZXJ0ZXIpO1xyXG4gICAgICAgICAgICBmYWtlVG91Y2hDb250cm9sbGVyLnNldFZpZGVvRWxlbWVudFBhcmVudENsaWVudFJlY3QodmlkZW9FbGVtZW50UGFyZW50Q2xpZW50UmVjdCk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWtlVG91Y2hDb250cm9sbGVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBfVG91Y2hDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18uVG91Y2hDb250cm9sbGVyKHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIsIHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIsIHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiByZWdpc3RlcnMgYSBnYW1lcGFkXHJcbiAgICAgKi9cclxuICAgIHJlZ2lzdGVyR2FtZVBhZCgpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnUmVnaXN0ZXIgR2FtZSBQYWQnLCA3KTtcclxuICAgICAgICBjb25zdCBnYW1lUGFkQ29udHJvbGxlciA9IG5ldyBfR2FtZXBhZENvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXy5HYW1lUGFkQ29udHJvbGxlcih0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyKTtcclxuICAgICAgICByZXR1cm4gZ2FtZVBhZENvbnRyb2xsZXI7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEEgY2xhc3MgdGhhdCBrZWVwcyB0cmFjayBvZiBjdXJyZW50IGFjdGl2ZSBrZXlzXHJcbiAqL1xyXG5jbGFzcyBBY3RpdmVLZXlzIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuYWN0aXZlS2V5cyA9IFtdO1xyXG4gICAgICAgIHRoaXMuYWN0aXZlS2V5cyA9IFtdO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIGN1cnJlbnQgYXJyYXkgb2YgYWN0aXZlIGtleXNcclxuICAgICAqIEByZXR1cm5zIC0gYW4gYXJyYXkgb2YgYWN0aXZlIGtleXNcclxuICAgICAqL1xyXG4gICAgZ2V0QWN0aXZlS2V5cygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hY3RpdmVLZXlzO1xyXG4gICAgfVxyXG59XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9JbnB1dHMvS2V5Ym9hcmRDb250cm9sbGVyLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvSW5wdXRzL0tleWJvYXJkQ29udHJvbGxlci50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIktleWJvYXJkQ29udHJvbGxlclwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBLZXlib2FyZENvbnRyb2xsZXIpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfU3BlY2lhbEtleUNvZGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1NwZWNpYWxLZXlDb2RlcyAqLyBcIi4vc3JjL0lucHV0cy9TcGVjaWFsS2V5Q29kZXMudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL0xvZ2dlci9Mb2dnZXIgKi8gXCIuL3NyYy9Mb2dnZXIvTG9nZ2VyLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9Db25maWcvQ29uZmlnICovIFwiLi9zcmMvQ29uZmlnL0NvbmZpZy50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfVXRpbF9FdmVudExpc3RlbmVyVHJhY2tlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vVXRpbC9FdmVudExpc3RlbmVyVHJhY2tlciAqLyBcIi4vc3JjL1V0aWwvRXZlbnRMaXN0ZW5lclRyYWNrZXIudHNcIik7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEhhbmRsZXMgdGhlIEtleWJvYXJkIElucHV0cyBmb3IgdGhlIGRvY3VtZW50XHJcbiAqL1xyXG5jbGFzcyBLZXlib2FyZENvbnRyb2xsZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gdG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIgU3RyZWFtIG1lc3NhZ2UgcHJvdmlkZXIgY2xhc3Mgb2JqZWN0XHJcbiAgICAgKiBAcGFyYW0gY29uZmlnIFRoZSBhcHBsaWNhdGlvbnMgY29uZmlndXJhdGlvbi4gV2UncmUgaW50ZXJlc3RlZCBpbiB0aGUgc3VwcHJlc3MgYnJvd3NlciBrZXlzIG9wdGlvblxyXG4gICAgICogQHBhcmFtIGFjdGl2ZUtleXNQcm92aWRlciBBY3RpdmUga2V5cyBwcm92aWRlciBjbGFzcyBvYmplY3RcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIsIGNvbmZpZywgYWN0aXZlS2V5c1Byb3ZpZGVyKSB7XHJcbiAgICAgICAgLy8gVXRpbGl0eSBmb3Iga2VlcGluZyB0cmFjayBvZiBldmVudCBoYW5kbGVycyBhbmQgdW5yZWdpc3RlcmluZyB0aGVtXHJcbiAgICAgICAgdGhpcy5rZXlib2FyZEV2ZW50TGlzdGVuZXJUcmFja2VyID0gbmV3IF9VdGlsX0V2ZW50TGlzdGVuZXJUcmFja2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uRXZlbnRMaXN0ZW5lclRyYWNrZXIoKTtcclxuICAgICAgICAvKlxyXG4gICAgICAgICAqIE5ldyBicm93c2VyIEFQSXMgaGF2ZSBtb3ZlZCBhd2F5IGZyb20gS2V5Ym9hcmRFdmVudC5rZXlDb2RlIHRvIEtleWJvYXJkRXZlbnQuQ29kZS5cclxuICAgICAgICAgKiBGb3IgZGV0YWlscyBzZWU6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50L2tleUNvZGUjY29uc3RhbnRzX2Zvcl9rZXljb2RlX3ZhbHVlXHJcbiAgICAgICAgICogV2Ugc3RpbGwgdXNlIG9sZCBLZXlib2FyZEV2ZW50LmtleUNvZGUgaW50ZWdlcnMgaW4gdGhlIFVFIEMrKyBzaWRlLCBzbyB3ZSBuZWVkIGEgd2F5IHRvIG1hcCB0aGUgbmV3XHJcbiAgICAgICAgICogc3RyaW5nLWJhc2VkIEtleWJvYXJkRXZlbnQuQ29kZSB0byB0aGUgb2xkIGludGVnZXJzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuQ29kZVRvS2V5Q29kZSA9IHtcclxuICAgICAgICAgICAgRXNjYXBlOiAyNyxcclxuICAgICAgICAgICAgRGlnaXQwOiA0OCxcclxuICAgICAgICAgICAgRGlnaXQxOiA0OSxcclxuICAgICAgICAgICAgRGlnaXQyOiA1MCxcclxuICAgICAgICAgICAgRGlnaXQzOiA1MSxcclxuICAgICAgICAgICAgRGlnaXQ0OiA1MixcclxuICAgICAgICAgICAgRGlnaXQ1OiA1MyxcclxuICAgICAgICAgICAgRGlnaXQ2OiA1NCxcclxuICAgICAgICAgICAgRGlnaXQ3OiA1NSxcclxuICAgICAgICAgICAgRGlnaXQ4OiA1NixcclxuICAgICAgICAgICAgRGlnaXQ5OiA1NyxcclxuICAgICAgICAgICAgTWludXM6IDE3MyxcclxuICAgICAgICAgICAgRXF1YWw6IDE4NyxcclxuICAgICAgICAgICAgQmFja3NwYWNlOiA4LFxyXG4gICAgICAgICAgICBUYWI6IDksXHJcbiAgICAgICAgICAgIEtleVE6IDgxLFxyXG4gICAgICAgICAgICBLZXlXOiA4NyxcclxuICAgICAgICAgICAgS2V5RTogNjksXHJcbiAgICAgICAgICAgIEtleVI6IDgyLFxyXG4gICAgICAgICAgICBLZXlUOiA4NCxcclxuICAgICAgICAgICAgS2V5WTogODksXHJcbiAgICAgICAgICAgIEtleVU6IDg1LFxyXG4gICAgICAgICAgICBLZXlJOiA3MyxcclxuICAgICAgICAgICAgS2V5TzogNzksXHJcbiAgICAgICAgICAgIEtleVA6IDgwLFxyXG4gICAgICAgICAgICBCcmFja2V0TGVmdDogMjE5LFxyXG4gICAgICAgICAgICBCcmFja2V0UmlnaHQ6IDIyMSxcclxuICAgICAgICAgICAgRW50ZXI6IDEzLFxyXG4gICAgICAgICAgICBDb250cm9sTGVmdDogMTcsXHJcbiAgICAgICAgICAgIEtleUE6IDY1LFxyXG4gICAgICAgICAgICBLZXlTOiA4MyxcclxuICAgICAgICAgICAgS2V5RDogNjgsXHJcbiAgICAgICAgICAgIEtleUY6IDcwLFxyXG4gICAgICAgICAgICBLZXlHOiA3MSxcclxuICAgICAgICAgICAgS2V5SDogNzIsXHJcbiAgICAgICAgICAgIEtleUo6IDc0LFxyXG4gICAgICAgICAgICBLZXlLOiA3NSxcclxuICAgICAgICAgICAgS2V5TDogNzYsXHJcbiAgICAgICAgICAgIFNlbWljb2xvbjogMTg2LFxyXG4gICAgICAgICAgICBRdW90ZTogMjIyLFxyXG4gICAgICAgICAgICBCYWNrcXVvdGU6IDE5MixcclxuICAgICAgICAgICAgU2hpZnRMZWZ0OiAxNixcclxuICAgICAgICAgICAgQmFja3NsYXNoOiAyMjAsXHJcbiAgICAgICAgICAgIEtleVo6IDkwLFxyXG4gICAgICAgICAgICBLZXlYOiA4OCxcclxuICAgICAgICAgICAgS2V5QzogNjcsXHJcbiAgICAgICAgICAgIEtleVY6IDg2LFxyXG4gICAgICAgICAgICBLZXlCOiA2NixcclxuICAgICAgICAgICAgS2V5TjogNzgsXHJcbiAgICAgICAgICAgIEtleU06IDc3LFxyXG4gICAgICAgICAgICBDb21tYTogMTg4LFxyXG4gICAgICAgICAgICBQZXJpb2Q6IDE5MCxcclxuICAgICAgICAgICAgU2xhc2g6IDE5MSxcclxuICAgICAgICAgICAgU2hpZnRSaWdodDogMjUzLFxyXG4gICAgICAgICAgICBBbHRMZWZ0OiAxOCxcclxuICAgICAgICAgICAgU3BhY2U6IDMyLFxyXG4gICAgICAgICAgICBDYXBzTG9jazogMjAsXHJcbiAgICAgICAgICAgIEYxOiAxMTIsXHJcbiAgICAgICAgICAgIEYyOiAxMTMsXHJcbiAgICAgICAgICAgIEYzOiAxMTQsXHJcbiAgICAgICAgICAgIEY0OiAxMTUsXHJcbiAgICAgICAgICAgIEY1OiAxMTYsXHJcbiAgICAgICAgICAgIEY2OiAxMTcsXHJcbiAgICAgICAgICAgIEY3OiAxMTgsXHJcbiAgICAgICAgICAgIEY4OiAxMTksXHJcbiAgICAgICAgICAgIEY5OiAxMjAsXHJcbiAgICAgICAgICAgIEYxMDogMTIxLFxyXG4gICAgICAgICAgICBGMTE6IDEyMixcclxuICAgICAgICAgICAgRjEyOiAxMjMsXHJcbiAgICAgICAgICAgIFBhdXNlOiAxOSxcclxuICAgICAgICAgICAgU2Nyb2xsTG9jazogMTQ1LFxyXG4gICAgICAgICAgICBOdW1wYWREaXZpZGU6IDExMSxcclxuICAgICAgICAgICAgTnVtcGFkTXVsdGlwbHk6IDEwNixcclxuICAgICAgICAgICAgTnVtcGFkU3VidHJhY3Q6IDEwOSxcclxuICAgICAgICAgICAgTnVtcGFkQWRkOiAxMDcsXHJcbiAgICAgICAgICAgIE51bXBhZERlY2ltYWw6IDExMCxcclxuICAgICAgICAgICAgTnVtcGFkOTogMTA1LFxyXG4gICAgICAgICAgICBOdW1wYWQ4OiAxMDQsXHJcbiAgICAgICAgICAgIE51bXBhZDc6IDEwMyxcclxuICAgICAgICAgICAgTnVtcGFkNjogMTAyLFxyXG4gICAgICAgICAgICBOdW1wYWQ1OiAxMDEsXHJcbiAgICAgICAgICAgIE51bXBhZDQ6IDEwMCxcclxuICAgICAgICAgICAgTnVtcGFkMzogOTksXHJcbiAgICAgICAgICAgIE51bXBhZDI6IDk4LFxyXG4gICAgICAgICAgICBOdW1wYWQxOiA5NyxcclxuICAgICAgICAgICAgTnVtcGFkMDogOTYsXHJcbiAgICAgICAgICAgIE51bUxvY2s6IDE0NCxcclxuICAgICAgICAgICAgQ29udHJvbFJpZ2h0OiAyNTQsXHJcbiAgICAgICAgICAgIEFsdFJpZ2h0OiAyNTUsXHJcbiAgICAgICAgICAgIEhvbWU6IDM2LFxyXG4gICAgICAgICAgICBFbmQ6IDM1LFxyXG4gICAgICAgICAgICBBcnJvd1VwOiAzOCxcclxuICAgICAgICAgICAgQXJyb3dMZWZ0OiAzNyxcclxuICAgICAgICAgICAgQXJyb3dSaWdodDogMzksXHJcbiAgICAgICAgICAgIEFycm93RG93bjogNDAsXHJcbiAgICAgICAgICAgIFBhZ2VVcDogMzMsXHJcbiAgICAgICAgICAgIFBhZ2VEb3duOiAzNCxcclxuICAgICAgICAgICAgSW5zZXJ0OiA0NSxcclxuICAgICAgICAgICAgRGVsZXRlOiA0NixcclxuICAgICAgICAgICAgQ29udGV4dE1lbnU6IDkzXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyID0gdG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXI7XHJcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XHJcbiAgICAgICAgdGhpcy5hY3RpdmVLZXlzUHJvdmlkZXIgPSBhY3RpdmVLZXlzUHJvdmlkZXI7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlZ2lzdGVycyBkb2N1bWVudCBrZXlib2FyZCBldmVudHMgd2l0aCB0aGUgY29udHJvbGxlclxyXG4gICAgICovXHJcbiAgICByZWdpc3RlcktleUJvYXJkRXZlbnRzKCkge1xyXG4gICAgICAgIGNvbnN0IGNvbXBvc2l0aW9uRW5kSGFuZGxlciA9IChldikgPT4gdGhpcy5oYW5kbGVPbkNvbXBvc2l0aW9uRW5kKGV2KTtcclxuICAgICAgICBjb25zdCBrZXlEb3duSGFuZGxlciA9IChldikgPT4gdGhpcy5oYW5kbGVPbktleURvd24oZXYpO1xyXG4gICAgICAgIGNvbnN0IGtleVVwSGFuZGxlciA9IChldikgPT4gdGhpcy5oYW5kbGVPbktleVVwKGV2KTtcclxuICAgICAgICBjb25zdCBrZXlQcmVzc0hhbmRsZXIgPSAoZXYpID0+IHRoaXMuaGFuZGxlT25LZXlQcmVzcyhldik7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNvbXBvc2l0aW9uZW5kXCIsIGNvbXBvc2l0aW9uRW5kSGFuZGxlcik7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwga2V5RG93bkhhbmRsZXIpO1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCBrZXlVcEhhbmRsZXIpO1xyXG4gICAgICAgIC8vVGhpcyBoYXMgYmVlbiBkZXByZWNhdGVkIGFzIGF0IEp1biAxMyAyMDIxXHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleXByZXNzXCIsIGtleVByZXNzSGFuZGxlcik7XHJcbiAgICAgICAgdGhpcy5rZXlib2FyZEV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjaygoKSA9PiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY29tcG9zaXRpb25lbmRcIiwgY29tcG9zaXRpb25FbmRIYW5kbGVyKSk7XHJcbiAgICAgICAgdGhpcy5rZXlib2FyZEV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjaygoKSA9PiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBrZXlEb3duSGFuZGxlcikpO1xyXG4gICAgICAgIHRoaXMua2V5Ym9hcmRFdmVudExpc3RlbmVyVHJhY2tlci5hZGRVbnJlZ2lzdGVyQ2FsbGJhY2soKCkgPT4gZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIGtleVVwSGFuZGxlcikpO1xyXG4gICAgICAgIHRoaXMua2V5Ym9hcmRFdmVudExpc3RlbmVyVHJhY2tlci5hZGRVbnJlZ2lzdGVyQ2FsbGJhY2soKCkgPT4gZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleXByZXNzXCIsIGtleVByZXNzSGFuZGxlcikpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBVbnJlZ2lzdGVycyBkb2N1bWVudCBrZXlib2FyZCBldmVudHNcclxuICAgICAqL1xyXG4gICAgdW5yZWdpc3RlcktleUJvYXJkRXZlbnRzKCkge1xyXG4gICAgICAgIHRoaXMua2V5Ym9hcmRFdmVudExpc3RlbmVyVHJhY2tlci51bnJlZ2lzdGVyQWxsKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgV2hlbiBhIGtleSBpcyBkb3duXHJcbiAgICAgKiBAcGFyYW0ga2V5Ym9hcmRFdmVudCAtIEtleWJvYXJkIGV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZU9uS2V5RG93bihrZXlib2FyZEV2ZW50KSB7XHJcbiAgICAgICAgY29uc3Qga2V5Q29kZSA9IHRoaXMuZ2V0S2V5Y29kZShrZXlib2FyZEV2ZW50KTtcclxuICAgICAgICBpZiAoIWtleUNvZGUgfHwga2V5Q29kZSA9PT0gMjI5KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYGtleSBkb3duICR7a2V5Q29kZX0sIHJlcGVhdCA9ICR7a2V5Ym9hcmRFdmVudC5yZXBlYXR9YCwgNik7XHJcbiAgICAgICAgY29uc3QgdG9TdHJlYW1lckhhbmRsZXJzID0gdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnM7XHJcbiAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnS2V5RG93bicpKFtcclxuICAgICAgICAgICAgdGhpcy5nZXRLZXljb2RlKGtleWJvYXJkRXZlbnQpLFxyXG4gICAgICAgICAgICBrZXlib2FyZEV2ZW50LnJlcGVhdCA/IDEgOiAwXHJcbiAgICAgICAgXSk7XHJcbiAgICAgICAgY29uc3QgYWN0aXZlS2V5cyA9IHRoaXMuYWN0aXZlS2V5c1Byb3ZpZGVyLmdldEFjdGl2ZUtleXMoKTtcclxuICAgICAgICBhY3RpdmVLZXlzLnB1c2goa2V5Q29kZSk7XHJcbiAgICAgICAgLy8gQmFja3NwYWNlIGlzIG5vdCBjb25zaWRlcmVkIGEga2V5cHJlc3MgaW4gSmF2YVNjcmlwdCBidXQgd2UgbmVlZCBpdFxyXG4gICAgICAgIC8vIHRvIGJlIHNvIGNoYXJhY3RlcnMgbWF5IGJlIGRlbGV0ZWQgaW4gYSBVRSB0ZXh0IGVudHJ5IGZpZWxkLlxyXG4gICAgICAgIGlmIChrZXlDb2RlID09PSBfU3BlY2lhbEtleUNvZGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uU3BlY2lhbEtleUNvZGVzLmJhY2tTcGFjZSkge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBLZXlib2FyZEV2ZW50KCdrZXlwcmVzcycsIHtcclxuICAgICAgICAgICAgICAgIGNoYXJDb2RlOiBfU3BlY2lhbEtleUNvZGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uU3BlY2lhbEtleUNvZGVzLmJhY2tTcGFjZVxyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18uRmxhZ3MuU3VwcHJlc3NCcm93c2VyS2V5cykgJiZcclxuICAgICAgICAgICAgdGhpcy5pc0tleUNvZGVCcm93c2VyS2V5KGtleUNvZGUpKSB7XHJcbiAgICAgICAgICAgIGtleWJvYXJkRXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGhhbmRsZXMgd2hlbiBhIGtleSBpcyB1cFxyXG4gICAgICogQHBhcmFtIGtleWJvYXJkRXZlbnQgLSBLZXlib2FyZCBldmVudFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVPbktleVVwKGtleWJvYXJkRXZlbnQpIHtcclxuICAgICAgICBjb25zdCBrZXlDb2RlID0gdGhpcy5nZXRLZXljb2RlKGtleWJvYXJkRXZlbnQpO1xyXG4gICAgICAgIGlmICgha2V5Q29kZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBrZXkgdXAgJHtrZXlDb2RlfWAsIDYpO1xyXG4gICAgICAgIGNvbnN0IHRvU3RyZWFtZXJIYW5kbGVycyA9IHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzO1xyXG4gICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ0tleVVwJykoW2tleUNvZGVdKTtcclxuICAgICAgICBpZiAodGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fLkZsYWdzLlN1cHByZXNzQnJvd3NlcktleXMpICYmXHJcbiAgICAgICAgICAgIHRoaXMuaXNLZXlDb2RlQnJvd3NlcktleShrZXlDb2RlKSkge1xyXG4gICAgICAgICAgICBrZXlib2FyZEV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIHdoZW4gYSBrZXkgaXMgcHJlc3NcclxuICAgICAqIEBwYXJhbSBrZXlib2FyZCAtIEtleWJvYXJkIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZU9uS2V5UHJlc3Moa2V5Ym9hcmQpIHtcclxuICAgICAgICBpZiAoISgnY2hhckNvZGUnIGluIGtleWJvYXJkKSkge1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5XYXJuaW5nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ0tleWJvYXJkRXZlbnQuY2hhckNvZGUgaXMgZGVwcmVjYXRlZCBpbiB0aGlzIGJyb3dzZXIsIGNhbm5vdCBzZW5kIGtleSBwcmVzcy4nKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjaGFyQ29kZSA9IGtleWJvYXJkLmNoYXJDb2RlO1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBrZXkgcHJlc3MgJHtjaGFyQ29kZX1gLCA2KTtcclxuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPSB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcclxuICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdLZXlQcmVzcycpKFtjaGFyQ29kZV0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGUgd2hlbmV2ZXIgY29tcG9zaXRpb24gZW5kcyAoZWcgY2hpbmVzZSBzaW1wbGlmaWVkKVxyXG4gICAgICogQHBhcmFtIGNvbXBvc2l0aW9uRXZlbnQgLSB0aGUgY29tcG9zaXRpb24gZXZlbnRcclxuICAgICAqL1xyXG4gICAgaGFuZGxlT25Db21wb3NpdGlvbkVuZChjb21wb3NpdGlvbkV2ZW50KSB7XHJcbiAgICAgICAgaWYgKGNvbXBvc2l0aW9uRXZlbnQuZGF0YSAmJiBjb21wb3NpdGlvbkV2ZW50LmRhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGNvbXBvc2l0aW9uRXZlbnQuZGF0YS5zcGxpdCgnJykuZm9yRWFjaCgoY2hhcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBrZXlkb3duLCBrZXlwcmVzcywga2V5dXAgZmxvdyBpcyByZXF1aXJlZCB0byBtaW1pYyB0aGUgd2F5IGNoYXJhY3RlcnMgYXJlIFxyXG4gICAgICAgICAgICAgICAgLy8gbm9ybWFsbHkgdHJpZ2dlcmVkXHJcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZU9uS2V5RG93bihuZXcgS2V5Ym9hcmRFdmVudCgna2V5ZG93bicsIHtcclxuICAgICAgICAgICAgICAgICAgICBrZXlDb2RlOiBjaGFyLnRvVXBwZXJDYXNlKCkuY2hhckNvZGVBdCgwKSxcclxuICAgICAgICAgICAgICAgICAgICBjaGFyQ29kZTogY2hhci5jaGFyQ29kZUF0KDApXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZU9uS2V5UHJlc3MobmV3IEtleWJvYXJkRXZlbnQoJ2tleXByZXNzJywge1xyXG4gICAgICAgICAgICAgICAgICAgIGtleUNvZGU6IGNoYXIudG9VcHBlckNhc2UoKS5jaGFyQ29kZUF0KDApLFxyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJDb2RlOiBjaGFyLmNoYXJDb2RlQXQoMClcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlT25LZXlVcChuZXcgS2V5Ym9hcmRFdmVudCgna2V5dXAnLCB7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5Q29kZTogY2hhci50b1VwcGVyQ2FzZSgpLmNoYXJDb2RlQXQoMCksXHJcbiAgICAgICAgICAgICAgICAgICAgY2hhckNvZGU6IGNoYXIuY2hhckNvZGVBdCgwKVxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIEtleWNvZGUgb2YgdGhlIEtleSBwcmVzc2VkXHJcbiAgICAgKiBAcGFyYW0ga2V5Ym9hcmRFdmVudCAtIEtleSBib2FyZCBFdmVudFxyXG4gICAgICogQHJldHVybnMgLSB0aGUga2V5IGNvZGUgb2YgdGhlIEtleVxyXG4gICAgICovXHJcbiAgICBnZXRLZXljb2RlKGtleWJvYXJkRXZlbnQpIHtcclxuICAgICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGtleUNvZGUgcHJvcGVydHkgYmVjYXVzZSBicm93c2VyIEFQSSBpcyBkZXByZWNhdGVkIHRoZW4gdXNlIEtleWJvYXJkRXZlbnQuY29kZSBpbnN0ZWFkLlxyXG4gICAgICAgIC8vIFNlZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0tleWJvYXJkRXZlbnQva2V5Q29kZSNjb25zdGFudHNfZm9yX2tleWNvZGVfdmFsdWVcclxuICAgICAgICBpZiAoISgna2V5Q29kZScgaW4ga2V5Ym9hcmRFdmVudCkpIHtcclxuICAgICAgICAgICAgLy8gQ29udmVydCBLZXlib2FyZEV2ZW50LmNvZGUgc3RyaW5nIGludG8gaW50ZWdlci1iYXNlZCBrZXkgY29kZSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgcmVhc29ucy5cclxuICAgICAgICAgICAgY29uc3QgZXZlbnQgPSBrZXlib2FyZEV2ZW50O1xyXG4gICAgICAgICAgICBpZiAoZXZlbnQuY29kZSBpbiB0aGlzLkNvZGVUb0tleUNvZGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLkNvZGVUb0tleUNvZGVbZXZlbnQuY29kZV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5XYXJuaW5nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYEtleWJvYXJkIGNvZGUgb2YgJHtldmVudC5jb2RlfSBpcyBub3Qgc3VwcG9ydGVkIGluIG91ciBtYXBwaW5nLCBpZ25vcmluZyB0aGlzIGtleS5gKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIElmIHdlIG1hZGUgaXQgaGVyZSBLZXlib2FyZEV2ZW50LmtleUNvZGUgaXMgc3RpbGwgc3VwcG9ydGVkIHNvIHdlIGNhbiBzYWZlbHkgdXNlIGl0LlxyXG4gICAgICAgIGlmIChrZXlib2FyZEV2ZW50LmtleUNvZGUgPT09IF9TcGVjaWFsS2V5Q29kZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5TcGVjaWFsS2V5Q29kZXMuc2hpZnQgJiZcclxuICAgICAgICAgICAga2V5Ym9hcmRFdmVudC5jb2RlID09PSAnU2hpZnRSaWdodCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9TcGVjaWFsS2V5Q29kZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5TcGVjaWFsS2V5Q29kZXMucmlnaHRTaGlmdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoa2V5Ym9hcmRFdmVudC5rZXlDb2RlID09PSBfU3BlY2lhbEtleUNvZGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uU3BlY2lhbEtleUNvZGVzLmNvbnRyb2wgJiZcclxuICAgICAgICAgICAga2V5Ym9hcmRFdmVudC5jb2RlID09PSAnQ29udHJvbFJpZ2h0Jykge1xyXG4gICAgICAgICAgICByZXR1cm4gX1NwZWNpYWxLZXlDb2Rlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlNwZWNpYWxLZXlDb2Rlcy5yaWdodENvbnRyb2w7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGtleWJvYXJkRXZlbnQua2V5Q29kZSA9PT0gX1NwZWNpYWxLZXlDb2Rlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlNwZWNpYWxLZXlDb2Rlcy5hbHQgJiZcclxuICAgICAgICAgICAga2V5Ym9hcmRFdmVudC5jb2RlID09PSAnQWx0UmlnaHQnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfU3BlY2lhbEtleUNvZGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uU3BlY2lhbEtleUNvZGVzLnJpZ2h0QWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGtleWJvYXJkRXZlbnQua2V5Q29kZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEJyb3dzZXIga2V5cyBkbyBub3QgaGF2ZSBhIGNoYXJDb2RlIHNvIHdlIG9ubHkgbmVlZCB0byB0ZXN0IGtleUNvZGUuXHJcbiAgICAgKiBAcGFyYW0ga2V5Q29kZSAtIHRoZSBicm93c2VyIGtleWNvZGUgbnVtYmVyXHJcbiAgICAgKi9cclxuICAgIGlzS2V5Q29kZUJyb3dzZXJLZXkoa2V5Q29kZSkge1xyXG4gICAgICAgIC8vIEZ1bmN0aW9uIGtleXMgb3IgdGFiIGtleSBhcmUgY29uc2lkZXJlZCBcImJyb3dzZXIga2V5c1wiIHRoYXQgd2UgbWF5IHdpc2ggdG8gc3VwcHJlc3MgYnkgcHJldmVudGluZyB0aGVtIGJlaW5nIHByb2Nlc3MgYnkgYnJvd3Nlci5cclxuICAgICAgICByZXR1cm4gKGtleUNvZGUgPj0gMTEyICYmIGtleUNvZGUgPD0gMTIzKSB8fCBrZXlDb2RlID09PSA5O1xyXG4gICAgfVxyXG59XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9JbnB1dHMvTG9ja2VkTW91c2VFdmVudHMudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL0lucHV0cy9Mb2NrZWRNb3VzZUV2ZW50cy50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiTG9ja2VkTW91c2VFdmVudHNcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gTG9ja2VkTW91c2VFdmVudHMpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vTG9nZ2VyL0xvZ2dlciAqLyBcIi4vc3JjL0xvZ2dlci9Mb2dnZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1V0aWxfRXZlbnRMaXN0ZW5lclRyYWNrZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL1V0aWwvRXZlbnRMaXN0ZW5lclRyYWNrZXIgKi8gXCIuL3NyYy9VdGlsL0V2ZW50TGlzdGVuZXJUcmFja2VyLnRzXCIpO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcblxyXG4vKipcclxuICogSGFuZGxlIHRoZSBtb3VzZSBsb2NrZWQgZXZlbnRzXHJcbiAqL1xyXG5jbGFzcyBMb2NrZWRNb3VzZUV2ZW50cyB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB2aWRlb0VsZW1lbnRQcm92aWRlciAtIFZpZGVvIFBsYXllciBpbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIG1vdXNlQ29udHJvbGxlciAtIE1vdXNlIGNvbnRyb2xsZXIgaW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSBhY3RpdmVLZXlzUHJvdmlkZXIgLSBBY3RpdmUga2V5cyBwcm92aWRlciBpbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIHBsYXllclN0eWxlQXR0cmlidXRlc1Byb3ZpZGVyIC0gUGxheWVyIHN0eWxlIGF0dHJpYnV0ZXMgaW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodmlkZW9FbGVtZW50UHJvdmlkZXIsIG1vdXNlQ29udHJvbGxlciwgYWN0aXZlS2V5c1Byb3ZpZGVyKSB7XHJcbiAgICAgICAgdGhpcy54ID0gMDtcclxuICAgICAgICB0aGlzLnkgPSAwO1xyXG4gICAgICAgIHRoaXMudXBkYXRlTW91c2VNb3ZlUG9zaXRpb25FdmVudCA9IChtb3VzZUV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTW91c2VNb3ZlUG9zaXRpb24obW91c2VFdmVudCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyBVdGlsaXR5IGZvciBrZWVwaW5nIHRyYWNrIG9mIGV2ZW50IGhhbmRsZXJzIGFuZCB1bnJlZ2lzdGVyaW5nIHRoZW1cclxuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIgPSBuZXcgX1V0aWxfRXZlbnRMaXN0ZW5lclRyYWNrZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5FdmVudExpc3RlbmVyVHJhY2tlcigpO1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIgPSB2aWRlb0VsZW1lbnRQcm92aWRlcjtcclxuICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlciA9IG1vdXNlQ29udHJvbGxlcjtcclxuICAgICAgICB0aGlzLmFjdGl2ZUtleXNQcm92aWRlciA9IGFjdGl2ZUtleXNQcm92aWRlcjtcclxuICAgICAgICBjb25zdCB2aWRlb0VsZW1lbnRQYXJlbnQgPSB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmdldFZpZGVvUGFyZW50RWxlbWVudCgpO1xyXG4gICAgICAgIHRoaXMueCA9IHZpZGVvRWxlbWVudFBhcmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCAvIDI7XHJcbiAgICAgICAgdGhpcy55ID0gdmlkZW9FbGVtZW50UGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCAvIDI7XHJcbiAgICAgICAgdGhpcy5jb29yZCA9XHJcbiAgICAgICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyLmNvb3JkaW5hdGVDb252ZXJ0ZXIubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZCh0aGlzLngsIHRoaXMueSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFVucmVnaXN0ZXJzIGFsbCBldmVudCBoYW5kbGVyc1xyXG4gICAgICovXHJcbiAgICB1bnJlZ2lzdGVyTW91c2VFdmVudHMoKSB7XHJcbiAgICAgICAgdGhpcy5tb3VzZUV2ZW50TGlzdGVuZXJUcmFja2VyLnVucmVnaXN0ZXJBbGwoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHdoZW4gdGhlIGxvY2tlZCBzdGF0ZSBDaGFuZ2VkXHJcbiAgICAgKi9cclxuICAgIGxvY2tTdGF0ZUNoYW5nZSgpIHtcclxuICAgICAgICBjb25zdCB2aWRlb0VsZW1lbnRQYXJlbnQgPSB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmdldFZpZGVvUGFyZW50RWxlbWVudCgpO1xyXG4gICAgICAgIGNvbnN0IHRvU3RyZWFtZXJIYW5kbGVycyA9IHRoaXMubW91c2VDb250cm9sbGVyLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcclxuICAgICAgICBpZiAoZG9jdW1lbnQucG9pbnRlckxvY2tFbGVtZW50ID09PSB2aWRlb0VsZW1lbnRQYXJlbnQgfHxcclxuICAgICAgICAgICAgZG9jdW1lbnQubW96UG9pbnRlckxvY2tFbGVtZW50ID09PSB2aWRlb0VsZW1lbnRQYXJlbnQpIHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ1BvaW50ZXIgbG9ja2VkJywgNik7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMudXBkYXRlTW91c2VNb3ZlUG9zaXRpb25FdmVudCwgZmFsc2UpO1xyXG4gICAgICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMudXBkYXRlTW91c2VNb3ZlUG9zaXRpb25FdmVudCwgZmFsc2UpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdUaGUgcG9pbnRlciBsb2NrIHN0YXR1cyBpcyBub3cgdW5sb2NrZWQnLCA2KTtcclxuICAgICAgICAgICAgLy8gIWEgbmV3IGFycm93IGZ1bmN0aW9uIG11c3Qgbm90IGJlIHVzZWQgaGVyZSBhcyBpdCB3aWxsIGJlIGNvdW50ZWQgYXMgYSBuZXcgZnVuY3Rpb24gdGhhdCBjYW5ub3QgYmUgcmVtb3ZlZFxyXG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLnVwZGF0ZU1vdXNlTW92ZVBvc2l0aW9uRXZlbnQsIGZhbHNlKTtcclxuICAgICAgICAgICAgLy8gSWYgbW91c2UgbG9zZXMgZm9jdXMsIHNlbmQgYSBrZXkgdXAgZm9yIGFsbCBvZiB0aGUgY3VycmVudGx5IGhlbGQtZG93biBrZXlzXHJcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgbmVjZXNzYXJ5IGFzIHdoZW4gdGhlIG1vdXNlIGxvc2VzIGZvY3VzLCB0aGUgd2luZG93cyBzdG9wcyBsaXN0ZW5pbmcgZm9yIGV2ZW50cyBhbmQgYXMgc3VjaFxyXG4gICAgICAgICAgICAvLyB0aGUga2V5dXAgbGlzdGVuZXIgd29uJ3QgZ2V0IGZpcmVkXHJcbiAgICAgICAgICAgIGxldCBhY3RpdmVLZXlzID0gdGhpcy5hY3RpdmVLZXlzUHJvdmlkZXIuZ2V0QWN0aXZlS2V5cygpO1xyXG4gICAgICAgICAgICBjb25zdCBzZXRLZXlzID0gbmV3IFNldChhY3RpdmVLZXlzKTtcclxuICAgICAgICAgICAgY29uc3QgbmV3S2V5c0l0ZXJhYmxlID0gW107XHJcbiAgICAgICAgICAgIHNldEtleXMuZm9yRWFjaCgoc2V0S2V5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBuZXdLZXlzSXRlcmFibGVbc2V0S2V5XTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIG5ld0tleXNJdGVyYWJsZS5mb3JFYWNoKCh1bmlxdWVLZXljb2RlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdLZXlVcCcpKFt1bmlxdWVLZXljb2RlXSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLyBSZXNldCB0aGUgYWN0aXZlIGtleXMgYmFjayB0byBub3RoaW5nXHJcbiAgICAgICAgICAgIGFjdGl2ZUtleXMgPSBbXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZSB0aGUgbW91c2UgbW92ZSBldmVudCwgc2VuZHMgdGhlIG1vdXNlIGRhdGEgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gbW91c2VFdmVudCAtIE1vdXNlIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZU1vdXNlTW92ZVBvc2l0aW9uKG1vdXNlRXZlbnQpIHtcclxuICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPSB0aGlzLm1vdXNlQ29udHJvbGxlci50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnM7XHJcbiAgICAgICAgY29uc3Qgc3R5bGVXaWR0aCA9IHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuZ2V0VmlkZW9QYXJlbnRFbGVtZW50KCkuY2xpZW50V2lkdGg7XHJcbiAgICAgICAgY29uc3Qgc3R5bGVIZWlnaHQgPSB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmdldFZpZGVvUGFyZW50RWxlbWVudCgpLmNsaWVudEhlaWdodDtcclxuICAgICAgICB0aGlzLnggKz0gbW91c2VFdmVudC5tb3ZlbWVudFg7XHJcbiAgICAgICAgdGhpcy55ICs9IG1vdXNlRXZlbnQubW92ZW1lbnRZO1xyXG4gICAgICAgIGlmICh0aGlzLnggPiBzdHlsZVdpZHRoKSB7XHJcbiAgICAgICAgICAgIHRoaXMueCAtPSBzdHlsZVdpZHRoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy55ID4gc3R5bGVIZWlnaHQpIHtcclxuICAgICAgICAgICAgdGhpcy55IC09IHN0eWxlSGVpZ2h0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy54IDwgMCkge1xyXG4gICAgICAgICAgICB0aGlzLnggPSBzdHlsZVdpZHRoICsgdGhpcy54O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy55IDwgMCkge1xyXG4gICAgICAgICAgICB0aGlzLnkgPSBzdHlsZUhlaWdodCAtIHRoaXMueTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb29yZCA9XHJcbiAgICAgICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyLmNvb3JkaW5hdGVDb252ZXJ0ZXIubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZCh0aGlzLngsIHRoaXMueSk7XHJcbiAgICAgICAgY29uc3QgZGVsdGEgPSB0aGlzLm1vdXNlQ29udHJvbGxlci5jb29yZGluYXRlQ29udmVydGVyLm5vcm1hbGl6ZUFuZFF1YW50aXplU2lnbmVkKG1vdXNlRXZlbnQubW92ZW1lbnRYLCBtb3VzZUV2ZW50Lm1vdmVtZW50WSk7XHJcbiAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnTW91c2VNb3ZlJykoW1xyXG4gICAgICAgICAgICB0aGlzLmNvb3JkLngsXHJcbiAgICAgICAgICAgIHRoaXMuY29vcmQueSxcclxuICAgICAgICAgICAgZGVsdGEueCxcclxuICAgICAgICAgICAgZGVsdGEueVxyXG4gICAgICAgIF0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGUgdGhlIG1vdXNlIERvd24gZXZlbnQsIHNlbmRzIHRoZSBtb3VzZSBkYXRhIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIG1vdXNlRXZlbnQgLSBNb3VzZSBFdmVudFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVNb3VzZURvd24obW91c2VFdmVudCkge1xyXG4gICAgICAgIGlmICghdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHRvU3RyZWFtZXJIYW5kbGVycyA9IHRoaXMubW91c2VDb250cm9sbGVyLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcclxuICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdNb3VzZURvd24nKShbXHJcbiAgICAgICAgICAgIG1vdXNlRXZlbnQuYnV0dG9uLFxyXG4gICAgICAgICAgICAvLyBXZSB1c2UgdGhlIHN0b3JlIHZhbHVlIG9mIHRoaXMuY29vcmQgYXMgb3Bwb3NlZCB0byB0aGUgbW91c2VFdmVudC54L3kgYXMgdGhlIG1vdXNlRXZlbnQgbG9jYXRpb25cclxuICAgICAgICAgICAgLy8gdXNlcyB0aGUgc3lzdGVtIGN1cnNvciBsb2NhdGlvbiB3aGljaCBoYXNuJ3QgbW92ZWRcclxuICAgICAgICAgICAgdGhpcy5jb29yZC54LFxyXG4gICAgICAgICAgICB0aGlzLmNvb3JkLnlcclxuICAgICAgICBdKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHRoZSBtb3VzZSBVcCBldmVudCwgc2VuZHMgdGhlIG1vdXNlIGRhdGEgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gbW91c2VFdmVudCAtIE1vdXNlIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZU1vdXNlVXAobW91c2VFdmVudCkge1xyXG4gICAgICAgIGlmICghdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHRvU3RyZWFtZXJIYW5kbGVycyA9IHRoaXMubW91c2VDb250cm9sbGVyLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcclxuICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdNb3VzZVVwJykoW1xyXG4gICAgICAgICAgICBtb3VzZUV2ZW50LmJ1dHRvbixcclxuICAgICAgICAgICAgLy8gV2UgdXNlIHRoZSBzdG9yZSB2YWx1ZSBvZiB0aGlzLmNvb3JkIGFzIG9wcG9zZWQgdG8gdGhlIG1vdXNlRXZlbnQueC95IGFzIHRoZSBtb3VzZUV2ZW50IGxvY2F0aW9uXHJcbiAgICAgICAgICAgIC8vIHVzZXMgdGhlIHN5c3RlbSBjdXJzb3IgbG9jYXRpb24gd2hpY2ggaGFzbid0IG1vdmVkXHJcbiAgICAgICAgICAgIHRoaXMuY29vcmQueCxcclxuICAgICAgICAgICAgdGhpcy5jb29yZC55XHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZSB0aGUgbW91c2Ugd2hlZWwgZXZlbnQsIHNlbmRzIHRoZSBtb3VzZSB3aGVlbCBkYXRhIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIHdoZWVsRXZlbnQgLSBNb3VzZSBFdmVudFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVNb3VzZVdoZWVsKHdoZWVsRXZlbnQpIHtcclxuICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPSB0aGlzLm1vdXNlQ29udHJvbGxlci50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnM7XHJcbiAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnTW91c2VXaGVlbCcpKFtcclxuICAgICAgICAgICAgd2hlZWxFdmVudC53aGVlbERlbHRhLFxyXG4gICAgICAgICAgICAvLyBXZSB1c2UgdGhlIHN0b3JlIHZhbHVlIG9mIHRoaXMuY29vcmQgYXMgb3Bwb3NlZCB0byB0aGUgbW91c2VFdmVudC54L3kgYXMgdGhlIG1vdXNlRXZlbnQgbG9jYXRpb25cclxuICAgICAgICAgICAgLy8gdXNlcyB0aGUgc3lzdGVtIGN1cnNvciBsb2NhdGlvbiB3aGljaCBoYXNuJ3QgbW92ZWRcclxuICAgICAgICAgICAgdGhpcy5jb29yZC54LFxyXG4gICAgICAgICAgICB0aGlzLmNvb3JkLnlcclxuICAgICAgICBdKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHRoZSBtb3VzZSBkb3VibGUgY2xpY2sgZXZlbnQsIHNlbmRzIHRoZSBtb3VzZSBkYXRhIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIG1vdXNlRXZlbnQgLSBNb3VzZSBFdmVudFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVNb3VzZURvdWJsZShtb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdG9TdHJlYW1lckhhbmRsZXJzID0gdGhpcy5tb3VzZUNvbnRyb2xsZXIudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzO1xyXG4gICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ01vdXNlRG91YmxlJykoW1xyXG4gICAgICAgICAgICBtb3VzZUV2ZW50LmJ1dHRvbixcclxuICAgICAgICAgICAgLy8gV2UgdXNlIHRoZSBzdG9yZSB2YWx1ZSBvZiB0aGlzLmNvb3JkIGFzIG9wcG9zZWQgdG8gdGhlIG1vdXNlRXZlbnQueC95IGFzIHRoZSBtb3VzZUV2ZW50IGxvY2F0aW9uXHJcbiAgICAgICAgICAgIC8vIHVzZXMgdGhlIHN5c3RlbSBjdXJzb3IgbG9jYXRpb24gd2hpY2ggaGFzbid0IG1vdmVkXHJcbiAgICAgICAgICAgIHRoaXMuY29vcmQueCxcclxuICAgICAgICAgICAgdGhpcy5jb29yZC55XHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZSB0aGUgcHJlc3MgbW91c2UgYnV0dG9ucyBldmVudCwgc2VuZHMgdGhlIG1vdXNlIGRhdGEgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gbW91c2VFdmVudCAtIE1vdXNlIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZVByZXNzTW91c2VCdXR0b25zKG1vdXNlRXZlbnQpIHtcclxuICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci5wcmVzc01vdXNlQnV0dG9ucyhtb3VzZUV2ZW50LmJ1dHRvbnMsIHRoaXMueCwgdGhpcy55KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHRoZSByZWxlYXNlIG1vdXNlIGJ1dHRvbnMgZXZlbnQsIHNlbmRzIHRoZSBtb3VzZSBkYXRhIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIG1vdXNlRXZlbnQgLSBNb3VzZSBFdmVudFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVSZWxlYXNlTW91c2VCdXR0b25zKG1vdXNlRXZlbnQpIHtcclxuICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci5yZWxlYXNlTW91c2VCdXR0b25zKG1vdXNlRXZlbnQuYnV0dG9ucywgdGhpcy54LCB0aGlzLnkpO1xyXG4gICAgfVxyXG59XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9JbnB1dHMvTW91c2VCdXR0b25zLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvSW5wdXRzL01vdXNlQnV0dG9ucy50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIk1vdXNlQnV0dG9uXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIE1vdXNlQnV0dG9uKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJNb3VzZUJ1dHRvbnNNYXNrXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIE1vdXNlQnV0dG9uc01hc2spXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbi8qKlxyXG4gKiBNb3VzZSBCdXR0b24gRGF0YVxyXG4gKiB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL01vdXNlRXZlbnQvYnV0dG9ufVxyXG4gKi9cclxuY2xhc3MgTW91c2VCdXR0b24ge1xyXG59XHJcbk1vdXNlQnV0dG9uLm1haW5CdXR0b24gPSAwOyAvLyBMZWZ0IGJ1dHRvbi5cclxuTW91c2VCdXR0b24uYXV4aWxpYXJ5QnV0dG9uID0gMTsgLy8gV2hlZWwgYnV0dG9uLlxyXG5Nb3VzZUJ1dHRvbi5zZWNvbmRhcnlCdXR0b24gPSAyOyAvLyBSaWdodCBidXR0b24uXHJcbk1vdXNlQnV0dG9uLmZvdXJ0aEJ1dHRvbiA9IDM7IC8vIEJyb3dzZXIgQmFjayBidXR0b24uXHJcbk1vdXNlQnV0dG9uLmZpZnRoQnV0dG9uID0gNDsgLy8gQnJvd3NlciBGb3J3YXJkIGJ1dHRvbi5cclxuLyoqXHJcbiAqIE1vdXNlIEJ1dHRvbiBNYXNrIERhdGFcclxuICoge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9Nb3VzZUV2ZW50L2J1dHRvbnN9XHJcbiAqL1xyXG5jbGFzcyBNb3VzZUJ1dHRvbnNNYXNrIHtcclxufVxyXG5Nb3VzZUJ1dHRvbnNNYXNrLnByaW1hcnlCdXR0b24gPSAxOyAvLyBMZWZ0IGJ1dHRvbi5cclxuTW91c2VCdXR0b25zTWFzay5zZWNvbmRhcnlCdXR0b24gPSAyOyAvLyBSaWdodCBidXR0b24uXHJcbk1vdXNlQnV0dG9uc01hc2suYXV4aWxpYXJ5QnV0dG9uID0gNDsgLy8gV2hlZWwgYnV0dG9uLlxyXG5Nb3VzZUJ1dHRvbnNNYXNrLmZvdXJ0aEJ1dHRvbiA9IDg7IC8vIEJyb3dzZXIgQmFjayBidXR0b24uXHJcbk1vdXNlQnV0dG9uc01hc2suZmlmdGhCdXR0b24gPSAxNjsgLy8gQnJvd3NlciBGb3J3YXJkIGJ1dHRvbi5cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL0lucHV0cy9Nb3VzZUNvbnRyb2xsZXIudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9JbnB1dHMvTW91c2VDb250cm9sbGVyLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiTW91c2VDb250cm9sbGVyXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIE1vdXNlQ29udHJvbGxlcilcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9Nb3VzZUJ1dHRvbnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vTW91c2VCdXR0b25zICovIFwiLi9zcmMvSW5wdXRzL01vdXNlQnV0dG9ucy50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vTG9nZ2VyL0xvZ2dlciAqLyBcIi4vc3JjL0xvZ2dlci9Mb2dnZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0xvY2tlZE1vdXNlRXZlbnRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0xvY2tlZE1vdXNlRXZlbnRzICovIFwiLi9zcmMvSW5wdXRzL0xvY2tlZE1vdXNlRXZlbnRzLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9Ib3ZlcmluZ01vdXNlRXZlbnRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0hvdmVyaW5nTW91c2VFdmVudHMgKi8gXCIuL3NyYy9JbnB1dHMvSG92ZXJpbmdNb3VzZUV2ZW50cy50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfVXRpbF9FdmVudExpc3RlbmVyVHJhY2tlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vVXRpbC9FdmVudExpc3RlbmVyVHJhY2tlciAqLyBcIi4vc3JjL1V0aWwvRXZlbnRMaXN0ZW5lclRyYWNrZXIudHNcIik7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuXHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBIYW5kbGVzIHRoZSBNb3VzZSBJbnB1dHMgZm9yIHRoZSBkb2N1bWVudFxyXG4gKi9cclxuY2xhc3MgTW91c2VDb250cm9sbGVyIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyIC0gU3RyZWFtIG1lc3NhZ2UgaW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSB2aWRlb0VsZW1lbnRQcm92aWRlciAtIFZpZGVvIFBsYXllciBpbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIG5vcm1hbGl6ZUFuZFF1YW50aXplIC0gQSBub3JtYWxpemUgYW5kIHF1YW50aXplIGluc3RhbmNlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLCB2aWRlb0VsZW1lbnRQcm92aWRlciwgY29vcmRpbmF0ZUNvbnZlcnRlciwgYWN0aXZlS2V5c1Byb3ZpZGVyKSB7XHJcbiAgICAgICAgLy8gVXRpbGl0eSBmb3Iga2VlcGluZyB0cmFjayBvZiBldmVudCBoYW5kbGVycyBhbmQgdW5yZWdpc3RlcmluZyB0aGVtXHJcbiAgICAgICAgdGhpcy5tb3VzZUV2ZW50TGlzdGVuZXJUcmFja2VyID0gbmV3IF9VdGlsX0V2ZW50TGlzdGVuZXJUcmFja2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uRXZlbnRMaXN0ZW5lclRyYWNrZXIoKTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyID0gdG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXI7XHJcbiAgICAgICAgdGhpcy5jb29yZGluYXRlQ29udmVydGVyID0gY29vcmRpbmF0ZUNvbnZlcnRlcjtcclxuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyID0gdmlkZW9FbGVtZW50UHJvdmlkZXI7XHJcbiAgICAgICAgdGhpcy5hY3RpdmVLZXlzUHJvdmlkZXIgPSBhY3RpdmVLZXlzUHJvdmlkZXI7XHJcbiAgICAgICAgdGhpcy5yZWdpc3Rlck1vdXNlRW50ZXJBbmRMZWF2ZUV2ZW50cygpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDbGVhcnMgYWxsIHRoZSBjbGljayBldmVudHMgb24gdGhlIGN1cnJlbnQgdmlkZW8gZWxlbWVudCBwYXJlbnQgZGl2XHJcbiAgICAgKi9cclxuICAgIHVucmVnaXN0ZXJNb3VzZUV2ZW50cygpIHtcclxuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIudW5yZWdpc3RlckFsbCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWdpc3RlciBhIGxvY2tlZCBtb3VzZSBjbGFzc1xyXG4gICAgICogQHBhcmFtIG1vdXNlQ29udHJvbGxlciAtIGEgbW91c2UgY29udHJvbGxlciBpbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIHBsYXllclN0eWxlQXR0cmlidXRlc1Byb3ZpZGVyIC0gYSBwbGF5ZXIgc3R5bGUgYXR0cmlidXRlcyBpbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICByZWdpc3RlckxvY2tlZE1vdXNlRXZlbnRzKG1vdXNlQ29udHJvbGxlcikge1xyXG4gICAgICAgIGNvbnN0IHZpZGVvRWxlbWVudFBhcmVudCA9IHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuZ2V0VmlkZW9QYXJlbnRFbGVtZW50KCk7XHJcbiAgICAgICAgY29uc3QgbG9ja2VkTW91c2VFdmVudHMgPSBuZXcgX0xvY2tlZE1vdXNlRXZlbnRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9ja2VkTW91c2VFdmVudHModGhpcy52aWRlb0VsZW1lbnRQcm92aWRlciwgbW91c2VDb250cm9sbGVyLCB0aGlzLmFjdGl2ZUtleXNQcm92aWRlcik7XHJcbiAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LnJlcXVlc3RQb2ludGVyTG9jayA9XHJcbiAgICAgICAgICAgIHZpZGVvRWxlbWVudFBhcmVudC5yZXF1ZXN0UG9pbnRlckxvY2sgfHxcclxuICAgICAgICAgICAgICAgIHZpZGVvRWxlbWVudFBhcmVudC5tb3pSZXF1ZXN0UG9pbnRlckxvY2s7XHJcbiAgICAgICAgZG9jdW1lbnQuZXhpdFBvaW50ZXJMb2NrID1cclxuICAgICAgICAgICAgZG9jdW1lbnQuZXhpdFBvaW50ZXJMb2NrIHx8IGRvY3VtZW50Lm1vekV4aXRQb2ludGVyTG9jaztcclxuICAgICAgICAvLyBtaW5vciBoYWNrIHRvIGFsbGV2aWF0ZSBpb3Mgbm90IHN1cHBvcnRpbmcgcG9pbnRlcmxvY2tcclxuICAgICAgICBpZiAodmlkZW9FbGVtZW50UGFyZW50LnJlcXVlc3RQb2ludGVyTG9jaykge1xyXG4gICAgICAgICAgICBjb25zdCBvbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LnJlcXVlc3RQb2ludGVyTG9jaygpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbmNsaWNrKTtcclxuICAgICAgICAgICAgdGhpcy5tb3VzZUV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjaygoKSA9PiB2aWRlb0VsZW1lbnRQYXJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbmNsaWNrKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGxvY2tTdGF0ZUNoYW5nZUxpc3RlbmVyID0gKCkgPT4gbG9ja2VkTW91c2VFdmVudHMubG9ja1N0YXRlQ2hhbmdlKCk7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmxvY2tjaGFuZ2UnLCBsb2NrU3RhdGVDaGFuZ2VMaXN0ZW5lciwgZmFsc2UpO1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21venBvaW50ZXJsb2NrY2hhbmdlJywgbG9ja1N0YXRlQ2hhbmdlTGlzdGVuZXIsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJsb2NrY2hhbmdlJywgbG9ja1N0YXRlQ2hhbmdlTGlzdGVuZXIsIGZhbHNlKSk7XHJcbiAgICAgICAgdGhpcy5tb3VzZUV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjaygoKSA9PiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3pwb2ludGVybG9ja2NoYW5nZScsIGxvY2tTdGF0ZUNoYW5nZUxpc3RlbmVyLCBmYWxzZSkpO1xyXG4gICAgICAgIGNvbnN0IG9ubW91c2Vkb3duID0gKG1vdXNlRXZlbnQpID0+IGxvY2tlZE1vdXNlRXZlbnRzLmhhbmRsZU1vdXNlRG93bihtb3VzZUV2ZW50KTtcclxuICAgICAgICBjb25zdCBvbm1vdXNldXAgPSAobW91c2VFdmVudCkgPT4gbG9ja2VkTW91c2VFdmVudHMuaGFuZGxlTW91c2VVcChtb3VzZUV2ZW50KTtcclxuICAgICAgICBjb25zdCBvbndoZWVsID0gKHdoZWVsRXZlbnQpID0+IGxvY2tlZE1vdXNlRXZlbnRzLmhhbmRsZU1vdXNlV2hlZWwod2hlZWxFdmVudCk7XHJcbiAgICAgICAgY29uc3Qgb25kYmxjbGljayA9IChtb3VzZUV2ZW50KSA9PiBsb2NrZWRNb3VzZUV2ZW50cy5oYW5kbGVNb3VzZURvdWJsZShtb3VzZUV2ZW50KTtcclxuICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgb25tb3VzZWRvd24pO1xyXG4gICAgICAgIHZpZGVvRWxlbWVudFBhcmVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgb25tb3VzZXVwKTtcclxuICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignd2hlZWwnLCBvbndoZWVsKTtcclxuICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignZGJsY2xpY2snLCBvbmRibGNsaWNrKTtcclxuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IHZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvbm1vdXNlZG93bikpO1xyXG4gICAgICAgIHRoaXMubW91c2VFdmVudExpc3RlbmVyVHJhY2tlci5hZGRVbnJlZ2lzdGVyQ2FsbGJhY2soKCkgPT4gdmlkZW9FbGVtZW50UGFyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBvbm1vdXNldXApKTtcclxuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IHZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd3aGVlbCcsIG9ud2hlZWwpKTtcclxuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IHZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdkYmxjbGljaycsIG9uZGJsY2xpY2spKTtcclxuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IGxvY2tlZE1vdXNlRXZlbnRzLnVucmVnaXN0ZXJNb3VzZUV2ZW50cygpKTtcclxuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKGRvY3VtZW50LmV4aXRQb2ludGVyTG9jayAmJlxyXG4gICAgICAgICAgICAgICAgKGRvY3VtZW50LnBvaW50ZXJMb2NrRWxlbWVudCA9PT0gdmlkZW9FbGVtZW50UGFyZW50IHx8XHJcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQubW96UG9pbnRlckxvY2tFbGVtZW50ID09PSB2aWRlb0VsZW1lbnRQYXJlbnQpKSB7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5leGl0UG9pbnRlckxvY2soKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWdpc3RlciBhIGhvdmVyaW5nIG1vdXNlIGNsYXNzXHJcbiAgICAgKiBAcGFyYW0gbW91c2VDb250cm9sbGVyIC0gQSBtb3VzZSBjb250cm9sbGVyIG9iamVjdFxyXG4gICAgICovXHJcbiAgICByZWdpc3RlckhvdmVyaW5nTW91c2VFdmVudHMobW91c2VDb250cm9sbGVyKSB7XHJcbiAgICAgICAgY29uc3QgdmlkZW9FbGVtZW50UGFyZW50ID0gdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5nZXRWaWRlb1BhcmVudEVsZW1lbnQoKTtcclxuICAgICAgICBjb25zdCBob3ZlcmluZ01vdXNlRXZlbnRzID0gbmV3IF9Ib3ZlcmluZ01vdXNlRXZlbnRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uSG92ZXJpbmdNb3VzZUV2ZW50cyhtb3VzZUNvbnRyb2xsZXIpO1xyXG4gICAgICAgIGNvbnN0IG9ubW91c2Vtb3ZlID0gKG1vdXNlRXZlbnQpID0+IGhvdmVyaW5nTW91c2VFdmVudHMudXBkYXRlTW91c2VNb3ZlUG9zaXRpb24obW91c2VFdmVudCk7XHJcbiAgICAgICAgY29uc3Qgb25tb3VzZWRvd24gPSAobW91c2VFdmVudCkgPT4gaG92ZXJpbmdNb3VzZUV2ZW50cy5oYW5kbGVNb3VzZURvd24obW91c2VFdmVudCk7XHJcbiAgICAgICAgY29uc3Qgb25tb3VzZXVwID0gKG1vdXNlRXZlbnQpID0+IGhvdmVyaW5nTW91c2VFdmVudHMuaGFuZGxlTW91c2VVcChtb3VzZUV2ZW50KTtcclxuICAgICAgICBjb25zdCBvbmNvbnRleHRtZW51ID0gKG1vdXNlRXZlbnQpID0+IGhvdmVyaW5nTW91c2VFdmVudHMuaGFuZGxlQ29udGV4dE1lbnUobW91c2VFdmVudCk7XHJcbiAgICAgICAgY29uc3Qgb253aGVlbCA9ICh3aGVlbEV2ZW50KSA9PiBob3ZlcmluZ01vdXNlRXZlbnRzLmhhbmRsZU1vdXNlV2hlZWwod2hlZWxFdmVudCk7XHJcbiAgICAgICAgY29uc3Qgb25kYmxjbGljayA9IChtb3VzZUV2ZW50KSA9PiBob3ZlcmluZ01vdXNlRXZlbnRzLmhhbmRsZU1vdXNlRG91YmxlKG1vdXNlRXZlbnQpO1xyXG4gICAgICAgIHZpZGVvRWxlbWVudFBhcmVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBvbm1vdXNlbW92ZSk7XHJcbiAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG9ubW91c2Vkb3duKTtcclxuICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG9ubW91c2V1cCk7XHJcbiAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NvbnRleHRtZW51Jywgb25jb250ZXh0bWVudSk7XHJcbiAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3doZWVsJywgb253aGVlbCk7XHJcbiAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgb25kYmxjbGljayk7XHJcbiAgICAgICAgdGhpcy5tb3VzZUV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjaygoKSA9PiB2aWRlb0VsZW1lbnRQYXJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25tb3VzZW1vdmUpKTtcclxuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IHZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvbm1vdXNlZG93bikpO1xyXG4gICAgICAgIHRoaXMubW91c2VFdmVudExpc3RlbmVyVHJhY2tlci5hZGRVbnJlZ2lzdGVyQ2FsbGJhY2soKCkgPT4gdmlkZW9FbGVtZW50UGFyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBvbm1vdXNldXApKTtcclxuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IHZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIG9uY29udGV4dG1lbnUpKTtcclxuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IHZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd3aGVlbCcsIG9ud2hlZWwpKTtcclxuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IHZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdkYmxjbGljaycsIG9uZGJsY2xpY2spKTtcclxuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IGhvdmVyaW5nTW91c2VFdmVudHMudW5yZWdpc3Rlck1vdXNlRXZlbnRzKCkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIG1vdXNlIGVudGVyIGFuZCBtb3VzZSBsZWF2ZSBldmVudHNcclxuICAgICAqL1xyXG4gICAgcmVnaXN0ZXJNb3VzZUVudGVyQW5kTGVhdmVFdmVudHMoKSB7XHJcbiAgICAgICAgY29uc3QgdmlkZW9FbGVtZW50UGFyZW50ID0gdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5nZXRWaWRlb1BhcmVudEVsZW1lbnQoKTtcclxuICAgICAgICAvLyBIYW5kbGUgd2hlbiB0aGUgTW91c2UgaGFzIGVudGVyZWQgdGhlIGVsZW1lbnRcclxuICAgICAgICBjb25zdCBvbm1vdXNlZW50ZXIgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ01vdXNlIEVudGVyZWQnLCA2KTtcclxuICAgICAgICAgICAgdGhpcy5zZW5kTW91c2VFbnRlcigpO1xyXG4gICAgICAgICAgICB0aGlzLnByZXNzTW91c2VCdXR0b25zKGV2ZW50LmJ1dHRvbnMsIGV2ZW50LngsIGV2ZW50LnkpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gSGFuZGxlcyB3aGVuIHRoZSBtb3VzZSBoYXMgbGVmdCB0aGUgZWxlbWVudFxyXG4gICAgICAgIGNvbnN0IG9ubW91c2VsZWF2ZSA9IChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnTW91c2UgTGVmdCcsIDYpO1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRNb3VzZUxlYXZlKCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVsZWFzZU1vdXNlQnV0dG9ucyhldmVudC5idXR0b25zLCBldmVudC54LCBldmVudC55KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZpZGVvRWxlbWVudFBhcmVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgb25tb3VzZWVudGVyKTtcclxuICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIG9ubW91c2VsZWF2ZSk7XHJcbiAgICAgICAgdGhpcy5tb3VzZUV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjaygoKSA9PiB2aWRlb0VsZW1lbnRQYXJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIG9ubW91c2VlbnRlcikpO1xyXG4gICAgICAgIHRoaXMubW91c2VFdmVudExpc3RlbmVyVHJhY2tlci5hZGRVbnJlZ2lzdGVyQ2FsbGJhY2soKCkgPT4gdmlkZW9FbGVtZW50UGFyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBvbm1vdXNlbGVhdmUpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHdoZW4gYSBtb3VzZSBidXR0b24gaXMgcmVsZWFzZWRcclxuICAgICAqIEBwYXJhbSBidXR0b25zIC0gTW91c2UgQnV0dG9uXHJcbiAgICAgKiBAcGFyYW0gWCAtIE1vdXNlIHBvaW50ZXIgWCBjb29yZGluYXRlXHJcbiAgICAgKiBAcGFyYW0gWSAtIE1vdXNlIHBvaW50ZXIgWSBjb29yZGluYXRlXHJcbiAgICAgKi9cclxuICAgIHJlbGVhc2VNb3VzZUJ1dHRvbnMoYnV0dG9ucywgWCwgWSkge1xyXG4gICAgICAgIGNvbnN0IGNvb3JkID0gdGhpcy5jb29yZGluYXRlQ29udmVydGVyLm5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWQoWCwgWSk7XHJcbiAgICAgICAgaWYgKGJ1dHRvbnMgJiBfTW91c2VCdXR0b25zX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uTW91c2VCdXR0b25zTWFzay5wcmltYXJ5QnV0dG9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VuZE1vdXNlVXAoX01vdXNlQnV0dG9uc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLk1vdXNlQnV0dG9uLm1haW5CdXR0b24sIGNvb3JkLngsIGNvb3JkLnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYnV0dG9ucyAmIF9Nb3VzZUJ1dHRvbnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5Nb3VzZUJ1dHRvbnNNYXNrLnNlY29uZGFyeUJ1dHRvbikge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRNb3VzZVVwKF9Nb3VzZUJ1dHRvbnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5Nb3VzZUJ1dHRvbi5zZWNvbmRhcnlCdXR0b24sIGNvb3JkLngsIGNvb3JkLnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYnV0dG9ucyAmIF9Nb3VzZUJ1dHRvbnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5Nb3VzZUJ1dHRvbnNNYXNrLmF1eGlsaWFyeUJ1dHRvbikge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRNb3VzZVVwKF9Nb3VzZUJ1dHRvbnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5Nb3VzZUJ1dHRvbi5hdXhpbGlhcnlCdXR0b24sIGNvb3JkLngsIGNvb3JkLnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYnV0dG9ucyAmIF9Nb3VzZUJ1dHRvbnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5Nb3VzZUJ1dHRvbnNNYXNrLmZvdXJ0aEJ1dHRvbikge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRNb3VzZVVwKF9Nb3VzZUJ1dHRvbnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5Nb3VzZUJ1dHRvbi5mb3VydGhCdXR0b24sIGNvb3JkLngsIGNvb3JkLnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYnV0dG9ucyAmIF9Nb3VzZUJ1dHRvbnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5Nb3VzZUJ1dHRvbnNNYXNrLmZpZnRoQnV0dG9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VuZE1vdXNlVXAoX01vdXNlQnV0dG9uc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLk1vdXNlQnV0dG9uLmZpZnRoQnV0dG9uLCBjb29yZC54LCBjb29yZC55KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZSB3aGVuIGEgbW91c2UgYnV0dG9uIGlzIHByZXNzZWRcclxuICAgICAqIEBwYXJhbSBidXR0b25zIC0gTW91c2UgQnV0dG9uXHJcbiAgICAgKiBAcGFyYW0gWCAtIE1vdXNlIHBvaW50ZXIgWCBjb29yZGluYXRlXHJcbiAgICAgKiBAcGFyYW0gWSAtIE1vdXNlIHBvaW50ZXIgWSBjb29yZGluYXRlXHJcbiAgICAgKi9cclxuICAgIHByZXNzTW91c2VCdXR0b25zKGJ1dHRvbnMsIFgsIFkpIHtcclxuICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjb29yZCA9IHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlci5ub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkKFgsIFkpO1xyXG4gICAgICAgIGlmIChidXR0b25zICYgX01vdXNlQnV0dG9uc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLk1vdXNlQnV0dG9uc01hc2sucHJpbWFyeUJ1dHRvbikge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRNb3VzZURvd24oX01vdXNlQnV0dG9uc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLk1vdXNlQnV0dG9uLm1haW5CdXR0b24sIGNvb3JkLngsIGNvb3JkLnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYnV0dG9ucyAmIF9Nb3VzZUJ1dHRvbnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5Nb3VzZUJ1dHRvbnNNYXNrLnNlY29uZGFyeUJ1dHRvbikge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRNb3VzZURvd24oX01vdXNlQnV0dG9uc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLk1vdXNlQnV0dG9uLnNlY29uZGFyeUJ1dHRvbiwgY29vcmQueCwgY29vcmQueSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChidXR0b25zICYgX01vdXNlQnV0dG9uc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLk1vdXNlQnV0dG9uc01hc2suYXV4aWxpYXJ5QnV0dG9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VuZE1vdXNlRG93bihfTW91c2VCdXR0b25zX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uTW91c2VCdXR0b24uYXV4aWxpYXJ5QnV0dG9uLCBjb29yZC54LCBjb29yZC55KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGJ1dHRvbnMgJiBfTW91c2VCdXR0b25zX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uTW91c2VCdXR0b25zTWFzay5mb3VydGhCdXR0b24pIHtcclxuICAgICAgICAgICAgdGhpcy5zZW5kTW91c2VEb3duKF9Nb3VzZUJ1dHRvbnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5Nb3VzZUJ1dHRvbi5mb3VydGhCdXR0b24sIGNvb3JkLngsIGNvb3JkLnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYnV0dG9ucyAmIF9Nb3VzZUJ1dHRvbnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5Nb3VzZUJ1dHRvbnNNYXNrLmZpZnRoQnV0dG9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VuZE1vdXNlRG93bihfTW91c2VCdXR0b25zX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uTW91c2VCdXR0b24uZmlmdGhCdXR0b24sIGNvb3JkLngsIGNvb3JkLnkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyBtb3VzZSBlbnRlclxyXG4gICAgICovXHJcbiAgICBzZW5kTW91c2VFbnRlcigpIHtcclxuICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPSB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcclxuICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdNb3VzZUVudGVyJykoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyBtb3VzZSBMZWF2ZVxyXG4gICAgICovXHJcbiAgICBzZW5kTW91c2VMZWF2ZSgpIHtcclxuICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPSB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcclxuICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdNb3VzZUxlYXZlJykoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB3aGVuIGEgbW91c2UgYnV0dG9uIGlzIHByZXNzZWQgZG93blxyXG4gICAgICogQHBhcmFtIGJ1dHRvbiAtIE1vdXNlIEJ1dHRvbiBQcmVzc2VkXHJcbiAgICAgKiBAcGFyYW0gWCAgLSBNb3VzZSBYIENvb3JkaW5hdGVcclxuICAgICAqIEBwYXJhbSBZICAtIE1vdXNlIFkgQ29vcmRpbmF0ZVxyXG4gICAgICovXHJcbiAgICBzZW5kTW91c2VEb3duKGJ1dHRvbiwgWCwgWSkge1xyXG4gICAgICAgIGlmICghdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBtb3VzZSBidXR0b24gJHtidXR0b259IGRvd24gYXQgKCR7WH0sICR7WX0pYCwgNik7XHJcbiAgICAgICAgY29uc3QgdG9TdHJlYW1lckhhbmRsZXJzID0gdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnM7XHJcbiAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnTW91c2VEb3duJykoW2J1dHRvbiwgWCwgWV0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIHdoZW4gYSBtb3VzZSBidXR0b24gaXMgcHJlc3NlZCB1cFxyXG4gICAgICogQHBhcmFtIGJ1dHRvbiAtIE1vdXNlIEJ1dHRvbiBQcmVzc2VkXHJcbiAgICAgKiBAcGFyYW0gWCAgLSBNb3VzZSBYIENvb3JkaW5hdGVcclxuICAgICAqIEBwYXJhbSBZICAtIE1vdXNlIFkgQ29vcmRpbmF0ZVxyXG4gICAgICovXHJcbiAgICBzZW5kTW91c2VVcChidXR0b24sIFgsIFkpIHtcclxuICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgbW91c2UgYnV0dG9uICR7YnV0dG9ufSB1cCBhdCAoJHtYfSwgJHtZfSlgLCA2KTtcclxuICAgICAgICBjb25zdCBjb29yZCA9IHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlci5ub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkKFgsIFkpO1xyXG4gICAgICAgIGNvbnN0IHRvU3RyZWFtZXJIYW5kbGVycyA9IHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzO1xyXG4gICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ01vdXNlVXAnKShbYnV0dG9uLCBjb29yZC54LCBjb29yZC55XSk7XHJcbiAgICB9XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL0lucHV0cy9TcGVjaWFsS2V5Q29kZXMudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9JbnB1dHMvU3BlY2lhbEtleUNvZGVzLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiU3BlY2lhbEtleUNvZGVzXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFNwZWNpYWxLZXlDb2Rlcylcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuLyoqXHJcbiAqIFJlZ2lzdGVycyB0aGUgU3BlY2lhbCBLZXkgY29kZXNcclxuICogIE11c3QgYmUga2VwdCBpbiBzeW5jIHdpdGggSmF2YVNjcmlwdEtleUNvZGVUb0ZLZXkgQysrIGFycmF5LlxyXG4gKiBUaGUgaW5kZXggb2YgdGhlIGVudHJ5IGluIHRoZSBhcnJheSBpcyB0aGUgc3BlY2lhbCBrZXkgY29kZSBnaXZlbiBiZWxvdy5cclxuICovXHJcbmNsYXNzIFNwZWNpYWxLZXlDb2RlcyB7XHJcbn1cclxuU3BlY2lhbEtleUNvZGVzLmJhY2tTcGFjZSA9IDg7XHJcblNwZWNpYWxLZXlDb2Rlcy5zaGlmdCA9IDE2O1xyXG5TcGVjaWFsS2V5Q29kZXMuY29udHJvbCA9IDE3O1xyXG5TcGVjaWFsS2V5Q29kZXMuYWx0ID0gMTg7XHJcblNwZWNpYWxLZXlDb2Rlcy5yaWdodFNoaWZ0ID0gMjUzO1xyXG5TcGVjaWFsS2V5Q29kZXMucmlnaHRDb250cm9sID0gMjU0O1xyXG5TcGVjaWFsS2V5Q29kZXMucmlnaHRBbHQgPSAyNTU7XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9JbnB1dHMvVG91Y2hDb250cm9sbGVyLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvSW5wdXRzL1RvdWNoQ29udHJvbGxlci50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlRvdWNoQ29udHJvbGxlclwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBUb3VjaENvbnRyb2xsZXIpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vTG9nZ2VyL0xvZ2dlciAqLyBcIi4vc3JjL0xvZ2dlci9Mb2dnZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1V0aWxfRXZlbnRMaXN0ZW5lclRyYWNrZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL1V0aWwvRXZlbnRMaXN0ZW5lclRyYWNrZXIgKi8gXCIuL3NyYy9VdGlsL0V2ZW50TGlzdGVuZXJUcmFja2VyLnRzXCIpO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcblxyXG4vKipcclxuICogSGFuZGxlcyB0aGUgVG91Y2ggaW5wdXQgRXZlbnRzXHJcbiAqL1xyXG5jbGFzcyBUb3VjaENvbnRyb2xsZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gdG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIgLSBTdHJlYW0gbWVzc2FnZSBpbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIHZpZGVvRWxlbWVudFByb3ZpZGVyIC0gVmlkZW8gUGxheWVyIGluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gY29vcmRpbmF0ZUNvbnZlcnRlciAtIEEgY29vcmRpbmF0ZSBjb252ZXJ0ZXIgaW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIsIHZpZGVvRWxlbWVudFByb3ZpZGVyLCBjb29yZGluYXRlQ29udmVydGVyKSB7XHJcbiAgICAgICAgdGhpcy5maW5nZXJzID0gWzksIDgsIDcsIDYsIDUsIDQsIDMsIDIsIDEsIDBdO1xyXG4gICAgICAgIHRoaXMuZmluZ2VySWRzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMubWF4Qnl0ZVZhbHVlID0gMjU1O1xyXG4gICAgICAgIC8vIFV0aWxpdHkgZm9yIGtlZXBpbmcgdHJhY2sgb2YgZXZlbnQgaGFuZGxlcnMgYW5kIHVucmVnaXN0ZXJpbmcgdGhlbVxyXG4gICAgICAgIHRoaXMudG91Y2hFdmVudExpc3RlbmVyVHJhY2tlciA9IG5ldyBfVXRpbF9FdmVudExpc3RlbmVyVHJhY2tlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkV2ZW50TGlzdGVuZXJUcmFja2VyKCk7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlciA9IHRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyO1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIgPSB2aWRlb0VsZW1lbnRQcm92aWRlcjtcclxuICAgICAgICB0aGlzLmNvb3JkaW5hdGVDb252ZXJ0ZXIgPSBjb29yZGluYXRlQ29udmVydGVyO1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50UGFyZW50ID0gdmlkZW9FbGVtZW50UHJvdmlkZXIuZ2V0VmlkZW9FbGVtZW50KCk7XHJcbiAgICAgICAgY29uc3Qgb250b3VjaHN0YXJ0ID0gKGV2KSA9PiB0aGlzLm9uVG91Y2hTdGFydChldik7XHJcbiAgICAgICAgY29uc3Qgb250b3VjaGVuZCA9IChldikgPT4gdGhpcy5vblRvdWNoRW5kKGV2KTtcclxuICAgICAgICBjb25zdCBvbnRvdWNobW92ZSA9IChldikgPT4gdGhpcy5vblRvdWNoTW92ZShldik7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9udG91Y2hzdGFydCk7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBvbnRvdWNoZW5kKTtcclxuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBvbnRvdWNobW92ZSk7XHJcbiAgICAgICAgdGhpcy50b3VjaEV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjaygoKSA9PiB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb250b3VjaHN0YXJ0KSk7XHJcbiAgICAgICAgdGhpcy50b3VjaEV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjaygoKSA9PiB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9udG91Y2hlbmQpKTtcclxuICAgICAgICB0aGlzLnRvdWNoRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IHRoaXMudmlkZW9FbGVtZW50UGFyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9udG91Y2htb3ZlKSk7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ1RvdWNoIEV2ZW50cyBSZWdpc3RlcmVkJywgNik7XHJcbiAgICAgICAgLy8gaXMgdGhpcyBzdHJpY3RseSBuZWNlc3Nhcnk/XHJcbiAgICAgICAgY29uc3QgcHJldmVudE9uVG91Y2hNb3ZlID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBwcmV2ZW50T25Ub3VjaE1vdmUpO1xyXG4gICAgICAgIHRoaXMudG91Y2hFdmVudExpc3RlbmVyVHJhY2tlci5hZGRVbnJlZ2lzdGVyQ2FsbGJhY2soKCkgPT4gZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgcHJldmVudE9uVG91Y2hNb3ZlKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFVucmVnaXN0ZXIgYWxsIHRvdWNoIGV2ZW50c1xyXG4gICAgICovXHJcbiAgICB1bnJlZ2lzdGVyVG91Y2hFdmVudHMoKSB7XHJcbiAgICAgICAgdGhpcy50b3VjaEV2ZW50TGlzdGVuZXJUcmFja2VyLnVucmVnaXN0ZXJBbGwoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVtZW1iZXIgYSB0b3VjaCBjb21tYW5kXHJcbiAgICAgKiBAcGFyYW0gdG91Y2ggLSB0aGUgdG91Y2ggY29tbWFuZFxyXG4gICAgICovXHJcbiAgICByZW1lbWJlclRvdWNoKHRvdWNoKSB7XHJcbiAgICAgICAgY29uc3QgZmluZ2VyID0gdGhpcy5maW5nZXJzLnBvcCgpO1xyXG4gICAgICAgIGlmIChmaW5nZXIgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnZXhoYXVzdGVkIHRvdWNoIGlkZW50aWZpZXJzJywgNik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZmluZ2VySWRzLnNldCh0b3VjaC5pZGVudGlmaWVyLCBmaW5nZXIpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBGb3JnZXRzIGEgdG91Y2ggY29tbWFuZFxyXG4gICAgICogQHBhcmFtIHRvdWNoIC0gdGhlIHRvdWNoIGNvbW1hbmRcclxuICAgICAqL1xyXG4gICAgZm9yZ2V0VG91Y2godG91Y2gpIHtcclxuICAgICAgICB0aGlzLmZpbmdlcnMucHVzaCh0aGlzLmZpbmdlcklkcy5nZXQodG91Y2guaWRlbnRpZmllcikpO1xyXG4gICAgICAgIC8vIFNvcnQgYXJyYXkgYmFjayBpbnRvIGRlc2NlbmRpbmcgb3JkZXIuIFRoaXMgbWVhbnMgaWYgZmluZ2VyICcxJyB3ZXJlIHRvIGxpZnQgYWZ0ZXIgZmluZ2VyICcwJywgd2Ugd291bGQgZW5zdXJlIHRoYXQgMCB3aWxsIGJlIHRoZSBmaXJzdCBpbmRleCB0byBwb3BcclxuICAgICAgICB0aGlzLmZpbmdlcnMuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgICAgICByZXR1cm4gYiAtIGE7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5maW5nZXJJZHMuZGVsZXRlKHRvdWNoLmlkZW50aWZpZXIpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBXaGVuIGEgdG91Y2ggZXZlbnQgc3RhcnRzXHJcbiAgICAgKiBAcGFyYW0gdG91Y2hFdmVudCAtIHRoZSB0b3VjaCBldmVudCBiZWluZyBpbnRlcmNlcHRlZFxyXG4gICAgICovXHJcbiAgICBvblRvdWNoU3RhcnQodG91Y2hFdmVudCkge1xyXG4gICAgICAgIGlmICghdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAobGV0IHQgPSAwOyB0IDwgdG91Y2hFdmVudC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGg7IHQrKykge1xyXG4gICAgICAgICAgICB0aGlzLnJlbWVtYmVyVG91Y2godG91Y2hFdmVudC5jaGFuZ2VkVG91Y2hlc1t0XSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICd0b3VjaCBzdGFydCcsIDYpO1xyXG4gICAgICAgIHRoaXMuZW1pdFRvdWNoRGF0YSgnVG91Y2hTdGFydCcsIHRvdWNoRXZlbnQuY2hhbmdlZFRvdWNoZXMpO1xyXG4gICAgICAgIHRvdWNoRXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogV2hlbiBhIHRvdWNoIGV2ZW50IGVuZHNcclxuICAgICAqIEBwYXJhbSB0b3VjaEV2ZW50IC0gdGhlIHRvdWNoIGV2ZW50IGJlaW5nIGludGVyY2VwdGVkXHJcbiAgICAgKi9cclxuICAgIG9uVG91Y2hFbmQodG91Y2hFdmVudCkge1xyXG4gICAgICAgIGlmICghdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICd0b3VjaCBlbmQnLCA2KTtcclxuICAgICAgICB0aGlzLmVtaXRUb3VjaERhdGEoJ1RvdWNoRW5kJywgdG91Y2hFdmVudC5jaGFuZ2VkVG91Y2hlcyk7XHJcbiAgICAgICAgLy8gUmUtY3ljbGUgdW5pcXVlIGlkZW50aWZpZXJzIHByZXZpb3VzbHkgYXNzaWduZWQgdG8gZWFjaCB0b3VjaC5cclxuICAgICAgICBmb3IgKGxldCB0ID0gMDsgdCA8IHRvdWNoRXZlbnQuY2hhbmdlZFRvdWNoZXMubGVuZ3RoOyB0KyspIHtcclxuICAgICAgICAgICAgdGhpcy5mb3JnZXRUb3VjaCh0b3VjaEV2ZW50LmNoYW5nZWRUb3VjaGVzW3RdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdG91Y2hFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiB3aGVuIGEgbW92aW5nIHRvdWNoIGV2ZW50IG9jY3Vyc1xyXG4gICAgICogQHBhcmFtIHRvdWNoRXZlbnQgLSB0aGUgdG91Y2ggZXZlbnQgYmVpbmcgaW50ZXJjZXB0ZWRcclxuICAgICAqL1xyXG4gICAgb25Ub3VjaE1vdmUodG91Y2hFdmVudCkge1xyXG4gICAgICAgIGlmICghdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICd0b3VjaCBtb3ZlJywgNik7XHJcbiAgICAgICAgdGhpcy5lbWl0VG91Y2hEYXRhKCdUb3VjaE1vdmUnLCB0b3VjaEV2ZW50LnRvdWNoZXMpO1xyXG4gICAgICAgIHRvdWNoRXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxuICAgIGVtaXRUb3VjaERhdGEodHlwZSwgdG91Y2hlcykge1xyXG4gICAgICAgIGlmICghdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG9mZnNldCA9IHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuZ2V0VmlkZW9QYXJlbnRFbGVtZW50KCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgY29uc3QgdG9TdHJlYW1lckhhbmRsZXJzID0gdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnM7XHJcbiAgICAgICAgZm9yIChsZXQgdCA9IDA7IHQgPCB0b3VjaGVzLmxlbmd0aDsgdCsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG51bVRvdWNoZXMgPSAxOyAvLyB0aGUgbnVtYmVyIG9mIHRvdWNoZXMgdG8gYmUgc2VudCB0aGlzIG1lc3NhZ2VcclxuICAgICAgICAgICAgY29uc3QgdG91Y2ggPSB0b3VjaGVzW3RdO1xyXG4gICAgICAgICAgICBjb25zdCB4ID0gdG91Y2guY2xpZW50WCAtIG9mZnNldC5sZWZ0O1xyXG4gICAgICAgICAgICBjb25zdCB5ID0gdG91Y2guY2xpZW50WSAtIG9mZnNldC50b3A7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBGJHt0aGlzLmZpbmdlcklkcy5nZXQodG91Y2guaWRlbnRpZmllcil9PSgke3h9LCAke3l9KWAsIDYpO1xyXG4gICAgICAgICAgICBjb25zdCBjb29yZCA9IHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlci5ub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkKHgsIHkpO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1RvdWNoU3RhcnQnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ1RvdWNoU3RhcnQnKShbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bVRvdWNoZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkLngsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkLnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmluZ2VySWRzLmdldCh0b3VjaC5pZGVudGlmaWVyKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXhCeXRlVmFsdWUgKiAodG91Y2guZm9yY2UgPiAwID8gdG91Y2guZm9yY2UgOiAxKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29vcmQuaW5SYW5nZSA/IDEgOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdUb3VjaEVuZCc6XHJcbiAgICAgICAgICAgICAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnVG91Y2hFbmQnKShbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bVRvdWNoZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkLngsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkLnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmluZ2VySWRzLmdldCh0b3VjaC5pZGVudGlmaWVyKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXhCeXRlVmFsdWUgKiB0b3VjaC5mb3JjZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29vcmQuaW5SYW5nZSA/IDEgOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdUb3VjaE1vdmUnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ1RvdWNoTW92ZScpKFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnVtVG91Y2hlcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29vcmQueCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29vcmQueSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maW5nZXJJZHMuZ2V0KHRvdWNoLmlkZW50aWZpZXIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1heEJ5dGVWYWx1ZSAqICh0b3VjaC5mb3JjZSA+IDAgPyB0b3VjaC5mb3JjZSA6IDEpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb29yZC5pblJhbmdlID8gMSA6IDBcclxuICAgICAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvSW5wdXRzL1hSR2FtZXBhZENvbnRyb2xsZXIudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvSW5wdXRzL1hSR2FtZXBhZENvbnRyb2xsZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiWFJHYW1lcGFkQ29udHJvbGxlclwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBYUkdhbWVwYWRDb250cm9sbGVyKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4vKipcclxuICogVGhlIGNsYXNzIHRoYXQgaGFuZGxlcyB0aGUgZnVuY3Rpb25hbGl0eSBvZiB4cmdhbWVwYWRzIGFuZCBjb250cm9sbGVyc1xyXG4gKi9cclxuY2xhc3MgWFJHYW1lcGFkQ29udHJvbGxlciB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB0b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlciAtIFN0cmVhbSBtZXNzYWdlIGluc3RhbmNlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyKSB7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlciA9IHRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlcnMgPSBbXTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRGVlcCBjb3BpZXMgYSBnYW1lcGFkJ3MgdmFsdWVzIGJ5IGZpcnN0IGNvbnZlcnRpbmcgaXQgdG8gYSBKU09OIG9iamVjdCBhbmQgdGhlbiBiYWNrIHRvIGEgZ2FtZXBhZFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBnYW1lcGFkIHRoZSBvcmlnaW5hbCBnYW1lcGFkXHJcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBnYW1lcGFkIG9iamVjdCwgcG9wdWxhdGVkIHdpdGggdGhlIG9yaWdpbmFsIGdhbWVwYWRzIHZhbHVlc1xyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZGVlcENvcHlHYW1lcGFkKGdhbWVwYWQpIHtcclxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgIGJ1dHRvbnM6IGdhbWVwYWQuYnV0dG9ucy5tYXAoKGIpID0+IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICAgICAgcHJlc3NlZDogYi5wcmVzc2VkLFxyXG4gICAgICAgICAgICAgICAgdG91Y2hlZDogYi50b3VjaGVkLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGIudmFsdWVcclxuICAgICAgICAgICAgfSkpKSxcclxuICAgICAgICAgICAgYXhlczogZ2FtZXBhZC5heGVzXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlU3RhdHVzKHNvdXJjZSwgZnJhbWUsIHJlZlNwYWNlKSB7XHJcbiAgICAgICAgaWYgKHNvdXJjZS5nYW1lcGFkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGdhbWVwYWRQb3NlID0gZnJhbWUuZ2V0UG9zZShzb3VyY2UuZ3JpcFNwYWNlLCByZWZTcGFjZSk7XHJcbiAgICAgICAgICAgIGlmICghZ2FtZXBhZFBvc2UpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgc3lzdGVtID0gMDtcclxuICAgICAgICAgICAgaWYgKHNvdXJjZS5wcm9maWxlcy5pbmNsdWRlcygnaHRjLXZpdmUnKSkge1xyXG4gICAgICAgICAgICAgICAgc3lzdGVtID0gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChzb3VyY2UucHJvZmlsZXMuaW5jbHVkZXMoJ29jdWx1cy10b3VjaCcpKSB7XHJcbiAgICAgICAgICAgICAgICBzeXN0ZW0gPSAyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFRPRE8gKHdpbGxpYW0uYmVsY2hlcik6IEFkZCBvdGhlciBwcm9maWxlcyAoUXVlc3QsIE1pY3Jvc29mdCBNaXhlZCBSZWFsaXR5LCBldGMpXHJcbiAgICAgICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzLmdldCgnWFJTeXN0ZW0nKShbXHJcbiAgICAgICAgICAgICAgICBzeXN0ZW1cclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgIC8vIERlZmF1bHQ6IEFueUhhbmQgKDIpXHJcbiAgICAgICAgICAgIGxldCBoYW5kZWRuZXNzID0gMjtcclxuICAgICAgICAgICAgc3dpdGNoIChzb3VyY2UuaGFuZGVkbmVzcykge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnbGVmdCc6XHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGVkbmVzcyA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdyaWdodCc6XHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGVkbmVzcyA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gU2VuZCBjb250cm9sbGVyIHRyYW5zZm9ybVxyXG4gICAgICAgICAgICBjb25zdCBtYXRyaXggPSBnYW1lcGFkUG9zZS50cmFuc2Zvcm0ubWF0cml4O1xyXG4gICAgICAgICAgICBjb25zdCBtYXQgPSBbXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBtYXRbaV0gPSBuZXcgRmxvYXQzMkFycmF5KFttYXRyaXhbaV1dKVswXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBwcmV0dGllci1pZ25vcmVcclxuICAgICAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdYUkNvbnRyb2xsZXJUcmFuc2Zvcm0nKShbXHJcbiAgICAgICAgICAgICAgICBtYXRbMF0sIG1hdFs0XSwgbWF0WzhdLCBtYXRbMTJdLFxyXG4gICAgICAgICAgICAgICAgbWF0WzFdLCBtYXRbNV0sIG1hdFs5XSwgbWF0WzEzXSxcclxuICAgICAgICAgICAgICAgIG1hdFsyXSwgbWF0WzZdLCBtYXRbMTBdLCBtYXRbMTRdLFxyXG4gICAgICAgICAgICAgICAgbWF0WzNdLCBtYXRbN10sIG1hdFsxMV0sIG1hdFsxNV0sXHJcbiAgICAgICAgICAgICAgICBoYW5kZWRuZXNzXHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICAvLyBIYW5kbGUgY29udHJvbGxlciBidXR0b25zIGFuZCBheGVzXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnRyb2xsZXJzW2hhbmRlZG5lc3NdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbGxlcnNbaGFuZGVkbmVzc10gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJldlN0YXRlOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFN0YXRlOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbGxlcnNbaGFuZGVkbmVzc10ucHJldlN0YXRlID0gWFJHYW1lcGFkQ29udHJvbGxlci5kZWVwQ29weUdhbWVwYWQoc291cmNlLmdhbWVwYWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuY29udHJvbGxlcnNbaGFuZGVkbmVzc10uY3VycmVudFN0YXRlID0gWFJHYW1lcGFkQ29udHJvbGxlci5kZWVwQ29weUdhbWVwYWQoc291cmNlLmdhbWVwYWQpO1xyXG4gICAgICAgICAgICBjb25zdCBjb250cm9sbGVyID0gdGhpcy5jb250cm9sbGVyc1toYW5kZWRuZXNzXTtcclxuICAgICAgICAgICAgY29uc3QgY3VyclN0YXRlID0gY29udHJvbGxlci5jdXJyZW50U3RhdGU7XHJcbiAgICAgICAgICAgIGNvbnN0IHByZXZTdGF0ZSA9IGNvbnRyb2xsZXIucHJldlN0YXRlO1xyXG4gICAgICAgICAgICAvLyBJdGVyYXRlIG92ZXIgYnV0dG9uc1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJTdGF0ZS5idXR0b25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyQnV0dG9uID0gY3VyclN0YXRlLmJ1dHRvbnNbaV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2QnV0dG9uID0gcHJldlN0YXRlLmJ1dHRvbnNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VyckJ1dHRvbi5wcmVzc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcHJlc3NcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaXNSZXBlYXQgPSBwcmV2QnV0dG9uLnByZXNzZWQgPyAxIDogMDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ1hSQnV0dG9uUHJlc3NlZCcpKFtoYW5kZWRuZXNzLCBpLCBpc1JlcGVhdF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocHJldkJ1dHRvbi5wcmVzc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdYUkJ1dHRvblJlbGVhc2VkJykoW2hhbmRlZG5lc3MsIGksIDBdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChjdXJyQnV0dG9uLnRvdWNoZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyB0b3VjaGVkXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGlzUmVwZWF0ID0gcHJldkJ1dHRvbi50b3VjaGVkID8gMSA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdYUkJ1dHRvblRvdWNoZWQnKShbaGFuZGVkbmVzcywgaSwgaXNSZXBlYXRdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByZXZCdXR0b24udG91Y2hlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzLmdldCgnWFJCdXR0b25Ub3VjaFJlbGVhc2VkJykoW2hhbmRlZG5lc3MsIGksIDBdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBJdGVyYXRlIG92ZXIgZ2FtZXBhZCBheGVzXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VyclN0YXRlLmF4ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBjdXJBeGlzVmFsdWUgPSBjdXJyU3RhdGUuYXhlc1tpXTtcclxuICAgICAgICAgICAgICAgIGxldCBwcmV2QXhpc1ZhbHVlID0gcHJldlN0YXRlLmF4ZXNbaV07XHJcbiAgICAgICAgICAgICAgICAvLyBPbmx5IHNlbmQgYXhpcyB1cGRhdGUgaWYgdGhlcmUgaXMgYSBjaGFuZ2VcclxuICAgICAgICAgICAgICAgIGlmIChjdXJBeGlzVmFsdWUgIT0gcHJldkF4aXNWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzLmdldCgnWFJBbmFsb2cnKShbaGFuZGVkbmVzcywgaSwgY3VyQXhpc1ZhbHVlXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyc1toYW5kZWRuZXNzXS5wcmV2U3RhdGUgPSBjdXJyU3RhdGU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9Mb2dnZXIvTG9nZ2VyLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvTG9nZ2VyL0xvZ2dlci50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkxvZ2dlclwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBMb2dnZXIpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbmNsYXNzIExvZ2dlciB7XHJcbiAgICAvKipcclxuICAgICAqIENhcHR1cmVzIHRoZSBzdGFjayBhbmQgcmV0dXJucyBpdFxyXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgc3RhY2tcclxuICAgICAqL1xyXG4gICAgc3RhdGljIEdldFN0YWNrVHJhY2UoKSB7XHJcbiAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoKTtcclxuICAgICAgICBsZXQgZm9ybWF0dGVkU3RhY2sgPSAnTm8gU3RhY2sgQXZhaWxhYmxlIGZvciB0aGlzIGJyb3dzZXInO1xyXG4gICAgICAgIC8vIGZvcm1hdCB0aGUgZXJyb3JcclxuICAgICAgICBpZiAoZXJyb3Iuc3RhY2spIHtcclxuICAgICAgICAgICAgZm9ybWF0dGVkU3RhY2sgPSBlcnJvci5zdGFjay50b1N0cmluZygpLnJlcGxhY2UoL0Vycm9yL2csICcnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZvcm1hdHRlZFN0YWNrO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIGxvZyB2ZXJib3NpdHkgbGV2ZWxcclxuICAgICAqL1xyXG4gICAgc3RhdGljIFNldExvZ2dlclZlcmJvc2l0eSh2ZXJib3NlTG9nTGV2ZWwpIHtcclxuICAgICAgICBpZiAodGhpcy52ZXJib3NlTG9nTGV2ZWwgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnZlcmJvc2VMb2dMZXZlbCA9IHZlcmJvc2VMb2dMZXZlbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBzdGFuZGFyZCBsb2dnaW5nIG91dHB1dFxyXG4gICAgICogQHBhcmFtIHN0YWNrIC0gdGhlIHN0YWNrIHRyYWNlXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAtIHRoZSBtZXNzYWdlIHRvIGJlIGxvZ2dlZFxyXG4gICAgICogQHBhcmFtIHZlcmJvc2l0eSAtIHRoZSB2ZXJib3NpdHkgbGV2ZWxcclxuICAgICAqL1xyXG4gICAgc3RhdGljIExvZyhzdGFjaywgbWVzc2FnZSwgdmVyYm9zaXR5KSB7XHJcbiAgICAgICAgaWYgKHZlcmJvc2l0eSA+IHRoaXMudmVyYm9zZUxvZ0xldmVsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmV0dXJuU3RyaW5nID0gYExldmVsOiBMb2dcXG5Nc2c6ICR7bWVzc2FnZX1cXG5DYWxsZXI6ICR7c3RhY2t9YDtcclxuICAgICAgICBjb25zb2xlLmxvZyhyZXR1cm5TdHJpbmcpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgc3RhbmRhcmQgbG9nZ2luZyBvdXRwdXRcclxuICAgICAqIEBwYXJhbSBzdGFjayAtIHRoZSBzdGFjayB0cmFjZVxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgLSB0aGUgbWVzc2FnZSB0byBiZSBsb2dnZWRcclxuICAgICAqIEBwYXJhbSB2ZXJib3NpdHkgLSB0aGUgdmVyYm9zaXR5IGxldmVsXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBJbmZvKHN0YWNrLCBtZXNzYWdlLCB2ZXJib3NpdHkpIHtcclxuICAgICAgICBpZiAodmVyYm9zaXR5ID4gdGhpcy52ZXJib3NlTG9nTGV2ZWwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCByZXR1cm5TdHJpbmcgPSBgTGV2ZWw6IEluZm9cXG5Nc2c6ICR7bWVzc2FnZX1gO1xyXG4gICAgICAgIGNvbnNvbGUuaW5mbyhyZXR1cm5TdHJpbmcpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgc3RhbmRhcmQgbG9nZ2luZyBvdXRwdXRcclxuICAgICAqIEBwYXJhbSBzdGFjayAtIHRoZSBzdGFjayB0cmFjZVxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgLSB0aGUgbWVzc2FnZSB0byBiZSBsb2dnZWRcclxuICAgICAqL1xyXG4gICAgc3RhdGljIEVycm9yKHN0YWNrLCBtZXNzYWdlKSB7XHJcbiAgICAgICAgY29uc3QgcmV0dXJuU3RyaW5nID0gYExldmVsOiBFcnJvclxcbk1zZzogJHttZXNzYWdlfVxcbkNhbGxlcjogJHtzdGFja31gO1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IocmV0dXJuU3RyaW5nKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGhlIHN0YW5kYXJkIGxvZ2dpbmcgb3V0cHV0XHJcbiAgICAgKiBAcGFyYW0gc3RhY2sgLSB0aGUgc3RhY2sgdHJhY2VcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlIC0gdGhlIG1lc3NhZ2UgdG8gYmUgbG9nZ2VkXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBXYXJuaW5nKHN0YWNrLCBtZXNzYWdlKSB7XHJcbiAgICAgICAgY29uc3QgcmV0dXJuU3RyaW5nID0gYExldmVsOiBXYXJuaW5nXFxuQ2FsbGVyOiAke3N0YWNrfVxcbk1zZzogJHttZXNzYWdlfWA7XHJcbiAgICAgICAgY29uc29sZS53YXJuKHJldHVyblN0cmluZyk7XHJcbiAgICB9XHJcbn1cclxuTG9nZ2VyLnZlcmJvc2VMb2dMZXZlbCA9IDU7XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvQWdncmVnYXRlZFN0YXRzLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0FnZ3JlZ2F0ZWRTdGF0cy50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkFnZ3JlZ2F0ZWRTdGF0c1wiOiAoKSA9PiAoLyogYmluZGluZyAqLyBBZ2dyZWdhdGVkU3RhdHMpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfSW5ib3VuZFJUUFN0YXRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0luYm91bmRSVFBTdGF0cyAqLyBcIi4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9JbmJvdW5kUlRQU3RhdHMudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0RhdGFDaGFubmVsU3RhdHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vRGF0YUNoYW5uZWxTdGF0cyAqLyBcIi4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9EYXRhQ2hhbm5lbFN0YXRzLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9DYW5kaWRhdGVTdGF0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0NhbmRpZGF0ZVN0YXQgKi8gXCIuL3NyYy9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvQ2FuZGlkYXRlU3RhdC50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfT3V0Qm91bmRSVFBTdGF0c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9PdXRCb3VuZFJUUFN0YXRzICovIFwiLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL091dEJvdW5kUlRQU3RhdHMudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1Nlc3Npb25TdGF0c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9TZXNzaW9uU3RhdHMgKi8gXCIuL3NyYy9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvU2Vzc2lvblN0YXRzLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9TdHJlYW1TdGF0c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9TdHJlYW1TdGF0cyAqLyBcIi4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9TdHJlYW1TdGF0cy50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vTG9nZ2VyL0xvZ2dlciAqLyBcIi4vc3JjL0xvZ2dlci9Mb2dnZXIudHNcIik7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuY2xhc3MgQWdncmVnYXRlZFN0YXRzIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMgPSBuZXcgX0luYm91bmRSVFBTdGF0c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkluYm91bmRWaWRlb1N0YXRzKCk7XHJcbiAgICAgICAgdGhpcy5pbmJvdW5kQXVkaW9TdGF0cyA9IG5ldyBfSW5ib3VuZFJUUFN0YXRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uSW5ib3VuZEF1ZGlvU3RhdHMoKTtcclxuICAgICAgICB0aGlzLkRhdGFDaGFubmVsU3RhdHMgPSBuZXcgX0RhdGFDaGFubmVsU3RhdHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5EYXRhQ2hhbm5lbFN0YXRzKCk7XHJcbiAgICAgICAgdGhpcy5vdXRCb3VuZFZpZGVvU3RhdHMgPSBuZXcgX091dEJvdW5kUlRQU3RhdHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5PdXRCb3VuZFZpZGVvU3RhdHMoKTtcclxuICAgICAgICB0aGlzLnNlc3Npb25TdGF0cyA9IG5ldyBfU2Vzc2lvblN0YXRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18uU2Vzc2lvblN0YXRzKCk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1TdGF0cyA9IG5ldyBfU3RyZWFtU3RhdHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5TdHJlYW1TdGF0cygpO1xyXG4gICAgICAgIHRoaXMuY29kZWNzID0gbmV3IE1hcCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHYXRoZXIgYWxsIHRoZSBpbmZvcm1hdGlvbiBmcm9tIHRoZSBSVEMgUGVlciBDb25uZWN0aW9uIFJlcG9ydFxyXG4gICAgICogQHBhcmFtIHJ0Y1N0YXRzUmVwb3J0IC0gUlRDIFN0YXRzIFJlcG9ydFxyXG4gICAgICovXHJcbiAgICBwcm9jZXNzU3RhdHMocnRjU3RhdHNSZXBvcnQpIHtcclxuICAgICAgICB0aGlzLmxvY2FsQ2FuZGlkYXRlcyA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgIHRoaXMucmVtb3RlQ2FuZGlkYXRlcyA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgIHRoaXMuY2FuZGlkYXRlUGFpcnMgPSBuZXcgQXJyYXkoKTtcclxuICAgICAgICBydGNTdGF0c1JlcG9ydC5mb3JFYWNoKChzdGF0KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBzdGF0LnR5cGU7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnY2FuZGlkYXRlLXBhaXInOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlQ2FuZGlkYXRlUGFpcihzdGF0KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2NlcnRpZmljYXRlJzpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2NvZGVjJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUNvZGVjKHN0YXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnZGF0YS1jaGFubmVsJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZURhdGFDaGFubmVsKHN0YXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnaW5ib3VuZC1ydHAnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlSW5Cb3VuZFJUUChzdGF0KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2xvY2FsLWNhbmRpZGF0ZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVMb2NhbENhbmRpZGF0ZShzdGF0KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ21lZGlhLXNvdXJjZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdtZWRpYS1wbGF5b3V0JzpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ291dGJvdW5kLXJ0cCc6XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdwZWVyLWNvbm5lY3Rpb24nOlxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAncmVtb3RlLWNhbmRpZGF0ZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVSZW1vdGVDYW5kaWRhdGUoc3RhdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdyZW1vdGUtaW5ib3VuZC1ydHAnOlxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAncmVtb3RlLW91dGJvdW5kLXJ0cCc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVSZW1vdGVPdXRCb3VuZChzdGF0KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3RyYWNrJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVRyYWNrKHN0YXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAndHJhbnNwb3J0JzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVRyYW5zcG9ydChzdGF0KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3N0cmVhbSc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVTdHJlYW0oc3RhdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18uTG9nZ2VyLkVycm9yKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ3VuaGFuZGxlZCBTdGF0IFR5cGUnKTtcclxuICAgICAgICAgICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBzdGF0KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9jZXNzIHN0cmVhbSBzdGF0cyBkYXRhIGZyb20gd2VicnRjXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHN0YXQgLSB0aGUgc3RhdHMgY29taW5nIGluIGZyb20gd2VicnRjXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZVN0cmVhbShzdGF0KSB7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1TdGF0cyA9IHN0YXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFByb2Nlc3MgdGhlIEljZSBDYW5kaWRhdGUgUGFpciBEYXRhXHJcbiAgICAgKiBAcGFyYW0gc3RhdCAtIHRoZSBzdGF0cyBjb21pbmcgaW4gZnJvbSBpY2UgY2FuZGlkYXRlc1xyXG4gICAgICovXHJcbiAgICBoYW5kbGVDYW5kaWRhdGVQYWlyKHN0YXQpIHtcclxuICAgICAgICAvLyBBZGQgdGhlIGNhbmRpZGF0ZSBwYWlyIHRvIHRoZSBjYW5kaWRhdGUgcGFpciBhcnJheVxyXG4gICAgICAgIHRoaXMuY2FuZGlkYXRlUGFpcnMucHVzaChzdGF0KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUHJvY2VzcyB0aGUgRGF0YSBDaGFubmVsIERhdGFcclxuICAgICAqIEBwYXJhbSBzdGF0IC0gdGhlIHN0YXRzIGNvbWluZyBpbiBmcm9tIHRoZSBkYXRhIGNoYW5uZWxcclxuICAgICAqL1xyXG4gICAgaGFuZGxlRGF0YUNoYW5uZWwoc3RhdCkge1xyXG4gICAgICAgIHRoaXMuRGF0YUNoYW5uZWxTdGF0cy5ieXRlc1JlY2VpdmVkID0gc3RhdC5ieXRlc1JlY2VpdmVkO1xyXG4gICAgICAgIHRoaXMuRGF0YUNoYW5uZWxTdGF0cy5ieXRlc1NlbnQgPSBzdGF0LmJ5dGVzU2VudDtcclxuICAgICAgICB0aGlzLkRhdGFDaGFubmVsU3RhdHMuZGF0YUNoYW5uZWxJZGVudGlmaWVyID1cclxuICAgICAgICAgICAgc3RhdC5kYXRhQ2hhbm5lbElkZW50aWZpZXI7XHJcbiAgICAgICAgdGhpcy5EYXRhQ2hhbm5lbFN0YXRzLmlkID0gc3RhdC5pZDtcclxuICAgICAgICB0aGlzLkRhdGFDaGFubmVsU3RhdHMubGFiZWwgPSBzdGF0LmxhYmVsO1xyXG4gICAgICAgIHRoaXMuRGF0YUNoYW5uZWxTdGF0cy5tZXNzYWdlc1JlY2VpdmVkID0gc3RhdC5tZXNzYWdlc1JlY2VpdmVkO1xyXG4gICAgICAgIHRoaXMuRGF0YUNoYW5uZWxTdGF0cy5tZXNzYWdlc1NlbnQgPSBzdGF0Lm1lc3NhZ2VzU2VudDtcclxuICAgICAgICB0aGlzLkRhdGFDaGFubmVsU3RhdHMucHJvdG9jb2wgPSBzdGF0LnByb3RvY29sO1xyXG4gICAgICAgIHRoaXMuRGF0YUNoYW5uZWxTdGF0cy5zdGF0ZSA9IHN0YXQuc3RhdGU7XHJcbiAgICAgICAgdGhpcy5EYXRhQ2hhbm5lbFN0YXRzLnRpbWVzdGFtcCA9IHN0YXQudGltZXN0YW1wO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9jZXNzIHRoZSBMb2NhbCBJY2UgQ2FuZGlkYXRlIERhdGFcclxuICAgICAqIEBwYXJhbSBzdGF0IC0gbG9jYWwgc3RhdHNcclxuICAgICAqL1xyXG4gICAgaGFuZGxlTG9jYWxDYW5kaWRhdGUoc3RhdCkge1xyXG4gICAgICAgIGNvbnN0IGxvY2FsQ2FuZGlkYXRlID0gbmV3IF9DYW5kaWRhdGVTdGF0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X18uQ2FuZGlkYXRlU3RhdCgpO1xyXG4gICAgICAgIGxvY2FsQ2FuZGlkYXRlLmxhYmVsID0gJ2xvY2FsLWNhbmRpZGF0ZSc7XHJcbiAgICAgICAgbG9jYWxDYW5kaWRhdGUuYWRkcmVzcyA9IHN0YXQuYWRkcmVzcztcclxuICAgICAgICBsb2NhbENhbmRpZGF0ZS5wb3J0ID0gc3RhdC5wb3J0O1xyXG4gICAgICAgIGxvY2FsQ2FuZGlkYXRlLnByb3RvY29sID0gc3RhdC5wcm90b2NvbDtcclxuICAgICAgICBsb2NhbENhbmRpZGF0ZS5jYW5kaWRhdGVUeXBlID0gc3RhdC5jYW5kaWRhdGVUeXBlO1xyXG4gICAgICAgIGxvY2FsQ2FuZGlkYXRlLmlkID0gc3RhdC5pZDtcclxuICAgICAgICBsb2NhbENhbmRpZGF0ZS5yZWxheVByb3RvY29sID0gc3RhdC5yZWxheVByb3RvY29sO1xyXG4gICAgICAgIGxvY2FsQ2FuZGlkYXRlLnRyYW5zcG9ydElkID0gc3RhdC50cmFuc3BvcnRJZDtcclxuICAgICAgICB0aGlzLmxvY2FsQ2FuZGlkYXRlcy5wdXNoKGxvY2FsQ2FuZGlkYXRlKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUHJvY2VzcyB0aGUgUmVtb3RlIEljZSBDYW5kaWRhdGUgRGF0YVxyXG4gICAgICogQHBhcmFtIHN0YXQgLSBpY2UgY2FuZGlkYXRlIHN0YXRzXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZVJlbW90ZUNhbmRpZGF0ZShzdGF0KSB7XHJcbiAgICAgICAgY29uc3QgUmVtb3RlQ2FuZGlkYXRlID0gbmV3IF9DYW5kaWRhdGVTdGF0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X18uQ2FuZGlkYXRlU3RhdCgpO1xyXG4gICAgICAgIFJlbW90ZUNhbmRpZGF0ZS5sYWJlbCA9ICdyZW1vdGUtY2FuZGlkYXRlJztcclxuICAgICAgICBSZW1vdGVDYW5kaWRhdGUuYWRkcmVzcyA9IHN0YXQuYWRkcmVzcztcclxuICAgICAgICBSZW1vdGVDYW5kaWRhdGUucG9ydCA9IHN0YXQucG9ydDtcclxuICAgICAgICBSZW1vdGVDYW5kaWRhdGUucHJvdG9jb2wgPSBzdGF0LnByb3RvY29sO1xyXG4gICAgICAgIFJlbW90ZUNhbmRpZGF0ZS5pZCA9IHN0YXQuaWQ7XHJcbiAgICAgICAgUmVtb3RlQ2FuZGlkYXRlLmNhbmRpZGF0ZVR5cGUgPSBzdGF0LmNhbmRpZGF0ZVR5cGU7XHJcbiAgICAgICAgUmVtb3RlQ2FuZGlkYXRlLnJlbGF5UHJvdG9jb2wgPSBzdGF0LnJlbGF5UHJvdG9jb2w7XHJcbiAgICAgICAgUmVtb3RlQ2FuZGlkYXRlLnRyYW5zcG9ydElkID0gc3RhdC50cmFuc3BvcnRJZDtcclxuICAgICAgICB0aGlzLnJlbW90ZUNhbmRpZGF0ZXMucHVzaChSZW1vdGVDYW5kaWRhdGUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9jZXNzIHRoZSBJbmJvdW5kIFJUUCBBdWRpbyBhbmQgVmlkZW8gRGF0YVxyXG4gICAgICogQHBhcmFtIHN0YXQgLSBpbmJvdW5kIHJ0cCBzdGF0c1xyXG4gICAgICovXHJcbiAgICBoYW5kbGVJbkJvdW5kUlRQKHN0YXQpIHtcclxuICAgICAgICBzd2l0Y2ggKHN0YXQua2luZCkge1xyXG4gICAgICAgICAgICBjYXNlICd2aWRlbyc6XHJcbiAgICAgICAgICAgICAgICAvLyBOZWVkIHRvIGNvbnZlcnQgdG8gdW5rbm93biBmaXJzdCB0byByZW1vdmUgYW4gZXJyb3IgYXJvdW5kXHJcbiAgICAgICAgICAgICAgICAvLyBJbmJvdW5kVmlkZW9TdGF0cyBoYXZpbmcgdGhlIGJpdHJhdGUgbWVtYmVyIHdoaWNoIGlzbid0IGZvdW5kIG9uXHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgSW5ib3VuZFJUUFN0YXRzXHJcbiAgICAgICAgICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzID0gc3RhdDtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxhc3RWaWRlb1N0YXRzICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuYml0cmF0ZSA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICg4ICpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmluYm91bmRWaWRlb1N0YXRzLmJ5dGVzUmVjZWl2ZWQgLVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGFzdFZpZGVvU3RhdHMuYnl0ZXNSZWNlaXZlZCkpIC9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmluYm91bmRWaWRlb1N0YXRzLnRpbWVzdGFtcCAtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXN0VmlkZW9TdGF0cy50aW1lc3RhbXApO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuYml0cmF0ZSA9IE1hdGguZmxvb3IodGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5iaXRyYXRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMubGFzdFZpZGVvU3RhdHMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmluYm91bmRWaWRlb1N0YXRzKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdhdWRpbyc6XHJcbiAgICAgICAgICAgICAgICAvLyBOZWVkIHRvIGNvbnZlcnQgdG8gdW5rbm93biBmaXJzdCB0byByZW1vdmUgYW4gZXJyb3IgYXJvdW5kXHJcbiAgICAgICAgICAgICAgICAvLyBJbmJvdW5kQXVkaW9TdGF0cyBoYXZpbmcgdGhlIGJpdHJhdGUgbWVtYmVyIHdoaWNoIGlzbid0IGZvdW5kIG9uXHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgSW5ib3VuZFJUUFN0YXRzXHJcbiAgICAgICAgICAgICAgICB0aGlzLmluYm91bmRBdWRpb1N0YXRzID0gc3RhdDtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxhc3RBdWRpb1N0YXRzICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5ib3VuZEF1ZGlvU3RhdHMuYml0cmF0ZSA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICg4ICpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmluYm91bmRBdWRpb1N0YXRzLmJ5dGVzUmVjZWl2ZWQgLVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGFzdEF1ZGlvU3RhdHMuYnl0ZXNSZWNlaXZlZCkpIC9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmluYm91bmRBdWRpb1N0YXRzLnRpbWVzdGFtcCAtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXN0QXVkaW9TdGF0cy50aW1lc3RhbXApO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5ib3VuZEF1ZGlvU3RhdHMuYml0cmF0ZSA9IE1hdGguZmxvb3IodGhpcy5pbmJvdW5kQXVkaW9TdGF0cy5iaXRyYXRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMubGFzdEF1ZGlvU3RhdHMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmluYm91bmRBdWRpb1N0YXRzKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ0tpbmQgaXMgbm90IGhhbmRsZWQnKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUHJvY2VzcyB0aGUgb3V0Ym91bmQgUlRQIEF1ZGlvIGFuZCBWaWRlbyBEYXRhXHJcbiAgICAgKiBAcGFyYW0gc3RhdCAtIHJlbW90ZSBvdXRib3VuZCBzdGF0c1xyXG4gICAgICovXHJcbiAgICBoYW5kbGVSZW1vdGVPdXRCb3VuZChzdGF0KSB7XHJcbiAgICAgICAgc3dpdGNoIChzdGF0LmtpbmQpIHtcclxuICAgICAgICAgICAgY2FzZSAndmlkZW8nOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5vdXRCb3VuZFZpZGVvU3RhdHMuYnl0ZXNTZW50ID0gc3RhdC5ieXRlc1NlbnQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm91dEJvdW5kVmlkZW9TdGF0cy5pZCA9IHN0YXQuaWQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm91dEJvdW5kVmlkZW9TdGF0cy5sb2NhbElkID0gc3RhdC5sb2NhbElkO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vdXRCb3VuZFZpZGVvU3RhdHMucGFja2V0c1NlbnQgPSBzdGF0LnBhY2tldHNTZW50O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vdXRCb3VuZFZpZGVvU3RhdHMucmVtb3RlVGltZXN0YW1wID0gc3RhdC5yZW1vdGVUaW1lc3RhbXA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm91dEJvdW5kVmlkZW9TdGF0cy50aW1lc3RhbXAgPSBzdGF0LnRpbWVzdGFtcDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdhdWRpbyc6XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUHJvY2VzcyB0aGUgSW5ib3VuZCBWaWRlbyBUcmFjayBEYXRhXHJcbiAgICAgKiBAcGFyYW0gc3RhdCAtIHZpZGVvIHRyYWNrIHN0YXRzXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZVRyYWNrKHN0YXQpIHtcclxuICAgICAgICAvLyB3ZSBvbmx5IHdhbnQgdG8gZXh0cmFjdCBzdGF0cyBmcm9tIHRoZSB2aWRlbyB0cmFja1xyXG4gICAgICAgIGlmIChzdGF0LnR5cGUgPT09ICd0cmFjaycgJiZcclxuICAgICAgICAgICAgKHN0YXQudHJhY2tJZGVudGlmaWVyID09PSAndmlkZW9fbGFiZWwnIHx8IHN0YXQua2luZCA9PT0gJ3ZpZGVvJykpIHtcclxuICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5mcmFtZXNEcm9wcGVkID0gc3RhdC5mcmFtZXNEcm9wcGVkO1xyXG4gICAgICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmZyYW1lc1JlY2VpdmVkID0gc3RhdC5mcmFtZXNSZWNlaXZlZDtcclxuICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5mcmFtZUhlaWdodCA9IHN0YXQuZnJhbWVIZWlnaHQ7XHJcbiAgICAgICAgICAgIHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuZnJhbWVXaWR0aCA9IHN0YXQuZnJhbWVXaWR0aDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBoYW5kbGVUcmFuc3BvcnQoc3RhdCkge1xyXG4gICAgICAgIHRoaXMudHJhbnNwb3J0U3RhdHMgPSBzdGF0O1xyXG4gICAgfVxyXG4gICAgaGFuZGxlQ29kZWMoc3RhdCkge1xyXG4gICAgICAgIGNvbnN0IGNvZGVjSWQgPSBzdGF0LmlkO1xyXG4gICAgICAgIGNvbnN0IGNvZGVjVHlwZSA9IGAke3N0YXQubWltZVR5cGVcclxuICAgICAgICAgICAgLnJlcGxhY2UoJ3ZpZGVvLycsICcnKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgnYXVkaW8vJywgJycpfSR7c3RhdC5zZHBGbXRwTGluZSA/IGAgJHtzdGF0LnNkcEZtdHBMaW5lfWAgOiAnJ31gO1xyXG4gICAgICAgIHRoaXMuY29kZWNzLnNldChjb2RlY0lkLCBjb2RlY1R5cGUpO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlU2Vzc2lvblN0YXRpc3RpY3ModmlkZW9TdGFydFRpbWUsIGlucHV0Q29udHJvbGxlciwgdmlkZW9FbmNvZGVyQXZnUVApIHtcclxuICAgICAgICBjb25zdCBkZWx0YVRpbWUgPSBEYXRlLm5vdygpIC0gdmlkZW9TdGFydFRpbWU7XHJcbiAgICAgICAgdGhpcy5zZXNzaW9uU3RhdHMucnVuVGltZSA9IG5ldyBEYXRlKGRlbHRhVGltZSlcclxuICAgICAgICAgICAgLnRvSVNPU3RyaW5nKClcclxuICAgICAgICAgICAgLnN1YnN0cigxMSwgOClcclxuICAgICAgICAgICAgLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgY29uc3QgY29udHJvbHNTdHJlYW1JbnB1dCA9IGlucHV0Q29udHJvbGxlciA9PT0gbnVsbFxyXG4gICAgICAgICAgICA/ICdOb3Qgc2VudCB5ZXQnXHJcbiAgICAgICAgICAgIDogaW5wdXRDb250cm9sbGVyXHJcbiAgICAgICAgICAgICAgICA/ICd0cnVlJ1xyXG4gICAgICAgICAgICAgICAgOiAnZmFsc2UnO1xyXG4gICAgICAgIHRoaXMuc2Vzc2lvblN0YXRzLmNvbnRyb2xzU3RyZWFtSW5wdXQgPSBjb250cm9sc1N0cmVhbUlucHV0O1xyXG4gICAgICAgIHRoaXMuc2Vzc2lvblN0YXRzLnZpZGVvRW5jb2RlckF2Z1FQID0gdmlkZW9FbmNvZGVyQXZnUVA7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGlmIGEgdmFsdWUgY29taW5nIGluIGZyb20gb3VyIHN0YXRzIGlzIGFjdHVhbGx5IGEgbnVtYmVyXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgLSB0aGUgbnVtYmVyIHRvIGJlIGNoZWNrZWRcclxuICAgICAqL1xyXG4gICAgaXNOdW1iZXIodmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZSh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhlbHBlciBmdW5jdGlvbiB0byByZXR1cm4gdGhlIGFjdGl2ZSBjYW5kaWRhdGUgcGFpclxyXG4gICAgICogQHJldHVybnMgVGhlIGNhbmRpZGF0ZSBwYWlyIHRoYXQgaXMgY3VycmVudGx5IHJlY2VpdmluZyBkYXRhXHJcbiAgICAgKi9cclxuICAgIGdldEFjdGl2ZUNhbmRpZGF0ZVBhaXIoKSB7XHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIFJUQ1RyYW5zcG9ydCBzdGF0IGlzIG5vdCB1bmRlZmluZWRcclxuICAgICAgICBpZiAodGhpcy50cmFuc3BvcnRTdGF0cykge1xyXG4gICAgICAgICAgICAvLyBSZXR1cm4gdGhlIGNhbmRpZGF0ZSBwYWlyIHRoYXQgbWF0Y2hlcyB0aGUgdHJhbnNwb3J0IGNhbmRpZGF0ZSBwYWlyIGlkXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhbmRpZGF0ZVBhaXJzLmZpbmQoKGNhbmRpZGF0ZVBhaXIpID0+IGNhbmRpZGF0ZVBhaXIuaWQgPT09IHRoaXMudHJhbnNwb3J0U3RhdHMuc2VsZWN0ZWRDYW5kaWRhdGVQYWlySWQsIG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBGYWxsIGJhY2sgdG8gdGhlIHNlbGVjdGVkIGNhbmRpZGF0ZSBwYWlyXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FuZGlkYXRlUGFpcnMuZmluZCgoY2FuZGlkYXRlUGFpcikgPT4gY2FuZGlkYXRlUGFpci5zZWxlY3RlZCwgbnVsbCk7XHJcbiAgICB9XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9DYW5kaWRhdGVQYWlyU3RhdHMudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvQ2FuZGlkYXRlUGFpclN0YXRzLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiQ2FuZGlkYXRlUGFpclN0YXRzXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIENhbmRpZGF0ZVBhaXJTdGF0cylcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuLyoqXHJcbiAqIElDRSBDYW5kaWRhdGUgUGFpciBTdGF0cyBjb2xsZWN0ZWQgZnJvbSB0aGUgUlRDIFN0YXRzIFJlcG9ydFxyXG4gKi9cclxuY2xhc3MgQ2FuZGlkYXRlUGFpclN0YXRzIHtcclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0NhbmRpZGF0ZVN0YXQudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0NhbmRpZGF0ZVN0YXQudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiQ2FuZGlkYXRlU3RhdFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBDYW5kaWRhdGVTdGF0KVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4vKipcclxuICogSUNFIENhbmRpZGF0ZSBTdGF0IGNvbGxlY3RlZCBmcm9tIHRoZSBSVEMgU3RhdHMgUmVwb3J0XHJcbiAqL1xyXG5jbGFzcyBDYW5kaWRhdGVTdGF0IHtcclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0RhdGFDaGFubmVsU3RhdHMudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0RhdGFDaGFubmVsU3RhdHMudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiRGF0YUNoYW5uZWxTdGF0c1wiOiAoKSA9PiAoLyogYmluZGluZyAqLyBEYXRhQ2hhbm5lbFN0YXRzKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4vKipcclxuICogRGF0YSBDaGFubmVsIFN0YXRzIGNvbGxlY3RlZCBmcm9tIHRoZSBSVEMgU3RhdHMgUmVwb3J0XHJcbiAqL1xyXG5jbGFzcyBEYXRhQ2hhbm5lbFN0YXRzIHtcclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0luYm91bmRSVFBTdGF0cy50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9JbmJvdW5kUlRQU3RhdHMudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJJbmJvdW5kQXVkaW9TdGF0c1wiOiAoKSA9PiAoLyogYmluZGluZyAqLyBJbmJvdW5kQXVkaW9TdGF0cyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiSW5ib3VuZFJUUFN0YXRzXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIEluYm91bmRSVFBTdGF0cyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiSW5ib3VuZFZpZGVvU3RhdHNcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gSW5ib3VuZFZpZGVvU3RhdHMpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbi8qKlxyXG4gKiBJbmJvdW5kIEF1ZGlvIFN0YXRzIGNvbGxlY3RlZCBmcm9tIHRoZSBSVEMgU3RhdHMgUmVwb3J0XHJcbiAqL1xyXG5jbGFzcyBJbmJvdW5kQXVkaW9TdGF0cyB7XHJcbn1cclxuLyoqXHJcbiAqIEluYm91bmQgVmlkZW8gU3RhdHMgY29sbGVjdGVkIGZyb20gdGhlIFJUQyBTdGF0cyBSZXBvcnRcclxuICovXHJcbmNsYXNzIEluYm91bmRWaWRlb1N0YXRzIHtcclxufVxyXG4vKipcclxuICogSW5ib3VuZCBTdGF0cyBjb2xsZWN0ZWQgZnJvbSB0aGUgUlRDIFN0YXRzIFJlcG9ydFxyXG4gKi9cclxuY2xhc3MgSW5ib3VuZFJUUFN0YXRzIHtcclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL091dEJvdW5kUlRQU3RhdHMudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL091dEJvdW5kUlRQU3RhdHMudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiT3V0Qm91bmRSVFBTdGF0c1wiOiAoKSA9PiAoLyogYmluZGluZyAqLyBPdXRCb3VuZFJUUFN0YXRzKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJPdXRCb3VuZFZpZGVvU3RhdHNcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gT3V0Qm91bmRWaWRlb1N0YXRzKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4vKipcclxuICogT3V0Ym91bmQgVmlkZW8gU3RhdHMgY29sbGVjdGVkIGZyb20gdGhlIFJUQyBTdGF0cyBSZXBvcnRcclxuICovXHJcbmNsYXNzIE91dEJvdW5kVmlkZW9TdGF0cyB7XHJcbn1cclxuLyoqXHJcbiAqIE91dGJvdW5kIFN0YXRzIGNvbGxlY3RlZCBmcm9tIHRoZSBSVEMgU3RhdHMgUmVwb3J0XHJcbiAqL1xyXG5jbGFzcyBPdXRCb3VuZFJUUFN0YXRzIHtcclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJQZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXJcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gUGVlckNvbm5lY3Rpb25Db250cm9sbGVyKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL0xvZ2dlci9Mb2dnZXIgKi8gXCIuL3NyYy9Mb2dnZXIvTG9nZ2VyLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9Db25maWcvQ29uZmlnICovIFwiLi9zcmMvQ29uZmlnL0NvbmZpZy50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfQWdncmVnYXRlZFN0YXRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0FnZ3JlZ2F0ZWRTdGF0cyAqLyBcIi4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9BZ2dyZWdhdGVkU3RhdHMudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgc2RwX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBzZHAgKi8gXCJzZHBcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1V0aWxfUlRDVXRpbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL1V0aWwvUlRDVXRpbHMgKi8gXCIuL3NyYy9VdGlsL1JUQ1V0aWxzLnRzXCIpO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxudmFyIF9fYXdhaXRlciA9ICh1bmRlZmluZWQgJiYgdW5kZWZpbmVkLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxuXHJcblxyXG5cclxuXHJcblxyXG4vKipcclxuICogSGFuZGxlcyB0aGUgUGVlciBDb25uZWN0aW9uXHJcbiAqL1xyXG5jbGFzcyBQZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYSBuZXcgUlRDIFBlZXIgQ29ubmVjdGlvbiBjbGllbnRcclxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gUGVlciBjb25uZWN0aW9uIE9wdGlvbnNcclxuICAgICAqIEBwYXJhbSBjb25maWcgLSBUaGUgY29uZmlnIGZvciBvdXIgUFMgZXhwZXJpZW5jZS5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucywgY29uZmlnLCBwcmVmZXJyZWRDb2RlYykge1xyXG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlUGVlckNvbm5lY3Rpb24ob3B0aW9ucywgcHJlZmVycmVkQ29kZWMpO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlUGVlckNvbm5lY3Rpb24ob3B0aW9ucywgcHJlZmVycmVkQ29kZWMpIHtcclxuICAgICAgICAvLyBTZXQgdGhlIElDRSB0cmFuc3BvcnQgdG8gcmVsYXkgaWYgVFVSTiBlbmFibGVkXHJcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5GbGFncy5Gb3JjZVRVUk4pKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuaWNlVHJhbnNwb3J0UG9saWN5ID0gJ3JlbGF5JztcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ0ZvcmNpbmcgVFVSTiB1c2FnZSBieSBzZXR0aW5nIElDRSBUcmFuc3BvcnQgUG9saWN5IGluIHBlZXIgY29ubmVjdGlvbiBjb25maWcuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGJ1aWxkIGEgbmV3IHBlZXIgY29ubmVjdGlvbiB3aXRoIHRoZSBvcHRpb25zXHJcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbiA9IG5ldyBSVENQZWVyQ29ubmVjdGlvbihvcHRpb25zKTtcclxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLm9uc2lnbmFsaW5nc3RhdGVjaGFuZ2UgPSAoZXYpID0+IHRoaXMuaGFuZGxlU2lnbmFsU3RhdGVDaGFuZ2UoZXYpO1xyXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb24ub25pY2Vjb25uZWN0aW9uc3RhdGVjaGFuZ2UgPSAoZXYpID0+IHRoaXMuaGFuZGxlSWNlQ29ubmVjdGlvblN0YXRlQ2hhbmdlKGV2KTtcclxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLm9uaWNlZ2F0aGVyaW5nc3RhdGVjaGFuZ2UgPSAoZXYpID0+IHRoaXMuaGFuZGxlSWNlR2F0aGVyaW5nU3RhdGVDaGFuZ2UoZXYpO1xyXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb24ub250cmFjayA9IChldikgPT4gdGhpcy5oYW5kbGVPblRyYWNrKGV2KTtcclxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLm9uaWNlY2FuZGlkYXRlID0gKGV2KSA9PiB0aGlzLmhhbmRsZUljZUNhbmRpZGF0ZShldik7XHJcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbi5vbmRhdGFjaGFubmVsID0gKGV2KSA9PiB0aGlzLmhhbmRsZURhdGFDaGFubmVsKGV2KTtcclxuICAgICAgICB0aGlzLmFnZ3JlZ2F0ZWRTdGF0cyA9IG5ldyBfQWdncmVnYXRlZFN0YXRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18uQWdncmVnYXRlZFN0YXRzKCk7XHJcbiAgICAgICAgdGhpcy5wcmVmZXJyZWRDb2RlYyA9IHByZWZlcnJlZENvZGVjO1xyXG4gICAgICAgIHRoaXMudXBkYXRlQ29kZWNTZWxlY3Rpb24gPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYW4gb2ZmZXIgZm9yIHRoZSBXZWIgUlRDIGhhbmRzaGFrZSBhbmQgc2VuZCB0aGUgb2ZmZXIgdG8gdGhlIHNpZ25hbGluZyBzZXJ2ZXIgdmlhIHdlYnNvY2tldFxyXG4gICAgICogQHBhcmFtIG9mZmVyT3B0aW9ucyAtIFJUQyBPZmZlciBPcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZU9mZmVyKG9mZmVyT3B0aW9ucywgY29uZmlnKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ0NyZWF0ZSBPZmZlcicsIDYpO1xyXG4gICAgICAgICAgICBjb25zdCBpc0xvY2FsaG9zdENvbm5lY3Rpb24gPSBsb2NhdGlvbi5ob3N0bmFtZSA9PT0gJ2xvY2FsaG9zdCcgfHxcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uLmhvc3RuYW1lID09PSAnMTI3LjAuMC4xJztcclxuICAgICAgICAgICAgY29uc3QgaXNIdHRwc0Nvbm5lY3Rpb24gPSBsb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2h0dHBzOic7XHJcbiAgICAgICAgICAgIGxldCB1c2VNaWMgPSBjb25maWcuaXNGbGFnRW5hYmxlZChfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkZsYWdzLlVzZU1pYyk7XHJcbiAgICAgICAgICAgIGlmICh1c2VNaWMgJiYgIShpc0xvY2FsaG9zdENvbm5lY3Rpb24gfHwgaXNIdHRwc0Nvbm5lY3Rpb24pKSB7XHJcbiAgICAgICAgICAgICAgICB1c2VNaWMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uTG9nZ2VyLkVycm9yKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ01pY3JvcGhvbmUgYWNjZXNzIGluIHRoZSBicm93c2VyIHdpbGwgbm90IHdvcmsgaWYgeW91IGFyZSBub3Qgb24gSFRUUFMgb3IgbG9jYWxob3N0LiBEaXNhYmxpbmcgbWljIGFjY2Vzcy4nKTtcclxuICAgICAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uTG9nZ2VyLkVycm9yKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgXCJGb3IgdGVzdGluZyB5b3UgY2FuIGVuYWJsZSBIVFRQIG1pY3JvcGhvbmUgYWNjZXNzIENocm9tZSBieSB2aXNpdGluZyBjaHJvbWU6Ly9mbGFncy8gYW5kIGVuYWJsaW5nICd1bnNhZmVseS10cmVhdC1pbnNlY3VyZS1vcmlnaW4tYXMtc2VjdXJlJ1wiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnNldHVwVHJhbnNjZWl2ZXJzQXN5bmModXNlTWljKS5maW5hbGx5KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgICAgIChfYSA9IHRoaXMucGVlckNvbm5lY3Rpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jcmVhdGVPZmZlcihvZmZlck9wdGlvbnMpLnRoZW4oKG9mZmVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd1RleHRPdmVybGF5Q29ubmVjdGluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIG9mZmVyLnNkcCA9IHRoaXMubXVuZ2VTRFAob2ZmZXIuc2RwLCB1c2VNaWMpO1xyXG4gICAgICAgICAgICAgICAgICAgIChfYSA9IHRoaXMucGVlckNvbm5lY3Rpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZXRMb2NhbERlc2NyaXB0aW9uKG9mZmVyKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uU2VuZFdlYlJUQ09mZmVyKG9mZmVyKTtcclxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dUZXh0T3ZlcmxheVNldHVwRmFpbHVyZSgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICovXHJcbiAgICByZWNlaXZlT2ZmZXIob2ZmZXIsIGNvbmZpZykge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnUmVjZWl2ZSBPZmZlcicsIDYpO1xyXG4gICAgICAgICAgICAoX2EgPSB0aGlzLnBlZXJDb25uZWN0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0UmVtb3RlRGVzY3JpcHRpb24ob2ZmZXIpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXNMb2NhbGhvc3RDb25uZWN0aW9uID0gbG9jYXRpb24uaG9zdG5hbWUgPT09ICdsb2NhbGhvc3QnIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24uaG9zdG5hbWUgPT09ICcxMjcuMC4wLjEnO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXNIdHRwc0Nvbm5lY3Rpb24gPSBsb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2h0dHBzOic7XHJcbiAgICAgICAgICAgICAgICBsZXQgdXNlTWljID0gY29uZmlnLmlzRmxhZ0VuYWJsZWQoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5GbGFncy5Vc2VNaWMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHVzZU1pYyAmJiAhKGlzTG9jYWxob3N0Q29ubmVjdGlvbiB8fCBpc0h0dHBzQ29ubmVjdGlvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICB1c2VNaWMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLkxvZ2dlci5FcnJvcihfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdNaWNyb3Bob25lIGFjY2VzcyBpbiB0aGUgYnJvd3NlciB3aWxsIG5vdCB3b3JrIGlmIHlvdSBhcmUgbm90IG9uIEhUVFBTIG9yIGxvY2FsaG9zdC4gRGlzYWJsaW5nIG1pYyBhY2Nlc3MuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5Mb2dnZXIuRXJyb3IoX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIkZvciB0ZXN0aW5nIHlvdSBjYW4gZW5hYmxlIEhUVFAgbWljcm9waG9uZSBhY2Nlc3MgQ2hyb21lIGJ5IHZpc2l0aW5nIGNocm9tZTovL2ZsYWdzLyBhbmQgZW5hYmxpbmcgJ3Vuc2FmZWx5LXRyZWF0LWluc2VjdXJlLW9yaWdpbi1hcy1zZWN1cmUnXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gQWRkIG91ciBsaXN0IG9mIHByZWZlcnJlZCBjb2RlY3MsIGluIG9yZGVyIG9mIHByZWZlcmVuY2VcclxuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLnNldE9wdGlvblNldHRpbmdPcHRpb25zKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uT3B0aW9uUGFyYW1ldGVycy5QcmVmZXJyZWRDb2RlYywgdGhpcy5mdXp6eUludGVyc2VjdFVFQW5kQnJvd3NlckNvZGVjcyhvZmZlcikpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXR1cFRyYW5zY2VpdmVyc0FzeW5jKHVzZU1pYykuZmluYWxseSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgICAgICAgICAgICAgIChfYSA9IHRoaXMucGVlckNvbm5lY3Rpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jcmVhdGVBbnN3ZXIoKS50aGVuKChBbnN3ZXIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBBbnN3ZXIuc2RwID0gdGhpcy5tdW5nZVNEUChBbnN3ZXIuc2RwLCB1c2VNaWMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5wZWVyQ29ubmVjdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldExvY2FsRGVzY3JpcHRpb24oQW5zd2VyKTtcclxuICAgICAgICAgICAgICAgICAgICB9KS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uU2VuZFdlYlJUQ0Fuc3dlcigoX2EgPSB0aGlzLnBlZXJDb25uZWN0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY3VycmVudExvY2FsRGVzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5Mb2dnZXIuRXJyb3IoX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnY3JlYXRlQW5zd2VyKCkgZmFpbGVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgUmVtb3RlIERlc2NyaXB0b3IgZnJvbSB0aGUgc2lnbmFsaW5nIHNlcnZlciB0byB0aGUgUlRDIFBlZXIgQ29ubmVjdGlvblxyXG4gICAgICogQHBhcmFtIGFuc3dlciAtIFJUQyBTZXNzaW9uIERlc2NyaXB0b3IgZnJvbSB0aGUgU2lnbmFsaW5nIFNlcnZlclxyXG4gICAgICovXHJcbiAgICByZWNlaXZlQW5zd2VyKGFuc3dlcikge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICAoX2EgPSB0aGlzLnBlZXJDb25uZWN0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0UmVtb3RlRGVzY3JpcHRpb24oYW5zd2VyKTtcclxuICAgICAgICAvLyBBZGQgb3VyIGxpc3Qgb2YgcHJlZmVycmVkIGNvZGVjcywgaW4gb3JkZXIgb2YgcHJlZmVyZW5jZVxyXG4gICAgICAgIHRoaXMuY29uZmlnLnNldE9wdGlvblNldHRpbmdPcHRpb25zKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uT3B0aW9uUGFyYW1ldGVycy5QcmVmZXJyZWRDb2RlYywgdGhpcy5mdXp6eUludGVyc2VjdFVFQW5kQnJvd3NlckNvZGVjcyhhbnN3ZXIpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2VuZXJhdGUgQWdncmVnYXRlZCBTdGF0cyBhbmQgdGhlbiBmaXJlIGEgb25WaWRlbyBTdGF0cyBldmVudFxyXG4gICAgICovXHJcbiAgICBnZW5lcmF0ZVN0YXRzKCkge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICAoX2EgPSB0aGlzLnBlZXJDb25uZWN0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZ2V0U3RhdHMobnVsbCkudGhlbigoU3RhdHNEYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYWdncmVnYXRlZFN0YXRzLnByb2Nlc3NTdGF0cyhTdGF0c0RhdGEpO1xyXG4gICAgICAgICAgICB0aGlzLm9uVmlkZW9TdGF0cyh0aGlzLmFnZ3JlZ2F0ZWRTdGF0cyk7XHJcbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgcHJlZmVycmVkIGNvZGVjIHNlbGVjdGlvbiBiYXNlZCBvbiB3aGF0IHdhcyBhY3R1YWxseSBuZWdvdGlhdGVkXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnVwZGF0ZUNvZGVjU2VsZWN0aW9uICYmICEhdGhpcy5hZ2dyZWdhdGVkU3RhdHMuaW5ib3VuZFZpZGVvU3RhdHMuY29kZWNJZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWcuc2V0T3B0aW9uU2V0dGluZ1ZhbHVlKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uT3B0aW9uUGFyYW1ldGVycy5QcmVmZXJyZWRDb2RlYywgdGhpcy5hZ2dyZWdhdGVkU3RhdHMuY29kZWNzLmdldCh0aGlzLmFnZ3JlZ2F0ZWRTdGF0cy5pbmJvdW5kVmlkZW9TdGF0cy5jb2RlY0lkKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2xvc2UgVGhlIFBlZXIgQ29ubmVjdGlvblxyXG4gICAgICovXHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5wZWVyQ29ubmVjdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb24gPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogTW9kaWZ5IHRoZSBTZXNzaW9uIERlc2NyaXB0b3JcclxuICAgICAqIEBwYXJhbSBzZHAgLSBTZXNzaW9uIERlc2NyaXB0b3IgYXMgYSBzdHJpbmdcclxuICAgICAqIEBwYXJhbSB1c2VNaWMgLSBJcyB0aGUgbWljcm9waG9uZSBpbiB1c2VcclxuICAgICAqIEByZXR1cm5zIEEgbW9kaWZpZWQgU2Vzc2lvbiBEZXNjcmlwdG9yXHJcbiAgICAgKi9cclxuICAgIG11bmdlU0RQKHNkcCwgdXNlTWljKSB7XHJcbiAgICAgICAgbGV0IG11bmdlZFNEUCA9IHNkcC5yZXBsYWNlKC8oYT1mbXRwOlxcZCsgLipsZXZlbC1hc3ltbWV0cnktYWxsb3dlZD0uKilcXHJcXG4vZ20sICckMTt4LWdvb2dsZS1zdGFydC1iaXRyYXRlPTEwMDAwO3gtZ29vZ2xlLW1heC1iaXRyYXRlPTEwMDAwMFxcclxcbicpO1xyXG4gICAgICAgIC8vIHNldCBtYXggYml0cmF0ZSB0byBoaWdoZXN0IGJpdHJhdGUgT3B1cyBzdXBwb3J0c1xyXG4gICAgICAgIGxldCBhdWRpb1NEUCA9ICdtYXhhdmVyYWdlYml0cmF0ZT01MTAwMDA7JztcclxuICAgICAgICBpZiAodXNlTWljKSB7XHJcbiAgICAgICAgICAgIC8vIHNldCB0aGUgbWF4IGNhcHR1cmUgcmF0ZSB0byA0OGtoeiAoc28gd2UgY2FuIHNlbmQgaGlnaCBxdWFsaXR5IGF1ZGlvIGZyb20gbWljKVxyXG4gICAgICAgICAgICBhdWRpb1NEUCArPSAnc3Byb3AtbWF4Y2FwdHVyZXJhdGU9NDgwMDA7JztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gRm9yY2UgbW9ubyBvciBzdGVyZW8gYmFzZWQgb24gd2hldGhlciA/Zm9yY2VNb25vIHdhcyBwYXNzZWQgb3Igbm90XHJcbiAgICAgICAgYXVkaW9TRFAgKz0gdGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkZsYWdzLkZvcmNlTW9ub0F1ZGlvKVxyXG4gICAgICAgICAgICA/ICdzdGVyZW89MDsnXHJcbiAgICAgICAgICAgIDogJ3N0ZXJlbz0xOyc7XHJcbiAgICAgICAgLy8gZW5hYmxlIGluLWJhbmQgZm9yd2FyZCBlcnJvciBjb3JyZWN0aW9uIGZvciBvcHVzIGF1ZGlvXHJcbiAgICAgICAgYXVkaW9TRFAgKz0gJ3VzZWluYmFuZGZlYz0xJztcclxuICAgICAgICAvLyBXZSB1c2UgdGhlIGxpbmUgJ3VzZWluYmFuZGZlYz0xJyAod2hpY2ggT3B1cyB1c2VzKSB0byBzZXQgb3VyIE9wdXMgc3BlY2lmaWMgYXVkaW8gcGFyYW1ldGVycy5cclxuICAgICAgICBtdW5nZWRTRFAgPSBtdW5nZWRTRFAucmVwbGFjZSgndXNlaW5iYW5kZmVjPTEnLCBhdWRpb1NEUCk7XHJcbiAgICAgICAgcmV0dXJuIG11bmdlZFNEUDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogV2hlbiBhIEljZSBDYW5kaWRhdGUgaXMgcmVjZWl2ZWQgYWRkIHRvIHRoZSBSVEMgUGVlciBDb25uZWN0aW9uXHJcbiAgICAgKiBAcGFyYW0gaWNlQ2FuZGlkYXRlIC0gUlRDIEljZSBDYW5kaWRhdGUgZnJvbSB0aGUgU2lnbmFsaW5nIFNlcnZlclxyXG4gICAgICovXHJcbiAgICBoYW5kbGVPbkljZShpY2VDYW5kaWRhdGUpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ3BlZXJjb25uZWN0aW9uIGhhbmRsZU9uSWNlJywgNik7XHJcbiAgICAgICAgLy8gLy8gaWYgZm9yY2luZyBUVVJOLCByZWplY3QgYW55IGNhbmRpZGF0ZXMgbm90IHJlbGF5XHJcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5GbGFncy5Gb3JjZVRVUk4pKSB7XHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIG5vIHJlbGF5IGFkZHJlc3MgaXMgZm91bmQsIGlmIHNvLCB3ZSBhcmUgYXNzdW1pbmcgaXQgbWVhbnMgbm8gVFVSTiBzZXJ2ZXJcclxuICAgICAgICAgICAgaWYgKGljZUNhbmRpZGF0ZS5jYW5kaWRhdGUuaW5kZXhPZigncmVsYXknKSA8IDApIHtcclxuICAgICAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uTG9nZ2VyLkluZm8oX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgRHJvcHBpbmcgY2FuZGlkYXRlIGJlY2F1c2UgaXQgd2FzIG5vdCBUVVJOIHJlbGF5LiB8IFR5cGU9ICR7aWNlQ2FuZGlkYXRlLnR5cGV9IHwgUHJvdG9jb2w9ICR7aWNlQ2FuZGlkYXRlLnByb3RvY29sfSB8IEFkZHJlc3M9JHtpY2VDYW5kaWRhdGUuYWRkcmVzc30gfCBQb3J0PSR7aWNlQ2FuZGlkYXRlLnBvcnR9IHxgLCA2KTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAoX2EgPSB0aGlzLnBlZXJDb25uZWN0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYWRkSWNlQ2FuZGlkYXRlKGljZUNhbmRpZGF0ZSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFdoZW4gdGhlIFJUQyBQZWVyIENvbm5lY3Rpb24gU2lnbmFsaW5nIHNlcnZlciBzdGF0ZSBDaGFuZ2VzXHJcbiAgICAgKiBAcGFyYW0gc3RhdGUgLSBTaWduYWxpbmcgU2VydmVyIFN0YXRlIENoYW5nZSBFdmVudFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVTaWduYWxTdGF0ZUNoYW5nZShzdGF0ZSkge1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdzaWduYWxpbmcgc3RhdGUgY2hhbmdlOiAnICsgc3RhdGUsIDYpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGUgd2hlbiB0aGUgSWNlIENvbm5lY3Rpb24gU3RhdGUgQ2hhbmdlc1xyXG4gICAgICogQHBhcmFtIHN0YXRlIC0gSWNlIENvbm5lY3Rpb24gU3RhdGVcclxuICAgICAqL1xyXG4gICAgaGFuZGxlSWNlQ29ubmVjdGlvblN0YXRlQ2hhbmdlKHN0YXRlKSB7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ2ljZSBjb25uZWN0aW9uIHN0YXRlIGNoYW5nZTogJyArIHN0YXRlLCA2KTtcclxuICAgICAgICB0aGlzLm9uSWNlQ29ubmVjdGlvblN0YXRlQ2hhbmdlKHN0YXRlKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHdoZW4gdGhlIEljZSBHYXRoZXJpbmcgU3RhdGUgQ2hhbmdlc1xyXG4gICAgICogQHBhcmFtIHN0YXRlIC0gSWNlIEdhdGhlcmluZyBTdGF0ZSBDaGFuZ2VcclxuICAgICAqL1xyXG4gICAgaGFuZGxlSWNlR2F0aGVyaW5nU3RhdGVDaGFuZ2Uoc3RhdGUpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnaWNlIGdhdGhlcmluZyBzdGF0ZSBjaGFuZ2U6ICcgKyBKU09OLnN0cmluZ2lmeShzdGF0ZSksIDYpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBY3RpdmF0ZXMgdGhlIG9uVHJhY2sgbWV0aG9kXHJcbiAgICAgKiBAcGFyYW0gZXZlbnQgLSBUaGUgd2ViUnRjIHRyYWNrIGV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZU9uVHJhY2soZXZlbnQpIHtcclxuICAgICAgICB0aGlzLm9uVHJhY2soZXZlbnQpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBY3RpdmF0ZXMgdGhlIG9uUGVlckljZUNhbmRpZGF0ZVxyXG4gICAgICogQHBhcmFtIGV2ZW50IC0gVGhlIHBlZXIgaWNlIGNhbmRpZGF0ZVxyXG4gICAgICovXHJcbiAgICBoYW5kbGVJY2VDYW5kaWRhdGUoZXZlbnQpIHtcclxuICAgICAgICB0aGlzLm9uUGVlckljZUNhbmRpZGF0ZShldmVudCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFjdGl2YXRlcyB0aGUgb25EYXRhQ2hhbm5lbFxyXG4gICAgICogQHBhcmFtIGV2ZW50IC0gVGhlIHBlZXIncyBkYXRhIGNoYW5uZWxcclxuICAgICAqL1xyXG4gICAgaGFuZGxlRGF0YUNoYW5uZWwoZXZlbnQpIHtcclxuICAgICAgICB0aGlzLm9uRGF0YUNoYW5uZWwoZXZlbnQpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBvdmVycmlkZSBtZXRob2QgZm9yIG9uVHJhY2sgZm9yIHVzZSBvdXRzaWRlIG9mIHRoZSBQZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXJcclxuICAgICAqIEBwYXJhbSB0cmFja0V2ZW50IC0gVGhlIHdlYlJ0YyB0cmFjayBldmVudFxyXG4gICAgICovXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXHJcbiAgICBvblRyYWNrKHRyYWNrRXZlbnQpIHtcclxuICAgICAgICAvLyBEZWZhdWx0IEZ1bmN0aW9uYWxpdHk6IERvIE5vdGhpbmdcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQW4gb3ZlcnJpZGUgbWV0aG9kIGZvciBvbkljZUNvbm5lY3Rpb25TdGF0ZUNoYW5nZSBmb3IgdXNlIG91dHNpZGUgb2YgdGhlIFBlZXJDb25uZWN0aW9uQ29udHJvbGxlclxyXG4gICAgICogQHBhcmFtIGV2ZW50IC0gVGhlIHdlYlJ0YyBpY2Vjb25uZWN0aW9uc3RhdGVjaGFuZ2UgZXZlbnRcclxuICAgICAqL1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgb25JY2VDb25uZWN0aW9uU3RhdGVDaGFuZ2UoZXZlbnQpIHtcclxuICAgICAgICAvLyBEZWZhdWx0IEZ1bmN0aW9uYWxpdHk6IERvIE5vdGhpbmdcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQW4gb3ZlcnJpZGUgbWV0aG9kIGZvciBvblBlZXJJY2VDYW5kaWRhdGUgZm9yIHVzZSBvdXRzaWRlIG9mIHRoZSBQZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXJcclxuICAgICAqIEBwYXJhbSBwZWVyQ29ubmVjdGlvbkljZUV2ZW50IC0gVGhlIHBlZXIgaWNlIGNhbmRpZGF0ZVxyXG4gICAgICovXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXHJcbiAgICBvblBlZXJJY2VDYW5kaWRhdGUocGVlckNvbm5lY3Rpb25JY2VFdmVudCkge1xyXG4gICAgICAgIC8vIERlZmF1bHQgRnVuY3Rpb25hbGl0eTogRG8gTm90aGluZ1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBvdmVycmlkZSBtZXRob2QgZm9yIG9uRGF0YUNoYW5uZWwgZm9yIHVzZSBvdXRzaWRlIG9mIHRoZSBQZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXJcclxuICAgICAqIEBwYXJhbSBkYXRhY2hhbm5lbEV2ZW50IC0gVGhlIHBlZXIncyBkYXRhIGNoYW5uZWxcclxuICAgICAqL1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgb25EYXRhQ2hhbm5lbChkYXRhY2hhbm5lbEV2ZW50KSB7XHJcbiAgICAgICAgLy8gRGVmYXVsdCBGdW5jdGlvbmFsaXR5OiBEbyBOb3RoaW5nXHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEZpbmQgdGhlIGludGVyc2VjdGlvbiBiZXR3ZWVuIFVFIGFuZCBicm93c2VyIGNvZGVjcywgd2l0aCBmdXp6eSBtYXRjaGluZyBpZiBzb21lIHBhcmFtZXRlcnMgYXJlIG1pc21hdGNoZWQuXHJcbiAgICAgKiBAcGFyYW0gc2RwIFRoZSByZW1vdGUgc2RwXHJcbiAgICAgKiBAcmV0dXJucyBUaGUgaW50ZXJzZWN0aW9uIGJldHdlZW4gYnJvd3NlciBzdXBwb3J0ZWQgY29kZWNzIGFuZCB1ZSBzdXBwb3J0ZWQgY29kZWNzLlxyXG4gICAgICovXHJcbiAgICBmdXp6eUludGVyc2VjdFVFQW5kQnJvd3NlckNvZGVjcyhzZHApIHtcclxuICAgICAgICAvLyBXZSB3YW50IHRvIGJ1aWxkIGFuIGFycmF5IG9mIGFsbCBzdXBwb3J0ZWQgY29kZWNzIG9uIGJvdGggc2lkZXNcclxuICAgICAgICBjb25zdCBhbGxTdXBwb3J0ZWRDb2RlY3MgPSBuZXcgQXJyYXkoKTtcclxuICAgICAgICBjb25zdCBhbGxVRUNvZGVjcyA9IHRoaXMucGFyc2VBdmFpbGFibGVDb2RlY3Moc2RwKTtcclxuICAgICAgICBjb25zdCBhbGxCcm93c2VyQ29kZWNzID0gdGhpcy5jb25maWcuZ2V0U2V0dGluZ09wdGlvbihfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLk9wdGlvblBhcmFtZXRlcnMuUHJlZmVycmVkQ29kZWMpLm9wdGlvbnM7XHJcbiAgICAgICAgZm9yIChjb25zdCB1ZUNvZGVjIG9mIGFsbFVFQ29kZWNzKSB7XHJcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIGJyb3dzZXIgY29kZWNzIGRpcmVjdGx5IG1hdGNoZXMgVUUgY29kZWMgKHdpdGggcGFyYW1ldGVycyBhbmQgZXZlcnl0aGluZylcclxuICAgICAgICAgICAgaWYgKGFsbEJyb3dzZXJDb2RlY3MuaW5jbHVkZXModWVDb2RlYykpIHtcclxuICAgICAgICAgICAgICAgIGFsbFN1cHBvcnRlZENvZGVjcy5wdXNoKHVlQ29kZWMpO1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlIGNoZWNrIGlmIGJyb3dzZXIgY29kZWMgYXQgbGVhc3QgY29udGFpbnMgYSBtYXRjaCBmb3IgdGhlIFVFIGNvZGVjIG5hbWUgKHdpdGhvdXQgcGFyYW1ldGVycykuXHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdWVDb2RlY05hbWVBbmRQYXJhbXMgPSB1ZUNvZGVjLnNwbGl0KFwiIFwiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHVlQ29kZWNOYW1lID0gdWVDb2RlY05hbWVBbmRQYXJhbXNbMF07XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGJyb3dzZXJDb2RlYyBvZiBhbGxCcm93c2VyQ29kZWNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJyb3dzZXJDb2RlYy5pbmNsdWRlcyh1ZUNvZGVjTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgcGFzcyBicm93c2VyIGNvZGVjIGhlcmUgYXMgdGhleSBvcHRpb24gY29udGFpbiBleHRyYSBwYXJhbWV0ZXJzLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxTdXBwb3J0ZWRDb2RlY3MucHVzaChicm93c2VyQ29kZWMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFsbFN1cHBvcnRlZENvZGVjcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2V0dXAgdHJhY2tzIG9uIHRoZSBSVEMgUGVlciBDb25uZWN0aW9uXHJcbiAgICAgKiBAcGFyYW0gdXNlTWljIC0gaXMgbWljIGluIHVzZVxyXG4gICAgICovXHJcbiAgICBzZXR1cFRyYW5zY2VpdmVyc0FzeW5jKHVzZU1pYykge1xyXG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2gsIF9qLCBfaywgX2wsIF9tO1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgICAgIC8vIFNldHVwIGEgdHJhbnNjZWl2ZXIgZm9yIHJlY2VpdmluZyB2aWRlbyAoaWYgd2UgbmVlZCB0bylcclxuICAgICAgICAgICAgbGV0IGhhc1ZpZGVvUmVjZWl2ZXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCB0cmFuc2NlaXZlciBvZiAoX2IgPSAoX2EgPSB0aGlzLnBlZXJDb25uZWN0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZ2V0VHJhbnNjZWl2ZXJzKCkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFtdKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHJhbnNjZWl2ZXIgJiYgdHJhbnNjZWl2ZXIucmVjZWl2ZXIgJiYgdHJhbnNjZWl2ZXIucmVjZWl2ZXIudHJhY2sgJiYgdHJhbnNjZWl2ZXIucmVjZWl2ZXIudHJhY2sua2luZCA9PT0gJ3ZpZGVvJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc1ZpZGVvUmVjZWl2ZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghaGFzVmlkZW9SZWNlaXZlcikge1xyXG4gICAgICAgICAgICAgICAgKF9jID0gdGhpcy5wZWVyQ29ubmVjdGlvbikgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmFkZFRyYW5zY2VpdmVyKCd2aWRlbycsIHsgZGlyZWN0aW9uOiAncmVjdm9ubHknIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChSVENSdHBSZWNlaXZlci5nZXRDYXBhYmlsaXRpZXMgJiYgdGhpcy5wcmVmZXJyZWRDb2RlYyAhPSAnJykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0cmFuc2NlaXZlciBvZiAoX2UgPSAoX2QgPSB0aGlzLnBlZXJDb25uZWN0aW9uKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuZ2V0VHJhbnNjZWl2ZXJzKCkpICE9PSBudWxsICYmIF9lICE9PSB2b2lkIDAgPyBfZSA6IFtdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zY2VpdmVyICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zY2VpdmVyLnJlY2VpdmVyICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zY2VpdmVyLnJlY2VpdmVyLnRyYWNrICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zY2VpdmVyLnJlY2VpdmVyLnRyYWNrLmtpbmQgPT09ICd2aWRlbycgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNjZWl2ZXIuc2V0Q29kZWNQcmVmZXJlbmNlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBHZXQgb3VyIHByZWZlcnJlZCBjb2RlYyBmcm9tIHRoZSBjb2RlY3Mgb3B0aW9ucyBkcm9wIGRvd25cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJlZmVycmVkUlRQQ29kZWMgPSB0aGlzLnByZWZlcnJlZENvZGVjLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZWZlcnJlZFJUQ1J0cENvZGVjQ2FwYWJpbGl0eSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWVUeXBlOiAndmlkZW8vJyArIHByZWZlcnJlZFJUUENvZGVjWzBdIC8qIE5hbWUgKi8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9ja1JhdGU6IDkwMDAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2RwRm10cExpbmU6IHByZWZlcnJlZFJUUENvZGVjWzFdID8gcHJlZmVycmVkUlRQQ29kZWNbMV0gOiAnJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBQb3B1bGF0ZSBhIGxpc3Qgb2YgY29kZWNzIHdlIHdpbGwgc3VwcG9ydCB3aXRoIG91ciBwcmVmZXJyZWQgb25lIGluIHRoZSBmaXJzdCBwb3NpdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvdXJTdXBwb3J0ZWRDb2RlY3MgPSBbcHJlZmVycmVkUlRDUnRwQ29kZWNDYXBhYmlsaXR5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gR28gdGhyb3VnaCBhbGwgY29kZWNzIHRoZSBicm93c2VyIHN1cHBvcnRzIGFuZCBhZGQgdGhlbSB0byB0aGUgbGlzdCAoaW4gYW55IG9yZGVyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBSVENSdHBSZWNlaXZlci5nZXRDYXBhYmlsaXRpZXMoJ3ZpZGVvJykuY29kZWNzLmZvckVhY2goKGJyb3dzZXJTdXBwb3J0ZWRDb2RlYykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRG9uJ3QgYWRkIG91ciBwcmVmZXJyZWQgY29kZWMgYWdhaW4sIGJ1dCBhZGQgZXZlcnl0aGluZyBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYnJvd3NlclN1cHBvcnRlZENvZGVjLm1pbWVUeXBlICE9IHByZWZlcnJlZFJUQ1J0cENvZGVjQ2FwYWJpbGl0eS5taW1lVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91clN1cHBvcnRlZENvZGVjcy5wdXNoKGJyb3dzZXJTdXBwb3J0ZWRDb2RlYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgoYnJvd3NlclN1cHBvcnRlZENvZGVjID09PSBudWxsIHx8IGJyb3dzZXJTdXBwb3J0ZWRDb2RlYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogYnJvd3NlclN1cHBvcnRlZENvZGVjLnNkcEZtdHBMaW5lKSAhPSAocHJlZmVycmVkUlRDUnRwQ29kZWNDYXBhYmlsaXR5ID09PSBudWxsIHx8IHByZWZlcnJlZFJUQ1J0cENvZGVjQ2FwYWJpbGl0eSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJlZmVycmVkUlRDUnRwQ29kZWNDYXBhYmlsaXR5LnNkcEZtdHBMaW5lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91clN1cHBvcnRlZENvZGVjcy5wdXNoKGJyb3dzZXJTdXBwb3J0ZWRDb2RlYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGNvZGVjIG9mIG91clN1cHBvcnRlZENvZGVjcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChjb2RlYyA9PT0gbnVsbCB8fCBjb2RlYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29kZWMuc2RwRm10cExpbmUpID09PSB1bmRlZmluZWQgfHwgY29kZWMuc2RwRm10cExpbmUgPT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgY2FuJ3QgZHluYW1pY2FsbHkgYWRkIG1lbWJlcnMgdG8gdGhlIGNvZGVjLCBzbyBpbnN0ZWFkIHJlbW92ZSB0aGUgZmllbGQgaWYgaXQncyBlbXB0eVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjb2RlYy5zZHBGbXRwTGluZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2NlaXZlci5zZXRDb2RlY1ByZWZlcmVuY2VzKG91clN1cHBvcnRlZENvZGVjcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBoYXNBdWRpb1JlY2VpdmVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgdHJhbnNjZWl2ZXIgb2YgKF9nID0gKF9mID0gdGhpcy5wZWVyQ29ubmVjdGlvbikgPT09IG51bGwgfHwgX2YgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mLmdldFRyYW5zY2VpdmVycygpKSAhPT0gbnVsbCAmJiBfZyAhPT0gdm9pZCAwID8gX2cgOiBbXSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRyYW5zY2VpdmVyICYmIHRyYW5zY2VpdmVyLnJlY2VpdmVyICYmIHRyYW5zY2VpdmVyLnJlY2VpdmVyLnRyYWNrICYmIHRyYW5zY2VpdmVyLnJlY2VpdmVyLnRyYWNrLmtpbmQgPT09ICdhdWRpbycpIHtcclxuICAgICAgICAgICAgICAgICAgICBoYXNBdWRpb1JlY2VpdmVyID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBTZXR1cCBhIHRyYW5zY2VpdmVyIGZvciBzZW5kaW5nIG1pYyBhdWRpbyB0byBVRSBhbmQgcmVjZWl2aW5nIGF1ZGlvIGZyb20gVUVcclxuICAgICAgICAgICAgaWYgKCF1c2VNaWMpIHtcclxuICAgICAgICAgICAgICAgIGlmICghaGFzQXVkaW9SZWNlaXZlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIChfaCA9IHRoaXMucGVlckNvbm5lY3Rpb24pID09PSBudWxsIHx8IF9oID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaC5hZGRUcmFuc2NlaXZlcignYXVkaW8nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogJ3JlY3Zvbmx5J1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gc2V0IHRoZSBhdWRpbyBvcHRpb25zIGJhc2VkIG9uIG1pYyB1c2FnZVxyXG4gICAgICAgICAgICAgICAgY29uc3QgYXVkaW9PcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGF1dG9HYWluQ29udHJvbDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbm5lbENvdW50OiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIGVjaG9DYW5jZWxsYXRpb246IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhdGVuY3k6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgbm9pc2VTdXBwcmVzc2lvbjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgc2FtcGxlUmF0ZTogNDgwMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgc2FtcGxlU2l6ZTogMTYsXHJcbiAgICAgICAgICAgICAgICAgICAgdm9sdW1lOiAxLjBcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyBzZXQgdGhlIG1lZGlhIHNlbmQgb3B0aW9uc1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWVkaWFTZW5kT3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgICAgICAgICB2aWRlbzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgYXVkaW86IGF1ZGlvT3B0aW9uc1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vIE5vdGUgdXNpbmcgbWljIG9uIGFuZHJvaWQgY2hyb21lIHJlcXVpcmVzIFNTTCBvciBjaHJvbWU6Ly9mbGFncy8gXCJ1bnNhZmVseS10cmVhdC1pbnNlY3VyZS1vcmlnaW4tYXMtc2VjdXJlXCJcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0cmVhbSA9IHlpZWxkIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKG1lZGlhU2VuZE9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0cmVhbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNBdWRpb1JlY2VpdmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdHJhbnNjZWl2ZXIgb2YgKF9rID0gKF9qID0gdGhpcy5wZWVyQ29ubmVjdGlvbikgPT09IG51bGwgfHwgX2ogPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9qLmdldFRyYW5zY2VpdmVycygpKSAhPT0gbnVsbCAmJiBfayAhPT0gdm9pZCAwID8gX2sgOiBbXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9VdGlsX1JUQ1V0aWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uUlRDVXRpbHMuY2FuVHJhbnNjZWl2ZXJSZWNlaXZlQXVkaW8odHJhbnNjZWl2ZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0cmFjayBvZiBzdHJlYW0uZ2V0VHJhY2tzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYWNrLmtpbmQgJiYgdHJhY2sua2luZCA9PSAnYXVkaW8nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2NlaXZlci5zZW5kZXIucmVwbGFjZVRyYWNrKHRyYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zY2VpdmVyLmRpcmVjdGlvbiA9ICdzZW5kcmVjdic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdHJhY2sgb2Ygc3RyZWFtLmdldFRyYWNrcygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhY2sua2luZCAmJiB0cmFjay5raW5kID09ICdhdWRpbycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoX2wgPSB0aGlzLnBlZXJDb25uZWN0aW9uKSA9PT0gbnVsbCB8fCBfbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2wuYWRkVHJhbnNjZWl2ZXIodHJhY2ssIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAnc2VuZHJlY3YnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc0F1ZGlvUmVjZWl2ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgKF9tID0gdGhpcy5wZWVyQ29ubmVjdGlvbikgPT09IG51bGwgfHwgX20gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9tLmFkZFRyYW5zY2VpdmVyKCdhdWRpbycsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogJ3JlY3Zvbmx5J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQW5kIG92ZXJyaWRlIGV2ZW50IGZvciB3aGVuIHRoZSB2aWRlbyBzdGF0cyBhcmUgZmlyZWRcclxuICAgICAqIEBwYXJhbSBldmVudCAtIEFnZ3JlZ2F0ZWQgU3RhdHNcclxuICAgICAqL1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgb25WaWRlb1N0YXRzKGV2ZW50KSB7XHJcbiAgICAgICAgLy8gRGVmYXVsdCBGdW5jdGlvbmFsaXR5OiBEbyBOb3RoaW5nXHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEV2ZW50IHRvIHNlbmQgdGhlIFJUQyBvZmZlciB0byB0aGUgU2lnbmFsaW5nIHNlcnZlclxyXG4gICAgICogQHBhcmFtIG9mZmVyIC0gUlRDIE9mZmVyXHJcbiAgICAgKi9cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcclxuICAgIG9uU2VuZFdlYlJUQ09mZmVyKG9mZmVyKSB7XHJcbiAgICAgICAgLy8gRGVmYXVsdCBGdW5jdGlvbmFsaXR5OiBEbyBOb3RoaW5nXHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEV2ZW50IHRvIHNlbmQgdGhlIFJUQyBBbnN3ZXIgdG8gdGhlIFNpZ25hbGluZyBzZXJ2ZXJcclxuICAgICAqIEBwYXJhbSBhbnN3ZXIgLSBSVEMgQW5zd2VyXHJcbiAgICAgKi9cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcclxuICAgIG9uU2VuZFdlYlJUQ0Fuc3dlcihhbnN3ZXIpIHtcclxuICAgICAgICAvLyBEZWZhdWx0IEZ1bmN0aW9uYWxpdHk6IERvIE5vdGhpbmdcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQW4gb3ZlcnJpZGUgZm9yIHNob3dpbmcgdGhlIFBlZXIgY29ubmVjdGlvbiBjb25uZWN0aW5nIE92ZXJsYXlcclxuICAgICAqL1xyXG4gICAgc2hvd1RleHRPdmVybGF5Q29ubmVjdGluZygpIHtcclxuICAgICAgICAvLyBEZWZhdWx0IEZ1bmN0aW9uYWxpdHk6IERvIE5vdGhpbmdcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQW4gb3ZlcnJpZGUgZm9yIHNob3dpbmcgdGhlIFBlZXIgY29ubmVjdGlvbiBGYWlsZWQgb3ZlcmxheVxyXG4gICAgICovXHJcbiAgICBzaG93VGV4dE92ZXJsYXlTZXR1cEZhaWx1cmUoKSB7XHJcbiAgICAgICAgLy8gRGVmYXVsdCBGdW5jdGlvbmFsaXR5OiBEbyBOb3RoaW5nXHJcbiAgICB9XHJcbiAgICBwYXJzZUF2YWlsYWJsZUNvZGVjcyhydGNTZXNzaW9uRGVzY3JpcHRpb24pIHtcclxuICAgICAgICAvLyBObyBwb2ludCBpbiB1cGRhdGluZyB0aGUgYXZhaWxhYmxlIGNvZGVjcyBpZiBvbiBGRlxyXG4gICAgICAgIGlmICghUlRDUnRwUmVjZWl2ZXIuZ2V0Q2FwYWJpbGl0aWVzKVxyXG4gICAgICAgICAgICByZXR1cm4gWydPbmx5IGF2YWlsYWJsZSBvbiBDaHJvbWUnXTtcclxuICAgICAgICBjb25zdCB1ZVN1cHBvcnRlZENvZGVjcyA9IFtdO1xyXG4gICAgICAgIGNvbnN0IHNlY3Rpb25zID0gKDAsc2RwX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uc3BsaXRTZWN0aW9ucykocnRjU2Vzc2lvbkRlc2NyaXB0aW9uLnNkcCk7XHJcbiAgICAgICAgLy8gZGlzY2FyZCB0aGUgc2Vzc2lvbiBpbmZvcm1hdGlvbiBhcyB3ZSBvbmx5IHdhbnQgbWVkaWEgcmVsYXRlZCBpbmZvXHJcbiAgICAgICAgc2VjdGlvbnMuc2hpZnQoKTtcclxuICAgICAgICBzZWN0aW9ucy5mb3JFYWNoKChtZWRpYVNlY3Rpb24pID0+IHtcclxuICAgICAgICAgICAgY29uc3QgeyBjb2RlY3MgfSA9ICgwLHNkcF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLnBhcnNlUnRwUGFyYW1ldGVycykobWVkaWFTZWN0aW9uKTtcclxuICAgICAgICAgICAgLy8gRmlsdGVyIG9ubHkgZm9yIFZQWCAvIEgyNlggLyBBVjFcclxuICAgICAgICAgICAgY29uc3QgbWF0Y2hlciA9IC8oVlBcXGR8SDI2XFxkfEFWMSkuKi87XHJcbiAgICAgICAgICAgIGNvZGVjcy5mb3JFYWNoKChjKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdHIgPSBjLm5hbWUgK1xyXG4gICAgICAgICAgICAgICAgICAgICcgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoYy5wYXJhbWV0ZXJzIHx8IHt9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKChwKSA9PiBwICsgJz0nICsgYy5wYXJhbWV0ZXJzW3BdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuam9pbignOycpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSBtYXRjaGVyLmV4ZWMoc3RyKTtcclxuICAgICAgICAgICAgICAgIGlmIChtYXRjaCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjLm5hbWUgPT0gJ1ZQOScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVUUgYW5zd2VycyBkb24ndCBzcGVjaWZ5IHByb2ZpbGUgYnV0IHdlIGtub3cgd2Ugd2FudCBwcm9maWxlIDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgYy5wYXJhbWV0ZXJzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Byb2ZpbGUtaWQnOiAnMCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29kZWNTdHIgPSBjLm5hbWUgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhjLnBhcmFtZXRlcnMgfHwge30pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKChwKSA9PiBwICsgJz0nICsgYy5wYXJhbWV0ZXJzW3BdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmpvaW4oJzsnKTtcclxuICAgICAgICAgICAgICAgICAgICB1ZVN1cHBvcnRlZENvZGVjcy5wdXNoKGNvZGVjU3RyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHVlU3VwcG9ydGVkQ29kZWNzO1xyXG4gICAgfVxyXG59XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvU2Vzc2lvblN0YXRzLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL1Nlc3Npb25TdGF0cy50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlNlc3Npb25TdGF0c1wiOiAoKSA9PiAoLyogYmluZGluZyAqLyBTZXNzaW9uU3RhdHMpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbi8qKlxyXG4gKiBTZXNzaW9uIHN0YXRpc3RpY3NcclxuICovXHJcbmNsYXNzIFNlc3Npb25TdGF0cyB7XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9TdHJlYW1TdGF0cy50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL1N0cmVhbVN0YXRzLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJTdHJlYW1TdGF0c1wiOiAoKSA9PiAoLyogYmluZGluZyAqLyBTdHJlYW1TdGF0cylcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuLyoqXHJcbiAqIENsYXNzIHRvIGhvbGQgdGhlIHN0cmVhbSBzdGF0cyBkYXRhIGNvbWluZyBpbiBmcm9tIHdlYlJ0Y1xyXG4gKi9cclxuY2xhc3MgU3RyZWFtU3RhdHMge1xyXG59XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9QaXhlbFN0cmVhbWluZy9QaXhlbFN0cmVhbWluZy50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9QaXhlbFN0cmVhbWluZy9QaXhlbFN0cmVhbWluZy50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJQaXhlbFN0cmVhbWluZ1wiOiAoKSA9PiAoLyogYmluZGluZyAqLyBQaXhlbFN0cmVhbWluZylcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9Db25maWcvQ29uZmlnICovIFwiLi9zcmMvQ29uZmlnL0NvbmZpZy50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfV2ViUnRjUGxheWVyX1dlYlJ0Y1BsYXllckNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL1dlYlJ0Y1BsYXllci9XZWJSdGNQbGF5ZXJDb250cm9sbGVyICovIFwiLi9zcmMvV2ViUnRjUGxheWVyL1dlYlJ0Y1BsYXllckNvbnRyb2xsZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL0xvZ2dlci9Mb2dnZXIgKi8gXCIuL3NyYy9Mb2dnZXIvTG9nZ2VyLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9VSV9PblNjcmVlbktleWJvYXJkX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9VSS9PblNjcmVlbktleWJvYXJkICovIFwiLi9zcmMvVUkvT25TY3JlZW5LZXlib2FyZC50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL1V0aWwvRXZlbnRFbWl0dGVyICovIFwiLi9zcmMvVXRpbC9FdmVudEVtaXR0ZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1dlYlhSX1dlYlhSQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vV2ViWFIvV2ViWFJDb250cm9sbGVyICovIFwiLi9zcmMvV2ViWFIvV2ViWFJDb250cm9sbGVyLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vVWVJbnN0YW5jZU1lc3NhZ2UvU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIgKi8gXCIuL3NyYy9VZUluc3RhbmNlTWVzc2FnZS9TdHJlYW1NZXNzYWdlQ29udHJvbGxlci50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfRGF0YUNoYW5uZWxfRGF0YUNoYW5uZWxMYXRlbmN5VGVzdENvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL0RhdGFDaGFubmVsL0RhdGFDaGFubmVsTGF0ZW5jeVRlc3RDb250cm9sbGVyICovIFwiLi9zcmMvRGF0YUNoYW5uZWwvRGF0YUNoYW5uZWxMYXRlbmN5VGVzdENvbnRyb2xsZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1V0aWxfUlRDVXRpbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL1V0aWwvUlRDVXRpbHMgKi8gXCIuL3NyYy9VdGlsL1JUQ1V0aWxzLnRzXCIpO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUga2V5IGNsYXNzIGZvciB0aGUgYnJvd3NlciBzaWRlIG9mIGEgUGl4ZWwgU3RyZWFtaW5nIGFwcGxpY2F0aW9uLCBpdCBpbmNsdWRlczpcclxuICogV2ViUlRDIGhhbmRsaW5nLCBYUiBzdXBwb3J0LCBpbnB1dCBoYW5kbGluZywgYW5kIGVtaXR0ZXJzIGZvciBsaWZldGltZSBhbmQgc3RhdGUgY2hhbmdlIGV2ZW50cy5cclxuICogVXNlcnMgYXJlIGVuY291cmFnZWQgdG8gdXNlIHRoaXMgY2xhc3MgYXMgaXMsIHRocm91Z2ggY29tcG9zaXRpb24sIG9yIGV4dGVuZCBpdC4gSW4gYW55IGNhc2UsXHJcbiAqIHRoaXMgd2lsbCBsaWtlbHkgYmUgdGhlIGNvcmUgb2YgeW91ciBQaXhlbCBTdHJlYW1pbmcgZXhwZXJpZW5jZSBpbiB0ZXJtcyBvZiBmdW5jdGlvbmFsaXR5LlxyXG4gKi9cclxuY2xhc3MgUGl4ZWxTdHJlYW1pbmcge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gY29uZmlnIC0gQSBuZXdseSBpbnN0YW50aWF0ZWQgY29uZmlnIG9iamVjdFxyXG4gICAgICogQHBhcmFtIG92ZXJyaWRlcyAtIFBhcmFtZXRlcnMgdG8gb3ZlcnJpZGUgZGVmYXVsdCBiZWhhdmlvdXJcclxuICAgICAqIHJldHVybnMgdGhlIGJhc2UgUGl4ZWwgc3RyZWFtaW5nIG9iamVjdFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcsIG92ZXJyaWRlcykge1xyXG4gICAgICAgIHRoaXMuYWxsb3dDb25zb2xlQ29tbWFuZHMgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcclxuICAgICAgICBpZiAob3ZlcnJpZGVzID09PSBudWxsIHx8IG92ZXJyaWRlcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3ZlcnJpZGVzLnZpZGVvRWxlbWVudFBhcmVudCkge1xyXG4gICAgICAgICAgICB0aGlzLl92aWRlb0VsZW1lbnRQYXJlbnQgPSBvdmVycmlkZXMudmlkZW9FbGVtZW50UGFyZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXIgPSBuZXcgX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAgICAgdGhpcy5jb25maWd1cmVTZXR0aW5ncygpO1xyXG4gICAgICAgIC8vIHNldHVwIFdlYlJUQ1xyXG4gICAgICAgIHRoaXMuc2V0V2ViUnRjUGxheWVyQ29udHJvbGxlcihuZXcgX1dlYlJ0Y1BsYXllcl9XZWJSdGNQbGF5ZXJDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uV2ViUnRjUGxheWVyQ29udHJvbGxlcih0aGlzLmNvbmZpZywgdGhpcykpO1xyXG4gICAgICAgIC8vIE9uc2NyZWVuIGtleWJvYXJkXHJcbiAgICAgICAgdGhpcy5vblNjcmVlbktleWJvYXJkSGVscGVyID0gbmV3IF9VSV9PblNjcmVlbktleWJvYXJkX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uT25TY3JlZW5LZXlib2FyZCh0aGlzLnZpZGVvRWxlbWVudFBhcmVudCk7XHJcbiAgICAgICAgdGhpcy5vblNjcmVlbktleWJvYXJkSGVscGVyLnVucXVhbnRpemVBbmREZW5vcm1hbGl6ZVVuc2lnbmVkID0gKHgsIHkpID0+IHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIucmVxdWVzdFVucXVhbnRpemVkQW5kRGVub3JtYWxpemVVbnNpZ25lZCh4LCB5KTtcclxuICAgICAgICB0aGlzLl9hY3RpdmF0ZU9uU2NyZWVuS2V5Ym9hcmQgPSAoY29tbWFuZCkgPT4gdGhpcy5vblNjcmVlbktleWJvYXJkSGVscGVyLnNob3dPblNjcmVlbktleWJvYXJkKGNvbW1hbmQpO1xyXG4gICAgICAgIHRoaXMuX3dlYlhyQ29udHJvbGxlciA9IG5ldyBfV2ViWFJfV2ViWFJDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18uV2ViWFJDb250cm9sbGVyKHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIpO1xyXG4gICAgICAgIHRoaXMuX3NldHVwV2ViUnRjVENQUmVsYXlEZXRlY3Rpb24gPSB0aGlzLl9zZXR1cFdlYlJ0Y1RDUFJlbGF5RGV0ZWN0aW9uLmJpbmQodGhpcyk7XHJcbiAgICAgICAgLy8gQWRkIGV2ZW50IGxpc3RlbmVyIGZvciB0aGUgd2ViUnRjQ29ubmVjdGVkIGV2ZW50XHJcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJ3ZWJSdGNDb25uZWN0ZWRcIiwgKHdlYlJ0Y0Nvbm5lY3RlZEV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIC8vIEJpbmQgdG8gdGhlIHN0YXRzIHJlY2VpdmVkIGV2ZW50XHJcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlci5hZGRFdmVudExpc3RlbmVyKFwic3RhdHNSZWNlaXZlZFwiLCB0aGlzLl9zZXR1cFdlYlJ0Y1RDUFJlbGF5RGV0ZWN0aW9uKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgZWxlbWVudCB0aGF0IGNvbnRhaW5zIHRoZSB2aWRlbyBzdHJlYW0gZWxlbWVudC5cclxuICAgICAqL1xyXG4gICAgZ2V0IHZpZGVvRWxlbWVudFBhcmVudCgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX3ZpZGVvRWxlbWVudFBhcmVudCkge1xyXG4gICAgICAgICAgICB0aGlzLl92aWRlb0VsZW1lbnRQYXJlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgdGhpcy5fdmlkZW9FbGVtZW50UGFyZW50LmlkID0gJ3ZpZGVvRWxlbWVudFBhcmVudCc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl92aWRlb0VsZW1lbnRQYXJlbnQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENvbmZpZ3VyZSB0aGUgc2V0dGluZ3Mgd2l0aCBvbiBjaGFuZ2UgbGlzdGVuZXJzIGFuZCBhbnkgYWRkaXRpb25hbCBwZXIgZXhwZXJpZW5jZSBzZXR0aW5ncy5cclxuICAgICAqL1xyXG4gICAgY29uZmlndXJlU2V0dGluZ3MoKSB7XHJcbiAgICAgICAgdGhpcy5jb25maWcuX2FkZE9uU2V0dGluZ0NoYW5nZWRMaXN0ZW5lcihfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLkZsYWdzLklzUXVhbGl0eUNvbnRyb2xsZXIsICh3YW50c1F1YWxpdHlDb250cm9sbGVyKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIElmIHRoZSBzZXR0aW5nIGhhcyBiZWVuIHNldCB0byB0cnVlIChlaXRoZXIgcHJvZ3JhbWF0aWNhbGx5IG9yIHRoZSB1c2VyIGhhcyBmbGlja2VkIHRoZSB0b2dnbGUpXHJcbiAgICAgICAgICAgIC8vIGFuZCB3ZSBhcmVuJ3QgY3VycmVudGx5IHF1YWxpdHkgY29udHJvbGxlciwgc2VuZCB0aGUgcmVxdWVzdFxyXG4gICAgICAgICAgICBpZiAod2FudHNRdWFsaXR5Q29udHJvbGxlciA9PT0gdHJ1ZSAmJlxyXG4gICAgICAgICAgICAgICAgIXRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuaXNRdWFsaXR5Q29udHJvbGxlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5zZW5kUmVxdWVzdFF1YWxpdHlDb250cm9sT3duZXJzaGlwKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNvbmZpZy5fYWRkT25TZXR0aW5nQ2hhbmdlZExpc3RlbmVyKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uRmxhZ3MuQUZLRGV0ZWN0aW9uLCAoaXNBRktFbmFibGVkKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuc2V0QWZrRW5hYmxlZChpc0FGS0VuYWJsZWQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY29uZmlnLl9hZGRPblNldHRpbmdDaGFuZ2VkTGlzdGVuZXIoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5GbGFncy5NYXRjaFZpZXdwb3J0UmVzb2x1dGlvbiwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLnZpZGVvUGxheWVyLnVwZGF0ZVZpZGVvU3RyZWFtU2l6ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY29uZmlnLl9hZGRPblNldHRpbmdDaGFuZ2VkTGlzdGVuZXIoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5GbGFncy5Ib3ZlcmluZ01vdXNlTW9kZSwgKGlzSG92ZXJpbmdNb3VzZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5zZXRGbGFnTGFiZWwoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5GbGFncy5Ib3ZlcmluZ01vdXNlTW9kZSwgYENvbnRyb2wgU2NoZW1lOiAke2lzSG92ZXJpbmdNb3VzZSA/ICdIb3ZlcmluZycgOiAnTG9ja2VkJ30gTW91c2VgKTtcclxuICAgICAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5zZXRNb3VzZUlucHV0RW5hYmxlZCh0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uRmxhZ3MuTW91c2VJbnB1dCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIHVzZXIgaW5wdXRcclxuICAgICAgICB0aGlzLmNvbmZpZy5fYWRkT25TZXR0aW5nQ2hhbmdlZExpc3RlbmVyKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uRmxhZ3MuS2V5Ym9hcmRJbnB1dCwgKGlzRW5hYmxlZCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLnNldEtleWJvYXJkSW5wdXRFbmFibGVkKGlzRW5hYmxlZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jb25maWcuX2FkZE9uU2V0dGluZ0NoYW5nZWRMaXN0ZW5lcihfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLkZsYWdzLk1vdXNlSW5wdXQsIChpc0VuYWJsZWQpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5zZXRNb3VzZUlucHV0RW5hYmxlZChpc0VuYWJsZWQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY29uZmlnLl9hZGRPblNldHRpbmdDaGFuZ2VkTGlzdGVuZXIoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5GbGFncy5GYWtlTW91c2VXaXRoVG91Y2hlcywgKF9pc0Zha2VNb3VzZUVuYWJsZWQpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5zZXRUb3VjaElucHV0RW5hYmxlZCh0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uRmxhZ3MuVG91Y2hJbnB1dCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY29uZmlnLl9hZGRPblNldHRpbmdDaGFuZ2VkTGlzdGVuZXIoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5GbGFncy5Ub3VjaElucHV0LCAoaXNFbmFibGVkKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuc2V0VG91Y2hJbnB1dEVuYWJsZWQoaXNFbmFibGVkKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNvbmZpZy5fYWRkT25TZXR0aW5nQ2hhbmdlZExpc3RlbmVyKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uRmxhZ3MuR2FtZXBhZElucHV0LCAoaXNFbmFibGVkKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuc2V0R2FtZVBhZElucHV0RW5hYmxlZChpc0VuYWJsZWQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIGVuY29kZXIgc2V0dGluZ3NcclxuICAgICAgICB0aGlzLmNvbmZpZy5fYWRkT25OdW1lcmljU2V0dGluZ0NoYW5nZWRMaXN0ZW5lcihfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLk51bWVyaWNQYXJhbWV0ZXJzLk1pblFQLCAobmV3VmFsdWUpID0+IHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJy0tLS0tLS0tICBTZW5kaW5nIE1pblFQICAtLS0tLS0tLScsIDcpO1xyXG4gICAgICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLnNlbmRFbmNvZGVyTWluUVAobmV3VmFsdWUpO1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScsIDcpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY29uZmlnLl9hZGRPbk51bWVyaWNTZXR0aW5nQ2hhbmdlZExpc3RlbmVyKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uTnVtZXJpY1BhcmFtZXRlcnMuTWF4UVAsIChuZXdWYWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnLS0tLS0tLS0gIFNlbmRpbmcgZW5jb2RlciBzZXR0aW5ncyAgLS0tLS0tLS0nLCA3KTtcclxuICAgICAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5zZW5kRW5jb2Rlck1heFFQKG5ld1ZhbHVlKTtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nLCA3KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBXZWJSVEMgc2V0dGluZ3NcclxuICAgICAgICB0aGlzLmNvbmZpZy5fYWRkT25OdW1lcmljU2V0dGluZ0NoYW5nZWRMaXN0ZW5lcihfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLk51bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ01pbkJpdHJhdGUsIChuZXdWYWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnLS0tLS0tLS0gIFNlbmRpbmcgd2ViIHJ0YyBzZXR0aW5ncyAgLS0tLS0tLS0nLCA3KTtcclxuICAgICAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5zZW5kV2ViUlRDTWluQml0cmF0ZShuZXdWYWx1ZSAqIDEwMDAgLyoga2JwcyB0byBicHMgKi8pO1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScsIDcpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY29uZmlnLl9hZGRPbk51bWVyaWNTZXR0aW5nQ2hhbmdlZExpc3RlbmVyKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uTnVtZXJpY1BhcmFtZXRlcnMuV2ViUlRDTWF4Qml0cmF0ZSwgKG5ld1ZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICctLS0tLS0tLSAgU2VuZGluZyB3ZWIgcnRjIHNldHRpbmdzICAtLS0tLS0tLScsIDcpO1xyXG4gICAgICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLnNlbmRXZWJSVENNYXhCaXRyYXRlKG5ld1ZhbHVlICogMTAwMCAvKiBrYnBzIHRvIGJwcyAqLyk7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJywgNyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jb25maWcuX2FkZE9uTnVtZXJpY1NldHRpbmdDaGFuZ2VkTGlzdGVuZXIoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5OdW1lcmljUGFyYW1ldGVycy5XZWJSVENGUFMsIChuZXdWYWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnLS0tLS0tLS0gIFNlbmRpbmcgd2ViIHJ0YyBzZXR0aW5ncyAgLS0tLS0tLS0nLCA3KTtcclxuICAgICAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5zZW5kV2ViUlRDRnBzKG5ld1ZhbHVlKTtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nLCA3KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNvbmZpZy5fYWRkT25PcHRpb25TZXR0aW5nQ2hhbmdlZExpc3RlbmVyKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uT3B0aW9uUGFyYW1ldGVycy5QcmVmZXJyZWRDb2RlYywgKG5ld1ZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl93ZWJSdGNDb250cm9sbGVyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLnNldFByZWZlcnJlZENvZGVjKG5ld1ZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY29uZmlnLl9yZWdpc3Rlck9uQ2hhbmdlRXZlbnRzKHRoaXMuX2V2ZW50RW1pdHRlcik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFjdGl2YXRlIHRoZSBvbiBzY3JlZW4ga2V5Ym9hcmQgd2hlbiByZWNlaXZpbmcgdGhlIGNvbW1hbmQgZnJvbSB0aGUgc3RyZWFtZXJcclxuICAgICAqIEBwYXJhbSBjb21tYW5kIC0gdGhlIGtleWJvYXJkIGNvbW1hbmRcclxuICAgICAqL1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgX2FjdGl2YXRlT25TY3JlZW5LZXlib2FyZChjb21tYW5kKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIGlucHV0IGNvbnRyb2wgb3duZXJzaGlwXHJcbiAgICAgKiBAcGFyYW0gaW5wdXRDb250cm9sT3duZXJzaGlwIC0gZG9lcyB0aGUgdXNlciBoYXZlIGlucHV0IGNvbnRyb2wgb3duZXJzaGlwXHJcbiAgICAgKi9cclxuICAgIF9vbklucHV0Q29udHJvbE93bmVyc2hpcChpbnB1dENvbnRyb2xPd25lcnNoaXApIHtcclxuICAgICAgICB0aGlzLl9pbnB1dENvbnRyb2xsZXIgPSBpbnB1dENvbnRyb2xPd25lcnNoaXA7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEluc3RhbnRpYXRlIHRoZSBXZWJSVENQbGF5ZXJDb250cm9sbGVyIGludGVyZmFjZSB0byBwcm92aWRlIFdlYlJUQ1BsYXllckNvbnRyb2xsZXIgZnVuY3Rpb25hbGl0eSB3aXRoaW4gdGhpcyBjbGFzcyBhbmQgc2V0IHVwIGFueXRoaW5nIHRoYXQgcmVxdWlyZXMgaXRcclxuICAgICAqIEBwYXJhbSB3ZWJSdGNQbGF5ZXJDb250cm9sbGVyIC0gYSBXZWJSdGNQbGF5ZXJDb250cm9sbGVyIGNvbnRyb2xsZXIgaW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgc2V0V2ViUnRjUGxheWVyQ29udHJvbGxlcih3ZWJSdGNQbGF5ZXJDb250cm9sbGVyKSB7XHJcbiAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlciA9IHdlYlJ0Y1BsYXllckNvbnRyb2xsZXI7XHJcbiAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5zZXRQcmVmZXJyZWRDb2RlYyh0aGlzLmNvbmZpZy5nZXRTZXR0aW5nT3B0aW9uKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uT3B0aW9uUGFyYW1ldGVycy5QcmVmZXJyZWRDb2RlYylcclxuICAgICAgICAgICAgLnNlbGVjdGVkKTtcclxuICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLnJlc2l6ZVBsYXllclN0eWxlKCk7XHJcbiAgICAgICAgLy8gY29ubmVjdCBpZiBhdXRvIGNvbm5lY3QgZmxhZyBpcyBlbmFibGVkXHJcbiAgICAgICAgdGhpcy5jaGVja0ZvckF1dG9Db25uZWN0KCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENvbm5lY3QgdG8gc2lnbmFsaW5nIHNlcnZlci5cclxuICAgICAqL1xyXG4gICAgY29ubmVjdCgpIHtcclxuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXIuZGlzcGF0Y2hFdmVudChuZXcgX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uU3RyZWFtUHJlQ29ubmVjdEV2ZW50KCkpO1xyXG4gICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuY29ubmVjdFRvU2lnbmFsbGluZ1NlcnZlcigpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWNvbm5lY3RzIHRvIHRoZSBzaWduYWxpbmcgc2VydmVyLiBJZiBjb25uZWN0aW9uIGlzIHVwLCBkaXNjb25uZWN0cyBmaXJzdFxyXG4gICAgICogYmVmb3JlIGVzdGFibGlzaGluZyBhIG5ldyBjb25uZWN0aW9uXHJcbiAgICAgKi9cclxuICAgIHJlY29ubmVjdCgpIHtcclxuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXIuZGlzcGF0Y2hFdmVudChuZXcgX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uU3RyZWFtUmVjb25uZWN0RXZlbnQoKSk7XHJcbiAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci50cnlSZWNvbm5lY3QoXCJSZWNvbm5lY3RpbmcuLi5cIik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIERpc2Nvbm5lY3QgZnJvbSB0aGUgc2lnbmFsaW5nIHNlcnZlciBhbmQgY2xvc2Ugb3BlbiBwZWVyIGNvbm5lY3Rpb25zLlxyXG4gICAgICovXHJcbiAgICBkaXNjb25uZWN0KCkge1xyXG4gICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlci5kaXNwYXRjaEV2ZW50KG5ldyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5TdHJlYW1QcmVEaXNjb25uZWN0RXZlbnQoKSk7XHJcbiAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5jbG9zZSgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBQbGF5IHRoZSBzdHJlYW0uIENhbiBiZSBjYWxsZWQgb25seSBhZnRlciBhIHBlZXIgY29ubmVjdGlvbiBoYXMgYmVlbiBlc3RhYmxpc2hlZC5cclxuICAgICAqL1xyXG4gICAgcGxheSgpIHtcclxuICAgICAgICB0aGlzLl9vblN0cmVhbUxvYWRpbmcoKTtcclxuICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLnBsYXlTdHJlYW0oKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQXV0byBjb25uZWN0IGlmIEF1dG9Db25uZWN0IGZsYWcgaXMgZW5hYmxlZFxyXG4gICAgICovXHJcbiAgICBjaGVja0ZvckF1dG9Db25uZWN0KCkge1xyXG4gICAgICAgIC8vIHNldCB1cCBpZiB0aGUgYXV0byBwbGF5IHdpbGwgYmUgdXNlZCBvciByZWd1bGFyIGNsaWNrIHRvIHN0YXJ0XHJcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5GbGFncy5BdXRvQ29ubmVjdCkpIHtcclxuICAgICAgICAgICAgLy8gaWYgYXV0b3BsYXlpbmcgc2hvdyBhbiBpbmZvIG92ZXJsYXkgd2hpbGUgd2hpbGUgd2FpdGluZyBmb3IgdGhlIGNvbm5lY3Rpb24gdG8gYmVnaW5cclxuICAgICAgICAgICAgdGhpcy5fb25XZWJSdGNBdXRvQ29ubmVjdCgpO1xyXG4gICAgICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLmNvbm5lY3RUb1NpZ25hbGxpbmdTZXJ2ZXIoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFdpbGwgdW5tdXRlIHRoZSBtaWNyb3Bob25lIHRyYWNrIHdoaWNoIGlzIHNlbnQgdG8gVW5yZWFsIEVuZ2luZS5cclxuICAgICAqIEJ5IGRlZmF1bHQsIHdpbGwgb25seSB1bm11dGUgYW4gZXhpc3RpbmcgbWljIHRyYWNrLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBmb3JjZUVuYWJsZSBDYW4gYmUgdXNlZCBmb3IgY2FzZXMgd2hlbiB0aGlzIG9iamVjdCB3YXNuJ3QgaW5pdGlhbGl6ZWQgd2l0aCBhIG1pYyB0cmFjay5cclxuICAgICAqIElmIHRoaXMgcGFyYW1ldGVyIGlzIHRydWUsIHRoZSBjb25uZWN0aW9uIHdpbGwgYmUgcmVzdGFydGVkIHdpdGggYSBtaWNyb3Bob25lLlxyXG4gICAgICogV2FybmluZzogdGhpcyB0YWtlcyBzb21lIHRpbWUsIGFzIGEgZnVsbCByZW5lZ290aWF0aW9uIGFuZCByZWNvbm5lY3Rpb24gd2lsbCBoYXBwZW4uXHJcbiAgICAgKi9cclxuICAgIHVubXV0ZU1pY3JvcGhvbmUoZm9yY2VFbmFibGUgPSBmYWxzZSkge1xyXG4gICAgICAgIC8vIElmIHRoZXJlJ3MgYW4gZXhpc3RpbmcgbWljIHRyYWNrLCB3ZSBqdXN0IHNldCBtdXRlZCBzdGF0ZVxyXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKCdVc2VNaWMnKSkge1xyXG4gICAgICAgICAgICB0aGlzLnNldE1pY3JvcGhvbmVNdXRlZChmYWxzZSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gSWYgdGhlcmUncyBubyBwcmUtZXhpc3RpbmcgbWljIHRyYWNrLCBhbmQgY2FsbGVyIGlzIG9rIHdpdGggZnVsbCByZXNldCwgd2UgZW5hYmxlIGFuZCByZXNldFxyXG4gICAgICAgIGlmIChmb3JjZUVuYWJsZSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5zZXRGbGFnRW5hYmxlZChcIlVzZU1pY1wiLCB0cnVlKTtcclxuICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3QoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBJZiB3ZSBwcmVmZXIgbm90IHRvIGZvcmNlIGEgcmVjb25uZWN0aW9uLCBqdXN0IHdhcm4gdGhlIHVzZXIgdGhhdCB0aGlzIG9wZXJhdGlvbiBkaWRuJ3QgaGFwcGVuXHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5Mb2dnZXIuV2FybmluZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdUcnlpbmcgdG8gdW5tdXRlIG1pYywgYnV0IFBpeGVsU3RyZWFtaW5nIHdhcyBpbml0aWFsaXplZCB3aXRoIG5vIG1pY3JvcGhvbmUgdHJhY2suIENhbGwgd2l0aCBmb3JjZUVuYWJsZSA9PSB0cnVlIHRvIHJlLWNvbm5lY3Qgd2l0aCBhIG1pYyB0cmFjay4nKTtcclxuICAgIH1cclxuICAgIG11dGVNaWNyb3Bob25lKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKCdVc2VNaWMnKSkge1xyXG4gICAgICAgICAgICB0aGlzLnNldE1pY3JvcGhvbmVNdXRlZCh0cnVlKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBJZiB0aGVyZSB3YXNuJ3QgYSBtaWMgdHJhY2ssIGp1c3QgbGV0IHVzZXIga25vdyB0aGVyZSdzIG5vdGhpbmcgdG8gbXV0ZVxyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18uTG9nZ2VyLkluZm8oX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnVHJ5aW5nIHRvIG11dGUgbWljLCBidXQgUGl4ZWxTdHJlYW1pbmcgaGFzIG5vIG1pY3JvcGhvbmUgdHJhY2ssIHNvIHNlbmRpbmcgc291bmQgaXMgYWxyZWFkeSBkaXNhYmxlZC4nKTtcclxuICAgIH1cclxuICAgIHNldE1pY3JvcGhvbmVNdXRlZChtdXRlKSB7XHJcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xyXG4gICAgICAgIGZvciAoY29uc3QgdHJhbnNjZWl2ZXIgb2YgKF9kID0gKF9jID0gKF9iID0gKF9hID0gdGhpcy5fd2ViUnRjQ29udHJvbGxlcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlcikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnBlZXJDb25uZWN0aW9uKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuZ2V0VHJhbnNjZWl2ZXJzKCkpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IFtdKSB7XHJcbiAgICAgICAgICAgIGlmIChfVXRpbF9SVENVdGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fLlJUQ1V0aWxzLmNhblRyYW5zY2VpdmVyU2VuZEF1ZGlvKHRyYW5zY2VpdmVyKSkge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNjZWl2ZXIuc2VuZGVyLnRyYWNrLmVuYWJsZWQgPSAhbXV0ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRW1pdCBhbiBldmVudCBvbiBhdXRvIGNvbm5lY3RpbmdcclxuICAgICAqL1xyXG4gICAgX29uV2ViUnRjQXV0b0Nvbm5lY3QoKSB7XHJcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVyLmRpc3BhdGNoRXZlbnQobmV3IF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLldlYlJ0Y0F1dG9Db25uZWN0RXZlbnQoKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldCB1cCBmdW5jdGlvbmFsaXR5IHRvIGhhcHBlbiB3aGVuIHJlY2VpdmluZyBhIHdlYlJUQyBhbnN3ZXJcclxuICAgICAqL1xyXG4gICAgX29uV2ViUnRjU2RwKCkge1xyXG4gICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlci5kaXNwYXRjaEV2ZW50KG5ldyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5XZWJSdGNTZHBFdmVudCgpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRW1pdHMgYSBTdHJlYW1Mb2FkaW5nIGV2ZW50XHJcbiAgICAgKi9cclxuICAgIF9vblN0cmVhbUxvYWRpbmcoKSB7XHJcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVyLmRpc3BhdGNoRXZlbnQobmV3IF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlN0cmVhbUxvYWRpbmdFdmVudCgpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRXZlbnQgZmlyZWQgd2hlbiB0aGUgdmlkZW8gaXMgZGlzY29ubmVjdGVkIC0gZW1pdHMgZ2l2ZW4gZXZlbnRTdHJpbmcgb3IgYW4gb3ZlcnJpZGVcclxuICAgICAqIG1lc3NhZ2UgZnJvbSB3ZWJSdGNDb250cm9sbGVyIGlmIG9uZSBoYXMgYmVlbiBzZXRcclxuICAgICAqIEBwYXJhbSBldmVudFN0cmluZyAtIGEgc3RyaW5nIGRlc2NyaWJpbmcgd2h5IHRoZSBjb25uZWN0aW9uIGNsb3NlZFxyXG4gICAgICogQHBhcmFtIGFsbG93Q2xpY2tUb1JlY29ubmVjdCAtIHRydWUgaWYgd2Ugd2FudCB0byBhbGxvdyB0aGUgdXNlciB0byByZXRyeSB0aGUgY29ubmVjdGlvbiB3aXRoIGEgY2xpY2tcclxuICAgICAqL1xyXG4gICAgX29uRGlzY29ubmVjdChldmVudFN0cmluZywgYWxsb3dDbGlja1RvUmVjb25uZWN0KSB7XHJcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVyLmRpc3BhdGNoRXZlbnQobmV3IF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLldlYlJ0Y0Rpc2Nvbm5lY3RlZEV2ZW50KHtcclxuICAgICAgICAgICAgZXZlbnRTdHJpbmc6IGV2ZW50U3RyaW5nLFxyXG4gICAgICAgICAgICBhbGxvd0NsaWNrVG9SZWNvbm5lY3Q6IGFsbG93Q2xpY2tUb1JlY29ubmVjdFxyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB3aGVuIFdlYiBSdGMgaXMgY29ubmVjdGluZ1xyXG4gICAgICovXHJcbiAgICBfb25XZWJSdGNDb25uZWN0aW5nKCkge1xyXG4gICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlci5kaXNwYXRjaEV2ZW50KG5ldyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5XZWJSdGNDb25uZWN0aW5nRXZlbnQoKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgd2hlbiBXZWIgUnRjIGhhcyBjb25uZWN0ZWRcclxuICAgICAqL1xyXG4gICAgX29uV2ViUnRjQ29ubmVjdGVkKCkge1xyXG4gICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlci5kaXNwYXRjaEV2ZW50KG5ldyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5XZWJSdGNDb25uZWN0ZWRFdmVudCgpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB3aGVuIFdlYiBSdGMgZmFpbHMgdG8gY29ubmVjdFxyXG4gICAgICovXHJcbiAgICBfb25XZWJSdGNGYWlsZWQoKSB7XHJcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVyLmRpc3BhdGNoRXZlbnQobmV3IF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLldlYlJ0Y0ZhaWxlZEV2ZW50KCkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGUgd2hlbiB0aGUgVmlkZW8gaGFzIGJlZW4gSW5pdGlhbGl6ZWRcclxuICAgICAqL1xyXG4gICAgX29uVmlkZW9Jbml0aWFsaXplZCgpIHtcclxuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXIuZGlzcGF0Y2hFdmVudChuZXcgX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uVmlkZW9Jbml0aWFsaXplZEV2ZW50KCkpO1xyXG4gICAgICAgIHRoaXMuX3ZpZGVvU3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHVwIGZ1bmN0aW9uYWxpdHkgdG8gaGFwcGVuIHdoZW4gcmVjZWl2aW5nIGxhdGVuY3kgdGVzdCByZXN1bHRzXHJcbiAgICAgKiBAcGFyYW0gbGF0ZW5jeSAtIGxhdGVuY3kgdGVzdCByZXN1bHRzIG9iamVjdFxyXG4gICAgICovXHJcbiAgICBfb25MYXRlbmN5VGVzdFJlc3VsdChsYXRlbmN5VGltaW5ncykge1xyXG4gICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlci5kaXNwYXRjaEV2ZW50KG5ldyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5MYXRlbmN5VGVzdFJlc3VsdEV2ZW50KHsgbGF0ZW5jeVRpbWluZ3MgfSkpO1xyXG4gICAgfVxyXG4gICAgX29uRGF0YUNoYW5uZWxMYXRlbmN5VGVzdFJlc3BvbnNlKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVyLmRpc3BhdGNoRXZlbnQobmV3IF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkRhdGFDaGFubmVsTGF0ZW5jeVRlc3RSZXNwb25zZUV2ZW50KHsgcmVzcG9uc2UgfSkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdXAgZnVuY3Rpb25hbGl0eSB0byBoYXBwZW4gd2hlbiByZWNlaXZpbmcgdmlkZW8gc3RhdGlzdGljc1xyXG4gICAgICogQHBhcmFtIHZpZGVvU3RhdHMgLSB2aWRlbyBzdGF0aXN0aWNzIGFzIGEgYWdncmVnYXRlIHN0YXRzIG9iamVjdFxyXG4gICAgICovXHJcbiAgICBfb25WaWRlb1N0YXRzKHZpZGVvU3RhdHMpIHtcclxuICAgICAgICAvLyBEdXJhdGlvblxyXG4gICAgICAgIGlmICghdGhpcy5fdmlkZW9TdGFydFRpbWUgfHwgdGhpcy5fdmlkZW9TdGFydFRpbWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLl92aWRlb1N0YXJ0VGltZSA9IERhdGUubm93KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZpZGVvU3RhdHMuaGFuZGxlU2Vzc2lvblN0YXRpc3RpY3ModGhpcy5fdmlkZW9TdGFydFRpbWUsIHRoaXMuX2lucHV0Q29udHJvbGxlciwgdGhpcy5fd2ViUnRjQ29udHJvbGxlci52aWRlb0F2Z1FwKTtcclxuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXIuZGlzcGF0Y2hFdmVudChuZXcgX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uU3RhdHNSZWNlaXZlZEV2ZW50KHsgYWdncmVnYXRlZFN0YXRzOiB2aWRlb1N0YXRzIH0pKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHVwIGZ1bmN0aW9uYWxpdHkgdG8gaGFwcGVuIHdoZW4gY2FsY3VsYXRpbmcgdGhlIGF2ZXJhZ2UgdmlkZW8gZW5jb2RlciBxcFxyXG4gICAgICogQHBhcmFtIFFQIC0gdGhlIHF1YWxpdHkgbnVtYmVyIG9mIHRoZSBzdHJlYW1cclxuICAgICAqL1xyXG4gICAgX29uVmlkZW9FbmNvZGVyQXZnUVAoUVApIHtcclxuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXIuZGlzcGF0Y2hFdmVudChuZXcgX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uVmlkZW9FbmNvZGVyQXZnUVBFdmVudCh7IGF2Z1FQOiBRUCB9KSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldCB1cCBmdW5jdGlvbmFsaXR5IHRvIGhhcHBlbiB3aGVuIHJlY2VpdmluZyBhbmQgaGFuZGxpbmcgaW5pdGlhbCBzZXR0aW5ncyBmb3IgdGhlIFVFIGFwcFxyXG4gICAgICogQHBhcmFtIHNldHRpbmdzIC0gaW5pdGlhbCBVRSBhcHAgc2V0dGluZ3NcclxuICAgICAqL1xyXG4gICAgX29uSW5pdGlhbFNldHRpbmdzKHNldHRpbmdzKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlci5kaXNwYXRjaEV2ZW50KG5ldyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Jbml0aWFsU2V0dGluZ3NFdmVudCh7IHNldHRpbmdzIH0pKTtcclxuICAgICAgICBpZiAoc2V0dGluZ3MuUGl4ZWxTdHJlYW1pbmdTZXR0aW5ncykge1xyXG4gICAgICAgICAgICB0aGlzLmFsbG93Q29uc29sZUNvbW1hbmRzID1cclxuICAgICAgICAgICAgICAgIChfYSA9IHNldHRpbmdzLlBpeGVsU3RyZWFtaW5nU2V0dGluZ3MuQWxsb3dQaXhlbFN0cmVhbWluZ0NvbW1hbmRzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYWxsb3dDb25zb2xlQ29tbWFuZHMgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fLkxvZ2dlci5JbmZvKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJy1BbGxvd1BpeGVsU3RyZWFtaW5nQ29tbWFuZHM9ZmFsc2UsIHNlbmRpbmcgYXJiaXRyYXJ5IGNvbnNvbGUgY29tbWFuZHMgZnJvbSBicm93c2VyIHRvIFVFIGlzIGRpc2FibGVkLicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHVzZVVybFBhcmFtcyA9IHRoaXMuY29uZmlnLnVzZVVybFBhcmFtcztcclxuICAgICAgICBjb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18uTG9nZ2VyLkluZm8oX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgdXNpbmcgVVJMIHBhcmFtZXRlcnMgJHt1c2VVcmxQYXJhbXN9YCk7XHJcbiAgICAgICAgaWYgKHNldHRpbmdzLkVuY29kZXJTZXR0aW5ncykge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5zZXROdW1lcmljU2V0dGluZyhfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLk51bWVyaWNQYXJhbWV0ZXJzLk1pblFQLCBcclxuICAgICAgICAgICAgLy8gSWYgYSBzZXR0aW5nIGlzIHNldCBpbiB0aGUgVVJMLCBtYWtlIHN1cmUgd2UgcmVzcGVjdCB0aGF0IHZhbHVlIGFzIG9wcG9zZWQgdG8gd2hhdCB0aGUgYXBwbGljYXRpb24gc2VuZHMgdXNcclxuICAgICAgICAgICAgKHVzZVVybFBhcmFtcyAmJiB1cmxQYXJhbXMuaGFzKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uTnVtZXJpY1BhcmFtZXRlcnMuTWluUVApKVxyXG4gICAgICAgICAgICAgICAgPyBOdW1iZXIucGFyc2VGbG9hdCh1cmxQYXJhbXMuZ2V0KF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uTnVtZXJpY1BhcmFtZXRlcnMuTWluUVApKVxyXG4gICAgICAgICAgICAgICAgOiBzZXR0aW5ncy5FbmNvZGVyU2V0dGluZ3MuTWluUVApO1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5zZXROdW1lcmljU2V0dGluZyhfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLk51bWVyaWNQYXJhbWV0ZXJzLk1heFFQLCAodXNlVXJsUGFyYW1zICYmIHVybFBhcmFtcy5oYXMoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5OdW1lcmljUGFyYW1ldGVycy5NYXhRUCkpXHJcbiAgICAgICAgICAgICAgICA/IE51bWJlci5wYXJzZUZsb2F0KHVybFBhcmFtcy5nZXQoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5OdW1lcmljUGFyYW1ldGVycy5NYXhRUCkpXHJcbiAgICAgICAgICAgICAgICA6IHNldHRpbmdzLkVuY29kZXJTZXR0aW5ncy5NYXhRUCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzZXR0aW5ncy5XZWJSVENTZXR0aW5ncykge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5zZXROdW1lcmljU2V0dGluZyhfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLk51bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ01pbkJpdHJhdGUsICh1c2VVcmxQYXJhbXMgJiYgdXJsUGFyYW1zLmhhcyhfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLk51bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ01pbkJpdHJhdGUpKVxyXG4gICAgICAgICAgICAgICAgPyBOdW1iZXIucGFyc2VGbG9hdCh1cmxQYXJhbXMuZ2V0KF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uTnVtZXJpY1BhcmFtZXRlcnMuV2ViUlRDTWluQml0cmF0ZSkpXHJcbiAgICAgICAgICAgICAgICA6IChzZXR0aW5ncy5XZWJSVENTZXR0aW5ncy5NaW5CaXRyYXRlIC8gMTAwMCkgLyogYnBzIHRvIGticHMgKi8pO1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5zZXROdW1lcmljU2V0dGluZyhfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLk51bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ01heEJpdHJhdGUsICh1c2VVcmxQYXJhbXMgJiYgdXJsUGFyYW1zLmhhcyhfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLk51bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ01heEJpdHJhdGUpKVxyXG4gICAgICAgICAgICAgICAgPyBOdW1iZXIucGFyc2VGbG9hdCh1cmxQYXJhbXMuZ2V0KF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uTnVtZXJpY1BhcmFtZXRlcnMuV2ViUlRDTWF4Qml0cmF0ZSkpXHJcbiAgICAgICAgICAgICAgICA6IChzZXR0aW5ncy5XZWJSVENTZXR0aW5ncy5NYXhCaXRyYXRlIC8gMTAwMCkgLyogYnBzIHRvIGticHMgKi8pO1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5zZXROdW1lcmljU2V0dGluZyhfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLk51bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ0ZQUywgKHVzZVVybFBhcmFtcyAmJiB1cmxQYXJhbXMuaGFzKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uTnVtZXJpY1BhcmFtZXRlcnMuV2ViUlRDRlBTKSlcclxuICAgICAgICAgICAgICAgID8gTnVtYmVyLnBhcnNlRmxvYXQodXJsUGFyYW1zLmdldChfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLk51bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ0ZQUykpXHJcbiAgICAgICAgICAgICAgICA6IHNldHRpbmdzLldlYlJUQ1NldHRpbmdzLkZQUyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdXAgZnVuY3Rpb25hbGl0eSB0byBoYXBwZW4gd2hlbiBzZXR0aW5nIHF1YWxpdHkgY29udHJvbCBvd25lcnNoaXAgb2YgYSBzdHJlYW1cclxuICAgICAqIEBwYXJhbSBoYXNRdWFsaXR5T3duZXJzaGlwIC0gZG9lcyB0aGlzIHVzZXIgaGF2ZSBxdWFsaXR5IG93bmVyc2hpcCBvZiB0aGUgc3RyZWFtIHRydWUgLyBmYWxzZVxyXG4gICAgICovXHJcbiAgICBfb25RdWFsaXR5Q29udHJvbE93bmVyc2hpcChoYXNRdWFsaXR5T3duZXJzaGlwKSB7XHJcbiAgICAgICAgdGhpcy5jb25maWcuc2V0RmxhZ0VuYWJsZWQoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5GbGFncy5Jc1F1YWxpdHlDb250cm9sbGVyLCBoYXNRdWFsaXR5T3duZXJzaGlwKTtcclxuICAgIH1cclxuICAgIF9vblBsYXllckNvdW50KHBsYXllckNvdW50KSB7XHJcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVyLmRpc3BhdGNoRXZlbnQobmV3IF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlBsYXllckNvdW50RXZlbnQoeyBjb3VudDogcGxheWVyQ291bnQgfSkpO1xyXG4gICAgfVxyXG4gICAgLy8gU2V0cyB1cCB0byBlbWl0IHRoZSB3ZWJydGMgdGNwIHJlbGF5IGRldGVjdCBldmVudCBcclxuICAgIF9zZXR1cFdlYlJ0Y1RDUFJlbGF5RGV0ZWN0aW9uKHN0YXRzUmVjZWl2ZWRFdmVudCkge1xyXG4gICAgICAgIC8vIEdldCB0aGUgYWN0aXZlIGNhbmRpZGF0ZSBwYWlyXHJcbiAgICAgICAgbGV0IGFjdGl2ZUNhbmRpZGF0ZVBhaXIgPSBzdGF0c1JlY2VpdmVkRXZlbnQuZGF0YS5hZ2dyZWdhdGVkU3RhdHMuZ2V0QWN0aXZlQ2FuZGlkYXRlUGFpcigpO1xyXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBhY3RpdmUgY2FuZGlkYXRlIHBhaXIgaXMgbm90IG51bGxcclxuICAgICAgICBpZiAoYWN0aXZlQ2FuZGlkYXRlUGFpciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIC8vIEdldCB0aGUgbG9jYWwgY2FuZGlkYXRlIGFzc2lnbmVkIHRvIHRoZSBhY3RpdmUgY2FuZGlkYXRlIHBhaXJcclxuICAgICAgICAgICAgbGV0IGxvY2FsQ2FuZGlkYXRlID0gc3RhdHNSZWNlaXZlZEV2ZW50LmRhdGEuYWdncmVnYXRlZFN0YXRzLmxvY2FsQ2FuZGlkYXRlcy5maW5kKChjYW5kaWRhdGUpID0+IGNhbmRpZGF0ZS5pZCA9PSBhY3RpdmVDYW5kaWRhdGVQYWlyLmxvY2FsQ2FuZGlkYXRlSWQsIG51bGwpO1xyXG4gICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgbG9jYWwgY2FuZGlkYXRlIGlzIG5vdCBudWxsLCBjYW5kaWRhdGUgdHlwZSBpcyByZWxheSBhbmQgdGhlIHJlbGF5IHByb3RvY29sIGlzIHRjcFxyXG4gICAgICAgICAgICBpZiAobG9jYWxDYW5kaWRhdGUgIT0gbnVsbCAmJiBsb2NhbENhbmRpZGF0ZS5jYW5kaWRhdGVUeXBlID09ICdyZWxheScgJiYgbG9jYWxDYW5kaWRhdGUucmVsYXlQcm90b2NvbCA9PSAndGNwJykge1xyXG4gICAgICAgICAgICAgICAgLy8gU2VuZCB0aGUgd2ViIHJ0YyB0Y3AgcmVsYXkgZGV0ZWN0ZWQgZXZlbnRcclxuICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlci5kaXNwYXRjaEV2ZW50KG5ldyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5XZWJSdGNUQ1BSZWxheURldGVjdGVkRXZlbnQoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gVGhlIGNoZWNrIGlzIGNvbXBsZXRlZCBhbmQgdGhlIHN0YXRzIGxpc3RlbiBldmVudCBjYW4gYmUgcmVtb3ZlZFxyXG4gICAgICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInN0YXRzUmVjZWl2ZWRcIiwgdGhpcy5fc2V0dXBXZWJSdGNUQ1BSZWxheURldGVjdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXF1ZXN0IGEgY29ubmVjdGlvbiBsYXRlbmN5IHRlc3QuXHJcbiAgICAgKiBOT1RFOiBUaGVyZSBhcmUgcGxhbnMgdG8gcmVmYWN0b3IgYWxsIHJlcXVlc3QqIGZ1bmN0aW9ucy4gRXhwZWN0IGNoYW5nZXMgaWYgeW91IHVzZSB0aGlzIVxyXG4gICAgICogQHJldHVybnNcclxuICAgICAqL1xyXG4gICAgcmVxdWVzdExhdGVuY3lUZXN0KCkge1xyXG4gICAgICAgIGlmICghdGhpcy5fd2ViUnRjQ29udHJvbGxlci52aWRlb1BsYXllci5pc1ZpZGVvUmVhZHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuc2VuZExhdGVuY3lUZXN0KCk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlcXVlc3QgYSBkYXRhIGNoYW5uZWwgbGF0ZW5jeSB0ZXN0LlxyXG4gICAgICogTk9URTogVGhlcmUgYXJlIHBsYW5zIHRvIHJlZmFjdG9yIGFsbCByZXF1ZXN0KiBmdW5jdGlvbnMuIEV4cGVjdCBjaGFuZ2VzIGlmIHlvdSB1c2UgdGhpcyFcclxuICAgICAqL1xyXG4gICAgcmVxdWVzdERhdGFDaGFubmVsTGF0ZW5jeVRlc3QoY29uZmlnKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl93ZWJSdGNDb250cm9sbGVyLnZpZGVvUGxheWVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLl9kYXRhQ2hhbm5lbExhdGVuY3lUZXN0Q29udHJvbGxlcikge1xyXG4gICAgICAgICAgICB0aGlzLl9kYXRhQ2hhbm5lbExhdGVuY3lUZXN0Q29udHJvbGxlciA9IG5ldyBfRGF0YUNoYW5uZWxfRGF0YUNoYW5uZWxMYXRlbmN5VGVzdENvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfXy5EYXRhQ2hhbm5lbExhdGVuY3lUZXN0Q29udHJvbGxlcih0aGlzLl93ZWJSdGNDb250cm9sbGVyLnNlbmREYXRhQ2hhbm5lbExhdGVuY3lUZXN0LmJpbmQodGhpcy5fd2ViUnRjQ29udHJvbGxlciksIChyZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlci5kaXNwYXRjaEV2ZW50KG5ldyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5EYXRhQ2hhbm5lbExhdGVuY3lUZXN0UmVzdWx0RXZlbnQoeyByZXN1bHQgfSkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKFwiZGF0YUNoYW5uZWxMYXRlbmN5VGVzdFJlc3BvbnNlXCIsICh7IGRhdGE6IHsgcmVzcG9uc2UgfSB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kYXRhQ2hhbm5lbExhdGVuY3lUZXN0Q29udHJvbGxlci5yZWNlaXZlKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhQ2hhbm5lbExhdGVuY3lUZXN0Q29udHJvbGxlci5zdGFydChjb25maWcpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXF1ZXN0IGZvciB0aGUgVUUgYXBwbGljYXRpb24gdG8gc2hvdyBGUFMgY291bnRlci5cclxuICAgICAqIE5PVEU6IFRoZXJlIGFyZSBwbGFucyB0byByZWZhY3RvciBhbGwgcmVxdWVzdCogZnVuY3Rpb25zLiBFeHBlY3QgY2hhbmdlcyBpZiB5b3UgdXNlIHRoaXMhXHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICovXHJcbiAgICByZXF1ZXN0U2hvd0ZwcygpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIudmlkZW9QbGF5ZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLnNlbmRTaG93RnBzKCk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlcXVlc3QgZm9yIGEgbmV3IElGcmFtZSBmcm9tIHRoZSBVRSBhcHBsaWNhdGlvbi5cclxuICAgICAqIE5PVEU6IFRoZXJlIGFyZSBwbGFucyB0byByZWZhY3RvciBhbGwgcmVxdWVzdCogZnVuY3Rpb25zLiBFeHBlY3QgY2hhbmdlcyBpZiB5b3UgdXNlIHRoaXMhXHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICovXHJcbiAgICByZXF1ZXN0SWZyYW1lKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5fd2ViUnRjQ29udHJvbGxlci52aWRlb1BsYXllci5pc1ZpZGVvUmVhZHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuc2VuZElmcmFtZVJlcXVlc3QoKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2VuZCBkYXRhIHRvIFVFIGFwcGxpY2F0aW9uLiBUaGUgZGF0YSB3aWxsIGJlIHJ1biB0aHJvdWdoIEpTT04uc3RyaW5naWZ5KCkgc28gZS5nLiBzdHJpbmdzXHJcbiAgICAgKiBhbmQgYW55IHNlcmlhbGl6YWJsZSBwbGFpbiBKU09OIG9iamVjdHMgd2l0aCBubyByZWN1cnJlbmNlIGNhbiBiZSBzZW50LlxyXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiBzdWNjZWVkZWQsIGZhbHNlIGlmIHJlamVjdGVkXHJcbiAgICAgKi9cclxuICAgIGVtaXRVSUludGVyYWN0aW9uKGRlc2NyaXB0b3IpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIudmlkZW9QbGF5ZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLmVtaXRVSUludGVyYWN0aW9uKGRlc2NyaXB0b3IpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIGEgY29tbWFuZCB0byBVRSBhcHBsaWNhdGlvbi4gQmxvY2tzIENvbnNvbGVDb21tYW5kIGRlc2NyaXB0b3JzIHVubGVzcyBVRVxyXG4gICAgICogaGFzIHNpZ25hbGVkIHRoYXQgaXQgYWxsb3dzIGNvbnNvbGUgY29tbWFuZHMuXHJcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHN1Y2NlZWRlZCwgZmFsc2UgaWYgcmVqZWN0ZWRcclxuICAgICAqL1xyXG4gICAgZW1pdENvbW1hbmQoZGVzY3JpcHRvcikge1xyXG4gICAgICAgIGlmICghdGhpcy5fd2ViUnRjQ29udHJvbGxlci52aWRlb1BsYXllci5pc1ZpZGVvUmVhZHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5hbGxvd0NvbnNvbGVDb21tYW5kcyAmJiAnQ29uc29sZUNvbW1hbmQnIGluIGRlc2NyaXB0b3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLmVtaXRDb21tYW5kKGRlc2NyaXB0b3IpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIGEgY29uc29sZSBjb21tYW5kIHRvIFVFIGFwcGxpY2F0aW9uLiBPbmx5IGFsbG93ZWQgaWYgVUUgaGFzIHNpZ25hbGVkIHRoYXQgaXQgYWxsb3dzXHJcbiAgICAgKiBjb25zb2xlIGNvbW1hbmRzLlxyXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiBzdWNjZWVkZWQsIGZhbHNlIGlmIHJlamVjdGVkXHJcbiAgICAgKi9cclxuICAgIGVtaXRDb25zb2xlQ29tbWFuZChjb21tYW5kKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmFsbG93Q29uc29sZUNvbW1hbmRzIHx8ICF0aGlzLl93ZWJSdGNDb250cm9sbGVyLnZpZGVvUGxheWVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5lbWl0Q29uc29sZUNvbW1hbmQoY29tbWFuZCk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFkZCBhIFVFIC0+IGJyb3dzZXIgcmVzcG9uc2UgZXZlbnQgbGlzdGVuZXJcclxuICAgICAqIEBwYXJhbSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHJlc3BvbnNlIGhhbmRsZXJcclxuICAgICAqIEBwYXJhbSBsaXN0ZW5lciAtIFRoZSBtZXRob2QgdG8gYmUgYWN0aXZhdGVkIHdoZW4gYSBtZXNzYWdlIGlzIHJlY2VpdmVkXHJcbiAgICAgKi9cclxuICAgIGFkZFJlc3BvbnNlRXZlbnRMaXN0ZW5lcihuYW1lLCBsaXN0ZW5lcikge1xyXG4gICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIucmVzcG9uc2VDb250cm9sbGVyLmFkZFJlc3BvbnNlRXZlbnRMaXN0ZW5lcihuYW1lLCBsaXN0ZW5lcik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZSBhIFVFIC0+IGJyb3dzZXIgcmVzcG9uc2UgZXZlbnQgbGlzdGVuZXJcclxuICAgICAqIEBwYXJhbSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHJlc3BvbnNlIGhhbmRsZXJcclxuICAgICAqL1xyXG4gICAgcmVtb3ZlUmVzcG9uc2VFdmVudExpc3RlbmVyKG5hbWUpIHtcclxuICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLnJlc3BvbnNlQ29udHJvbGxlci5yZW1vdmVSZXNwb25zZUV2ZW50TGlzdGVuZXIobmFtZSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIERpc3BhdGNoIGEgbmV3IGV2ZW50LlxyXG4gICAgICogQHBhcmFtIGUgZXZlbnRcclxuICAgICAqIEByZXR1cm5zXHJcbiAgICAgKi9cclxuICAgIGRpc3BhdGNoRXZlbnQoZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9ldmVudEVtaXR0ZXIuZGlzcGF0Y2hFdmVudChlKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVnaXN0ZXIgYW4gZXZlbnQgaGFuZGxlci5cclxuICAgICAqIEBwYXJhbSB0eXBlIGV2ZW50IG5hbWVcclxuICAgICAqIEBwYXJhbSBsaXN0ZW5lciBldmVudCBoYW5kbGVyIGZ1bmN0aW9uXHJcbiAgICAgKi9cclxuICAgIGFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcclxuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXIuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZSBhbiBldmVudCBoYW5kbGVyLlxyXG4gICAgICogQHBhcmFtIHR5cGUgZXZlbnQgbmFtZVxyXG4gICAgICogQHBhcmFtIGxpc3RlbmVyIGV2ZW50IGhhbmRsZXIgZnVuY3Rpb25cclxuICAgICAqL1xyXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xyXG4gICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlci5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRW5hYmxlL2Rpc2FibGUgWFIgbW9kZS5cclxuICAgICAqL1xyXG4gICAgdG9nZ2xlWFIoKSB7XHJcbiAgICAgICAgdGhpcy53ZWJYckNvbnRyb2xsZXIueHJDbGlja2VkKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFBhc3MgaW4gYSBmdW5jdGlvbiB0byBnZW5lcmF0ZSBhIHNpZ25hbGxpbmcgc2VydmVyIFVSTC5cclxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZnVsIGlmIHlvdSBuZWVkIHRvIHByb2dyYW1tYXRpY2FsbHkgY29uc3RydWN0IHlvdXIgc2lnbmFsbGluZyBzZXJ2ZXIgVVJMLlxyXG4gICAgICogQHBhcmFtIHNpZ25hbGxpbmdVcmxCdWlsZGVyRnVuYyBBIGZ1bmN0aW9uIHRoYXQgZ2VuZXJhdGVzIGEgc2lnbmFsbGluZyBzZXJ2ZXIgdXJsLlxyXG4gICAgICovXHJcbiAgICBzZXRTaWduYWxsaW5nVXJsQnVpbGRlcihzaWduYWxsaW5nVXJsQnVpbGRlckZ1bmMpIHtcclxuICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLnNpZ25hbGxpbmdVcmxCdWlsZGVyID0gc2lnbmFsbGluZ1VybEJ1aWxkZXJGdW5jO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBQdWJsaWMgZ2V0dGVyIGZvciB0aGUgd2Vic29ja2V0IGNvbnRyb2xsZXIuIEFjY2VzcyB0byB0aGlzIHByb3BlcnR5IGFsbG93cyB5b3UgdG8gc2VuZFxyXG4gICAgICogY3VzdG9tIHdlYnNvY2tldCBtZXNzYWdlcy5cclxuICAgICAqL1xyXG4gICAgZ2V0IHdlYlNvY2tldENvbnRyb2xsZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIud2ViU29ja2V0Q29udHJvbGxlcjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUHVibGljIGdldHRlciBmb3IgdGhlIHdlYlhyQ29udHJvbGxlciBjb250cm9sbGVyLiBVc2VkIGZvciBhbGwgWFIgZmVhdHVyZXMuXHJcbiAgICAgKi9cclxuICAgIGdldCB3ZWJYckNvbnRyb2xsZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlYlhyQ29udHJvbGxlcjtcclxuICAgIH1cclxuICAgIHJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIobmFtZSwgZGlyZWN0aW9uLCBoYW5kbGVyKSB7XHJcbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X18uTWVzc2FnZURpcmVjdGlvbi5Gcm9tU3RyZWFtZXIgJiYgdHlwZW9mIGhhbmRsZXIgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18uTG9nZ2VyLldhcm5pbmcoX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgVW5hYmxlIHRvIHJlZ2lzdGVyIGFuIHVuZGVmaW5lZCBoYW5kbGVyIGZvciAke25hbWV9YCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X18uTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyICYmIHR5cGVvZiBoYW5kbGVyID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoZGlyZWN0aW9uLCBuYW1lLCAoZGF0YSkgPT4gdGhpcy5fd2ViUnRjQ29udHJvbGxlci5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKG5hbWUsIGRhdGEpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihkaXJlY3Rpb24sIG5hbWUsIChkYXRhKSA9PiBoYW5kbGVyKGRhdGEpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXQgdG9TdHJlYW1lckhhbmRsZXJzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl93ZWJSdGNDb250cm9sbGVyLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnRvU3RyZWFtZXJIYW5kbGVycztcclxuICAgIH1cclxuICAgIGlzUmVjb25uZWN0aW5nKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl93ZWJSdGNDb250cm9sbGVyLmlzUmVjb25uZWN0aW5nO1xyXG4gICAgfVxyXG59XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9VSS9PblNjcmVlbktleWJvYXJkLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvVUkvT25TY3JlZW5LZXlib2FyZC50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIk9uU2NyZWVuS2V5Ym9hcmRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gT25TY3JlZW5LZXlib2FyZClcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuLyoqXHJcbiAqIENsYXNzIGZvciBoYW5kbGluZyBvbiBzY3JlZW4ga2V5Ym9hcmQgdXNhZ2VcclxuICovXHJcbmNsYXNzIE9uU2NyZWVuS2V5Ym9hcmQge1xyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHZpZGVvRWxlbWVudFBhcmVudCBUaGUgZGl2IGVsZW1lbnQgdGhlIHZpZGVvIHBsYXllciBpcyBpbmplY3RlZCBpbnRvXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHZpZGVvRWxlbWVudFBhcmVudCkge1xyXG4gICAgICAgIHRoaXMuZWRpdFRleHRCdXR0b24gPSBudWxsO1xyXG4gICAgICAgIHRoaXMuaGlkZGVuSW5wdXQgPSBudWxsO1xyXG4gICAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVPblNjcmVlbktleWJvYXJkSGVscGVycyh2aWRlb0VsZW1lbnRQYXJlbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQW4gb3ZlcnJpZGUgZm9yIHVucXVhbnRpemVBbmREZW5vcm1hbGl6ZVVuc2lnbmVkXHJcbiAgICAgKiBAcGFyYW0geCB0aGUgeCBheGlzIHBvaW50XHJcbiAgICAgKiBAcGFyYW0geSB0aGUgeSBheGlzIHBvaW50XHJcbiAgICAgKiBAcmV0dXJucyB1bnF1YW50aXplQW5kRGVub3JtYWxpemVVbnNpZ25lZCBvYmplY3RcclxuICAgICAqL1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgdW5xdWFudGl6ZUFuZERlbm9ybWFsaXplVW5zaWduZWQoeCwgeSkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIG9uIHNjcmVlbiBrZXlib2FyZCBoZWxwZXJzXHJcbiAgICAgKiBAcGFyYW0gdmlkZW9FbGVtZW50UGFyZW50IFRoZSBkaXYgZWxlbWVudCB0aGUgdmlkZW8gcGxheWVyIGkgaW5qZWN0ZWQgaW50b1xyXG4gICAgICovXHJcbiAgICBjcmVhdGVPblNjcmVlbktleWJvYXJkSGVscGVycyh2aWRlb0VsZW1lbnRQYXJlbnQpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaGlkZGVuSW5wdXQpIHtcclxuICAgICAgICAgICAgdGhpcy5oaWRkZW5JbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XHJcbiAgICAgICAgICAgIHRoaXMuaGlkZGVuSW5wdXQuaWQgPSAnaGlkZGVuSW5wdXQnO1xyXG4gICAgICAgICAgICB0aGlzLmhpZGRlbklucHV0Lm1heExlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIC8vIFNldCBpbmxpbmUgc3R5bGUgc28gdGhhdCB1c2VycyBub3QgdXNpbmcgdGhlIFVJIGxpYnJhcnlcclxuICAgICAgICAgICAgLy8gd2lsbCAgc3RpbGwgaGF2ZSB0aGlzIGVsZW1lbnQgZGlzcGxheSBjb3JyZWN0bHlcclxuICAgICAgICAgICAgdGhpcy5oaWRkZW5JbnB1dC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgICAgICAgICAgIHRoaXMuaGlkZGVuSW5wdXQuc3R5bGUubGVmdCA9ICctMTAlJztcclxuICAgICAgICAgICAgdGhpcy5oaWRkZW5JbnB1dC5zdHlsZS53aWR0aCA9ICcwcHgnO1xyXG4gICAgICAgICAgICB0aGlzLmhpZGRlbklucHV0LnN0eWxlLm9wYWNpdHkgPSAnMCc7XHJcbiAgICAgICAgICAgIHZpZGVvRWxlbWVudFBhcmVudC5hcHBlbmRDaGlsZCh0aGlzLmhpZGRlbklucHV0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLmVkaXRUZXh0QnV0dG9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWRpdFRleHRCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgICAgICAgICAgdGhpcy5lZGl0VGV4dEJ1dHRvbi5pZCA9ICdlZGl0VGV4dEJ1dHRvbic7XHJcbiAgICAgICAgICAgIHRoaXMuZWRpdFRleHRCdXR0b24uaW5uZXJIVE1MID0gJ2VkaXQgdGV4dCc7XHJcbiAgICAgICAgICAgIHZpZGVvRWxlbWVudFBhcmVudC5hcHBlbmRDaGlsZCh0aGlzLmVkaXRUZXh0QnV0dG9uKTtcclxuICAgICAgICAgICAgLy8gSGlkZSB0aGUgJ2VkaXQgdGV4dCcgYnV0dG9uLlxyXG4gICAgICAgICAgICB0aGlzLmVkaXRUZXh0QnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIHRoaXMuZWRpdFRleHRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIFNob3cgdGhlIG9uLXNjcmVlbiBrZXlib2FyZC5cclxuICAgICAgICAgICAgICAgIHRoaXMuaGlkZGVuSW5wdXQuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2hvd3MgdGhlIG9uIHNjcmVlbiBrZXlib2FyZFxyXG4gICAgICogQHBhcmFtIGNvbW1hbmQgdGhlIGNvbW1hbmQgcmVjZWl2ZWQgdmlhIHRoZSBkYXRhIGNoYW5uZWwgY29udGFpbmluZyBrZXlib2FyZCBwb3NpdGlvbnNcclxuICAgICAqL1xyXG4gICAgc2hvd09uU2NyZWVuS2V5Ym9hcmQoY29tbWFuZCkge1xyXG4gICAgICAgIGlmIChjb21tYW5kLnNob3dPblNjcmVlbktleWJvYXJkKSB7XHJcbiAgICAgICAgICAgIC8vIFNob3cgdGhlICdlZGl0IHRleHQnIGJ1dHRvbi5cclxuICAgICAgICAgICAgdGhpcy5lZGl0VGV4dEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ2RlZmF1bHQnO1xyXG4gICAgICAgICAgICAvLyBQbGFjZSB0aGUgJ2VkaXQgdGV4dCcgYnV0dG9uIG5lYXIgdGhlIFVFIGlucHV0IHdpZGdldC5cclxuICAgICAgICAgICAgY29uc3QgcG9zID0gdGhpcy51bnF1YW50aXplQW5kRGVub3JtYWxpemVVbnNpZ25lZChjb21tYW5kLngsIGNvbW1hbmQueSk7XHJcbiAgICAgICAgICAgIHRoaXMuZWRpdFRleHRCdXR0b24uc3R5bGUudG9wID0gcG9zLnkudG9TdHJpbmcoKSArICdweCc7XHJcbiAgICAgICAgICAgIHRoaXMuZWRpdFRleHRCdXR0b24uc3R5bGUubGVmdCA9IChwb3MueCAtIDQwKS50b1N0cmluZygpICsgJ3B4JztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIEhpZGUgdGhlICdlZGl0IHRleHQnIGJ1dHRvbi5cclxuICAgICAgICAgICAgdGhpcy5lZGl0VGV4dEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICAvLyBIaWRlIHRoZSBvbi1zY3JlZW4ga2V5Ym9hcmQuXHJcbiAgICAgICAgICAgIHRoaXMuaGlkZGVuSW5wdXQuYmx1cigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvVWVJbnN0YW5jZU1lc3NhZ2UvUmVzcG9uc2VDb250cm9sbGVyLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9VZUluc3RhbmNlTWVzc2FnZS9SZXNwb25zZUNvbnRyb2xsZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlJlc3BvbnNlQ29udHJvbGxlclwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBSZXNwb25zZUNvbnRyb2xsZXIpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vTG9nZ2VyL0xvZ2dlciAqLyBcIi4vc3JjL0xvZ2dlci9Mb2dnZXIudHNcIik7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuY2xhc3MgUmVzcG9uc2VDb250cm9sbGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMucmVzcG9uc2VFdmVudExpc3RlbmVycyA9IG5ldyBNYXAoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkIGEgcmVzcG9uc2UgZXZlbnQgbGlzdGVuZXIgdG8gdGhlIHJlc3BvbnNlIG1hcFxyXG4gICAgICogQHBhcmFtIG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcmVzcG9uc2VcclxuICAgICAqIEBwYXJhbSBsaXN0ZW5lciAtIFRoZSBtZXRob2QgdG8gYmUgYWN0aXZhdGVkIHdoZW4gdGhlIHJlc3BvbnNlIGlzIHNlbGVjdGVkXHJcbiAgICAgKi9cclxuICAgIGFkZFJlc3BvbnNlRXZlbnRMaXN0ZW5lcihuYW1lLCBsaXN0ZW5lcikge1xyXG4gICAgICAgIHRoaXMucmVzcG9uc2VFdmVudExpc3RlbmVycy5zZXQobmFtZSwgbGlzdGVuZXIpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgYSByZXNwb25zZSBldmVudCBsaXN0ZW5lciB0byB0aGUgcmVzcG9uc2UgbWFwXHJcbiAgICAgKiBAcGFyYW0gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSByZXNwb25zZVxyXG4gICAgICovXHJcbiAgICByZW1vdmVSZXNwb25zZUV2ZW50TGlzdGVuZXIobmFtZSkge1xyXG4gICAgICAgIHRoaXMucmVzcG9uc2VFdmVudExpc3RlbmVycy5kZWxldGUobmFtZSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZSBhIHJlc3BvbnNlIHdoZW4gcmVjZWl2aW5nIG9uZSBmb3JtIHRoZSBzdHJlYW1lclxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgLSBEYXRhIHJlY2VpdmVkIGZyb20gdGhlIGRhdGEgY2hhbm5lbCB3aXRoIHRoZSBjb21tYW5kIGluIHF1ZXN0aW9uXHJcbiAgICAgKi9cclxuICAgIG9uUmVzcG9uc2UobWVzc2FnZSkge1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdEYXRhQ2hhbm5lbFJlY2VpdmVNZXNzYWdlVHlwZS5SZXNwb25zZScsIDYpO1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlcyA9IG5ldyBUZXh0RGVjb2RlcigndXRmLTE2JykuZGVjb2RlKG1lc3NhZ2Uuc2xpY2UoMSkpO1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIHJlc3BvbnNlcywgNik7XHJcbiAgICAgICAgdGhpcy5yZXNwb25zZUV2ZW50TGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyKSA9PiB7XHJcbiAgICAgICAgICAgIGxpc3RlbmVyKHJlc3BvbnNlcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL1VlSW5zdGFuY2VNZXNzYWdlL1NlbmRNZXNzYWdlQ29udHJvbGxlci50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvVWVJbnN0YW5jZU1lc3NhZ2UvU2VuZE1lc3NhZ2VDb250cm9sbGVyLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJTZW5kTWVzc2FnZUNvbnRyb2xsZXJcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gU2VuZE1lc3NhZ2VDb250cm9sbGVyKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL0xvZ2dlci9Mb2dnZXIgKi8gXCIuL3NyYy9Mb2dnZXIvTG9nZ2VyLnRzXCIpO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcbmNsYXNzIFNlbmRNZXNzYWdlQ29udHJvbGxlciB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBkYXRhQ2hhbm5lbFNlbmRlciAtIERhdGEgY2hhbm5lbCBpbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIHRvU3RyZWFtZXJNZXNzYWdlc01hcFByb3ZpZGVyIC0gU3RyZWFtIE1lc3NhZ2VzIGluc3RhbmNlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGRhdGFDaGFubmVsU2VuZGVyLCB0b1N0cmVhbWVyTWVzc2FnZXNNYXBQcm92aWRlcikge1xyXG4gICAgICAgIHRoaXMuZGF0YUNoYW5uZWxTZW5kZXIgPSBkYXRhQ2hhbm5lbFNlbmRlcjtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc01hcFByb3ZpZGVyID0gdG9TdHJlYW1lck1lc3NhZ2VzTWFwUHJvdmlkZXI7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgYSBtZXNzYWdlIHRvIHRoZSBzdHJlYW1lciB0aHJvdWdoIHRoZSBkYXRhIGNoYW5uZWxcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlVHlwZSAtIHRoZSB0eXBlIG9mIG1lc3NhZ2Ugd2UgYXJlIHNlbmRpbmdcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlRGF0YSAtIHRoZSBtZXNzYWdlIGRhdGEgd2UgYXJlIHNlbmRpbmcgb3ZlciB0aGUgZGF0YSBjaGFubmVsXHJcbiAgICAgKiBAcmV0dXJucyAtIG5pbFxyXG4gICAgICovXHJcbiAgICBzZW5kTWVzc2FnZVRvU3RyZWFtZXIobWVzc2FnZVR5cGUsIG1lc3NhZ2VEYXRhKSB7XHJcbiAgICAgICAgaWYgKG1lc3NhZ2VEYXRhID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgbWVzc2FnZURhdGEgPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdG9TdHJlYW1lck1lc3NhZ2VzID0gdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNNYXBQcm92aWRlci50b1N0cmVhbWVyTWVzc2FnZXM7XHJcbiAgICAgICAgY29uc3QgbWVzc2FnZUZvcm1hdCA9IHRvU3RyZWFtZXJNZXNzYWdlcy5nZXQobWVzc2FnZVR5cGUpO1xyXG4gICAgICAgIGlmIChtZXNzYWdlRm9ybWF0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuRXJyb3IoX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgQXR0ZW1wdGVkIHRvIHNlbmQgYSBtZXNzYWdlIHRvIHRoZSBzdHJlYW1lciB3aXRoIG1lc3NhZ2UgdHlwZTogJHttZXNzYWdlVHlwZX0sIGJ1dCB0aGUgZnJvbnRlbmQgaGFzbid0IGJlZW4gY29uZmlndXJlZCB0byBzZW5kIHN1Y2ggYSBtZXNzYWdlLiBDaGVjayB5b3UndmUgYWRkZWQgdGhlIG1lc3NhZ2UgdHlwZSBpbiB5b3VyIGNwcGApO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChtZXNzYWdlRm9ybWF0LnN0cnVjdHVyZSAmJiBtZXNzYWdlRGF0YSAmJiBtZXNzYWdlRm9ybWF0LnN0cnVjdHVyZS5sZW5ndGggIT09IG1lc3NhZ2VEYXRhLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5FcnJvcihfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBQcm92aWRlZCBtZXNzYWdlIGRhdGEgZG9lc24ndCBtYXRjaCBleHBlY3RlZCBsYXlvdXQuIEV4cGVjdGVkIFsgJHttZXNzYWdlRm9ybWF0LnN0cnVjdHVyZS5tYXAoKGVsZW1lbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3VpbnQ4JzpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICd1aW50MTYnOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ludDE2JzpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdmbG9hdCc6XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZG91YmxlJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdudW1iZXInO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnc3RyaW5nJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSkudG9TdHJpbmcoKX0gXSBidXQgcmVjZWl2ZWQgWyAke21lc3NhZ2VEYXRhLm1hcCgoZWxlbWVudCkgPT4gdHlwZW9mIGVsZW1lbnQpLnRvU3RyaW5nKCl9IF1gKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgYnl0ZUxlbmd0aCA9IDA7XHJcbiAgICAgICAgY29uc3QgdGV4dEVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKTtcclxuICAgICAgICAvLyBPbmUgbG9vcCB0byBjYWxjdWxhdGUgdGhlIGxlbmd0aCBpbiBieXRlcyBvZiBhbGwgb2YgdGhlIHByb3ZpZGVkIGRhdGFcclxuICAgICAgICBtZXNzYWdlRGF0YS5mb3JFYWNoKChlbGVtZW50LCBpZHgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdHlwZSA9IG1lc3NhZ2VGb3JtYXQuc3RydWN0dXJlW2lkeF07XHJcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAndWludDgnOlxyXG4gICAgICAgICAgICAgICAgICAgIGJ5dGVMZW5ndGggKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3VpbnQxNic6XHJcbiAgICAgICAgICAgICAgICAgICAgYnl0ZUxlbmd0aCArPSAyO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnaW50MTYnOlxyXG4gICAgICAgICAgICAgICAgICAgIGJ5dGVMZW5ndGggKz0gMjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2Zsb2F0JzpcclxuICAgICAgICAgICAgICAgICAgICBieXRlTGVuZ3RoICs9IDQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdkb3VibGUnOlxyXG4gICAgICAgICAgICAgICAgICAgIGJ5dGVMZW5ndGggKz0gODtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gMiBieXRlcyBmb3Igc3RyaW5nIGxlbmd0aFxyXG4gICAgICAgICAgICAgICAgICAgIGJ5dGVMZW5ndGggKz0gMjtcclxuICAgICAgICAgICAgICAgICAgICAvLyAyIGJ5dGVzIHBlciBjaGFyYWN0ZXJzXHJcbiAgICAgICAgICAgICAgICAgICAgYnl0ZUxlbmd0aCArPSAyICogdGV4dEVuY29kZXIuZW5jb2RlKGVsZW1lbnQpLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKGJ5dGVMZW5ndGggKyAxKSk7XHJcbiAgICAgICAgZGF0YS5zZXRVaW50OCgwLCBtZXNzYWdlRm9ybWF0LmlkKTtcclxuICAgICAgICBsZXQgYnl0ZU9mZnNldCA9IDE7XHJcbiAgICAgICAgbWVzc2FnZURhdGEuZm9yRWFjaCgoZWxlbWVudCwgaWR4KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBtZXNzYWdlRm9ybWF0LnN0cnVjdHVyZVtpZHhdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3VpbnQ4JzpcclxuICAgICAgICAgICAgICAgICAgICBkYXRhLnNldFVpbnQ4KGJ5dGVPZmZzZXQsIGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJ5dGVPZmZzZXQgKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3VpbnQxNic6XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5zZXRVaW50MTYoYnl0ZU9mZnNldCwgZWxlbWVudCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnl0ZU9mZnNldCArPSAyO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnaW50MTYnOlxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc2V0SW50MTYoYnl0ZU9mZnNldCwgZWxlbWVudCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnl0ZU9mZnNldCArPSAyO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnZmxvYXQnOlxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc2V0RmxvYXQzMihieXRlT2Zmc2V0LCBlbGVtZW50LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBieXRlT2Zmc2V0ICs9IDQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdkb3VibGUnOlxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc2V0RmxvYXQ2NChieXRlT2Zmc2V0LCBlbGVtZW50LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBieXRlT2Zmc2V0ICs9IDg7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdzdHJpbmcnOlxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc2V0VWludDE2KGJ5dGVPZmZzZXQsIGVsZW1lbnQubGVuZ3RoLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBieXRlT2Zmc2V0ICs9IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuc2V0VWludDE2KGJ5dGVPZmZzZXQsIGVsZW1lbnQuY2hhckNvZGVBdChpKSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGVPZmZzZXQgKz0gMjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoIXRoaXMuZGF0YUNoYW5uZWxTZW5kZXIuY2FuU2VuZCgpKSB7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkluZm8oX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgRGF0YSBjaGFubmVsIGNhbm5vdCBzZW5kIHlldCwgc2tpcHBpbmcgc2VuZGluZyBtZXNzYWdlOiAke21lc3NhZ2VUeXBlfSAtICR7bmV3IFVpbnQ4QXJyYXkoZGF0YS5idWZmZXIpfWApO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZGF0YUNoYW5uZWxTZW5kZXIuc2VuZERhdGEoZGF0YS5idWZmZXIpO1xyXG4gICAgfVxyXG59XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9VZUluc3RhbmNlTWVzc2FnZS9TdHJlYW1NZXNzYWdlQ29udHJvbGxlci50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9VZUluc3RhbmNlTWVzc2FnZS9TdHJlYW1NZXNzYWdlQ29udHJvbGxlci50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJNZXNzYWdlRGlyZWN0aW9uXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIE1lc3NhZ2VEaXJlY3Rpb24pLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlN0cmVhbU1lc3NhZ2VDb250cm9sbGVyXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFN0cmVhbU1lc3NhZ2VDb250cm9sbGVyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJUb1N0cmVhbWVyTWVzc2FnZVwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBUb1N0cmVhbWVyTWVzc2FnZSlcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9Mb2dnZXIvTG9nZ2VyICovIFwiLi9zcmMvTG9nZ2VyL0xvZ2dlci50c1wiKTtcbi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG5jbGFzcyBUb1N0cmVhbWVyTWVzc2FnZSB7XHJcbn1cclxuY2xhc3MgU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVySGFuZGxlcnMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgdGhpcy5mcm9tU3RyZWFtZXJIYW5kbGVycyA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcyA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLmZyb21TdHJlYW1lck1lc3NhZ2VzID0gbmV3IE1hcCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBQb3B1bGF0ZSB0aGUgRGVmYXVsdCBtZXNzYWdlIHByb3RvY29sXHJcbiAgICAgKi9cclxuICAgIHBvcHVsYXRlRGVmYXVsdFByb3RvY29sKCkge1xyXG4gICAgICAgIC8qXHJcbiAgICAgICAgICogQ29udHJvbCBNZXNzYWdlcy4gUmFuZ2UgPSAwLi40OS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5zZXQoJ0lGcmFtZVJlcXVlc3QnLCB7XHJcbiAgICAgICAgICAgIGlkOiAwLFxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFtdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuc2V0KCdSZXF1ZXN0UXVhbGl0eUNvbnRyb2wnLCB7XHJcbiAgICAgICAgICAgIGlkOiAxLFxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFtdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuc2V0KCdGcHNSZXF1ZXN0Jywge1xyXG4gICAgICAgICAgICBpZDogMixcclxuICAgICAgICAgICAgc3RydWN0dXJlOiBbXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLnNldCgnQXZlcmFnZUJpdHJhdGVSZXF1ZXN0Jywge1xyXG4gICAgICAgICAgICBpZDogMyxcclxuICAgICAgICAgICAgc3RydWN0dXJlOiBbXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLnNldCgnU3RhcnRTdHJlYW1pbmcnLCB7XHJcbiAgICAgICAgICAgIGlkOiA0LFxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFtdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuc2V0KCdTdG9wU3RyZWFtaW5nJywge1xyXG4gICAgICAgICAgICBpZDogNSxcclxuICAgICAgICAgICAgc3RydWN0dXJlOiBbXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLnNldCgnTGF0ZW5jeVRlc3QnLCB7XHJcbiAgICAgICAgICAgIGlkOiA2LFxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFsnc3RyaW5nJ11cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5zZXQoJ1JlcXVlc3RJbml0aWFsU2V0dGluZ3MnLCB7XHJcbiAgICAgICAgICAgIGlkOiA3LFxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFtdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuc2V0KCdUZXN0RWNobycsIHtcclxuICAgICAgICAgICAgaWQ6IDgsXHJcbiAgICAgICAgICAgIHN0cnVjdHVyZTogW11cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5zZXQoJ0RhdGFDaGFubmVsTGF0ZW5jeVRlc3QnLCB7XHJcbiAgICAgICAgICAgIGlkOiA5LFxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFtdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLypcclxuICAgICAgICAgKiBJbnB1dCBNZXNzYWdlcy4gUmFuZ2UgPSA1MC4uODkuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLy8gR2VuZXJpYyBJbnB1dCBNZXNzYWdlcy4gUmFuZ2UgPSA1MC4uNTkuXHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuc2V0KCdVSUludGVyYWN0aW9uJywge1xyXG4gICAgICAgICAgICBpZDogNTAsXHJcbiAgICAgICAgICAgIHN0cnVjdHVyZTogWydzdHJpbmcnXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLnNldCgnQ29tbWFuZCcsIHtcclxuICAgICAgICAgICAgaWQ6IDUxLFxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFsnc3RyaW5nJ11cclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBLZXlib2FyZCBJbnB1dCBNZXNzYWdlLiBSYW5nZSA9IDYwLi42OS5cclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5zZXQoJ0tleURvd24nLCB7XHJcbiAgICAgICAgICAgIGlkOiA2MCxcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICBrZXlDb2RlICBpc1JlcGVhdFxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFsndWludDgnLCAndWludDgnXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLnNldCgnS2V5VXAnLCB7XHJcbiAgICAgICAgICAgIGlkOiA2MSxcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICBrZXlDb2RlXHJcbiAgICAgICAgICAgIHN0cnVjdHVyZTogWyd1aW50OCddXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuc2V0KCdLZXlQcmVzcycsIHtcclxuICAgICAgICAgICAgaWQ6IDYyLFxyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgIGNoYXJjb2RlXHJcbiAgICAgICAgICAgIHN0cnVjdHVyZTogWyd1aW50MTYnXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIE1vdXNlIElucHV0IE1lc3NhZ2VzLiBSYW5nZSA9IDcwLi43OS5cclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5zZXQoJ01vdXNlRW50ZXInLCB7XHJcbiAgICAgICAgICAgIGlkOiA3MCxcclxuICAgICAgICAgICAgc3RydWN0dXJlOiBbXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLnNldCgnTW91c2VMZWF2ZScsIHtcclxuICAgICAgICAgICAgaWQ6IDcxLFxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFtdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuc2V0KCdNb3VzZURvd24nLCB7XHJcbiAgICAgICAgICAgIGlkOiA3MixcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgIGJ1dHRvbiAgICAgeCAgICAgICAgIHlcclxuICAgICAgICAgICAgc3RydWN0dXJlOiBbJ3VpbnQ4JywgJ3VpbnQxNicsICd1aW50MTYnXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLnNldCgnTW91c2VVcCcsIHtcclxuICAgICAgICAgICAgaWQ6IDczLFxyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgYnV0dG9uICAgICB4ICAgICAgICAgeVxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFsndWludDgnLCAndWludDE2JywgJ3VpbnQxNiddXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuc2V0KCdNb3VzZU1vdmUnLCB7XHJcbiAgICAgICAgICAgIGlkOiA3NCxcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgIHggICAgICAgICAgIHkgICAgICBkZWx0YVggICAgZGVsdGFZXHJcbiAgICAgICAgICAgIHN0cnVjdHVyZTogWyd1aW50MTYnLCAndWludDE2JywgJ2ludDE2JywgJ2ludDE2J11cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5zZXQoJ01vdXNlV2hlZWwnLCB7XHJcbiAgICAgICAgICAgIGlkOiA3NSxcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgIGRlbHRhICAgICAgIHggICAgICAgIHlcclxuICAgICAgICAgICAgc3RydWN0dXJlOiBbJ2ludDE2JywgJ3VpbnQxNicsICd1aW50MTYnXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLnNldCgnTW91c2VEb3VibGUnLCB7XHJcbiAgICAgICAgICAgIGlkOiA3NixcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgIGJ1dHRvbiAgICAgeCAgICAgICAgIHlcclxuICAgICAgICAgICAgc3RydWN0dXJlOiBbJ3VpbnQ4JywgJ3VpbnQxNicsICd1aW50MTYnXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIFRvdWNoIElucHV0IE1lc3NhZ2VzLiBSYW5nZSA9IDgwLi44OS5cclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5zZXQoJ1RvdWNoU3RhcnQnLCB7XHJcbiAgICAgICAgICAgIGlkOiA4MCxcclxuICAgICAgICAgICAgLy8gICAgICAgICAgbnVtdG91Y2hlcygxKSAgIHggICAgICAgeSAgICAgICAgaWR4ICAgICBmb3JjZSAgICAgdmFsaWRcclxuICAgICAgICAgICAgc3RydWN0dXJlOiBbJ3VpbnQ4JywgJ3VpbnQxNicsICd1aW50MTYnLCAndWludDgnLCAndWludDgnLCAndWludDgnXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLnNldCgnVG91Y2hFbmQnLCB7XHJcbiAgICAgICAgICAgIGlkOiA4MSxcclxuICAgICAgICAgICAgLy8gICAgICAgICAgbnVtdG91Y2hlcygxKSAgIHggICAgICAgeSAgICAgICAgaWR4ICAgICBmb3JjZSAgICAgdmFsaWRcclxuICAgICAgICAgICAgc3RydWN0dXJlOiBbJ3VpbnQ4JywgJ3VpbnQxNicsICd1aW50MTYnLCAndWludDgnLCAndWludDgnLCAndWludDgnXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLnNldCgnVG91Y2hNb3ZlJywge1xyXG4gICAgICAgICAgICBpZDogODIsXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgIG51bXRvdWNoZXMoMSkgICB4ICAgICAgIHkgICAgICAgaWR4ICAgICAgZm9yY2UgICAgIHZhbGlkXHJcbiAgICAgICAgICAgIHN0cnVjdHVyZTogWyd1aW50OCcsICd1aW50MTYnLCAndWludDE2JywgJ3VpbnQ4JywgJ3VpbnQ4JywgJ3VpbnQ4J11cclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBHYW1lcGFkIElucHV0IE1lc3NhZ2VzLiBSYW5nZSA9IDkwLi45OVxyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLnNldCgnR2FtZXBhZENvbm5lY3RlZCcsIHtcclxuICAgICAgICAgICAgaWQ6IDkzLFxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFtdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuc2V0KCdHYW1lcGFkQnV0dG9uUHJlc3NlZCcsIHtcclxuICAgICAgICAgICAgaWQ6IDkwLFxyXG4gICAgICAgICAgICAvLyAgICAgICAgIGN0cmxlcklkICAgYnV0dG9uICBpc1JlcGVhdFxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFsndWludDgnLCAndWludDgnLCAndWludDgnXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLnNldCgnR2FtZXBhZEJ1dHRvblJlbGVhc2VkJywge1xyXG4gICAgICAgICAgICBpZDogOTEsXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgY3RybGVySWQgICBidXR0b24gIGlzUmVwZWF0KDApXHJcbiAgICAgICAgICAgIHN0cnVjdHVyZTogWyd1aW50OCcsICd1aW50OCcsICd1aW50OCddXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuc2V0KCdHYW1lcGFkQW5hbG9nJywge1xyXG4gICAgICAgICAgICBpZDogOTIsXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgY3RybGVySWQgICBidXR0b24gIGFuYWxvZ1ZhbHVlXHJcbiAgICAgICAgICAgIHN0cnVjdHVyZTogWyd1aW50OCcsICd1aW50OCcsICdkb3VibGUnXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLnNldCgnR2FtZXBhZERpc2Nvbm5lY3RlZCcsIHtcclxuICAgICAgICAgICAgaWQ6IDk0LFxyXG4gICAgICAgICAgICAvLyAgICAgICAgICBjdHJsZXJJZFxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFsndWludDgnXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZnJvbVN0cmVhbWVyTWVzc2FnZXMuc2V0KDAsICdRdWFsaXR5Q29udHJvbE93bmVyc2hpcCcpO1xyXG4gICAgICAgIHRoaXMuZnJvbVN0cmVhbWVyTWVzc2FnZXMuc2V0KDEsICdSZXNwb25zZScpO1xyXG4gICAgICAgIHRoaXMuZnJvbVN0cmVhbWVyTWVzc2FnZXMuc2V0KDIsICdDb21tYW5kJyk7XHJcbiAgICAgICAgdGhpcy5mcm9tU3RyZWFtZXJNZXNzYWdlcy5zZXQoMywgJ0ZyZWV6ZUZyYW1lJyk7XHJcbiAgICAgICAgdGhpcy5mcm9tU3RyZWFtZXJNZXNzYWdlcy5zZXQoNCwgJ1VuZnJlZXplRnJhbWUnKTtcclxuICAgICAgICB0aGlzLmZyb21TdHJlYW1lck1lc3NhZ2VzLnNldCg1LCAnVmlkZW9FbmNvZGVyQXZnUVAnKTtcclxuICAgICAgICB0aGlzLmZyb21TdHJlYW1lck1lc3NhZ2VzLnNldCg2LCAnTGF0ZW5jeVRlc3QnKTtcclxuICAgICAgICB0aGlzLmZyb21TdHJlYW1lck1lc3NhZ2VzLnNldCg3LCAnSW5pdGlhbFNldHRpbmdzJyk7XHJcbiAgICAgICAgdGhpcy5mcm9tU3RyZWFtZXJNZXNzYWdlcy5zZXQoOCwgJ0ZpbGVFeHRlbnNpb24nKTtcclxuICAgICAgICB0aGlzLmZyb21TdHJlYW1lck1lc3NhZ2VzLnNldCg5LCAnRmlsZU1pbWVUeXBlJyk7XHJcbiAgICAgICAgdGhpcy5mcm9tU3RyZWFtZXJNZXNzYWdlcy5zZXQoMTAsICdGaWxlQ29udGVudHMnKTtcclxuICAgICAgICB0aGlzLmZyb21TdHJlYW1lck1lc3NhZ2VzLnNldCgxMSwgJ1Rlc3RFY2hvJyk7XHJcbiAgICAgICAgdGhpcy5mcm9tU3RyZWFtZXJNZXNzYWdlcy5zZXQoMTIsICdJbnB1dENvbnRyb2xPd25lcnNoaXAnKTtcclxuICAgICAgICB0aGlzLmZyb21TdHJlYW1lck1lc3NhZ2VzLnNldCgxMywgJ0dhbWVwYWRSZXNwb25zZScpO1xyXG4gICAgICAgIHRoaXMuZnJvbVN0cmVhbWVyTWVzc2FnZXMuc2V0KDE0LCAnRGF0YUNoYW5uZWxMYXRlbmN5VGVzdCcpO1xyXG4gICAgICAgIHRoaXMuZnJvbVN0cmVhbWVyTWVzc2FnZXMuc2V0KDI1NSwgJ1Byb3RvY29sJyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlZ2lzdGVyIGEgbWVzc2FnZSBoYW5kbGVyXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZURpcmVjdGlvbiAtIHRoZSBkaXJlY3Rpb24gb2YgdGhlIG1lc3NhZ2U7IHRvU3RyZWFtZXIgb3IgZnJvbVN0cmVhbWVyXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZVR5cGUgLSB0aGUgdHlwZSBvZiB0aGUgbWVzc2FnZVxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2VIYW5kbGVyIC0gdGhlIGZ1bmN0aW9uIG9yIG1ldGhvZCB0byBiZSBleGVjdXRlZCB3aGVuIHRoaXMgaGFuZGxlciBpcyBjYWxsZWRcclxuICAgICAqL1xyXG4gICAgcmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihtZXNzYWdlRGlyZWN0aW9uLCBtZXNzYWdlVHlwZSwgbWVzc2FnZUhhbmRsZXIpIHtcclxuICAgICAgICBzd2l0Y2ggKG1lc3NhZ2VEaXJlY3Rpb24pIHtcclxuICAgICAgICAgICAgY2FzZSBNZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXI6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvU3RyZWFtZXJIYW5kbGVycy5zZXQobWVzc2FnZVR5cGUsIG1lc3NhZ2VIYW5kbGVyKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIE1lc3NhZ2VEaXJlY3Rpb24uRnJvbVN0cmVhbWVyOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5mcm9tU3RyZWFtZXJIYW5kbGVycy5zZXQobWVzc2FnZVR5cGUsIG1lc3NhZ2VIYW5kbGVyKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYFVua25vd24gbWVzc2FnZSBkaXJlY3Rpb24gJHttZXNzYWdlRGlyZWN0aW9ufWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4vKipcclxuICogVGhlIGVudW0gZm9yIG1lc3NhZ2UgZGlyZWN0aW9uc1xyXG4gKi9cclxudmFyIE1lc3NhZ2VEaXJlY3Rpb247XHJcbihmdW5jdGlvbiAoTWVzc2FnZURpcmVjdGlvbikge1xyXG4gICAgTWVzc2FnZURpcmVjdGlvbltNZXNzYWdlRGlyZWN0aW9uW1wiVG9TdHJlYW1lclwiXSA9IDBdID0gXCJUb1N0cmVhbWVyXCI7XHJcbiAgICBNZXNzYWdlRGlyZWN0aW9uW01lc3NhZ2VEaXJlY3Rpb25bXCJGcm9tU3RyZWFtZXJcIl0gPSAxXSA9IFwiRnJvbVN0cmVhbWVyXCI7XHJcbn0pKE1lc3NhZ2VEaXJlY3Rpb24gfHwgKE1lc3NhZ2VEaXJlY3Rpb24gPSB7fSkpO1xyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvVWVJbnN0YW5jZU1lc3NhZ2UvVG9TdHJlYW1lck1lc3NhZ2VzQ29udHJvbGxlci50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL1VlSW5zdGFuY2VNZXNzYWdlL1RvU3RyZWFtZXJNZXNzYWdlc0NvbnRyb2xsZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJUb1N0cmVhbWVyTWVzc2FnZXNDb250cm9sbGVyXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFRvU3RyZWFtZXJNZXNzYWdlc0NvbnRyb2xsZXIpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbmNsYXNzIFRvU3RyZWFtZXJNZXNzYWdlc0NvbnRyb2xsZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gc2VuZE1lc3NhZ2VDb250cm9sbGVyIC0gU3RyZWFtIG1lc3NhZ2UgY29udHJvbGxlciBpbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihzZW5kTWVzc2FnZUNvbnRyb2xsZXIpIHtcclxuICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlciA9IHNlbmRNZXNzYWdlQ29udHJvbGxlcjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2VuZCBSZXF1ZXN0IHRvIFRha2UgUXVhbGl0eSBDb250cm9sIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICBTZW5kUmVxdWVzdFF1YWxpdHlDb250cm9sKCkge1xyXG4gICAgICAgIHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcignUmVxdWVzdFF1YWxpdHlDb250cm9sJyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgTWF4IEZQUyBSZXF1ZXN0IHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICBTZW5kTWF4RnBzUmVxdWVzdCgpIHtcclxuICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ0Zwc1JlcXVlc3QnKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2VuZCBBdmVyYWdlIEJpdHJhdGUgUmVxdWVzdCB0byB0aGUgVUUgSW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgU2VuZEF2ZXJhZ2VCaXRyYXRlUmVxdWVzdCgpIHtcclxuICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ0F2ZXJhZ2VCaXRyYXRlUmVxdWVzdCcpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIGEgU3RhcnQgU3RyZWFtaW5nIE1lc3NhZ2UgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKi9cclxuICAgIFNlbmRTdGFydFN0cmVhbWluZygpIHtcclxuICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ1N0YXJ0U3RyZWFtaW5nJyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgYSBTdG9wIFN0cmVhbWluZyBNZXNzYWdlIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICBTZW5kU3RvcFN0cmVhbWluZygpIHtcclxuICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ1N0b3BTdHJlYW1pbmcnKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2VuZCBhIFJlcXVlc3QgSW5pdGlhbCBTZXR0aW5ncyB0byB0aGUgVUUgSW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgU2VuZFJlcXVlc3RJbml0aWFsU2V0dGluZ3MoKSB7XHJcbiAgICAgICAgdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdSZXF1ZXN0SW5pdGlhbFNldHRpbmdzJyk7XHJcbiAgICB9XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL1V0aWwvQ29vcmRpbmF0ZUNvbnZlcnRlci50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvVXRpbC9Db29yZGluYXRlQ29udmVydGVyLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJDb29yZGluYXRlQ29udmVydGVyXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIENvb3JkaW5hdGVDb252ZXJ0ZXIpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIk5vcm1hbGl6ZWRRdWFudGl6ZWRTaWduZWRDb29yZFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBOb3JtYWxpemVkUXVhbnRpemVkU2lnbmVkQ29vcmQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIk5vcm1hbGl6ZWRRdWFudGl6ZWRVbnNpZ25lZENvb3JkXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIE5vcm1hbGl6ZWRRdWFudGl6ZWRVbnNpZ25lZENvb3JkKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJVbnF1YW50aXplZERlbm9ybWFsaXplZFVuc2lnbmVkQ29vcmRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gVW5xdWFudGl6ZWREZW5vcm1hbGl6ZWRVbnNpZ25lZENvb3JkKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL0xvZ2dlci9Mb2dnZXIgKi8gXCIuL3NyYy9Mb2dnZXIvTG9nZ2VyLnRzXCIpO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBjb29yZGluYXRlcyBmcm9tIGVsZW1lbnQgcmVsYXRpdmUgY29vcmRpbmF0ZXMgdG8gdmFsdWVzIG5vcm1hbGl6ZWQgd2l0aGluIHRoZSB2YWx1ZSByYW5nZSBvZiBhIHNob3J0IChhbmQgYmFjayBhZ2FpbilcclxuICovXHJcbmNsYXNzIENvb3JkaW5hdGVDb252ZXJ0ZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gdmlkZW9FbGVtZW50UHJvdmlkZXIgLSB0aGUgZGl2IGVsZW1lbnQgdGhhdCB0aGUgdmlkZW8gcGxheWVyIHdpbGwgYmUgaW5qZWN0ZWQgaW50b1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih2aWRlb0VsZW1lbnRQcm92aWRlcikge1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIgPSB2aWRlb0VsZW1lbnRQcm92aWRlcjtcclxuICAgICAgICB0aGlzLm5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWRGdW5jID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vcm1hbGl6ZSBhbmQgcXVhbnRpemUgdW5zaWduZWQsIG1ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLm5vcm1hbGl6ZUFuZFF1YW50aXplU2lnbmVkRnVuYyA9ICgpID0+IHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3JtYWxpemUgYW5kIHVucXVhbnRpemUgc2lnbmVkLCBtZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5kZW5vcm1hbGl6ZUFuZFVucXVhbnRpemVVbnNpZ25lZEZ1bmMgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRGVub3JtYWxpemUgYW5kIHVucXVhbnRpemUgdW5zaWduZWQsIG1ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGhlIHN1cmZhY2UgbWV0aG9kIGZvciBzZXR0ZXJOb3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkXHJcbiAgICAgKiBAcGFyYW0geCAtIHggYXhpcyBwb2ludFxyXG4gICAgICogQHBhcmFtIHkgLSB5IGF4aXMgcG9pbnRcclxuICAgICAqL1xyXG4gICAgbm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZCh4LCB5KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZEZ1bmMoeCwgeSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBzdXJmYWNlIG1ldGhvZCBmb3Igc2V0dGVyVW5xdWFudGl6ZUFuZERlbm9ybWFsaXplVW5zaWduZWRcclxuICAgICAqIEBwYXJhbSB4IC0geCBheGlzIHBvaW50XHJcbiAgICAgKiBAcGFyYW0geSAtIHkgYXhpcyBwb2ludFxyXG4gICAgICovXHJcbiAgICB1bnF1YW50aXplQW5kRGVub3JtYWxpemVVbnNpZ25lZCh4LCB5KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVub3JtYWxpemVBbmRVbnF1YW50aXplVW5zaWduZWRGdW5jKHgsIHkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgc3VyZmFjZSBtZXRob2QgZm9yIHNldHRlck5vcm1hbGl6ZUFuZFF1YW50aXplU2lnbmVkXHJcbiAgICAgKiBAcGFyYW0geCAtIHggYXhpcyBwb2ludFxyXG4gICAgICogQHBhcmFtIHkgLSB5IGF4aXMgcG9pbnRcclxuICAgICAqL1xyXG4gICAgbm9ybWFsaXplQW5kUXVhbnRpemVTaWduZWQoeCwgeSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5vcm1hbGl6ZUFuZFF1YW50aXplU2lnbmVkRnVuYyh4LCB5KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogc2V0IHVwIHRoZSBOb3JtYWxpemUgQW5kIFF1YW50aXplIG1ldGhvZHMgYmFzZWQgb24gdGhlIGFzcGVjdCByYXRpbyBhbmQgdGhlIHZpZGVvIHBsYXllciByYXRpb1xyXG4gICAgICovXHJcbiAgICBzZXR1cE5vcm1hbGl6ZUFuZFF1YW50aXplKCkge1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50UGFyZW50ID1cclxuICAgICAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5nZXRWaWRlb1BhcmVudEVsZW1lbnQoKTtcclxuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudCA9IHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuZ2V0VmlkZW9FbGVtZW50KCk7XHJcbiAgICAgICAgaWYgKHRoaXMudmlkZW9FbGVtZW50UGFyZW50ICYmIHRoaXMudmlkZW9FbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBsYXllcldpZHRoID0gdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuY2xpZW50V2lkdGggfHwgMTtcclxuICAgICAgICAgICAgY29uc3QgcGxheWVySGVpZ2h0ID0gdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuY2xpZW50SGVpZ2h0IHx8IDE7XHJcbiAgICAgICAgICAgIGNvbnN0IHZpZGVvV2lkdGggPSB0aGlzLnZpZGVvRWxlbWVudC52aWRlb1dpZHRoIHx8IDE7XHJcbiAgICAgICAgICAgIGNvbnN0IHZpZGVvSGVpZ2h0ID0gdGhpcy52aWRlb0VsZW1lbnQudmlkZW9IZWlnaHQgfHwgMTtcclxuICAgICAgICAgICAgY29uc3QgcGxheWVyQXNwZWN0UmF0aW8gPSBwbGF5ZXJIZWlnaHQgLyBwbGF5ZXJXaWR0aDtcclxuICAgICAgICAgICAgY29uc3QgdmlkZW9Bc3BlY3RSYXRpbyA9IHZpZGVvSGVpZ2h0IC8gdmlkZW9XaWR0aDtcclxuICAgICAgICAgICAgaWYgKHBsYXllckFzcGVjdFJhdGlvID4gdmlkZW9Bc3BlY3RSYXRpbykge1xyXG4gICAgICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ1NldHVwIE5vcm1hbGl6ZSBhbmQgUXVhbnRpemUgZm9yIHBsYXllckFzcGVjdFJhdGlvID4gdmlkZW9Bc3BlY3RSYXRpbycsIDYpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yYXRpbyA9IHBsYXllckFzcGVjdFJhdGlvIC8gdmlkZW9Bc3BlY3RSYXRpbztcclxuICAgICAgICAgICAgICAgIHRoaXMubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZEZ1bmMgPSAoeCwgeSkgPT4gdGhpcy5ub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkUGxheWVyQmlnZ2VyKHgsIHkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ub3JtYWxpemVBbmRRdWFudGl6ZVNpZ25lZEZ1bmMgPSAoeCwgeSkgPT4gdGhpcy5ub3JtYWxpemVBbmRRdWFudGl6ZVNpZ25lZFBsYXllckJpZ2dlcih4LCB5KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVub3JtYWxpemVBbmRVbnF1YW50aXplVW5zaWduZWRGdW5jID0gKHgsIHkpID0+IHRoaXMuZGVub3JtYWxpemVBbmRVbnF1YW50aXplVW5zaWduZWRQbGF5ZXJCaWdnZXIoeCwgeSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnU2V0dXAgTm9ybWFsaXplIGFuZCBRdWFudGl6ZSBmb3IgcGxheWVyQXNwZWN0UmF0aW8gPD0gdmlkZW9Bc3BlY3RSYXRpbycsIDYpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yYXRpbyA9IHZpZGVvQXNwZWN0UmF0aW8gLyBwbGF5ZXJBc3BlY3RSYXRpbztcclxuICAgICAgICAgICAgICAgIHRoaXMubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZEZ1bmMgPSAoeCwgeSkgPT4gdGhpcy5ub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkUGxheWVyU21hbGxlcih4LCB5KTtcclxuICAgICAgICAgICAgICAgIHRoaXMubm9ybWFsaXplQW5kUXVhbnRpemVTaWduZWRGdW5jID0gKHgsIHkpID0+IHRoaXMubm9ybWFsaXplQW5kUXVhbnRpemVTaWduZWRQbGF5ZXJTbWFsbGVyKHgsIHkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZW5vcm1hbGl6ZUFuZFVucXVhbnRpemVVbnNpZ25lZEZ1bmMgPSAoeCwgeSkgPT4gdGhpcy5kZW5vcm1hbGl6ZUFuZFVucXVhbnRpemVVbnNpZ25lZFBsYXllclNtYWxsZXIoeCwgeSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIG5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWQgZm9yIHBsYXllckFzcGVjdFJhdGlvID4gdmlkZW9Bc3BlY3RSYXRpb1xyXG4gICAgICogQHBhcmFtIHggLSB4IGF4aXMgcG9pbnRcclxuICAgICAqIEBwYXJhbSB5IC0geSBheGlzIHBvaW50XHJcbiAgICAgKi9cclxuICAgIG5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWRQbGF5ZXJCaWdnZXIoeCwgeSkge1xyXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRYID0geCAvIHRoaXMudmlkZW9FbGVtZW50UGFyZW50LmNsaWVudFdpZHRoO1xyXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRZID0gdGhpcy5yYXRpbyAqICh5IC8gdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuY2xpZW50SGVpZ2h0IC0gMC41KSArIDAuNTtcclxuICAgICAgICBpZiAobm9ybWFsaXplZFggPCAwLjAgfHxcclxuICAgICAgICAgICAgbm9ybWFsaXplZFggPiAxLjAgfHxcclxuICAgICAgICAgICAgbm9ybWFsaXplZFkgPCAwLjAgfHxcclxuICAgICAgICAgICAgbm9ybWFsaXplZFkgPiAxLjApIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBOb3JtYWxpemVkUXVhbnRpemVkVW5zaWduZWRDb29yZChmYWxzZSwgNjU1MzUsIDY1NTM1KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgTm9ybWFsaXplZFF1YW50aXplZFVuc2lnbmVkQ29vcmQodHJ1ZSwgbm9ybWFsaXplZFggKiA2NTUzNiwgbm9ybWFsaXplZFkgKiA2NTUzNik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiB1bnF1YW50aXplQW5kRGVub3JtYWxpemVVbnNpZ25lZCBmb3IgcGxheWVyQXNwZWN0UmF0aW8gPiB2aWRlb0FzcGVjdFJhdGlvXHJcbiAgICAgKiBAcGFyYW0geCAtIHggYXhpcyBwb2ludFxyXG4gICAgICogQHBhcmFtIHkgLSB5IGF4aXMgcG9pbnRcclxuICAgICAqL1xyXG4gICAgZGVub3JtYWxpemVBbmRVbnF1YW50aXplVW5zaWduZWRQbGF5ZXJCaWdnZXIoeCwgeSkge1xyXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRYID0geCAvIDY1NTM2O1xyXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRZID0gKHkgLyA2NTUzNiAtIDAuNSkgLyB0aGlzLnJhdGlvICsgMC41O1xyXG4gICAgICAgIHJldHVybiBuZXcgVW5xdWFudGl6ZWREZW5vcm1hbGl6ZWRVbnNpZ25lZENvb3JkKG5vcm1hbGl6ZWRYICogdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuY2xpZW50V2lkdGgsIG5vcm1hbGl6ZWRZICogdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuY2xpZW50SGVpZ2h0KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogbm9ybWFsaXplQW5kUXVhbnRpemVTaWduZWQgZm9yIHBsYXllckFzcGVjdFJhdGlvID4gdmlkZW9Bc3BlY3RSYXRpb1xyXG4gICAgICogQHBhcmFtIHggLSB4IGF4aXMgcG9pbnRcclxuICAgICAqIEBwYXJhbSB5IC0geSBheGlzIHBvaW50XHJcbiAgICAgKi9cclxuICAgIG5vcm1hbGl6ZUFuZFF1YW50aXplU2lnbmVkUGxheWVyQmlnZ2VyKHgsIHkpIHtcclxuICAgICAgICBjb25zdCBub3JtYWxpemVkWCA9IHggLyAoMC41ICogdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuY2xpZW50V2lkdGgpO1xyXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRZID0gKHRoaXMucmF0aW8gKiB5KSAvICgwLjUgKiB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5jbGllbnRIZWlnaHQpO1xyXG4gICAgICAgIHJldHVybiBuZXcgTm9ybWFsaXplZFF1YW50aXplZFNpZ25lZENvb3JkKG5vcm1hbGl6ZWRYICogMzI3NjcsIG5vcm1hbGl6ZWRZICogMzI3NjcpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkIGZvciBwbGF5ZXJBc3BlY3RSYXRpbyA8PSB2aWRlb0FzcGVjdFJhdGlvXHJcbiAgICAgKiBAcGFyYW0geCAtIHggYXhpcyBwb2ludFxyXG4gICAgICogQHBhcmFtIHkgLSB5IGF4aXMgcG9pbnRcclxuICAgICAqL1xyXG4gICAgbm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZFBsYXllclNtYWxsZXIoeCwgeSkge1xyXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRYID0gdGhpcy5yYXRpbyAqICh4IC8gdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuY2xpZW50V2lkdGggLSAwLjUpICsgMC41O1xyXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRZID0geSAvIHRoaXMudmlkZW9FbGVtZW50UGFyZW50LmNsaWVudEhlaWdodDtcclxuICAgICAgICBpZiAobm9ybWFsaXplZFggPCAwLjAgfHxcclxuICAgICAgICAgICAgbm9ybWFsaXplZFggPiAxLjAgfHxcclxuICAgICAgICAgICAgbm9ybWFsaXplZFkgPCAwLjAgfHxcclxuICAgICAgICAgICAgbm9ybWFsaXplZFkgPiAxLjApIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBOb3JtYWxpemVkUXVhbnRpemVkVW5zaWduZWRDb29yZChmYWxzZSwgNjU1MzUsIDY1NTM1KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgTm9ybWFsaXplZFF1YW50aXplZFVuc2lnbmVkQ29vcmQodHJ1ZSwgbm9ybWFsaXplZFggKiA2NTUzNiwgbm9ybWFsaXplZFkgKiA2NTUzNik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiB1bnF1YW50aXplQW5kRGVub3JtYWxpemVVbnNpZ25lZCBmb3IgcGxheWVyQXNwZWN0UmF0aW8gPD0gdmlkZW9Bc3BlY3RSYXRpb1xyXG4gICAgICogQHBhcmFtIHggLSB4IGF4aXMgcG9pbnRcclxuICAgICAqIEBwYXJhbSB5IC0geSBheGlzIHBvaW50XHJcbiAgICAgKi9cclxuICAgIGRlbm9ybWFsaXplQW5kVW5xdWFudGl6ZVVuc2lnbmVkUGxheWVyU21hbGxlcih4LCB5KSB7XHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFggPSAoeCAvIDY1NTM2IC0gMC41KSAvIHRoaXMucmF0aW8gKyAwLjU7XHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFkgPSB5IC8gNjU1MzY7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBVbnF1YW50aXplZERlbm9ybWFsaXplZFVuc2lnbmVkQ29vcmQobm9ybWFsaXplZFggKiB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5jbGllbnRXaWR0aCwgbm9ybWFsaXplZFkgKiB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5jbGllbnRIZWlnaHQpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBub3JtYWxpemVBbmRRdWFudGl6ZVNpZ25lZCBmb3IgcGxheWVyQXNwZWN0UmF0aW8gPD0gdmlkZW9Bc3BlY3RSYXRpb1xyXG4gICAgICogQHBhcmFtIHggLSB4IGF4aXMgcG9pbnRcclxuICAgICAqIEBwYXJhbSB5IC0geSBheGlzIHBvaW50XHJcbiAgICAgKi9cclxuICAgIG5vcm1hbGl6ZUFuZFF1YW50aXplU2lnbmVkUGxheWVyU21hbGxlcih4LCB5KSB7XHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFggPSAodGhpcy5yYXRpbyAqIHgpIC8gKDAuNSAqIHRoaXMudmlkZW9FbGVtZW50UGFyZW50LmNsaWVudFdpZHRoKTtcclxuICAgICAgICBjb25zdCBub3JtYWxpemVkWSA9IHkgLyAoMC41ICogdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuY2xpZW50SGVpZ2h0KTtcclxuICAgICAgICByZXR1cm4gbmV3IE5vcm1hbGl6ZWRRdWFudGl6ZWRTaWduZWRDb29yZChub3JtYWxpemVkWCAqIDMyNzY3LCBub3JtYWxpemVkWSAqIDMyNzY3KTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQSBjbGFzcyBmb3IgTm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZCBvYmplY3RzXHJcbiAqL1xyXG5jbGFzcyBOb3JtYWxpemVkUXVhbnRpemVkVW5zaWduZWRDb29yZCB7XHJcbiAgICBjb25zdHJ1Y3RvcihpblJhbmdlLCB4LCB5KSB7XHJcbiAgICAgICAgdGhpcy5pblJhbmdlID0gaW5SYW5nZTtcclxuICAgICAgICB0aGlzLnggPSB4O1xyXG4gICAgICAgIHRoaXMueSA9IHk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEEgY2xhc3MgZm9yIFVucXVhbnRpemVkQW5kRGVub3JtYWxpemVVbnNpZ25lZCBvYmplY3RzXHJcbiAqL1xyXG5jbGFzcyBVbnF1YW50aXplZERlbm9ybWFsaXplZFVuc2lnbmVkQ29vcmQge1xyXG4gICAgY29uc3RydWN0b3IoeCwgeSkge1xyXG4gICAgICAgIHRoaXMueCA9IHg7XHJcbiAgICAgICAgdGhpcy55ID0geTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQSBjbGFzcyBmb3IgTm9ybWFsaXplZFF1YW50aXplZFNpZ25lZENvb3JkIG9iamVjdHNcclxuICovXHJcbmNsYXNzIE5vcm1hbGl6ZWRRdWFudGl6ZWRTaWduZWRDb29yZCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih4LCB5KSB7XHJcbiAgICAgICAgdGhpcy54ID0geDtcclxuICAgICAgICB0aGlzLnkgPSB5O1xyXG4gICAgfVxyXG59XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9VdGlsL0V2ZW50RW1pdHRlci50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9VdGlsL0V2ZW50RW1pdHRlci50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJBZmtUaW1lZE91dEV2ZW50XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIEFma1RpbWVkT3V0RXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkFma1dhcm5pbmdBY3RpdmF0ZUV2ZW50XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIEFma1dhcm5pbmdBY3RpdmF0ZUV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJBZmtXYXJuaW5nRGVhY3RpdmF0ZUV2ZW50XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIEFma1dhcm5pbmdEZWFjdGl2YXRlRXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkFma1dhcm5pbmdVcGRhdGVFdmVudFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBBZmtXYXJuaW5nVXBkYXRlRXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkRhdGFDaGFubmVsQ2xvc2VFdmVudFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBEYXRhQ2hhbm5lbENsb3NlRXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkRhdGFDaGFubmVsRXJyb3JFdmVudFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBEYXRhQ2hhbm5lbEVycm9yRXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkRhdGFDaGFubmVsTGF0ZW5jeVRlc3RSZXNwb25zZUV2ZW50XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIERhdGFDaGFubmVsTGF0ZW5jeVRlc3RSZXNwb25zZUV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJEYXRhQ2hhbm5lbExhdGVuY3lUZXN0UmVzdWx0RXZlbnRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gRGF0YUNoYW5uZWxMYXRlbmN5VGVzdFJlc3VsdEV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJEYXRhQ2hhbm5lbE9wZW5FdmVudFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBEYXRhQ2hhbm5lbE9wZW5FdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiRXZlbnRFbWl0dGVyXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIEV2ZW50RW1pdHRlciksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiSGlkZUZyZWV6ZUZyYW1lRXZlbnRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gSGlkZUZyZWV6ZUZyYW1lRXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkluaXRpYWxTZXR0aW5nc0V2ZW50XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIEluaXRpYWxTZXR0aW5nc0V2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJMYXRlbmN5VGVzdFJlc3VsdEV2ZW50XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIExhdGVuY3lUZXN0UmVzdWx0RXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkxvYWRGcmVlemVGcmFtZUV2ZW50XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIExvYWRGcmVlemVGcmFtZUV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJQbGF5U3RyZWFtRXJyb3JFdmVudFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBQbGF5U3RyZWFtRXJyb3JFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiUGxheVN0cmVhbUV2ZW50XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFBsYXlTdHJlYW1FdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiUGxheVN0cmVhbVJlamVjdGVkRXZlbnRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gUGxheVN0cmVhbVJlamVjdGVkRXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlBsYXllckNvdW50RXZlbnRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gUGxheWVyQ291bnRFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiU2V0dGluZ3NDaGFuZ2VkRXZlbnRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gU2V0dGluZ3NDaGFuZ2VkRXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlN0YXRzUmVjZWl2ZWRFdmVudFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBTdGF0c1JlY2VpdmVkRXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlN0cmVhbUxvYWRpbmdFdmVudFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBTdHJlYW1Mb2FkaW5nRXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlN0cmVhbVByZUNvbm5lY3RFdmVudFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBTdHJlYW1QcmVDb25uZWN0RXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlN0cmVhbVByZURpc2Nvbm5lY3RFdmVudFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBTdHJlYW1QcmVEaXNjb25uZWN0RXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlN0cmVhbVJlY29ubmVjdEV2ZW50XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFN0cmVhbVJlY29ubmVjdEV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJTdHJlYW1lcklEQ2hhbmdlZE1lc3NhZ2VFdmVudFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBTdHJlYW1lcklEQ2hhbmdlZE1lc3NhZ2VFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiU3RyZWFtZXJMaXN0TWVzc2FnZUV2ZW50XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFN0cmVhbWVyTGlzdE1lc3NhZ2VFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiVmlkZW9FbmNvZGVyQXZnUVBFdmVudFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBWaWRlb0VuY29kZXJBdmdRUEV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJWaWRlb0luaXRpYWxpemVkRXZlbnRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gVmlkZW9Jbml0aWFsaXplZEV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJXZWJSdGNBdXRvQ29ubmVjdEV2ZW50XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFdlYlJ0Y0F1dG9Db25uZWN0RXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIldlYlJ0Y0Nvbm5lY3RlZEV2ZW50XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFdlYlJ0Y0Nvbm5lY3RlZEV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJXZWJSdGNDb25uZWN0aW5nRXZlbnRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gV2ViUnRjQ29ubmVjdGluZ0V2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJXZWJSdGNEaXNjb25uZWN0ZWRFdmVudFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBXZWJSdGNEaXNjb25uZWN0ZWRFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiV2ViUnRjRmFpbGVkRXZlbnRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gV2ViUnRjRmFpbGVkRXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIldlYlJ0Y1NkcEV2ZW50XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFdlYlJ0Y1NkcEV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJXZWJSdGNUQ1BSZWxheURldGVjdGVkRXZlbnRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gV2ViUnRjVENQUmVsYXlEZXRlY3RlZEV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJYckZyYW1lRXZlbnRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gWHJGcmFtZUV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJYclNlc3Npb25FbmRlZEV2ZW50XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFhyU2Vzc2lvbkVuZGVkRXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlhyU2Vzc2lvblN0YXJ0ZWRFdmVudFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBYclNlc3Npb25TdGFydGVkRXZlbnQpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qKlxyXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiBBRksgZGlzY29ubmVjdCBpcyBhYm91dCB0byBoYXBwZW4uXHJcbiAqIENhbiBiZSBjYW5jZWxsZWQgYnkgY2FsbGluZyB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gcHJvdmlkZWQgYXMgcGFydCBvZiB0aGUgZXZlbnQuXHJcbiAqL1xyXG5jbGFzcyBBZmtXYXJuaW5nQWN0aXZhdGVFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcclxuICAgICAgICBzdXBlcignYWZrV2FybmluZ0FjdGl2YXRlJyk7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gdGhlIEFGSyBkaXNjb25uZWN0IGNvdW50ZG93biBpcyB1cGRhdGVkLlxyXG4gKi9cclxuY2xhc3MgQWZrV2FybmluZ1VwZGF0ZUV2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKCdhZmtXYXJuaW5nVXBkYXRlJyk7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gQUZLIHdhcm5pbmcgaXMgZGVhY3RpdmF0ZWQuXHJcbiAqL1xyXG5jbGFzcyBBZmtXYXJuaW5nRGVhY3RpdmF0ZUV2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoJ2Fma1dhcm5pbmdEZWFjdGl2YXRlJyk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCB3aGVuIEFGSyBjb3VudGRvd24gcmVhY2hlcyAwIGFuZCB0aGUgdXNlciBpcyBkaXNjb25uZWN0ZWQuXHJcbiAqL1xyXG5jbGFzcyBBZmtUaW1lZE91dEV2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoJ2Fma1RpbWVkT3V0Jyk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCB3aGVuIHdlIHJlY2VpdmUgbmV3IHZpZGVvIHF1YWxpdHkgdmFsdWUuXHJcbiAqL1xyXG5jbGFzcyBWaWRlb0VuY29kZXJBdmdRUEV2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKCd2aWRlb0VuY29kZXJBdmdRUCcpO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCBhZnRlciBhIFdlYlJ0YyBjb25uZWN0aW9uIGhhcyBiZWVuIG5lZ290aWF0ZWQuXHJcbiAqL1xyXG5jbGFzcyBXZWJSdGNTZHBFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCd3ZWJSdGNTZHAnKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gYXV0byBjb25uZWN0aW5nLlxyXG4gKi9cclxuY2xhc3MgV2ViUnRjQXV0b0Nvbm5lY3RFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCd3ZWJSdGNBdXRvQ29ubmVjdCcpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiBzZW5kaW5nIGEgV2ViUnRjIG9mZmVyLlxyXG4gKi9cclxuY2xhc3MgV2ViUnRjQ29ubmVjdGluZ0V2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoJ3dlYlJ0Y0Nvbm5lY3RpbmcnKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gV2ViUnRjIGNvbm5lY3Rpb24gaGFzIGJlZW4gZXN0YWJsaXNoZWQuXHJcbiAqL1xyXG5jbGFzcyBXZWJSdGNDb25uZWN0ZWRFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCd3ZWJSdGNDb25uZWN0ZWQnKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIGlmIFdlYlJ0YyBjb25uZWN0aW9uIGhhcyBmYWlsZWQuXHJcbiAqL1xyXG5jbGFzcyBXZWJSdGNGYWlsZWRFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCd3ZWJSdGNGYWlsZWQnKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIGlmIFdlYlJ0YyBjb25uZWN0aW9uIGlzIGRpc2Nvbm5lY3RlZC5cclxuICovXHJcbmNsYXNzIFdlYlJ0Y0Rpc2Nvbm5lY3RlZEV2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKCd3ZWJSdGNEaXNjb25uZWN0ZWQnKTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiBSVENEYXRhQ2hhbm5lbCBpcyBvcGVuZWQuXHJcbiAqL1xyXG5jbGFzcyBEYXRhQ2hhbm5lbE9wZW5FdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcclxuICAgICAgICBzdXBlcignZGF0YUNoYW5uZWxPcGVuJyk7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gUlRDRGF0YUNoYW5uZWwgaXMgY2xvc2VkLlxyXG4gKi9cclxuY2xhc3MgRGF0YUNoYW5uZWxDbG9zZUV2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKCdkYXRhQ2hhbm5lbENsb3NlJyk7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIG9uIFJUQ0RhdGFDaGFubmVsIGVycm9ycy5cclxuICovXHJcbmNsYXNzIERhdGFDaGFubmVsRXJyb3JFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcclxuICAgICAgICBzdXBlcignZGF0YUNoYW5uZWxFcnJvcicpO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCB3aGVuIHRoZSB2aWRlbyBzdHJlYW0gaGFzIGJlZW4gaW5pdGlhbGl6ZWQuXHJcbiAqL1xyXG5jbGFzcyBWaWRlb0luaXRpYWxpemVkRXZlbnQgZXh0ZW5kcyBFdmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigndmlkZW9Jbml0aWFsaXplZCcpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiB2aWRlbyBzdHJlYW0gbG9hZGluZyBzdGFydHMuXHJcbiAqL1xyXG5jbGFzcyBTdHJlYW1Mb2FkaW5nRXZlbnQgZXh0ZW5kcyBFdmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcignc3RyZWFtTG9hZGluZycpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiB2aWRlbyBzdHJlYW0gbG9hZGluZyBoYXMgZmluaXNoZWQuXHJcbiAqL1xyXG5jbGFzcyBTdHJlYW1QcmVDb25uZWN0RXZlbnQgZXh0ZW5kcyBFdmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcignc3RyZWFtQ29ubmVjdCcpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiB2aWRlbyBzdHJlYW0gaGFzIHN0b3BwZWQuXHJcbiAqL1xyXG5jbGFzcyBTdHJlYW1QcmVEaXNjb25uZWN0RXZlbnQgZXh0ZW5kcyBFdmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcignc3RyZWFtRGlzY29ubmVjdCcpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiB2aWRlbyBzdHJlYW0gaXMgcmVjb25uZWN0aW5nLlxyXG4gKi9cclxuY2xhc3MgU3RyZWFtUmVjb25uZWN0RXZlbnQgZXh0ZW5kcyBFdmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcignc3RyZWFtUmVjb25uZWN0Jyk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCBpZiB0aGVyZSBhcmUgZXJyb3JzIGxvYWRpbmcgdGhlIHZpZGVvIHN0cmVhbS5cclxuICovXHJcbmNsYXNzIFBsYXlTdHJlYW1FcnJvckV2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKCdwbGF5U3RyZWFtRXJyb3InKTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgYmVmb3JlIHRyeWluZyB0byBzdGFydCB2aWRlbyBwbGF5YmFjay5cclxuICovXHJcbmNsYXNzIFBsYXlTdHJlYW1FdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCdwbGF5U3RyZWFtJyk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCBpZiB0aGUgYnJvd3NlciByZWplY3RzIHZpZGVvIHBsYXliYWNrLiBDYW4gaGFwcGVuIGZvciBleGFtcGxlIGlmXHJcbiAqIHZpZGVvIGF1dG8tcGxheSB3aXRob3V0IHVzZXIgaW50ZXJhY3Rpb24gaXMgcmVmdXNlZCBieSB0aGUgYnJvd3Nlci5cclxuICovXHJcbmNsYXNzIFBsYXlTdHJlYW1SZWplY3RlZEV2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKCdwbGF5U3RyZWFtUmVqZWN0ZWQnKTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiByZWNlaXZpbmcgYSBmdWxsIEZyZWV6ZUZyYW1lIGltYWdlIGZyb20gVUUuXHJcbiAqL1xyXG5jbGFzcyBMb2FkRnJlZXplRnJhbWVFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcclxuICAgICAgICBzdXBlcignbG9hZEZyZWV6ZUZyYW1lJyk7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gcmVjZWl2aW5nIFVuZnJlZXplRnJhbWUgbWVzc2FnZSBmcm9tIFVFIGFuZCB2aWRlbyBwbGF5YmFjayBpcyBhYm91dCB0byBiZSByZXN1bWVkLlxyXG4gKi9cclxuY2xhc3MgSGlkZUZyZWV6ZUZyYW1lRXZlbnQgZXh0ZW5kcyBFdmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcignaGlkZUZyZWV6ZUZyYW1lJyk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCB3aGVuIHJlY2VpdmluZyBXZWJSVEMgc3RhdGlzdGljcy5cclxuICovXHJcbmNsYXNzIFN0YXRzUmVjZWl2ZWRFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcclxuICAgICAgICBzdXBlcignc3RhdHNSZWNlaXZlZCcpO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCB3aGVuIHN0cmVhbWVyIGxpc3QgY2hhbmdlcy5cclxuICovXHJcbmNsYXNzIFN0cmVhbWVyTGlzdE1lc3NhZ2VFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcclxuICAgICAgICBzdXBlcignc3RyZWFtZXJMaXN0TWVzc2FnZScpO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCB3aGVuIGEgc3Vic2NyaWJlZCB0byBzdHJlYW1lcidzIGlkIGNoYW5nZXMuXHJcbiAqL1xyXG5jbGFzcyBTdHJlYW1lcklEQ2hhbmdlZE1lc3NhZ2VFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcclxuICAgICAgICBzdXBlcignU3RyZWFtZXJJRENoYW5nZWRNZXNzYWdlJyk7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gcmVjZWl2aW5nIGxhdGVuY3kgdGVzdCByZXN1bHRzLlxyXG4gKi9cclxuY2xhc3MgTGF0ZW5jeVRlc3RSZXN1bHRFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcclxuICAgICAgICBzdXBlcignbGF0ZW5jeVRlc3RSZXN1bHQnKTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiByZWNlaXZpbmcgZGF0YSBjaGFubmVsIGxhdGVuY3kgdGVzdCByZXNwb25zZSBmcm9tIHNlcnZlci5cclxuICogVGhpcyBldmVudCBpcyBoYW5kbGVkIGJ5IERhdGFDaGFubmVsTGF0ZW5jeVRlc3RDb250cm9sbGVyXHJcbiAqL1xyXG5jbGFzcyBEYXRhQ2hhbm5lbExhdGVuY3lUZXN0UmVzcG9uc2VFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcclxuICAgICAgICBzdXBlcignZGF0YUNoYW5uZWxMYXRlbmN5VGVzdFJlc3BvbnNlJyk7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gZGF0YSBjaGFubmVsIGxhdGVuY3kgdGVzdCByZXN1bHRzIGFyZSByZWFkeS5cclxuICovXHJcbmNsYXNzIERhdGFDaGFubmVsTGF0ZW5jeVRlc3RSZXN1bHRFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcclxuICAgICAgICBzdXBlcignZGF0YUNoYW5uZWxMYXRlbmN5VGVzdFJlc3VsdCcpO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCB3aGVuIHJlY2VpdmluZyBpbml0aWFsIHNldHRpbmdzIGZyb20gVUUuXHJcbiAqL1xyXG5jbGFzcyBJbml0aWFsU2V0dGluZ3NFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcclxuICAgICAgICBzdXBlcignaW5pdGlhbFNldHRpbmdzJyk7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gUGl4ZWxTdHJlYW1pbmcgc2V0dGluZ3MgY2hhbmdlLlxyXG4gKi9cclxuY2xhc3MgU2V0dGluZ3NDaGFuZ2VkRXZlbnQgZXh0ZW5kcyBFdmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoJ3NldHRpbmdzQ2hhbmdlZCcpO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEV2ZW50IGVtaXR0ZWQgd2hlbiBhbiBYUiBTZXNzaW9uIHN0YXJ0c1xyXG4gKi9cclxuY2xhc3MgWHJTZXNzaW9uU3RhcnRlZEV2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoJ3hyU2Vzc2lvblN0YXJ0ZWQnKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogRXZlbnQgZW1pdHRlZCB3aGVuIGFuIFhSIFNlc3Npb24gZW5kc1xyXG4gKi9cclxuY2xhc3MgWHJTZXNzaW9uRW5kZWRFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCd4clNlc3Npb25FbmRlZCcpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBFdmVudCBlbWl0dGVkIHdoZW4gYW4gWFIgRnJhbWUgaXMgY29tcGxldGVcclxuICovXHJcbmNsYXNzIFhyRnJhbWVFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcclxuICAgICAgICBzdXBlcigneHJGcmFtZScpO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCB3aGVuIHJlY2VpdmluZyBhIHBsYXllciBjb3VudCBmcm9tIHRoZSBzaWduYWxsaW5nIHNlcnZlclxyXG4gKi9cclxuY2xhc3MgUGxheWVyQ291bnRFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcclxuICAgICAgICBzdXBlcigncGxheWVyQ291bnQnKTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiB0aGUgd2ViUlRDIGNvbm5lY3Rpb25zIGlzIHJlbGF5ZWQgb3ZlciBUQ1AuXHJcbiAqL1xyXG5jbGFzcyBXZWJSdGNUQ1BSZWxheURldGVjdGVkRXZlbnQgZXh0ZW5kcyBFdmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcignd2ViUnRjVENQUmVsYXlEZXRlY3RlZCcpO1xyXG4gICAgfVxyXG59XHJcbmNsYXNzIEV2ZW50RW1pdHRlciBleHRlbmRzIEV2ZW50VGFyZ2V0IHtcclxuICAgIC8qKlxyXG4gICAgICogRGlzcGF0Y2ggYSBuZXcgZXZlbnQuXHJcbiAgICAgKiBAcGFyYW0gZSBldmVudFxyXG4gICAgICogQHJldHVybnNcclxuICAgICAqL1xyXG4gICAgZGlzcGF0Y2hFdmVudChlKSB7XHJcbiAgICAgICAgcmV0dXJuIHN1cGVyLmRpc3BhdGNoRXZlbnQoZSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlZ2lzdGVyIGFuIGV2ZW50IGhhbmRsZXIuXHJcbiAgICAgKiBAcGFyYW0gdHlwZSBldmVudCBuYW1lXHJcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXIgZXZlbnQgaGFuZGxlciBmdW5jdGlvblxyXG4gICAgICovXHJcbiAgICBhZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XHJcbiAgICAgICAgc3VwZXIuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZSBhbiBldmVudCBoYW5kbGVyLlxyXG4gICAgICogQHBhcmFtIHR5cGUgZXZlbnQgbmFtZVxyXG4gICAgICogQHBhcmFtIGxpc3RlbmVyIGV2ZW50IGhhbmRsZXIgZnVuY3Rpb25cclxuICAgICAqL1xyXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xyXG4gICAgICAgIHN1cGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpO1xyXG4gICAgfVxyXG59XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9VdGlsL0V2ZW50TGlzdGVuZXJUcmFja2VyLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvVXRpbC9FdmVudExpc3RlbmVyVHJhY2tlci50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkV2ZW50TGlzdGVuZXJUcmFja2VyXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIEV2ZW50TGlzdGVuZXJUcmFja2VyKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5jbGFzcyBFdmVudExpc3RlbmVyVHJhY2tlciB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLnVucmVnaXN0ZXJDYWxsYmFja3MgPSBbXTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkIGEgbmV3IGNhbGxiYWNrIHRoYXQgaXMgZXhlY3V0ZWQgd2hlbiB1bnJlZ2lzdGVyQWxsIGlzIGNhbGxlZC5cclxuICAgICAqIEBwYXJhbSBjYWxsYmFja1xyXG4gICAgICovXHJcbiAgICBhZGRVbnJlZ2lzdGVyQ2FsbGJhY2soY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLnVucmVnaXN0ZXJDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEV4ZWN1dGUgYWxsIGNhbGxiYWNrcyBhbmQgY2xlYXIgdGhlIGxpc3QuXHJcbiAgICAgKi9cclxuICAgIHVucmVnaXN0ZXJBbGwoKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBjYWxsYmFjayBvZiB0aGlzLnVucmVnaXN0ZXJDYWxsYmFja3MpIHtcclxuICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy51bnJlZ2lzdGVyQ2FsbGJhY2tzID0gW107XHJcbiAgICB9XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL1V0aWwvRmlsZVV0aWwudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9VdGlsL0ZpbGVVdGlsLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiRmlsZVRlbXBsYXRlXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIEZpbGVUZW1wbGF0ZSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiRmlsZVV0aWxcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gRmlsZVV0aWwpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vTG9nZ2VyL0xvZ2dlciAqLyBcIi4vc3JjL0xvZ2dlci9Mb2dnZXIudHNcIik7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuLyoqXHJcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHBvcHVsYXRlIGZpbGUgaW5mb3JtYXRpb24gZnJvbSBieXRlIGJ1ZmZlcnMuXHJcbiAqL1xyXG5jbGFzcyBGaWxlVXRpbCB7XHJcbiAgICAvKipcclxuICAgICAqIFByb2Nlc3NlcyBhIGZpbGVzIGV4dGVuc2lvbiB3aGVuIHJlY2VpdmVkIG92ZXIgZGF0YSBjaGFubmVsXHJcbiAgICAgKiBAcGFyYW0gdmlldyAtIHRoZSBmaWxlIGV4dGVuc2lvbiBkYXRhXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBzZXRFeHRlbnNpb25Gcm9tQnl0ZXModmlldywgZmlsZSkge1xyXG4gICAgICAgIC8vIFJlc2V0IGZpbGUgaWYgd2UgZ290IGEgZmlsZSBtZXNzYWdlIGFuZCB3ZSBhcmUgbm90IFwicmVjZWl2aW5nXCIgaXQgeWV0XHJcbiAgICAgICAgaWYgKCFmaWxlLnJlY2VpdmluZykge1xyXG4gICAgICAgICAgICBmaWxlLm1pbWV0eXBlID0gJyc7XHJcbiAgICAgICAgICAgIGZpbGUuZXh0ZW5zaW9uID0gJyc7XHJcbiAgICAgICAgICAgIGZpbGUucmVjZWl2aW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgZmlsZS52YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBmaWxlLnNpemUgPSAwO1xyXG4gICAgICAgICAgICBmaWxlLmRhdGEgPSBbXTtcclxuICAgICAgICAgICAgZmlsZS50aW1lc3RhbXBTdGFydCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnUmVjZWl2ZWQgZmlyc3QgY2h1bmsgb2YgZmlsZScsIDYpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBleHRlbnNpb25Bc1N0cmluZyA9IG5ldyBUZXh0RGVjb2RlcigndXRmLTE2JykuZGVjb2RlKHZpZXcuc2xpY2UoMSkpO1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGV4dGVuc2lvbkFzU3RyaW5nLCA2KTtcclxuICAgICAgICBmaWxlLmV4dGVuc2lvbiA9IGV4dGVuc2lvbkFzU3RyaW5nO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9jZXNzZXMgYSBmaWxlcyBtaW1lIHR5cGUgd2hlbiByZWNlaXZlZCBvdmVyIGRhdGEgY2hhbm5lbFxyXG4gICAgICogQHBhcmFtIHZpZXcgLSB0aGUgZmlsZSBtaW1lIHR5cGUgZGF0YVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgc2V0TWltZVR5cGVGcm9tQnl0ZXModmlldywgZmlsZSkge1xyXG4gICAgICAgIC8vIFJlc2V0IGZpbGUgaWYgd2UgZ290IGEgZmlsZSBtZXNzYWdlIGFuZCB3ZSBhcmUgbm90IFwicmVjZWl2aW5nXCIgaXQgeWV0XHJcbiAgICAgICAgaWYgKCFmaWxlLnJlY2VpdmluZykge1xyXG4gICAgICAgICAgICBmaWxlLm1pbWV0eXBlID0gJyc7XHJcbiAgICAgICAgICAgIGZpbGUuZXh0ZW5zaW9uID0gJyc7XHJcbiAgICAgICAgICAgIGZpbGUucmVjZWl2aW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgZmlsZS52YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBmaWxlLnNpemUgPSAwO1xyXG4gICAgICAgICAgICBmaWxlLmRhdGEgPSBbXTtcclxuICAgICAgICAgICAgZmlsZS50aW1lc3RhbXBTdGFydCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnUmVjZWl2ZWQgZmlyc3QgY2h1bmsgb2YgZmlsZScsIDYpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBtaW1lQXNTdHJpbmcgPSBuZXcgVGV4dERlY29kZXIoJ3V0Zi0xNicpLmRlY29kZSh2aWV3LnNsaWNlKDEpKTtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBtaW1lQXNTdHJpbmcsIDYpO1xyXG4gICAgICAgIGZpbGUubWltZXR5cGUgPSBtaW1lQXNTdHJpbmc7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFByb2Nlc3NlcyBhIGZpbGVzIGNvbnRlbnRzIHdoZW4gcmVjZWl2ZWQgb3ZlciBkYXRhIGNoYW5uZWxcclxuICAgICAqIEBwYXJhbSB2aWV3IC0gdGhlIGZpbGUgY29udGVudHMgZGF0YVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgc2V0Q29udGVudHNGcm9tQnl0ZXModmlldywgZmlsZSkge1xyXG4gICAgICAgIC8vIElmIHdlIGhhdmVuJ3QgcmVjZWl2ZWQgdGhlIGluaXRpYWwgc2V0dXAgaW5zdHJ1Y3Rpb25zLCByZXR1cm5cclxuICAgICAgICBpZiAoIWZpbGUucmVjZWl2aW5nKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgLy8gRXh0cmFjdCB0aGUgdG90YWwgc2l6ZSBvZiB0aGUgZmlsZSAoYWNyb3NzIGFsbCBjaHVua3MpXHJcbiAgICAgICAgZmlsZS5zaXplID0gTWF0aC5jZWlsKG5ldyBEYXRhVmlldyh2aWV3LnNsaWNlKDEsIDUpLmJ1ZmZlcikuZ2V0SW50MzIoMCwgdHJ1ZSkgL1xyXG4gICAgICAgICAgICAxNjM3OSAvKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgcGF5bG9hZCBiaXRzIHBlciBtZXNzYWdlKi8pO1xyXG4gICAgICAgIC8vIEdldCB0aGUgZmlsZSBwYXJ0IG9mIHRoZSBwYXlsb2FkXHJcbiAgICAgICAgY29uc3QgZmlsZUJ5dGVzID0gdmlldy5zbGljZSgxICsgNCk7XHJcbiAgICAgICAgLy8gQXBwZW5kIHRvIGV4aXN0aW5nIGRhdGEgdGhhdCBob2xkcyB0aGUgZmlsZVxyXG4gICAgICAgIGZpbGUuZGF0YS5wdXNoKGZpbGVCeXRlcyk7XHJcbiAgICAgICAgLy8gVW5jb21tZW50IGZvciBkZWJ1Z1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBSZWNlaXZlZCBmaWxlIGNodW5rOiAke2ZpbGUuZGF0YS5sZW5ndGh9LyR7ZmlsZS5zaXplfWAsIDYpO1xyXG4gICAgICAgIGlmIChmaWxlLmRhdGEubGVuZ3RoID09PSBmaWxlLnNpemUpIHtcclxuICAgICAgICAgICAgZmlsZS5yZWNlaXZpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgZmlsZS52YWxpZCA9IHRydWU7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdSZWNlaXZlZCBjb21wbGV0ZSBmaWxlJywgNik7XHJcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zZmVyRHVyYXRpb24gPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIGZpbGUudGltZXN0YW1wU3RhcnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zZmVyQml0cmF0ZSA9IE1hdGgucm91bmQoKGZpbGUuc2l6ZSAqIDE2ICogMTAyNCkgLyB0cmFuc2ZlckR1cmF0aW9uKTtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYEF2ZXJhZ2UgdHJhbnNmZXIgYml0cmF0ZTogJHt0cmFuc2ZlckJpdHJhdGV9a2IvcyBvdmVyICR7dHJhbnNmZXJEdXJhdGlvbiAvIDEwMDB9IHNlY29uZHNgLCA2KTtcclxuICAgICAgICAgICAgLy8gRmlsZSByZWNvbnN0cnVjdGlvblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogRXhhbXBsZSBjb2RlIHRvIHJlY29uc3RydWN0IHRoZSBmaWxlXHJcbiAgICAgICAgICAgICAqXHJcbiAgICAgICAgICAgICAqIFRoaXMgY29kZSByZWNvbnN0cnVjdHMgdGhlIHJlY2VpdmVkIGRhdGEgaW50byB0aGUgb3JpZ2luYWwgZmlsZSBiYXNlZCBvbiB0aGUgbWltZSB0eXBlIGFuZCBleHRlbnNpb24gcHJvdmlkZWQgYW5kIHRoZW4gZG93bmxvYWRzIHRoZSByZWNvbnN0cnVjdGVkIGZpbGVcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGNvbnN0IHJlY2VpdmVkID0gbmV3IEJsb2IoZmlsZS5kYXRhLCB7IHR5cGU6IGZpbGUubWltZXR5cGUgfSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XHJcbiAgICAgICAgICAgIGEuc2V0QXR0cmlidXRlKCdocmVmJywgVVJMLmNyZWF0ZU9iamVjdFVSTChyZWNlaXZlZCkpO1xyXG4gICAgICAgICAgICBhLnNldEF0dHJpYnV0ZSgnZG93bmxvYWQnLCBgdHJhbnNmZXIuJHtmaWxlLmV4dGVuc2lvbn1gKTtcclxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmQoYSk7XHJcbiAgICAgICAgICAgIC8vIGlmIHlvdSBhcmUgc28gaW5jbGluZWQgdG8gbWFrZSBpdCBhdXRvLWRvd25sb2FkLCBkbyBzb21ldGhpbmcgbGlrZTogYS5jbGljaygpO1xyXG4gICAgICAgICAgICBhLnJlbW92ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChmaWxlLmRhdGEubGVuZ3RoID4gZmlsZS5zaXplKSB7XHJcbiAgICAgICAgICAgIGZpbGUucmVjZWl2aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkVycm9yKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYFJlY2VpdmVkIGJpZ2dlciBmaWxlIHRoYW4gYWR2ZXJ0aXNlZDogJHtmaWxlLmRhdGEubGVuZ3RofS8ke2ZpbGUuc2l6ZX1gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEEgY2xhc3MgdGhhdCByZXByZXNlbnRzIGEgdGVtcGxhdGUgZm9yIGEgZG93bmxvYWRlZCBmaWxlXHJcbiAqL1xyXG5jbGFzcyBGaWxlVGVtcGxhdGUge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5taW1ldHlwZSA9ICcnO1xyXG4gICAgICAgIHRoaXMuZXh0ZW5zaW9uID0gJyc7XHJcbiAgICAgICAgdGhpcy5yZWNlaXZpbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnNpemUgPSAwO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IFtdO1xyXG4gICAgICAgIHRoaXMudmFsaWQgPSBmYWxzZTtcclxuICAgIH1cclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvVXRpbC9SVENVdGlscy50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL1V0aWwvUlRDVXRpbHMudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJSVENVdGlsc1wiOiAoKSA9PiAoLyogYmluZGluZyAqLyBSVENVdGlscylcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuY2xhc3MgUlRDVXRpbHMge1xyXG4gICAgc3RhdGljIGlzVmlkZW9UcmFuc2NpZXZlcih0cmFuc2NlaXZlcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNhblRyYW5zY2VpdmVyUmVjZWl2ZVZpZGVvKHRyYW5zY2VpdmVyKSB8fCB0aGlzLmNhblRyYW5zY2VpdmVyU2VuZFZpZGVvKHRyYW5zY2VpdmVyKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBjYW5UcmFuc2NlaXZlclJlY2VpdmVWaWRlbyh0cmFuc2NlaXZlcikge1xyXG4gICAgICAgIHJldHVybiAhIXRyYW5zY2VpdmVyICYmXHJcbiAgICAgICAgICAgICh0cmFuc2NlaXZlci5kaXJlY3Rpb24gPT09ICdzZW5kcmVjdicgfHwgdHJhbnNjZWl2ZXIuZGlyZWN0aW9uID09PSAncmVjdm9ubHknKSAmJlxyXG4gICAgICAgICAgICB0cmFuc2NlaXZlci5yZWNlaXZlciAmJlxyXG4gICAgICAgICAgICB0cmFuc2NlaXZlci5yZWNlaXZlci50cmFjayAmJlxyXG4gICAgICAgICAgICB0cmFuc2NlaXZlci5yZWNlaXZlci50cmFjay5raW5kID09PSAndmlkZW8nO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGNhblRyYW5zY2VpdmVyU2VuZFZpZGVvKHRyYW5zY2VpdmVyKSB7XHJcbiAgICAgICAgcmV0dXJuICEhdHJhbnNjZWl2ZXIgJiZcclxuICAgICAgICAgICAgKHRyYW5zY2VpdmVyLmRpcmVjdGlvbiA9PT0gJ3NlbmRyZWN2JyB8fCB0cmFuc2NlaXZlci5kaXJlY3Rpb24gPT09ICdzZW5kb25seScpICYmXHJcbiAgICAgICAgICAgIHRyYW5zY2VpdmVyLnNlbmRlciAmJlxyXG4gICAgICAgICAgICB0cmFuc2NlaXZlci5zZW5kZXIudHJhY2sgJiZcclxuICAgICAgICAgICAgdHJhbnNjZWl2ZXIuc2VuZGVyLnRyYWNrLmtpbmQgPT09ICd2aWRlbyc7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgaXNBdWRpb1RyYW5zY2lldmVyKHRyYW5zY2VpdmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FuVHJhbnNjZWl2ZXJSZWNlaXZlQXVkaW8odHJhbnNjZWl2ZXIpIHx8IHRoaXMuY2FuVHJhbnNjZWl2ZXJTZW5kQXVkaW8odHJhbnNjZWl2ZXIpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGNhblRyYW5zY2VpdmVyUmVjZWl2ZUF1ZGlvKHRyYW5zY2VpdmVyKSB7XHJcbiAgICAgICAgcmV0dXJuICEhdHJhbnNjZWl2ZXIgJiZcclxuICAgICAgICAgICAgKHRyYW5zY2VpdmVyLmRpcmVjdGlvbiA9PT0gJ3NlbmRyZWN2JyB8fCB0cmFuc2NlaXZlci5kaXJlY3Rpb24gPT09ICdyZWN2b25seScpICYmXHJcbiAgICAgICAgICAgIHRyYW5zY2VpdmVyLnJlY2VpdmVyICYmXHJcbiAgICAgICAgICAgIHRyYW5zY2VpdmVyLnJlY2VpdmVyLnRyYWNrICYmXHJcbiAgICAgICAgICAgIHRyYW5zY2VpdmVyLnJlY2VpdmVyLnRyYWNrLmtpbmQgPT09ICdhdWRpbyc7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgY2FuVHJhbnNjZWl2ZXJTZW5kQXVkaW8odHJhbnNjZWl2ZXIpIHtcclxuICAgICAgICByZXR1cm4gISF0cmFuc2NlaXZlciAmJlxyXG4gICAgICAgICAgICAodHJhbnNjZWl2ZXIuZGlyZWN0aW9uID09PSAnc2VuZHJlY3YnIHx8IHRyYW5zY2VpdmVyLmRpcmVjdGlvbiA9PT0gJ3NlbmRvbmx5JykgJiZcclxuICAgICAgICAgICAgdHJhbnNjZWl2ZXIuc2VuZGVyICYmXHJcbiAgICAgICAgICAgIHRyYW5zY2VpdmVyLnNlbmRlci50cmFjayAmJlxyXG4gICAgICAgICAgICB0cmFuc2NlaXZlci5zZW5kZXIudHJhY2sua2luZCA9PT0gJ2F1ZGlvJztcclxuICAgIH1cclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvVmlkZW9QbGF5ZXIvU3RyZWFtQ29udHJvbGxlci50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL1ZpZGVvUGxheWVyL1N0cmVhbUNvbnRyb2xsZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJTdHJlYW1Db250cm9sbGVyXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFN0cmVhbUNvbnRyb2xsZXIpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vTG9nZ2VyL0xvZ2dlciAqLyBcIi4vc3JjL0xvZ2dlci9Mb2dnZXIudHNcIik7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuLyoqXHJcbiAqIFZpZGVvIFBsYXllciBDb250cm9sbGVyIGhhbmRsZXMgdGhlIGNyZWF0aW9uIG9mIHRoZSB2aWRlbyBIVE1MIGVsZW1lbnQgYW5kIGFsbCBoYW5kbGVyc1xyXG4gKi9cclxuY2xhc3MgU3RyZWFtQ29udHJvbGxlciB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB2aWRlb0VsZW1lbnRQcm92aWRlciBWaWRlbyBQbGF5ZXIgaW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodmlkZW9FbGVtZW50UHJvdmlkZXIpIHtcclxuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyID0gdmlkZW9FbGVtZW50UHJvdmlkZXI7XHJcbiAgICAgICAgdGhpcy5hdWRpb0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdBdWRpbycpO1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuc2V0QXVkaW9FbGVtZW50KHRoaXMuYXVkaW9FbGVtZW50KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB3aGVuIHRoZSBQZWVyIGNvbm5lY3Rpb24gaGFzIGEgdHJhY2sgZXZlbnRcclxuICAgICAqIEBwYXJhbSBydGNUcmFja0V2ZW50IC0gUlRDIFRyYWNrIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZU9uVHJhY2socnRjVHJhY2tFdmVudCkge1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdoYW5kbGVPblRyYWNrICcgKyBKU09OLnN0cmluZ2lmeShydGNUcmFja0V2ZW50LnN0cmVhbXMpLCA2KTtcclxuICAgICAgICAvLyBEbyBub3QgYWRkIHRoZSB0cmFjayBpZiB0aGUgSUQgaXMgYHByb2JhdG9yYCBhcyB0aGlzIGlzIHNwZWNpYWwgdHJhY2sgY3JlYXRlZCBieSBtZWRpYXNvdXAgZm9yIGJpdHJhdGUgcHJvYmluZy5cclxuICAgICAgICAvLyBSZWZlciB0byBodHRwczovL2dpdGh1Yi5jb20vRXBpY0dhbWVzRXh0L1BpeGVsU3RyZWFtaW5nSW5mcmFzdHJ1Y3R1cmUvcHVsbC84NiBmb3IgbW9yZSBkZXRhaWxzLlxyXG4gICAgICAgIGlmIChydGNUcmFja0V2ZW50LnRyYWNrLmlkID09ICdwcm9iYXRvcicpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB2aWRlb0VsZW1lbnQgPSB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmdldFZpZGVvRWxlbWVudCgpO1xyXG4gICAgICAgIGlmIChydGNUcmFja0V2ZW50LnRyYWNrKSB7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdHb3QgdHJhY2sgLSAnICtcclxuICAgICAgICAgICAgICAgIHJ0Y1RyYWNrRXZlbnQudHJhY2sua2luZCArXHJcbiAgICAgICAgICAgICAgICAnIGlkPScgK1xyXG4gICAgICAgICAgICAgICAgcnRjVHJhY2tFdmVudC50cmFjay5pZCArXHJcbiAgICAgICAgICAgICAgICAnIHJlYWR5U3RhdGU9JyArXHJcbiAgICAgICAgICAgICAgICBydGNUcmFja0V2ZW50LnRyYWNrLnJlYWR5U3RhdGUsIDYpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocnRjVHJhY2tFdmVudC50cmFjay5raW5kID09ICdhdWRpbycpIHtcclxuICAgICAgICAgICAgdGhpcy5DcmVhdGVBdWRpb1RyYWNrKHJ0Y1RyYWNrRXZlbnQuc3RyZWFtc1swXSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocnRjVHJhY2tFdmVudC50cmFjay5raW5kID09ICd2aWRlbycgJiZcclxuICAgICAgICAgICAgdmlkZW9FbGVtZW50LnNyY09iamVjdCAhPT0gcnRjVHJhY2tFdmVudC5zdHJlYW1zWzBdKSB7XHJcbiAgICAgICAgICAgIHZpZGVvRWxlbWVudC5zcmNPYmplY3QgPSBydGNUcmFja0V2ZW50LnN0cmVhbXNbMF07XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdTZXQgdmlkZW8gc291cmNlIGZyb20gdmlkZW8gdHJhY2sgb250cmFjay4nKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyB0aGUgYXVkaW8gZGV2aWNlIHdoZW4gcmVjZWl2aW5nIGFuIFJUQ1RyYWNrRXZlbnQgd2l0aCB0aGUga2luZCBvZiBcImF1ZGlvXCJcclxuICAgICAqIEBwYXJhbSBhdWRpb01lZGlhU3RyZWFtIC0gQXVkaW8gTWVkaWEgc3RyZWFtIHRyYWNrXHJcbiAgICAgKi9cclxuICAgIENyZWF0ZUF1ZGlvVHJhY2soYXVkaW9NZWRpYVN0cmVhbSkge1xyXG4gICAgICAgIGNvbnN0IHZpZGVvRWxlbWVudCA9IHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuZ2V0VmlkZW9FbGVtZW50KCk7XHJcbiAgICAgICAgLy8gZG8gbm90aGluZyB0aGUgdmlkZW8gaGFzIHRoZSBzYW1lIG1lZGlhIHN0cmVhbSBhcyB0aGUgYXVkaW8gdHJhY2sgd2UgaGF2ZSBoZXJlICh0aGV5IGFyZSBsaW5rZWQpXHJcbiAgICAgICAgaWYgKHZpZGVvRWxlbWVudC5zcmNPYmplY3QgPT0gYXVkaW9NZWRpYVN0cmVhbSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHZpZGVvIGVsZW1lbnQgaGFzIHNvbWUgb3RoZXIgbWVkaWEgc3RyZWFtIHRoYXQgaXMgbm90IGFzc29jaWF0ZWQgd2l0aCB0aGlzIGF1ZGlvIHRyYWNrXHJcbiAgICAgICAgZWxzZSBpZiAodmlkZW9FbGVtZW50LnNyY09iamVjdCAmJlxyXG4gICAgICAgICAgICB2aWRlb0VsZW1lbnQuc3JjT2JqZWN0ICE9PSBhdWRpb01lZGlhU3RyZWFtKSB7XHJcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBhIG5ldyBhdWRpbyBlbGVtZW50XHJcbiAgICAgICAgICAgIHRoaXMuYXVkaW9FbGVtZW50LnNyY09iamVjdCA9IGF1ZGlvTWVkaWFTdHJlYW07XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdDcmVhdGVkIG5ldyBhdWRpbyBlbGVtZW50IHRvIHBsYXkgc2VwYXJhdGUgYXVkaW8gc3RyZWFtLicpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvVmlkZW9QbGF5ZXIvVmlkZW9QbGF5ZXIudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvVmlkZW9QbGF5ZXIvVmlkZW9QbGF5ZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiVmlkZW9QbGF5ZXJcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gVmlkZW9QbGF5ZXIpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vQ29uZmlnL0NvbmZpZyAqLyBcIi4vc3JjL0NvbmZpZy9Db25maWcudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL0xvZ2dlci9Mb2dnZXIgKi8gXCIuL3NyYy9Mb2dnZXIvTG9nZ2VyLnRzXCIpO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcblxyXG4vKipcclxuICogVGhlIHZpZGVvIHBsYXllciBodG1sIGVsZW1lbnRcclxuICovXHJcbmNsYXNzIFZpZGVvUGxheWVyIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHZpZGVvRWxlbWVudFBhcmVudCB0aGUgaHRtbCBkaXYgdGhlIHRoZSB2aWRlbyBwbGF5ZXIgd2lsbCBiZSBpbmplY3RlZCBpbnRvXHJcbiAgICAgKiBAcGFyYW0gY29uZmlnIHRoZSBhcHBsaWNhdGlvbnMgY29uZmlndXJhdGlvbi4gV2UncmUgaW50ZXJlc3RlZCBpbiB0aGUgc3RhcnRWaWRlb011dGVkIGZsYWdcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodmlkZW9FbGVtZW50UGFyZW50LCBjb25maWcpIHtcclxuICAgICAgICB0aGlzLmxhc3RUaW1lUmVzaXplZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKTtcclxuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcclxuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC5pZCA9ICdzdHJlYW1pbmdWaWRlbyc7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQuZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50LnBsYXlzSW5saW5lID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC5zdHlsZS53aWR0aCA9ICcxMDAlJztcclxuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50LnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnYWxsJztcclxuICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnQuYXBwZW5kQ2hpbGQodGhpcy52aWRlb0VsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMub25SZXNpemVQbGF5ZXJDYWxsYmFjayA9ICgpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1Jlc29sdXRpb24gY2hhbmdlZCwgcmVzdHlsaW5nIHBsYXllciwgZGlkIHlvdSBmb3JnZXQgdG8gb3ZlcnJpZGUgdGhpcyBmdW5jdGlvbj8nKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMub25NYXRjaFZpZXdwb3J0UmVzb2x1dGlvbkNhbGxiYWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnUmVzb2x1dGlvbiBjaGFuZ2VkIGFuZCBtYXRjaCB2aWV3cG9ydCByZXNvbHV0aW9uIGlzIHR1cm5lZCBvbiwgZGlkIHlvdSBmb3JnZXQgdG8gb3ZlcnJpZGUgdGhpcyBmdW5jdGlvbj8nKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIHNldCBwbGF5IGZvciB2aWRlbyAoYW5kIGF1ZGlvKVxyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50Lm9uY2xpY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmF1ZGlvRWxlbWVudCAhPSB1bmRlZmluZWQgJiYgdGhpcy5hdWRpb0VsZW1lbnQucGF1c2VkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmF1ZGlvRWxlbWVudC5wbGF5KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMudmlkZW9FbGVtZW50LnBhdXNlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQucGxheSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC5vbmxvYWRlZG1ldGFkYXRhID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm9uVmlkZW9Jbml0aWFsaXplZCgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gc2V0IHJlc2l6ZSBldmVudHMgdG8gdGhlIHdpbmRvd3MgaWYgaXQgaXMgcmVzaXplZCBvciBpdHMgb3JpZW50YXRpb24gaXMgY2hhbmdlZFxyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoKSA9PiB0aGlzLnJlc2l6ZVBsYXllclN0eWxlKCksIHRydWUpO1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsICgpID0+IHRoaXMub25PcmllbnRhdGlvbkNoYW5nZSgpKTtcclxuICAgIH1cclxuICAgIHNldEF1ZGlvRWxlbWVudChhdWRpb0VsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLmF1ZGlvRWxlbWVudCA9IGF1ZGlvRWxlbWVudDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB1cCB0aGUgdmlkZW8gZWxlbWVudCB3aXRoIGFueSBhcHBsaWNhdGlvbiBjb25maWcgYW5kIHBsYXlzIHRoZSB2aWRlbyBlbGVtZW50LlxyXG4gICAgICogQHJldHVybnMgQSBwcm9taXNlIGZvciBpZiBwbGF5aW5nIHRoZSB2aWRlbyB3YXMgc3VjY2Vzc2Z1bCBvciBub3QuXHJcbiAgICAgKi9cclxuICAgIHBsYXkoKSB7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQubXV0ZWQgPSB0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uRmxhZ3MuU3RhcnRWaWRlb011dGVkKTtcclxuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC5hdXRvcGxheSA9IHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5GbGFncy5BdXRvUGxheVZpZGVvKTtcclxuICAgICAgICByZXR1cm4gdGhpcy52aWRlb0VsZW1lbnQucGxheSgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJucyBUcnVlIGlmIHRoZSB2aWRlbyBlbGVtZW50IGlzIHBhdXNlZC5cclxuICAgICAqL1xyXG4gICAgaXNQYXVzZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmlkZW9FbGVtZW50LnBhdXNlZDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybnMgLSB3aGV0aGVyIHRoZSB2aWRlbyBlbGVtZW50IGlzIHBsYXlpbmcuXHJcbiAgICAgKi9cclxuICAgIGlzVmlkZW9SZWFkeSgpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMudmlkZW9FbGVtZW50LnJlYWR5U3RhdGUgIT09IHVuZGVmaW5lZCAmJlxyXG4gICAgICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC5yZWFkeVN0YXRlID4gMCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHZpZGVvIGVsZW1lbnQgaGFzIGEgdmFsaWQgdmlkZW8gc291cmNlIChzcmNPYmplY3QpLlxyXG4gICAgICovXHJcbiAgICBoYXNWaWRlb1NvdXJjZSgpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMudmlkZW9FbGVtZW50LnNyY09iamVjdCAhPT0gdW5kZWZpbmVkICYmXHJcbiAgICAgICAgICAgIHRoaXMudmlkZW9FbGVtZW50LnNyY09iamVjdCAhPT0gbnVsbCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgY3VycmVudCBjb250ZXh0IG9mIHRoZSBodG1sIHZpZGVvIGVsZW1lbnRcclxuICAgICAqIEByZXR1cm5zIC0gdGhlIGN1cnJlbnQgY29udGV4dCBvZiB0aGUgdmlkZW8gZWxlbWVudFxyXG4gICAgICovXHJcbiAgICBnZXRWaWRlb0VsZW1lbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmlkZW9FbGVtZW50O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIGN1cnJlbnQgY29udGV4dCBvZiB0aGUgaHRtbCB2aWRlbyBlbGVtZW50cyBwYXJlbnRcclxuICAgICAqIEByZXR1cm5zIC0gdGhlIGN1cnJlbnQgY29udGV4dCBvZiB0aGUgdmlkZW8gZWxlbWVudHMgcGFyZW50XHJcbiAgICAgKi9cclxuICAgIGdldFZpZGVvUGFyZW50RWxlbWVudCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52aWRlb0VsZW1lbnQucGFyZW50RWxlbWVudDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRoZSBWaWRlbyBFbGVtZW50cyBzcmMgb2JqZWN0IHRyYWNrcyB0byBlbmFibGVcclxuICAgICAqIEBwYXJhbSBlbmFibGVkIC0gRW5hYmxlIFRyYWNrcyBvbiB0aGUgU3JjIE9iamVjdFxyXG4gICAgICovXHJcbiAgICBzZXRWaWRlb0VuYWJsZWQoZW5hYmxlZCkge1xyXG4gICAgICAgIC8vIHRoaXMgaXMgYSB0ZW1wb3JhcnkgaGFjayB1bnRpbCB0eXBlIHNjcmlwdHMgdmlkZW8gZWxlbWVudCBpcyB1cGRhdGVkIHRvIHJlZmxlY3QgdGhlIG5lZWQgZm9yIHRyYWNrcyBvbiBhIGh0bWwgdmlkZW8gZWxlbWVudFxyXG4gICAgICAgIGNvbnN0IHZpZGVvRWxlbWVudCA9IHRoaXMudmlkZW9FbGVtZW50O1xyXG4gICAgICAgIHZpZGVvRWxlbWVudC5zcmNPYmplY3RcclxuICAgICAgICAgICAgLmdldFRyYWNrcygpXHJcbiAgICAgICAgICAgIC5mb3JFYWNoKCh0cmFjaykgPT4gKHRyYWNrLmVuYWJsZWQgPSBlbmFibGVkKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFuIG92ZXJyaWRlIGZvciB3aGVuIHRoZSB2aWRlbyBoYXMgYmVlbiBpbml0aWFsaXplZCB3aXRoIGEgc3JjT2JqZWN0XHJcbiAgICAgKi9cclxuICAgIG9uVmlkZW9Jbml0aWFsaXplZCgpIHtcclxuICAgICAgICAvLyBEZWZhdWx0IEZ1bmN0aW9uYWxpdHk6IERvIE5vdGhpbmdcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogT24gdGhlIG9yaWVudGF0aW9uIGNoYW5nZSBvZiBhIHdpbmRvdyBjbGVhciB0aGUgdGltZW91dFxyXG4gICAgICovXHJcbiAgICBvbk9yaWVudGF0aW9uQ2hhbmdlKCkge1xyXG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLm9yaWVudGF0aW9uQ2hhbmdlVGltZW91dCk7XHJcbiAgICAgICAgdGhpcy5vcmllbnRhdGlvbkNoYW5nZVRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucmVzaXplUGxheWVyU3R5bGUoKTtcclxuICAgICAgICB9LCA1MDApO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXNpemVzIHRoZSBwbGF5ZXIgc3R5bGUgYmFzZWQgb24gdGhlIHdpbmRvdyBoZWlnaHQgYW5kIHdpZHRoXHJcbiAgICAgKiBAcmV0dXJucyAtIG5pbCBpZiByZXF1aXJlbWVudHMgYXJlIHNhdGlzZmllZFxyXG4gICAgICovXHJcbiAgICByZXNpemVQbGF5ZXJTdHlsZSgpIHtcclxuICAgICAgICBjb25zdCB2aWRlb0VsZW1lbnRQYXJlbnQgPSB0aGlzLmdldFZpZGVvUGFyZW50RWxlbWVudCgpO1xyXG4gICAgICAgIGlmICghdmlkZW9FbGVtZW50UGFyZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy51cGRhdGVWaWRlb1N0cmVhbVNpemUoKTtcclxuICAgICAgICBpZiAodmlkZW9FbGVtZW50UGFyZW50LmNsYXNzTGlzdC5jb250YWlucygnZml4ZWQtc2l6ZScpKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25SZXNpemVQbGF5ZXJDYWxsYmFjaygpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnRyb2xzIGZvciByZXNpemluZyB0aGUgcGxheWVyXHJcbiAgICAgICAgdGhpcy5yZXNpemVQbGF5ZXJTdHlsZVRvRmlsbFBhcmVudEVsZW1lbnQoKTtcclxuICAgICAgICB0aGlzLm9uUmVzaXplUGxheWVyQ2FsbGJhY2soKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVzaXplcyB0aGUgcGxheWVyIGVsZW1lbnQgdG8gZmlsbCB0aGUgcGFyZW50IGVsZW1lbnRcclxuICAgICAqL1xyXG4gICAgcmVzaXplUGxheWVyU3R5bGVUb0ZpbGxQYXJlbnRFbGVtZW50KCkge1xyXG4gICAgICAgIGNvbnN0IHZpZGVvRWxlbWVudFBhcmVudCA9IHRoaXMuZ2V0VmlkZW9QYXJlbnRFbGVtZW50KCk7XHJcbiAgICAgICAgLy9WaWRlbyBpcyBub3QgaW5pdGlhbGl6ZWQgeWV0IHNvIHNldCB2aWRlb0VsZW1lbnRQYXJlbnQgdG8gc2l6ZSBvZiBwYXJlbnQgZWxlbWVudFxyXG4gICAgICAgIGNvbnN0IHN0eWxlV2lkdGggPSAnMTAwJSc7XHJcbiAgICAgICAgY29uc3Qgc3R5bGVIZWlnaHQgPSAnMTAwJSc7XHJcbiAgICAgICAgY29uc3Qgc3R5bGVUb3AgPSAwO1xyXG4gICAgICAgIGNvbnN0IHN0eWxlTGVmdCA9IDA7XHJcbiAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAndG9wOiAnICtcclxuICAgICAgICAgICAgc3R5bGVUb3AgK1xyXG4gICAgICAgICAgICAncHg7IGxlZnQ6ICcgK1xyXG4gICAgICAgICAgICBzdHlsZUxlZnQgK1xyXG4gICAgICAgICAgICAncHg7IHdpZHRoOiAnICtcclxuICAgICAgICAgICAgc3R5bGVXaWR0aCArXHJcbiAgICAgICAgICAgICc7IGhlaWdodDogJyArXHJcbiAgICAgICAgICAgIHN0eWxlSGVpZ2h0ICtcclxuICAgICAgICAgICAgJzsgY3Vyc29yOiBkZWZhdWx0OycpO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlVmlkZW9TdHJlYW1TaXplKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkZsYWdzLk1hdGNoVmlld3BvcnRSZXNvbHV0aW9uKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgIGlmIChub3cgLSB0aGlzLmxhc3RUaW1lUmVzaXplZCA+IDMwMCkge1xyXG4gICAgICAgICAgICBjb25zdCB2aWRlb0VsZW1lbnRQYXJlbnQgPSB0aGlzLmdldFZpZGVvUGFyZW50RWxlbWVudCgpO1xyXG4gICAgICAgICAgICBpZiAoIXZpZGVvRWxlbWVudFBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMub25NYXRjaFZpZXdwb3J0UmVzb2x1dGlvbkNhbGxiYWNrKHZpZGVvRWxlbWVudFBhcmVudC5jbGllbnRXaWR0aCwgdmlkZW9FbGVtZW50UGFyZW50LmNsaWVudEhlaWdodCk7XHJcbiAgICAgICAgICAgIHRoaXMubGFzdFRpbWVSZXNpemVkID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnUmVzaXppbmcgdG9vIG9mdGVuIC0gc2tpcHBpbmcnLCA2KTtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucmVzaXplVGltZW91dEhhbmRsZSk7XHJcbiAgICAgICAgICAgIHRoaXMucmVzaXplVGltZW91dEhhbmRsZSA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHRoaXMudXBkYXRlVmlkZW9TdHJlYW1TaXplKCksIDEwMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9XZWJSdGNQbGF5ZXIvV2ViUnRjUGxheWVyQ29udHJvbGxlci50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9XZWJSdGNQbGF5ZXIvV2ViUnRjUGxheWVyQ29udHJvbGxlci50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJXZWJSdGNQbGF5ZXJDb250cm9sbGVyXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFdlYlJ0Y1BsYXllckNvbnRyb2xsZXIpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfV2ViU29ja2V0c19XZWJTb2NrZXRDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vV2ViU29ja2V0cy9XZWJTb2NrZXRDb250cm9sbGVyICovIFwiLi9zcmMvV2ViU29ja2V0cy9XZWJTb2NrZXRDb250cm9sbGVyLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9WaWRlb1BsYXllcl9TdHJlYW1Db250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9WaWRlb1BsYXllci9TdHJlYW1Db250cm9sbGVyICovIFwiLi9zcmMvVmlkZW9QbGF5ZXIvU3RyZWFtQ29udHJvbGxlci50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfRnJlZXplRnJhbWVfRnJlZXplRnJhbWVDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9GcmVlemVGcmFtZS9GcmVlemVGcmFtZUNvbnRyb2xsZXIgKi8gXCIuL3NyYy9GcmVlemVGcmFtZS9GcmVlemVGcmFtZUNvbnRyb2xsZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0FGS19BRktDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9BRksvQUZLQ29udHJvbGxlciAqLyBcIi4vc3JjL0FGSy9BRktDb250cm9sbGVyLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9EYXRhQ2hhbm5lbF9EYXRhQ2hhbm5lbENvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL0RhdGFDaGFubmVsL0RhdGFDaGFubmVsQ29udHJvbGxlciAqLyBcIi4vc3JjL0RhdGFDaGFubmVsL0RhdGFDaGFubmVsQ29udHJvbGxlci50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfUGVlckNvbm5lY3Rpb25Db250cm9sbGVyX1BlZXJDb25uZWN0aW9uQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTdfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIgKi8gXCIuL3NyYy9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vQ29uZmlnL0NvbmZpZyAqLyBcIi4vc3JjL0NvbmZpZy9Db25maWcudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0RhdGFDaGFubmVsX0luaXRpYWxTZXR0aW5nc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL0RhdGFDaGFubmVsL0luaXRpYWxTZXR0aW5ncyAqLyBcIi4vc3JjL0RhdGFDaGFubmVsL0luaXRpYWxTZXR0aW5ncy50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfRGF0YUNoYW5uZWxfTGF0ZW5jeVRlc3RSZXN1bHRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xOF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vRGF0YUNoYW5uZWwvTGF0ZW5jeVRlc3RSZXN1bHRzICovIFwiLi9zcmMvRGF0YUNoYW5uZWwvTGF0ZW5jeVRlc3RSZXN1bHRzLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vTG9nZ2VyL0xvZ2dlciAqLyBcIi4vc3JjL0xvZ2dlci9Mb2dnZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1V0aWxfRmlsZVV0aWxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL1V0aWwvRmlsZVV0aWwgKi8gXCIuL3NyYy9VdGlsL0ZpbGVVdGlsLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9JbnB1dHNfSW5wdXRDbGFzc2VzRmFjdG9yeV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL0lucHV0cy9JbnB1dENsYXNzZXNGYWN0b3J5ICovIFwiLi9zcmMvSW5wdXRzL0lucHV0Q2xhc3Nlc0ZhY3RvcnkudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1ZpZGVvUGxheWVyX1ZpZGVvUGxheWVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9WaWRlb1BsYXllci9WaWRlb1BsYXllciAqLyBcIi4vc3JjL1ZpZGVvUGxheWVyL1ZpZGVvUGxheWVyLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vVWVJbnN0YW5jZU1lc3NhZ2UvU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIgKi8gXCIuL3NyYy9VZUluc3RhbmNlTWVzc2FnZS9TdHJlYW1NZXNzYWdlQ29udHJvbGxlci50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfVWVJbnN0YW5jZU1lc3NhZ2VfUmVzcG9uc2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9VZUluc3RhbmNlTWVzc2FnZS9SZXNwb25zZUNvbnRyb2xsZXIgKi8gXCIuL3NyYy9VZUluc3RhbmNlTWVzc2FnZS9SZXNwb25zZUNvbnRyb2xsZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1VlSW5zdGFuY2VNZXNzYWdlX1NlbmRNZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL1VlSW5zdGFuY2VNZXNzYWdlL1NlbmRNZXNzYWdlQ29udHJvbGxlciAqLyBcIi4vc3JjL1VlSW5zdGFuY2VNZXNzYWdlL1NlbmRNZXNzYWdlQ29udHJvbGxlci50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfVWVJbnN0YW5jZU1lc3NhZ2VfVG9TdHJlYW1lck1lc3NhZ2VzQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL1VlSW5zdGFuY2VNZXNzYWdlL1RvU3RyZWFtZXJNZXNzYWdlc0NvbnRyb2xsZXIgKi8gXCIuL3NyYy9VZUluc3RhbmNlTWVzc2FnZS9Ub1N0cmVhbWVyTWVzc2FnZXNDb250cm9sbGVyLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9EYXRhQ2hhbm5lbF9EYXRhQ2hhbm5lbFNlbmRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vRGF0YUNoYW5uZWwvRGF0YUNoYW5uZWxTZW5kZXIgKi8gXCIuL3NyYy9EYXRhQ2hhbm5lbC9EYXRhQ2hhbm5lbFNlbmRlci50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfVXRpbF9Db29yZGluYXRlQ29udmVydGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9VdGlsL0Nvb3JkaW5hdGVDb252ZXJ0ZXIgKi8gXCIuL3NyYy9VdGlsL0Nvb3JkaW5hdGVDb252ZXJ0ZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vVXRpbC9FdmVudEVtaXR0ZXIgKi8gXCIuL3NyYy9VdGlsL0V2ZW50RW1pdHRlci50c1wiKTtcbi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEVudHJ5IHBvaW50IGZvciB0aGUgV2ViUlRDIFBsYXllclxyXG4gKi9cclxuY2xhc3MgV2ViUnRjUGxheWVyQ29udHJvbGxlciB7XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gY29uZmlnIC0gdGhlIGZyb250ZW5kIGNvbmZpZyBvYmplY3RcclxuICAgICAqIEBwYXJhbSBwaXhlbFN0cmVhbWluZyAtIHRoZSBQaXhlbFN0cmVhbWluZyBvYmplY3RcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoY29uZmlnLCBwaXhlbFN0cmVhbWluZykge1xyXG4gICAgICAgIHRoaXMuc2hvdWxkU2hvd1BsYXlPdmVybGF5ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmF1dG9Kb2luVGltZXIgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XHJcbiAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZyA9IHBpeGVsU3RyZWFtaW5nO1xyXG4gICAgICAgIHRoaXMucmVzcG9uc2VDb250cm9sbGVyID0gbmV3IF9VZUluc3RhbmNlTWVzc2FnZV9SZXNwb25zZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5SZXNwb25zZUNvbnRyb2xsZXIoKTtcclxuICAgICAgICB0aGlzLmZpbGUgPSBuZXcgX1V0aWxfRmlsZVV0aWxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5GaWxlVGVtcGxhdGUoKTtcclxuICAgICAgICB0aGlzLnNkcENvbnN0cmFpbnRzID0ge1xyXG4gICAgICAgICAgICBvZmZlclRvUmVjZWl2ZUF1ZGlvOiB0cnVlLFxyXG4gICAgICAgICAgICBvZmZlclRvUmVjZWl2ZVZpZGVvOiB0cnVlXHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyBzZXQgdXAgdGhlIGFmayBsb2dpYyBjbGFzcyBhbmQgY29ubmVjdCB1cCBpdHMgbWV0aG9kIGZvciBjbG9zaW5nIHRoZSBzaWduYWxpbmcgc2VydmVyXHJcbiAgICAgICAgdGhpcy5hZmtDb250cm9sbGVyID0gbmV3IF9BRktfQUZLQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLkFGS0NvbnRyb2xsZXIodGhpcy5jb25maWcsIHRoaXMucGl4ZWxTdHJlYW1pbmcsIHRoaXMub25BZmtUcmlnZ2VyZWQuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgdGhpcy5hZmtDb250cm9sbGVyLm9uQUZLVGltZWRPdXRDYWxsYmFjayA9ICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZVNpZ25hbGluZ1NlcnZlcignWW91IGhhdmUgYmVlbiBkaXNjb25uZWN0ZWQgZHVlIHRvIGluYWN0aXZpdHknKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZnJlZXplRnJhbWVDb250cm9sbGVyID0gbmV3IF9GcmVlemVGcmFtZV9GcmVlemVGcmFtZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXy5GcmVlemVGcmFtZUNvbnRyb2xsZXIodGhpcy5waXhlbFN0cmVhbWluZy52aWRlb0VsZW1lbnRQYXJlbnQpO1xyXG4gICAgICAgIHRoaXMudmlkZW9QbGF5ZXIgPSBuZXcgX1ZpZGVvUGxheWVyX1ZpZGVvUGxheWVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uVmlkZW9QbGF5ZXIodGhpcy5waXhlbFN0cmVhbWluZy52aWRlb0VsZW1lbnRQYXJlbnQsIHRoaXMuY29uZmlnKTtcclxuICAgICAgICB0aGlzLnZpZGVvUGxheWVyLm9uVmlkZW9Jbml0aWFsaXplZCA9ICgpID0+IHRoaXMuaGFuZGxlVmlkZW9Jbml0aWFsaXplZCgpO1xyXG4gICAgICAgIC8vIFdoZW4gaW4gbWF0Y2ggdmlld3BvcnQgcmVzb2x1dGlvbiBtb2RlLCB3aGVuIHRoZSBicm93c2VyIHZpZXdwb3J0IGlzIHJlc2l6ZWQgd2Ugc2VuZCBhIHJlc2l6ZSBjb21tYW5kIGJhY2sgdG8gVUUuXHJcbiAgICAgICAgdGhpcy52aWRlb1BsYXllci5vbk1hdGNoVmlld3BvcnRSZXNvbHV0aW9uQ2FsbGJhY2sgPSAod2lkdGgsIGhlaWdodCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBkZXNjcmlwdG9yID0ge1xyXG4gICAgICAgICAgICAgICAgJ1Jlc29sdXRpb24uV2lkdGgnOiB3aWR0aCxcclxuICAgICAgICAgICAgICAgICdSZXNvbHV0aW9uLkhlaWdodCc6IGhlaWdodFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ0NvbW1hbmQnKShbSlNPTi5zdHJpbmdpZnkoZGVzY3JpcHRvcildKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIEV2ZXJ5IHRpbWUgdmlkZW8gcGxheWVyIGlzIHJlc2l6ZWQgaW4gYnJvd3NlciB3ZSBuZWVkIHRvIHJlaW5pdGlhbGl6ZSB0aGUgbW91c2UgY29vcmRpbmF0ZSBjb252ZXJzaW9uIGFuZCBmcmVlemUgZnJhbWUgc2l6aW5nIGxvZ2ljLlxyXG4gICAgICAgIHRoaXMudmlkZW9QbGF5ZXIub25SZXNpemVQbGF5ZXJDYWxsYmFjayA9ICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zZXRVcE1vdXNlQW5kRnJlZXplRnJhbWUoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuc3RyZWFtQ29udHJvbGxlciA9IG5ldyBfVmlkZW9QbGF5ZXJfU3RyZWFtQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fLlN0cmVhbUNvbnRyb2xsZXIodGhpcy52aWRlb1BsYXllcik7XHJcbiAgICAgICAgdGhpcy5jb29yZGluYXRlQ29udmVydGVyID0gbmV3IF9VdGlsX0Nvb3JkaW5hdGVDb252ZXJ0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXy5Db29yZGluYXRlQ29udmVydGVyKHRoaXMudmlkZW9QbGF5ZXIpO1xyXG4gICAgICAgIHRoaXMuc2VuZHJlY3ZEYXRhQ2hhbm5lbENvbnRyb2xsZXIgPSBuZXcgX0RhdGFDaGFubmVsX0RhdGFDaGFubmVsQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fLkRhdGFDaGFubmVsQ29udHJvbGxlcigpO1xyXG4gICAgICAgIHRoaXMucmVjdkRhdGFDaGFubmVsQ29udHJvbGxlciA9IG5ldyBfRGF0YUNoYW5uZWxfRGF0YUNoYW5uZWxDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X18uRGF0YUNoYW5uZWxDb250cm9sbGVyKCk7XHJcbiAgICAgICAgdGhpcy5yZWdpc3RlckRhdGFDaGFubmVsRXZlbnRFbWl0dGVycyh0aGlzLnNlbmRyZWN2RGF0YUNoYW5uZWxDb250cm9sbGVyKTtcclxuICAgICAgICB0aGlzLnJlZ2lzdGVyRGF0YUNoYW5uZWxFdmVudEVtaXR0ZXJzKHRoaXMucmVjdkRhdGFDaGFubmVsQ29udHJvbGxlcik7XHJcbiAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbFNlbmRlciA9IG5ldyBfRGF0YUNoYW5uZWxfRGF0YUNoYW5uZWxTZW5kZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfXy5EYXRhQ2hhbm5lbFNlbmRlcih0aGlzLnNlbmRyZWN2RGF0YUNoYW5uZWxDb250cm9sbGVyKTtcclxuICAgICAgICB0aGlzLmRhdGFDaGFubmVsU2VuZGVyLnJlc2V0QWZrV2FybmluZ1RpbWVyT25EYXRhU2VuZCA9ICgpID0+IHRoaXMuYWZrQ29udHJvbGxlci5yZXNldEFma1dhcm5pbmdUaW1lcigpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIgPSBuZXcgX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIoKTtcclxuICAgICAgICAvLyBzZXQgdXAgd2Vic29ja2V0IG1ldGhvZHNcclxuICAgICAgICB0aGlzLndlYlNvY2tldENvbnRyb2xsZXIgPSBuZXcgX1dlYlNvY2tldHNfV2ViU29ja2V0Q29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTBfXy5XZWJTb2NrZXRDb250cm9sbGVyKCk7XHJcbiAgICAgICAgdGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLm9uQ29uZmlnID0gKG1lc3NhZ2VDb25maWcpID0+IHRoaXMuaGFuZGxlT25Db25maWdNZXNzYWdlKG1lc3NhZ2VDb25maWcpO1xyXG4gICAgICAgIHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5vblN0cmVhbWVyTGlzdCA9IChtZXNzYWdlTGlzdCkgPT4gdGhpcy5oYW5kbGVTdHJlYW1lckxpc3RNZXNzYWdlKG1lc3NhZ2VMaXN0KTtcclxuICAgICAgICB0aGlzLndlYlNvY2tldENvbnRyb2xsZXIub25TdHJlYW1lcklEQ2hhbmdlZCA9IChtZXNzYWdlKSA9PiB0aGlzLmhhbmRsZVN0cmVhbWVySURDaGFuZ2VkTWVzc2FnZShtZXNzYWdlKTtcclxuICAgICAgICB0aGlzLndlYlNvY2tldENvbnRyb2xsZXIub25QbGF5ZXJDb3VudCA9IChwbGF5ZXJDb3VudCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLl9vblBsYXllckNvdW50KHBsYXllckNvdW50LmNvdW50KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5vbk9wZW4uYWRkRXZlbnRMaXN0ZW5lcignb3BlbicsICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgQnJvd3NlclNlbmRzT2ZmZXIgPSB0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fLkZsYWdzLkJyb3dzZXJTZW5kT2ZmZXIpO1xyXG4gICAgICAgICAgICBpZiAoIUJyb3dzZXJTZW5kc09mZmVyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLndlYlNvY2tldENvbnRyb2xsZXIucmVxdWVzdFN0cmVhbWVyTGlzdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLm9uQ2xvc2UuYWRkRXZlbnRMaXN0ZW5lcignY2xvc2UnLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgLy8gd2hlbiB3ZSByZWZyZXNoIHRoZSBwYWdlIGR1cmluZyBhIHN0cmVhbSB3ZSBnZXQgdGhlIGdvaW5nIGF3YXkgY29kZS5cclxuICAgICAgICAgICAgLy8gaW4gdGhhdCBjYXNlIHdlIGRvbid0IHdhbnQgdG8gcmVjb25uZWN0IHNpbmNlIHdlJ3JlIG5hdmlnYXRpbmcgYXdheS5cclxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0Nsb3NlRXZlbnQvY29kZVxyXG4gICAgICAgICAgICAvLyBsaXN0cyBhbGwgdGhlIGNvZGVzLiBcclxuICAgICAgICAgICAgY29uc3QgQ09ERV9HT0lOR19BV0FZID0gMTAwMTtcclxuICAgICAgICAgICAgY29uc3Qgd2lsbFRyeVJlY29ubmVjdCA9IHRoaXMuc2hvdWxkUmVjb25uZWN0XHJcbiAgICAgICAgICAgICAgICAmJiBldmVudC5kZXRhaWwuY29kZSAhPSBDT0RFX0dPSU5HX0FXQVlcclxuICAgICAgICAgICAgICAgICYmIHRoaXMuY29uZmlnLmdldE51bWVyaWNTZXR0aW5nVmFsdWUoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18uTnVtZXJpY1BhcmFtZXRlcnMuTWF4UmVjb25uZWN0QXR0ZW1wdHMpID4gMDtcclxuICAgICAgICAgICAgY29uc3QgZGlzY29ubmVjdE1lc3NhZ2UgPSB0aGlzLmRpc2Nvbm5lY3RNZXNzYWdlID8gdGhpcy5kaXNjb25uZWN0TWVzc2FnZSA6IGV2ZW50LmRldGFpbC5yZWFzb247XHJcbiAgICAgICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuX29uRGlzY29ubmVjdChkaXNjb25uZWN0TWVzc2FnZSwgIXdpbGxUcnlSZWNvbm5lY3QgJiYgIXRoaXMuaXNSZWNvbm5lY3RpbmcpO1xyXG4gICAgICAgICAgICB0aGlzLmFma0NvbnRyb2xsZXIuc3RvcEFma1dhcm5pbmdUaW1lcigpO1xyXG4gICAgICAgICAgICAvLyBzdG9wIHNlbmRpbmcgc3RhdHMgb24gaW50ZXJ2YWwgaWYgd2UgaGF2ZSBjbG9zZWQgb3VyIGNvbm5lY3Rpb25cclxuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdHNUaW1lckhhbmRsZSAmJiB0aGlzLnN0YXRzVGltZXJIYW5kbGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy5zdGF0c1RpbWVySGFuZGxlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyByZXNldCB0aGUgc3RyZWFtIHF1YWxpdHkgaWNvbi5cclxuICAgICAgICAgICAgdGhpcy5zZXRWaWRlb0VuY29kZXJBdmdRUCgwKTtcclxuICAgICAgICAgICAgLy8gdW5yZWdpc3RlciBhbGwgaW5wdXQgZGV2aWNlIGV2ZW50IGhhbmRsZXJzIG9uIGRpc2Nvbm5lY3RcclxuICAgICAgICAgICAgdGhpcy5zZXRUb3VjaElucHV0RW5hYmxlZChmYWxzZSk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0TW91c2VJbnB1dEVuYWJsZWQoZmFsc2UpO1xyXG4gICAgICAgICAgICB0aGlzLnNldEtleWJvYXJkSW5wdXRFbmFibGVkKGZhbHNlKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRHYW1lUGFkSW5wdXRFbmFibGVkKGZhbHNlKTtcclxuICAgICAgICAgICAgaWYgKHdpbGxUcnlSZWNvbm5lY3QpIHtcclxuICAgICAgICAgICAgICAgIC8vIG5lZWQgYSBzbWFsbCBkZWxheSBoZXJlIHRvIHByZXZlbnQgcmVjb25uZWN0IHNwYW1taW5nXHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzUmVjb25uZWN0aW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY29ubmVjdEF0dGVtcHQrKztcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyeVJlY29ubmVjdChldmVudC5kZXRhaWwucmVhc29uKTtcclxuICAgICAgICAgICAgICAgIH0sIDIwMDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gc2V0IHVwIHRoZSBmaW5hbCB3ZWJSdGMgcGxheWVyIGNvbnRyb2xsZXIgbWV0aG9kcyBmcm9tIHdpdGhpbiBvdXIgYXBwbGljYXRpb24gc28gYSBjb25uZWN0aW9uIGNhbiBiZSBhY3RpdmF0ZWRcclxuICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlciA9IG5ldyBfVWVJbnN0YW5jZU1lc3NhZ2VfU2VuZE1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMl9fLlNlbmRNZXNzYWdlQ29udHJvbGxlcih0aGlzLmRhdGFDaGFubmVsU2VuZGVyLCB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyKTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc0NvbnRyb2xsZXIgPSBuZXcgX1VlSW5zdGFuY2VNZXNzYWdlX1RvU3RyZWFtZXJNZXNzYWdlc0NvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEzX18uVG9TdHJlYW1lck1lc3NhZ2VzQ29udHJvbGxlcih0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlcik7XHJcbiAgICAgICAgdGhpcy5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVycygpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucG9wdWxhdGVEZWZhdWx0UHJvdG9jb2woKTtcclxuICAgICAgICB0aGlzLmlucHV0Q2xhc3Nlc0ZhY3RvcnkgPSBuZXcgX0lucHV0c19JbnB1dENsYXNzZXNGYWN0b3J5X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNF9fLklucHV0Q2xhc3Nlc0ZhY3RvcnkodGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlciwgdGhpcy52aWRlb1BsYXllciwgdGhpcy5jb29yZGluYXRlQ29udmVydGVyKTtcclxuICAgICAgICB0aGlzLmlzVXNpbmdTRlUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmlzUXVhbGl0eUNvbnRyb2xsZXIgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnByZWZlcnJlZENvZGVjID0gJyc7XHJcbiAgICAgICAgdGhpcy5zaG91bGRSZWNvbm5lY3QgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuaXNSZWNvbm5lY3RpbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnJlY29ubmVjdEF0dGVtcHQgPSAwO1xyXG4gICAgICAgIHRoaXMuY29uZmlnLl9hZGRPbk9wdGlvblNldHRpbmdDaGFuZ2VkTGlzdGVuZXIoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18uT3B0aW9uUGFyYW1ldGVycy5TdHJlYW1lcklkLCAoc3RyZWFtZXJpZCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoc3RyZWFtZXJpZCA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGNsb3NlIHRoZSBjdXJyZW50IHBlZXIgY29ubmVjdGlvbiBhbmQgY3JlYXRlIGEgbmV3IG9uZVxyXG4gICAgICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5wZWVyQ29ubmVjdGlvbi5jbG9zZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5jcmVhdGVQZWVyQ29ubmVjdGlvbih0aGlzLnBlZXJDb25maWcsIHRoaXMucHJlZmVycmVkQ29kZWMpO1xyXG4gICAgICAgICAgICB0aGlzLnN1YnNjcmliZWRTdHJlYW0gPSBzdHJlYW1lcmlkO1xyXG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldENvbnRyb2xsZXIuc2VuZFN1YnNjcmliZShzdHJlYW1lcmlkKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnNldFZpZGVvRW5jb2RlckF2Z1FQKC0xKTtcclxuICAgICAgICB0aGlzLnNpZ25hbGxpbmdVcmxCdWlsZGVyID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgc2lnbmFsbGluZ1NlcnZlclVybCA9IHRoaXMuY29uZmlnLmdldFRleHRTZXR0aW5nVmFsdWUoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18uVGV4dFBhcmFtZXRlcnMuU2lnbmFsbGluZ1NlcnZlclVybCk7XHJcbiAgICAgICAgICAgIC8vIElmIHdlIGFyZSBjb25uZWN0aW5nIHRvIHRoZSBTRlUgYWRkIGEgc3BlY2lhbCB1cmwgcGFyYW1ldGVyIHRvIHRoZSB1cmxcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18uRmxhZ3MuQnJvd3NlclNlbmRPZmZlcikpIHtcclxuICAgICAgICAgICAgICAgIHNpZ25hbGxpbmdTZXJ2ZXJVcmwgKz0gJz8nICsgX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18uRmxhZ3MuQnJvd3NlclNlbmRPZmZlciArICc9dHJ1ZSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gVGhpcyBjb2RlIGlzIG5vIGxvbmdlciBuZWVkZWQsIGJ1dCBpcyBhIGdvb2QgZXhhbXBsZSBmb3IgaG93IHN1YnNlcXVlbnQgY29uZmlnIGZsYWdzIGNhbiBiZSBhcHBlbmRlZFxyXG4gICAgICAgICAgICAvLyBpZiAodGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChGbGFncy5Ccm93c2VyU2VuZE9mZmVyKSkge1xyXG4gICAgICAgICAgICAvLyAgICAgc2lnbmFsbGluZ1NlcnZlclVybCArPSAoc2lnbmFsbGluZ1NlcnZlclVybC5pbmNsdWRlcygnPycpID8gJyYnIDogJz8nKSArIEZsYWdzLkJyb3dzZXJTZW5kT2ZmZXIgKyAnPXRydWUnO1xyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgIHJldHVybiBzaWduYWxsaW5nU2VydmVyVXJsO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE1ha2UgYSByZXF1ZXN0IHRvIFVucXVhbnRpemVkQW5kRGVub3JtYWxpemVVbnNpZ25lZCBjb29yZGluYXRlc1xyXG4gICAgICogQHBhcmFtIHggeCBheGlzIGNvb3JkaW5hdGVcclxuICAgICAqIEBwYXJhbSB5IHkgYXhpcyBjb29yZGluYXRlXHJcbiAgICAgKi9cclxuICAgIHJlcXVlc3RVbnF1YW50aXplZEFuZERlbm9ybWFsaXplVW5zaWduZWQoeCwgeSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvb3JkaW5hdGVDb252ZXJ0ZXIudW5xdWFudGl6ZUFuZERlbm9ybWFsaXplVW5zaWduZWQoeCwgeSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgd2hlbiBhIG1lc3NhZ2UgaXMgcmVjZWl2ZWRcclxuICAgICAqIEBwYXJhbSBldmVudCAtIE1lc3NhZ2UgRXZlbnRcclxuICAgICAqL1xyXG4gICAgaGFuZGxlT25NZXNzYWdlKGV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IG5ldyBVaW50OEFycmF5KGV2ZW50LmRhdGEpO1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ01lc3NhZ2UgaW5jb21pbmc6JyArIG1lc3NhZ2UsIDYpO1xyXG4gICAgICAgIC8vdHJ5IHtcclxuICAgICAgICBjb25zdCBtZXNzYWdlVHlwZSA9IHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIuZnJvbVN0cmVhbWVyTWVzc2FnZXMuZ2V0KG1lc3NhZ2VbMF0pO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIuZnJvbVN0cmVhbWVySGFuZGxlcnMuZ2V0KG1lc3NhZ2VUeXBlKShldmVudC5kYXRhKTtcclxuICAgICAgICAvL30gY2F0Y2ggKGUpIHtcclxuICAgICAgICAvL0xvZ2dlci5FcnJvcihMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgQ3VzdG9tIGRhdGEgY2hhbm5lbCBtZXNzYWdlIHdpdGggbWVzc2FnZSB0eXBlIHRoYXQgaXMgdW5rbm93biB0byB0aGUgUGl4ZWwgU3RyZWFtaW5nIHByb3RvY29sLiBEb2VzIHlvdXIgUGl4ZWxTdHJlYW1pbmdQcm90b2NvbCBuZWVkIHVwZGF0aW5nPyBUaGUgbWVzc2FnZSB0eXBlIHdhczogJHttZXNzYWdlWzBdfWApO1xyXG4gICAgICAgIC8vfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWdpc3RlciBtZXNzYWdlIGFsbCBoYW5kbGVyc1xyXG4gICAgICovXHJcbiAgICByZWdpc3Rlck1lc3NhZ2VIYW5kbGVycygpIHtcclxuICAgICAgICAvLyBGcm9tIFN0cmVhbWVyXHJcbiAgICAgICAgLy8gTWVzc2FnZSBldmVudHMgZnJvbSB0aGUgc3RyZWFtZXIgaGF2ZSBhIGRhdGEgdHlwZSBvZiBBcnJheUJ1ZmZlciBhcyB3ZSBmb3JjZSB0aGlzIHR5cGUgaW4gdGhlIERhdGFjaGFubmVsQ29udHJvbGxlclxyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLkZyb21TdHJlYW1lciwgJ1F1YWxpdHlDb250cm9sT3duZXJzaGlwJywgKGRhdGEpID0+IHRoaXMub25RdWFsaXR5Q29udHJvbE93bmVyc2hpcChkYXRhKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uRnJvbVN0cmVhbWVyLCAnUmVzcG9uc2UnLCAoZGF0YSkgPT4gdGhpcy5yZXNwb25zZUNvbnRyb2xsZXIub25SZXNwb25zZShkYXRhKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uRnJvbVN0cmVhbWVyLCAnQ29tbWFuZCcsIChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMub25Db21tYW5kKGRhdGEpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLkZyb21TdHJlYW1lciwgJ0ZyZWV6ZUZyYW1lJywgKGRhdGEpID0+IHRoaXMub25GcmVlemVGcmFtZU1lc3NhZ2UoZGF0YSkpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLkZyb21TdHJlYW1lciwgJ1VuZnJlZXplRnJhbWUnLCAoKSA9PiB0aGlzLmludmFsaWRhdGVGcmVlemVGcmFtZUFuZEVuYWJsZVZpZGVvKCkpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLkZyb21TdHJlYW1lciwgJ1ZpZGVvRW5jb2RlckF2Z1FQJywgKGRhdGEpID0+IHRoaXMuaGFuZGxlVmlkZW9FbmNvZGVyQXZnUVAoZGF0YSkpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLkZyb21TdHJlYW1lciwgJ0xhdGVuY3lUZXN0JywgKGRhdGEpID0+IHRoaXMuaGFuZGxlTGF0ZW5jeVRlc3RSZXN1bHQoZGF0YSkpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLkZyb21TdHJlYW1lciwgJ0RhdGFDaGFubmVsTGF0ZW5jeVRlc3QnLCAoZGF0YSkgPT4gdGhpcy5oYW5kbGVEYXRhQ2hhbm5lbExhdGVuY3lUZXN0UmVzcG9uc2UoZGF0YSkpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLkZyb21TdHJlYW1lciwgJ0luaXRpYWxTZXR0aW5ncycsIChkYXRhKSA9PiB0aGlzLmhhbmRsZUluaXRpYWxTZXR0aW5ncyhkYXRhKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uRnJvbVN0cmVhbWVyLCAnRmlsZUV4dGVuc2lvbicsIChkYXRhKSA9PiB0aGlzLm9uRmlsZUV4dGVuc2lvbihkYXRhKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uRnJvbVN0cmVhbWVyLCAnRmlsZU1pbWVUeXBlJywgKGRhdGEpID0+IHRoaXMub25GaWxlTWltZVR5cGUoZGF0YSkpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLkZyb21TdHJlYW1lciwgJ0ZpbGVDb250ZW50cycsIChkYXRhKSA9PiB0aGlzLm9uRmlsZUNvbnRlbnRzKGRhdGEpKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uTWVzc2FnZURpcmVjdGlvbi5Gcm9tU3RyZWFtZXIsICdUZXN0RWNobycsICgpID0+IHtcclxuICAgICAgICAgICAgLyogRG8gbm90aGluZyAqL1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLkZyb21TdHJlYW1lciwgJ0lucHV0Q29udHJvbE93bmVyc2hpcCcsIChkYXRhKSA9PiB0aGlzLm9uSW5wdXRDb250cm9sT3duZXJzaGlwKGRhdGEpKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uTWVzc2FnZURpcmVjdGlvbi5Gcm9tU3RyZWFtZXIsICdHYW1lcGFkUmVzcG9uc2UnLCAoZGF0YSkgPT4gdGhpcy5vbkdhbWVwYWRSZXNwb25zZShkYXRhKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uRnJvbVN0cmVhbWVyLCAnUHJvdG9jb2wnLCAoZGF0YSkgPT4gdGhpcy5vblByb3RvY29sTWVzc2FnZShkYXRhKSk7XHJcbiAgICAgICAgLy8gVG8gU3RyZWFtZXJcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLCAnSUZyYW1lUmVxdWVzdCcsICgpID0+IHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcignSUZyYW1lUmVxdWVzdCcpKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLCAnUmVxdWVzdFF1YWxpdHlDb250cm9sJywgKCkgPT4gdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdSZXF1ZXN0UXVhbGl0eUNvbnRyb2wnKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lciwgJ0Zwc1JlcXVlc3QnLCAoKSA9PiB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ0Zwc1JlcXVlc3QnKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lciwgJ0F2ZXJhZ2VCaXRyYXRlUmVxdWVzdCcsICgpID0+IHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcignQXZlcmFnZUJpdHJhdGVSZXF1ZXN0JykpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsICdTdGFydFN0cmVhbWluZycsICgpID0+IHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcignU3RhcnRTdHJlYW1pbmcnKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lciwgJ1N0b3BTdHJlYW1pbmcnLCAoKSA9PiB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ1N0b3BTdHJlYW1pbmcnKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lciwgJ0xhdGVuY3lUZXN0JywgKGRhdGEpID0+IHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcignTGF0ZW5jeVRlc3QnLCBkYXRhKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lciwgJ1JlcXVlc3RJbml0aWFsU2V0dGluZ3MnLCAoKSA9PiB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ1JlcXVlc3RJbml0aWFsU2V0dGluZ3MnKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lciwgJ1Rlc3RFY2hvJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAvKiBEbyBub3RoaW5nICovXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lciwgJ1VJSW50ZXJhY3Rpb24nLCAoZGF0YSkgPT4gdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdVSUludGVyYWN0aW9uJywgZGF0YSkpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsICdDb21tYW5kJywgKGRhdGEpID0+IHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcignQ29tbWFuZCcsIGRhdGEpKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLCAnVGV4dGJveEVudHJ5JywgKGRhdGEpID0+IHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcignVGV4dGJveEVudHJ5JywgZGF0YSkpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsICdLZXlEb3duJywgKGRhdGEpID0+IHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcignS2V5RG93bicsIGRhdGEpKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLCAnS2V5VXAnLCAoZGF0YSkgPT4gdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdLZXlVcCcsIGRhdGEpKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLCAnS2V5UHJlc3MnLCAoZGF0YSkgPT4gdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdLZXlQcmVzcycsIGRhdGEpKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLCAnTW91c2VFbnRlcicsIChkYXRhKSA9PiB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ01vdXNlRW50ZXInLCBkYXRhKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lciwgJ01vdXNlTGVhdmUnLCAoZGF0YSkgPT4gdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdNb3VzZUxlYXZlJywgZGF0YSkpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsICdNb3VzZURvd24nLCAoZGF0YSkgPT4gdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdNb3VzZURvd24nLCBkYXRhKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lciwgJ01vdXNlVXAnLCAoZGF0YSkgPT4gdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdNb3VzZVVwJywgZGF0YSkpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsICdNb3VzZU1vdmUnLCAoZGF0YSkgPT4gdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdNb3VzZU1vdmUnLCBkYXRhKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lciwgJ01vdXNlV2hlZWwnLCAoZGF0YSkgPT4gdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdNb3VzZVdoZWVsJywgZGF0YSkpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsICdNb3VzZURvdWJsZScsIChkYXRhKSA9PiB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ01vdXNlRG91YmxlJywgZGF0YSkpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsICdUb3VjaFN0YXJ0JywgKGRhdGEpID0+IHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcignVG91Y2hTdGFydCcsIGRhdGEpKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLCAnVG91Y2hFbmQnLCAoZGF0YSkgPT4gdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdUb3VjaEVuZCcsIGRhdGEpKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLCAnVG91Y2hNb3ZlJywgKGRhdGEpID0+IHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcignVG91Y2hNb3ZlJywgZGF0YSkpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsICdHYW1lcGFkQ29ubmVjdGVkJywgKCkgPT4gdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdHYW1lcGFkQ29ubmVjdGVkJykpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsICdHYW1lcGFkQnV0dG9uUHJlc3NlZCcsIChkYXRhKSA9PiB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ0dhbWVwYWRCdXR0b25QcmVzc2VkJywgZGF0YSkpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsICdHYW1lcGFkQnV0dG9uUmVsZWFzZWQnLCAoZGF0YSkgPT4gdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdHYW1lcGFkQnV0dG9uUmVsZWFzZWQnLCBkYXRhKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lciwgJ0dhbWVwYWRBbmFsb2cnLCAoZGF0YSkgPT4gdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdHYW1lcGFkQW5hbG9nJywgZGF0YSkpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsICdHYW1lcGFkRGlzY29ubmVjdGVkJywgKGRhdGEpID0+IHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcignR2FtZXBhZERpc2Nvbm5lY3RlZCcsIGRhdGEpKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLCAnWFJFeWVWaWV3cycsIChkYXRhKSA9PiB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ1hSRXllVmlld3MnLCBkYXRhKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lciwgJ1hSSE1EVHJhbnNmb3JtJywgKGRhdGEpID0+IHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcignWFJITURUcmFuc2Zvcm0nLCBkYXRhKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lciwgJ1hSQ29udHJvbGxlclRyYW5zZm9ybScsIChkYXRhKSA9PiB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ1hSQ29udHJvbGxlclRyYW5zZm9ybScsIGRhdGEpKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLCAnWFJTeXN0ZW0nLCAoZGF0YSkgPT4gdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdYUlN5c3RlbScsIGRhdGEpKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLCAnWFJCdXR0b25Ub3VjaGVkJywgKGRhdGEpID0+IHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcignWFJCdXR0b25Ub3VjaGVkJywgZGF0YSkpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsICdYUkJ1dHRvblRvdWNoUmVsZWFzZWQnLCAoZGF0YSkgPT4gdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdYUkJ1dHRvblRvdWNoUmVsZWFzZWQnLCBkYXRhKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lciwgJ1hSQnV0dG9uUHJlc3NlZCcsIChkYXRhKSA9PiB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ1hSQnV0dG9uUHJlc3NlZCcsIGRhdGEpKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLCAnWFJCdXR0b25SZWxlYXNlZCcsIChkYXRhKSA9PiB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ1hSQnV0dG9uUmVsZWFzZWQnLCBkYXRhKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lciwgJ1hSQW5hbG9nJywgKGRhdGEpID0+IHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcignWFJBbmFsb2cnLCBkYXRhKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFjdGl2YXRlIHRoZSBsb2dpYyBhc3NvY2lhdGVkIHdpdGggYSBjb21tYW5kIGZyb20gVUVcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlXHJcbiAgICAgKi9cclxuICAgIG9uQ29tbWFuZChtZXNzYWdlKSB7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUuQ29tbWFuZCcsIDYpO1xyXG4gICAgICAgIGNvbnN0IGNvbW1hbmRBc1N0cmluZyA9IG5ldyBUZXh0RGVjb2RlcigndXRmLTE2JykuZGVjb2RlKG1lc3NhZ2Uuc2xpY2UoMSkpO1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ0RhdGEgQ2hhbm5lbCBDb21tYW5kOiAnICsgY29tbWFuZEFzU3RyaW5nLCA2KTtcclxuICAgICAgICBjb25zdCBjb21tYW5kID0gSlNPTi5wYXJzZShjb21tYW5kQXNTdHJpbmcpO1xyXG4gICAgICAgIGlmIChjb21tYW5kLmNvbW1hbmQgPT09ICdvblNjcmVlbktleWJvYXJkJykge1xyXG4gICAgICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLl9hY3RpdmF0ZU9uU2NyZWVuS2V5Ym9hcmQoY29tbWFuZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIGEgcHJvdG9jb2wgbWVzc2FnZSByZWNlaXZlZCBmcm9tIHRoZSBzdHJlYW1lclxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgdGhlIG1lc3NhZ2UgZGF0YSBmcm9tIHRoZSBzdHJlYW1lclxyXG4gICAgICovXHJcbiAgICBvblByb3RvY29sTWVzc2FnZShtZXNzYWdlKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcHJvdG9jb2xTdHJpbmcgPSBuZXcgVGV4dERlY29kZXIoJ3V0Zi0xNicpLmRlY29kZShtZXNzYWdlLnNsaWNlKDEpKTtcclxuICAgICAgICAgICAgY29uc3QgcHJvdG9jb2xKU09OID0gSlNPTi5wYXJzZShwcm90b2NvbFN0cmluZyk7XHJcbiAgICAgICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvY29sSlNPTiwgJ0RpcmVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuRXJyb3IoX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ01hbGZvcm1lZCBwcm90b2NvbCByZWNlaXZlZC4gRW5zdXJlIHRoZSBwcm90b2NvbCBtZXNzYWdlIGNvbnRhaW5zIGEgZGlyZWN0aW9uJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgZGlyZWN0aW9uID0gcHJvdG9jb2xKU09OLkRpcmVjdGlvbjtcclxuICAgICAgICAgICAgZGVsZXRlIHByb3RvY29sSlNPTi5EaXJlY3Rpb247XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYFJlY2VpdmVkIG5ldyAke2RpcmVjdGlvbiA9PSBfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLkZyb21TdHJlYW1lclxyXG4gICAgICAgICAgICAgICAgPyAnRnJvbVN0cmVhbWVyJ1xyXG4gICAgICAgICAgICAgICAgOiAnVG9TdHJlYW1lcid9IHByb3RvY29sLiBVcGRhdGluZyBleGlzdGluZyBwcm90b2NvbC4uLmApO1xyXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhwcm90b2NvbEpTT04pLmZvckVhY2goKG1lc3NhZ2VUeXBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gcHJvdG9jb2xKU09OW21lc3NhZ2VUeXBlXTtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIHRoYXQgdGhlIG1lc3NhZ2UgY29udGFpbnMgYWxsIHRoZSByZWxldmFudCBwYXJhbXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgJ2lkJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5FcnJvcihfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgVG9TdHJlYW1lci0+JHttZXNzYWdlVHlwZX0gcHJvdG9jb2wgZGVmaW5pdGlvbiB3YXMgbWFsZm9ybWVkIGFzIGl0IGRpZG4ndCBjb250YWluIGF0IGxlYXN0IGFuIGlkXFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmaW5pdGlvbiB3YXM6ICR7SlNPTi5zdHJpbmdpZnkobWVzc2FnZSwgbnVsbCwgMil9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gaW4gYSBmb3JFYWNoIGlzIGVxdWl2YWxlbnQgdG8gYSBjb250aW51ZSBpbiBhIG5vcm1hbCBmb3IgbG9vcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVFNS4xIGFuZCBVRTUuMiBkb24ndCBzZW5kIGEgc3RydWN0dXJlIGZvciB0aGVzZSBtZXNzYWdlIHR5cGVzLCBidXQgdGhleSBhY3R1YWxseSBkbyBoYXZlIGEgc3RydWN0dXJlIHNvIGlnbm9yZSB1cGRhdGluZyB0aGVtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgobWVzc2FnZVR5cGUgPT09IFwiVUlJbnRlcmFjdGlvblwiIHx8IG1lc3NhZ2VUeXBlID09PSBcIkNvbW1hbmRcIiB8fCBtZXNzYWdlVHlwZSA9PT0gXCJMYXRlbmN5VGVzdFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnRvU3RyZWFtZXJIYW5kbGVycy5nZXQobWVzc2FnZVR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSd2ZSByZWdpc3RlcmVkIGEgaGFuZGxlciBmb3IgdGhpcyBtZXNzYWdlIHR5cGUgd2UgY2FuIGFkZCBpdCB0byBvdXIgc3VwcG9ydGVkIG1lc3NhZ2VzLiBpZSByZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKC4uLilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIudG9TdHJlYW1lck1lc3NhZ2VzLnNldChtZXNzYWdlVHlwZSwgbWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuRXJyb3IoX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYFRoZXJlIHdhcyBubyByZWdpc3RlcmVkIGhhbmRsZXIgZm9yIFwiJHttZXNzYWdlVHlwZX1cIiAtIHRyeSBhZGRpbmcgb25lIHVzaW5nIHJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLCBcIiR7bWVzc2FnZVR5cGV9XCIsIG15SGFuZGxlcilgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uRnJvbVN0cmVhbWVyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayB0aGF0IHRoZSBtZXNzYWdlIGNvbnRhaW5zIGFsbCB0aGUgcmVsZXZhbnQgcGFyYW1zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsICdpZCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuRXJyb3IoX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYEZyb21TdHJlYW1lci0+JHttZXNzYWdlVHlwZX0gcHJvdG9jb2wgZGVmaW5pdGlvbiB3YXMgbWFsZm9ybWVkIGFzIGl0IGRpZG4ndCBjb250YWluIGF0IGxlYXN0IGFuIGlkXFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmaW5pdGlvbiB3YXM6ICR7SlNPTi5zdHJpbmdpZnkobWVzc2FnZSwgbnVsbCwgMil9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gaW4gYSBmb3JFYWNoIGlzIGVxdWl2YWxlbnQgdG8gYSBjb250aW51ZSBpbiBhIG5vcm1hbCBmb3IgbG9vcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLmZyb21TdHJlYW1lckhhbmRsZXJzLmdldChtZXNzYWdlVHlwZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHdlJ3ZlIHJlZ2lzdGVyZWQgYSBoYW5kbGVyIGZvciB0aGlzIG1lc3NhZ2UgdHlwZS4gaWUgcmVnaXN0ZXJNZXNzYWdlSGFuZGxlciguLi4pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLmZyb21TdHJlYW1lck1lc3NhZ2VzLnNldChtZXNzYWdlLmlkLCBtZXNzYWdlVHlwZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuRXJyb3IoX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYFRoZXJlIHdhcyBubyByZWdpc3RlcmVkIGhhbmRsZXIgZm9yIFwiJHttZXNzYWdlfVwiIC0gdHJ5IGFkZGluZyBvbmUgdXNpbmcgcmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihNZXNzYWdlRGlyZWN0aW9uLkZyb21TdHJlYW1lciwgXCIke21lc3NhZ2VUeXBlfVwiLCBteUhhbmRsZXIpYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkVycm9yKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBVbmtub3duIGRpcmVjdGlvbjogJHtkaXJlY3Rpb259YCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLyBPbmNlIHRoZSBwcm90b2NvbCBoYXMgYmVlbiByZWNlaXZlZCwgd2UgY2FuIHNlbmQgb3VyIGNvbnRyb2wgbWVzc2FnZXNcclxuICAgICAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNDb250cm9sbGVyLlNlbmRSZXF1ZXN0SW5pdGlhbFNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzQ29udHJvbGxlci5TZW5kUmVxdWVzdFF1YWxpdHlDb250cm9sKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIGFuIGlucHV0IGNvbnRyb2wgbWVzc2FnZSB3aGVuIGl0IGlzIHJlY2VpdmVkIGZyb20gdGhlIHN0cmVhbWVyXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSBUaGUgaW5wdXQgY29udHJvbCBtZXNzYWdlXHJcbiAgICAgKi9cclxuICAgIG9uSW5wdXRDb250cm9sT3duZXJzaGlwKG1lc3NhZ2UpIHtcclxuICAgICAgICBjb25zdCB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkobWVzc2FnZSk7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUuSW5wdXRDb250cm9sT3duZXJzaGlwJywgNik7XHJcbiAgICAgICAgY29uc3QgaW5wdXRDb250cm9sT3duZXJzaGlwID0gbmV3IEJvb2xlYW4odmlld1sxXSkudmFsdWVPZigpO1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYFJlY2VpdmVkIGlucHV0IGNvbnRyb2xsZXIgbWVzc2FnZSAtIHdpbGwgeW91ciBpbnB1dCBjb250cm9sIHRoZSBzdHJlYW06ICR7aW5wdXRDb250cm9sT3duZXJzaGlwfWApO1xyXG4gICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuX29uSW5wdXRDb250cm9sT3duZXJzaGlwKGlucHV0Q29udHJvbE93bmVyc2hpcCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZVxyXG4gICAgICovXHJcbiAgICBvbkdhbWVwYWRSZXNwb25zZShtZXNzYWdlKSB7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2VTdHJpbmcgPSBuZXcgVGV4dERlY29kZXIoJ3V0Zi0xNicpLmRlY29kZShtZXNzYWdlLnNsaWNlKDEpKTtcclxuICAgICAgICBjb25zdCByZXNwb25zZUpTT04gPSBKU09OLnBhcnNlKHJlc3BvbnNlU3RyaW5nKTtcclxuICAgICAgICB0aGlzLmdhbWVQYWRDb250cm9sbGVyLm9uR2FtZXBhZFJlc3BvbnNlUmVjZWl2ZWQocmVzcG9uc2VKU09OLmNvbnRyb2xsZXJJZCk7XHJcbiAgICB9XHJcbiAgICBvbkFma1RyaWdnZXJlZCgpIHtcclxuICAgICAgICB0aGlzLmFma0NvbnRyb2xsZXIub25BZmtDbGljaygpO1xyXG4gICAgICAgIC8vIGlmIHRoZSBzdHJlYW0gaXMgcGF1c2VkIHBsYXkgaXQsIGlmIHdlIGNhblxyXG4gICAgICAgIGlmICh0aGlzLnZpZGVvUGxheWVyLmlzUGF1c2VkKCkgJiYgdGhpcy52aWRlb1BsYXllci5oYXNWaWRlb1NvdXJjZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGxheVN0cmVhbSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHdoZXRoZXIgd2Ugc2hvdWxkIHRpbWVvdXQgd2hlbiBhZmsuXHJcbiAgICAgKiBAcGFyYW0gYWZrRW5hYmxlZCBJZiB0cnVlIHdlIHRpbWVvdXQgd2hlbiBpZGxlIGZvciBzb21lIGdpdmVuIGFtb3VudCBvZiB0aW1lLlxyXG4gICAgICovXHJcbiAgICBzZXRBZmtFbmFibGVkKGFma0VuYWJsZWQpIHtcclxuICAgICAgICBpZiAoYWZrRW5hYmxlZCkge1xyXG4gICAgICAgICAgICB0aGlzLm9uQWZrVHJpZ2dlcmVkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmFma0NvbnRyb2xsZXIuc3RvcEFma1dhcm5pbmdUaW1lcigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQXR0ZW1wdCBhIHJlY29ubmVjdGlvbiB0byB0aGUgc2lnbmFsbGluZyBzZXJ2ZXJcclxuICAgICAqL1xyXG4gICAgdHJ5UmVjb25uZWN0KG1lc3NhZ2UpIHtcclxuICAgICAgICAvLyBpZiB0aGVyZSBpcyBubyB3ZWJTb2NrZXRDb250cm9sbGVyIHJldHVybiBpbW1lZGlhdGVseSBvciB0aGlzIHdpbGwgbm90IHdvcmtcclxuICAgICAgICBpZiAoIXRoaXMud2ViU29ja2V0Q29udHJvbGxlcikge1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdUaGUgV2ViIFNvY2tldCBDb250cm9sbGVyIGRvZXMgbm90IGV4aXN0IHNvIHRoaXMgd2lsbCBub3Qgd29yayByaWdodCBub3cuJyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gaWYgdGhlIGNvbm5lY3Rpb24gaXMgb3BlbiwgZmlyc3QgY2xvc2UgaXQuIHdhaXQgc29tZSB0aW1lIGFuZCB0cnkgYWdhaW4uXHJcbiAgICAgICAgdGhpcy5pc1JlY29ubmVjdGluZyA9IHRydWU7XHJcbiAgICAgICAgaWYgKHRoaXMud2ViU29ja2V0Q29udHJvbGxlci53ZWJTb2NrZXQgJiYgdGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLndlYlNvY2tldC5yZWFkeVN0YXRlICE9IFdlYlNvY2tldC5DTE9TRUQpIHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZVNpZ25hbGluZ1NlcnZlcihgJHttZXNzYWdlfSBSZXN0YXJ0aW5nIHN0cmVhbS4uLmApO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMudHJ5UmVjb25uZWN0KG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9LCAzMDAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuX29uV2ViUnRjQXV0b0Nvbm5lY3QoKTtcclxuICAgICAgICAgICAgdGhpcy5jb25uZWN0VG9TaWduYWxsaW5nU2VydmVyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBMb2FkcyBhIGZyZWV6ZSBmcmFtZSBpZiBpdCBpcyByZXF1aXJlZCBvdGhlcndpc2Ugc2hvd3MgdGhlIHBsYXkgb3ZlcmxheVxyXG4gICAgICovXHJcbiAgICBsb2FkRnJlZXplRnJhbWVPclNob3dQbGF5T3ZlcmxheSgpIHtcclxuICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLmRpc3BhdGNoRXZlbnQobmV3IF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2FkRnJlZXplRnJhbWVFdmVudCh7XHJcbiAgICAgICAgICAgIHNob3VsZFNob3dQbGF5T3ZlcmxheTogdGhpcy5zaG91bGRTaG93UGxheU92ZXJsYXksXHJcbiAgICAgICAgICAgIGlzVmFsaWQ6IHRoaXMuZnJlZXplRnJhbWVDb250cm9sbGVyLnZhbGlkLFxyXG4gICAgICAgICAgICBqcGVnRGF0YTogdGhpcy5mcmVlemVGcmFtZUNvbnRyb2xsZXIuanBlZ1xyXG4gICAgICAgIH0pKTtcclxuICAgICAgICBpZiAodGhpcy5zaG91bGRTaG93UGxheU92ZXJsYXkgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnc2hvd2luZyBwbGF5IG92ZXJsYXknKTtcclxuICAgICAgICAgICAgdGhpcy5yZXNpemVQbGF5ZXJTdHlsZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnc2hvd2luZyBmcmVlemUgZnJhbWUnKTtcclxuICAgICAgICAgICAgdGhpcy5mcmVlemVGcmFtZUNvbnRyb2xsZXIuc2hvd0ZyZWV6ZUZyYW1lKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnZpZGVvUGxheWVyLnNldFZpZGVvRW5hYmxlZChmYWxzZSk7XHJcbiAgICAgICAgfSwgdGhpcy5mcmVlemVGcmFtZUNvbnRyb2xsZXIuZnJlZXplRnJhbWVEZWxheSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFByb2Nlc3MgdGhlIGZyZWV6ZSBmcmFtZSBhbmQgbG9hZCBpdFxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgVGhlIGZyZWV6ZSBmcmFtZSBkYXRhIGluIGJ5dGVzXHJcbiAgICAgKi9cclxuICAgIG9uRnJlZXplRnJhbWVNZXNzYWdlKG1lc3NhZ2UpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdEYXRhQ2hhbm5lbFJlY2VpdmVNZXNzYWdlVHlwZS5GcmVlemVGcmFtZScsIDYpO1xyXG4gICAgICAgIGNvbnN0IHZpZXcgPSBuZXcgVWludDhBcnJheShtZXNzYWdlKTtcclxuICAgICAgICB0aGlzLmZyZWV6ZUZyYW1lQ29udHJvbGxlci5wcm9jZXNzRnJlZXplRnJhbWVNZXNzYWdlKHZpZXcsICgpID0+IHRoaXMubG9hZEZyZWV6ZUZyYW1lT3JTaG93UGxheU92ZXJsYXkoKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEVuYWJsZSB0aGUgdmlkZW8gYWZ0ZXIgaGlkaW5nIGEgZnJlZXplIGZyYW1lXHJcbiAgICAgKi9cclxuICAgIGludmFsaWRhdGVGcmVlemVGcmFtZUFuZEVuYWJsZVZpZGVvKCkge1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ0RhdGFDaGFubmVsUmVjZWl2ZU1lc3NhZ2VUeXBlLkZyZWV6ZUZyYW1lJywgNik7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuZGlzcGF0Y2hFdmVudChuZXcgX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkhpZGVGcmVlemVGcmFtZUV2ZW50KCkpO1xyXG4gICAgICAgICAgICB0aGlzLmZyZWV6ZUZyYW1lQ29udHJvbGxlci5oaWRlRnJlZXplRnJhbWUoKTtcclxuICAgICAgICB9LCB0aGlzLmZyZWV6ZUZyYW1lQ29udHJvbGxlci5mcmVlemVGcmFtZURlbGF5KTtcclxuICAgICAgICBpZiAodGhpcy52aWRlb1BsYXllci5nZXRWaWRlb0VsZW1lbnQoKSkge1xyXG4gICAgICAgICAgICB0aGlzLnZpZGVvUGxheWVyLnNldFZpZGVvRW5hYmxlZCh0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFByZXAgZGF0YWNoYW5uZWwgZGF0YSBmb3IgcHJvY2Vzc2luZyBmaWxlIGV4dGVuc2lvblxyXG4gICAgICogQHBhcmFtIGRhdGEgdGhlIGZpbGUgZXh0ZW5zaW9uIGRhdGFcclxuICAgICAqL1xyXG4gICAgb25GaWxlRXh0ZW5zaW9uKGRhdGEpIHtcclxuICAgICAgICBjb25zdCB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XHJcbiAgICAgICAgX1V0aWxfRmlsZVV0aWxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5GaWxlVXRpbC5zZXRFeHRlbnNpb25Gcm9tQnl0ZXModmlldywgdGhpcy5maWxlKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUHJlcCBkYXRhY2hhbm5lbCBkYXRhIGZvciBwcm9jZXNzaW5nIHRoZSBmaWxlIG1pbWUgdHlwZVxyXG4gICAgICogQHBhcmFtIGRhdGEgdGhlIGZpbGUgbWltZSB0eXBlIGRhdGFcclxuICAgICAqL1xyXG4gICAgb25GaWxlTWltZVR5cGUoZGF0YSkge1xyXG4gICAgICAgIGNvbnN0IHZpZXcgPSBuZXcgVWludDhBcnJheShkYXRhKTtcclxuICAgICAgICBfVXRpbF9GaWxlVXRpbF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkZpbGVVdGlsLnNldE1pbWVUeXBlRnJvbUJ5dGVzKHZpZXcsIHRoaXMuZmlsZSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFByZXAgZGF0YWNoYW5uZWwgZGF0YSBmb3IgcHJvY2Vzc2luZyB0aGUgZmlsZSBjb250ZW50c1xyXG4gICAgICogQHBhcmFtIGRhdGEgdGhlIGZpbGUgY29udGVudHMgZGF0YVxyXG4gICAgICovXHJcbiAgICBvbkZpbGVDb250ZW50cyhkYXRhKSB7XHJcbiAgICAgICAgY29uc3QgdmlldyA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xyXG4gICAgICAgIF9VdGlsX0ZpbGVVdGlsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uRmlsZVV0aWwuc2V0Q29udGVudHNGcm9tQnl0ZXModmlldywgdGhpcy5maWxlKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUGxheXMgdGhlIHN0cmVhbSBhdWRpbyBhbmQgdmlkZW8gc291cmNlIGFuZCBzZXRzIHVwIG90aGVyIHBpZWNlcyB3aGlsZSB0aGUgc3RyZWFtIHN0YXJ0c1xyXG4gICAgICovXHJcbiAgICBwbGF5U3RyZWFtKCkge1xyXG4gICAgICAgIGlmICghdGhpcy52aWRlb1BsYXllci5nZXRWaWRlb0VsZW1lbnQoKSkge1xyXG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gJ0NvdWxkIG5vdCBwbGF5IHZpZGVvIHN0cmVhbSBiZWNhdXNlIHRoZSB2aWRlbyBwbGF5ZXIgd2FzIG5vdCBpbml0aWFsaXplZCBjb3JyZWN0bHkuJztcclxuICAgICAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5kaXNwYXRjaEV2ZW50KG5ldyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uUGxheVN0cmVhbUVycm9yRXZlbnQoeyBtZXNzYWdlIH0pKTtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkVycm9yKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAvLyBjbG9zZSB0aGUgY29ubmVjdGlvblxyXG4gICAgICAgICAgICB0aGlzLmNsb3NlU2lnbmFsaW5nU2VydmVyKCdTdHJlYW0gbm90IGluaXRpYWxpemVkIGNvcnJlY3RseScpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy52aWRlb1BsYXllci5oYXNWaWRlb1NvdXJjZSgpKSB7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5XYXJuaW5nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdDYW5ub3QgcGxheSBzdHJlYW0sIHRoZSB2aWRlbyBlbGVtZW50IGhhcyBubyBzcmNPYmplY3QgdG8gcGxheS4nKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldFRvdWNoSW5wdXRFbmFibGVkKHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18uRmxhZ3MuVG91Y2hJbnB1dCkpO1xyXG4gICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuZGlzcGF0Y2hFdmVudChuZXcgX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLlBsYXlTdHJlYW1FdmVudCgpKTtcclxuICAgICAgICBpZiAodGhpcy5zdHJlYW1Db250cm9sbGVyLmF1ZGlvRWxlbWVudC5zcmNPYmplY3QpIHtcclxuICAgICAgICAgICAgY29uc3Qgc3RhcnRNdXRlZCA9IHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18uRmxhZ3MuU3RhcnRWaWRlb011dGVkKTtcclxuICAgICAgICAgICAgdGhpcy5zdHJlYW1Db250cm9sbGVyLmF1ZGlvRWxlbWVudC5tdXRlZCA9IHN0YXJ0TXV0ZWQ7XHJcbiAgICAgICAgICAgIGlmIChzdGFydE11dGVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXlWaWRlbygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdHJlYW1Db250cm9sbGVyLmF1ZGlvRWxlbWVudFxyXG4gICAgICAgICAgICAgICAgICAgIC5wbGF5KClcclxuICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5VmlkZW8oKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChvblJlamVjdGVkUmVhc29uKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBvblJlamVjdGVkUmVhc29uKTtcclxuICAgICAgICAgICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdCcm93c2VyIGRvZXMgbm90IHN1cHBvcnQgYXV0b3BsYXlpbmcgdmlkZW8gd2l0aG91dCBpbnRlcmFjdGlvbiAtIHRvIHJlc29sdmUgdGhpcyB3ZSBhcmUgZ29pbmcgdG8gc2hvdyB0aGUgcGxheSBidXR0b24gb3ZlcmxheS4nKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLmRpc3BhdGNoRXZlbnQobmV3IF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5QbGF5U3RyZWFtUmVqZWN0ZWRFdmVudCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYXNvbjogb25SZWplY3RlZFJlYXNvblxyXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnBsYXlWaWRlbygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNob3VsZFNob3dQbGF5T3ZlcmxheSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZnJlZXplRnJhbWVDb250cm9sbGVyLnNob3dGcmVlemVGcmFtZSgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBQbGF5cyB0aGUgdmlkZW8gc3RyZWFtXHJcbiAgICAgKi9cclxuICAgIHBsYXlWaWRlbygpIHtcclxuICAgICAgICAvLyBoYW5kbGUgcGxheSgpIHdpdGggcHJvbWlzZSBhcyBpdCBpcyBhbiBhc3luY2hyb25vdXMgY2FsbFxyXG4gICAgICAgIHRoaXMudmlkZW9QbGF5ZXIucGxheSgpLmNhdGNoKChvblJlamVjdGVkUmVhc29uKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnN0cmVhbUNvbnRyb2xsZXIuYXVkaW9FbGVtZW50LnNyY09iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdHJlYW1Db250cm9sbGVyLmF1ZGlvRWxlbWVudC5wYXVzZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgb25SZWplY3RlZFJlYXNvbik7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ0Jyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBhdXRvcGxheWluZyB2aWRlbyB3aXRob3V0IGludGVyYWN0aW9uIC0gdG8gcmVzb2x2ZSB0aGlzIHdlIGFyZSBnb2luZyB0byBzaG93IHRoZSBwbGF5IGJ1dHRvbiBvdmVybGF5LicpO1xyXG4gICAgICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLmRpc3BhdGNoRXZlbnQobmV3IF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5QbGF5U3RyZWFtUmVqZWN0ZWRFdmVudCh7IHJlYXNvbjogb25SZWplY3RlZFJlYXNvbiB9KSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEVuYWJsZSB0aGUgdmlkZW8gdG8gcGxheSBhdXRvbWF0aWNhbGx5IGlmIGVuYWJsZUF1dG9wbGF5IGlzIHRydWVcclxuICAgICAqL1xyXG4gICAgYXV0b1BsYXlWaWRlb09yU2V0VXBQbGF5T3ZlcmxheSgpIHtcclxuICAgICAgICBpZiAodGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfXy5GbGFncy5BdXRvUGxheVZpZGVvKSkge1xyXG4gICAgICAgICAgICAvLyBhdHRlbXB0IHRvIHBsYXkgdGhlIHZpZGVvXHJcbiAgICAgICAgICAgIHRoaXMucGxheVN0cmVhbSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlc2l6ZVBsYXllclN0eWxlKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENvbm5lY3QgdG8gdGhlIFNpZ25hbGluZyBzZXJ2ZXJcclxuICAgICAqL1xyXG4gICAgY29ubmVjdFRvU2lnbmFsbGluZ1NlcnZlcigpIHtcclxuICAgICAgICB0aGlzLmxvY2FsbHlDbG9zZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnNob3VsZFJlY29ubmVjdCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0TWVzc2FnZSA9IG51bGw7XHJcbiAgICAgICAgY29uc3Qgc2lnbmFsbGluZ1VybCA9IHRoaXMuc2lnbmFsbGluZ1VybEJ1aWxkZXIoKTtcclxuICAgICAgICB0aGlzLndlYlNvY2tldENvbnRyb2xsZXIuY29ubmVjdChzaWduYWxsaW5nVXJsKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyB3aWxsIHN0YXJ0IHRoZSBoYW5kc2hha2UgdG8gdGhlIHNpZ25hbGxpbmcgc2VydmVyXHJcbiAgICAgKiBAcGFyYW0gcGVlckNvbmZpZyAgLSBSVEMgQ29uZmlndXJhdGlvbiBPcHRpb25zIGZyb20gdGhlIFNpZ25hbGluZyBzZXJ2ZXJcclxuICAgICAqIEByZW1hcmsgUlRDIFBlZXIgQ29ubmVjdGlvbiBvbiBJY2UgQ2FuZGlkYXRlIGV2ZW50IGhhdmUgaXQgaGFuZGxlZCBieSBoYW5kbGUgU2VuZCBJY2UgQ2FuZGlkYXRlXHJcbiAgICAgKi9cclxuICAgIHN0YXJ0U2Vzc2lvbihwZWVyQ29uZmlnKSB7XHJcbiAgICAgICAgdGhpcy5wZWVyQ29uZmlnID0gcGVlckNvbmZpZztcclxuICAgICAgICAvLyBjaGVjayBmb3IgZm9yY2luZyB0dXJuXHJcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18uRmxhZ3MuRm9yY2VUVVJOKSkge1xyXG4gICAgICAgICAgICAvLyBjaGVjayBmb3IgYSB0dXJuIHNlcnZlclxyXG4gICAgICAgICAgICBjb25zdCBoYXNUdXJuU2VydmVyID0gdGhpcy5jaGVja1R1cm5TZXJ2ZXJBdmFpbGFiaWxpdHkocGVlckNvbmZpZyk7XHJcbiAgICAgICAgICAgIC8vIGNsb3NlIGFuZCBlcnJvciBpZiB0dXJuIGlzIGZvcmNlZCBhbmQgdGhlcmUgaXMgbm8gdHVybiBzZXJ2ZXJcclxuICAgICAgICAgICAgaWYgKCFoYXNUdXJuU2VydmVyKSB7XHJcbiAgICAgICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuSW5mbyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnTm8gdHVybiBzZXJ2ZXIgd2FzIGZvdW5kIGluIHRoZSBQZWVyIENvbm5lY3Rpb24gT3B0aW9ucy4gVFVSTiBjYW5ub3QgYmUgZm9yY2VkLCBjbG9zaW5nIGNvbm5lY3Rpb24uIFBsZWFzZSB1c2UgU1RVTiBpbnN0ZWFkJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlU2lnbmFsaW5nU2VydmVyKCdUVVJOIGNhbm5vdCBiZSBmb3JjZWQsIGNsb3NpbmcgY29ubmVjdGlvbi4gUGxlYXNlIHVzZSBTVFVOIGluc3RlYWQuJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gc2V0IHVwIHRoZSBwZWVyIGNvbm5lY3Rpb24gY29udHJvbGxlclxyXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyID0gbmV3IF9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXJfUGVlckNvbm5lY3Rpb25Db250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xN19fLlBlZXJDb25uZWN0aW9uQ29udHJvbGxlcih0aGlzLnBlZXJDb25maWcsIHRoaXMuY29uZmlnLCB0aGlzLnByZWZlcnJlZENvZGVjKTtcclxuICAgICAgICAvLyBzZXQgdXAgcGVlciBjb25uZWN0aW9uIGNvbnRyb2xsZXIgdmlkZW8gc3RhdHNcclxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5vblZpZGVvU3RhdHMgPSAoZXZlbnQpID0+IHRoaXMuaGFuZGxlVmlkZW9TdGF0cyhldmVudCk7XHJcbiAgICAgICAgLyogV2hlbiB0aGUgUGVlciBDb25uZWN0aW9uIHdhbnRzIHRvIHNlbmQgYW4gb2ZmZXIgaGF2ZSBpdCBoYW5kbGVkICovXHJcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIub25TZW5kV2ViUlRDT2ZmZXIgPSAob2ZmZXIpID0+IHRoaXMuaGFuZGxlU2VuZFdlYlJUQ09mZmVyKG9mZmVyKTtcclxuICAgICAgICAvKiBXaGVuIHRoZSBQZWVyIENvbm5lY3Rpb24gd2FudHMgdG8gc2VuZCBhbiBhbnN3ZXIgaGF2ZSBpdCBoYW5kbGVkICovXHJcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIub25TZW5kV2ViUlRDQW5zd2VyID0gKG9mZmVyKSA9PiB0aGlzLmhhbmRsZVNlbmRXZWJSVENBbnN3ZXIob2ZmZXIpO1xyXG4gICAgICAgIC8qIFdoZW4gdGhlIFBlZXIgQ29ubmVjdGlvbiBpY2UgY2FuZGlkYXRlIGlzIGFkZGVkIGhhdmUgaXQgaGFuZGxlZCAqL1xyXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLm9uUGVlckljZUNhbmRpZGF0ZSA9IChwZWVyQ29ubmVjdGlvbkljZUV2ZW50KSA9PiB0aGlzLmhhbmRsZVNlbmRJY2VDYW5kaWRhdGUocGVlckNvbm5lY3Rpb25JY2VFdmVudCk7XHJcbiAgICAgICAgLyogV2hlbiB0aGUgUGVlciBDb25uZWN0aW9uIGhhcyBhIGRhdGEgY2hhbm5lbCBjcmVhdGVkIGZvciBpdCBieSB0aGUgYnJvd3NlciwgaGFuZGxlIGl0ICovXHJcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIub25EYXRhQ2hhbm5lbCA9IChkYXRhY2hhbm5lbEV2ZW50KSA9PiB0aGlzLmhhbmRsZURhdGFDaGFubmVsKGRhdGFjaGFubmVsRXZlbnQpO1xyXG4gICAgICAgIC8vIHNldCB1cCB3ZWJSdGMgdGV4dCBvdmVybGF5c1xyXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLnNob3dUZXh0T3ZlcmxheUNvbm5lY3RpbmcgPSAoKSA9PiB0aGlzLnBpeGVsU3RyZWFtaW5nLl9vbldlYlJ0Y0Nvbm5lY3RpbmcoKTtcclxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5zaG93VGV4dE92ZXJsYXlTZXR1cEZhaWx1cmUgPSAoKSA9PiB0aGlzLnBpeGVsU3RyZWFtaW5nLl9vbldlYlJ0Y0ZhaWxlZCgpO1xyXG4gICAgICAgIGxldCB3ZWJSdGNDb25uZWN0ZWRTZW50ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIub25JY2VDb25uZWN0aW9uU3RhdGVDaGFuZ2UgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIEJyb3dzZXJzIGVtaXQgXCJjb25uZWN0ZWRcIiB3aGVuIGdldHRpbmcgZmlyc3QgY29ubmVjdGlvbiBhbmQgXCJjb21wbGV0ZWRcIiB3aGVuIGZpbmlzaGluZ1xyXG4gICAgICAgICAgICAvLyBjYW5kaWRhdGUgY2hlY2tpbmcuIEhvd2V2ZXIsIHNvbWV0aW1lcyBicm93c2VycyBjYW4gc2tpcCBcImNvbm5lY3RlZFwiIGFuZCBvbmx5IGVtaXQgXCJjb21wbGV0ZWRcIi5cclxuICAgICAgICAgICAgLy8gVGhlcmVmb3JlIG5lZWQgdG8gY2hlY2sgYm90aCBjYXNlcyBhbmQgZW1pdCBvbldlYlJ0Y0Nvbm5lY3RlZCBvbmx5IG9uY2Ugb24gdGhlIGZpcnN0IGhpdC5cclxuICAgICAgICAgICAgaWYgKCF3ZWJSdGNDb25uZWN0ZWRTZW50ICYmXHJcbiAgICAgICAgICAgICAgICBbXCJjb25uZWN0ZWRcIiwgXCJjb21wbGV0ZWRcIl0uaW5jbHVkZXModGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIucGVlckNvbm5lY3Rpb24uaWNlQ29ubmVjdGlvblN0YXRlKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5fb25XZWJSdGNDb25uZWN0ZWQoKTtcclxuICAgICAgICAgICAgICAgIHdlYlJ0Y0Nvbm5lY3RlZFNlbnQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKiBSVEMgUGVlciBDb25uZWN0aW9uIG9uIFRyYWNrIGV2ZW50IC0+IGhhbmRsZSBvbiB0cmFjayAqL1xyXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLm9uVHJhY2sgPSAodHJhY2tFdmVudCkgPT4gdGhpcy5zdHJlYW1Db250cm9sbGVyLmhhbmRsZU9uVHJhY2sodHJhY2tFdmVudCk7XHJcbiAgICAgICAgLyogU3RhcnQgdGhlIEhhbmQgc2hha2UgcHJvY2VzcyBieSBjcmVhdGluZyBhbiBPZmZlciAqL1xyXG4gICAgICAgIGNvbnN0IEJyb3dzZXJTZW5kc09mZmVyID0gdGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfXy5GbGFncy5Ccm93c2VyU2VuZE9mZmVyKTtcclxuICAgICAgICBpZiAoQnJvd3NlclNlbmRzT2ZmZXIpIHtcclxuICAgICAgICAgICAgLy8gSWYgYnJvd3NlciBpcyBzZW5kaW5nIHRoZSBvZmZlciwgY3JlYXRlIGFuIG9mZmVyIGFuZCBzZW5kIGl0IHRvIHRoZSBzdHJlYW1lclxyXG4gICAgICAgICAgICB0aGlzLnNlbmRyZWN2RGF0YUNoYW5uZWxDb250cm9sbGVyLmNyZWF0ZURhdGFDaGFubmVsKHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLnBlZXJDb25uZWN0aW9uLCAnY2lycnVzJywgdGhpcy5kYXRhY2hhbm5lbE9wdGlvbnMpO1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRyZWN2RGF0YUNoYW5uZWxDb250cm9sbGVyLmhhbmRsZU9uTWVzc2FnZSA9IChldikgPT4gdGhpcy5oYW5kbGVPbk1lc3NhZ2UoZXYpO1xyXG4gICAgICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5jcmVhdGVPZmZlcih0aGlzLnNkcENvbnN0cmFpbnRzLCB0aGlzLmNvbmZpZyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVja3MgdGhlIHBlZXIgY29ubmVjdGlvbiBvcHRpb25zIGZvciBhIHR1cm4gc2VydmVyIGFuZCByZXR1cm5zIHRydWUgb3IgZmFsc2VcclxuICAgICAqL1xyXG4gICAgY2hlY2tUdXJuU2VydmVyQXZhaWxhYmlsaXR5KG9wdGlvbnMpIHtcclxuICAgICAgICAvLyBpZiBpY2VTZXJ2ZXJzIGlzIGVtcHR5IHJldHVybiBmYWxzZSB0aGlzIHNob3VsZCBub3QgYmUgdGhlIGdlbmVyYWwgdXNlIGNhc2UgYnV0IGlzIGhlcmUgaW5jYXNlXHJcbiAgICAgICAgaWYgKCFvcHRpb25zLmljZVNlcnZlcnMpIHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkluZm8oX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ0EgdHVybiBzZXZlciB3YXMgbm90IGZvdW5kJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gbG9vcCB0aHJvdWdoIHRoZSBpY2Ugc2VydmVycyB0byBjaGVjayBmb3IgYSB0dXJuIHVybFxyXG4gICAgICAgIGZvciAoY29uc3QgaWNlU2VydmVyIG9mIG9wdGlvbnMuaWNlU2VydmVycykge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHVybCBvZiBpY2VTZXJ2ZXIudXJscykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHVybC5pbmNsdWRlcygndHVybicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgQSB0dXJuIHNldmVyIHdhcyBmb3VuZCBhdCAke3VybH1gKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuSW5mbyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnQSB0dXJuIHNldmVyIHdhcyBub3QgZm91bmQnKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgd2hlbiBhIENvbmZpZyBNZXNzYWdlIGlzIHJlY2VpdmVkIGNvbnRhaW5zIHRoZSBQZWVyIENvbm5lY3Rpb24gT3B0aW9ucyByZXF1aXJlZCAoU1RVTiBhbmQgVFVSTiBTZXJ2ZXIgSW5mbylcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlQ29uZmlnIC0gQ29uZmlnIE1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSB0aGUgc2lnbmFsaW5nIHNlcnZlclxyXG4gICAgICovXHJcbiAgICBoYW5kbGVPbkNvbmZpZ01lc3NhZ2UobWVzc2FnZUNvbmZpZykge1xyXG4gICAgICAgIHRoaXMucmVzaXplUGxheWVyU3R5bGUoKTtcclxuICAgICAgICAvLyBUZWxsIHRoZSBXZWJSdGNDb250cm9sbGVyIHRvIHN0YXJ0IGEgc2Vzc2lvbiB3aXRoIHRoZSBwZWVyIG9wdGlvbnMgc2VudCBmcm9tIHRoZSBzaWduYWxpbmcgc2VydmVyXHJcbiAgICAgICAgdGhpcy5zdGFydFNlc3Npb24obWVzc2FnZUNvbmZpZy5wZWVyQ29ubmVjdGlvbk9wdGlvbnMpO1xyXG4gICAgICAgIC8vIFdoZW4gdGhlIHNpZ25hbGluZyBzZXJ2ZXIgc2VuZHMgYSBXZWJSVEMgQW5zd2VyIG92ZXIgdGhlIHdlYnNvY2tldCBjb25uZWN0aW9uIGhhdmUgdGhlIFdlYlJ0Y0NvbnRyb2xsZXIgaGFuZGxlIHRoZSBtZXNzYWdlXHJcbiAgICAgICAgdGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLm9uV2ViUnRjQW5zd2VyID0gKG1lc3NhZ2VBbnN3ZXIpID0+IHRoaXMuaGFuZGxlV2ViUnRjQW5zd2VyKG1lc3NhZ2VBbnN3ZXIpO1xyXG4gICAgICAgIHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5vbldlYlJ0Y09mZmVyID0gKG1lc3NhZ2VPZmZlcikgPT4gdGhpcy5oYW5kbGVXZWJSdGNPZmZlcihtZXNzYWdlT2ZmZXIpO1xyXG4gICAgICAgIHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5vbldlYlJ0Y1BlZXJEYXRhQ2hhbm5lbHMgPSAobWVzc2FnZURhdGFDaGFubmVscykgPT4gdGhpcy5oYW5kbGVXZWJSdGNTRlVQZWVyRGF0YWNoYW5uZWxzKG1lc3NhZ2VEYXRhQ2hhbm5lbHMpO1xyXG4gICAgICAgIC8vIFdoZW4gdGhlIHNpZ25hbGluZyBzZXJ2ZXIgc2VuZHMgYSBJY2VDYW5kaWRhdGUgb3ZlciB0aGUgd2Vic29ja2V0IGNvbm5lY3Rpb24gaGF2ZSB0aGUgV2ViUnRjQ29udHJvbGxlciBoYW5kbGUgdGhlIG1lc3NhZ2VcclxuICAgICAgICB0aGlzLndlYlNvY2tldENvbnRyb2xsZXIub25JY2VDYW5kaWRhdGUgPSAoaWNlQ2FuZGlkYXRlKSA9PiB0aGlzLmhhbmRsZUljZUNhbmRpZGF0ZShpY2VDYW5kaWRhdGUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIHdoZW4gdGhlIHNpZ25hbGxpbmcgc2VydmVyIGdpdmVzIHVzIHRoZSBsaXN0IG9mIHN0cmVhbWVyIGlkcy5cclxuICAgICAqL1xyXG4gICAgaGFuZGxlU3RyZWFtZXJMaXN0TWVzc2FnZShtZXNzYWdlU3RyZWFtZXJMaXN0KSB7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgR290IHN0cmVhbWVyIGxpc3QgJHttZXNzYWdlU3RyZWFtZXJMaXN0Lmlkc31gLCA2KTtcclxuICAgICAgICBsZXQgd2FudGVkU3RyZWFtZXJJZCA9IG51bGw7XHJcbiAgICAgICAgLy8gZ2V0IHRoZSBjdXJyZW50IHNlbGVjdGVkIHN0cmVhbWVyIGlkIG9wdGlvblxyXG4gICAgICAgIHZhciBzdHJlYW1lcklET3B0aW9uID0gdGhpcy5jb25maWcuZ2V0U2V0dGluZ09wdGlvbihfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfXy5PcHRpb25QYXJhbWV0ZXJzLlN0cmVhbWVySWQpO1xyXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nU2VsZWN0aW9uID0gc3RyZWFtZXJJRE9wdGlvbi5zZWxlY3RlZC50b1N0cmluZygpLnRyaW0oKTtcclxuICAgICAgICBpZiAoISFleGlzdGluZ1NlbGVjdGlvbikge1xyXG4gICAgICAgICAgICAvLyBkZWZhdWx0IHRvIHNlbGVjdGVkIG9wdGlvbiBpZiBpdCBleGlzdHNcclxuICAgICAgICAgICAgd2FudGVkU3RyZWFtZXJJZCA9IHN0cmVhbWVySURPcHRpb24uc2VsZWN0ZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGFkZCB0aGUgc3RyZWFtZXJzIHRvIHRoZSBVSVxyXG4gICAgICAgIGNvbnN0IHNldHRpbmdPcHRpb25zID0gWy4uLm1lc3NhZ2VTdHJlYW1lckxpc3QuaWRzXTsgLy8gY29weSB0aGUgb3JpZ2luYWwgbWVzc2FnZVN0cmVhbWVyTGlzdC5pZHNcclxuICAgICAgICBzZXR0aW5nT3B0aW9ucy51bnNoaWZ0KCcnKTsgLy8gYWRkIGFuIGVtcHR5IG9wdGlvbiBhdCB0aGUgdG9wXHJcbiAgICAgICAgdGhpcy5jb25maWcuc2V0T3B0aW9uU2V0dGluZ09wdGlvbnMoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18uT3B0aW9uUGFyYW1ldGVycy5TdHJlYW1lcklkLCBzZXR0aW5nT3B0aW9ucyk7XHJcbiAgICAgICAgbGV0IGF1dG9TZWxlY3RlZFN0cmVhbWVySWQgPSBudWxsO1xyXG4gICAgICAgIGNvbnN0IHdhaXRGb3JTdHJlYW1lciA9IHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18uRmxhZ3MuV2FpdEZvclN0cmVhbWVyKTtcclxuICAgICAgICBjb25zdCByZWNvbm5lY3RMaW1pdCA9IHRoaXMuY29uZmlnLmdldE51bWVyaWNTZXR0aW5nVmFsdWUoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18uTnVtZXJpY1BhcmFtZXRlcnMuTWF4UmVjb25uZWN0QXR0ZW1wdHMpO1xyXG4gICAgICAgIGNvbnN0IHJlY29ubmVjdERlbGF5ID0gdGhpcy5jb25maWcuZ2V0TnVtZXJpY1NldHRpbmdWYWx1ZShfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfXy5OdW1lcmljUGFyYW1ldGVycy5TdHJlYW1lckF1dG9Kb2luSW50ZXJ2YWwpO1xyXG4gICAgICAgIC8vIGZpcnN0IHdlIGZpZ3VyZSBvdXQgYSB3YW50ZWQgc3RyZWFtZXIgaWQgdGhyb3VnaCB2YXJpb3VzIG1lYW5zXHJcbiAgICAgICAgY29uc3QgdXNlVXJsUGFyYW1zID0gdGhpcy5jb25maWcudXNlVXJsUGFyYW1zO1xyXG4gICAgICAgIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XHJcbiAgICAgICAgaWYgKHVzZVVybFBhcmFtcyAmJiB1cmxQYXJhbXMuaGFzKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fLk9wdGlvblBhcmFtZXRlcnMuU3RyZWFtZXJJZCkpIHtcclxuICAgICAgICAgICAgLy8gaWYgd2UndmUgc2V0IHRoZSBzdHJlYW1lciBpZCBvbiB0aGUgdXJsIHdlIG9ubHkgd2FudCB0aGF0IHN0cmVhbWVyIGlkXHJcbiAgICAgICAgICAgIHdhbnRlZFN0cmVhbWVySWQgPSB1cmxQYXJhbXMuZ2V0KF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fLk9wdGlvblBhcmFtZXRlcnMuU3RyZWFtZXJJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuc3Vic2NyaWJlZFN0cmVhbSkge1xyXG4gICAgICAgICAgICAvLyB3ZSB3ZXJlIHByZXZpb3VzbHkgc3Vic2NyaWJlZCB0byBhIHN0cmVhbWVyLCB3ZSB3YW50IHRoYXRcclxuICAgICAgICAgICAgd2FudGVkU3RyZWFtZXJJZCA9IHRoaXMuc3Vic2NyaWJlZFN0cmVhbTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gbm93IGxldHMgc2VlIGlmIHdlIGNhbiBwaWNrIGl0LlxyXG4gICAgICAgIGlmICh3YW50ZWRTdHJlYW1lcklkICYmIG1lc3NhZ2VTdHJlYW1lckxpc3QuaWRzLmluY2x1ZGVzKHdhbnRlZFN0cmVhbWVySWQpKSB7XHJcbiAgICAgICAgICAgIC8vIGlmIHRoZSB3YW50ZWQgc3RyZWFtIGlzIGluIHRoZSBsaXN0LiB3ZSBwaWNrIHRoYXRcclxuICAgICAgICAgICAgYXV0b1NlbGVjdGVkU3RyZWFtZXJJZCA9IHdhbnRlZFN0cmVhbWVySWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCghd2FudGVkU3RyZWFtZXJJZCB8fCAhd2FpdEZvclN0cmVhbWVyKSAmJiBtZXNzYWdlU3RyZWFtZXJMaXN0Lmlkcy5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgICAvLyBvdGhlcndpc2UsIGlmIHdlJ3JlIG5vdCB3YWl0aW5nIGZvciB0aGUgd2FudGVkIHN0cmVhbWVyIGFuZCB0aGVyZSdzIG9ubHkgb25lIHN0cmVhbWVyLCBjb25uZWN0IHRvIGl0XHJcbiAgICAgICAgICAgIGF1dG9TZWxlY3RlZFN0cmVhbWVySWQgPSBtZXNzYWdlU3RyZWFtZXJMaXN0Lmlkc1swXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gaWYgd2UgZm91bmQgYSBzdHJlYW1lciBpZCB0byBhdXRvIHNlbGVjdCwgc2VsZWN0IGl0XHJcbiAgICAgICAgaWYgKGF1dG9TZWxlY3RlZFN0cmVhbWVySWQpIHtcclxuICAgICAgICAgICAgdGhpcy5pc1JlY29ubmVjdGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLnJlY29ubmVjdEF0dGVtcHQgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5zZXRPcHRpb25TZXR0aW5nVmFsdWUoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18uT3B0aW9uUGFyYW1ldGVycy5TdHJlYW1lcklkLCBhdXRvU2VsZWN0ZWRTdHJlYW1lcklkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIG5vIGF1dG8gc2VsZWN0ZWQgc3RyZWFtZXIuXHJcbiAgICAgICAgICAgIC8vIGlmIHdlJ3JlIHdhaXRpbmcgZm9yIGEgc3RyZWFtZXIgdGhlbiB0cnkgcmVjb25uZWN0aW5nXHJcbiAgICAgICAgICAgIGlmICh3YWl0Rm9yU3RyZWFtZXIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlY29ubmVjdEF0dGVtcHQgPCByZWNvbm5lY3RMaW1pdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHN0aWxsIHJlY29ubmVjdHMgYXZhaWxhYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1JlY29ubmVjdGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3RBdHRlbXB0Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5yZXF1ZXN0U3RyZWFtZXJMaXN0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgcmVjb25uZWN0RGVsYXkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UndmUgZXhoYXVzdGVkIG91ciByZWNvbm5lY3QgYXR0ZW1wdHMsIHJldHVybiB0byBtYWluIHNjcmVlblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVjb25uZWN0QXR0ZW1wdCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1JlY29ubmVjdGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvdWxkUmVjb25uZWN0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZGlzcGF0Y2ggdGhpcyBldmVudCBmaW5hbGx5XHJcbiAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5kaXNwYXRjaEV2ZW50KG5ldyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uU3RyZWFtZXJMaXN0TWVzc2FnZUV2ZW50KHtcclxuICAgICAgICAgICAgbWVzc2FnZVN0cmVhbWVyTGlzdCxcclxuICAgICAgICAgICAgYXV0b1NlbGVjdGVkU3RyZWFtZXJJZCxcclxuICAgICAgICAgICAgd2FudGVkU3RyZWFtZXJJZFxyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxuICAgIGhhbmRsZVN0cmVhbWVySURDaGFuZ2VkTWVzc2FnZShzdHJlYW1lcklEQ2hhbmdlZE1lc3NhZ2UpIHtcclxuICAgICAgICBjb25zdCBuZXdJRCA9IHN0cmVhbWVySURDaGFuZ2VkTWVzc2FnZS5uZXdJRDtcclxuICAgICAgICAvLyBuZWVkIHRvIGVkaXQgdGhlIHNlbGVjdGVkIHN0cmVhbWVyIGluIHRoZSBzZXR0aW5ncyBsaXN0XHJcbiAgICAgICAgdmFyIHN0cmVhbWVyTGlzdE9wdGlvbnMgPSB0aGlzLmNvbmZpZy5nZXRTZXR0aW5nT3B0aW9uKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fLk9wdGlvblBhcmFtZXRlcnMuU3RyZWFtZXJJZCk7XHJcbiAgICAgICAgLy8gdGVtcG9yYXJpbHkgcHJldmVudCBvbkNoYW5nZSBmcm9tIGZpcmluZyAoaXQgd291bGQgdHJ5IHRvIHN1YnNjcmliZSB0byB0aGUgc3RyZWFtZXIgYWdhaW4pXHJcbiAgICAgICAgdmFyIG9sZE9uQ2hhbmdlID0gc3RyZWFtZXJMaXN0T3B0aW9ucy5vbkNoYW5nZTtcclxuICAgICAgICBzdHJlYW1lckxpc3RPcHRpb25zLm9uQ2hhbmdlID0gKCkgPT4geyB9O1xyXG4gICAgICAgIC8vIGNoYW5nZSB0aGUgc2VsZWN0ZWQgZW50cnkuXHJcbiAgICAgICAgdmFyIHN0cmVhbWVyTGlzdCA9IHN0cmVhbWVyTGlzdE9wdGlvbnMub3B0aW9ucztcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmVhbWVyTGlzdC5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICBpZiAoc3RyZWFtZXJMaXN0W2ldID09IHRoaXMuc3Vic2NyaWJlZFN0cmVhbSkge1xyXG4gICAgICAgICAgICAgICAgc3RyZWFtZXJMaXN0W2ldID0gbmV3SUQ7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB1cGRhdGUgdGhlIGxpc3RcclxuICAgICAgICBzdHJlYW1lckxpc3RPcHRpb25zLm9wdGlvbnMgPSBzdHJlYW1lckxpc3Q7XHJcbiAgICAgICAgLy8gdXBkYXRlIHRoZSBzZWxlY3RlZCBlbnRyeVxyXG4gICAgICAgIHN0cmVhbWVyTGlzdE9wdGlvbnMuc2VsZWN0ZWQgPSBuZXdJRDtcclxuICAgICAgICAvLyByZXN0b3JlIHRoZSBvbGQgY2hhbmdlIG5vdGlmaWVyLlxyXG4gICAgICAgIHN0cmVhbWVyTGlzdE9wdGlvbnMub25DaGFuZ2UgPSBvbGRPbkNoYW5nZTtcclxuICAgICAgICAvLyByZW1lbWJlciB3aGljaCBzdHJlYW0gd2UncmUgc3Vic2NyaWJlIHRvXHJcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVkU3RyZWFtID0gc3RyZWFtZXJJRENoYW5nZWRNZXNzYWdlLm5ld0lEO1xyXG4gICAgICAgIC8vIG5vdGlmeSBhbnkgbGlzdGVuZXJzXHJcbiAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5kaXNwYXRjaEV2ZW50KG5ldyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uU3RyZWFtZXJJRENoYW5nZWRNZXNzYWdlRXZlbnQoe1xyXG4gICAgICAgICAgICBuZXdJRFxyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHRoZSBSVEMgQW5zd2VyIGZyb20gdGhlIHNpZ25hbGluZyBzZXJ2ZXJcclxuICAgICAqIEBwYXJhbSBBbnN3ZXIgLSBBbnN3ZXIgU0RQIGZyb20gdGhlIHBlZXIuXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZVdlYlJ0Y0Fuc3dlcihBbnN3ZXIpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBHb3QgYW5zd2VyIHNkcCAke0Fuc3dlci5zZHB9YCwgNik7XHJcbiAgICAgICAgY29uc3Qgc2RwQW5zd2VyID0ge1xyXG4gICAgICAgICAgICBzZHA6IEFuc3dlci5zZHAsXHJcbiAgICAgICAgICAgIHR5cGU6ICdhbnN3ZXInXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5yZWNlaXZlQW5zd2VyKHNkcEFuc3dlcik7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVQb3N0V2VicnRjTmVnb3RpYXRpb24oKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHRoZSBSVEMgb2ZmZXIgZnJvbSBhIFdlYlJUQyBwZWVyIChyZWNlaXZlZCB0aHJvdWdoIHRoZSBzaWduYWxsaW5nIHNlcnZlcikuXHJcbiAgICAgKiBAcGFyYW0gT2ZmZXIgLSBPZmZlciBTRFAgZnJvbSB0aGUgcGVlci5cclxuICAgICAqL1xyXG4gICAgaGFuZGxlV2ViUnRjT2ZmZXIoT2ZmZXIpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBHb3Qgb2ZmZXIgc2RwICR7T2ZmZXIuc2RwfWAsIDYpO1xyXG4gICAgICAgIHRoaXMuaXNVc2luZ1NGVSA9IE9mZmVyLnNmdSA/IE9mZmVyLnNmdSA6IGZhbHNlO1xyXG4gICAgICAgIGlmICh0aGlzLmlzVXNpbmdTRlUpIHtcclxuICAgICAgICAgICAgLy8gRGlzYWJsZSBuZWdvdGlhdGluZyB3aXRoIHRoZSBzZnUgYXMgdGhlIHNmdSBvbmx5IHN1cHBvcnRzIG9uZSBjb2RlYyBhdCBhIHRpbWVcclxuICAgICAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIucHJlZmVycmVkQ29kZWMgPSAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgc2RwT2ZmZXIgPSB7XHJcbiAgICAgICAgICAgIHNkcDogT2ZmZXIuc2RwLFxyXG4gICAgICAgICAgICB0eXBlOiAnb2ZmZXInXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5yZWNlaXZlT2ZmZXIoc2RwT2ZmZXIsIHRoaXMuY29uZmlnKTtcclxuICAgICAgICB0aGlzLmhhbmRsZVBvc3RXZWJydGNOZWdvdGlhdGlvbigpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGUgd2hlbiB0aGUgU0ZVIHByb3ZpZGVzIHRoZSBwZWVyIHdpdGggaXRzIGRhdGEgY2hhbm5lbHNcclxuICAgICAqIEBwYXJhbSBEYXRhQ2hhbm5lbHMgLSBUaGUgbWVzc2FnZSBmcm9tIHRoZSBTRlUgY29udGFpbmluZyB0aGUgZGF0YSBjaGFubmVscyBpZHNcclxuICAgICAqL1xyXG4gICAgaGFuZGxlV2ViUnRjU0ZVUGVlckRhdGFjaGFubmVscyhEYXRhQ2hhbm5lbHMpIHtcclxuICAgICAgICBjb25zdCBTZW5kT3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgb3JkZXJlZDogdHJ1ZSxcclxuICAgICAgICAgICAgbmVnb3RpYXRlZDogdHJ1ZSxcclxuICAgICAgICAgICAgaWQ6IERhdGFDaGFubmVscy5zZW5kU3RyZWFtSWRcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IHVuaWRpcmVjdGlvbmFsID0gRGF0YUNoYW5uZWxzLnNlbmRTdHJlYW1JZCAhPSBEYXRhQ2hhbm5lbHMucmVjdlN0cmVhbUlkO1xyXG4gICAgICAgIHRoaXMuc2VuZHJlY3ZEYXRhQ2hhbm5lbENvbnRyb2xsZXIuY3JlYXRlRGF0YUNoYW5uZWwodGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIucGVlckNvbm5lY3Rpb24sIHVuaWRpcmVjdGlvbmFsID8gJ3NlbmQtZGF0YWNoYW5uZWwnIDogJ2RhdGFjaGFubmVsJywgU2VuZE9wdGlvbnMpO1xyXG4gICAgICAgIGlmICh1bmlkaXJlY3Rpb25hbCkge1xyXG4gICAgICAgICAgICBjb25zdCBSZWN2T3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgICAgIG9yZGVyZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBuZWdvdGlhdGVkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgaWQ6IERhdGFDaGFubmVscy5yZWN2U3RyZWFtSWRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdGhpcy5yZWN2RGF0YUNoYW5uZWxDb250cm9sbGVyLmNyZWF0ZURhdGFDaGFubmVsKHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLnBlZXJDb25uZWN0aW9uLCAncmVjdi1kYXRhY2hhbm5lbCcsIFJlY3ZPcHRpb25zKTtcclxuICAgICAgICAgICAgdGhpcy5yZWN2RGF0YUNoYW5uZWxDb250cm9sbGVyLmhhbmRsZU9uT3BlbiA9ICgpID0+IHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5zZW5kU0ZVUmVjdkRhdGFDaGFubmVsUmVhZHkoKTtcclxuICAgICAgICAgICAgLy8gSWYgd2UncmUgdW5pLWRpcmVjdGlvbmFsLCBvbmx5IHRoZSByZWN2IGRhdGEgY2hhbm5lbCBzaG91bGQgaGFuZGxlIGluY29taW5nIG1lc3NhZ2VzXHJcbiAgICAgICAgICAgIHRoaXMucmVjdkRhdGFDaGFubmVsQ29udHJvbGxlci5oYW5kbGVPbk1lc3NhZ2UgPSAoZXYpID0+IHRoaXMuaGFuZGxlT25NZXNzYWdlKGV2KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGVsc2Ugb3VyIHByaW1hcnkgZGF0YWNoYW5uZWwgaXMgc2VuZC9yZWN2IHNvIGl0IGNhbiBoYW5kbGUgaW5jb21pbmcgbWVzc2FnZXNcclxuICAgICAgICAgICAgdGhpcy5zZW5kcmVjdkRhdGFDaGFubmVsQ29udHJvbGxlci5oYW5kbGVPbk1lc3NhZ2UgPSAoZXYpID0+IHRoaXMuaGFuZGxlT25NZXNzYWdlKGV2KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBoYW5kbGVQb3N0V2VicnRjTmVnb3RpYXRpb24oKSB7XHJcbiAgICAgICAgLy8gc3RhcnQgdGhlIGFmayB3YXJuaW5nIHRpbWVyIGFzIFBTIGlzIG5vdyBydW5uaW5nXHJcbiAgICAgICAgdGhpcy5hZmtDb250cm9sbGVyLnN0YXJ0QWZrV2FybmluZ1RpbWVyKCk7XHJcbiAgICAgICAgLy8gc2hvdyB0aGUgb3ZlcmxheSB0aGF0IHdlIGhhdmUgbmVnb3RpYXRlZCBhIGNvbm5lY3Rpb25cclxuICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLl9vbldlYlJ0Y1NkcCgpO1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXRzVGltZXJIYW5kbGUgJiYgdGhpcy5zdGF0c1RpbWVySGFuZGxlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy5zdGF0c1RpbWVySGFuZGxlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zdGF0c1RpbWVySGFuZGxlID0gd2luZG93LnNldEludGVydmFsKCgpID0+IHRoaXMuZ2V0U3RhdHMoKSwgMTAwMCk7XHJcbiAgICAgICAgLyogICovXHJcbiAgICAgICAgdGhpcy5zZXRNb3VzZUlucHV0RW5hYmxlZCh0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fLkZsYWdzLk1vdXNlSW5wdXQpKTtcclxuICAgICAgICB0aGlzLnNldEtleWJvYXJkSW5wdXRFbmFibGVkKHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18uRmxhZ3MuS2V5Ym9hcmRJbnB1dCkpO1xyXG4gICAgICAgIHRoaXMuc2V0R2FtZVBhZElucHV0RW5hYmxlZCh0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fLkZsYWdzLkdhbWVwYWRJbnB1dCkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBXaGVuIGFuIGljZSBDYW5kaWRhdGUgaXMgcmVjZWl2ZWQgZnJvbSB0aGUgU2lnbmFsaW5nIHNlcnZlciBhZGQgaXQgdG8gdGhlIFBlZXIgQ29ubmVjdGlvbiBDbGllbnRcclxuICAgICAqIEBwYXJhbSBpY2VDYW5kaWRhdGUgLSBJY2UgQ2FuZGlkYXRlIGZyb20gU2VydmVyXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZUljZUNhbmRpZGF0ZShpY2VDYW5kaWRhdGUpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdXZWIgUlRDIENvbnRyb2xsZXI6IG9uV2ViUnRjSWNlJywgNik7XHJcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gbmV3IFJUQ0ljZUNhbmRpZGF0ZShpY2VDYW5kaWRhdGUpO1xyXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLmhhbmRsZU9uSWNlKGNhbmRpZGF0ZSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgdGhlIGljZSBDYW5kaWRhdGUgdG8gdGhlIHNpZ25hbGluZyBzZXJ2ZXIgdmlhIHdlYnNvY2tldFxyXG4gICAgICogQHBhcmFtIGljZUV2ZW50IC0gUlRDIFBlZXIgQ29ubmVjdGlvbkljZUV2ZW50KSB7XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZVNlbmRJY2VDYW5kaWRhdGUoaWNlRXZlbnQpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdPbkljZUNhbmRpZGF0ZScsIDYpO1xyXG4gICAgICAgIGlmIChpY2VFdmVudC5jYW5kaWRhdGUgJiYgaWNlRXZlbnQuY2FuZGlkYXRlLmNhbmRpZGF0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldENvbnRyb2xsZXIuc2VuZEljZUNhbmRpZGF0ZShpY2VFdmVudC5jYW5kaWRhdGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2VuZCB0aGUgaWNlIENhbmRpZGF0ZSB0byB0aGUgc2lnbmFsaW5nIHNlcnZlciB2aWEgd2Vic29ja2V0XHJcbiAgICAgKiBAcGFyYW0gaWNlRXZlbnQgLSBSVEMgUGVlciBDb25uZWN0aW9uSWNlRXZlbnQpIHtcclxuICAgICAqL1xyXG4gICAgaGFuZGxlRGF0YUNoYW5uZWwoZGF0YWNoYW5uZWxFdmVudCkge1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ0RhdGEgY2hhbm5lbCBjcmVhdGVkIGZvciB1cyBieSBicm93c2VyIGFzIHdlIGFyZSBhIHJlY2VpdmluZyBwZWVyLicsIDYpO1xyXG4gICAgICAgIHRoaXMuc2VuZHJlY3ZEYXRhQ2hhbm5lbENvbnRyb2xsZXIuZGF0YUNoYW5uZWwgPVxyXG4gICAgICAgICAgICBkYXRhY2hhbm5lbEV2ZW50LmNoYW5uZWw7XHJcbiAgICAgICAgLy8gRGF0YSBjaGFubmVsIHdhcyBjcmVhdGVkIGZvciB1cywgc28gd2UganVzdCBuZWVkIHRvIHNldHVwIGl0cyBjYWxsYmFja3MgYW5kIGFycmF5IHR5cGVcclxuICAgICAgICB0aGlzLnNlbmRyZWN2RGF0YUNoYW5uZWxDb250cm9sbGVyLnNldHVwRGF0YUNoYW5uZWwoKTtcclxuICAgICAgICB0aGlzLnNlbmRyZWN2RGF0YUNoYW5uZWxDb250cm9sbGVyLmhhbmRsZU9uTWVzc2FnZSA9IChldikgPT4gdGhpcy5oYW5kbGVPbk1lc3NhZ2UoZXYpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIHRoZSBSVEMgT2ZmZXIgU2Vzc2lvbiB0byB0aGUgU2lnbmFsaW5nIHNlcnZlciB2aWEgd2Vic29ja2V0XHJcbiAgICAgKiBAcGFyYW0gb2ZmZXIgLSBSVEMgU2Vzc2lvbiBEZXNjcmlwdGlvblxyXG4gICAgICovXHJcbiAgICBoYW5kbGVTZW5kV2ViUlRDT2ZmZXIob2ZmZXIpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdTZW5kaW5nIHRoZSBvZmZlciB0byB0aGUgU2VydmVyJywgNik7XHJcbiAgICAgICAgY29uc3QgZXh0cmFQYXJhbXMgPSB7XHJcbiAgICAgICAgICAgIG1pbkJpdHJhdGVCcHM6IDEwMDAgKiB0aGlzLmNvbmZpZy5nZXROdW1lcmljU2V0dGluZ1ZhbHVlKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fLk51bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ01pbkJpdHJhdGUpLFxyXG4gICAgICAgICAgICBtYXhCaXRyYXRlQnBzOiAxMDAwICogdGhpcy5jb25maWcuZ2V0TnVtZXJpY1NldHRpbmdWYWx1ZShfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfXy5OdW1lcmljUGFyYW1ldGVycy5XZWJSVENNYXhCaXRyYXRlKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLnNlbmRXZWJSdGNPZmZlcihvZmZlciwgZXh0cmFQYXJhbXMpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIHRoZSBSVEMgT2ZmZXIgU2Vzc2lvbiB0byB0aGUgU2lnbmFsaW5nIHNlcnZlciB2aWEgd2Vic29ja2V0XHJcbiAgICAgKiBAcGFyYW0gYW5zd2VyIC0gUlRDIFNlc3Npb24gRGVzY3JpcHRpb25cclxuICAgICAqL1xyXG4gICAgaGFuZGxlU2VuZFdlYlJUQ0Fuc3dlcihhbnN3ZXIpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdTZW5kaW5nIHRoZSBhbnN3ZXIgdG8gdGhlIFNlcnZlcicsIDYpO1xyXG4gICAgICAgIGNvbnN0IGV4dHJhUGFyYW1zID0ge1xyXG4gICAgICAgICAgICBtaW5CaXRyYXRlQnBzOiAxMDAwICogdGhpcy5jb25maWcuZ2V0TnVtZXJpY1NldHRpbmdWYWx1ZShfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfXy5OdW1lcmljUGFyYW1ldGVycy5XZWJSVENNaW5CaXRyYXRlKSxcclxuICAgICAgICAgICAgbWF4Qml0cmF0ZUJwczogMTAwMCAqIHRoaXMuY29uZmlnLmdldE51bWVyaWNTZXR0aW5nVmFsdWUoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18uTnVtZXJpY1BhcmFtZXRlcnMuV2ViUlRDTWF4Qml0cmF0ZSlcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5zZW5kV2ViUnRjQW5zd2VyKGFuc3dlciwgZXh0cmFQYXJhbXMpO1xyXG4gICAgICAgIGlmICh0aGlzLmlzVXNpbmdTRlUpIHtcclxuICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLnNlbmRXZWJSdGNEYXRhY2hhbm5lbFJlcXVlc3QoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgZnJlZXplIGZyYW1lIG92ZXJsYXkgdG8gdGhlIHBsYXllciBkaXZcclxuICAgICAqL1xyXG4gICAgc2V0VXBNb3VzZUFuZEZyZWV6ZUZyYW1lKCkge1xyXG4gICAgICAgIC8vIENhbGN1bGF0aW5nIGFuZCBub3JtYWxpemluZyBwb3NpdGlvbnMgZGVwZW5kcyBvbiB0aGUgd2lkdGggYW5kIGhlaWdodCBvZiB0aGUgcGxheWVyLlxyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50UGFyZW50Q2xpZW50UmVjdCA9IHRoaXMudmlkZW9QbGF5ZXJcclxuICAgICAgICAgICAgLmdldFZpZGVvUGFyZW50RWxlbWVudCgpXHJcbiAgICAgICAgICAgIC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICB0aGlzLmNvb3JkaW5hdGVDb252ZXJ0ZXIuc2V0dXBOb3JtYWxpemVBbmRRdWFudGl6ZSgpO1xyXG4gICAgICAgIHRoaXMuZnJlZXplRnJhbWVDb250cm9sbGVyLmZyZWV6ZUZyYW1lLnJlc2l6ZSgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDbG9zZSB0aGUgQ29ubmVjdGlvbiB0byB0aGUgc2lnbmFsaW5nIHNlcnZlclxyXG4gICAgICovXHJcbiAgICBjbG9zZVNpZ25hbGluZ1NlcnZlcihtZXNzYWdlKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIC8vIFdlIGV4cGxpY2l0bHkgY2FsbGVkIGNsb3NlLCB0aGVyZWZvcmUgd2UgZG9uJ3Qgd2FudCB0byB0cmlnZ2VyIGF1dG8gcmVjb25uZWN0XHJcbiAgICAgICAgdGhpcy5sb2NhbGx5Q2xvc2VkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnNob3VsZFJlY29ubmVjdCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZGlzY29ubmVjdE1lc3NhZ2UgPSBtZXNzYWdlO1xyXG4gICAgICAgIChfYSA9IHRoaXMud2ViU29ja2V0Q29udHJvbGxlcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNsb3NlKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENsb3NlIHRoZSBwZWVyIGNvbm5lY3Rpb25cclxuICAgICAqL1xyXG4gICAgY2xvc2VQZWVyQ29ubmVjdGlvbigpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgKF9hID0gdGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jbG9zZSgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDbG9zZSBhbGwgY29ubmVjdGlvbnNcclxuICAgICAqL1xyXG4gICAgY2xvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5jbG9zZVNpZ25hbGluZ1NlcnZlcignJyk7XHJcbiAgICAgICAgdGhpcy5jbG9zZVBlZXJDb25uZWN0aW9uKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEZpcmVzIGEgVmlkZW8gU3RhdHMgRXZlbnQgaW4gdGhlIFJUQyBQZWVyIENvbm5lY3Rpb25cclxuICAgICAqL1xyXG4gICAgZ2V0U3RhdHMoKSB7XHJcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIuZ2VuZXJhdGVTdGF0cygpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIGEgTGF0ZW5jeSBUZXN0IFJlcXVlc3QgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKi9cclxuICAgIHNlbmRMYXRlbmN5VGVzdCgpIHtcclxuICAgICAgICB0aGlzLmxhdGVuY3lTdGFydFRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIudG9TdHJlYW1lckhhbmRsZXJzLmdldCgnTGF0ZW5jeVRlc3QnKShbSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICAgICAgU3RhcnRUaW1lOiB0aGlzLmxhdGVuY3lTdGFydFRpbWVcclxuICAgICAgICAgICAgfSldKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2VuZCBhIERhdGEgQ2hhbm5lbCBMYXRlbmN5IFRlc3QgUmVxdWVzdCB0byB0aGUgVUUgSW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgc2VuZERhdGFDaGFubmVsTGF0ZW5jeVRlc3QoZGVzY3JpcHRvcikge1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIudG9TdHJlYW1lckhhbmRsZXJzLmdldCgnRGF0YUNoYW5uZWxMYXRlbmN5VGVzdCcpKFtKU09OLnN0cmluZ2lmeShkZXNjcmlwdG9yKV0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIHRoZSBNaW5RUCBlbmNvZGVyIHNldHRpbmcgdG8gdGhlIFVFIEluc3RhbmNlLlxyXG4gICAgICogQHBhcmFtIG1pblFQIC0gVGhlIGxvd2VyIGJvdW5kIGZvciBRUCB3aGVuIGVuY29kaW5nXHJcbiAgICAgKiB2YWxpZCB2YWx1ZXMgYXJlICgxLTUxKSB3aGVyZTpcclxuICAgICAqIDEgPSBCZXN0IHF1YWxpdHkgYnV0IGhpZ2hlc3QgYml0cmF0ZS5cclxuICAgICAqIDUxID0gV29yc3QgcXVhbGl0eSBidXQgbG93ZXN0IGJpdHJhdGUuXHJcbiAgICAgKiBCeSBkZWZhdWx0IHRoZSBtaW5RUCBpcyAxIG1lYW5pbmcgdGhlIGVuY29kZXIgaXMgZnJlZVxyXG4gICAgICogdG8gYWltIGZvciB0aGUgYmVzdCBxdWFsaXR5IGl0IGNhbiBvbiB0aGUgZ2l2ZW4gbmV0d29yayBsaW5rLlxyXG4gICAgICovXHJcbiAgICBzZW5kRW5jb2Rlck1pblFQKG1pblFQKSB7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgTWluUVA9JHttaW5RUH1cXG5gLCA2KTtcclxuICAgICAgICBpZiAobWluUVAgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ0NvbW1hbmQnKShbSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICAgICAgICAgICdFbmNvZGVyLk1pblFQJzogbWluUVBcclxuICAgICAgICAgICAgICAgIH0pXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIHRoZSBNYXhRUCBlbmNvZGVyIHNldHRpbmcgdG8gdGhlIFVFIEluc3RhbmNlLlxyXG4gICAgICogQHBhcmFtIG1heFFQIC0gVGhlIHVwcGVyIGJvdW5kIGZvciBRUCB3aGVuIGVuY29kaW5nXHJcbiAgICAgKiB2YWxpZCB2YWx1ZXMgYXJlICgxLTUxKSB3aGVyZTpcclxuICAgICAqIDEgPSBCZXN0IHF1YWxpdHkgYnV0IGhpZ2hlc3QgYml0cmF0ZS5cclxuICAgICAqIDUxID0gV29yc3QgcXVhbGl0eSBidXQgbG93ZXN0IGJpdHJhdGUuXHJcbiAgICAgKiBCeSBkZWZhdWx0IHRoZSBtYXhRUCBpcyA1MSBtZWFuaW5nIHRoZSBlbmNvZGVyIGlzIGZyZWVcclxuICAgICAqIHRvIGRyb3AgcXVhbGl0eSBhcyBsb3cgYXMgbmVlZGVkIG9uIHRoZSBnaXZlbiBuZXR3b3JrIGxpbmsuXHJcbiAgICAgKi9cclxuICAgIHNlbmRFbmNvZGVyTWF4UVAobWF4UVApIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBNYXhRUD0ke21heFFQfVxcbmAsIDYpO1xyXG4gICAgICAgIGlmIChtYXhRUCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIudG9TdHJlYW1lckhhbmRsZXJzLmdldCgnQ29tbWFuZCcpKFtKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgICAgICAgICAgJ0VuY29kZXIuTWF4UVAnOiBtYXhRUFxyXG4gICAgICAgICAgICAgICAgfSldKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgdGhlIHsgV2ViUlRDLk1pbkJpdHJhdGU6IFNvbWVOdW1iZXIgfX0gY29tbWFuZCB0byBVRSB0byBzZXRcclxuICAgICAqIHRoZSBtaW5pbXVtIGJpdHJhdGUgdGhhdCB3ZSBhbGxvdyBXZWJSVEMgdG8gdXNlXHJcbiAgICAgKiAobm90ZSBzZXR0aW5nIHRoaXMgdG9vIGhpZ2ggaW4gcG9vciBuZXR3b3JrcyBjYW4gYmUgcHJvYmxlbWF0aWMpLlxyXG4gICAgICogQHBhcmFtIG1pbkJpdHJhdGUgLSBUaGUgbWluaW11bSBiaXRyYXRlIHdlIHdvdWxkIGxpa2UgV2ViUlRDIHRvIG5vdCBmYWxsIGJlbG93LlxyXG4gICAgICovXHJcbiAgICBzZW5kV2ViUlRDTWluQml0cmF0ZShtaW5CaXRyYXRlKSB7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgV2ViUlRDIE1pbiBCaXRyYXRlPSR7bWluQml0cmF0ZX1gLCA2KTtcclxuICAgICAgICBpZiAobWluQml0cmF0ZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIudG9TdHJlYW1lckhhbmRsZXJzLmdldCgnQ29tbWFuZCcpKFtKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgICAgICAgICAgJ1dlYlJUQy5NaW5CaXRyYXRlJzogbWluQml0cmF0ZVxyXG4gICAgICAgICAgICAgICAgfSldKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgdGhlIHsgV2ViUlRDLk1heEJpdHJhdGU6IFNvbWVOdW1iZXIgfX0gY29tbWFuZCB0byBVRSB0byBzZXRcclxuICAgICAqIHRoZSBtaW5pbXVtIGJpdHJhdGUgdGhhdCB3ZSBhbGxvdyBXZWJSVEMgdG8gdXNlXHJcbiAgICAgKiAobm90ZSBzZXR0aW5nIHRoaXMgdG9vIGxvdyBjb3VsZCByZXN1bHQgaW4gYmxvY2t5IHZpZGVvKS5cclxuICAgICAqIEBwYXJhbSBtaW5CaXRyYXRlIC0gVGhlIG1pbmltdW0gYml0cmF0ZSB3ZSB3b3VsZCBsaWtlIFdlYlJUQyB0byBub3QgZmFsbCBiZWxvdy5cclxuICAgICAqL1xyXG4gICAgc2VuZFdlYlJUQ01heEJpdHJhdGUobWF4Qml0cmF0ZSkge1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYFdlYlJUQyBNYXggQml0cmF0ZT0ke21heEJpdHJhdGV9YCwgNik7XHJcbiAgICAgICAgaWYgKG1heEJpdHJhdGUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ0NvbW1hbmQnKShbSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICAgICAgICAgICdXZWJSVEMuTWF4Qml0cmF0ZSc6IG1heEJpdHJhdGVcclxuICAgICAgICAgICAgICAgIH0pXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIHRoZSB7IFdlYlJUQy5GcHM6IFNvbWVOdW1iZXIgfX0gVUUgNS4wK1xyXG4gICAgICogYW5kIHsgV2ViUlRDLk1heEZwcyB9IFVFIDQuMjcgY29tbWFuZCB0byBzZXRcclxuICAgICAqIHRoZSBtYXhpbXVtIGZwcyB3ZSB3b3VsZCBsaWtlIFdlYlJUQyB0byBzdHJlYW0gYXQuXHJcbiAgICAgKiBAcGFyYW0gZnBzIC0gVGhlIG1heGltdW0gc3RyZWFtIGZwcy5cclxuICAgICAqL1xyXG4gICAgc2VuZFdlYlJUQ0ZwcyhmcHMpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBXZWJSVEMgRlBTPSR7ZnBzfWAsIDYpO1xyXG4gICAgICAgIGlmIChmcHMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ0NvbW1hbmQnKShbSlNPTi5zdHJpbmdpZnkoeyAnV2ViUlRDLkZwcyc6IGZwcyB9KV0pO1xyXG4gICAgICAgICAgICAvKiBUT0RPOiBSZW1vdmUgd2hlbiBVRSA0LjI3IHVuc3VwcG9ydGVkLiAqL1xyXG4gICAgICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ0NvbW1hbmQnKShbSlNPTi5zdHJpbmdpZnkoeyAnV2ViUlRDLk1heEZwcyc6IGZwcyB9KV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2VuZHMgdGhlIFVJIERlc2NyaXB0b3IgYHN0YXQgZnBzYCB0byB0aGUgVUUgSW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgc2VuZFNob3dGcHMoKSB7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnLS0tLSAgIFNlbmRpbmcgc2hvdyBzdGF0IHRvIFVFICAgLS0tLScsIDYpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIudG9TdHJlYW1lckhhbmRsZXJzLmdldCgnQ29tbWFuZCcpKFtKU09OLnN0cmluZ2lmeSh7ICdzdGF0LmZwcyc6ICcnIH0pXSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgYW4gSWZyYW1lIHJlcXVlc3QgdG8gdGhlIHN0cmVhbWVyXHJcbiAgICAgKi9cclxuICAgIHNlbmRJZnJhbWVSZXF1ZXN0KCkge1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJy0tLS0gICBTZW5kaW5nIFJlcXVlc3QgZm9yIGFuIElGcmFtZSAgLS0tLScsIDYpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIudG9TdHJlYW1lckhhbmRsZXJzLmdldCgnSUZyYW1lUmVxdWVzdCcpKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgYSBVSUludGVyYWN0aW9uIG1lc3NhZ2VcclxuICAgICAqL1xyXG4gICAgZW1pdFVJSW50ZXJhY3Rpb24oZGVzY3JpcHRvcikge1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJy0tLS0gICBTZW5kaW5nIGN1c3RvbSBVSUludGVyYWN0aW9uIG1lc3NhZ2UgICAtLS0tJywgNik7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci50b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdVSUludGVyYWN0aW9uJykoW0pTT04uc3RyaW5naWZ5KGRlc2NyaXB0b3IpXSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgYSBDb21tYW5kIG1lc3NhZ2VcclxuICAgICAqL1xyXG4gICAgZW1pdENvbW1hbmQoZGVzY3JpcHRvcikge1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJy0tLS0gICBTZW5kaW5nIGN1c3RvbSBDb21tYW5kIG1lc3NhZ2UgICAtLS0tJywgNik7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci50b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdDb21tYW5kJykoW0pTT04uc3RyaW5naWZ5KGRlc2NyaXB0b3IpXSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgYSBjb25zb2xlIGNvbW1hbmQgbWVzc2FnZVxyXG4gICAgICovXHJcbiAgICBlbWl0Q29uc29sZUNvbW1hbmQoY29tbWFuZCkge1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJy0tLS0gICBTZW5kaW5nIGN1c3RvbSBDb21tYW5kOkNvbnNvbGVDb21tYW5kIG1lc3NhZ2UgICAtLS0tJywgNik7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci50b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdDb21tYW5kJykoW0pTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgICAgIENvbnNvbGVDb21tYW5kOiBjb21tYW5kLFxyXG4gICAgICAgICAgICB9KV0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kcyBhIHJlcXVlc3QgdG8gdGhlIFVFIEluc3RhbmNlIHRvIGhhdmUgb3duZXJzaGlwIG9mIFF1YWxpdHlcclxuICAgICAqL1xyXG4gICAgc2VuZFJlcXVlc3RRdWFsaXR5Q29udHJvbE93bmVyc2hpcCgpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICctLS0tICAgU2VuZGluZyBSZXF1ZXN0IHRvIENvbnRyb2wgUXVhbGl0eSAgLS0tLScsIDYpO1xyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzQ29udHJvbGxlci5TZW5kUmVxdWVzdFF1YWxpdHlDb250cm9sKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgd2hlbiBhIExhdGVuY3kgVGVzdCBSZXN1bHQgYXJlIHJlY2VpdmVkIGZyb20gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAtIExhdGVuY3kgVGVzdCBUaW1pbmdzXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZUxhdGVuY3lUZXN0UmVzdWx0KG1lc3NhZ2UpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdEYXRhQ2hhbm5lbFJlY2VpdmVNZXNzYWdlVHlwZS5sYXRlbmN5VGVzdCcsIDYpO1xyXG4gICAgICAgIGNvbnN0IGxhdGVuY3lBc1N0cmluZyA9IG5ldyBUZXh0RGVjb2RlcigndXRmLTE2JykuZGVjb2RlKG1lc3NhZ2Uuc2xpY2UoMSkpO1xyXG4gICAgICAgIGNvbnN0IGxhdGVuY3lUZXN0UmVzdWx0cyA9IG5ldyBfRGF0YUNoYW5uZWxfTGF0ZW5jeVRlc3RSZXN1bHRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xOF9fLkxhdGVuY3lUZXN0UmVzdWx0cygpO1xyXG4gICAgICAgIE9iamVjdC5hc3NpZ24obGF0ZW5jeVRlc3RSZXN1bHRzLCBKU09OLnBhcnNlKGxhdGVuY3lBc1N0cmluZykpO1xyXG4gICAgICAgIGxhdGVuY3lUZXN0UmVzdWx0cy5wcm9jZXNzRmllbGRzKCk7XHJcbiAgICAgICAgbGF0ZW5jeVRlc3RSZXN1bHRzLnRlc3RTdGFydFRpbWVNcyA9IHRoaXMubGF0ZW5jeVN0YXJ0VGltZTtcclxuICAgICAgICBsYXRlbmN5VGVzdFJlc3VsdHMuYnJvd3NlclJlY2VpcHRUaW1lTXMgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIGxhdGVuY3lUZXN0UmVzdWx0cy5sYXRlbmN5RXhjbHVkaW5nRGVjb2RlID0gfn4obGF0ZW5jeVRlc3RSZXN1bHRzLmJyb3dzZXJSZWNlaXB0VGltZU1zIC1cclxuICAgICAgICAgICAgbGF0ZW5jeVRlc3RSZXN1bHRzLnRlc3RTdGFydFRpbWVNcyk7XHJcbiAgICAgICAgbGF0ZW5jeVRlc3RSZXN1bHRzLnRlc3REdXJhdGlvbiA9IH5+KGxhdGVuY3lUZXN0UmVzdWx0cy5UcmFuc21pc3Npb25UaW1lTXMgLVxyXG4gICAgICAgICAgICBsYXRlbmN5VGVzdFJlc3VsdHMuUmVjZWlwdFRpbWVNcyk7XHJcbiAgICAgICAgbGF0ZW5jeVRlc3RSZXN1bHRzLm5ldHdvcmtMYXRlbmN5ID0gfn4obGF0ZW5jeVRlc3RSZXN1bHRzLmxhdGVuY3lFeGNsdWRpbmdEZWNvZGUgLVxyXG4gICAgICAgICAgICBsYXRlbmN5VGVzdFJlc3VsdHMudGVzdER1cmF0aW9uKTtcclxuICAgICAgICBpZiAobGF0ZW5jeVRlc3RSZXN1bHRzLmZyYW1lRGlzcGxheURlbHRhVGltZU1zICYmXHJcbiAgICAgICAgICAgIGxhdGVuY3lUZXN0UmVzdWx0cy5icm93c2VyUmVjZWlwdFRpbWVNcykge1xyXG4gICAgICAgICAgICBsYXRlbmN5VGVzdFJlc3VsdHMuZW5kVG9FbmRMYXRlbmN5ID1cclxuICAgICAgICAgICAgICAgIH5+KGxhdGVuY3lUZXN0UmVzdWx0cy5mcmFtZURpc3BsYXlEZWx0YVRpbWVNcyArXHJcbiAgICAgICAgICAgICAgICAgICAgbGF0ZW5jeVRlc3RSZXN1bHRzLm5ldHdvcmtMYXRlbmN5LFxyXG4gICAgICAgICAgICAgICAgICAgICtsYXRlbmN5VGVzdFJlc3VsdHMuQ2FwdHVyZVRvU2VuZE1zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5fb25MYXRlbmN5VGVzdFJlc3VsdChsYXRlbmN5VGVzdFJlc3VsdHMpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIHdoZW4gYSBEYXRhIENoYW5uZWwgTGF0ZW5jeSBUZXN0IFJlc3BvbnNlIGlzIHJlY2VpdmVkIGZyb20gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAtIERhdGEgQ2hhbm5lbCBMYXRlbmN5IFRlc3QgUmVzcG9uc2VcclxuICAgICAqL1xyXG4gICAgaGFuZGxlRGF0YUNoYW5uZWxMYXRlbmN5VGVzdFJlc3BvbnNlKG1lc3NhZ2UpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdEYXRhQ2hhbm5lbFJlY2VpdmVNZXNzYWdlVHlwZS5kYXRhQ2hhbm5lbExhdGVuY3lSZXNwb25zZScsIDYpO1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlQXNTdHJpbmcgPSBuZXcgVGV4dERlY29kZXIoJ3V0Zi0xNicpLmRlY29kZShtZXNzYWdlLnNsaWNlKDEpKTtcclxuICAgICAgICBjb25zdCBsYXRlbmN5VGVzdFJlc3BvbnNlID0gSlNPTi5wYXJzZShyZXNwb25zZUFzU3RyaW5nKTtcclxuICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLl9vbkRhdGFDaGFubmVsTGF0ZW5jeVRlc3RSZXNwb25zZShsYXRlbmN5VGVzdFJlc3BvbnNlKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB3aGVuIHRoZSBFbmNvZGVyIGFuZCBXZWIgUlRDIFNldHRpbmdzIGFyZSByZWNlaXZlZCBmcm9tIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgLSBJbml0aWFsIEVuY29kZXIgYW5kIFdlYiBSVEMgU2V0dGluZ3NcclxuICAgICAqL1xyXG4gICAgaGFuZGxlSW5pdGlhbFNldHRpbmdzKG1lc3NhZ2UpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdEYXRhQ2hhbm5lbFJlY2VpdmVNZXNzYWdlVHlwZS5Jbml0aWFsU2V0dGluZ3MnLCA2KTtcclxuICAgICAgICBjb25zdCBwYXlsb2FkQXNTdHJpbmcgPSBuZXcgVGV4dERlY29kZXIoJ3V0Zi0xNicpLmRlY29kZShtZXNzYWdlLnNsaWNlKDEpKTtcclxuICAgICAgICBjb25zdCBwYXJzZWRJbml0aWFsU2V0dGluZ3MgPSBKU09OLnBhcnNlKHBheWxvYWRBc1N0cmluZyk7XHJcbiAgICAgICAgY29uc3QgaW5pdGlhbFNldHRpbmdzID0gbmV3IF9EYXRhQ2hhbm5lbF9Jbml0aWFsU2V0dGluZ3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE5X18uSW5pdGlhbFNldHRpbmdzKCk7XHJcbiAgICAgICAgaWYgKHBhcnNlZEluaXRpYWxTZXR0aW5ncy5FbmNvZGVyKSB7XHJcbiAgICAgICAgICAgIGluaXRpYWxTZXR0aW5ncy5FbmNvZGVyU2V0dGluZ3MgPSBwYXJzZWRJbml0aWFsU2V0dGluZ3MuRW5jb2RlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBhcnNlZEluaXRpYWxTZXR0aW5ncy5XZWJSVEMpIHtcclxuICAgICAgICAgICAgaW5pdGlhbFNldHRpbmdzLldlYlJUQ1NldHRpbmdzID0gcGFyc2VkSW5pdGlhbFNldHRpbmdzLldlYlJUQztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBhcnNlZEluaXRpYWxTZXR0aW5ncy5QaXhlbFN0cmVhbWluZykge1xyXG4gICAgICAgICAgICBpbml0aWFsU2V0dGluZ3MuUGl4ZWxTdHJlYW1pbmdTZXR0aW5ncyA9XHJcbiAgICAgICAgICAgICAgICBwYXJzZWRJbml0aWFsU2V0dGluZ3MuUGl4ZWxTdHJlYW1pbmc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwYXJzZWRJbml0aWFsU2V0dGluZ3MuQ29uZmlnT3B0aW9ucyAmJiBwYXJzZWRJbml0aWFsU2V0dGluZ3MuQ29uZmlnT3B0aW9ucy5EZWZhdWx0VG9Ib3ZlciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLnNldEZsYWdFbmFibGVkKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fLkZsYWdzLkhvdmVyaW5nTW91c2VNb2RlLCAhIXBhcnNlZEluaXRpYWxTZXR0aW5ncy5Db25maWdPcHRpb25zLkRlZmF1bHRUb0hvdmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaW5pdGlhbFNldHRpbmdzLnVlQ29tcGF0aWJsZSgpO1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgcGF5bG9hZEFzU3RyaW5nLCA2KTtcclxuICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLl9vbkluaXRpYWxTZXR0aW5ncyhpbml0aWFsU2V0dGluZ3MpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIHdoZW4gdGhlIFF1YW50aXphdGlvbiBQYXJhbWV0ZXIgYXJlIHJlY2VpdmVkIGZyb20gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAtIEVuY29kZXJzIFF1YW50aXphdGlvbiBQYXJhbWV0ZXJcclxuICAgICAqL1xyXG4gICAgaGFuZGxlVmlkZW9FbmNvZGVyQXZnUVAobWVzc2FnZSkge1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ0RhdGFDaGFubmVsUmVjZWl2ZU1lc3NhZ2VUeXBlLlZpZGVvRW5jb2RlckF2Z1FQJywgNik7XHJcbiAgICAgICAgY29uc3QgQXZnUVAgPSBOdW1iZXIobmV3IFRleHREZWNvZGVyKCd1dGYtMTYnKS5kZWNvZGUobWVzc2FnZS5zbGljZSgxKSkpO1xyXG4gICAgICAgIHRoaXMuc2V0VmlkZW9FbmNvZGVyQXZnUVAoQXZnUVApO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIHdoZW4gdGhlIHZpZGVvIGVsZW1lbnQgaGFzIGJlZW4gbG9hZGVkIHdpdGggYSBzcmNPYmplY3RcclxuICAgICAqL1xyXG4gICAgaGFuZGxlVmlkZW9Jbml0aWFsaXplZCgpIHtcclxuICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLl9vblZpZGVvSW5pdGlhbGl6ZWQoKTtcclxuICAgICAgICAvLyBlaXRoZXIgYXV0b3BsYXkgdGhlIHZpZGVvIG9yIHNldCB1cCB0aGUgcGxheSBvdmVybGF5XHJcbiAgICAgICAgdGhpcy5hdXRvUGxheVZpZGVvT3JTZXRVcFBsYXlPdmVybGF5KCk7XHJcbiAgICAgICAgdGhpcy5yZXNpemVQbGF5ZXJTdHlsZSgpO1xyXG4gICAgICAgIHRoaXMudmlkZW9QbGF5ZXIudXBkYXRlVmlkZW9TdHJlYW1TaXplKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEZsYWcgc2V0IGlmIHRoZSB1c2VyIGhhcyBRdWFsaXR5IE93bmVyc2hpcFxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgLSBEb2VzIHRoZSBjdXJyZW50IGNsaWVudCBoYXZlIFF1YWxpdHkgT3duZXJzaGlwXHJcbiAgICAgKi9cclxuICAgIG9uUXVhbGl0eUNvbnRyb2xPd25lcnNoaXAobWVzc2FnZSkge1xyXG4gICAgICAgIGNvbnN0IHZpZXcgPSBuZXcgVWludDhBcnJheShtZXNzYWdlKTtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdEYXRhQ2hhbm5lbFJlY2VpdmVNZXNzYWdlVHlwZS5RdWFsaXR5Q29udHJvbE93bmVyc2hpcCcsIDYpO1xyXG4gICAgICAgIHRoaXMuaXNRdWFsaXR5Q29udHJvbGxlciA9IG5ldyBCb29sZWFuKHZpZXdbMV0pLnZhbHVlT2YoKTtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBSZWNlaXZlZCBxdWFsaXR5IGNvbnRyb2xsZXIgbWVzc2FnZSwgd2lsbCBjb250cm9sIHF1YWxpdHk6ICR7dGhpcy5pc1F1YWxpdHlDb250cm9sbGVyfWApO1xyXG4gICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuX29uUXVhbGl0eUNvbnRyb2xPd25lcnNoaXAodGhpcy5pc1F1YWxpdHlDb250cm9sbGVyKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB3aGVuIHRoZSBBZ2dyZWdhdGVkIHN0YXRzIGFyZSBDb2xsZWN0ZWRcclxuICAgICAqIEBwYXJhbSBzdGF0cyAtIEFnZ3JlZ2F0ZWQgU3RhdHNcclxuICAgICAqL1xyXG4gICAgaGFuZGxlVmlkZW9TdGF0cyhzdGF0cykge1xyXG4gICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuX29uVmlkZW9TdGF0cyhzdGF0cyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRvIFJlc2l6ZSB0aGUgVmlkZW8gUGxheWVyIGVsZW1lbnRcclxuICAgICAqL1xyXG4gICAgcmVzaXplUGxheWVyU3R5bGUoKSB7XHJcbiAgICAgICAgdGhpcy52aWRlb1BsYXllci5yZXNpemVQbGF5ZXJTdHlsZSgpO1xyXG4gICAgfVxyXG4gICAgc2V0UHJlZmVycmVkQ29kZWMoY29kZWMpIHtcclxuICAgICAgICB0aGlzLnByZWZlcnJlZENvZGVjID0gY29kZWM7XHJcbiAgICAgICAgaWYgKHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLnByZWZlcnJlZENvZGVjID0gY29kZWM7XHJcbiAgICAgICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLnVwZGF0ZUNvZGVjU2VsZWN0aW9uID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2V0VmlkZW9FbmNvZGVyQXZnUVAoYXZnUVApIHtcclxuICAgICAgICB0aGlzLnZpZGVvQXZnUXAgPSBhdmdRUDtcclxuICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLl9vblZpZGVvRW5jb2RlckF2Z1FQKHRoaXMudmlkZW9BdmdRcCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGVuYWJsZXMvZGlzYWJsZXMga2V5Ym9hcmQgZXZlbnQgbGlzdGVuZXJzXHJcbiAgICAgKi9cclxuICAgIHNldEtleWJvYXJkSW5wdXRFbmFibGVkKGlzRW5hYmxlZCkge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICAoX2EgPSB0aGlzLmtleWJvYXJkQ29udHJvbGxlcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnVucmVnaXN0ZXJLZXlCb2FyZEV2ZW50cygpO1xyXG4gICAgICAgIGlmIChpc0VuYWJsZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5rZXlib2FyZENvbnRyb2xsZXIgPSB0aGlzLmlucHV0Q2xhc3Nlc0ZhY3RvcnkucmVnaXN0ZXJLZXlCb2FyZCh0aGlzLmNvbmZpZyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBlbmFibGVzL2Rpc2FibGVzIG1vdXNlIGV2ZW50IGxpc3RlbmVyc1xyXG4gICAgICovXHJcbiAgICBzZXRNb3VzZUlucHV0RW5hYmxlZChpc0VuYWJsZWQpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgKF9hID0gdGhpcy5tb3VzZUNvbnRyb2xsZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS51bnJlZ2lzdGVyTW91c2VFdmVudHMoKTtcclxuICAgICAgICBpZiAoaXNFbmFibGVkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1vdXNlTW9kZSA9IHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18uRmxhZ3MuSG92ZXJpbmdNb3VzZU1vZGUpXHJcbiAgICAgICAgICAgICAgICA/IF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fLkNvbnRyb2xTY2hlbWVUeXBlLkhvdmVyaW5nTW91c2VcclxuICAgICAgICAgICAgICAgIDogX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18uQ29udHJvbFNjaGVtZVR5cGUuTG9ja2VkTW91c2U7XHJcbiAgICAgICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyID1cclxuICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRDbGFzc2VzRmFjdG9yeS5yZWdpc3Rlck1vdXNlKG1vdXNlTW9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBlbmFibGVzL2Rpc2FibGVzIHRvdWNoIGV2ZW50IGxpc3RlbmVyc1xyXG4gICAgICovXHJcbiAgICBzZXRUb3VjaElucHV0RW5hYmxlZChpc0VuYWJsZWQpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgKF9hID0gdGhpcy50b3VjaENvbnRyb2xsZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS51bnJlZ2lzdGVyVG91Y2hFdmVudHMoKTtcclxuICAgICAgICBpZiAoaXNFbmFibGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMudG91Y2hDb250cm9sbGVyID0gdGhpcy5pbnB1dENsYXNzZXNGYWN0b3J5LnJlZ2lzdGVyVG91Y2godGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfXy5GbGFncy5GYWtlTW91c2VXaXRoVG91Y2hlcyksIHRoaXMudmlkZW9FbGVtZW50UGFyZW50Q2xpZW50UmVjdCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBlbmFibGVzL2Rpc2FibGVzIGdhbWUgcGFkIGV2ZW50IGxpc3RlbmVyc1xyXG4gICAgICovXHJcbiAgICBzZXRHYW1lUGFkSW5wdXRFbmFibGVkKGlzRW5hYmxlZCkge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICAoX2EgPSB0aGlzLmdhbWVQYWRDb250cm9sbGVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudW5yZWdpc3RlckdhbWVQYWRFdmVudHMoKTtcclxuICAgICAgICBpZiAoaXNFbmFibGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZVBhZENvbnRyb2xsZXIgPSB0aGlzLmlucHV0Q2xhc3Nlc0ZhY3RvcnkucmVnaXN0ZXJHYW1lUGFkKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZVBhZENvbnRyb2xsZXIub25HYW1lcGFkQ29ubmVjdGVkID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci50b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdHYW1lcGFkQ29ubmVjdGVkJykoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdGhpcy5nYW1lUGFkQ29udHJvbGxlci5vbkdhbWVwYWREaXNjb25uZWN0ZWQgPSAoY29udHJvbGxlcklkeCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci50b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdHYW1lcGFkRGlzY29ubmVjdGVkJykoW2NvbnRyb2xsZXJJZHhdKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZWdpc3RlckRhdGFDaGFubmVsRXZlbnRFbWl0dGVycyhkYXRhQ2hhbm5lbCkge1xyXG4gICAgICAgIGRhdGFDaGFubmVsLm9uT3BlbiA9IChsYWJlbCwgZXZlbnQpID0+IHRoaXMucGl4ZWxTdHJlYW1pbmcuZGlzcGF0Y2hFdmVudChuZXcgX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkRhdGFDaGFubmVsT3BlbkV2ZW50KHsgbGFiZWwsIGV2ZW50IH0pKTtcclxuICAgICAgICBkYXRhQ2hhbm5lbC5vbkNsb3NlID0gKGxhYmVsLCBldmVudCkgPT4gdGhpcy5waXhlbFN0cmVhbWluZy5kaXNwYXRjaEV2ZW50KG5ldyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uRGF0YUNoYW5uZWxDbG9zZUV2ZW50KHsgbGFiZWwsIGV2ZW50IH0pKTtcclxuICAgICAgICBkYXRhQ2hhbm5lbC5vbkVycm9yID0gKGxhYmVsLCBldmVudCkgPT4gdGhpcy5waXhlbFN0cmVhbWluZy5kaXNwYXRjaEV2ZW50KG5ldyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uRGF0YUNoYW5uZWxFcnJvckV2ZW50KHsgbGFiZWwsIGV2ZW50IH0pKTtcclxuICAgIH1cclxuICAgIHJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIobmFtZSwgZGlyZWN0aW9uLCBoYW5kbGVyKSB7XHJcbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uTWVzc2FnZURpcmVjdGlvbi5Gcm9tU3RyZWFtZXIgJiYgdHlwZW9mIGhhbmRsZXIgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5XYXJuaW5nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBVbmFibGUgdG8gcmVnaXN0ZXIgaGFuZGxlciBmb3IgJHtuYW1lfSBhcyBubyBoYW5kbGVyIHdhcyBwYXNzZWRgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKGRpcmVjdGlvbiwgbmFtZSwgKGRhdGEpID0+ICh0eXBlb2YgaGFuZGxlciA9PT0gJ3VuZGVmaW5lZCcgJiYgZGlyZWN0aW9uID09PSBfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIpID9cclxuICAgICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKG5hbWUsIGRhdGEpIDpcclxuICAgICAgICAgICAgaGFuZGxlcihkYXRhKSk7XHJcbiAgICB9XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL1dlYlNvY2tldHMvTWVzc2FnZVJlY2VpdmUudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9XZWJTb2NrZXRzL01lc3NhZ2VSZWNlaXZlLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiTWVzc2FnZUFuc3dlclwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBNZXNzYWdlQW5zd2VyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJNZXNzYWdlQXV0aFJlcXVpcmVkXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIE1lc3NhZ2VBdXRoUmVxdWlyZWQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIk1lc3NhZ2VDb25maWdcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gTWVzc2FnZUNvbmZpZyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiTWVzc2FnZUljZUNhbmRpZGF0ZVwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBNZXNzYWdlSWNlQ2FuZGlkYXRlKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJNZXNzYWdlT2ZmZXJcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gTWVzc2FnZU9mZmVyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJNZXNzYWdlT25TY3JlZW5LZXlib2FyZFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBNZXNzYWdlT25TY3JlZW5LZXlib2FyZCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiTWVzc2FnZVBlZXJEYXRhQ2hhbm5lbHNcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gTWVzc2FnZVBlZXJEYXRhQ2hhbm5lbHMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIk1lc3NhZ2VQbGF5ZXJDb3VudFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBNZXNzYWdlUGxheWVyQ291bnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIk1lc3NhZ2VSZWN2XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIE1lc3NhZ2VSZWN2KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJNZXNzYWdlUmVjdlR5cGVzXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIE1lc3NhZ2VSZWN2VHlwZXMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIk1lc3NhZ2VTdHJlYW1lcklEQ2hhbmdlZFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBNZXNzYWdlU3RyZWFtZXJJRENoYW5nZWQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIk1lc3NhZ2VTdHJlYW1lckxpc3RcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gTWVzc2FnZVN0cmVhbWVyTGlzdClcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuLyoqXHJcbiAqIFRoZSBUeXBlcyBvZiBNZXNzYWdlcyB0aGF0IHdpbGwgYmUgcmVjZWl2ZWRcclxuICovXHJcbnZhciBNZXNzYWdlUmVjdlR5cGVzO1xyXG4oZnVuY3Rpb24gKE1lc3NhZ2VSZWN2VHlwZXMpIHtcclxuICAgIE1lc3NhZ2VSZWN2VHlwZXNbXCJDT05GSUdcIl0gPSBcImNvbmZpZ1wiO1xyXG4gICAgTWVzc2FnZVJlY3ZUeXBlc1tcIlNUUkVBTUVSX0xJU1RcIl0gPSBcInN0cmVhbWVyTGlzdFwiO1xyXG4gICAgTWVzc2FnZVJlY3ZUeXBlc1tcIlNUUkVBTUVSX0lEX0NIQU5HRURcIl0gPSBcInN0cmVhbWVySURDaGFuZ2VkXCI7XHJcbiAgICBNZXNzYWdlUmVjdlR5cGVzW1wiUExBWUVSX0NPVU5UXCJdID0gXCJwbGF5ZXJDb3VudFwiO1xyXG4gICAgTWVzc2FnZVJlY3ZUeXBlc1tcIk9GRkVSXCJdID0gXCJvZmZlclwiO1xyXG4gICAgTWVzc2FnZVJlY3ZUeXBlc1tcIkFOU1dFUlwiXSA9IFwiYW5zd2VyXCI7XHJcbiAgICBNZXNzYWdlUmVjdlR5cGVzW1wiSUNFX0NBTkRJREFURVwiXSA9IFwiaWNlQ2FuZGlkYXRlXCI7XHJcbiAgICBNZXNzYWdlUmVjdlR5cGVzW1wiUEVFUl9EQVRBX0NIQU5ORUxTXCJdID0gXCJwZWVyRGF0YUNoYW5uZWxzXCI7XHJcbiAgICBNZXNzYWdlUmVjdlR5cGVzW1wiUElOR1wiXSA9IFwicGluZ1wiO1xyXG4gICAgTWVzc2FnZVJlY3ZUeXBlc1tcIldBUk5JTkdcIl0gPSBcIndhcm5pbmdcIjtcclxufSkoTWVzc2FnZVJlY3ZUeXBlcyB8fCAoTWVzc2FnZVJlY3ZUeXBlcyA9IHt9KSk7XHJcbi8qKlxyXG4gKiBDb25jcmV0ZSBSZWNlaXZlZCBNZXNzYWdlIHdyYXBwZXJcclxuICovXHJcbmNsYXNzIE1lc3NhZ2VSZWN2IHtcclxufVxyXG4vKipcclxuICogQXV0aGVudGljYXRpb24gUmVxdWlyZWQgTWVzc2FnZSB3cmFwcGVyXHJcbiAqL1xyXG5jbGFzcyBNZXNzYWdlQXV0aFJlcXVpcmVkIGV4dGVuZHMgTWVzc2FnZVJlY3Yge1xyXG59XHJcbi8qKlxyXG4gKiBDb25maWcgTWVzc2FnZSBXcmFwcGVyXHJcbiAqL1xyXG5jbGFzcyBNZXNzYWdlQ29uZmlnIGV4dGVuZHMgTWVzc2FnZVJlY3Yge1xyXG59XHJcbi8qKlxyXG4gKiBTdHJlYW1lciBMaXN0IE1lc3NhZ2UgV3JhcHBlclxyXG4gKi9cclxuY2xhc3MgTWVzc2FnZVN0cmVhbWVyTGlzdCBleHRlbmRzIE1lc3NhZ2VSZWN2IHtcclxufVxyXG4vKipcclxuICogU3RyZWFtZXIgSUQgQ2hhbmdlZCBNZXNzYWdlIFdyYXBwZXJcclxuICovXHJcbmNsYXNzIE1lc3NhZ2VTdHJlYW1lcklEQ2hhbmdlZCBleHRlbmRzIE1lc3NhZ2VSZWN2IHtcclxufVxyXG4vKipcclxuICogUGxheWVyIENvdW50IE1lc3NhZ2Ugd3JhcHBlclxyXG4gKi9cclxuY2xhc3MgTWVzc2FnZVBsYXllckNvdW50IGV4dGVuZHMgTWVzc2FnZVJlY3Yge1xyXG59XHJcbi8qKlxyXG4gKiBXZWIgUlRDIG9mZmVyIEFuc3dlciBNZXNzYWdlIHdyYXBwZXJcclxuICovXHJcbmNsYXNzIE1lc3NhZ2VBbnN3ZXIgZXh0ZW5kcyBNZXNzYWdlUmVjdiB7XHJcbn1cclxuLyoqXHJcbiAqIFdlYlJUQyBzZHAgb2ZmZXIgTWVzc2FnZSB3cmFwcGVyLlxyXG4gKi9cclxuY2xhc3MgTWVzc2FnZU9mZmVyIGV4dGVuZHMgTWVzc2FnZVJlY3Yge1xyXG59XHJcbi8qKlxyXG4gKiBJY2UgQ2FuZGlkYXRlIE1lc3NhZ2Ugd3JhcHBlclxyXG4gKi9cclxuY2xhc3MgTWVzc2FnZUljZUNhbmRpZGF0ZSBleHRlbmRzIE1lc3NhZ2VSZWN2IHtcclxufVxyXG4vKipcclxuICogUGVlciBEYXRhIENoYW5uZWxzIE1lc3NhZ2Ugd3JhcHBlclxyXG4gKi9cclxuY2xhc3MgTWVzc2FnZVBlZXJEYXRhQ2hhbm5lbHMgZXh0ZW5kcyBNZXNzYWdlUmVjdiB7XHJcbn1cclxuY2xhc3MgTWVzc2FnZU9uU2NyZWVuS2V5Ym9hcmQge1xyXG59XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9XZWJTb2NrZXRzL01lc3NhZ2VTZW5kLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvV2ViU29ja2V0cy9NZXNzYWdlU2VuZC50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIk1lc3NhZ2VJY2VDYW5kaWRhdGVcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gTWVzc2FnZUljZUNhbmRpZGF0ZSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiTWVzc2FnZUxpc3RTdHJlYW1lcnNcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gTWVzc2FnZUxpc3RTdHJlYW1lcnMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIk1lc3NhZ2VQb25nXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIE1lc3NhZ2VQb25nKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJNZXNzYWdlU0ZVUmVjdkRhdGFDaGFubmVsUmVhZHlcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gTWVzc2FnZVNGVVJlY3ZEYXRhQ2hhbm5lbFJlYWR5KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJNZXNzYWdlU2VuZFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBNZXNzYWdlU2VuZCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiTWVzc2FnZVNlbmRUeXBlc1wiOiAoKSA9PiAoLyogYmluZGluZyAqLyBNZXNzYWdlU2VuZFR5cGVzKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJNZXNzYWdlU3Vic2NyaWJlXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIE1lc3NhZ2VTdWJzY3JpYmUpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIk1lc3NhZ2VVbnN1YnNjcmliZVwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBNZXNzYWdlVW5zdWJzY3JpYmUpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIk1lc3NhZ2VXZWJSVENBbnN3ZXJcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gTWVzc2FnZVdlYlJUQ0Fuc3dlciksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiTWVzc2FnZVdlYlJUQ0RhdGFjaGFubmVsUmVxdWVzdFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBNZXNzYWdlV2ViUlRDRGF0YWNoYW5uZWxSZXF1ZXN0KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJNZXNzYWdlV2ViUlRDT2ZmZXJcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gTWVzc2FnZVdlYlJUQ09mZmVyKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL0xvZ2dlci9Mb2dnZXIgKi8gXCIuL3NyYy9Mb2dnZXIvTG9nZ2VyLnRzXCIpO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcbi8qKlxyXG4gKiBUaGUgU2VuZCBUeXBlcyB0aGF0IGFyZSBwdXNoZWQgZnJvbSB0aGUgc2lnbmFsaW5nIHNlcnZlclxyXG4gKi9cclxudmFyIE1lc3NhZ2VTZW5kVHlwZXM7XHJcbihmdW5jdGlvbiAoTWVzc2FnZVNlbmRUeXBlcykge1xyXG4gICAgTWVzc2FnZVNlbmRUeXBlc1tcIkxJU1RfU1RSRUFNRVJTXCJdID0gXCJsaXN0U3RyZWFtZXJzXCI7XHJcbiAgICBNZXNzYWdlU2VuZFR5cGVzW1wiU1VCU0NSSUJFXCJdID0gXCJzdWJzY3JpYmVcIjtcclxuICAgIE1lc3NhZ2VTZW5kVHlwZXNbXCJVTlNVQlNDUklCRVwiXSA9IFwidW5zdWJzY3JpYmVcIjtcclxuICAgIE1lc3NhZ2VTZW5kVHlwZXNbXCJJQ0VfQ0FORElEQVRFXCJdID0gXCJpY2VDYW5kaWRhdGVcIjtcclxuICAgIE1lc3NhZ2VTZW5kVHlwZXNbXCJPRkZFUlwiXSA9IFwib2ZmZXJcIjtcclxuICAgIE1lc3NhZ2VTZW5kVHlwZXNbXCJBTlNXRVJcIl0gPSBcImFuc3dlclwiO1xyXG4gICAgTWVzc2FnZVNlbmRUeXBlc1tcIkRBVEFDSEFOTkVMUkVRVUVTVFwiXSA9IFwiZGF0YUNoYW5uZWxSZXF1ZXN0XCI7XHJcbiAgICBNZXNzYWdlU2VuZFR5cGVzW1wiU0ZVUkVDVkRBVEFDSEFOTkVMUkVBRFlcIl0gPSBcInBlZXJEYXRhQ2hhbm5lbHNSZWFkeVwiO1xyXG4gICAgTWVzc2FnZVNlbmRUeXBlc1tcIlBPTkdcIl0gPSBcInBvbmdcIjtcclxufSkoTWVzc2FnZVNlbmRUeXBlcyB8fCAoTWVzc2FnZVNlbmRUeXBlcyA9IHt9KSk7XHJcbi8qKlxyXG4gKiBBIFdyYXBwZXIgZm9yIHRoZSBtZXNzYWdlIHRvIHNlbmQgdG8gdGhlIHNpZ25hbGluZyBzZXJ2ZXJcclxuICovXHJcbmNsYXNzIE1lc3NhZ2VTZW5kIHtcclxuICAgIC8qKlxyXG4gICAgICogQSBmaWx0ZXIgZm9yIGNvbnRyb2xsaW5nIHdoYXQgcGFyYW1ldGVycyB0byBhY3R1YWxseSBzZW5kLlxyXG4gICAgICogR29vZCBmb3IgZXhjbHVkaW5nIGRlZmF1bHQgdmFsdWVzIG9yIGhpZGRlbiBpbnRlcm5hbHMuXHJcbiAgICAgKiBFeGFtcGxlIGZvciBpbmNsdWRpbmcgZXZlcnl0aGluZyBidXQgemVybyBiaXRyYXRlIGZpZWxkcy4uLlxyXG4gICAgICogc2VuZEZpbHRlcihrZXk6IHN0cmluZywgdmFsdWU6IGFueSkge1xyXG4gICAgICogICBpZiAoKGtleSA9PSBcIm1pbkJpdHJhdGVcIiB8fCBrZXkgPT0gXCJtYXhCaXRyYXRlXCIpICYmIHZhbHVlIDw9IDApIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgKiAgIHJldHVybiB2YWx1ZTtcclxuICAgICAqIH1cclxuICAgICAqIFJldHVybiB1bmRlZmluZWQgdG8gZXhjbHVkZSB0aGUgcHJvcGVydHkgY29tcGxldGVseS5cclxuICAgICAqL1xyXG4gICAgc2VuZEZpbHRlcihrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUdXJucyB0aGUgd3JhcHBlciBpbnRvIGEgSlNPTiBTdHJpbmdcclxuICAgICAqIEByZXR1cm5zIC0gSlNPTiBTdHJpbmcgb2YgdGhlIE1lc3NhZ2UgdG8gc2VuZFxyXG4gICAgICovXHJcbiAgICBwYXlsb2FkKCkge1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdTZW5kaW5nID0+IFxcbicgKyBKU09OLnN0cmluZ2lmeSh0aGlzLCB0aGlzLnNlbmRGaWx0ZXIsIDQpLCA2KTtcclxuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcywgdGhpcy5zZW5kRmlsdGVyKTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBNZXNzYWdlTGlzdFN0cmVhbWVycyBleHRlbmRzIE1lc3NhZ2VTZW5kIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy50eXBlID0gTWVzc2FnZVNlbmRUeXBlcy5MSVNUX1NUUkVBTUVSUztcclxuICAgIH1cclxufVxyXG5jbGFzcyBNZXNzYWdlU3Vic2NyaWJlIGV4dGVuZHMgTWVzc2FnZVNlbmQge1xyXG4gICAgY29uc3RydWN0b3Ioc3RyZWFtZXJpZCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy50eXBlID0gTWVzc2FnZVNlbmRUeXBlcy5TVUJTQ1JJQkU7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1lcklkID0gc3RyZWFtZXJpZDtcclxuICAgIH1cclxufVxyXG5jbGFzcyBNZXNzYWdlVW5zdWJzY3JpYmUgZXh0ZW5kcyBNZXNzYWdlU2VuZCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IE1lc3NhZ2VTZW5kVHlwZXMuVU5TVUJTQ1JJQkU7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEluc3RhbmNlIFJlcXVlc3QgTWVzc2FnZSBXcmFwcGVyXHJcbiAqL1xyXG5jbGFzcyBNZXNzYWdlUG9uZyBleHRlbmRzIE1lc3NhZ2VTZW5kIHtcclxuICAgIGNvbnN0cnVjdG9yKHRpbWUpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IE1lc3NhZ2VTZW5kVHlwZXMuUE9ORztcclxuICAgICAgICB0aGlzLnRpbWUgPSB0aW1lO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiAgV2ViIFJUQyBPZmZlciBtZXNzYWdlIHdyYXBwZXJcclxuICovXHJcbmNsYXNzIE1lc3NhZ2VXZWJSVENPZmZlciBleHRlbmRzIE1lc3NhZ2VTZW5kIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIG9mZmVyIC0gR2VuZXJhdGVkIFdlYiBSVEMgT2ZmZXJcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3Iob2ZmZXIsIGV4dHJhUGFyYW1zKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLnR5cGUgPSBNZXNzYWdlU2VuZFR5cGVzLk9GRkVSO1xyXG4gICAgICAgIHRoaXMubWluQml0cmF0ZSA9IDA7XHJcbiAgICAgICAgdGhpcy5tYXhCaXRyYXRlID0gMDtcclxuICAgICAgICBpZiAob2ZmZXIpIHtcclxuICAgICAgICAgICAgdGhpcy50eXBlID0gb2ZmZXIudHlwZTtcclxuICAgICAgICAgICAgdGhpcy5zZHAgPSBvZmZlci5zZHA7XHJcbiAgICAgICAgICAgIHRoaXMubWluQml0cmF0ZSA9IGV4dHJhUGFyYW1zLm1pbkJpdHJhdGVCcHM7XHJcbiAgICAgICAgICAgIHRoaXMubWF4Qml0cmF0ZSA9IGV4dHJhUGFyYW1zLm1heEJpdHJhdGVCcHM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2VuZEZpbHRlcihrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKChrZXkgPT0gXCJtaW5CaXRyYXRlXCIgfHwga2V5ID09IFwibWF4Qml0cmF0ZVwiKSAmJiB2YWx1ZSA8PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogIFdlYiBSVEMgQW5zd2VyIG1lc3NhZ2Ugd3JhcHBlclxyXG4gKi9cclxuY2xhc3MgTWVzc2FnZVdlYlJUQ0Fuc3dlciBleHRlbmRzIE1lc3NhZ2VTZW5kIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGFuc3dlciAtIEdlbmVyYXRlZCBXZWIgUlRDIE9mZmVyXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGFuc3dlciwgZXh0cmFQYXJhbXMpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IE1lc3NhZ2VTZW5kVHlwZXMuQU5TV0VSO1xyXG4gICAgICAgIHRoaXMubWluQml0cmF0ZSA9IDA7XHJcbiAgICAgICAgdGhpcy5tYXhCaXRyYXRlID0gMDtcclxuICAgICAgICBpZiAoYW5zd2VyKSB7XHJcbiAgICAgICAgICAgIHRoaXMudHlwZSA9IGFuc3dlci50eXBlO1xyXG4gICAgICAgICAgICB0aGlzLnNkcCA9IGFuc3dlci5zZHA7XHJcbiAgICAgICAgICAgIHRoaXMubWluQml0cmF0ZSA9IGV4dHJhUGFyYW1zLm1pbkJpdHJhdGVCcHM7XHJcbiAgICAgICAgICAgIHRoaXMubWF4Qml0cmF0ZSA9IGV4dHJhUGFyYW1zLm1heEJpdHJhdGVCcHM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2VuZEZpbHRlcihrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKChrZXkgPT0gXCJtaW5CaXRyYXRlXCIgfHwga2V5ID09IFwibWF4Qml0cmF0ZVwiKSAmJiB2YWx1ZSA8PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogIFdlYiBSVEMgRGF0YSBjaGFubmVsIHJlcXVlc3QgbWVzc2FnZSB3cmFwcGVyXHJcbiAqL1xyXG5jbGFzcyBNZXNzYWdlV2ViUlRDRGF0YWNoYW5uZWxSZXF1ZXN0IGV4dGVuZHMgTWVzc2FnZVNlbmQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLnR5cGUgPSBNZXNzYWdlU2VuZFR5cGVzLkRBVEFDSEFOTkVMUkVRVUVTVDtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogIFdlYiBSVEMgU0ZVIERhdGEgY2hhbm5lbCByZWFkeSBtZXNzYWdlIHdyYXBwZXJcclxuICovXHJcbmNsYXNzIE1lc3NhZ2VTRlVSZWN2RGF0YUNoYW5uZWxSZWFkeSBleHRlbmRzIE1lc3NhZ2VTZW5kIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy50eXBlID0gTWVzc2FnZVNlbmRUeXBlcy5TRlVSRUNWREFUQUNIQU5ORUxSRUFEWTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogUlRDIEljZSBDYW5kaWRhdGUgV3JhcHBlclxyXG4gKi9cclxuY2xhc3MgTWVzc2FnZUljZUNhbmRpZGF0ZSB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBjYW5kaWRhdGUgLSBSVEMgSWNlIENhbmRpZGF0ZVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihjYW5kaWRhdGUpIHtcclxuICAgICAgICB0aGlzLnR5cGUgPSBNZXNzYWdlU2VuZFR5cGVzLklDRV9DQU5ESURBVEU7XHJcbiAgICAgICAgdGhpcy5jYW5kaWRhdGUgPSBjYW5kaWRhdGU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFR1cm5zIHRoZSB3cmFwcGVyIGludG8gYSBKU09OIFN0cmluZ1xyXG4gICAgICogQHJldHVybnMgLSBKU09OIFN0cmluZyBvZiB0aGUgTWVzc2FnZSB0byBzZW5kXHJcbiAgICAgKi9cclxuICAgIHBheWxvYWQoKSB7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ1NlbmRpbmcgPT4gXFxuJyArIEpTT04uc3RyaW5naWZ5KHRoaXMsIHVuZGVmaW5lZCwgNCksIDYpO1xyXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzKTtcclxuICAgIH1cclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvV2ViU29ja2V0cy9TaWduYWxsaW5nUHJvdG9jb2wudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvV2ViU29ja2V0cy9TaWduYWxsaW5nUHJvdG9jb2wudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiU2lnbmFsbGluZ1Byb3RvY29sXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFNpZ25hbGxpbmdQcm90b2NvbClcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9Mb2dnZXIvTG9nZ2VyICovIFwiLi9zcmMvTG9nZ2VyL0xvZ2dlci50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTWVzc2FnZVJlY2VpdmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vTWVzc2FnZVJlY2VpdmUgKi8gXCIuL3NyYy9XZWJTb2NrZXRzL01lc3NhZ2VSZWNlaXZlLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9NZXNzYWdlU2VuZF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9NZXNzYWdlU2VuZCAqLyBcIi4vc3JjL1dlYlNvY2tldHMvTWVzc2FnZVNlbmQudHNcIik7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuXHJcblxyXG4vKipcclxuICogU2lnbmFsbGluZyBwcm90b2NvbCBmb3IgaGFuZGxpbmcgbWVzc2FnZXMgZnJvbSB0aGUgc2lnbmFsbGluZyBzZXJ2ZXIuXHJcbiAqL1xyXG5jbGFzcyBTaWduYWxsaW5nUHJvdG9jb2wge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5Gcm9tVUVNZXNzYWdlSGFuZGxlcnMgPSBuZXcgTWFwKCk7XHJcbiAgICB9XHJcbiAgICBhZGRNZXNzYWdlSGFuZGxlcihtZXNzYWdlSWQsIG1lc3NhZ2VIYW5kbGVyKSB7XHJcbiAgICAgICAgdGhpcy5Gcm9tVUVNZXNzYWdlSGFuZGxlcnMuc2V0KG1lc3NhZ2VJZCwgbWVzc2FnZUhhbmRsZXIpO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlTWVzc2FnZShtZXNzYWdlSWQsIG1lc3NhZ2VEYXRhKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuRnJvbVVFTWVzc2FnZUhhbmRsZXJzLmhhcyhtZXNzYWdlSWQpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuRnJvbVVFTWVzc2FnZUhhbmRsZXJzLmdldChtZXNzYWdlSWQpKG1lc3NhZ2VEYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkVycm9yKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYE1lc3NhZ2UgdHlwZSBvZiAke21lc3NhZ2VJZH0gZG9lcyBub3QgaGF2ZSBhIG1lc3NhZ2UgaGFuZGxlciByZWdpc3RlcmVkIG9uIHRoZSBmcm9udGVuZCAtIGlnbm9yaW5nIG1lc3NhZ2UuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXR1cCBhbnkgZGVmYXVsdCBzaWduYWxsaW5nIG1lc3NhZ2UgaGFuZGxpbmcsIHRoZXNlIGNhbiBiZSBvdmVycmlkZGVuIG9yIGFkZGl0aW9uYWwgaGFuZGxlcnMgYWRkZWQgd2l0aCBgYWRkTWVzc2FnZUhhbmRsZXJgLlxyXG4gICAgICogQHBhcmFtIHdlYnNvY2tldENvbnRyb2xsZXIgVGhlIGNvbnRyb2xsZXIgdG8gc2V0dXAgdGhlc2UgaGFuZGxlcnMgb24uXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBzZXR1cERlZmF1bHRIYW5kbGVycyh3ZWJzb2NrZXRDb250cm9sbGVyKSB7XHJcbiAgICAgICAgLy8gUElOR1xyXG4gICAgICAgIHdlYnNvY2tldENvbnRyb2xsZXIuc2lnbmFsbGluZ1Byb3RvY29sLmFkZE1lc3NhZ2VIYW5kbGVyKF9NZXNzYWdlUmVjZWl2ZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLk1lc3NhZ2VSZWN2VHlwZXMuUElORywgKHBpbmdQYXlsb2FkKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIHNlbmQgb3VyIHBvbmcgcGF5bG9hZCBiYWNrIHRvIHRoZSBzaWduYWxsaW5nIHNlcnZlclxyXG4gICAgICAgICAgICBjb25zdCBwb25nUGF5bG9hZCA9IG5ldyBfTWVzc2FnZVNlbmRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5NZXNzYWdlUG9uZyhuZXcgRGF0ZSgpLmdldFRpbWUoKSkucGF5bG9hZCgpO1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBfTWVzc2FnZVJlY2VpdmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5NZXNzYWdlUmVjdlR5cGVzLlBJTkcgKyAnOiAnICsgcGluZ1BheWxvYWQsIDYpO1xyXG4gICAgICAgICAgICB3ZWJzb2NrZXRDb250cm9sbGVyLndlYlNvY2tldC5zZW5kKHBvbmdQYXlsb2FkKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBDT05GSUdcclxuICAgICAgICB3ZWJzb2NrZXRDb250cm9sbGVyLnNpZ25hbGxpbmdQcm90b2NvbC5hZGRNZXNzYWdlSGFuZGxlcihfTWVzc2FnZVJlY2VpdmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5NZXNzYWdlUmVjdlR5cGVzLkNPTkZJRywgKGNvbmZpZ1BheWxvYWQpID0+IHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgX01lc3NhZ2VSZWNlaXZlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTWVzc2FnZVJlY3ZUeXBlcy5DT05GSUcsIDYpO1xyXG4gICAgICAgICAgICBjb25zdCBjb25maWcgPSBKU09OLnBhcnNlKGNvbmZpZ1BheWxvYWQpO1xyXG4gICAgICAgICAgICB3ZWJzb2NrZXRDb250cm9sbGVyLm9uQ29uZmlnKGNvbmZpZyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gU1RSRUFNRVJfTElTVFxyXG4gICAgICAgIHdlYnNvY2tldENvbnRyb2xsZXIuc2lnbmFsbGluZ1Byb3RvY29sLmFkZE1lc3NhZ2VIYW5kbGVyKF9NZXNzYWdlUmVjZWl2ZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLk1lc3NhZ2VSZWN2VHlwZXMuU1RSRUFNRVJfTElTVCwgKGxpc3RQYXlsb2FkKSA9PiB7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIF9NZXNzYWdlUmVjZWl2ZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLk1lc3NhZ2VSZWN2VHlwZXMuU1RSRUFNRVJfTElTVCwgNik7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0cmVhbWVyTGlzdCA9IEpTT04ucGFyc2UobGlzdFBheWxvYWQpO1xyXG4gICAgICAgICAgICB3ZWJzb2NrZXRDb250cm9sbGVyLm9uU3RyZWFtZXJMaXN0KHN0cmVhbWVyTGlzdCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gU1RSRUFNRVJfSURfQ0hBTkdFRFxyXG4gICAgICAgIHdlYnNvY2tldENvbnRyb2xsZXIuc2lnbmFsbGluZ1Byb3RvY29sLmFkZE1lc3NhZ2VIYW5kbGVyKF9NZXNzYWdlUmVjZWl2ZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLk1lc3NhZ2VSZWN2VHlwZXMuU1RSRUFNRVJfSURfQ0hBTkdFRCwgKGlkUGF5bG9hZCkgPT4ge1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBfTWVzc2FnZVJlY2VpdmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5NZXNzYWdlUmVjdlR5cGVzLlNUUkVBTUVSX0lEX0NIQU5HRUQsIDYpO1xyXG4gICAgICAgICAgICBjb25zdCBzdHJlYW1lcklkTWVzc2FnZSA9IEpTT04ucGFyc2UoaWRQYXlsb2FkKTtcclxuICAgICAgICAgICAgd2Vic29ja2V0Q29udHJvbGxlci5vblN0cmVhbWVySURDaGFuZ2VkKHN0cmVhbWVySWRNZXNzYWdlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBQTEFZRVJfQ09VTlRcclxuICAgICAgICB3ZWJzb2NrZXRDb250cm9sbGVyLnNpZ25hbGxpbmdQcm90b2NvbC5hZGRNZXNzYWdlSGFuZGxlcihfTWVzc2FnZVJlY2VpdmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5NZXNzYWdlUmVjdlR5cGVzLlBMQVlFUl9DT1VOVCwgKHBsYXllckNvdW50UGF5bG9hZCkgPT4ge1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBfTWVzc2FnZVJlY2VpdmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5NZXNzYWdlUmVjdlR5cGVzLlBMQVlFUl9DT1VOVCwgNik7XHJcbiAgICAgICAgICAgIGNvbnN0IHBsYXllckNvdW50ID0gSlNPTi5wYXJzZShwbGF5ZXJDb3VudFBheWxvYWQpO1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnUGxheWVyIENvdW50OiAnICsgcGxheWVyQ291bnQuY291bnQsIDYpO1xyXG4gICAgICAgICAgICB3ZWJzb2NrZXRDb250cm9sbGVyLm9uUGxheWVyQ291bnQocGxheWVyQ291bnQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIEFOU1dFUlxyXG4gICAgICAgIHdlYnNvY2tldENvbnRyb2xsZXIuc2lnbmFsbGluZ1Byb3RvY29sLmFkZE1lc3NhZ2VIYW5kbGVyKF9NZXNzYWdlUmVjZWl2ZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLk1lc3NhZ2VSZWN2VHlwZXMuQU5TV0VSLCAoYW5zd2VyUGF5bG9hZCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBzZW5kIG91ciBwb25nIHBheWxvYWQgYmFjayB0byB0aGUgc2lnbmFsbGluZyBzZXJ2ZXJcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgX01lc3NhZ2VSZWNlaXZlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTWVzc2FnZVJlY3ZUeXBlcy5BTlNXRVIsIDYpO1xyXG4gICAgICAgICAgICBjb25zdCBhbnN3ZXIgPSBKU09OLnBhcnNlKGFuc3dlclBheWxvYWQpO1xyXG4gICAgICAgICAgICB3ZWJzb2NrZXRDb250cm9sbGVyLm9uV2ViUnRjQW5zd2VyKGFuc3dlcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gT0ZGRVJcclxuICAgICAgICB3ZWJzb2NrZXRDb250cm9sbGVyLnNpZ25hbGxpbmdQcm90b2NvbC5hZGRNZXNzYWdlSGFuZGxlcihfTWVzc2FnZVJlY2VpdmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5NZXNzYWdlUmVjdlR5cGVzLk9GRkVSLCAob2ZmZXJQYXlsb2FkKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIHNlbmQgb3VyIHBvbmcgcGF5bG9hZCBiYWNrIHRvIHRoZSBzaWduYWxsaW5nIHNlcnZlclxyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBfTWVzc2FnZVJlY2VpdmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5NZXNzYWdlUmVjdlR5cGVzLk9GRkVSLCA2KTtcclxuICAgICAgICAgICAgY29uc3Qgb2ZmZXIgPSBKU09OLnBhcnNlKG9mZmVyUGF5bG9hZCk7XHJcbiAgICAgICAgICAgIHdlYnNvY2tldENvbnRyb2xsZXIub25XZWJSdGNPZmZlcihvZmZlcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gSUNFIENBTkRJREFURVxyXG4gICAgICAgIHdlYnNvY2tldENvbnRyb2xsZXIuc2lnbmFsbGluZ1Byb3RvY29sLmFkZE1lc3NhZ2VIYW5kbGVyKF9NZXNzYWdlUmVjZWl2ZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLk1lc3NhZ2VSZWN2VHlwZXMuSUNFX0NBTkRJREFURSwgKGljZUNhbmRpZGF0ZVBheWxvYWQpID0+IHtcclxuICAgICAgICAgICAgLy8gc2VuZCBvdXIgcG9uZyBwYXlsb2FkIGJhY2sgdG8gdGhlIHNpZ25hbGxpbmcgc2VydmVyXHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIF9NZXNzYWdlUmVjZWl2ZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLk1lc3NhZ2VSZWN2VHlwZXMuSUNFX0NBTkRJREFURSwgNik7XHJcbiAgICAgICAgICAgIGNvbnN0IGljZUNhbmRpZGF0ZSA9IEpTT04ucGFyc2UoaWNlQ2FuZGlkYXRlUGF5bG9hZCk7XHJcbiAgICAgICAgICAgIHdlYnNvY2tldENvbnRyb2xsZXIub25JY2VDYW5kaWRhdGUoaWNlQ2FuZGlkYXRlLmNhbmRpZGF0ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gV0FSTklOR1xyXG4gICAgICAgIHdlYnNvY2tldENvbnRyb2xsZXIuc2lnbmFsbGluZ1Byb3RvY29sLmFkZE1lc3NhZ2VIYW5kbGVyKF9NZXNzYWdlUmVjZWl2ZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLk1lc3NhZ2VSZWN2VHlwZXMuV0FSTklORywgKHdhcm5pbmdQYXlsb2FkKSA9PiB7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLldhcm5pbmcoX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgV2FybmluZyByZWNlaXZlZDogJHt3YXJuaW5nUGF5bG9hZH1gKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBQRUVSIERBVEEgQ0hBTk5FTFNcclxuICAgICAgICB3ZWJzb2NrZXRDb250cm9sbGVyLnNpZ25hbGxpbmdQcm90b2NvbC5hZGRNZXNzYWdlSGFuZGxlcihfTWVzc2FnZVJlY2VpdmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5NZXNzYWdlUmVjdlR5cGVzLlBFRVJfREFUQV9DSEFOTkVMUywgKHBlZXJEYXRhQ2hhbm5lbHNQYXlsb2FkKSA9PiB7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIF9NZXNzYWdlUmVjZWl2ZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLk1lc3NhZ2VSZWN2VHlwZXMuUEVFUl9EQVRBX0NIQU5ORUxTLCA2KTtcclxuICAgICAgICAgICAgY29uc3QgcGVlckRhdGFDaGFubmVscyA9IEpTT04ucGFyc2UocGVlckRhdGFDaGFubmVsc1BheWxvYWQpO1xyXG4gICAgICAgICAgICB3ZWJzb2NrZXRDb250cm9sbGVyLm9uV2ViUnRjUGVlckRhdGFDaGFubmVscyhwZWVyRGF0YUNoYW5uZWxzKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvV2ViU29ja2V0cy9XZWJTb2NrZXRDb250cm9sbGVyLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9XZWJTb2NrZXRzL1dlYlNvY2tldENvbnRyb2xsZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIldlYlNvY2tldENvbnRyb2xsZXJcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gV2ViU29ja2V0Q29udHJvbGxlcilcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9Mb2dnZXIvTG9nZ2VyICovIFwiLi9zcmMvTG9nZ2VyL0xvZ2dlci50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTWVzc2FnZVNlbmRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vTWVzc2FnZVNlbmQgKi8gXCIuL3NyYy9XZWJTb2NrZXRzL01lc3NhZ2VTZW5kLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9TaWduYWxsaW5nUHJvdG9jb2xfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vU2lnbmFsbGluZ1Byb3RvY29sICovIFwiLi9zcmMvV2ViU29ja2V0cy9TaWduYWxsaW5nUHJvdG9jb2wudHNcIik7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIGNvbnRyb2xsZXIgZm9yIHRoZSBXZWJTb2NrZXQgYW5kIGFsbCBhc3NvY2lhdGVkIG1ldGhvZHNcclxuICovXHJcbmNsYXNzIFdlYlNvY2tldENvbnRyb2xsZXIge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5XU19PUEVOX1NUQVRFID0gMTtcclxuICAgICAgICB0aGlzLm9uT3BlbiA9IG5ldyBFdmVudFRhcmdldCgpO1xyXG4gICAgICAgIHRoaXMub25DbG9zZSA9IG5ldyBFdmVudFRhcmdldCgpO1xyXG4gICAgICAgIHRoaXMuc2lnbmFsbGluZ1Byb3RvY29sID0gbmV3IF9TaWduYWxsaW5nUHJvdG9jb2xfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5TaWduYWxsaW5nUHJvdG9jb2woKTtcclxuICAgICAgICBfU2lnbmFsbGluZ1Byb3RvY29sX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uU2lnbmFsbGluZ1Byb3RvY29sLnNldHVwRGVmYXVsdEhhbmRsZXJzKHRoaXMpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25uZWN0IHRvIHRoZSBzaWduYWxpbmcgc2VydmVyXHJcbiAgICAgKiBAcGFyYW0gY29ubmVjdGlvblVSTCAtIFRoZSBBZGRyZXNzIG9mIHRoZSBzaWduYWxpbmcgc2VydmVyXHJcbiAgICAgKiBAcmV0dXJucyAtIElmIHRoZXJlIGlzIGEgY29ubmVjdGlvblxyXG4gICAgICovXHJcbiAgICBjb25uZWN0KGNvbm5lY3Rpb25VUkwpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBjb25uZWN0aW9uVVJMLCA2KTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldCA9IG5ldyBXZWJTb2NrZXQoY29ubmVjdGlvblVSTCk7XHJcbiAgICAgICAgICAgIHRoaXMud2ViU29ja2V0Lm9ub3BlbiA9IChldmVudCkgPT4gdGhpcy5oYW5kbGVPbk9wZW4oZXZlbnQpO1xyXG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldC5vbmVycm9yID0gKCkgPT4gdGhpcy5oYW5kbGVPbkVycm9yKCk7XHJcbiAgICAgICAgICAgIHRoaXMud2ViU29ja2V0Lm9uY2xvc2UgPSAoZXZlbnQpID0+IHRoaXMuaGFuZGxlT25DbG9zZShldmVudCk7XHJcbiAgICAgICAgICAgIHRoaXMud2ViU29ja2V0Lm9ubWVzc2FnZSA9IChldmVudCkgPT4gdGhpcy5oYW5kbGVPbk1lc3NhZ2UoZXZlbnQpO1xyXG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldC5vbm1lc3NhZ2ViaW5hcnkgPSAoZXZlbnQpID0+IHRoaXMuaGFuZGxlT25NZXNzYWdlQmluYXJ5KGV2ZW50KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5FcnJvcihlcnJvciwgZXJyb3IpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIHdoYXQgaGFwcGVucyB3aGVuIGEgbWVzc2FnZSBpcyByZWNlaXZlZCBpbiBiaW5hcnkgZm9ybVxyXG4gICAgICogQHBhcmFtIGV2ZW50IC0gTWVzc2FnZSBSZWNlaXZlZFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVPbk1lc3NhZ2VCaW5hcnkoZXZlbnQpIHtcclxuICAgICAgICAvLyBpZiB0aGUgZXZlbnQgaXMgZW1wdHkgcmV0dXJuXHJcbiAgICAgICAgaWYgKCFldmVudCB8fCAhZXZlbnQuZGF0YSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGhhbmRsZSB0aGUgYmluYXJ5IGFuZCB0aGVuIGhhbmRsZSB0aGUgbWVzc2FnZVxyXG4gICAgICAgIGV2ZW50LmRhdGFcclxuICAgICAgICAgICAgLnRleHQoKVxyXG4gICAgICAgICAgICAudGhlbigobWVzc2FnZVN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICAvLyBidWlsZCBhIG5ldyBtZXNzYWdlXHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnN0cnVjdGVkTWVzc2FnZSA9IG5ldyBNZXNzYWdlRXZlbnQoJ21lc3NhZ2VGcm9tQmluYXJ5Jywge1xyXG4gICAgICAgICAgICAgICAgZGF0YTogbWVzc2FnZVN0cmluZ1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy8gc2VuZCB0aGUgbmV3IHN0cmluZ2lmaWVkIGV2ZW50IGJhY2sgaW50byBgb25tZXNzYWdlYFxyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZU9uTWVzc2FnZShjb25zdHJ1Y3RlZE1lc3NhZ2UpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuRXJyb3IoX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgRmFpbGVkIHRvIHBhcnNlIGJpbmFyeSBibG9iIGZyb20gd2Vic29ja2V0LCByZWFzb246ICR7ZXJyb3J9YCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgd2hhdCBoYXBwZW5zIHdoZW4gYSBtZXNzYWdlIGlzIHJlY2VpdmVkXHJcbiAgICAgKiBAcGFyYW0gZXZlbnQgLSBNZXNzYWdlIFJlY2VpdmVkXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZU9uTWVzc2FnZShldmVudCkge1xyXG4gICAgICAgIC8vIENoZWNrIGlmIHdlYnNvY2tldCBtZXNzYWdlIGlzIGJpbmFyeSwgaWYgc28sIHN0cmluZ2lmeSBpdC5cclxuICAgICAgICBpZiAoZXZlbnQuZGF0YSAmJiBldmVudC5kYXRhIGluc3RhbmNlb2YgQmxvYikge1xyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZU9uTWVzc2FnZUJpbmFyeShldmVudCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IEpTT04ucGFyc2UoZXZlbnQuZGF0YSk7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ3JlY2VpdmVkID0+IFxcbicgK1xyXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShKU09OLnBhcnNlKGV2ZW50LmRhdGEpLCB1bmRlZmluZWQsIDQpLCA2KTtcclxuICAgICAgICAvLyBTZW5kIHRvIG91ciBzaWduYWxsaW5nIHByb3RvY29sIHRvIGhhbmRsZSB0aGUgaW5jb21pbmcgbWVzc2FnZVxyXG4gICAgICAgIHRoaXMuc2lnbmFsbGluZ1Byb3RvY29sLmhhbmRsZU1lc3NhZ2UobWVzc2FnZS50eXBlLCBldmVudC5kYXRhKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB3aGVuIHRoZSBXZWJzb2NrZXQgaXMgb3BlbmVkXHJcbiAgICAgKiBAcGFyYW0gZXZlbnQgLSBOb3QgVXNlZFxyXG4gICAgICovXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXHJcbiAgICBoYW5kbGVPbk9wZW4oZXZlbnQpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnQ29ubmVjdGVkIHRvIHRoZSBzaWduYWxsaW5nIHNlcnZlciB2aWEgV2ViU29ja2V0JywgNik7XHJcbiAgICAgICAgdGhpcy5vbk9wZW4uZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ29wZW4nKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgd2hlbiB0aGVyZSBpcyBhbiBlcnJvciBvbiB0aGUgd2Vic29ja2V0XHJcbiAgICAgKiBAcGFyYW0gZXZlbnQgLSBFcnJvciBQYXlsb2FkXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZU9uRXJyb3IoKSB7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuRXJyb3IoX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnV2ViU29ja2V0IGVycm9yJyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgd2hlbiB0aGUgV2Vic29ja2V0IGlzIGNsb3NlZFxyXG4gICAgICogQHBhcmFtIGV2ZW50IC0gQ2xvc2UgRXZlbnRcclxuICAgICAqL1xyXG4gICAgaGFuZGxlT25DbG9zZShldmVudCkge1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdEaXNjb25uZWN0ZWQgdG8gdGhlIHNpZ25hbGxpbmcgc2VydmVyIHZpYSBXZWJTb2NrZXQ6ICcgK1xyXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShldmVudC5jb2RlKSArXHJcbiAgICAgICAgICAgICcgLSAnICtcclxuICAgICAgICAgICAgZXZlbnQucmVhc29uKTtcclxuICAgICAgICB0aGlzLm9uQ2xvc2UuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2Nsb3NlJywgeyAnZGV0YWlsJzogZXZlbnQgfSkpO1xyXG4gICAgfVxyXG4gICAgcmVxdWVzdFN0cmVhbWVyTGlzdCgpIHtcclxuICAgICAgICBjb25zdCBwYXlsb2FkID0gbmV3IF9NZXNzYWdlU2VuZF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLk1lc3NhZ2VMaXN0U3RyZWFtZXJzKCk7XHJcbiAgICAgICAgdGhpcy53ZWJTb2NrZXQuc2VuZChwYXlsb2FkLnBheWxvYWQoKSk7XHJcbiAgICB9XHJcbiAgICBzZW5kU3Vic2NyaWJlKHN0cmVhbWVyaWQpIHtcclxuICAgICAgICBjb25zdCBwYXlsb2FkID0gbmV3IF9NZXNzYWdlU2VuZF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLk1lc3NhZ2VTdWJzY3JpYmUoc3RyZWFtZXJpZCk7XHJcbiAgICAgICAgdGhpcy53ZWJTb2NrZXQuc2VuZChwYXlsb2FkLnBheWxvYWQoKSk7XHJcbiAgICB9XHJcbiAgICBzZW5kVW5zdWJzY3JpYmUoKSB7XHJcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IG5ldyBfTWVzc2FnZVNlbmRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5NZXNzYWdlVW5zdWJzY3JpYmUoKTtcclxuICAgICAgICB0aGlzLndlYlNvY2tldC5zZW5kKHBheWxvYWQucGF5bG9hZCgpKTtcclxuICAgIH1cclxuICAgIHNlbmRXZWJSdGNPZmZlcihvZmZlciwgZXh0cmFQYXJhbXMpIHtcclxuICAgICAgICBjb25zdCBwYXlsb2FkID0gbmV3IF9NZXNzYWdlU2VuZF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLk1lc3NhZ2VXZWJSVENPZmZlcihvZmZlciwgZXh0cmFQYXJhbXMpO1xyXG4gICAgICAgIHRoaXMud2ViU29ja2V0LnNlbmQocGF5bG9hZC5wYXlsb2FkKCkpO1xyXG4gICAgfVxyXG4gICAgc2VuZFdlYlJ0Y0Fuc3dlcihhbnN3ZXIsIGV4dHJhUGFyYW1zKSB7XHJcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IG5ldyBfTWVzc2FnZVNlbmRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5NZXNzYWdlV2ViUlRDQW5zd2VyKGFuc3dlciwgZXh0cmFQYXJhbXMpO1xyXG4gICAgICAgIHRoaXMud2ViU29ja2V0LnNlbmQocGF5bG9hZC5wYXlsb2FkKCkpO1xyXG4gICAgfVxyXG4gICAgc2VuZFdlYlJ0Y0RhdGFjaGFubmVsUmVxdWVzdCgpIHtcclxuICAgICAgICBjb25zdCBwYXlsb2FkID0gbmV3IF9NZXNzYWdlU2VuZF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLk1lc3NhZ2VXZWJSVENEYXRhY2hhbm5lbFJlcXVlc3QoKTtcclxuICAgICAgICB0aGlzLndlYlNvY2tldC5zZW5kKHBheWxvYWQucGF5bG9hZCgpKTtcclxuICAgIH1cclxuICAgIHNlbmRTRlVSZWN2RGF0YUNoYW5uZWxSZWFkeSgpIHtcclxuICAgICAgICBjb25zdCBwYXlsb2FkID0gbmV3IF9NZXNzYWdlU2VuZF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLk1lc3NhZ2VTRlVSZWN2RGF0YUNoYW5uZWxSZWFkeSgpO1xyXG4gICAgICAgIHRoaXMud2ViU29ja2V0LnNlbmQocGF5bG9hZC5wYXlsb2FkKCkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kcyBhbiBSVEMgSWNlIENhbmRpZGF0ZSB0byB0aGUgU2VydmVyXHJcbiAgICAgKiBAcGFyYW0gY2FuZGlkYXRlIC0gUlRDIEljZSBDYW5kaWRhdGVcclxuICAgICAqL1xyXG4gICAgc2VuZEljZUNhbmRpZGF0ZShjYW5kaWRhdGUpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnU2VuZGluZyBJY2UgQ2FuZGlkYXRlJyk7XHJcbiAgICAgICAgaWYgKHRoaXMud2ViU29ja2V0ICYmXHJcbiAgICAgICAgICAgIHRoaXMud2ViU29ja2V0LnJlYWR5U3RhdGUgPT09IHRoaXMuV1NfT1BFTl9TVEFURSkge1xyXG4gICAgICAgICAgICAvL3dzLnNlbmQoSlNPTi5zdHJpbmdpZnkoeyB0eXBlOiAnaWNlQ2FuZGlkYXRlJywgY2FuZGlkYXRlOiBjYW5kaWRhdGUgfSkpO1xyXG4gICAgICAgICAgICBjb25zdCBJY2VDYW5kaWRhdGUgPSBuZXcgX01lc3NhZ2VTZW5kX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uTWVzc2FnZUljZUNhbmRpZGF0ZShjYW5kaWRhdGUpO1xyXG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldC5zZW5kKEljZUNhbmRpZGF0ZS5wYXlsb2FkKCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2xvc2VzIHRoZSBXZWJzb2NrZXQgY29ubmVjdGlvblxyXG4gICAgICovXHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgKF9hID0gdGhpcy53ZWJTb2NrZXQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jbG9zZSgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgTWVzc2FnZSBDb250YWlucyB0aGUgcGF5bG9hZCBvZiB0aGUgcGVlciBjb25uZWN0aW9uIG9wdGlvbnMgdXNlZCBmb3IgdGhlIFJUQyBQZWVyIGhhbmQgc2hha2VcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlQ29uZmlnIC0gQ29uZmlnIE1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBoZSBzaWduYWxpbmcgc2VydmVyXHJcbiAgICAgKi9cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMsIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxyXG4gICAgb25Db25maWcobWVzc2FnZUNvbmZpZykgeyB9XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBNZXNzYWdlIGNvbnRhaW5zIGFsbCB0aGUgaWRzIG9mIHN0cmVhbWVycyBhdmFpbGFibGUgb24gdGhlIHNlcnZlci5cclxuICAgICAqIEBwYXJhbSBtZXNzYWdlU3RyZWFtZXJMaXN0IC0gVGhlIG1lc3NhZ2Ugd2l0aCB0aGUgbGlzdCBvZiB0aGUgYXZhaWxhYmxlIHN0cmVhbWVyIGlkcy5cclxuICAgICAqL1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycywgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXHJcbiAgICBvblN0cmVhbWVyTGlzdChtZXNzYWdlU3RyZWFtZXJMaXN0KSB7IH1cclxuICAgIC8qKlxyXG4gICAgICogVGhlIE1lc3NhZ2UgY29udGFpbnMgdGhlIG5ldyBpZCBvZiBhIHN1YnNjcmliZWQgdG8gc3RyZWFtZXIuXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAtIE1lc3NhZ2UgY29uYWluaW5nIHRoZSBuZXcgaWQgb2YgdGhlIHN0cmVhbWVyLlxyXG4gICAgICovXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cclxuICAgIG9uU3RyZWFtZXJJRENoYW5nZWQobWVzc2FnZSkgeyB9XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBpY2VDYW5kaWRhdGUgLSBJY2UgQ2FuZGlkYXRlIHNlbnQgZnJvbSB0aGUgU2lnbmFsaW5nIHNlcnZlciBzZXJ2ZXIncyBSVEMgaGFuZCBzaGFrZVxyXG4gICAgICovXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cclxuICAgIG9uSWNlQ2FuZGlkYXRlKGljZUNhbmRpZGF0ZSkgeyB9XHJcbiAgICAvKipcclxuICAgICAqIEV2ZW50IGlzIGZpcmVkIHdoZW4gdGhlIHdlYnNvY2tldCByZWNlaXZlcyB0aGUgYW5zd2VyIGZvciB0aGUgUlRDIHBlZXIgQ29ubmVjdGlvblxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2VBbnN3ZXIgLSBUaGUgUlRDIEFuc3dlciBwYXlsb2FkIGZyb20gdGhlIHNpZ25hbGluZyBzZXJ2ZXJcclxuICAgICAqL1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycywgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXHJcbiAgICBvbldlYlJ0Y0Fuc3dlcihtZXNzYWdlQW5zd2VyKSB7IH1cclxuICAgIC8qKlxyXG4gICAgICogRXZlbnQgaXMgZmlyZWQgd2hlbiB0aGUgd2Vic29ja2V0IHJlY2VpdmVzIHRoZSBvZmZlciBmb3IgdGhlIFJUQyBwZWVyIENvbm5lY3Rpb25cclxuICAgICAqIEBwYXJhbSBtZXNzYWdlT2ZmZXIgLSBUaGUgc2RwIG9mZmVyXHJcbiAgICAgKi9cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMsIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxyXG4gICAgb25XZWJSdGNPZmZlcihtZXNzYWdlT2ZmZXIpIHsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBFdmVudCBpcyBmaXJlZCB3aGVuIHRoZSB3ZWJzb2NrZXQgcmVjZWl2ZXMgdGhlIGRhdGEgY2hhbm5lbHMgZm9yIHRoZSBSVEMgcGVlciBDb25uZWN0aW9uIGZyb20gdGhlIFNGVVxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2VEYXRhQ2hhbm5lbHMgLSBUaGUgZGF0YSBjaGFubmVscyBkZXRhaWxzXHJcbiAgICAgKi9cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMsIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxyXG4gICAgb25XZWJSdGNQZWVyRGF0YUNoYW5uZWxzKG1lc3NhZ2VEYXRhQ2hhbm5lbHMpIHsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBFdmVudCBpcyBmaXJlZCB3aGVuIHRoZSB3ZWJzb2NrZXQgcmVjZWl2ZXMgdGhlIGFuIHVwZGF0ZWQgcGxheWVyIGNvdW50IGZyb20gY2lycnVzXHJcbiAgICAgKiBAcGFyYW0gTWVzc2FnZVBsYXllckNvdW50IC0gVGhlIG5ldyBwbGF5ZXIgY291bnRcclxuICAgICAqL1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycywgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXHJcbiAgICBvblBsYXllckNvdW50KHBsYXllckNvdW50KSB7IH1cclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvV2ViWFIvV2ViWFJDb250cm9sbGVyLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9XZWJYUi9XZWJYUkNvbnRyb2xsZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIldlYlhSQ29udHJvbGxlclwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBXZWJYUkNvbnRyb2xsZXIpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vTG9nZ2VyL0xvZ2dlciAqLyBcIi4vc3JjL0xvZ2dlci9Mb2dnZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0lucHV0c19YUkdhbWVwYWRDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9JbnB1dHMvWFJHYW1lcGFkQ29udHJvbGxlciAqLyBcIi4vc3JjL0lucHV0cy9YUkdhbWVwYWRDb250cm9sbGVyLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vVXRpbC9FdmVudEVtaXR0ZXIgKi8gXCIuL3NyYy9VdGlsL0V2ZW50RW1pdHRlci50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfcGl4ZWxzdHJlYW1pbmdmcm9udGVuZF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vcGl4ZWxzdHJlYW1pbmdmcm9udGVuZCAqLyBcIi4vc3JjL0NvbmZpZy9Db25maWcudHNcIik7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuXHJcblxyXG5cclxuY2xhc3MgV2ViWFJDb250cm9sbGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKHdlYlJ0Y1BsYXllckNvbnRyb2xsZXIpIHtcclxuICAgICAgICB0aGlzLnhyVmlld2VyUG9zZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy52aWRlb1RleHR1cmUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMucHJldlZpZGVvV2lkdGggPSAwO1xyXG4gICAgICAgIHRoaXMucHJldlZpZGVvSGVpZ2h0ID0gMDtcclxuICAgICAgICB0aGlzLmxlZnRWaWV3ID0gbnVsbDtcclxuICAgICAgICB0aGlzLnJpZ2h0VmlldyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy54clNlc3Npb24gPSBudWxsO1xyXG4gICAgICAgIHRoaXMud2ViUnRjQ29udHJvbGxlciA9IHdlYlJ0Y1BsYXllckNvbnRyb2xsZXI7XHJcbiAgICAgICAgdGhpcy54ckdhbWVwYWRDb250cm9sbGVyID0gbmV3IF9JbnB1dHNfWFJHYW1lcGFkQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlhSR2FtZXBhZENvbnRyb2xsZXIodGhpcy53ZWJSdGNDb250cm9sbGVyLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyKTtcclxuICAgICAgICB0aGlzLm9uU2Vzc2lvbkVuZGVkID0gbmV3IEV2ZW50VGFyZ2V0KCk7XHJcbiAgICAgICAgdGhpcy5vblNlc3Npb25TdGFydGVkID0gbmV3IEV2ZW50VGFyZ2V0KCk7XHJcbiAgICAgICAgdGhpcy5vbkZyYW1lID0gbmV3IEV2ZW50VGFyZ2V0KCk7XHJcbiAgICB9XHJcbiAgICB4ckNsaWNrZWQoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnhyU2Vzc2lvbikge1xyXG4gICAgICAgICAgICBpZiAoIW5hdmlnYXRvci54cikge1xyXG4gICAgICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuRXJyb3IoX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIlRoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IFhSLlwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBuYXZpZ2F0b3IueHJcclxuICAgICAgICAgICAgICAgIC8qIFJlcXVlc3QgaW1tZXJzaXZlLXZyIHNlc3Npb24gd2l0aG91dCBhbnkgb3B0aW9uYWwgZmVhdHVyZXMuICovXHJcbiAgICAgICAgICAgICAgICAucmVxdWVzdFNlc3Npb24oJ2ltbWVyc2l2ZS12cicsIHsgb3B0aW9uYWxGZWF0dXJlczogW10gfSlcclxuICAgICAgICAgICAgICAgIC50aGVuKChzZXNzaW9uKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uWHJTZXNzaW9uU3RhcnRlZChzZXNzaW9uKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnhyU2Vzc2lvbi5lbmQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBvblhyU2Vzc2lvbkVuZGVkKCkge1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdYUiBTZXNzaW9uIGVuZGVkJyk7XHJcbiAgICAgICAgdGhpcy54clNlc3Npb24gPSBudWxsO1xyXG4gICAgICAgIHRoaXMub25TZXNzaW9uRW5kZWQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ3hyU2Vzc2lvbkVuZGVkJykpO1xyXG4gICAgfVxyXG4gICAgaW5pdEdMKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmdsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcbiAgICAgICAgdGhpcy5nbCA9IGNhbnZhcy5nZXRDb250ZXh0KCd3ZWJnbDInLCB7XHJcbiAgICAgICAgICAgIHhyQ29tcGF0aWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIFNldCBvdXIgY2xlYXIgY29sb3JcclxuICAgICAgICB0aGlzLmdsLmNsZWFyQ29sb3IoMC4wLCAwLjAsIDAuMCwgMSk7XHJcbiAgICB9XHJcbiAgICBpbml0U2hhZGVycygpIHtcclxuICAgICAgICAvLyBzaGFkZXIgc291cmNlIGNvZGVcclxuICAgICAgICBjb25zdCB2ZXJ0ZXhTaGFkZXJTb3VyY2UgPSBgXG4gICAgICAgIGF0dHJpYnV0ZSB2ZWMyIGFfcG9zaXRpb247XG4gICAgICAgIGF0dHJpYnV0ZSB2ZWMyIGFfdGV4Q29vcmQ7XG5cbiAgICAgICAgLy8gdmFyeWluZ3NcbiAgICAgICAgdmFyeWluZyB2ZWMyIHZfdGV4Q29vcmQ7XG5cbiAgICAgICAgdm9pZCBtYWluKCkge1xuICAgICAgICAgICBnbF9Qb3NpdGlvbiA9IHZlYzQoYV9wb3NpdGlvbi54LCBhX3Bvc2l0aW9uLnksIDAsIDEpO1xuICAgICAgICAgICAvLyBwYXNzIHRoZSB0ZXhDb29yZCB0byB0aGUgZnJhZ21lbnQgc2hhZGVyXG4gICAgICAgICAgIC8vIFRoZSBHUFUgd2lsbCBpbnRlcnBvbGF0ZSB0aGlzIHZhbHVlIGJldHdlZW4gcG9pbnRzLlxuICAgICAgICAgICB2X3RleENvb3JkID0gYV90ZXhDb29yZDtcbiAgICAgICAgfVxuICAgICAgICBgO1xyXG4gICAgICAgIGNvbnN0IGZyYWdtZW50U2hhZGVyU291cmNlID0gYFxuICAgICAgICBwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcblxuICAgICAgICAvLyBvdXIgdGV4dHVyZVxuICAgICAgICB1bmlmb3JtIHNhbXBsZXIyRCB1X2ltYWdlO1xuXG4gICAgICAgIC8vIHRoZSB0ZXhDb29yZHMgcGFzc2VkIGluIGZyb20gdGhlIHZlcnRleCBzaGFkZXIuXG4gICAgICAgIHZhcnlpbmcgdmVjMiB2X3RleENvb3JkO1xuXG4gICAgICAgIHZvaWQgbWFpbigpIHtcbiAgICAgICAgICAgZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKHVfaW1hZ2UsIHZfdGV4Q29vcmQpO1xuICAgICAgICB9XG4gICAgICAgIGA7XHJcbiAgICAgICAgLy8gc2V0dXAgdmVydGV4IHNoYWRlclxyXG4gICAgICAgIGNvbnN0IHZlcnRleFNoYWRlciA9IHRoaXMuZ2wuY3JlYXRlU2hhZGVyKHRoaXMuZ2wuVkVSVEVYX1NIQURFUik7XHJcbiAgICAgICAgdGhpcy5nbC5zaGFkZXJTb3VyY2UodmVydGV4U2hhZGVyLCB2ZXJ0ZXhTaGFkZXJTb3VyY2UpO1xyXG4gICAgICAgIHRoaXMuZ2wuY29tcGlsZVNoYWRlcih2ZXJ0ZXhTaGFkZXIpO1xyXG4gICAgICAgIC8vIHNldHVwIGZyYWdtZW50IHNoYWRlclxyXG4gICAgICAgIGNvbnN0IGZyYWdtZW50U2hhZGVyID0gdGhpcy5nbC5jcmVhdGVTaGFkZXIodGhpcy5nbC5GUkFHTUVOVF9TSEFERVIpO1xyXG4gICAgICAgIHRoaXMuZ2wuc2hhZGVyU291cmNlKGZyYWdtZW50U2hhZGVyLCBmcmFnbWVudFNoYWRlclNvdXJjZSk7XHJcbiAgICAgICAgdGhpcy5nbC5jb21waWxlU2hhZGVyKGZyYWdtZW50U2hhZGVyKTtcclxuICAgICAgICAvLyBzZXR1cCBHTFNMIHByb2dyYW1cclxuICAgICAgICBjb25zdCBzaGFkZXJQcm9ncmFtID0gdGhpcy5nbC5jcmVhdGVQcm9ncmFtKCk7XHJcbiAgICAgICAgdGhpcy5nbC5hdHRhY2hTaGFkZXIoc2hhZGVyUHJvZ3JhbSwgdmVydGV4U2hhZGVyKTtcclxuICAgICAgICB0aGlzLmdsLmF0dGFjaFNoYWRlcihzaGFkZXJQcm9ncmFtLCBmcmFnbWVudFNoYWRlcik7XHJcbiAgICAgICAgdGhpcy5nbC5saW5rUHJvZ3JhbShzaGFkZXJQcm9ncmFtKTtcclxuICAgICAgICB0aGlzLmdsLnVzZVByb2dyYW0oc2hhZGVyUHJvZ3JhbSk7XHJcbiAgICAgICAgLy8gbG9vayB1cCB3aGVyZSB2ZXJ0ZXggZGF0YSBuZWVkcyB0byBnb1xyXG4gICAgICAgIHRoaXMucG9zaXRpb25Mb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oc2hhZGVyUHJvZ3JhbSwgJ2FfcG9zaXRpb24nKTtcclxuICAgICAgICB0aGlzLnRleGNvb3JkTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKHNoYWRlclByb2dyYW0sICdhX3RleENvb3JkJyk7XHJcbiAgICB9XHJcbiAgICB1cGRhdGVWaWRlb1RleHR1cmUoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnZpZGVvVGV4dHVyZSkge1xyXG4gICAgICAgICAgICAvLyBDcmVhdGUgb3VyIHRleHR1cmUgdGhhdCB3ZSB1c2UgaW4gb3VyIHNoYWRlclxyXG4gICAgICAgICAgICAvLyBhbmQgYmluZCBpdCBvbmNlIGJlY2F1c2Ugd2UgbmV2ZXIgdXNlIGFueSBvdGhlciB0ZXh0dXJlLlxyXG4gICAgICAgICAgICB0aGlzLnZpZGVvVGV4dHVyZSA9IHRoaXMuZ2wuY3JlYXRlVGV4dHVyZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmdsLmJpbmRUZXh0dXJlKHRoaXMuZ2wuVEVYVFVSRV8yRCwgdGhpcy52aWRlb1RleHR1cmUpO1xyXG4gICAgICAgICAgICAvLyBTZXQgdGhlIHBhcmFtZXRlcnMgc28gd2UgY2FuIHJlbmRlciBhbnkgc2l6ZSBpbWFnZS5cclxuICAgICAgICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKHRoaXMuZ2wuVEVYVFVSRV8yRCwgdGhpcy5nbC5URVhUVVJFX1dSQVBfUywgdGhpcy5nbC5DTEFNUF9UT19FREdFKTtcclxuICAgICAgICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKHRoaXMuZ2wuVEVYVFVSRV8yRCwgdGhpcy5nbC5URVhUVVJFX1dSQVBfVCwgdGhpcy5nbC5DTEFNUF9UT19FREdFKTtcclxuICAgICAgICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKHRoaXMuZ2wuVEVYVFVSRV8yRCwgdGhpcy5nbC5URVhUVVJFX01JTl9GSUxURVIsIHRoaXMuZ2wuTElORUFSKTtcclxuICAgICAgICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKHRoaXMuZ2wuVEVYVFVSRV8yRCwgdGhpcy5nbC5URVhUVVJFX01BR19GSUxURVIsIHRoaXMuZ2wuTElORUFSKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHZpZGVvSGVpZ2h0ID0gdGhpcy53ZWJSdGNDb250cm9sbGVyLnZpZGVvUGxheWVyLmdldFZpZGVvRWxlbWVudCgpLnZpZGVvSGVpZ2h0O1xyXG4gICAgICAgIGxldCB2aWRlb1dpZHRoID0gdGhpcy53ZWJSdGNDb250cm9sbGVyLnZpZGVvUGxheWVyLmdldFZpZGVvRWxlbWVudCgpLnZpZGVvV2lkdGg7XHJcbiAgICAgICAgaWYgKHRoaXMucHJldlZpZGVvSGVpZ2h0ICE9IHZpZGVvSGVpZ2h0IHx8IHRoaXMucHJldlZpZGVvV2lkdGggIT0gdmlkZW9XaWR0aCkge1xyXG4gICAgICAgICAgICAvLyBEbyBmdWxsIHVwZGF0ZSBvZiB0ZXh0dXJlIGlmIGRpbWVuc2lvbnMgZG8gbm90IG1hdGNoXHJcbiAgICAgICAgICAgIHRoaXMuZ2wudGV4SW1hZ2UyRCh0aGlzLmdsLlRFWFRVUkVfMkQsIDAsIHRoaXMuZ2wuUkdCQSwgdmlkZW9XaWR0aCwgdmlkZW9IZWlnaHQsIDAsIHRoaXMuZ2wuUkdCQSwgdGhpcy5nbC5VTlNJR05FRF9CWVRFLCB0aGlzLndlYlJ0Y0NvbnRyb2xsZXIudmlkZW9QbGF5ZXIuZ2V0VmlkZW9FbGVtZW50KCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gSWYgZGltZW5zaW9ucyBtYXRjaCBqdXN0IHVwZGF0ZSB0aGUgc3ViIHJlZ2lvblxyXG4gICAgICAgICAgICB0aGlzLmdsLnRleFN1YkltYWdlMkQodGhpcy5nbC5URVhUVVJFXzJELCAwLCAwLCAwLCB2aWRlb1dpZHRoLCB2aWRlb0hlaWdodCwgdGhpcy5nbC5SR0JBLCB0aGlzLmdsLlVOU0lHTkVEX0JZVEUsIHRoaXMud2ViUnRjQ29udHJvbGxlci52aWRlb1BsYXllci5nZXRWaWRlb0VsZW1lbnQoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFVwZGF0ZSBwcmV2IHZpZGVvIHdpZHRoL2hlaWdodFxyXG4gICAgICAgIHRoaXMucHJldlZpZGVvSGVpZ2h0ID0gdmlkZW9IZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5wcmV2VmlkZW9XaWR0aCA9IHZpZGVvV2lkdGg7XHJcbiAgICB9XHJcbiAgICBpbml0QnVmZmVycygpIHtcclxuICAgICAgICAvLyBDcmVhdGUgb3V0IHBvc2l0aW9uIGJ1ZmZlciBhbmQgaXRzIHZlcnRleCBzaGFkZXIgYXR0cmlidXRlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyBDcmVhdGUgYSBidWZmZXIgdG8gcHV0IHRoZSB0aGUgdmVydGljZXMgb2YgdGhlIHBsYW5lIHdlIHdpbGwgZHJhdyB0aGUgdmlkZW8gc3RyZWFtIG9udG9cclxuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbkJ1ZmZlciA9IHRoaXMuZ2wuY3JlYXRlQnVmZmVyKCk7XHJcbiAgICAgICAgICAgIC8vIEJpbmQgdGhlIHBvc2l0aW9uIGJ1ZmZlclxyXG4gICAgICAgICAgICB0aGlzLmdsLmJpbmRCdWZmZXIodGhpcy5nbC5BUlJBWV9CVUZGRVIsIHRoaXMucG9zaXRpb25CdWZmZXIpO1xyXG4gICAgICAgICAgICAvLyBFbmFibGUgYHBvc2l0aW9uTG9jYXRpb25gIHRvIGJlIHVzZWQgYXMgdmVydGV4IHNoYWRlciBhdHRyaWJ1dGVcclxuICAgICAgICAgICAgdGhpcy5nbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLnBvc2l0aW9uTG9jYXRpb24pO1xyXG4gICAgICAgICAgICAvLyBOb3RlOiBwb3NpdGlvbnMgYXJlIHBhc3NlZCBpbiBjbGlwLXNwYWNlIGNvb3JkaW5hdGVzIFstMS4uMV0gc28gbm8gbmVlZCB0byBjb252ZXJ0IGluLXNoYWRlclxyXG4gICAgICAgICAgICAvLyBwcmV0dGllci1pZ25vcmVcclxuICAgICAgICAgICAgdGhpcy5nbC5idWZmZXJEYXRhKHRoaXMuZ2wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KFtcclxuICAgICAgICAgICAgICAgIC0xLjAsIDEuMCxcclxuICAgICAgICAgICAgICAgIDEuMCwgMS4wLFxyXG4gICAgICAgICAgICAgICAgLTEuMCwgLTEuMCxcclxuICAgICAgICAgICAgICAgIC0xLjAsIC0xLjAsXHJcbiAgICAgICAgICAgICAgICAxLjAsIDEuMCxcclxuICAgICAgICAgICAgICAgIDEuMCwgLTEuMFxyXG4gICAgICAgICAgICBdKSwgdGhpcy5nbC5TVEFUSUNfRFJBVyk7XHJcbiAgICAgICAgICAgIC8vIFRlbGwgcG9zaXRpb24gYXR0cmlidXRlIG9mIHRoZSB2ZXJ0ZXggc2hhZGVyIGhvdyB0byBnZXQgZGF0YSBvdXQgb2YgdGhlIGJvdW5kIGJ1ZmZlciAodGhlIHBvc2l0aW9uQnVmZmVyKVxyXG4gICAgICAgICAgICB0aGlzLmdsLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5wb3NpdGlvbkxvY2F0aW9uLCAyIC8qc2l6ZSovLCB0aGlzLmdsLkZMT0FUIC8qdHlwZSovLCBmYWxzZSAvKm5vcm1hbGl6ZSovLCAwIC8qc3RyaWRlKi8sIDAgLypvZmZzZXQqLyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIENyZWF0ZSBvdXIgdGV4dHVyZSBjb29yZGluYXRlIGJ1ZmZlcnMgZm9yIGFjY2Vzc2luZyBvdXIgdGV4dHVyZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy50ZXhjb29yZEJ1ZmZlciA9IHRoaXMuZ2wuY3JlYXRlQnVmZmVyKCk7XHJcbiAgICAgICAgICAgIC8vIEJpbmQgdGhlIHRleHR1cmUgY29vcmRpbmF0ZSBidWZmZXJcclxuICAgICAgICAgICAgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLnRleGNvb3JkQnVmZmVyKTtcclxuICAgICAgICAgICAgLy8gRW5hYmxlIGB0ZXhjb29yZExvY2F0aW9uYCB0byBiZSB1c2VkIGFzIGEgdmVydGV4dCBzaGFkZXIgYXR0cmlidXRlXHJcbiAgICAgICAgICAgIHRoaXMuZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy50ZXhjb29yZExvY2F0aW9uKTtcclxuICAgICAgICAgICAgLy8gVGhlIHRleHR1cmUgY29vcmRpbmF0ZXMgdG8gYXBwbHkgZm9yIHJlY3RhbmdsZSB3ZSBhcmUgZHJhd2luZ1xyXG4gICAgICAgICAgICB0aGlzLmdsLmJ1ZmZlckRhdGEodGhpcy5nbC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkoW1xyXG4gICAgICAgICAgICAgICAgMC4wLCAwLjAsXHJcbiAgICAgICAgICAgICAgICAxLjAsIDAuMCxcclxuICAgICAgICAgICAgICAgIDAuMCwgMS4wLFxyXG4gICAgICAgICAgICAgICAgMC4wLCAxLjAsXHJcbiAgICAgICAgICAgICAgICAxLjAsIDAuMCxcclxuICAgICAgICAgICAgICAgIDEuMCwgMS4wXHJcbiAgICAgICAgICAgIF0pLCB0aGlzLmdsLlNUQVRJQ19EUkFXKTtcclxuICAgICAgICAgICAgLy8gVGVsbCB0ZXh0dXJlIGNvb3JkaW5hdGUgYXR0cmlidXRlIG9mIHRoZSB2ZXJ0ZXggc2hhZGVyIGhvdyB0byBnZXQgZGF0YSBvdXQgb2YgdGhlIGJvdW5kIGJ1ZmZlciAodGhlIHRleGNvb3JkQnVmZmVyKVxyXG4gICAgICAgICAgICB0aGlzLmdsLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy50ZXhjb29yZExvY2F0aW9uLCAyIC8qc2l6ZSovLCB0aGlzLmdsLkZMT0FUIC8qdHlwZSovLCBmYWxzZSAvKm5vcm1hbGl6ZSovLCAwIC8qc3RyaWRlKi8sIDAgLypvZmZzZXQqLyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgb25YclNlc3Npb25TdGFydGVkKHNlc3Npb24pIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnWFIgU2Vzc2lvbiBzdGFydGVkJyk7XHJcbiAgICAgICAgdGhpcy54clNlc3Npb24gPSBzZXNzaW9uO1xyXG4gICAgICAgIHRoaXMueHJTZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoJ2VuZCcsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5vblhyU2Vzc2lvbkVuZGVkKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gSW5pdGlhbGl6YXRpb25cclxuICAgICAgICB0aGlzLmluaXRHTCgpO1xyXG4gICAgICAgIHRoaXMuaW5pdFNoYWRlcnMoKTtcclxuICAgICAgICB0aGlzLmluaXRCdWZmZXJzKCk7XHJcbiAgICAgICAgc2Vzc2lvbi5yZXF1ZXN0UmVmZXJlbmNlU3BhY2UoJ2xvY2FsJykudGhlbigocmVmU3BhY2UpID0+IHtcclxuICAgICAgICAgICAgdGhpcy54clJlZlNwYWNlID0gcmVmU3BhY2U7XHJcbiAgICAgICAgICAgIC8vIFNldCB1cCBvdXIgYmFzZSBsYXllciAoaS5lLiBhIHByb2plY3Rpb24gbGF5ZXIgdGhhdCBmaWxscyB0aGUgZW50aXJlIFhSIHZpZXdwb3J0KS5cclxuICAgICAgICAgICAgdGhpcy54clNlc3Npb24udXBkYXRlUmVuZGVyU3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgYmFzZUxheWVyOiBuZXcgWFJXZWJHTExheWVyKHRoaXMueHJTZXNzaW9uLCB0aGlzLmdsKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy8gVXBkYXRlIHRhcmdldCBmcmFtZXJhdGUgdG8gOTAgZnBzIGlmIDkwIGZwcyBpcyBzdXBwb3J0ZWQgaW4gdGhpcyBYUiBkZXZpY2VcclxuICAgICAgICAgICAgaWYgKHRoaXMueHJTZXNzaW9uLnN1cHBvcnRlZEZyYW1lUmF0ZXMpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGZyYW1lUmF0ZSBvZiB0aGlzLnhyU2Vzc2lvbi5zdXBwb3J0ZWRGcmFtZVJhdGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZyYW1lUmF0ZSA9PSA5MCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uLnVwZGF0ZVRhcmdldEZyYW1lUmF0ZSg5MCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIEJpbmRpbmcgdG8gZWFjaCBuZXcgZnJhbWUgdG8gZ2V0IGxhdGVzdCBYUiB1cGRhdGVzXHJcbiAgICAgICAgICAgIHRoaXMueHJTZXNzaW9uLnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLm9uWHJGcmFtZS5iaW5kKHRoaXMpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLm9uU2Vzc2lvblN0YXJ0ZWQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ3hyU2Vzc2lvblN0YXJ0ZWQnKSk7XHJcbiAgICB9XHJcbiAgICBzZW5kWFJEYXRhVG9VRSgpIHtcclxuICAgICAgICBpZiAodGhpcy5sZWZ0VmlldyA9PSBudWxsIHx8IHRoaXMucmlnaHRWaWV3ID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBsZWZ0RXllVHJhbnMgPSB0aGlzLmxlZnRWaWV3LnRyYW5zZm9ybS5tYXRyaXg7XHJcbiAgICAgICAgY29uc3QgbGVmdEV5ZVByb2ogPSB0aGlzLmxlZnRWaWV3LnByb2plY3Rpb25NYXRyaXg7XHJcbiAgICAgICAgY29uc3QgcmlnaHRFeWVUcmFucyA9IHRoaXMucmlnaHRWaWV3LnRyYW5zZm9ybS5tYXRyaXg7XHJcbiAgICAgICAgY29uc3QgcmlnaHRFeWVQcm9qID0gdGhpcy5yaWdodFZpZXcucHJvamVjdGlvbk1hdHJpeDtcclxuICAgICAgICA7XHJcbiAgICAgICAgLy8gc2VuZCB0cmFuc2Zvcm0gKDR4NCkgYW5kIHByb2plY3Rpb24gbWF0cml4ICg0eDQpIGRhdGEgZm9yIGVhY2ggZXllIChsZWZ0IGZpcnN0LCB0aGVuIHJpZ2h0KVxyXG4gICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxyXG4gICAgICAgIHRoaXMud2ViUnRjQ29udHJvbGxlci5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci50b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdYUkV5ZVZpZXdzJykoW1xyXG4gICAgICAgICAgICAvLyBMZWZ0IGV5ZSA0eDQgdHJhbnNmb3JtIG1hdHJpeFxyXG4gICAgICAgICAgICBsZWZ0RXllVHJhbnNbMF0sIGxlZnRFeWVUcmFuc1s0XSwgbGVmdEV5ZVRyYW5zWzhdLCBsZWZ0RXllVHJhbnNbMTJdLFxyXG4gICAgICAgICAgICBsZWZ0RXllVHJhbnNbMV0sIGxlZnRFeWVUcmFuc1s1XSwgbGVmdEV5ZVRyYW5zWzldLCBsZWZ0RXllVHJhbnNbMTNdLFxyXG4gICAgICAgICAgICBsZWZ0RXllVHJhbnNbMl0sIGxlZnRFeWVUcmFuc1s2XSwgbGVmdEV5ZVRyYW5zWzEwXSwgbGVmdEV5ZVRyYW5zWzE0XSxcclxuICAgICAgICAgICAgbGVmdEV5ZVRyYW5zWzNdLCBsZWZ0RXllVHJhbnNbN10sIGxlZnRFeWVUcmFuc1sxMV0sIGxlZnRFeWVUcmFuc1sxNV0sXHJcbiAgICAgICAgICAgIC8vIExlZnQgZXllIDR4NCBwcm9qZWN0aW9uIG1hdHJpeFxyXG4gICAgICAgICAgICBsZWZ0RXllUHJvalswXSwgbGVmdEV5ZVByb2pbNF0sIGxlZnRFeWVQcm9qWzhdLCBsZWZ0RXllUHJvalsxMl0sXHJcbiAgICAgICAgICAgIGxlZnRFeWVQcm9qWzFdLCBsZWZ0RXllUHJvals1XSwgbGVmdEV5ZVByb2pbOV0sIGxlZnRFeWVQcm9qWzEzXSxcclxuICAgICAgICAgICAgbGVmdEV5ZVByb2pbMl0sIGxlZnRFeWVQcm9qWzZdLCBsZWZ0RXllUHJvalsxMF0sIGxlZnRFeWVQcm9qWzE0XSxcclxuICAgICAgICAgICAgbGVmdEV5ZVByb2pbM10sIGxlZnRFeWVQcm9qWzddLCBsZWZ0RXllUHJvalsxMV0sIGxlZnRFeWVQcm9qWzE1XSxcclxuICAgICAgICAgICAgLy8gUmlnaHQgZXllIDR4NCB0cmFuc2Zvcm0gbWF0cml4XHJcbiAgICAgICAgICAgIHJpZ2h0RXllVHJhbnNbMF0sIHJpZ2h0RXllVHJhbnNbNF0sIHJpZ2h0RXllVHJhbnNbOF0sIHJpZ2h0RXllVHJhbnNbMTJdLFxyXG4gICAgICAgICAgICByaWdodEV5ZVRyYW5zWzFdLCByaWdodEV5ZVRyYW5zWzVdLCByaWdodEV5ZVRyYW5zWzldLCByaWdodEV5ZVRyYW5zWzEzXSxcclxuICAgICAgICAgICAgcmlnaHRFeWVUcmFuc1syXSwgcmlnaHRFeWVUcmFuc1s2XSwgcmlnaHRFeWVUcmFuc1sxMF0sIHJpZ2h0RXllVHJhbnNbMTRdLFxyXG4gICAgICAgICAgICByaWdodEV5ZVRyYW5zWzNdLCByaWdodEV5ZVRyYW5zWzddLCByaWdodEV5ZVRyYW5zWzExXSwgcmlnaHRFeWVUcmFuc1sxNV0sXHJcbiAgICAgICAgICAgIC8vIHJpZ2h0IGV5ZSA0eDQgcHJvamVjdGlvbiBtYXRyaXhcclxuICAgICAgICAgICAgcmlnaHRFeWVQcm9qWzBdLCByaWdodEV5ZVByb2pbNF0sIHJpZ2h0RXllUHJvals4XSwgcmlnaHRFeWVQcm9qWzEyXSxcclxuICAgICAgICAgICAgcmlnaHRFeWVQcm9qWzFdLCByaWdodEV5ZVByb2pbNV0sIHJpZ2h0RXllUHJvals5XSwgcmlnaHRFeWVQcm9qWzEzXSxcclxuICAgICAgICAgICAgcmlnaHRFeWVQcm9qWzJdLCByaWdodEV5ZVByb2pbNl0sIHJpZ2h0RXllUHJvalsxMF0sIHJpZ2h0RXllUHJvalsxNF0sXHJcbiAgICAgICAgICAgIHJpZ2h0RXllUHJvalszXSwgcmlnaHRFeWVQcm9qWzddLCByaWdodEV5ZVByb2pbMTFdLCByaWdodEV5ZVByb2pbMTVdXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbiAgICBvblhyRnJhbWUodGltZSwgZnJhbWUpIHtcclxuICAgICAgICB0aGlzLnhyVmlld2VyUG9zZSA9IGZyYW1lLmdldFZpZXdlclBvc2UodGhpcy54clJlZlNwYWNlKTtcclxuICAgICAgICBpZiAodGhpcy54clZpZXdlclBvc2UpIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVWaWV3cygpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5sZWZ0VmlldyA9PSBudWxsIHx8IHRoaXMucmlnaHRWaWV3ID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnNlbmRYUkRhdGFUb1VFKCk7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVmlkZW9UZXh0dXJlKCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLndlYlJ0Y0NvbnRyb2xsZXIuY29uZmlnLmlzRmxhZ0VuYWJsZWQoX3BpeGVsc3RyZWFtaW5nZnJvbnRlbmRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5GbGFncy5YUkNvbnRyb2xsZXJJbnB1dCkpIHtcclxuICAgICAgICAgICAgdGhpcy54clNlc3Npb24uaW5wdXRTb3VyY2VzLmZvckVhY2goKHNvdXJjZSwgaW5kZXgsIGFycmF5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnhyR2FtZXBhZENvbnRyb2xsZXIudXBkYXRlU3RhdHVzKHNvdXJjZSwgZnJhbWUsIHRoaXMueHJSZWZTcGFjZSk7XHJcbiAgICAgICAgICAgIH0sIHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnhyU2Vzc2lvbi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKHRpbWUsIGZyYW1lKSA9PiB0aGlzLm9uWHJGcmFtZSh0aW1lLCBmcmFtZSkpO1xyXG4gICAgICAgIHRoaXMub25GcmFtZS5kaXNwYXRjaEV2ZW50KG5ldyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXy5YckZyYW1lRXZlbnQoeyB0aW1lLCBmcmFtZSB9KSk7XHJcbiAgICB9XHJcbiAgICB1cGRhdGVWaWV3cygpIHtcclxuICAgICAgICBpZiAoIXRoaXMueHJWaWV3ZXJQb3NlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChjb25zdCB2aWV3IG9mIHRoaXMueHJWaWV3ZXJQb3NlLnZpZXdzKSB7XHJcbiAgICAgICAgICAgIGlmICh2aWV3LmV5ZSA9PT0gXCJsZWZ0XCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubGVmdFZpZXcgPSB2aWV3O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHZpZXcuZXllID09PSBcInJpZ2h0XCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmlnaHRWaWV3ID0gdmlldztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBpZiAoIXRoaXMuZ2wpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBCaW5kIHRoZSBmcmFtZWJ1ZmZlciB0byB0aGUgYmFzZSBsYXllcidzIGZyYW1lYnVmZmVyXHJcbiAgICAgICAgY29uc3QgZ2xMYXllciA9IHRoaXMueHJTZXNzaW9uLnJlbmRlclN0YXRlLmJhc2VMYXllcjtcclxuICAgICAgICB0aGlzLmdsLmJpbmRGcmFtZWJ1ZmZlcih0aGlzLmdsLkZSQU1FQlVGRkVSLCBnbExheWVyLmZyYW1lYnVmZmVyKTtcclxuICAgICAgICAvLyBTZXQgdGhlIHJlbGV2YW50IHBvcnRpb24gb2YgY2xpcCBzcGFjZVxyXG4gICAgICAgIHRoaXMuZ2wudmlld3BvcnQoMCwgMCwgZ2xMYXllci5mcmFtZWJ1ZmZlcldpZHRoLCBnbExheWVyLmZyYW1lYnVmZmVySGVpZ2h0KTtcclxuICAgICAgICAvLyBEcmF3IHRoZSByZWN0YW5nbGUgd2Ugd2lsbCBzaG93IHRoZSB2aWRlbyBzdHJlYW0gdGV4dHVyZSBvblxyXG4gICAgICAgIHRoaXMuZ2wuZHJhd0FycmF5cyh0aGlzLmdsLlRSSUFOR0xFUyAvKnByaW1pdGl2ZVR5cGUqLywgMCAvKm9mZnNldCovLCA2IC8qY291bnQqLyk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgaXNTZXNzaW9uU3VwcG9ydGVkKG1vZGUpIHtcclxuICAgICAgICBpZiAobG9jYXRpb24ucHJvdG9jb2wgIT09IFwiaHR0cHM6XCIpIHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuSW5mbyhudWxsLCBcIldlYlhSIHJlcXVpcmVzIGh0dHBzLCBpZiB5b3Ugd2FudCBXZWJYUiB1c2UgaHR0cHMuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobmF2aWdhdG9yLnhyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuYXZpZ2F0b3IueHIuaXNTZXNzaW9uU3VwcG9ydGVkKG1vZGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCJzZHBcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogZXh0ZXJuYWwgXCJzZHBcIiAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgobW9kdWxlKSA9PiB7XG5cbnZhciB4ID0geSA9PiB7IHZhciB4ID0ge307IF9fd2VicGFja19yZXF1aXJlX18uZCh4LCB5KTsgcmV0dXJuIHg7IH1cbnZhciB5ID0geCA9PiAoKSA9PiB4XG5tb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfc2RwX187XG5cbi8qKiovIH0pXG5cbi8qKioqKiovIH0pO1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIHZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcbi8qKioqKiovIFxuLyoqKioqKi8gLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovIFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuLyoqKioqKi8gXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcbi8qKioqKiovIFx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovIFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuLyoqKioqKi8gXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG4vKioqKioqLyBcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0fTtcbi8qKioqKiovIFxuLyoqKioqKi8gXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqLyBcbi8qKioqKiovIFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gfVxuLyoqKioqKi8gXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gLyogd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzICovXG4vKioqKioqLyAoKCkgPT4ge1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG4vKioqKioqLyBcdFx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuLyoqKioqKi8gXHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG4vKioqKioqLyBcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi8gfSkoKTtcbi8qKioqKiovIFxuLyoqKioqKi8gLyogd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCAqL1xuLyoqKioqKi8gKCgpID0+IHtcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKVxuLyoqKioqKi8gfSkoKTtcbi8qKioqKiovIFxuLyoqKioqKi8gLyogd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCAqL1xuLyoqKioqKi8gKCgpID0+IHtcbi8qKioqKiovIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuLyoqKioqKi8gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4vKioqKioqLyBcdH07XG4vKioqKioqLyB9KSgpO1xuLyoqKioqKi8gXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xudmFyIF9fd2VicGFja19leHBvcnRzX18gPSB7fTtcbi8vIFRoaXMgZW50cnkgbmVlZCB0byBiZSB3cmFwcGVkIGluIGFuIElJRkUgYmVjYXVzZSBpdCBuZWVkIHRvIGJlIGlzb2xhdGVkIGFnYWluc3Qgb3RoZXIgbW9kdWxlcyBpbiB0aGUgY2h1bmsuXG4oKCkgPT4ge1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3BpeGVsc3RyZWFtaW5nZnJvbnRlbmQudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiQWZrTG9naWNcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX0FGS19BRktDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uQUZLQ29udHJvbGxlciksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiQWZrVGltZWRPdXRFdmVudFwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzI1X18uQWZrVGltZWRPdXRFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiQWZrV2FybmluZ0FjdGl2YXRlRXZlbnRcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yNV9fLkFma1dhcm5pbmdBY3RpdmF0ZUV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJBZmtXYXJuaW5nRGVhY3RpdmF0ZUV2ZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjVfXy5BZmtXYXJuaW5nRGVhY3RpdmF0ZUV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJBZmtXYXJuaW5nVXBkYXRlRXZlbnRcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yNV9fLkFma1dhcm5pbmdVcGRhdGVFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiQWdncmVnYXRlZFN0YXRzXCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXJfQWdncmVnYXRlZFN0YXRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMl9fLkFnZ3JlZ2F0ZWRTdGF0cyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiQ2FuZGlkYXRlUGFpclN0YXRzXCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXJfQ2FuZGlkYXRlUGFpclN0YXRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yMF9fLkNhbmRpZGF0ZVBhaXJTdGF0cyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiQ2FuZGlkYXRlU3RhdFwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfUGVlckNvbm5lY3Rpb25Db250cm9sbGVyX0NhbmRpZGF0ZVN0YXRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzIxX18uQ2FuZGlkYXRlU3RhdCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiQ29uZmlnXCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uQ29uZmlnKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJDb250cm9sU2NoZW1lVHlwZVwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLkNvbnRyb2xTY2hlbWVUeXBlKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJEYXRhQ2hhbm5lbENsb3NlRXZlbnRcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yNV9fLkRhdGFDaGFubmVsQ2xvc2VFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiRGF0YUNoYW5uZWxFcnJvckV2ZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjVfXy5EYXRhQ2hhbm5lbEVycm9yRXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkRhdGFDaGFubmVsTGF0ZW5jeVRlc3RSZXNwb25zZUV2ZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjVfXy5EYXRhQ2hhbm5lbExhdGVuY3lUZXN0UmVzcG9uc2VFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiRGF0YUNoYW5uZWxMYXRlbmN5VGVzdFJlc3VsdEV2ZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjVfXy5EYXRhQ2hhbm5lbExhdGVuY3lUZXN0UmVzdWx0RXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkRhdGFDaGFubmVsT3BlbkV2ZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjVfXy5EYXRhQ2hhbm5lbE9wZW5FdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiRGF0YUNoYW5uZWxTdGF0c1wiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfUGVlckNvbm5lY3Rpb25Db250cm9sbGVyX0RhdGFDaGFubmVsU3RhdHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzIyX18uRGF0YUNoYW5uZWxTdGF0cyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiRW5jb2RlclNldHRpbmdzXCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9EYXRhQ2hhbm5lbF9Jbml0aWFsU2V0dGluZ3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18uRW5jb2RlclNldHRpbmdzKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJFdmVudEVtaXR0ZXJcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yNV9fLkV2ZW50RW1pdHRlciksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiRmxhZ3NcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5GbGFncyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiSGlkZUZyZWV6ZUZyYW1lRXZlbnRcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yNV9fLkhpZGVGcmVlemVGcmFtZUV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJJbmJvdW5kQXVkaW9TdGF0c1wiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfUGVlckNvbm5lY3Rpb25Db250cm9sbGVyX0luYm91bmRSVFBTdGF0c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjNfXy5JbmJvdW5kQXVkaW9TdGF0cyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiSW5ib3VuZFZpZGVvU3RhdHNcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1BlZXJDb25uZWN0aW9uQ29udHJvbGxlcl9JbmJvdW5kUlRQU3RhdHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzIzX18uSW5ib3VuZFZpZGVvU3RhdHMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkluaXRpYWxTZXR0aW5nc1wiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfRGF0YUNoYW5uZWxfSW5pdGlhbFNldHRpbmdzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fLkluaXRpYWxTZXR0aW5ncyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiSW5pdGlhbFNldHRpbmdzRXZlbnRcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yNV9fLkluaXRpYWxTZXR0aW5nc0V2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJMYXRlbmN5VGVzdFJlc3VsdEV2ZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjVfXy5MYXRlbmN5VGVzdFJlc3VsdEV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJMYXRlbmN5VGVzdFJlc3VsdHNcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX0RhdGFDaGFubmVsX0xhdGVuY3lUZXN0UmVzdWx0c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTBfXy5MYXRlbmN5VGVzdFJlc3VsdHMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkxvYWRGcmVlemVGcmFtZUV2ZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjVfXy5Mb2FkRnJlZXplRnJhbWVFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiTG9nZ2VyXCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xM19fLkxvZ2dlciksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiTWVzc2FnZURpcmVjdGlvblwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTWVzc2FnZURpcmVjdGlvbiksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiTWVzc2FnZVJlY3ZcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1dlYlNvY2tldHNfTWVzc2FnZVJlY2VpdmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE3X18uTWVzc2FnZVJlY3YpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIk1lc3NhZ2VTZW5kXCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9XZWJTb2NrZXRzX01lc3NhZ2VTZW5kX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLk1lc3NhZ2VTZW5kKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJNZXNzYWdlU3RyZWFtZXJMaXN0XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9XZWJTb2NrZXRzX01lc3NhZ2VSZWNlaXZlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xN19fLk1lc3NhZ2VTdHJlYW1lckxpc3QpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIk51bWVyaWNQYXJhbWV0ZXJzXCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uTnVtZXJpY1BhcmFtZXRlcnMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIk9wdGlvblBhcmFtZXRlcnNcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5PcHRpb25QYXJhbWV0ZXJzKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJPdXRCb3VuZFZpZGVvU3RhdHNcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1BlZXJDb25uZWN0aW9uQ29udHJvbGxlcl9PdXRCb3VuZFJUUFN0YXRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yNF9fLk91dEJvdW5kVmlkZW9TdGF0cyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiUGl4ZWxTdHJlYW1pbmdcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1BpeGVsU3RyZWFtaW5nX1BpeGVsU3RyZWFtaW5nX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X18uUGl4ZWxTdHJlYW1pbmcpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlBsYXlTdHJlYW1FcnJvckV2ZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjVfXy5QbGF5U3RyZWFtRXJyb3JFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiUGxheVN0cmVhbUV2ZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjVfXy5QbGF5U3RyZWFtRXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlBsYXlTdHJlYW1SZWplY3RlZEV2ZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjVfXy5QbGF5U3RyZWFtUmVqZWN0ZWRFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiUGxheWVyQ291bnRFdmVudFwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzI1X18uUGxheWVyQ291bnRFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiU2V0dGluZ0Jhc2VcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX0NvbmZpZ19TZXR0aW5nQmFzZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fLlNldHRpbmdCYXNlKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJTZXR0aW5nRmxhZ1wiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfQ29uZmlnX1NldHRpbmdGbGFnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uU2V0dGluZ0ZsYWcpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlNldHRpbmdOdW1iZXJcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX0NvbmZpZ19TZXR0aW5nTnVtYmVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18uU2V0dGluZ051bWJlciksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiU2V0dGluZ09wdGlvblwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfQ29uZmlnX1NldHRpbmdPcHRpb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXy5TZXR0aW5nT3B0aW9uKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJTZXR0aW5nVGV4dFwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfQ29uZmlnX1NldHRpbmdUZXh0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X18uU2V0dGluZ1RleHQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlNldHRpbmdzQ2hhbmdlZEV2ZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjVfXy5TZXR0aW5nc0NoYW5nZWRFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiU2lnbmFsbGluZ1Byb3RvY29sXCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9XZWJTb2NrZXRzX1NpZ25hbGxpbmdQcm90b2NvbF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTlfXy5TaWduYWxsaW5nUHJvdG9jb2wpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlN0YXRzUmVjZWl2ZWRFdmVudFwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzI1X18uU3RhdHNSZWNlaXZlZEV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJTdHJlYW1Mb2FkaW5nRXZlbnRcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yNV9fLlN0cmVhbUxvYWRpbmdFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiU3RyZWFtUHJlQ29ubmVjdEV2ZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjVfXy5TdHJlYW1QcmVDb25uZWN0RXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlN0cmVhbVByZURpc2Nvbm5lY3RFdmVudFwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzI1X18uU3RyZWFtUHJlRGlzY29ubmVjdEV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJTdHJlYW1SZWNvbm5lY3RFdmVudFwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzI1X18uU3RyZWFtUmVjb25uZWN0RXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlN0cmVhbWVySURDaGFuZ2VkTWVzc2FnZUV2ZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjVfXy5TdHJlYW1lcklEQ2hhbmdlZE1lc3NhZ2VFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiU3RyZWFtZXJMaXN0TWVzc2FnZUV2ZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjVfXy5TdHJlYW1lckxpc3RNZXNzYWdlRXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlRleHRQYXJhbWV0ZXJzXCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uVGV4dFBhcmFtZXRlcnMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlVucXVhbnRpemVkQW5kRGVub3JtYWxpemVVbnNpZ25lZFwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfVXRpbF9Db29yZGluYXRlQ29udmVydGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNF9fLlVucXVhbnRpemVkRGVub3JtYWxpemVkVW5zaWduZWRDb29yZCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiVmlkZW9FbmNvZGVyQXZnUVBFdmVudFwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzI1X18uVmlkZW9FbmNvZGVyQXZnUVBFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiVmlkZW9Jbml0aWFsaXplZEV2ZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjVfXy5WaWRlb0luaXRpYWxpemVkRXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIldlYlJUQ1NldHRpbmdzXCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9EYXRhQ2hhbm5lbF9Jbml0aWFsU2V0dGluZ3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18uV2ViUlRDU2V0dGluZ3MpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIldlYlJ0Y0F1dG9Db25uZWN0RXZlbnRcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yNV9fLldlYlJ0Y0F1dG9Db25uZWN0RXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIldlYlJ0Y0Nvbm5lY3RlZEV2ZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjVfXy5XZWJSdGNDb25uZWN0ZWRFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiV2ViUnRjQ29ubmVjdGluZ0V2ZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjVfXy5XZWJSdGNDb25uZWN0aW5nRXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIldlYlJ0Y0Rpc2Nvbm5lY3RlZEV2ZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjVfXy5XZWJSdGNEaXNjb25uZWN0ZWRFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiV2ViUnRjRmFpbGVkRXZlbnRcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yNV9fLldlYlJ0Y0ZhaWxlZEV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJXZWJSdGNQbGF5ZXJDb250cm9sbGVyXCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9XZWJSdGNQbGF5ZXJfV2ViUnRjUGxheWVyQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLldlYlJ0Y1BsYXllckNvbnRyb2xsZXIpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIldlYlJ0Y1NkcEV2ZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjVfXy5XZWJSdGNTZHBFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiV2ViUnRjVENQUmVsYXlEZXRlY3RlZEV2ZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjVfXy5XZWJSdGNUQ1BSZWxheURldGVjdGVkRXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIldlYlNvY2tldENvbnRyb2xsZXJcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1dlYlNvY2tldHNfV2ViU29ja2V0Q29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMThfXy5XZWJTb2NrZXRDb250cm9sbGVyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJXZWJYUkNvbnRyb2xsZXJcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1dlYlhSX1dlYlhSQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLldlYlhSQ29udHJvbGxlciksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiWHJGcmFtZUV2ZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjVfXy5YckZyYW1lRXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlhyU2Vzc2lvbkVuZGVkRXZlbnRcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yNV9fLlhyU2Vzc2lvbkVuZGVkRXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlhyU2Vzc2lvblN0YXJ0ZWRFdmVudFwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzI1X18uWHJTZXNzaW9uU3RhcnRlZEV2ZW50KVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1dlYlJ0Y1BsYXllcl9XZWJSdGNQbGF5ZXJDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1dlYlJ0Y1BsYXllci9XZWJSdGNQbGF5ZXJDb250cm9sbGVyICovIFwiLi9zcmMvV2ViUnRjUGxheWVyL1dlYlJ0Y1BsYXllckNvbnRyb2xsZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1dlYlhSX1dlYlhSQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9XZWJYUi9XZWJYUkNvbnRyb2xsZXIgKi8gXCIuL3NyYy9XZWJYUi9XZWJYUkNvbnRyb2xsZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vQ29uZmlnL0NvbmZpZyAqLyBcIi4vc3JjL0NvbmZpZy9Db25maWcudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0NvbmZpZ19TZXR0aW5nQmFzZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9Db25maWcvU2V0dGluZ0Jhc2UgKi8gXCIuL3NyYy9Db25maWcvU2V0dGluZ0Jhc2UudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0NvbmZpZ19TZXR0aW5nRmxhZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9Db25maWcvU2V0dGluZ0ZsYWcgKi8gXCIuL3NyYy9Db25maWcvU2V0dGluZ0ZsYWcudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0NvbmZpZ19TZXR0aW5nTnVtYmVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0NvbmZpZy9TZXR0aW5nTnVtYmVyICovIFwiLi9zcmMvQ29uZmlnL1NldHRpbmdOdW1iZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0NvbmZpZ19TZXR0aW5nT3B0aW9uX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0NvbmZpZy9TZXR0aW5nT3B0aW9uICovIFwiLi9zcmMvQ29uZmlnL1NldHRpbmdPcHRpb24udHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0NvbmZpZ19TZXR0aW5nVGV4dF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9Db25maWcvU2V0dGluZ1RleHQgKi8gXCIuL3NyYy9Db25maWcvU2V0dGluZ1RleHQudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1BpeGVsU3RyZWFtaW5nX1BpeGVsU3RyZWFtaW5nX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1BpeGVsU3RyZWFtaW5nL1BpeGVsU3RyZWFtaW5nICovIFwiLi9zcmMvUGl4ZWxTdHJlYW1pbmcvUGl4ZWxTdHJlYW1pbmcudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0FGS19BRktDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0FGSy9BRktDb250cm9sbGVyICovIFwiLi9zcmMvQUZLL0FGS0NvbnRyb2xsZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0RhdGFDaGFubmVsX0xhdGVuY3lUZXN0UmVzdWx0c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vRGF0YUNoYW5uZWwvTGF0ZW5jeVRlc3RSZXN1bHRzICovIFwiLi9zcmMvRGF0YUNoYW5uZWwvTGF0ZW5jeVRlc3RSZXN1bHRzLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9EYXRhQ2hhbm5lbF9Jbml0aWFsU2V0dGluZ3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0RhdGFDaGFubmVsL0luaXRpYWxTZXR0aW5ncyAqLyBcIi4vc3JjL0RhdGFDaGFubmVsL0luaXRpYWxTZXR0aW5ncy50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfUGVlckNvbm5lY3Rpb25Db250cm9sbGVyX0FnZ3JlZ2F0ZWRTdGF0c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0FnZ3JlZ2F0ZWRTdGF0cyAqLyBcIi4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9BZ2dyZWdhdGVkU3RhdHMudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0xvZ2dlci9Mb2dnZXIgKi8gXCIuL3NyYy9Mb2dnZXIvTG9nZ2VyLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9VdGlsX0Nvb3JkaW5hdGVDb252ZXJ0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE0X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1V0aWwvQ29vcmRpbmF0ZUNvbnZlcnRlciAqLyBcIi4vc3JjL1V0aWwvQ29vcmRpbmF0ZUNvbnZlcnRlci50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1VlSW5zdGFuY2VNZXNzYWdlL1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyICovIFwiLi9zcmMvVWVJbnN0YW5jZU1lc3NhZ2UvU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1dlYlNvY2tldHNfTWVzc2FnZVNlbmRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1dlYlNvY2tldHMvTWVzc2FnZVNlbmQgKi8gXCIuL3NyYy9XZWJTb2NrZXRzL01lc3NhZ2VTZW5kLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9XZWJTb2NrZXRzX01lc3NhZ2VSZWNlaXZlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xN19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9XZWJTb2NrZXRzL01lc3NhZ2VSZWNlaXZlICovIFwiLi9zcmMvV2ViU29ja2V0cy9NZXNzYWdlUmVjZWl2ZS50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfV2ViU29ja2V0c19XZWJTb2NrZXRDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xOF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9XZWJTb2NrZXRzL1dlYlNvY2tldENvbnRyb2xsZXIgKi8gXCIuL3NyYy9XZWJTb2NrZXRzL1dlYlNvY2tldENvbnRyb2xsZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1dlYlNvY2tldHNfU2lnbmFsbGluZ1Byb3RvY29sX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xOV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9XZWJTb2NrZXRzL1NpZ25hbGxpbmdQcm90b2NvbCAqLyBcIi4vc3JjL1dlYlNvY2tldHMvU2lnbmFsbGluZ1Byb3RvY29sLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXJfQ2FuZGlkYXRlUGFpclN0YXRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvQ2FuZGlkYXRlUGFpclN0YXRzICovIFwiLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0NhbmRpZGF0ZVBhaXJTdGF0cy50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfUGVlckNvbm5lY3Rpb25Db250cm9sbGVyX0NhbmRpZGF0ZVN0YXRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzIxX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9DYW5kaWRhdGVTdGF0ICovIFwiLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0NhbmRpZGF0ZVN0YXQudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1BlZXJDb25uZWN0aW9uQ29udHJvbGxlcl9EYXRhQ2hhbm5lbFN0YXRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvRGF0YUNoYW5uZWxTdGF0cyAqLyBcIi4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9EYXRhQ2hhbm5lbFN0YXRzLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXJfSW5ib3VuZFJUUFN0YXRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yM19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvSW5ib3VuZFJUUFN0YXRzICovIFwiLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0luYm91bmRSVFBTdGF0cy50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfUGVlckNvbm5lY3Rpb25Db250cm9sbGVyX091dEJvdW5kUlRQU3RhdHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzI0X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9PdXRCb3VuZFJUUFN0YXRzICovIFwiLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL091dEJvdW5kUlRQU3RhdHMudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yNV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9VdGlsL0V2ZW50RW1pdHRlciAqLyBcIi4vc3JjL1V0aWwvRXZlbnRFbWl0dGVyLnRzXCIpO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cbn0pKCk7XG5cbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fQWZrTG9naWMgPSBfX3dlYnBhY2tfZXhwb3J0c19fLkFma0xvZ2ljO1xudmFyIF9fd2VicGFja19leHBvcnRzX19BZmtUaW1lZE91dEV2ZW50ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5BZmtUaW1lZE91dEV2ZW50O1xudmFyIF9fd2VicGFja19leHBvcnRzX19BZmtXYXJuaW5nQWN0aXZhdGVFdmVudCA9IF9fd2VicGFja19leHBvcnRzX18uQWZrV2FybmluZ0FjdGl2YXRlRXZlbnQ7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX0Fma1dhcm5pbmdEZWFjdGl2YXRlRXZlbnQgPSBfX3dlYnBhY2tfZXhwb3J0c19fLkFma1dhcm5pbmdEZWFjdGl2YXRlRXZlbnQ7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX0Fma1dhcm5pbmdVcGRhdGVFdmVudCA9IF9fd2VicGFja19leHBvcnRzX18uQWZrV2FybmluZ1VwZGF0ZUV2ZW50O1xudmFyIF9fd2VicGFja19leHBvcnRzX19BZ2dyZWdhdGVkU3RhdHMgPSBfX3dlYnBhY2tfZXhwb3J0c19fLkFnZ3JlZ2F0ZWRTdGF0cztcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fQ2FuZGlkYXRlUGFpclN0YXRzID0gX193ZWJwYWNrX2V4cG9ydHNfXy5DYW5kaWRhdGVQYWlyU3RhdHM7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX0NhbmRpZGF0ZVN0YXQgPSBfX3dlYnBhY2tfZXhwb3J0c19fLkNhbmRpZGF0ZVN0YXQ7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX0NvbmZpZyA9IF9fd2VicGFja19leHBvcnRzX18uQ29uZmlnO1xudmFyIF9fd2VicGFja19leHBvcnRzX19Db250cm9sU2NoZW1lVHlwZSA9IF9fd2VicGFja19leHBvcnRzX18uQ29udHJvbFNjaGVtZVR5cGU7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX0RhdGFDaGFubmVsQ2xvc2VFdmVudCA9IF9fd2VicGFja19leHBvcnRzX18uRGF0YUNoYW5uZWxDbG9zZUV2ZW50O1xudmFyIF9fd2VicGFja19leHBvcnRzX19EYXRhQ2hhbm5lbEVycm9yRXZlbnQgPSBfX3dlYnBhY2tfZXhwb3J0c19fLkRhdGFDaGFubmVsRXJyb3JFdmVudDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fRGF0YUNoYW5uZWxMYXRlbmN5VGVzdFJlc3BvbnNlRXZlbnQgPSBfX3dlYnBhY2tfZXhwb3J0c19fLkRhdGFDaGFubmVsTGF0ZW5jeVRlc3RSZXNwb25zZUV2ZW50O1xudmFyIF9fd2VicGFja19leHBvcnRzX19EYXRhQ2hhbm5lbExhdGVuY3lUZXN0UmVzdWx0RXZlbnQgPSBfX3dlYnBhY2tfZXhwb3J0c19fLkRhdGFDaGFubmVsTGF0ZW5jeVRlc3RSZXN1bHRFdmVudDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fRGF0YUNoYW5uZWxPcGVuRXZlbnQgPSBfX3dlYnBhY2tfZXhwb3J0c19fLkRhdGFDaGFubmVsT3BlbkV2ZW50O1xudmFyIF9fd2VicGFja19leHBvcnRzX19EYXRhQ2hhbm5lbFN0YXRzID0gX193ZWJwYWNrX2V4cG9ydHNfXy5EYXRhQ2hhbm5lbFN0YXRzO1xudmFyIF9fd2VicGFja19leHBvcnRzX19FbmNvZGVyU2V0dGluZ3MgPSBfX3dlYnBhY2tfZXhwb3J0c19fLkVuY29kZXJTZXR0aW5ncztcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fRXZlbnRFbWl0dGVyID0gX193ZWJwYWNrX2V4cG9ydHNfXy5FdmVudEVtaXR0ZXI7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX0ZsYWdzID0gX193ZWJwYWNrX2V4cG9ydHNfXy5GbGFncztcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fSGlkZUZyZWV6ZUZyYW1lRXZlbnQgPSBfX3dlYnBhY2tfZXhwb3J0c19fLkhpZGVGcmVlemVGcmFtZUV2ZW50O1xudmFyIF9fd2VicGFja19leHBvcnRzX19JbmJvdW5kQXVkaW9TdGF0cyA9IF9fd2VicGFja19leHBvcnRzX18uSW5ib3VuZEF1ZGlvU3RhdHM7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX0luYm91bmRWaWRlb1N0YXRzID0gX193ZWJwYWNrX2V4cG9ydHNfXy5JbmJvdW5kVmlkZW9TdGF0cztcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fSW5pdGlhbFNldHRpbmdzID0gX193ZWJwYWNrX2V4cG9ydHNfXy5Jbml0aWFsU2V0dGluZ3M7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX0luaXRpYWxTZXR0aW5nc0V2ZW50ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5Jbml0aWFsU2V0dGluZ3NFdmVudDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fTGF0ZW5jeVRlc3RSZXN1bHRFdmVudCA9IF9fd2VicGFja19leHBvcnRzX18uTGF0ZW5jeVRlc3RSZXN1bHRFdmVudDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fTGF0ZW5jeVRlc3RSZXN1bHRzID0gX193ZWJwYWNrX2V4cG9ydHNfXy5MYXRlbmN5VGVzdFJlc3VsdHM7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX0xvYWRGcmVlemVGcmFtZUV2ZW50ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5Mb2FkRnJlZXplRnJhbWVFdmVudDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fTG9nZ2VyID0gX193ZWJwYWNrX2V4cG9ydHNfXy5Mb2dnZXI7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX01lc3NhZ2VEaXJlY3Rpb24gPSBfX3dlYnBhY2tfZXhwb3J0c19fLk1lc3NhZ2VEaXJlY3Rpb247XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX01lc3NhZ2VSZWN2ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5NZXNzYWdlUmVjdjtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fTWVzc2FnZVNlbmQgPSBfX3dlYnBhY2tfZXhwb3J0c19fLk1lc3NhZ2VTZW5kO1xudmFyIF9fd2VicGFja19leHBvcnRzX19NZXNzYWdlU3RyZWFtZXJMaXN0ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5NZXNzYWdlU3RyZWFtZXJMaXN0O1xudmFyIF9fd2VicGFja19leHBvcnRzX19OdW1lcmljUGFyYW1ldGVycyA9IF9fd2VicGFja19leHBvcnRzX18uTnVtZXJpY1BhcmFtZXRlcnM7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX09wdGlvblBhcmFtZXRlcnMgPSBfX3dlYnBhY2tfZXhwb3J0c19fLk9wdGlvblBhcmFtZXRlcnM7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX091dEJvdW5kVmlkZW9TdGF0cyA9IF9fd2VicGFja19leHBvcnRzX18uT3V0Qm91bmRWaWRlb1N0YXRzO1xudmFyIF9fd2VicGFja19leHBvcnRzX19QaXhlbFN0cmVhbWluZyA9IF9fd2VicGFja19leHBvcnRzX18uUGl4ZWxTdHJlYW1pbmc7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX1BsYXlTdHJlYW1FcnJvckV2ZW50ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5QbGF5U3RyZWFtRXJyb3JFdmVudDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fUGxheVN0cmVhbUV2ZW50ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5QbGF5U3RyZWFtRXZlbnQ7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX1BsYXlTdHJlYW1SZWplY3RlZEV2ZW50ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5QbGF5U3RyZWFtUmVqZWN0ZWRFdmVudDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fUGxheWVyQ291bnRFdmVudCA9IF9fd2VicGFja19leHBvcnRzX18uUGxheWVyQ291bnRFdmVudDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fU2V0dGluZ0Jhc2UgPSBfX3dlYnBhY2tfZXhwb3J0c19fLlNldHRpbmdCYXNlO1xudmFyIF9fd2VicGFja19leHBvcnRzX19TZXR0aW5nRmxhZyA9IF9fd2VicGFja19leHBvcnRzX18uU2V0dGluZ0ZsYWc7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX1NldHRpbmdOdW1iZXIgPSBfX3dlYnBhY2tfZXhwb3J0c19fLlNldHRpbmdOdW1iZXI7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX1NldHRpbmdPcHRpb24gPSBfX3dlYnBhY2tfZXhwb3J0c19fLlNldHRpbmdPcHRpb247XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX1NldHRpbmdUZXh0ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5TZXR0aW5nVGV4dDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fU2V0dGluZ3NDaGFuZ2VkRXZlbnQgPSBfX3dlYnBhY2tfZXhwb3J0c19fLlNldHRpbmdzQ2hhbmdlZEV2ZW50O1xudmFyIF9fd2VicGFja19leHBvcnRzX19TaWduYWxsaW5nUHJvdG9jb2wgPSBfX3dlYnBhY2tfZXhwb3J0c19fLlNpZ25hbGxpbmdQcm90b2NvbDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fU3RhdHNSZWNlaXZlZEV2ZW50ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5TdGF0c1JlY2VpdmVkRXZlbnQ7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX1N0cmVhbUxvYWRpbmdFdmVudCA9IF9fd2VicGFja19leHBvcnRzX18uU3RyZWFtTG9hZGluZ0V2ZW50O1xudmFyIF9fd2VicGFja19leHBvcnRzX19TdHJlYW1QcmVDb25uZWN0RXZlbnQgPSBfX3dlYnBhY2tfZXhwb3J0c19fLlN0cmVhbVByZUNvbm5lY3RFdmVudDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fU3RyZWFtUHJlRGlzY29ubmVjdEV2ZW50ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5TdHJlYW1QcmVEaXNjb25uZWN0RXZlbnQ7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX1N0cmVhbVJlY29ubmVjdEV2ZW50ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5TdHJlYW1SZWNvbm5lY3RFdmVudDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fU3RyZWFtZXJJRENoYW5nZWRNZXNzYWdlRXZlbnQgPSBfX3dlYnBhY2tfZXhwb3J0c19fLlN0cmVhbWVySURDaGFuZ2VkTWVzc2FnZUV2ZW50O1xudmFyIF9fd2VicGFja19leHBvcnRzX19TdHJlYW1lckxpc3RNZXNzYWdlRXZlbnQgPSBfX3dlYnBhY2tfZXhwb3J0c19fLlN0cmVhbWVyTGlzdE1lc3NhZ2VFdmVudDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fVGV4dFBhcmFtZXRlcnMgPSBfX3dlYnBhY2tfZXhwb3J0c19fLlRleHRQYXJhbWV0ZXJzO1xudmFyIF9fd2VicGFja19leHBvcnRzX19VbnF1YW50aXplZEFuZERlbm9ybWFsaXplVW5zaWduZWQgPSBfX3dlYnBhY2tfZXhwb3J0c19fLlVucXVhbnRpemVkQW5kRGVub3JtYWxpemVVbnNpZ25lZDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fVmlkZW9FbmNvZGVyQXZnUVBFdmVudCA9IF9fd2VicGFja19leHBvcnRzX18uVmlkZW9FbmNvZGVyQXZnUVBFdmVudDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fVmlkZW9Jbml0aWFsaXplZEV2ZW50ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5WaWRlb0luaXRpYWxpemVkRXZlbnQ7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX1dlYlJUQ1NldHRpbmdzID0gX193ZWJwYWNrX2V4cG9ydHNfXy5XZWJSVENTZXR0aW5ncztcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fV2ViUnRjQXV0b0Nvbm5lY3RFdmVudCA9IF9fd2VicGFja19leHBvcnRzX18uV2ViUnRjQXV0b0Nvbm5lY3RFdmVudDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fV2ViUnRjQ29ubmVjdGVkRXZlbnQgPSBfX3dlYnBhY2tfZXhwb3J0c19fLldlYlJ0Y0Nvbm5lY3RlZEV2ZW50O1xudmFyIF9fd2VicGFja19leHBvcnRzX19XZWJSdGNDb25uZWN0aW5nRXZlbnQgPSBfX3dlYnBhY2tfZXhwb3J0c19fLldlYlJ0Y0Nvbm5lY3RpbmdFdmVudDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fV2ViUnRjRGlzY29ubmVjdGVkRXZlbnQgPSBfX3dlYnBhY2tfZXhwb3J0c19fLldlYlJ0Y0Rpc2Nvbm5lY3RlZEV2ZW50O1xudmFyIF9fd2VicGFja19leHBvcnRzX19XZWJSdGNGYWlsZWRFdmVudCA9IF9fd2VicGFja19leHBvcnRzX18uV2ViUnRjRmFpbGVkRXZlbnQ7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX1dlYlJ0Y1BsYXllckNvbnRyb2xsZXIgPSBfX3dlYnBhY2tfZXhwb3J0c19fLldlYlJ0Y1BsYXllckNvbnRyb2xsZXI7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX1dlYlJ0Y1NkcEV2ZW50ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5XZWJSdGNTZHBFdmVudDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fV2ViUnRjVENQUmVsYXlEZXRlY3RlZEV2ZW50ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5XZWJSdGNUQ1BSZWxheURldGVjdGVkRXZlbnQ7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX1dlYlNvY2tldENvbnRyb2xsZXIgPSBfX3dlYnBhY2tfZXhwb3J0c19fLldlYlNvY2tldENvbnRyb2xsZXI7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX1dlYlhSQ29udHJvbGxlciA9IF9fd2VicGFja19leHBvcnRzX18uV2ViWFJDb250cm9sbGVyO1xudmFyIF9fd2VicGFja19leHBvcnRzX19YckZyYW1lRXZlbnQgPSBfX3dlYnBhY2tfZXhwb3J0c19fLlhyRnJhbWVFdmVudDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fWHJTZXNzaW9uRW5kZWRFdmVudCA9IF9fd2VicGFja19leHBvcnRzX18uWHJTZXNzaW9uRW5kZWRFdmVudDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fWHJTZXNzaW9uU3RhcnRlZEV2ZW50ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5YclNlc3Npb25TdGFydGVkRXZlbnQ7XG5leHBvcnQgeyBfX3dlYnBhY2tfZXhwb3J0c19fQWZrTG9naWMgYXMgQWZrTG9naWMsIF9fd2VicGFja19leHBvcnRzX19BZmtUaW1lZE91dEV2ZW50IGFzIEFma1RpbWVkT3V0RXZlbnQsIF9fd2VicGFja19leHBvcnRzX19BZmtXYXJuaW5nQWN0aXZhdGVFdmVudCBhcyBBZmtXYXJuaW5nQWN0aXZhdGVFdmVudCwgX193ZWJwYWNrX2V4cG9ydHNfX0Fma1dhcm5pbmdEZWFjdGl2YXRlRXZlbnQgYXMgQWZrV2FybmluZ0RlYWN0aXZhdGVFdmVudCwgX193ZWJwYWNrX2V4cG9ydHNfX0Fma1dhcm5pbmdVcGRhdGVFdmVudCBhcyBBZmtXYXJuaW5nVXBkYXRlRXZlbnQsIF9fd2VicGFja19leHBvcnRzX19BZ2dyZWdhdGVkU3RhdHMgYXMgQWdncmVnYXRlZFN0YXRzLCBfX3dlYnBhY2tfZXhwb3J0c19fQ2FuZGlkYXRlUGFpclN0YXRzIGFzIENhbmRpZGF0ZVBhaXJTdGF0cywgX193ZWJwYWNrX2V4cG9ydHNfX0NhbmRpZGF0ZVN0YXQgYXMgQ2FuZGlkYXRlU3RhdCwgX193ZWJwYWNrX2V4cG9ydHNfX0NvbmZpZyBhcyBDb25maWcsIF9fd2VicGFja19leHBvcnRzX19Db250cm9sU2NoZW1lVHlwZSBhcyBDb250cm9sU2NoZW1lVHlwZSwgX193ZWJwYWNrX2V4cG9ydHNfX0RhdGFDaGFubmVsQ2xvc2VFdmVudCBhcyBEYXRhQ2hhbm5lbENsb3NlRXZlbnQsIF9fd2VicGFja19leHBvcnRzX19EYXRhQ2hhbm5lbEVycm9yRXZlbnQgYXMgRGF0YUNoYW5uZWxFcnJvckV2ZW50LCBfX3dlYnBhY2tfZXhwb3J0c19fRGF0YUNoYW5uZWxMYXRlbmN5VGVzdFJlc3BvbnNlRXZlbnQgYXMgRGF0YUNoYW5uZWxMYXRlbmN5VGVzdFJlc3BvbnNlRXZlbnQsIF9fd2VicGFja19leHBvcnRzX19EYXRhQ2hhbm5lbExhdGVuY3lUZXN0UmVzdWx0RXZlbnQgYXMgRGF0YUNoYW5uZWxMYXRlbmN5VGVzdFJlc3VsdEV2ZW50LCBfX3dlYnBhY2tfZXhwb3J0c19fRGF0YUNoYW5uZWxPcGVuRXZlbnQgYXMgRGF0YUNoYW5uZWxPcGVuRXZlbnQsIF9fd2VicGFja19leHBvcnRzX19EYXRhQ2hhbm5lbFN0YXRzIGFzIERhdGFDaGFubmVsU3RhdHMsIF9fd2VicGFja19leHBvcnRzX19FbmNvZGVyU2V0dGluZ3MgYXMgRW5jb2RlclNldHRpbmdzLCBfX3dlYnBhY2tfZXhwb3J0c19fRXZlbnRFbWl0dGVyIGFzIEV2ZW50RW1pdHRlciwgX193ZWJwYWNrX2V4cG9ydHNfX0ZsYWdzIGFzIEZsYWdzLCBfX3dlYnBhY2tfZXhwb3J0c19fSGlkZUZyZWV6ZUZyYW1lRXZlbnQgYXMgSGlkZUZyZWV6ZUZyYW1lRXZlbnQsIF9fd2VicGFja19leHBvcnRzX19JbmJvdW5kQXVkaW9TdGF0cyBhcyBJbmJvdW5kQXVkaW9TdGF0cywgX193ZWJwYWNrX2V4cG9ydHNfX0luYm91bmRWaWRlb1N0YXRzIGFzIEluYm91bmRWaWRlb1N0YXRzLCBfX3dlYnBhY2tfZXhwb3J0c19fSW5pdGlhbFNldHRpbmdzIGFzIEluaXRpYWxTZXR0aW5ncywgX193ZWJwYWNrX2V4cG9ydHNfX0luaXRpYWxTZXR0aW5nc0V2ZW50IGFzIEluaXRpYWxTZXR0aW5nc0V2ZW50LCBfX3dlYnBhY2tfZXhwb3J0c19fTGF0ZW5jeVRlc3RSZXN1bHRFdmVudCBhcyBMYXRlbmN5VGVzdFJlc3VsdEV2ZW50LCBfX3dlYnBhY2tfZXhwb3J0c19fTGF0ZW5jeVRlc3RSZXN1bHRzIGFzIExhdGVuY3lUZXN0UmVzdWx0cywgX193ZWJwYWNrX2V4cG9ydHNfX0xvYWRGcmVlemVGcmFtZUV2ZW50IGFzIExvYWRGcmVlemVGcmFtZUV2ZW50LCBfX3dlYnBhY2tfZXhwb3J0c19fTG9nZ2VyIGFzIExvZ2dlciwgX193ZWJwYWNrX2V4cG9ydHNfX01lc3NhZ2VEaXJlY3Rpb24gYXMgTWVzc2FnZURpcmVjdGlvbiwgX193ZWJwYWNrX2V4cG9ydHNfX01lc3NhZ2VSZWN2IGFzIE1lc3NhZ2VSZWN2LCBfX3dlYnBhY2tfZXhwb3J0c19fTWVzc2FnZVNlbmQgYXMgTWVzc2FnZVNlbmQsIF9fd2VicGFja19leHBvcnRzX19NZXNzYWdlU3RyZWFtZXJMaXN0IGFzIE1lc3NhZ2VTdHJlYW1lckxpc3QsIF9fd2VicGFja19leHBvcnRzX19OdW1lcmljUGFyYW1ldGVycyBhcyBOdW1lcmljUGFyYW1ldGVycywgX193ZWJwYWNrX2V4cG9ydHNfX09wdGlvblBhcmFtZXRlcnMgYXMgT3B0aW9uUGFyYW1ldGVycywgX193ZWJwYWNrX2V4cG9ydHNfX091dEJvdW5kVmlkZW9TdGF0cyBhcyBPdXRCb3VuZFZpZGVvU3RhdHMsIF9fd2VicGFja19leHBvcnRzX19QaXhlbFN0cmVhbWluZyBhcyBQaXhlbFN0cmVhbWluZywgX193ZWJwYWNrX2V4cG9ydHNfX1BsYXlTdHJlYW1FcnJvckV2ZW50IGFzIFBsYXlTdHJlYW1FcnJvckV2ZW50LCBfX3dlYnBhY2tfZXhwb3J0c19fUGxheVN0cmVhbUV2ZW50IGFzIFBsYXlTdHJlYW1FdmVudCwgX193ZWJwYWNrX2V4cG9ydHNfX1BsYXlTdHJlYW1SZWplY3RlZEV2ZW50IGFzIFBsYXlTdHJlYW1SZWplY3RlZEV2ZW50LCBfX3dlYnBhY2tfZXhwb3J0c19fUGxheWVyQ291bnRFdmVudCBhcyBQbGF5ZXJDb3VudEV2ZW50LCBfX3dlYnBhY2tfZXhwb3J0c19fU2V0dGluZ0Jhc2UgYXMgU2V0dGluZ0Jhc2UsIF9fd2VicGFja19leHBvcnRzX19TZXR0aW5nRmxhZyBhcyBTZXR0aW5nRmxhZywgX193ZWJwYWNrX2V4cG9ydHNfX1NldHRpbmdOdW1iZXIgYXMgU2V0dGluZ051bWJlciwgX193ZWJwYWNrX2V4cG9ydHNfX1NldHRpbmdPcHRpb24gYXMgU2V0dGluZ09wdGlvbiwgX193ZWJwYWNrX2V4cG9ydHNfX1NldHRpbmdUZXh0IGFzIFNldHRpbmdUZXh0LCBfX3dlYnBhY2tfZXhwb3J0c19fU2V0dGluZ3NDaGFuZ2VkRXZlbnQgYXMgU2V0dGluZ3NDaGFuZ2VkRXZlbnQsIF9fd2VicGFja19leHBvcnRzX19TaWduYWxsaW5nUHJvdG9jb2wgYXMgU2lnbmFsbGluZ1Byb3RvY29sLCBfX3dlYnBhY2tfZXhwb3J0c19fU3RhdHNSZWNlaXZlZEV2ZW50IGFzIFN0YXRzUmVjZWl2ZWRFdmVudCwgX193ZWJwYWNrX2V4cG9ydHNfX1N0cmVhbUxvYWRpbmdFdmVudCBhcyBTdHJlYW1Mb2FkaW5nRXZlbnQsIF9fd2VicGFja19leHBvcnRzX19TdHJlYW1QcmVDb25uZWN0RXZlbnQgYXMgU3RyZWFtUHJlQ29ubmVjdEV2ZW50LCBfX3dlYnBhY2tfZXhwb3J0c19fU3RyZWFtUHJlRGlzY29ubmVjdEV2ZW50IGFzIFN0cmVhbVByZURpc2Nvbm5lY3RFdmVudCwgX193ZWJwYWNrX2V4cG9ydHNfX1N0cmVhbVJlY29ubmVjdEV2ZW50IGFzIFN0cmVhbVJlY29ubmVjdEV2ZW50LCBfX3dlYnBhY2tfZXhwb3J0c19fU3RyZWFtZXJJRENoYW5nZWRNZXNzYWdlRXZlbnQgYXMgU3RyZWFtZXJJRENoYW5nZWRNZXNzYWdlRXZlbnQsIF9fd2VicGFja19leHBvcnRzX19TdHJlYW1lckxpc3RNZXNzYWdlRXZlbnQgYXMgU3RyZWFtZXJMaXN0TWVzc2FnZUV2ZW50LCBfX3dlYnBhY2tfZXhwb3J0c19fVGV4dFBhcmFtZXRlcnMgYXMgVGV4dFBhcmFtZXRlcnMsIF9fd2VicGFja19leHBvcnRzX19VbnF1YW50aXplZEFuZERlbm9ybWFsaXplVW5zaWduZWQgYXMgVW5xdWFudGl6ZWRBbmREZW5vcm1hbGl6ZVVuc2lnbmVkLCBfX3dlYnBhY2tfZXhwb3J0c19fVmlkZW9FbmNvZGVyQXZnUVBFdmVudCBhcyBWaWRlb0VuY29kZXJBdmdRUEV2ZW50LCBfX3dlYnBhY2tfZXhwb3J0c19fVmlkZW9Jbml0aWFsaXplZEV2ZW50IGFzIFZpZGVvSW5pdGlhbGl6ZWRFdmVudCwgX193ZWJwYWNrX2V4cG9ydHNfX1dlYlJUQ1NldHRpbmdzIGFzIFdlYlJUQ1NldHRpbmdzLCBfX3dlYnBhY2tfZXhwb3J0c19fV2ViUnRjQXV0b0Nvbm5lY3RFdmVudCBhcyBXZWJSdGNBdXRvQ29ubmVjdEV2ZW50LCBfX3dlYnBhY2tfZXhwb3J0c19fV2ViUnRjQ29ubmVjdGVkRXZlbnQgYXMgV2ViUnRjQ29ubmVjdGVkRXZlbnQsIF9fd2VicGFja19leHBvcnRzX19XZWJSdGNDb25uZWN0aW5nRXZlbnQgYXMgV2ViUnRjQ29ubmVjdGluZ0V2ZW50LCBfX3dlYnBhY2tfZXhwb3J0c19fV2ViUnRjRGlzY29ubmVjdGVkRXZlbnQgYXMgV2ViUnRjRGlzY29ubmVjdGVkRXZlbnQsIF9fd2VicGFja19leHBvcnRzX19XZWJSdGNGYWlsZWRFdmVudCBhcyBXZWJSdGNGYWlsZWRFdmVudCwgX193ZWJwYWNrX2V4cG9ydHNfX1dlYlJ0Y1BsYXllckNvbnRyb2xsZXIgYXMgV2ViUnRjUGxheWVyQ29udHJvbGxlciwgX193ZWJwYWNrX2V4cG9ydHNfX1dlYlJ0Y1NkcEV2ZW50IGFzIFdlYlJ0Y1NkcEV2ZW50LCBfX3dlYnBhY2tfZXhwb3J0c19fV2ViUnRjVENQUmVsYXlEZXRlY3RlZEV2ZW50IGFzIFdlYlJ0Y1RDUFJlbGF5RGV0ZWN0ZWRFdmVudCwgX193ZWJwYWNrX2V4cG9ydHNfX1dlYlNvY2tldENvbnRyb2xsZXIgYXMgV2ViU29ja2V0Q29udHJvbGxlciwgX193ZWJwYWNrX2V4cG9ydHNfX1dlYlhSQ29udHJvbGxlciBhcyBXZWJYUkNvbnRyb2xsZXIsIF9fd2VicGFja19leHBvcnRzX19YckZyYW1lRXZlbnQgYXMgWHJGcmFtZUV2ZW50LCBfX3dlYnBhY2tfZXhwb3J0c19fWHJTZXNzaW9uRW5kZWRFdmVudCBhcyBYclNlc3Npb25FbmRlZEV2ZW50LCBfX3dlYnBhY2tfZXhwb3J0c19fWHJTZXNzaW9uU3RhcnRlZEV2ZW50IGFzIFhyU2Vzc2lvblN0YXJ0ZWRFdmVudCB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWJHbGlMWEJwZUdWc2MzUnlaV0Z0YVc1blpuSnZiblJsYm1RdVpYTnRMbXB6SWl3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN096czdPenM3T3pzN1FVRkJRU3hyUkVGQmEwUTdRVUZGYTBJN1FVRkRNVUk3UVVGUFdqdEJRVVYyUWl4TlFVRk5MR0ZCUVdFN1NVRmhkRUlzV1VGRFNTeE5RVUZqTEVWQlEyUXNZMEZCT0VJc1JVRkRPVUlzV1VGQmQwSTdVVUZtTlVJc2VVSkJRWGxDTzFGQlEzcENMRmRCUVUwc1IwRkJSeXhMUVVGTExFTkJRVU03VVVGRFppeHZRa0ZCWlN4SFFVRkhMRXRCUVVzc1EwRkJRenRSUVVONFFpeGpRVUZUTEVkQlFXdERMRk5CUVZNc1EwRkJRenRSUVVOeVJDeGpRVUZUTEVkQlFVY3NRMEZCUXl4RFFVRkRPMUZCUTJRc2JVSkJRV01zUjBGQmJVTXNVMEZCVXl4RFFVRkRPMUZCV1haRUxFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NUVUZCVFN4RFFVRkRPMUZCUTNKQ0xFbEJRVWtzUTBGQlF5eGpRVUZqTEVkQlFVY3NZMEZCWXl4RFFVRkRPMUZCUTNKRExFbEJRVWtzUTBGQlF5eFpRVUZaTEVkQlFVY3NXVUZCV1N4RFFVRkRPMUZCUTJwRExFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1IwRkJSeXhIUVVGSExFVkJRVVU3V1VGRE9VSXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkRVQ3gzUkVGQmQwUXNRMEZETTBRc1EwRkJRenRSUVVOT0xFTkJRVU1zUTBGQlF6dEpRVU5PTEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxGVkJRVlU3VVVGRFRpeGhRVUZoTEVOQlFVTXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhEUVVGRE8xRkJSVzVETEVsQlFVa3NTVUZCU1N4RFFVRkRMRTFCUVUwc1NVRkJTU3hKUVVGSkxFTkJRVU1zWlVGQlpTeEZRVUZGTzFsQlEzSkRMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNSVUZCUlN4RFFVRkRPMWxCUXpWQ0xFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNZVUZCWVN4RFFVTTNRaXhKUVVGSkxIbEZRVUY1UWl4RlFVRkZMRU5CUTJ4RExFTkJRVU03VTBGRFREdEpRVU5NTEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxHOUNRVUZ2UWp0UlFVTm9RaXhKUVVOSkxFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNjMEpCUVhOQ0xFTkJRemxDTERSRlFVRm5ReXhEUVVOdVF5eEhRVUZITEVOQlFVTTdXVUZEVEN4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExHRkJRV0VzUTBGQlF5dzRSRUZCYTBJc1EwRkJReXhGUVVNdlF6dFpRVU5GTEVsQlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRE8xTkJRM1JDTzJGQlFVMDdXVUZEU0N4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFdEJRVXNzUTBGQlF6dFRRVU4yUWp0UlFVTkVMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNSVUZCUlN4RFFVRkRPMGxCUTJoRExFTkJRVU03U1VGRlJEczdUMEZGUnp0SlFVTklMRzFDUVVGdFFqdFJRVU5tTEVsQlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1MwRkJTeXhEUVVGRE8xRkJRM0JDTEVsQlFVa3NRMEZCUXl4bFFVRmxMRWRCUVVjc1MwRkJTeXhEUVVGRE8xRkJRemRDTEZsQlFWa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU03VVVGRE4wSXNZVUZCWVN4RFFVRkRMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF6dEpRVU4yUXl4RFFVRkRPMGxCUlVRN08wOUJSVWM3U1VGRFNDeHZRa0ZCYjBJN1VVRkRhRUlzU1VGQlNTeERRVUZETEUxQlFVMHNSMEZCUnl4TFFVRkxMRU5CUVVNN1NVRkRlRUlzUTBGQlF6dEpRVVZFT3p0UFFVVkhPMGxCUTBnc2IwSkJRVzlDTzFGQlEyaENMRWxCUVVrc1NVRkJTU3hEUVVGRExFMUJRVTBzU1VGQlNTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMR0ZCUVdFc1EwRkJReXc0UkVGQmEwSXNRMEZCUXl4RlFVRkZPMWxCUXpsRUxGbEJRVmtzUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1dVRkROMElzU1VGQlNTeERRVUZETEZOQlFWTXNSMEZCUnl4VlFVRlZMRU5CUTNaQ0xFZEJRVWNzUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUlVGQlJTeEZRVU0zUWl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExITkNRVUZ6UWl4RFFVTTVRaXcwUlVGQlowTXNRMEZEYmtNc1IwRkJSeXhKUVVGSkxFTkJRMWdzUTBGQlF6dFRRVU5NTzBsQlEwd3NRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGdzWjBKQlFXZENPMUZCUTFvc09FVkJRVGhGTzFGQlF6bEZMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNSVUZCUlN4RFFVRkRPMUZCUlRWQ0xEUkNRVUUwUWp0UlFVTTFRaXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEdGQlFXRXNRMEZETjBJc1NVRkJTU3gxUlVGQmRVSXNRMEZCUXp0WlFVTjRRaXhUUVVGVExFVkJRVVVzU1VGQlNTeERRVUZETEZOQlFWTTdXVUZEZWtJc1ZVRkJWU3hGUVVGRkxFbEJRVWtzUTBGQlF5eFpRVUZaTzFOQlEyaERMRU5CUVVNc1EwRkRUQ3hEUVVGRE8xRkJSVVlzYTBSQlFXdEVPMUZCUTJ4RUxFbEJRVWtzUTBGQlF5eFRRVUZUTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXh6UWtGQmMwSXNRMEZETDBNc09FVkJRV3RETEVOQlEzSkRMRU5CUVVNN1VVRkRSaXhKUVVGSkxFTkJRVU1zWlVGQlpTeEhRVUZITEVsQlFVa3NRMEZCUXp0UlFVTTFRaXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEdGQlFXRXNRMEZETjBJc1NVRkJTU3h4UlVGQmNVSXNRMEZCUXl4RlFVRkZMRk5CUVZNc1JVRkJSU3hKUVVGSkxFTkJRVU1zVTBGQlV5eEZRVUZGTEVOQlFVTXNRMEZETTBRc1EwRkJRenRSUVVWR0xEWkRRVUUyUXp0UlFVTTNReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4aFFVRmhMRU5CUVVNc2JVVkJRWFZDTEVOQlFVTXNSVUZCUlR0WlFVTnlSQ3g1UkVGQmVVUTdXVUZEZWtRc1NVRkJTU3hSUVVGUkxFTkJRVU1zWlVGQlpTeEZRVUZGTzJkQ1FVTXhRaXhSUVVGUkxFTkJRVU1zWlVGQlpTeEZRVUZGTEVOQlFVTTdZVUZET1VJN1UwRkRTanRSUVVWRUxESkRRVUV5UXp0UlFVTXpReXhKUVVGSkxFTkJRVU1zWTBGQll5eEhRVUZITEZkQlFWY3NRMEZCUXl4SFFVRkhMRVZCUVVVN1dVRkRia01zU1VGQlNTeERRVUZETEZOQlFWTXNSVUZCUlN4RFFVRkRPMWxCUTJwQ0xFbEJRVWtzU1VGQlNTeERRVUZETEZOQlFWTXNTVUZCU1N4RFFVRkRMRVZCUVVVN1owSkJRM0pDTEc5RlFVRnZSVHRuUWtGRGNFVXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhoUVVGaExFTkJRemRDTEVsQlFVa3NaMFZCUVdkQ0xFVkJRVVVzUTBGRGVrSXNRMEZCUXp0blFrRkRSaXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRVZCUVVVc1EwRkJRenRuUWtGRE4wSXNjMFJCUVZVc1EwRkRUaXhuUlVGQmIwSXNSVUZCUlN4RlFVTjBRaXc0UTBGQk9FTXNRMEZEYWtRc1EwRkJRenRuUWtGRlJpeHJSRUZCYTBRN1owSkJRMnhFTEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUlVGQlJTeERRVUZETzJGQlF6bENPMmxDUVVGTk8yZENRVU5JTEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1lVRkJZU3hEUVVNM1FpeEpRVUZKTEhGRlFVRnhRaXhEUVVGRExFVkJRVVVzVTBGQlV5eEZRVUZGTEVsQlFVa3NRMEZCUXl4VFFVRlRMRVZCUVVVc1EwRkJReXhEUVVNelJDeERRVUZETzJGQlEwdzdVVUZEVEN4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03U1VGRFlpeERRVUZETzBOQlEwbzdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRPVXBFTEd0RVFVRnJSRHRCUVVWU08wRkJRMFU3UVVGRFNUdEJRVU5LTzBGQlEwazdRVUZETUVJN1FVRkhNVVU3T3p0SFFVZEhPMEZCUTBrc1RVRkJUU3hMUVVGTE96dEJRVU5RTEdsQ1FVRlhMRWRCUVVjc1lVRkJjMElzUTBGQlF6dEJRVU55UXl4dFFrRkJZU3hIUVVGSExHVkJRWGRDTEVOQlFVTTdRVUZEZWtNc2EwSkJRVmtzUjBGQlJ5eGxRVUYzUWl4RFFVRkRPMEZCUTNoRExITkNRVUZuUWl4SFFVRkhMR2RDUVVGNVFpeERRVUZETzBGQlF6ZERMSFZDUVVGcFFpeEhRVUZITEdWQlFYZENMRU5CUVVNN1FVRkROME1zYjBKQlFXTXNSMEZCUnl4blFrRkJlVUlzUTBGQlF6dEJRVU16UXl4bFFVRlRMRWRCUVVjc1YwRkJiMElzUTBGQlF6dEJRVU5xUXl3d1FrRkJiMElzUjBGQlJ5eHpRa0ZCSzBJc1EwRkJRenRCUVVOMlJDeDVRa0ZCYlVJc1IwRkJSeXhwUWtGQk1FSXNRMEZCUXp0QlFVTnFSQ3cyUWtGQmRVSXNSMEZCUnl4clFrRkJNa0lzUTBGQlF6dEJRVU4wUkN4eFFrRkJaU3hIUVVGSExHbENRVUV3UWl4RFFVRkRPMEZCUXpkRExIbENRVUZ0UWl4SFFVRkhMSEZDUVVFNFFpeERRVUZETzBGQlEzSkVMRmxCUVUwc1IwRkJSeXhSUVVGcFFpeERRVUZETzBGQlF6TkNMRzFDUVVGaExFZEJRVWNzWlVGQmQwSXNRMEZCUXp0QlFVTjZReXhuUWtGQlZTeEhRVUZITEZsQlFYRkNMRU5CUVVNN1FVRkRia01zWjBKQlFWVXNSMEZCUnl4WlFVRnhRaXhEUVVGRE8wRkJRMjVETEd0Q1FVRlpMRWRCUVVjc1kwRkJkVUlzUTBGQlF6dEJRVU4yUXl4MVFrRkJhVUlzUjBGQlJ5eHRRa0ZCTkVJc1EwRkJRenRCUVVOcVJDeHhRa0ZCWlN4SFFVRkhMR2xDUVVFd1FpeERRVUZETzBGQlF6ZERMRmxCUVUwc1IwRkJSeXhSUVVGcFFpeERRVUZETzBGQlRYUkRMRTFCUVUwc1VVRkJVU3hIUVVGSExFTkJRVU1zUlVGQlZTeEZRVUZyUWl4RlFVRkZMRU5CUXpWRExFMUJRVTBzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlEyeERMRU5CUVVNc1NVRkJaU3hGUVVGRkxFVkJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVNeFF5eERRVUZETzBGQlJVNDdPenRIUVVkSE8wRkJRMGtzVFVGQlRTeHBRa0ZCYVVJN08wRkJRMjVDTEdkRFFVRmpMRWRCUVVjc1dVRkJjVUlzUTBGQlF6dEJRVU4yUXl4clEwRkJaMElzUjBGQlJ5eGpRVUYxUWl4RFFVRkRPMEZCUXpORExIVkNRVUZMTEVkQlFVY3NUMEZCWjBJc1EwRkJRenRCUVVONlFpeDFRa0ZCU3l4SFFVRkhMRTlCUVdkQ0xFTkJRVU03UVVGRGVrSXNNa0pCUVZNc1IwRkJSeXhYUVVGdlFpeERRVUZETzBGQlEycERMR3REUVVGblFpeEhRVUZITEd0Q1FVRXlRaXhEUVVGRE8wRkJReTlETEd0RFFVRm5RaXhIUVVGSExHdENRVUV5UWl4RFFVRkRPMEZCUXk5RExITkRRVUZ2UWl4SFFVRkhMSE5DUVVFclFpeERRVUZETzBGQlEzWkVMREJEUVVGM1FpeEhRVUZITERCQ1FVRnRReXhEUVVGRE8wRkJWVEZGTEUxQlFVMHNWMEZCVnl4SFFVRkhMRU5CUVVNc1JVRkJWU3hGUVVFNFFpeEZRVUZGTEVOQlF6TkVMRTFCUVUwc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZET1VNc1EwRkJReXhKUVVFeVFpeEZRVUZGTEVWQlFVVXNRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUTJ4RkxFTkJRVU03UVVGRlRqczdPMGRCUjBjN1FVRkRTU3hOUVVGTkxHTkJRV003TzBGQlEyaENMR3REUVVGdFFpeEhRVUZITEVsQlFXRXNRMEZCUXp0QlFWTXZReXhOUVVGTkxGRkJRVkVzUjBGQlJ5eERRVUZETEVWQlFWVXNSVUZCTWtJc1JVRkJSU3hEUVVOeVJDeE5RVUZOTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVTXpReXhEUVVGRExFbEJRWGRDTEVWQlFVVXNSVUZCUlN4RFFVRkRMR05CUVdNc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlF6VkVMRU5CUVVNN1FVRkZUanM3TzBkQlIwYzdRVUZEU1N4TlFVRk5MR2RDUVVGblFqczdRVUZEYkVJc0swSkJRV01zUjBGQlJ5eG5Ra0ZCZVVJc1EwRkJRenRCUVVNelF5d3lRa0ZCVlN4SFFVRkhMRmxCUVhGQ0xFTkJRVU03UVVGVE9VTXNUVUZCVFN4VlFVRlZMRWRCUVVjc1EwRkJReXhGUVVGVkxFVkJRVFpDTEVWQlFVVXNRMEZEZWtRc1RVRkJUU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRMR2RDUVVGblFpeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVTTNReXhEUVVGRExFbEJRVEJDTEVWQlFVVXNSVUZCUlN4RFFVRkRMR2RDUVVGblFpeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVc1EwRkRhRVVzUTBGQlF6dEJRVGhDUXl4TlFVRk5MRTFCUVUwN1NVRmxaaXd3UTBGQk1FTTdTVUZGTVVNc1dVRkJXU3hUUVVGMVFpeEZRVUZGTzFGQmFFSnlReXh4UjBGQmNVYzdVVUZETjBZc1ZVRkJTeXhIUVVGSExFbEJRVWtzUjBGQlJ5eEZRVUY1UWl4RFFVRkRPMUZCUldwRUxEUkdRVUUwUmp0UlFVTndSaXh6UWtGQmFVSXNSMEZCUnl4SlFVRkpMRWRCUVVjc1JVRkJkVU1zUTBGQlF6dFJRVVV6UlN4NVJFRkJlVVE3VVVGRGFrUXNiVUpCUVdNc1IwRkJSeXhKUVVGSkxFZEJRVWNzUlVGQmEwTXNRMEZCUXp0UlFVVnVSU3g1UkVGQmVVUTdVVUZEYWtRc2NVSkJRV2RDTEVkQlFVY3NTVUZCU1N4SFFVRkhMRVZCUVhORExFTkJRVU03VVVGUGNrVXNUVUZCVFN4RlFVRkZMR1ZCUVdVc1JVRkJSU3haUVVGWkxFVkJRVVVzUjBGQlJ5eE5RVUZOTEVOQlFVTTdVVUZEYWtRc1NVRkJTU3hEUVVGRExHRkJRV0VzUjBGQlJ5eERRVUZETEVOQlFVTXNXVUZCV1N4RFFVRkRPMUZCUTNCRExFbEJRVWtzUTBGQlF5eDFRa0ZCZFVJc1EwRkJReXhKUVVGSkxFTkJRVU1zWVVGQllTeEZRVUZGTEdWQlFXVXNRMEZCUXl4RFFVRkRPMGxCUTNSRkxFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3hKUVVGWExGbEJRVms3VVVGRGJrSXNUMEZCVHl4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRE8wbEJRemxDTEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOTExIVkNRVUYxUWl4RFFVRkRMRmxCUVhGQ0xFVkJRVVVzVVVGQk9FSTdVVUZEYWtZN08xZEJSVWM3VVVGRlNDeEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWRCUVVjc1EwRkRia0lzWTBGQll5eERRVUZETEcxQ1FVRnRRaXhGUVVOc1F5eEpRVUZKTEhGRVFVRlhMRU5CUTFnc1kwRkJZeXhEUVVGRExHMUNRVUZ0UWl4RlFVTnNReXhuUWtGQlowSXNSVUZEYUVJc09FSkJRVGhDTEVWQlF6bENMRkZCUVZFc1NVRkJTU3hSUVVGUkxFTkJRVU1zWTBGQll5eERRVUZETEdOQlFXTXNRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEY2tVc1VVRkJVU3hEUVVGRExHTkJRV01zUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRE9VTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1VVRkJVU3hMUVVGTExGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU03WjBKQlEycEVMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVU1zVVVGQlVUdG5Ra0ZEZUVJc0swTkJRU3RETzJkQ1FVTXZReXhEUVVGRExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4TFFVRkxMRWxCUVVrN2IwSkJRemxDTEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hMUVVGTExFVkJRVVU3YjBKQlEzWkNMRU5CUVVNc1EwRkJReXhGUVVGRk8yOUNRVU5LTEVOQlFVTXNRMEZCUXl4SlFVRkpMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTXNSVUZEZWtNc1dVRkJXU3hEUVVObUxFTkJRMG9zUTBGQlF6dFJRVVZHTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eEhRVUZITEVOQlEzSkNMR2RDUVVGblFpeERRVUZETEZWQlFWVXNSVUZETTBJc1NVRkJTU3g1UkVGQllTeERRVU5pTEdkQ1FVRm5RaXhEUVVGRExGVkJRVlVzUlVGRE0wSXNZVUZCWVN4RlFVTmlMRzFEUVVGdFF5eEZRVU51UXl4UlFVRlJMRWxCUVVrc1VVRkJVU3hEUVVGRExHTkJRV01zUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF5eERRVUZETzFsQlF6bEVMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRM1pETEVWQlFVVXNSVUZEVGl4RlFVRkZMRVZCUTBZc1dVRkJXU3hEUVVObUxFTkJRMG9zUTBGQlF6dFJRVVZHT3p0WFFVVkhPMUZCUTBnc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRWRCUVVjc1EwRkRja0lzWjBKQlFXZENMRU5CUVVNc1kwRkJZeXhGUVVNdlFpeEpRVUZKTEhsRVFVRmhMRU5CUTJJc1owSkJRV2RDTEVOQlFVTXNZMEZCWXl4RlFVTXZRaXhwUWtGQmFVSXNSVUZEYWtJc2VVUkJRWGxFTEVWQlEzcEVMRFpGUVVFMlJTeEZRVU0zUlN4UlFVRlJMRWxCUVVrc1VVRkJVU3hEUVVGRExHTkJRV01zUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEyeEZMRU5CUVVNc1VVRkJVU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMR05CUVdNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU0zUXl4RFFVRkRPMmRDUVVOSExFMUJRVTBzYzBKQlFYTkNMRWRCUVd0Q0xFVkJRVVVzUTBGQlF6dG5Ra0ZEYWtRc2IwWkJRVzlHTzJkQ1FVTndSaXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEdWQlFXVXNSVUZCUlR0dlFrRkRha01zYzBKQlFYTkNMRU5CUVVNc1NVRkJTU3hEUVVGRExEQkNRVUV3UWl4RFFVRkRMRU5CUVVNN2IwSkJRM2hFTEU5QlFVOHNjMEpCUVhOQ0xFTkJRVU03YVVKQlEycERPMmRDUVVWRUxFMUJRVTBzVDBGQlR5eEhRVUZITEc5Q1FVRnZRaXhEUVVGRE8yZENRVU55UXl4TlFVRk5MRTFCUVUwc1IwRkRVaXhqUVVGakxFTkJRVU1zWlVGQlpTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJRenRuUWtGRGJrUXNUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFdEJRVXNzUlVGQlJTeEZRVUZGTzI5Q1FVTnlRaXhOUVVGTkxFZEJRVWNzUjBGRFRDeExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdkMEpCUXpWQ0xFZEJRVWM3ZDBKQlEwZ3NRMEZCUXl4TFFVRkxMRU5CUVVNc1YwRkJWeXhKUVVGSkxFVkJRVVVzUTBGQlF5eERRVUZETzI5Q1FVTTVRaXhOUVVGTkxFdEJRVXNzUjBGQlJ5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8yOUNRVU5vUXl4SlFVRkpMRXRCUVVzc1MwRkJTeXhKUVVGSkxFVkJRVVU3ZDBKQlEyaENMSE5DUVVGelFpeERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenR4UWtGRGNFTTdaMEpCUTB3c1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlEwZ3NUMEZCVHl4elFrRkJjMElzUTBGQlF6dFpRVU5zUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVOU0xGbEJRVmtzUTBGRFppeERRVU5LTEVOQlFVTTdVVUZGUmpzN1YwRkZSenRSUVVWSUxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVTldMRXRCUVVzc1EwRkJReXhYUVVGWExFVkJRMnBDTEVsQlFVa3NjVVJCUVZjc1EwRkRXQ3hMUVVGTExFTkJRVU1zVjBGQlZ5eEZRVU5xUWl4M1FrRkJkMElzUlVGRGVFSXNjVWRCUVhGSExFVkJRM0pITEZGQlFWRXNTVUZCU1N4UlFVRlJMRU5CUVVNc1kwRkJZeXhEUVVGRExFdEJRVXNzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTNCRUxGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVNM1FpeExRVUZMTEVWQlExUXNXVUZCV1N4RFFVTm1MRU5CUTBvc1EwRkJRenRSUVVWR0xFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVTldMRXRCUVVzc1EwRkJReXhoUVVGaExFVkJRMjVDTEVsQlFVa3NjVVJCUVZjc1EwRkRXQ3hMUVVGTExFTkJRVU1zWVVGQllTeEZRVU51UWl4cFFrRkJhVUlzUlVGRGFrSXNlVVpCUVhsR0xFVkJRM3BHTEZGQlFWRXNTVUZCU1N4UlFVRlJMRU5CUVVNc1kwRkJZeXhEUVVGRExFdEJRVXNzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTNSRUxGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNZVUZCWVN4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVNdlFpeEpRVUZKTEVWQlExSXNXVUZCV1N4RFFVTm1MRU5CUTBvc1EwRkJRenRSUVVWR0xFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVTldMRXRCUVVzc1EwRkJReXhuUWtGQlowSXNSVUZEZEVJc1NVRkJTU3h4UkVGQlZ5eERRVU5ZTEV0QlFVc3NRMEZCUXl4blFrRkJaMElzUlVGRGRFSXNiMEpCUVc5Q0xFVkJRM0JDTEdsR1FVRnBSaXhGUVVOcVJpeFJRVUZSTEVsQlFVa3NVVUZCVVN4RFFVRkRMR05CUVdNc1EwRkJReXhMUVVGTExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRM3BFTEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTJ4RExFdEJRVXNzUlVGRFZDeFpRVUZaTEVOQlEyWXNRMEZEU2l4RFFVRkRPMUZCUlVZc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlExWXNTMEZCU3l4RFFVRkRMRTFCUVUwc1JVRkRXaXhKUVVGSkxIRkVRVUZYTEVOQlExZ3NTMEZCU3l4RFFVRkRMRTFCUVUwc1JVRkRXaXhuUWtGQlowSXNSVUZEYUVJc2RVVkJRWFZGTEVWQlEzWkZMRkZCUVZFc1NVRkJTU3hSUVVGUkxFTkJRVU1zWTBGQll5eERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJReTlETEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU40UWl4TFFVRkxMRVZCUTFRc1dVRkJXU3hEUVVObUxFTkJRMG9zUTBGQlF6dFJRVVZHTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVOV0xFdEJRVXNzUTBGQlF5eGxRVUZsTEVWQlEzSkNMRWxCUVVrc2NVUkJRVmNzUTBGRFdDeExRVUZMTEVOQlFVTXNaVUZCWlN4RlFVTnlRaXh0UWtGQmJVSXNSVUZEYmtJc2FVTkJRV2xETEVWQlEycERMRkZCUVZFc1NVRkJTU3hSUVVGUkxFTkJRVU1zWTBGQll5eERRVUZETEV0QlFVc3NRMEZCUXl4bFFVRmxMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRM2hFTEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1pVRkJaU3hEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU5xUXl4TFFVRkxMRVZCUTFRc1dVRkJXU3hEUVVObUxFTkJRMG9zUTBGQlF6dFJRVVZHTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVOV0xFdEJRVXNzUTBGQlF5eHRRa0ZCYlVJc1JVRkRla0lzU1VGQlNTeHhSRUZCVnl4RFFVTllMRXRCUVVzc1EwRkJReXh0UWtGQmJVSXNSVUZEZWtJc2RVSkJRWFZDTEVWQlEzWkNMSGRJUVVGM1NDeEZRVU40U0N4UlFVRlJMRWxCUVVrc1VVRkJVU3hEUVVGRExHTkJRV01zUTBGQlF5eExRVUZMTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zUTBGQlF5eERRVUZETzFsQlF6VkVMRkZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRM0pETEVsQlFVa3NSVUZEVWl4WlFVRlpMRU5CUTJZc1EwRkRTaXhEUVVGRE8xRkJSVVlzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUTFZc1MwRkJTeXhEUVVGRExHMUNRVUZ0UWl4RlFVTjZRaXhKUVVGSkxIRkVRVUZYTEVOQlExZ3NTMEZCU3l4RFFVRkRMRzFDUVVGdFFpeEZRVU42UWl4M1FrRkJkMElzUlVGRGVFSXNNa05CUVRKRExFVkJRek5ETEZGQlFWRXNTVUZCU1N4UlFVRlJMRU5CUVVNc1kwRkJZeXhEUVVGRExFdEJRVXNzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRE5VUXNVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRja01zU1VGQlNTeEZRVU5TTEZsQlFWa3NRMEZEWml4RFFVTktMRU5CUVVNN1VVRkZSaXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZEVml4TFFVRkxMRU5CUVVNc1kwRkJZeXhGUVVOd1FpeEpRVUZKTEhGRVFVRlhMRU5CUTFnc1MwRkJTeXhEUVVGRExHTkJRV01zUlVGRGNFSXNhMEpCUVd0Q0xFVkJRMnhDTEdkRVFVRm5SQ3hGUVVOb1JDeFJRVUZSTEVsQlFVa3NVVUZCVVN4RFFVRkRMR05CUVdNc1EwRkJReXhMUVVGTExFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTjJSQ3hSUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRhRU1zUzBGQlN5eEZRVU5VTEZsQlFWa3NRMEZEWml4RFFVTktMRU5CUVVNN1VVRkZSaXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZEVml4TFFVRkxMRU5CUVVNc1UwRkJVeXhGUVVObUxFbEJRVWtzY1VSQlFWY3NRMEZEV0N4TFFVRkxMRU5CUVVNc1UwRkJVeXhGUVVObUxGbEJRVmtzUlVGRFdpdzBRMEZCTkVNc1JVRkROVU1zVVVGQlVTeEpRVUZKTEZGQlFWRXNRMEZCUXl4alFVRmpMRU5CUVVNc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEYkVRc1VVRkJVU3hEUVVGRExFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUXpOQ0xFdEJRVXNzUlVGRFZDeFpRVUZaTEVOQlEyWXNRMEZEU2l4RFFVRkRPMUZCUlVZc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlExWXNTMEZCU3l4RFFVRkRMRmxCUVZrc1JVRkRiRUlzU1VGQlNTeHhSRUZCVnl4RFFVTllMRXRCUVVzc1EwRkJReXhaUVVGWkxFVkJRMnhDTEdGQlFXRXNSVUZEWWl4eFJFRkJjVVFzUlVGRGNrUXNVVUZCVVN4SlFVRkpMRkZCUVZFc1EwRkJReXhqUVVGakxFTkJRVU1zUzBGQlN5eERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRja1FzVVVGQlVTeERRVUZETEV0QlFVc3NRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRemxDTEV0QlFVc3NSVUZEVkN4WlFVRlpMRU5CUTJZc1EwRkRTaXhEUVVGRE8xRkJSVVlzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUTFZc1MwRkJTeXhEUVVGRExIVkNRVUYxUWl4RlFVTTNRaXhKUVVGSkxIRkVRVUZYTEVOQlExZ3NTMEZCU3l4RFFVRkRMSFZDUVVGMVFpeEZRVU0zUWl3eVFrRkJNa0lzUlVGRE0wSXNiVWhCUVcxSUxFVkJRMjVJTEZGQlFWRXNTVUZCU1N4UlFVRlJMRU5CUVVNc1kwRkJZeXhEUVVGRExFdEJRVXNzUTBGQlF5eDFRa0ZCZFVJc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRGFFVXNVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRla01zUzBGQlN5eEZRVU5VTEZsQlFWa3NRMEZEWml4RFFVTktMRU5CUVVNN1VVRkZSaXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZEVml4TFFVRkxMRU5CUVVNc2FVSkJRV2xDTEVWQlEzWkNMRWxCUVVrc2NVUkJRVmNzUTBGRFdDeExRVUZMTEVOQlFVTXNhVUpCUVdsQ0xFVkJRM1pDTERoQ1FVRTRRaXhGUVVNNVFpeDFTVUZCZFVrc1JVRkRka2tzVVVGQlVTeEpRVUZKTEZGQlFWRXNRMEZCUXl4alFVRmpMRU5CUVVNc1MwRkJTeXhEUVVGRExHbENRVUZwUWl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVNeFJDeFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTnVReXhMUVVGTExFVkJRMVFzV1VGQldTeEZRVU5hTEVOQlFVTXNaVUZCZDBJc1JVRkJSU3hQUVVGdlFpeEZRVUZGTEVWQlFVVTdXVUZETDBNc1QwRkJUeXhEUVVGRExFdEJRVXNzUjBGQlJ5eHRRa0ZCYlVJc1pVRkJaU3hEUVVGRExFTkJRVU1zUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXl4RFFVRkRMRkZCUVZFc1VVRkJVU3hEUVVGRE8xRkJRM1pHTEVOQlFVTXNRMEZEU2l4RFFVTktMRU5CUVVNN1VVRkZSaXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZEVml4TFFVRkxMRU5CUVVNc2IwSkJRVzlDTEVWQlF6RkNMRWxCUVVrc2NVUkJRVmNzUTBGRFdDeExRVUZMTEVOQlFVTXNiMEpCUVc5Q0xFVkJRekZDTEhsQ1FVRjVRaXhGUVVONlFpd3lTVUZCTWtrc1JVRkRNMGtzVVVGQlVTeEpRVUZKTEZGQlFWRXNRMEZCUXl4alFVRmpMRU5CUVVNc1MwRkJTeXhEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVNM1JDeFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRzlDUVVGdlFpeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTjBReXhMUVVGTExFVkJRMVFzV1VGQldTeERRVU5tTEVOQlEwb3NRMEZCUXp0UlFVVkdMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVU5XTEV0QlFVc3NRMEZCUXl4aFFVRmhMRVZCUTI1Q0xFbEJRVWtzY1VSQlFWY3NRMEZEV0N4TFFVRkxMRU5CUVVNc1lVRkJZU3hGUVVOdVFpeG5Ra0ZCWjBJc1JVRkRhRUlzT0VOQlFUaERMRVZCUXpsRExGRkJRVkVzU1VGQlNTeFJRVUZSTEVOQlFVTXNZMEZCWXl4RFFVRkRMRXRCUVVzc1EwRkJReXhoUVVGaExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEzUkVMRkZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTXZRaXhKUVVGSkxFVkJRMUlzV1VGQldTeERRVU5tTEVOQlEwb3NRMEZCUXp0UlFVVkdMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVU5XTEV0QlFVc3NRMEZCUXl4VlFVRlZMRVZCUTJoQ0xFbEJRVWtzY1VSQlFWY3NRMEZEV0N4TFFVRkxMRU5CUVVNc1ZVRkJWU3hGUVVOb1FpeGhRVUZoTEVWQlEySXNNa05CUVRKRExFVkJRek5ETEZGQlFWRXNTVUZCU1N4UlFVRlJMRU5CUVVNc1kwRkJZeXhEUVVGRExFdEJRVXNzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTI1RUxGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVNMVFpeEpRVUZKTEVWQlExSXNXVUZCV1N4RFFVTm1MRU5CUTBvc1EwRkJRenRSUVVWR0xFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVTldMRXRCUVVzc1EwRkJReXhWUVVGVkxFVkJRMmhDTEVsQlFVa3NjVVJCUVZjc1EwRkRXQ3hMUVVGTExFTkJRVU1zVlVGQlZTeEZRVU5vUWl4aFFVRmhMRVZCUTJJc01rTkJRVEpETEVWQlF6TkRMRkZCUVZFc1NVRkJTU3hSUVVGUkxFTkJRVU1zWTBGQll5eERRVUZETEV0QlFVc3NRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRMjVFTEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU0xUWl4SlFVRkpMRVZCUTFJc1dVRkJXU3hEUVVObUxFTkJRMG9zUTBGQlF6dFJRVVZHTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVOV0xFdEJRVXNzUTBGQlF5eFpRVUZaTEVWQlEyeENMRWxCUVVrc2NVUkJRVmNzUTBGRFdDeExRVUZMTEVOQlFVTXNXVUZCV1N4RlFVTnNRaXhsUVVGbExFVkJRMllzTmtOQlFUWkRMRVZCUXpkRExGRkJRVkVzU1VGQlNTeFJRVUZSTEVOQlFVTXNZMEZCWXl4RFFVRkRMRXRCUVVzc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEzSkVMRkZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTTVRaXhKUVVGSkxFVkJRMUlzV1VGQldTeERRVU5tTEVOQlEwb3NRMEZCUXp0UlFVVkdMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVU5XTEV0QlFVc3NRMEZCUXl4cFFrRkJhVUlzUlVGRGRrSXNTVUZCU1N4eFJFRkJWeXhEUVVOWUxFdEJRVXNzUTBGQlF5eHBRa0ZCYVVJc1JVRkRka0lzY1VKQlFYRkNMRVZCUTNKQ0xHMUVRVUZ0UkN4RlFVTnVSQ3hSUVVGUkxFbEJRVWtzVVVGQlVTeERRVUZETEdOQlFXTXNRMEZCUXl4TFFVRkxMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUXpGRUxGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEyNURMRWxCUVVrc1JVRkRVaXhaUVVGWkxFTkJRMllzUTBGRFNpeERRVUZETzFGQlJVWXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRMVlzUzBGQlN5eERRVUZETEdWQlFXVXNSVUZEY2tJc1NVRkJTU3h4UkVGQlZ5eERRVU5ZTEV0QlFVc3NRMEZCUXl4bFFVRmxMRVZCUTNKQ0xHMUNRVUZ0UWl4RlFVTnVRaXhyUlVGQmEwVXNSVUZEYkVVc1VVRkJVU3hKUVVGSkxGRkJRVkVzUTBGQlF5eGpRVUZqTEVOQlFVTXNTMEZCU3l4RFFVRkRMR1ZCUVdVc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRGVFUXNVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEycERMRWxCUVVrc1JVRkRVaXhaUVVGWkxFTkJRMllzUTBGRFNpeERRVUZETzFGQlJVWXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRMVlzUzBGQlN5eERRVUZETEUxQlFVMHNSVUZEV2l4SlFVRkpMSEZFUVVGWExFTkJRMWdzUzBGQlN5eERRVUZETEUxQlFVMHNSVUZEV2l4eFFrRkJjVUlzUlVGRGNrSXNhME5CUVd0RExFVkJRMnhETEZGQlFWRXNTVUZCU1N4UlFVRlJMRU5CUVVNc1kwRkJZeXhEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUXk5RExGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVONFFpeExRVUZMTEVWQlExUXNXVUZCV1N4RFFVTm1MRU5CUTBvc1EwRkJRenRSUVVWR096dFhRVVZITzFGQlJVZ3NTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVkQlFVY3NRMEZEZEVJc2FVSkJRV2xDTEVOQlFVTXNZMEZCWXl4RlFVTm9ReXhKUVVGSkxIbEVRVUZoTEVOQlEySXNhVUpCUVdsQ0xFTkJRVU1zWTBGQll5eEZRVU5vUXl4aFFVRmhMRVZCUTJJc01rWkJRVEpHTEVWQlF6TkdMRU5CUVVNc1EwRkJReXhQUVVGUExFVkJRMVFzU1VGQlNTeERRVUZETEU5QlFVOHNSVUZEV2l4UlFVRlJMRWxCUVVrc1VVRkJVU3hEUVVGRExHTkJRV01zUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEyNUZMRkZCUVZFc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRelZETEVkQlFVY3NSVUZCUlN4VFFVRlRMRU5CUTJ4Q0xGbEJRVmtzUTBGRFppeERRVU5LTEVOQlFVTTdVVUZGUml4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNSMEZCUnl4RFFVTjBRaXhwUWtGQmFVSXNRMEZCUXl4blFrRkJaMElzUlVGRGJFTXNTVUZCU1N4NVJFRkJZU3hEUVVOaUxHbENRVUZwUWl4RFFVRkRMR2RDUVVGblFpeEZRVU5zUXl4bFFVRmxMRVZCUTJZc09FWkJRVGhHTEVWQlF6bEdMRVZCUVVVc1EwRkJReXhQUVVGUExFVkJRMVlzU1VGQlNTeERRVUZETEU5QlFVOHNSVUZEV2l4RlFVRkZMRU5CUVVNc1UwRkJVeXhGUVVOYUxGbEJRVmtzUTBGRFppeERRVU5LTzFGQlJVUXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVkQlFVY3NRMEZEZEVJc2FVSkJRV2xDTEVOQlFVTXNiMEpCUVc5Q0xFVkJRM1JETEVsQlFVa3NlVVJCUVdFc1EwRkRZaXhwUWtGQmFVSXNRMEZCUXl4dlFrRkJiMElzUlVGRGRFTXNaMEpCUVdkQ0xFVkJRMmhDTEhkR1FVRjNSaXhGUVVONFJpeERRVUZETEVOQlFVTXNUMEZCVHl4RlFVTlVMRWRCUVVjc1EwRkJReXhQUVVGUExFVkJRMWdzVVVGQlVTeEpRVUZKTEZGQlFWRXNRMEZCUXl4alFVRmpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEzcEZMRkZCUVZFc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4dlFrRkJiMElzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEYkVRc1EwRkJReXhGUVVGRkxGTkJRVk1zUTBGRGFFSXNXVUZCV1N4RFFVTm1MRU5CUTBvc1EwRkJRenRSUVVWR0xFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhIUVVGSExFTkJRM1JDTEdsQ1FVRnBRaXhEUVVGRExFdEJRVXNzUlVGRGRrSXNTVUZCU1N4NVJFRkJZU3hEUVVOaUxHbENRVUZwUWl4RFFVRkRMRXRCUVVzc1JVRkRka0lzVVVGQlVTeEZRVU5TTERKSFFVRXlSeXhGUVVNelJ5eERRVUZETEVOQlFVTXNUMEZCVHl4RlFVTlVMRVZCUVVVc1EwRkJReXhQUVVGUExFVkJRMVlzVVVGQlVTeEpRVUZKTEZGQlFWRXNRMEZCUXl4alFVRmpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVNeFJDeFJRVUZSTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTnVReXhEUVVGRExFVkJRVVVzVTBGQlV5eERRVU5vUWl4WlFVRlpMRU5CUTJZc1EwRkRTaXhEUVVGRE8xRkJSVVlzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExFZEJRVWNzUTBGRGRFSXNhVUpCUVdsQ0xFTkJRVU1zUzBGQlN5eEZRVU4yUWl4SlFVRkpMSGxFUVVGaExFTkJRMklzYVVKQlFXbENMRU5CUVVNc1MwRkJTeXhGUVVOMlFpeFJRVUZSTEVWQlExSXNNa2RCUVRKSExFVkJRek5ITEVOQlFVTXNRMEZCUXl4UFFVRlBMRVZCUTFRc1JVRkJSU3hEUVVGRExFOUJRVThzUlVGRFZpeFJRVUZSTEVsQlFVa3NVVUZCVVN4RFFVRkRMR05CUVdNc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRekZFTEZGQlFWRXNRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTI1RExFVkJRVVVzUlVGQlJTeFRRVUZUTEVOQlEycENMRmxCUVZrc1EwRkRaaXhEUVVOS0xFTkJRVU03VVVGRlJpeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zUjBGQlJ5eERRVU4wUWl4cFFrRkJhVUlzUTBGQlF5eFRRVUZUTEVWQlF6TkNMRWxCUVVrc2VVUkJRV0VzUTBGRFlpeHBRa0ZCYVVJc1EwRkJReXhUUVVGVExFVkJRek5DTEZOQlFWTXNSVUZEVkN3MlJFRkJOa1FzUlVGRE4wUXNRMEZCUXl4RFFVRkRMRTlCUVU4c1JVRkRWQ3hIUVVGSExFTkJRVU1zVDBGQlR5eEZRVU5ZTEZGQlFWRXNTVUZCU1N4UlFVRlJMRU5CUVVNc1kwRkJZeXhEUVVGRExHbENRVUZwUWl4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRE9VUXNVVUZCVVN4RFFVRkRMR2xDUVVGcFFpeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRka01zUlVGQlJTeEZRVUZGTEZOQlFWTXNRMEZEYWtJc1dVRkJXU3hEUVVObUxFTkJRMG9zUTBGQlF6dFJRVVZHTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eEhRVUZITEVOQlEzUkNMR2xDUVVGcFFpeERRVUZETEdkQ1FVRm5RaXhGUVVOc1F5eEpRVUZKTEhsRVFVRmhMRU5CUTJJc2FVSkJRV2xDTEVOQlFVTXNaMEpCUVdkQ0xFVkJRMnhETEc5Q1FVRnZRaXhGUVVOd1FpdzJRMEZCTmtNc1JVRkROME1zUTBGQlF5eERRVUZETEU5QlFVOHNSVUZEVkN4TlFVRk5MRU5CUVVNc1QwRkJUeXhGUVVOa0xGRkJRVkVzU1VGQlNTeFJRVUZSTEVOQlFVTXNZMEZCWXl4RFFVRkRMR2xDUVVGcFFpeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU55UlN4UlFVRlJMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zUTBGQlF5eERRVUZETzFsQlF6bERMRU5CUVVNc1JVRkJSU3hUUVVGVExFTkJRMmhDTEZsQlFWa3NRMEZEWml4RFFVTktMRU5CUVVNN1VVRkZSaXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1IwRkJSeXhEUVVOMFFpeHBRa0ZCYVVJc1EwRkJReXhuUWtGQlowSXNSVUZEYkVNc1NVRkJTU3g1UkVGQllTeERRVU5pTEdsQ1FVRnBRaXhEUVVGRExHZENRVUZuUWl4RlFVTnNReXh2UWtGQmIwSXNSVUZEY0VJc05rTkJRVFpETEVWQlF6ZERMRU5CUVVNc1EwRkJReXhQUVVGUExFVkJRMVFzVFVGQlRTeERRVUZETEU5QlFVOHNSVUZEWkN4UlFVRlJMRWxCUVVrc1VVRkJVU3hEUVVGRExHTkJRV01zUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRja1VzVVVGQlVTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVNNVF5eERRVUZETEVWQlFVVXNVMEZCVXl4RFFVTm9RaXhaUVVGWkxFTkJRMllzUTBGRFNpeERRVUZETzFGQlJVWXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVkQlFVY3NRMEZEZEVJc2FVSkJRV2xDTEVOQlFVTXNkMEpCUVhkQ0xFVkJRekZETEVsQlFVa3NlVVJCUVdFc1EwRkRZaXhwUWtGQmFVSXNRMEZCUXl4M1FrRkJkMElzUlVGRE1VTXNhME5CUVd0RExFVkJRMnhETEN0RVFVRXJSQ3hGUVVNdlJDeEhRVUZITEVOQlFVTXNUMEZCVHl4RlFVTllMRTFCUVUwc1EwRkJReXhQUVVGUExFVkJRMlFzVVVGQlVTeEpRVUZKTEZGQlFWRXNRMEZCUXl4alFVRmpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNkMEpCUVhkQ0xFTkJRVU1zUTBGQlF5eERRVUZETzFsQlF6ZEZMRkZCUVZFc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4M1FrRkJkMElzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEZEVRc1NVRkJTU3hGUVVGRkxGTkJRVk1zUTBGRGJrSXNXVUZCV1N4RFFVTm1MRU5CUTBvc1EwRkJRenRKUVVOT0xFTkJRVU03U1VGRlJEczdPenRQUVVsSE8wbEJRMGdzYlVOQlFXMURMRU5CUXk5Q0xFVkJRWGRDTEVWQlEzaENMR2xDUVVFMlF6dFJRVVUzUXl4SlFVRkpMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVU3V1VGRGFFTXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFqdHBRa0ZEYWtJc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF6dHBRa0ZEVUN4dlFrRkJiMElzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhEUVVGRE8xTkJRMmhFTzBsQlEwd3NRMEZCUXp0SlFVVkVMR3REUVVGclF5eERRVU01UWl4RlFVRjFRaXhGUVVOMlFpeHBRa0ZCTmtNN1VVRkZOME1zU1VGQlNTeEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZPMWxCUXk5Q0xFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJN2FVSkJRMmhDTEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNN2FVSkJRMUFzYjBKQlFXOUNMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNRMEZCUXp0VFFVTm9SRHRKUVVOTUxFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3h6UWtGQmMwSXNRMEZCUXl4RlFVRjNRanRSUVVNelF5eEpRVUZKTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVN1dVRkRhRU1zVDBGQlR5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJRenRUUVVOb1JEdGhRVUZOTzFsQlEwZ3NUVUZCVFN4SlFVRkpMRXRCUVVzc1EwRkJReXc0UTBGQk9FTXNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJRenRUUVVOMlJUdEpRVU5NTEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNDeHRRa0ZCYlVJc1EwRkJReXhGUVVGeFFqdFJRVU55UXl4SlFVRkpMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZPMWxCUXpkQ0xFOUJRVThzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUzBGQlpTeERRVUZETzFOQlEzUkVPMkZCUVUwN1dVRkRTQ3hOUVVGTkxFbEJRVWtzUzBGQlN5eERRVUZETERoRFFVRTRReXhGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETzFOQlEzWkZPMGxCUTB3c1EwRkJRenRKUVVWRU96czdPMDlCU1VjN1NVRkRTQ3hwUWtGQmFVSXNRMEZCUXl4RlFVRjNRaXhGUVVGRkxFdEJRV0U3VVVGRGNrUXNTVUZCU1N4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRk8xbEJRMmhETEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1RVRkJUU3hIUVVGSExFdEJRVXNzUTBGQlF6dFRRVU5xUkR0aFFVRk5PMWxCUTBnc1RVRkJUU3hKUVVGSkxFdEJRVXNzUTBGQlF5dzRRMEZCT0VNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF6dFRRVU4yUlR0SlFVTk1MRU5CUVVNN1NVRkZSRHM3T3p0UFFVbEhPMGxCUTBnc05FSkJRVFJDTEVOQlEzaENMRVZCUVZrc1JVRkRXaXhuUWtGQmFVUTdVVUZGYWtRc1NVRkJTU3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSVHRaUVVOd1FpeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eFJRVUZSTEVkQlFVY3NaMEpCUVdkQ0xFTkJRVU03VTBGRGJFUTdTVUZEVEN4RFFVRkRPMGxCUlVRN096czdUMEZKUnp0SlFVTklMR2REUVVGblF5eERRVU0xUWl4RlFVRnhRaXhGUVVOeVFpeG5Ra0ZCWjBRN1VVRkZhRVFzU1VGQlNTeEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJUdFpRVU0zUWl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4UlFVRlJMRWRCUVVjc1owSkJRV2RDTEVOQlFVTTdVMEZETTBRN1NVRkRUQ3hEUVVGRE8wbEJSVVE3T3pzN1QwRkpSenRKUVVOSUxHZENRVUZuUWl4RFFVRkRMRVZCUVhWQ08xRkJRM0JETEU5QlFVOHNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRKUVVONlF5eERRVUZETzBsQlJVUTdPenM3VDBGSlJ6dEpRVU5JTEdGQlFXRXNRMEZCUXl4RlFVRlpPMUZCUTNSQ0xFOUJRVThzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zU1VGQlpTeERRVUZETzBsQlF6bERMRU5CUVVNN1NVRkZSRHM3T3p0UFFVbEhPMGxCUTBnc1kwRkJZeXhEUVVGRExFVkJRVmtzUlVGQlJTeFhRVUZ2UWp0UlFVTTNReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVU3V1VGRGNrSXNNRVJCUVdNc1EwRkRWaXhuUlVGQmIwSXNSVUZCUlN4RlFVTjBRaXcyUWtGQk5rSXNSVUZCUlN3clEwRkJLME1zUTBGRGFrWXNRMEZCUXp0VFFVTk1PMkZCUVUwN1dVRkRTQ3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhKUVVGSkxFZEJRVWNzVjBGQlZ5eERRVUZETzFOQlEzcERPMGxCUTB3c1EwRkJRenRKUVVWRU96czdPMDlCU1VjN1NVRkRTQ3hqUVVGakxFTkJRVU1zUlVGQmNVSXNSVUZCUlN4WlFVRnZRanRSUVVOMFJDeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVTdXVUZET1VJc01FUkJRV01zUTBGRFZpeG5SVUZCYjBJc1JVRkJSU3hGUVVOMFFpeHJRMEZCYTBNc1JVRkJSU3gzUkVGQmQwUXNRMEZETDBZc1EwRkJRenRUUVVOTU8yRkJRVTA3V1VGRFNDeEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eEpRVUZKTEVkQlFVY3NXVUZCV1N4RFFVRkRPMU5CUTI1RU8wbEJRMHdzUTBGQlF6dEpRVVZFT3pzN08wOUJTVWM3U1VGRFNDeDFRa0ZCZFVJc1EwRkRia0lzUlVGQmRVSXNSVUZEZGtJc1kwRkJOa0k3VVVGRk4wSXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVU3V1VGRGFFTXNNRVJCUVdNc1EwRkRWaXhuUlVGQmIwSXNSVUZCUlN4RlFVTjBRaXhyUTBGQmEwTXNSVUZCUlN3d1JFRkJNRVFzUTBGRGFrY3NRMEZCUXp0VFFVTk1PMkZCUVUwN1dVRkRTQ3hKUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEU5QlFVOHNSMEZCUnl4alFVRmpMRU5CUVVNN1UwRkRNVVE3U1VGRFRDeERRVUZETzBsQlJVUTdPenM3VDBGSlJ6dEpRVU5JTEhGQ1FVRnhRaXhEUVVGRExFVkJRWFZDTEVWQlFVVXNXVUZCYjBJN1VVRkRMMFFzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVN1dVRkRhRU1zTUVSQlFXTXNRMEZEVml4blJVRkJiMElzUlVGQlJTeEZRVU4wUWl4clEwRkJhME1zUlVGQlJTeDNSRUZCZDBRc1EwRkRMMFlzUTBGQlF6dFRRVU5NTzJGQlFVMDdXVUZEU0N4TlFVRk5MR0ZCUVdFc1IwRkJSeXhKUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETzFsQlEzQkVMRTFCUVUwc1pVRkJaU3hIUVVGSExHRkJRV0VzUTBGQlF5eFBRVUZQTEVOQlFVTTdXVUZET1VNc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eFJRVUZSTEVOQlFVTXNXVUZCV1N4RFFVRkRMRVZCUVVVN1owSkJRM3BETEdWQlFXVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU03WjBKQlEyNURMR0ZCUVdFc1EwRkJReXhQUVVGUExFZEJRVWNzWlVGQlpTeERRVUZETzJGQlF6TkRPMWxCUTBRc1lVRkJZU3hEUVVGRExGRkJRVkVzUjBGQlJ5eFpRVUZaTEVOQlFVTTdVMEZEZWtNN1NVRkRUQ3hEUVVGRE8wbEJSVVE3T3pzN1QwRkpSenRKUVVOSUxGbEJRVmtzUTBGQlF5eEZRVUZaTEVWQlFVVXNTMEZCWVR0UlFVTndReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVU3V1VGRGNrSXNNRVJCUVdNc1EwRkRWaXhuUlVGQmIwSXNSVUZCUlN4RlFVTjBRaXh2UTBGQmIwTXNSVUZCUlN3clEwRkJLME1zUTBGRGVFWXNRMEZCUXp0VFFVTk1PMkZCUVUwN1dVRkRTQ3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhMUVVGTExFZEJRVWNzUzBGQlN5eERRVUZETzFOQlEzQkRPMGxCUTB3c1EwRkJRenRKUVVWSE96czdPMDlCU1VjN1NVRkRTQ3hYUVVGWExFTkJRVU1zVVVGQk9FSTdVVUZEZEVNc1MwRkJTeXhOUVVGTkxFZEJRVWNzU1VGQlNTeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhGUVVGRk8xbEJRM0pETEVsQlFVa3NVVUZCVVN4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRk8yZENRVU5tTEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1IwRkJSeXhGUVVGRkxGRkJRVkVzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMkZCUXpORE8ybENRVUZOTEVsQlFVa3NWMEZCVnl4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRk8yZENRVU42UWl4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNSMEZCUnl4RlFVRkZMRkZCUVZFc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETzJGQlF6bERPMmxDUVVGTkxFbEJRVWtzVVVGQlVTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZPMmRDUVVOMFFpeEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWRCUVVjc1JVRkJSU3hSUVVGUkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0aFFVTXpRenRwUWtGQlRTeEpRVUZKTEZWQlFWVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSVHRuUWtGRGVFSXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeERRVUZETEVkQlFVY3NSVUZCUlN4UlFVRlJMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dGhRVU5zUkR0VFFVTktPMGxCUTB3c1EwRkJRenRKUVVWTU96czdUMEZIUnp0SlFVTklMRmRCUVZjN1VVRkRVQ3hOUVVGTkxGRkJRVkVzUjBGQmVVSXNSVUZCUlN4RFFVRkRPMUZCUXpGRExFdEJRVXNzVFVGQlRTeERRVUZETEVkQlFVY3NSVUZCUlN4TFFVRkxMRU5CUVVNc1NVRkJTU3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNSVUZCUlN4RlFVRkZPMWxCUXpkRExGRkJRVkVzUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRE8xTkJRemxDTzFGQlEwUXNTMEZCU3l4TlFVRk5MRU5CUVVNc1IwRkJSeXhGUVVGRkxFdEJRVXNzUTBGQlF5eEpRVUZKTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eFBRVUZQTEVWQlFVVXNSVUZCUlR0WlFVTjZSQ3hSUVVGUkxFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJRenRUUVVOb1F6dFJRVU5FTEV0QlFVc3NUVUZCVFN4RFFVRkRMRWRCUVVjc1JVRkJSU3hMUVVGTExFTkJRVU1zU1VGQlNTeEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRTlCUVU4c1JVRkJSU3hGUVVGRk8xbEJRM1JFTEZGQlFWRXNRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETzFOQlF6bENPMUZCUTBRc1MwRkJTeXhOUVVGTkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEV0QlFVc3NRMEZCUXl4SlFVRkpMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4UFFVRlBMRVZCUVVVc1JVRkJSVHRaUVVONFJDeFJRVUZSTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF6dFRRVU5zUXp0UlFVTkVMRTlCUVU4c1VVRkJVU3hEUVVGRE8wbEJRM0JDTEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNDeFJRVUZSTzFGQlEwb3NUMEZCVHl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNc1EwRkJRenRKUVVNelF5eERRVUZETzBsQlJVUTdPenRQUVVkSE8wbEJRMGdzWlVGQlpUdFJRVU5ZTEU5QlFVOHNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRMRU5CUVVNN1NVRkRjRVFzUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxHdENRVUZyUWp0UlFVTmtMRTlCUVU4c1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zVFVGQlRTeEZRVUZGTEVOQlFVTXNRMEZCUXp0SlFVTjJSQ3hEUVVGRE8wbEJSVVE3T3p0UFFVZEhPMGxCUTBnc2FVSkJRV2xDTzFGQlEySXNUMEZCVHl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlEzUkVMRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU0N4MVFrRkJkVUlzUTBGQlF5eFpRVUV3UWp0UlFVTTVReXhMUVVGTExFMUJRVTBzUjBGQlJ5eEpRVUZKTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hGUVVGRkxFVkJRVVU3V1VGRGFrTXNUVUZCVFN4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1dVRkRha01zU1VGQlNTeEpRVUZKTEVWQlFVVTdaMEpCUTA0c1NVRkJTU3hEUVVGRExGbEJRVmtzUjBGQlJ5eERRVUZETEZGQlFXbENMRVZCUVVVc1JVRkJSU3hEUVVOMFF5eFpRVUZaTEVOQlFVTXNZVUZCWVN4RFFVTjBRaXhKUVVGSkxHOUZRVUZ2UWl4RFFVRkRPMjlDUVVOeVFpeEZRVUZGTEVWQlFVVXNTVUZCU1N4RFFVRkRMRVZCUVVVN2IwSkJRMWdzU1VGQlNTeEZRVUZGTEUxQlFVMDdiMEpCUTFvc1MwRkJTeXhGUVVGRkxGRkJRVkU3YjBKQlEyWXNUVUZCVFN4RlFVRkZMRWxCUVVrN2FVSkJRMllzUTBGQlF5eERRVU5NTEVOQlFVTTdZVUZEVkR0VFFVTktPMUZCUTBRc1MwRkJTeXhOUVVGTkxFZEJRVWNzU1VGQlNTeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zU1VGQlNTeEZRVUZGTEVWQlFVVTdXVUZETjBNc1RVRkJUU3hOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0WlFVTXZReXhKUVVGSkxFMUJRVTBzUlVGQlJUdG5Ra0ZEVWl4TlFVRk5MRU5CUVVNc1dVRkJXU3hIUVVGSExFTkJRVU1zVVVGQlowSXNSVUZCUlN4RlFVRkZMRU5CUTNaRExGbEJRVmtzUTBGQlF5eGhRVUZoTEVOQlEzUkNMRWxCUVVrc2IwVkJRVzlDTEVOQlFVTTdiMEpCUTNKQ0xFVkJRVVVzUlVGQlJTeE5RVUZOTEVOQlFVTXNSVUZCUlR0dlFrRkRZaXhKUVVGSkxFVkJRVVVzVVVGQlVUdHZRa0ZEWkN4TFFVRkxMRVZCUVVVc1VVRkJVVHR2UWtGRFppeE5RVUZOTEVWQlFVVXNUVUZCVFR0cFFrRkRha0lzUTBGQlF5eERRVU5NTEVOQlFVTTdZVUZEVkR0VFFVTktPMUZCUTBRc1MwRkJTeXhOUVVGTkxFZEJRVWNzU1VGQlNTeEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hGUVVGRk8xbEJRekZETEUxQlFVMHNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMWxCUXpGRExFbEJRVWtzU1VGQlNTeEZRVUZGTzJkQ1FVTk9MRWxCUVVrc1EwRkJReXhaUVVGWkxFZEJRVWNzUTBGQlF5eFJRVUZuUWl4RlFVRkZMRVZCUVVVc1EwRkRja01zV1VGQldTeERRVUZETEdGQlFXRXNRMEZEZEVJc1NVRkJTU3h2UlVGQmIwSXNRMEZCUXp0dlFrRkRja0lzUlVGQlJTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RlFVRkZPMjlDUVVOWUxFbEJRVWtzUlVGQlJTeE5RVUZOTzI5Q1FVTmFMRXRCUVVzc1JVRkJSU3hSUVVGUk8yOUNRVU5tTEUxQlFVMHNSVUZCUlN4SlFVRkpPMmxDUVVObUxFTkJRVU1zUTBGRFRDeERRVUZETzJGQlExUTdVMEZEU2p0UlFVTkVMRXRCUVVzc1RVRkJUU3hIUVVGSExFbEJRVWtzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFbEJRVWtzUlVGQlJTeEZRVUZGTzFsQlF6VkRMRTFCUVUwc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdXVUZET1VNc1NVRkJTU3hOUVVGTkxFVkJRVVU3WjBKQlExSXNUVUZCVFN4RFFVRkRMRmxCUVZrc1IwRkJSeXhEUVVGRExGRkJRV2RDTEVWQlFVVXNSVUZCUlN4RFFVTjJReXhaUVVGWkxFTkJRVU1zWVVGQllTeERRVU4wUWl4SlFVRkpMRzlGUVVGdlFpeERRVUZETzI5Q1FVTnlRaXhGUVVGRkxFVkJRVVVzVFVGQlRTeERRVUZETEVWQlFVVTdiMEpCUTJJc1NVRkJTU3hGUVVGRkxGRkJRVkU3YjBKQlEyUXNTMEZCU3l4RlFVRkZMRkZCUVZFN2IwSkJRMllzVFVGQlRTeEZRVUZGTEUxQlFVMDdhVUpCUTJwQ0xFTkJRVU1zUTBGRFRDeERRVUZETzJGQlExUTdVMEZEU2p0SlFVTk1MRU5CUVVNN1EwRkRTanRCUVVWRU96dEhRVVZITzBGQlEwZ3NTVUZCV1N4cFFrRkhXRHRCUVVoRUxGZEJRVmtzYVVKQlFXbENPMGxCUTNwQ0xIVkZRVUZsTzBsQlEyWXNNa1ZCUVdsQ08wRkJRM0pDTEVOQlFVTXNSVUZJVnl4cFFrRkJhVUlzUzBGQmFrSXNhVUpCUVdsQ0xGRkJSelZDT3pzN096czdPenM3T3pzN096czdRVU55SzBKRUxHdEVRVUZyUkR0QlFVVnNSRHM3UjBGRlJ6dEJRVU5KTEUxQlFVMHNWMEZCVnp0SlFWRndRaXhaUVVOSkxFVkJRVlVzUlVGRFZpeExRVUZoTEVWQlEySXNWMEZCYlVJc1JVRkRia0lzYlVKQlFUUkNPMGxCUTJ4RExHZEZRVUZuUlR0SlFVTm9SU3d3UWtGQmFVWXNSMEZCUnl4RlFVRkZMRWRCUVhWRExFTkJRVU03VVVGRmVFZ3NTVUZCU1N4RFFVRkRMRkZCUVZFc1IwRkJSeXgxUWtGQmRVSXNRMEZCUXp0UlFVVjRReXhKUVVGSkxFTkJRVU1zV1VGQldTeEhRVUZITEVkQlFVY3NSVUZCUlR0WlFVTnlRaXh0UTBGQmJVTTdVVUZEZGtNc1EwRkJReXhEUVVGRE8xRkJRMFlzU1VGQlNTeERRVUZETEVWQlFVVXNSMEZCUnl4RlFVRkZMRU5CUVVNN1VVRkRZaXhKUVVGSkxFTkJRVU1zVjBGQlZ5eEhRVUZITEZkQlFWY3NRMEZCUXp0UlFVTXZRaXhKUVVGSkxFTkJRVU1zUzBGQlN5eEhRVUZITEV0QlFVc3NRMEZCUXp0UlFVTnVRaXhKUVVGSkxFTkJRVU1zUzBGQlN5eEhRVUZITEcxQ1FVRnRRaXhEUVVGRE8wbEJRM0pETEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNDeEpRVUZYTEV0QlFVc3NRMEZCUXl4UFFVRmxPMUZCUXpWQ0xFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NUMEZCVHl4RFFVRkRPMUZCUTNSQ0xFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8wbEJRMjVETEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxFbEJRVmNzUzBGQlN6dFJRVU5hTEU5QlFVOHNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJRenRKUVVOMlFpeERRVUZETzBsQlJVUTdPMDlCUlVjN1NVRkRTQ3hKUVVGWExFdEJRVXM3VVVGRFdpeFBRVUZQTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNN1NVRkRka0lzUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxFbEJRVmNzUzBGQlN5eERRVUZETEU5QlFXZENPMUZCUXpkQ0xFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NUMEZCVHl4RFFVRkRPMUZCUTNSQ0xFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF6dFJRVU5xUXl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0SlFVTnVReXhEUVVGRE8wTkJRMG83T3pzN096czdPenM3T3pzN096czdRVU5vUlVRc2EwUkJRV3RFTzBGQlIwNDdRVUZGTlVNN08wZEJSVWM3UVVGRFNTeE5RVUZOTEZkQlJWZ3NVMEZCVVN4eFJFRkJWenRKUVV0cVFpeFpRVU5KTEVWQlFYZENMRVZCUTNoQ0xFdEJRV0VzUlVGRFlpeFhRVUZ0UWl4RlFVTnVRaXhuUWtGQmVVSXNSVUZEZWtJc1dVRkJjVUk3U1VGRE0wSXNaMFZCUVdkRk8wbEJRMmhGTERCQ1FVRnBSaXhIUVVGSExFVkJRVVVzUjBGQmRVTXNRMEZCUXp0UlFVVjRTQ3hMUVVGTExFTkJRVU1zUlVGQlJTeEZRVUZGTEV0QlFVc3NSVUZCUlN4WFFVRlhMRVZCUVVVc1owSkJRV2RDTEVWQlFVVXNkVUpCUVhWQ0xFTkJRVU1zUTBGQlF6dFJRVVY2UlN4TlFVRk5MRk5CUVZNc1IwRkJSeXhKUVVGSkxHVkJRV1VzUTBGQlF5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8xRkJRemxFTEVsQlFVa3NRMEZCUXl4WlFVRlpMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSVHRaUVVNeFF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4SFFVRkhMR2RDUVVGblFpeERRVUZETzFOQlEyaERPMkZCUVUwN1dVRkRTQ3hwUTBGQmFVTTdXVUZEYWtNc1RVRkJUU3haUVVGWkxFZEJRVWNzU1VGQlNTeERRVUZETEdWQlFXVXNSVUZCUlN4RFFVRkRPMWxCUXpWRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVkQlFVY3NXVUZCV1N4RFFVRkRPMU5CUXpWQ08xRkJRMFFzU1VGQlNTeERRVUZETEZsQlFWa3NSMEZCUnl4WlFVRlpMRU5CUVVNN1NVRkRja01zUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxHVkJRV1U3VVVGRFdDeE5RVUZOTEZOQlFWTXNSMEZCUnl4SlFVRkpMR1ZCUVdVc1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMUZCUXpsRUxFbEJRVWtzVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVU3V1VGRGVFSXNTVUZEU1N4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNTMEZCU3l4UFFVRlBPMmRDUVVOc1F5eFRRVUZUTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zUzBGQlN5eFBRVUZQTEVWQlEzQkRPMmRDUVVORkxFOUJRVThzUzBGQlN5eERRVUZETzJGQlEyaENPMWxCUTBRc1QwRkJUeXhKUVVGSkxFTkJRVU03VTBGRFpqdFJRVU5FTEU5QlFVOHNTMEZCU3l4RFFVRkRPMGxCUTJwQ0xFTkJRVU03U1VGRlJEczdUMEZGUnp0SlFVTkpMR1ZCUVdVN1VVRkRiRUlzU1VGQlNTeEpRVUZKTEVOQlFVTXNXVUZCV1N4RlFVRkZPMWxCUTI1Q0xHbENRVUZwUWp0WlFVTnFRaXhOUVVGTkxGTkJRVk1zUjBGQlJ5eEpRVUZKTEdWQlFXVXNRMEZCUXl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzFsQlF6bEVMRWxCUVVrc1NVRkJTU3hEUVVGRExFbEJRVWtzUzBGQlN5eEpRVUZKTEVWQlFVVTdaMEpCUTNCQ0xGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlF6dGhRVU5zUXp0cFFrRkJUVHRuUWtGRFNDeFRRVUZUTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVTTdZVUZEYmtNN1dVRkRSQ3hOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEZsQlFWa3NRMEZEZGtJc1JVRkJSU3hGUVVOR0xFVkJRVVVzUlVGRFJpeFRRVUZUTEVOQlFVTXNVVUZCVVN4RlFVRkZMRXRCUVVzc1JVRkJSVHRuUWtGRGRrSXNRMEZCUXl4RFFVRkRMRWRCUVVjc1VVRkJVU3hEUVVGRExGRkJRVkVzU1VGQlNTeFRRVUZUTEVWQlFVVTdaMEpCUTNKRExFTkJRVU1zUTBGQlF5eEhRVUZITEZGQlFWRXNRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkRMMElzUTBGQlF6dFRRVU5NTzBsQlEwd3NRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGtzVFVGQlRUdFJRVU5VTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRE8wbEJRM0pDTEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxFbEJRVmNzU1VGQlNUdFJRVU5ZTEU5QlFVOHNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU03U1VGRGVFSXNRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5JTEVsQlFWY3NTVUZCU1N4RFFVRkRMRTlCUVdkQ08xRkJRelZDTEVsQlFVa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1QwRkJUeXhEUVVGRE8wbEJRM3BDTEVOQlFVTTdRMEZEU2pzN096czdPenM3T3pzN096czdPenRCUTJ4SFJDeHJSRUZCYTBRN1FVRkhUanRCUVVVMVF6czdSMEZGUnp0QlFVTkpMRTFCUVUwc1lVRkZXQ3hUUVVGUkxIRkVRVUZYTzBsQlVXcENMRmxCUTBrc1JVRkJiME1zUlVGRGNFTXNTMEZCWVN4RlFVTmlMRmRCUVcxQ0xFVkJRMjVDTEVkQlFXdENMRVZCUTJ4Q0xFZEJRV3RDTEVWQlEyeENMR0ZCUVhGQ0xFVkJRM0pDTEZsQlFYRkNPMGxCUXpOQ0xHZEZRVUZuUlR0SlFVTm9SU3d3UWtGQmFVWXNSMEZCUnl4RlFVRkZMRWRCUVhWRExFTkJRVU03VVVGRmVFZ3NTMEZCU3l4RFFVRkRMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVVzVjBGQlZ5eEZRVUZGTEdGQlFXRXNSVUZCUlN4MVFrRkJkVUlzUTBGQlF5eERRVUZETzFGQlJYUkZMRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzUjBGQlJ5eERRVUZETzFGQlEyaENMRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzUjBGQlJ5eERRVUZETzFGQlJXaENMR2xFUVVGcFJEdFJRVU5xUkN4TlFVRk5MRk5CUVZNc1IwRkJSeXhKUVVGSkxHVkJRV1VzUTBGQlF5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8xRkJRemxFTEVsQlFVa3NRMEZCUXl4WlFVRlpMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSVHRaUVVNeFF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMR0ZCUVdFc1EwRkJRenRUUVVNdlFqdGhRVUZOTzFsQlEwZ3NUVUZCVFN4WFFVRlhMRWRCUVVjc1RVRkJUU3hEUVVGRExGVkJRVlVzUTBGQlF5eFRRVUZUTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzFsQlF6bEVMRWxCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4WFFVRlhMRU5CUVVNN1owSkJRMjVETEVOQlFVTXNRMEZCUXl4aFFVRmhPMmRDUVVObUxFTkJRVU1zUTBGQlF5eFhRVUZYTEVOQlFVTTdVMEZEY2tJN1VVRkRSQ3hKUVVGSkxFTkJRVU1zV1VGQldTeEhRVUZITEZsQlFWa3NRMEZCUXp0SlFVTnlReXhEUVVGRE8wbEJSVVE3TzA5QlJVYzdTVUZEU1N4bFFVRmxPMUZCUTJ4Q0xFbEJRVWtzU1VGQlNTeERRVUZETEZsQlFWa3NSVUZCUlR0WlFVTnVRaXhwUTBGQmFVTTdXVUZEYWtNc1RVRkJUU3hUUVVGVExFZEJRVWNzU1VGQlNTeGxRVUZsTEVOQlFVTXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dFpRVU01UkN4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVWQlFVVXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF5eERRVUZETzFsQlF5OURMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zV1VGQldTeERRVU4yUWl4RlFVRkZMRVZCUTBZc1JVRkJSU3hGUVVOR0xGTkJRVk1zUTBGQlF5eFJRVUZSTEVWQlFVVXNTMEZCU3l4RlFVRkZPMmRDUVVOMlFpeERRVUZETEVOQlFVTXNSMEZCUnl4UlFVRlJMRU5CUVVNc1VVRkJVU3hKUVVGSkxGTkJRVk1zUlVGQlJUdG5Ra0ZEY2tNc1EwRkJReXhEUVVGRExFZEJRVWNzVVVGQlVTeERRVUZETEZGQlFWRXNSVUZCUlN4RFFVTXZRaXhEUVVGRE8xTkJRMHc3U1VGRFRDeERRVUZETzBsQlJVUTdPMDlCUlVjN1NVRkRTQ3hKUVVGWExFMUJRVTBzUTBGQlF5eFRRVUZwUWp0UlFVTXZRaXhKUVVGSkxFTkJRVU1zUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU03U1VGRGRrTXNRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGdzU1VGQlZ5eE5RVUZOTzFGQlEySXNUMEZCVHl4SlFVRkpMRU5CUVVNc1MwRkJaU3hEUVVGRE8wbEJRMmhETEVOQlFVTTdTVUZGUkRzN096dFBRVWxITzBsQlEwa3NTMEZCU3l4RFFVRkRMRkZCUVdkQ08xRkJRM3BDTEVsQlFVa3NTVUZCU1N4RFFVRkRMRWxCUVVrc1NVRkJTU3hKUVVGSkxFbEJRVWtzU1VGQlNTeERRVUZETEVsQlFVa3NTVUZCU1N4SlFVRkpMRVZCUVVVN1dVRkRlRU1zVDBGQlR5eFJRVUZSTEVOQlFVTTdVMEZEYmtJN1lVRkJUU3hKUVVGSkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVsQlFVa3NTVUZCU1N4RlFVRkZPMWxCUXpGQ0xFOUJRVThzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hGUVVGRkxGRkJRVkVzUTBGQlF5eERRVUZETzFOQlEzaERPMkZCUVUwc1NVRkJTU3hKUVVGSkxFTkJRVU1zU1VGQlNTeEpRVUZKTEVsQlFVa3NSVUZCUlR0WlFVTXhRaXhQUVVGUExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hSUVVGUkxFTkJRVU1zUTBGQlF6dFRRVU40UXp0aFFVRk5PMWxCUTBnc1QwRkJUeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJTeFJRVUZSTEVOQlFVTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03VTBGRE4wUTdTVUZEVEN4RFFVRkRPMGxCUlVRN096dFBRVWRITzBsQlEwZ3NTVUZCVnl4SFFVRkhPMUZCUTFZc1QwRkJUeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETzBsQlEzSkNMRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU0N4SlFVRlhMRWRCUVVjN1VVRkRWaXhQUVVGUExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTTdTVUZEY2tJc1EwRkJRenRKUVVWRU96dFBRVVZITzBsQlEwa3NiMEpCUVc5Q0xFTkJRVU1zWVVGQk1FTTdVVUZEYkVVc1NVRkJTU3hEUVVGRExGRkJRVkVzUjBGQlJ5eGhRVUZoTEVOQlFVTTdTVUZEYkVNc1EwRkJRenREUVVOS096czdPenM3T3pzN096czdPenM3TzBGRGRFaEVMR3RFUVVGclJEdEJRVWRPTzBGQlJUVkRPenRIUVVWSE8wRkJRMGtzVFVGQlRTeGhRVVZZTEZOQlFWRXNjVVJCUVZjN1NVRk5ha0lzV1VGRFNTeEZRVUZ0UXl4RlFVTnVReXhMUVVGaExFVkJRMklzVjBGQmJVSXNSVUZEYmtJc1owSkJRWGRDTEVWQlEzaENMRTlCUVhOQ0xFVkJRM1JDTEZsQlFYRkNPMGxCUXpOQ0xHZEZRVUZuUlR0SlFVTm9SU3d3UWtGQmFVWXNSMEZCUnl4RlFVRkZMRWRCUVhWRExFTkJRVU03VVVGRmVFZ3NTMEZCU3l4RFFVRkRMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVVzVjBGQlZ5eEZRVUZGTEdkQ1FVRm5RaXhGUVVGRkxIVkNRVUYxUWl4RFFVRkRMRU5CUVVNN1VVRkZla1VzU1VGQlNTeERRVUZETEU5QlFVOHNSMEZCUnl4UFFVRlBMRU5CUVVNN1VVRkRka0lzVFVGQlRTeFRRVUZUTEVkQlFVY3NTVUZCU1N4bFFVRmxMRU5CUVVNc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0UlFVTTVSQ3hOUVVGTkxHRkJRV0VzUjBGRFppeFpRVUZaTEVsQlFVa3NVMEZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETzFsQlEyeERMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zWlVGQlpTeEZRVUZGTzFsQlEzaENMRU5CUVVNc1EwRkJReXhuUWtGQlowSXNRMEZCUXp0UlFVTXpRaXhKUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITEdGQlFXRXNRMEZCUXp0UlFVTTVRaXhKUVVGSkxFTkJRVU1zV1VGQldTeEhRVUZITEZsQlFWa3NRMEZCUXp0SlFVTnlReXhEUVVGRE8wbEJSVVE3T3p0UFFVZEhPMGxCUTBnc1pVRkJaVHM3VVVGRFdDeE5RVUZOTEZOQlFWTXNSMEZCUnl4SlFVRkpMR1ZCUVdVc1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMUZCUXpsRUxFbEJRVWtzVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVU3V1VGRGVFSXNUMEZCVHl4bFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNiVU5CUVVrc1JVRkJSU3hEUVVGRE8xTkJRM1pETzFGQlEwUXNUMEZCVHl4RlFVRkZMRU5CUVVNN1NVRkRaQ3hEUVVGRE8wbEJSVVE3TzA5QlJVYzdTVUZEU1N4bFFVRmxPMUZCUTJ4Q0xFbEJRVWtzU1VGQlNTeERRVUZETEZsQlFWa3NSVUZCUlR0WlFVTnVRaXhwUWtGQmFVSTdXVUZEYWtJc1RVRkJUU3hUUVVGVExFZEJRVWNzU1VGQlNTeGxRVUZsTEVOQlFVTXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dFpRVU01UkN4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVWQlFVVXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8xbEJRM1JETEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1dVRkJXU3hEUVVOMlFpeEZRVUZGTEVWQlEwWXNSVUZCUlN4RlFVTkdMRk5CUVZNc1EwRkJReXhSUVVGUkxFVkJRVVVzUzBGQlN5eEZRVUZGTzJkQ1FVTjJRaXhEUVVGRExFTkJRVU1zUjBGQlJ5eFJRVUZSTEVOQlFVTXNVVUZCVVN4SlFVRkpMRk5CUVZNc1JVRkJSVHRuUWtGRGNrTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1VVRkJVU3hEUVVGRExGRkJRVkVzUlVGQlJTeERRVU12UWl4RFFVRkRPMU5CUTB3N1NVRkRUQ3hEUVVGRE8wbEJSVVE3TzA5QlJVYzdTVUZEU1N4dlFrRkJiMElzUTBGQlF5eGhRVUY1UXp0UlFVTnFSU3hKUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITEdGQlFXRXNRMEZCUXp0SlFVTnNReXhEUVVGRE8wbEJSVVE3TzA5QlJVYzdTVUZEU0N4SlFVRlhMRTlCUVU4N1VVRkRaQ3hQUVVGUExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTTdTVUZEZWtJc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMRWxCUVZjc1QwRkJUeXhEUVVGRExFMUJRWEZDTzFGQlEzQkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFZEJRVWNzVFVGQlRTeERRVUZETzFGQlEzWkNMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMGxCUTNKRExFTkJRVU03U1VGRlJEczdUMEZGUnp0SlFVTklMRWxCUVZjc1VVRkJVVHRSUVVObUxFOUJRVThzU1VGQlNTeERRVUZETEV0QlFXVXNRMEZCUXp0SlFVTm9ReXhEUVVGRE8wbEJSVVE3T3p0UFFVZEhPMGxCUTBnc1NVRkJWeXhSUVVGUkxFTkJRVU1zUzBGQllUdFJRVU0zUWl4elJrRkJjMFk3VVVGRGRFWXNNRWRCUVRCSE8xRkJRekZITEVsQlFVa3NXVUZCV1N4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVFVGQlRTeERRVU5zUXl4RFFVRkRMRTFCUVdNc1JVRkJSU3hGUVVGRkxFTkJRVU1zVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGRGJrUXNRMEZCUXp0UlFVTkdMRWxCUVVrc1dVRkJXU3hEUVVGRExFMUJRVTBzUlVGQlJUdFpRVU55UWl4SlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExGbEJRVmtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTTNRaXhQUVVGUE8xTkJRMVk3VVVGRlJDdzRSa0ZCT0VZN1VVRkRPVVlzYlVOQlFXMURPMUZCUTI1RExGbEJRVmtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTFCUVUwc1EwRkRPVUlzUTBGQlF5eE5RVUZqTEVWQlFVVXNSVUZCUlN4RFFVRkRMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVTnFSU3hEUVVGRE8xRkJRMFlzU1VGQlNTeFpRVUZaTEVOQlFVTXNUVUZCVFN4RlFVRkZPMWxCUTNKQ0xFbEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NXVUZCV1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRemRDTEU5QlFVODdVMEZEVmp0SlFVTk1MRU5CUVVNN1EwRkRTanM3T3pzN096czdPenM3T3pzN096dEJRek5JUkN4clJFRkJhMFE3UVVGSFRqdEJRVVUxUXpzN1IwRkZSenRCUVVOSkxFMUJRVTBzVjBGRldDeFRRVUZSTEhGRVFVRlhPMGxCUzJwQ0xGbEJRMGtzUlVGQmFVTXNSVUZEYWtNc1MwRkJZU3hGUVVOaUxGZEJRVzFDTEVWQlEyNUNMR2RDUVVGM1FpeEZRVU40UWl4WlFVRnhRanRKUVVNelFpeG5SVUZCWjBVN1NVRkRhRVVzTUVKQlFXbEdMRWRCUVVjc1JVRkJSU3hIUVVGMVF5eERRVUZETzFGQlJYaElMRXRCUVVzc1EwRkJReXhGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEZkQlFWY3NSVUZCUlN4blFrRkJaMElzUlVGQlJTeDFRa0ZCZFVJc1EwRkJReXhEUVVGRE8xRkJSWHBGTEUxQlFVMHNVMEZCVXl4SFFVRkhMRWxCUVVrc1pVRkJaU3hEUVVGRExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1VVRkRPVVFzU1VGQlNTeERRVUZETEZsQlFWa3NTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZPMWxCUXpGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVkQlFVY3NaMEpCUVdkQ0xFTkJRVU03VTBGRGFFTTdZVUZCVFR0WlFVTklMR2xEUVVGcFF6dFpRVU5xUXl4TlFVRk5MRmxCUVZrc1IwRkJSeXhKUVVGSkxFTkJRVU1zWlVGQlpTeEZRVUZGTEVOQlFVTTdXVUZETlVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eFpRVUZaTEVOQlFVTTdVMEZETlVJN1VVRkRSQ3hKUVVGSkxFTkJRVU1zV1VGQldTeEhRVUZITEZsQlFWa3NRMEZCUXp0SlFVTnlReXhEUVVGRE8wbEJSVVE3T3p0UFFVZEhPMGxCUTBnc1pVRkJaVHM3VVVGRFdDeE5RVUZOTEZOQlFWTXNSMEZCUnl4SlFVRkpMR1ZCUVdVc1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMUZCUXpsRUxFbEJRVWtzVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVU3V1VGRGVFSXNUMEZCVHl4bFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNiVU5CUVVrc1JVRkJSU3hEUVVGRE8xTkJRM1pETzFGQlEwUXNUMEZCVHl4RlFVRkZMRU5CUVVNN1NVRkRaQ3hEUVVGRE8wbEJSVVE3TzA5QlJVYzdTVUZEU1N4bFFVRmxPMUZCUTJ4Q0xFbEJRVWtzU1VGQlNTeERRVUZETEZsQlFWa3NSVUZCUlR0WlFVTnVRaXhwUWtGQmFVSTdXVUZEYWtJc1RVRkJUU3hUUVVGVExFZEJRVWNzU1VGQlNTeGxRVUZsTEVOQlFVTXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dFpRVU01UkN4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVWQlFVVXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xbEJRMnhETEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1dVRkJXU3hEUVVOMlFpeEZRVUZGTEVWQlEwWXNSVUZCUlN4RlFVTkdMRk5CUVZNc1EwRkJReXhSUVVGUkxFVkJRVVVzUzBGQlN5eEZRVUZGTzJkQ1FVTjJRaXhEUVVGRExFTkJRVU1zUjBGQlJ5eFJRVUZSTEVOQlFVTXNVVUZCVVN4SlFVRkpMRk5CUVZNc1JVRkJSVHRuUWtGRGNrTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1VVRkJVU3hEUVVGRExGRkJRVkVzUlVGQlJTeERRVU12UWl4RFFVRkRPMU5CUTB3N1NVRkRUQ3hEUVVGRE8wbEJSVVE3TzA5QlJVYzdTVUZEU0N4SlFVRlhMRWxCUVVrN1VVRkRXQ3hQUVVGUExFbEJRVWtzUTBGQlF5eExRVUZsTEVOQlFVTTdTVUZEYUVNc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMRWxCUVZjc1NVRkJTU3hEUVVGRExFOUJRV1U3VVVGRE0wSXNTVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhQUVVGUExFTkJRVU03U1VGRGVrSXNRMEZCUXp0RFFVTktPenM3T3pzN096czdPenM3T3pzN08wRkRha1pFTEd0RVFVRnJSRHRCUVVWU08wRkJSVEZET3p0SFFVVkhPMEZCUTBrc1RVRkJUU3h4UWtGQmNVSTdTVUZCYkVNN1VVRkxTU3d5UWtGQmMwSXNSMEZCUnl4TFFVRkxMRU5CUVVNN1NVRTJTRzVETEVOQlFVTTdTVUV6U0VjN096dFBRVWRITzBsQlEwZ3NjMEpCUVhOQ08xRkJRMnhDTEU5QlFVOHNTVUZCU1N4RFFVRkRPMGxCUTJoQ0xFTkJRVU03U1VGRlJEczdPenM3VDBGTFJ6dEpRVU5JTEdsQ1FVRnBRaXhEUVVOaUxHTkJRV2xETEVWQlEycERMRXRCUVdFc1JVRkRZaXhyUWtGQmRVTTdVVUZGZGtNc1NVRkJTU3hEUVVGRExHTkJRV01zUjBGQlJ5eGpRVUZqTEVOQlFVTTdVVUZEY2tNc1NVRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJ5eExRVUZMTEVOQlFVTTdVVUZEYmtJc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4SFFVRkhMR3RDUVVGclFpeERRVUZETzFGQlF6ZERMRWxCUVVrc2EwSkJRV3RDTEVsQlFVa3NTVUZCU1N4RlFVRkZPMWxCUXpWQ0xFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1IwRkJSeXhGUVVGM1FpeERRVUZETzFsQlEyNUVMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRE8xTkJRekZETzFGQlJVUXNTVUZCU1N4RFFVRkRMRmRCUVZjc1IwRkJSeXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEdsQ1FVRnBRaXhEUVVOd1JDeEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVTldMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZETVVJc1EwRkJRenRSUVVOR0xFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSU3hEUVVGRE8wbEJRelZDTEVOQlFVTTdTVUZGUkN4blFrRkJaMEk3VVVGRFdpeHZRMEZCYjBNN1VVRkRjRU1zU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4VlFVRlZMRWRCUVVjc1lVRkJZU3hEUVVGRE8xRkJRelZETEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUlVGQlV5eEZRVUZGTEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETzFGQlF5OUVMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zVDBGQlR5eEhRVUZITEVOQlFVTXNSVUZCVXl4RlFVRkZMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUTJwRkxFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNVMEZCVXl4SFFVRkhMRU5CUVVNc1JVRkJaMElzUlVGQlJTeEZRVUZGTEVOQlF6bERMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdVVUZETjBJc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eFBRVUZQTEVkQlFVY3NRMEZCUXl4RlFVRm5RaXhGUVVGRkxFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRelZGTEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxGbEJRVmtzUTBGQlF5eEZRVUZUT3p0UlFVTnNRaXh6UkVGQlZTeERRVU5PTEdkRlFVRnZRaXhGUVVGRkxFVkJRM1JDTEdsQ1FVRnBRaXhKUVVGSkxFTkJRVU1zUzBGQlN5eFhRVUZYTEVWQlEzUkRMRU5CUVVNc1EwRkRTaXhEUVVGRE8xRkJRMFlzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4VlFVRkpMRU5CUVVNc1YwRkJWeXd3UTBGQlJTeExRVUZMTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNN1NVRkROME1zUTBGQlF6dEpRVVZFT3p0UFFVVkhPMGxCUTBnc1lVRkJZU3hEUVVGRExFVkJRVk03TzFGQlEyNUNMSE5FUVVGVkxFTkJRMDRzWjBWQlFXOUNMRVZCUVVVc1JVRkRkRUlzYVVKQlFXbENMRWxCUVVrc1EwRkJReXhMUVVGTExGZEJRVmNzUlVGRGRFTXNRMEZCUXl4RFFVTktMRU5CUVVNN1VVRkRSaXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFVa3NRMEZCUXl4WFFVRlhMREJEUVVGRkxFdEJRVXNzUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXp0SlFVTTVReXhEUVVGRE8wbEJSVVE3T3p0UFFVZEhPMGxCUTBnc1pVRkJaU3hEUVVGRExFdEJRVzFDTzFGQlF5OUNMRGhFUVVFNFJEdFJRVU01UkN4elJFRkJWU3hEUVVOT0xHZEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xHbENRVUZwUWl4SlFVRkpMRU5CUVVNc1MwRkJTeXhqUVVGakxFdEJRVXNzUlVGQlJTeEZRVU5vUkN4RFFVRkRMRU5CUTBvc1EwRkJRenRKUVVOT0xFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3hoUVVGaExFTkJRVU1zUzBGQmJVSTdPMUZCUXpkQ0xITkVRVUZWTEVOQlEwNHNaMFZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNhVUpCUVdsQ0xFbEJRVWtzUTBGQlF5eExRVUZMTEZsQlFWa3NTMEZCU3l4RlFVRkZMRVZCUXpsRExFTkJRVU1zUTBGRFNpeERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhWUVVGSkxFTkJRVU1zVjBGQlZ5d3dRMEZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03U1VGRGFrUXNRMEZCUXp0SlFVVkVPenM3TzA5QlNVYzdTVUZEU0N3MlJFRkJOa1E3U1VGRE4wUXNUVUZCVFN4RFFVRkRMRXRCUVdFc1JVRkJSU3hGUVVGVE8xRkJRek5DTEN0Q1FVRXJRanRKUVVOdVF5eERRVUZETzBsQlJVUTdPenM3VDBGSlJ6dEpRVU5JTERaRVFVRTJSRHRKUVVNM1JDeFBRVUZQTEVOQlFVTXNTMEZCWVN4RlFVRkZMRVZCUVZNN1VVRkROVUlzSzBKQlFTdENPMGxCUTI1RExFTkJRVU03U1VGRlJEczdPenRQUVVsSE8wbEJRMGdzTmtSQlFUWkVPMGxCUXpkRUxFOUJRVThzUTBGQlF5eExRVUZoTEVWQlFVVXNSVUZCVXp0UlFVTTFRaXdyUWtGQkswSTdTVUZEYmtNc1EwRkJRenREUVVOS096czdPenM3T3pzN096czdPenM3T3p0QlEzcEpSQ3hyUkVGQmEwUTdRVUZGVWp0QlFWRkVPMEZCWjBKc1F5eE5RVUZOTEdkRFFVRm5RenRKUVZGNlF5eFpRVUZaTEVsQlFXZERMRVZCUVVVc1VVRkJPRU03VVVGRGVFWXNTVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU03VVVGRGFrSXNTVUZCU1N4RFFVRkRMRkZCUVZFc1IwRkJSeXhSUVVGUkxFTkJRVU03VVVGRGVrSXNTVUZCU1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhKUVVGSkxFZEJRVWNzUlVGQlJTeERRVUZETzFGQlEzcENMRWxCUVVrc1EwRkJReXhIUVVGSExFZEJRVWNzUTBGQlF5eERRVUZETzBsQlEycENMRU5CUVVNN1NVRkZSQ3hMUVVGTExFTkJRVU1zVFVGQmIwTTdVVUZEZEVNc1NVRkJTU3hKUVVGSkxFTkJRVU1zVTBGQlV5eEZRVUZGTEVWQlFVVTdXVUZEYkVJc1QwRkJUeXhMUVVGTExFTkJRVU03VTBGRGFFSTdVVUZEUkN4SlFVRkpMRU5CUVVNc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXp0UlFVTTFRaXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRPMUZCUTNKQ0xFbEJRVWtzUTBGQlF5eFJRVUZSTEVkQlFVY3NWMEZCVnl4RFFVRkRMRU5CUVVNc1IwRkJSeXhGUVVGRk8xbEJRemxDTEVsQlFVa3NTVUZCU1N4RFFVRkRMRWRCUVVjc1JVRkJSU3hIUVVGSExFbEJRVWtzUTBGQlF5eFRRVUZUTEVsQlFVa3NUVUZCVFN4RFFVRkRMRkZCUVZFc1JVRkJSVHRuUWtGRGFFUXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRE8yRkJRMlk3YVVKQlFVMDdaMEpCUTBnc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eE5RVUZOTEVOQlFVTXNWMEZCVnl4RlFVRkZMRTFCUVUwc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF6dGhRVU0zUkR0UlFVTk1MRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUjBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVNMVF5eFBRVUZQTEVsQlFVa3NRMEZCUXp0SlFVTm9RaXhEUVVGRE8wbEJSVVFzU1VGQlNUdFJRVU5CTEVsQlFVa3NTVUZCU1N4RFFVRkRMRkZCUVZFc1JVRkJSVHRaUVVObUxHRkJRV0VzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1dVRkROMElzU1VGQlNTeERRVUZETEZGQlFWRXNSMEZCUnl4VFFVRlRMRU5CUVVNN1dVRkRNVUlzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1lVRkJZU3hGUVVGRkxFTkJRVU1zUTBGQlF6dFRRVU4yUXp0SlFVTk1MRU5CUVVNN1NVRkZSQ3hoUVVGaE8xRkJRMVFzVFVGQlRTeGhRVUZoTEVkQlFVY3NTVUZCU1N4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETzFGQlF6VkRMRTlCUVU4N1dVRkRTQ3hQUVVGUExFVkJRVVVzWVVGQllUdFpRVU4wUWl4alFVRmpMRVZCUVVVc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVFVGQlRTeEZRVUZGTEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhIUVVGSExFVkJRVVVzU1VGQlNTeEZRVUZGTEVWQlFVVTdaMEpCUXpkRkxFOUJRVThzUjBGQlJ5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMSFZDUVVGMVFpeEhRVUZITEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eERRVUZETzFsQlF6TkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJRenRaUVVNeFFpeHZRa0ZCYjBJc1JVRkJSU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFZEJRVWNzUlVGQlJTeEpRVUZKTEVWQlFVVXNSVUZCUlR0blFrRkRia1lzVDBGQlR5eEhRVUZITEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc2VVSkJRWGxDTEVkQlFVY3NTVUZCU1N4RFFVRkRMRzFDUVVGdFFpeERRVUZETEVOQlFVTTdXVUZETjBVc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRE8xbEJRekZDTEc5Q1FVRnZRaXhGUVVGRkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVsQlFVa3NSVUZCUlN4RlFVRkZPMmRDUVVOdVJpeFBRVUZQTEVkQlFVY3NSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXgxUWtGQmRVSXNSMEZCUnl4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNRMEZCUXp0WlFVTTNSU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU03V1VGRE1VSXNhMEpCUVd0Q0xFVkJRVVVzUjBGQlJ5eEZRVUZGTzJkQ1FVTnlRaXhKUVVGSkxFZEJRVWNzUjBGQlJ5eHZSRUZCYjBRc1EwRkJRenRuUWtGREwwUXNZVUZCWVN4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFMUJRVTBzUlVGQlJTeEZRVUZGTzI5Q1FVTTNRaXhIUVVGSExFbEJRVWtzVFVGQlRTeERRVUZETEcxQ1FVRnRRaXhIUVVGSExFZEJRVWNzUTBGQlF6dHZRa0ZEZUVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEhWQ1FVRjFRaXhIUVVGSExFMUJRVTBzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhIUVVGSExFZEJRVWNzUTBGQlF6dHZRa0ZETTBVc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEhsQ1FVRjVRaXhIUVVGSExFMUJRVTBzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhIUVVGSExFZEJRVWNzUTBGQlF6dHZRa0ZETjBVc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEhWQ1FVRjFRaXhIUVVGSExFMUJRVTBzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhIUVVGSExFZEJRVWNzUTBGQlF6dHZRa0ZETjBVc1IwRkJSeXhKUVVGSkxFbEJRVWtzUTBGQlF6dG5Ra0ZEYUVJc1EwRkJReXhEUVVGRE8yZENRVU5HTEU5QlFVOHNSMEZCUnl4RFFVRkRPMWxCUTJZc1EwRkJRenRUUVVOS08wbEJRMHdzUTBGQlF6dEpRVVZFTEZOQlFWTTdVVUZEVEN4UFFVRlBMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETzBsQlF6TkNMRU5CUVVNN1NVRkZSQ3hQUVVGUExFTkJRVU1zVVVGQmQwTTdVVUZETlVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVWQlFVVXNSVUZCUlR0WlFVTnVRaXhQUVVGUE8xTkJRMVk3VVVGRFJDeEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZPMWxCUTFnc2QwUkJRVmtzUTBGRFVpeG5SVUZCYjBJc1JVRkJSU3hGUVVOMFFpeG5RMEZCWjBNc1EwRkRia01zUTBGQlF6dFpRVU5HTEU5QlFVODdVMEZEVmp0UlFVTkVMRWxCUVVrc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRkZCUVZFc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dFJRVU0xUXl4SlFVRkpMRTFCUVUwc1JVRkJSVHRaUVVOU0xFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1UwRkRNMEk3U1VGRFRDeERRVUZETzBsQlJVUXNWMEZCVnl4RFFVRkRMRmRCUVcxQ0xFVkJRVVVzV1VGQmIwSTdVVUZEYWtRc1NVRkJTU3hQUVVGUExFZEJRVWNzU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4WFFVRlhMRVZCUVVVc1dVRkJXU3hEUVVGRExFTkJRVU03VVVGRE5VUXNTVUZCU1N4TlFVRk5MRWRCUVVjc1NVRkJTU3gzUmtGQk5FSXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenRSUVVOMlJDeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRPMUZCUTNKRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1NVRkRka0lzUTBGQlF6dEpRVVZFTEdGQlFXRXNRMEZCUXl4WFFVRnRRaXhGUVVGRkxGbEJRVzlDTzFGQlEyNUVMRTlCUVU4N1dVRkRTQ3hIUVVGSExFVkJRVVVzU1VGQlNTeERRVUZETEVkQlFVY3NSVUZCUlR0WlFVTm1MR2RDUVVGblFpeEZRVUZGTEZsQlFWazdXVUZET1VJc1RVRkJUU3hGUVVGRkxGZEJRVmNzUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlR0VFFVTnlSRHRKUVVOTUxFTkJRVU03UTBGRlNqczdPenM3T3pzN096czdPenM3TzBGRGFFbEVMR3RFUVVGclJEdEJRVFJETTBNc1RVRkJUU3cwUWtGQk5FSTdTVUZUY2tNc1dVRkJXU3hQUVVGelF6dFJRVU01UXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhIUVVGSExFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTTdVVUZEZGtJc1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4SFFVRkhMRWxCUVVrc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF6dFJRVU4wUXl4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVkQlFVY3NUMEZCVHl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU40UlN4RFFVRkRPMGxCUlVRc1RVRkJUU3hEUVVGRExGRkJRWGRETzFGQlF6TkRMRWxCUVVrc1EwRkJReXgxUWtGQmRVSXNSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU03VVVGRE1VTXNTVUZCU1N4RFFVRkRMSGxDUVVGNVFpeEhRVUZITEZGQlFWRXNRMEZCUXl4cFFrRkJhVUlzUTBGQlF6dFJRVU0xUkN4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVkQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJRenRSUVVOd1JDeEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFZEJRVWNzVVVGQlVTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1VVRkJVU3hEUVVGRExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVNelJTeERRVUZETzBOQlJVbzdPenM3T3pzN096czdPenM3T3pzN1FVTnNSVVFzYTBSQlFXdEVPMEZCUlZJN1FVRkhNVU03TzBkQlJVYzdRVUZEU1N4TlFVRk5MR2xDUVVGcFFqdEpRVWN4UWpzN1QwRkZSenRKUVVOSUxGbEJRVmtzYlVKQlFUQkRPMUZCUTJ4RUxFbEJRVWtzUTBGQlF5eHRRa0ZCYlVJc1IwRkJSeXh0UWtGQmJVSXNRMEZCUXp0SlFVTnVSQ3hEUVVGRE8wbEJSVVFzVDBGQlR6dFJRVU5JTEU5QlFVOHNRMEZEU0N4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNjMEpCUVhOQ0xFVkJRVVVzUTBGQlF5eFhRVUZYTzFsQlEzcEVMRk5CUVZNN1dVRkRZaXhKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc2MwSkJRWE5DTEVWQlFVVXNRMEZCUXl4WFFVRlhPMmxDUVVONFJDeFZRVUZWTEVsQlFVa3NUVUZCVFN4RFFVTTFRaXhEUVVGRE8wbEJRMDRzUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxGRkJRVkVzUTBGQlF5eEpRVUZwUWp0UlFVTjBRaXd5UWtGQk1rSTdVVUZETTBJc1RVRkJUU3h0UWtGQmJVSXNSMEZEY2tJc1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRMSE5DUVVGelFpeEZRVUZGTEVOQlFVTTdVVUZGZEVRc1NVRkJTU3h0UWtGQmJVSXNRMEZCUXl4WFFVRlhMRU5CUVVNc1ZVRkJWU3hKUVVGSkxFMUJRVTBzUlVGQlJUdFpRVU4wUkN4dFFrRkJiVUlzUTBGQlF5eFhRVUZYTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xbEJRek5ETEhORVFVRlZMRU5CUTA0c1owVkJRVzlDTEVWQlFVVXNSVUZEZEVJc2FVSkJRV2xDTEVsQlFVa3NWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFVkJRM1pETEVOQlFVTXNRMEZEU2l4RFFVRkRPMWxCUTBZc1NVRkJTU3hEUVVGRExEaENRVUU0UWl4RlFVRkZMRU5CUVVNN1UwRkRla003WVVGQlRUdFpRVU5JTEhkRVFVRlpMRU5CUTFJc1owVkJRVzlDTEVWQlFVVXNSVUZEZEVJc2JVSkJRVzFDTEVsQlFVa3NWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRelZETEVOQlFVTTdVMEZEVER0SlFVTk1MRU5CUVVNN1NVRkZSRHM3VDBGRlJ6dEpRVU5JTERoQ1FVRTRRanRSUVVNeFFpeHBRMEZCYVVNN1NVRkRja01zUTBGQlF6dERRVU5LT3pzN096czdPenM3T3pzN096czdPenM3UVVNeFJFUXNhMFJCUVd0RU8wRkJSV3hFT3p0SFFVVkhPMEZCUTBrc1RVRkJUU3hsUVVGbE8wbEJTM2hDTzFGQlEwa3NTVUZCU1N4RFFVRkRMSE5DUVVGelFpeEhRVUZITEVsQlFVa3NjMEpCUVhOQ0xFVkJRVVVzUTBGQlF6dFJRVU16UkN4SlFVRkpMRU5CUVVNc1pVRkJaU3hIUVVGSExFbEJRVWtzWlVGQlpTeEZRVUZGTEVOQlFVTTdVVUZETjBNc1NVRkJTU3hEUVVGRExHTkJRV01zUjBGQlJ5eEpRVUZKTEdOQlFXTXNSVUZCUlN4RFFVRkRPMGxCUXk5RExFTkJRVU03U1VGRlJEczdUMEZGUnp0SlFVTklMRmxCUVZrN1VVRkRVaXhKUVVGSkxFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNUVUZCVFN4SlFVRkpMRWxCUVVrc1JVRkJSVHRaUVVOd1F5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWRCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEUxQlFVMHNRMEZCUXp0VFFVTjRSRHRKUVVOTUxFTkJRVU03UTBGRFNqdEJRVVZFT3p0SFFVVkhPMEZCUTBrc1RVRkJUU3h6UWtGQmMwSTdRMEZIYkVNN1FVRkZSRHM3UjBGRlJ6dEJRVU5KTEUxQlFVMHNaVUZCWlR0RFFWRXpRanRCUVVWRU96dEhRVVZITzBGQlEwa3NUVUZCVFN4alFVRmpPME5CVlRGQ096czdPenM3T3pzN096czdPenM3TzBGRE5VUkVMR3RFUVVGclJEdEJRVVZTTzBGQlF6RkRPenRIUVVWSE8wRkJRMGtzVFVGQlRTeHJRa0ZCYTBJN1NVRkJMMEk3VVVGRFNTd3lSRUZCTWtRN1VVRkRNMFFzYTBKQlFXRXNSMEZCVnl4SlFVRkpMRU5CUVVNN1VVRkROMElzZFVKQlFXdENMRWRCUVZjc1NVRkJTU3hEUVVGRE8xRkJSV3hETEdsRVFVRnBSRHRSUVVOcVJDeHhRa0ZCWjBJc1IwRkJWeXhKUVVGSkxFTkJRVU03VVVGRGFFTXNjMEpCUVdsQ0xFZEJRVmNzU1VGQlNTeERRVUZETzFGQlEycERMRzlDUVVGbExFZEJRVmNzU1VGQlNTeERRVUZETzFGQlF5OUNMSEZDUVVGblFpeEhRVUZYTEVsQlFVa3NRMEZCUXp0UlFVVm9ReXc0UTBGQk9FTTdVVUZET1VNc1lVRkJVU3hIUVVGWExFbEJRVWtzUTBGQlF6dFJRVU40UWl4dlFrRkJaU3hIUVVGWExFbEJRVWtzUTBGQlF6dFJRVVV2UWl3eVFrRkJNa0k3VVVGRE0wSXNiMEpCUVdVc1IwRkJSeXhEUVVGRExFTkJRVU03VVVGRGNFSXNlVUpCUVc5Q0xFZEJRVWNzUTBGQlF5eERRVUZETzFGQlJYcENMRGhDUVVFNFFqdFJRVU01UWl3eVFrRkJjMElzUjBGQlJ5eERRVUZETEVOQlFVTTdVVUZETTBJc2FVSkJRVmtzUjBGQlJ5eERRVUZETEVOQlFVTTdVVUZEYWtJc2QwSkJRWGRDTzFGQlEzaENMRzFDUVVGakxFZEJRVWNzUTBGQlF5eERRVUZETzFGQlEyNUNMSFZDUVVGclFpeEhRVUZITEVOQlFVTXNRMEZCUXp0UlFVTjJRaXcwUWtGQmRVSXNSMEZCUnl4RFFVRkRMRU5CUVVNN1VVRkROVUlzYjBKQlFXVXNSMEZCUnl4RFFVRkRMRU5CUVVNN1VVRkRjRUlzYlVOQlFXMURPMUZCUTI1RExHdENRVUZoTEVkQlFVY3NRMEZCUXl4RFFVRkRPMGxCZVVOMFFpeERRVUZETzBsQmRrTkhPenM3VDBGSFJ6dEpRVU5JTEhkQ1FVRjNRaXhEUVVGRExGZEJRVzFDTzFGQlEzaERMRWxCUVVrc1NVRkJTU3hEUVVGRExIVkNRVUYxUWl4SlFVRkpMRU5CUVVNc1JVRkJSVHRaUVVOdVF5eEpRVUZKTEVOQlFVTXNkVUpCUVhWQ0xFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRenRUUVVNeFJEdEpRVU5NTEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxHRkJRV0U3VVVGRFZDeEpRVU5KTEVsQlFVa3NRMEZCUXl4UlFVRlJMRWxCUVVrc1NVRkJTVHRaUVVOeVFpeERRVUZETEVsQlFVa3NRMEZCUXl4bFFVRmxMRWxCUVVrc1NVRkJTU3hKUVVGSkxFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1NVRkJTU3hKUVVGSkxFTkJRVU1zUlVGRGFrVTdXVUZEUlN4elJFRkJWU3hEUVVOT0xHZEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xIZENRVUYzUWl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEU5QlFVOHNTVUZCU1N4RFFVRkRMR1ZCUVdVc1JVRkJSU3hGUVVNeFJTeERRVUZETEVOQlEwb3NRMEZCUXp0WlFVTkdMRWxCUVVrc1EwRkJReXhSUVVGUkxFZEJRVWNzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhIUVVGSExFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTTdVMEZEYUVVN1VVRkZSQ3hKUVVOSkxFbEJRVWtzUTBGQlF5eGxRVUZsTEVsQlFVa3NTVUZCU1R0WlFVTTFRaXhEUVVGRExFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1NVRkJTU3hKUVVGSkxFbEJRVWtzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhKUVVGSkxFbEJRVWtzUTBGQlF5eEZRVU51UlR0WlFVTkZMSE5FUVVGVkxFTkJRMDRzWjBWQlFXOUNMRVZCUVVVc1JVRkRkRUlzYVVOQlFXbERMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNUMEZCVHl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVWQlFVVXNSVUZEY2tZc1EwRkJReXhEUVVOS0xFTkJRVU03V1VGRFJpeEpRVUZKTEVOQlFVTXNaVUZCWlR0blFrRkRhRUlzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhIUVVGSExFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJRenRUUVVOMFJEdEpRVU5NTEVOQlFVTTdRMEZEU2pzN096czdPenM3T3pzN096czdPMEZETTBWRUxHdEVRVUZyUkR0QlFVVnNSRHM3UjBGRlJ6dEJRVU5KTEUxQlFVMHNWMEZCVnp0SlFVOXdRanM3TzA5QlIwYzdTVUZEU0N4WlFVRlpMRTlCUVc5Q08xRkJVR2hETEhOQ1FVRnBRaXhIUVVGSExFTkJRVU1zUTBGQlF6dFJRVU4wUWl4eFFrRkJaMElzUjBGQlJ5eERRVUZETEVOQlFVTTdVVUZQYWtJc1NVRkJTU3hEUVVGRExFOUJRVThzUjBGQlJ5eFBRVUZQTEVOQlFVTTdVVUZGZGtJc2NVSkJRWEZDTzFGQlEzSkNMRWxCUVVrc1EwRkJReXhYUVVGWExFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRSUVVOcVJDeEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRVZCUVVVc1IwRkJSeXhoUVVGaExFTkJRVU03VVVGRGNFTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhMUVVGTExFTkJRVU1zVDBGQlR5eEhRVUZITEUxQlFVMHNRMEZCUXp0UlFVTjRReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEV0QlFVc3NRMEZCUXl4aFFVRmhMRWRCUVVjc1RVRkJUU3hEUVVGRE8xRkJRemxETEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1MwRkJTeXhEUVVGRExGRkJRVkVzUjBGQlJ5eFZRVUZWTEVOQlFVTTdVVUZETjBNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJRenRSUVVWeVF5eG5RMEZCWjBNN1VVRkRhRU1zU1VGQlNTeERRVUZETEZsQlFWa3NSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzFGQlEyeEVMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNSMEZCUnl4VlFVRlZMRU5CUVVNN1VVRkZPVU1zWjBaQlFXZEdPMUZCUTJoR0xFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF6dFJRVU5vUkN4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExGZEJRVmNzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNN1NVRkRMME1zUTBGQlF6dEpRVVZFT3p0UFFVVkhPMGxCUTBnc2FVSkJRV2xDTzFGQlEySXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhMUVVGTExFTkJRVU1zVDBGQlR5eEhRVUZITEU5QlFVOHNRMEZCUXp0SlFVTTNReXhEUVVGRE8wbEJSVVE3TzA5QlJVYzdTVUZEU0N4cFFrRkJhVUk3VVVGRFlpeEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFZEJRVWNzVFVGQlRTeERRVUZETzBsQlF6VkRMRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU0N4M1FrRkJkMElzUTBGQlF5eEpRVUZuUWp0UlFVTnlReXhOUVVGTkxFMUJRVTBzUjBGQlJ5eEpRVUZKTEVOQlEyWXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNSVUZCUlN4RFFVRkRMRWxCUVVrc1IwRkJSeXhOUVVGTkxFTkJRVU1zV1VGQldTeERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVOd1JTeERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhIUVVGSExFZEJRVWNzZVVKQlFYbENMRWRCUVVjc1RVRkJUU3hEUVVGRE8wbEJReTlFTEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxHbERRVUZwUXp0UlFVTTNRaXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRWRCUVVjc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eGhRVUZoTEVOQlFVTTdVVUZEZWtRc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4SFFVRkhMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zV1VGQldTeERRVUZETzFGQlEzWkVMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF6dEpRVU5zUWl4RFFVRkRPMGxCUlVRN08wOUJSVWM3U1VGRFNDeE5RVUZOTzFGQlEwWXNTVUZCU1N4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEV0QlFVc3NRMEZCUXl4SlFVRkpMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNTMEZCU3l4RFFVRkRMRVZCUVVVN1dVRkROMFFzU1VGQlNTeFpRVUZaTEVkQlFVY3NRMEZCUXl4RFFVRkRPMWxCUTNKQ0xFbEJRVWtzWVVGQllTeEhRVUZITEVOQlFVTXNRMEZCUXp0WlFVTjBRaXhKUVVGSkxGVkJRVlVzUjBGQlJ5eERRVUZETEVOQlFVTTdXVUZEYmtJc1NVRkJTU3hYUVVGWExFZEJRVWNzUTBGQlF5eERRVUZETzFsQlEzQkNMRTFCUVUwc2FVSkJRV2xDTEVkQlEyNUNMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVjBGQlZ5eEhRVUZITEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1dVRkJXU3hEUVVGRE8xbEJRM3BFTEUxQlFVMHNaMEpCUVdkQ0xFZEJRMnhDTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUjBGQlJ5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU03V1VGRGJrUXNTVUZCU1N4cFFrRkJhVUlzUjBGQlJ5eG5Ra0ZCWjBJc1JVRkJSVHRuUWtGRGRFTXNXVUZCV1N4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVjBGQlZ5eERRVUZETzJkQ1FVTjRReXhoUVVGaExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZEZEVJc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFhRVUZYTEVkQlFVY3NaMEpCUVdkQ0xFTkJRemxETEVOQlFVTTdaMEpCUTBZc1ZVRkJWU3hIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlEyNUNMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFpRVUZaTEVkQlFVY3NZVUZCWVN4RFFVRkRMRWRCUVVjc1IwRkJSeXhEUVVOd1JDeERRVUZETzJkQ1FVTkdMRmRCUVZjc1IwRkJSeXhEUVVGRExFTkJRVU03WVVGRGJrSTdhVUpCUVUwN1owSkJRMGdzV1VGQldTeEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUTNKQ0xFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNXVUZCV1N4SFFVRkhMR2RDUVVGblFpeERRVU12UXl4RFFVRkRPMmRDUVVOR0xHRkJRV0VzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJRenRuUWtGRE1VTXNWVUZCVlN4SFFVRkhMRU5CUVVNc1EwRkJRenRuUWtGRFppeFhRVUZYTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkRjRUlzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRmRCUVZjc1IwRkJSeXhaUVVGWkxFTkJRVU1zUjBGQlJ5eEhRVUZITEVOQlEyeEVMRU5CUVVNN1lVRkRURHRaUVVORUxFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNTMEZCU3l4RFFVRkRMRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEZkQlFWY3NSMEZCUnl4SlFVRkpMRU5CUVVNN1dVRkRMMFFzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNXVUZCV1N4SFFVRkhMRWxCUVVrc1EwRkJRenRaUVVOcVJTeEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFZEJRVWNzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXp0WlFVTjJReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRWRCUVVjc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF6dFpRVVYwUXl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEVkQlFVY3NXVUZCV1N4SFFVRkhMRWxCUVVrc1EwRkJRenRaUVVOd1JDeEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRXRCUVVzc1EwRkJReXhOUVVGTkxFZEJRVWNzWVVGQllTeEhRVUZITEVsQlFVa3NRMEZCUXp0WlFVTjBSQ3hKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRWRCUVVjc1YwRkJWeXhIUVVGSExFbEJRVWtzUTBGQlF6dFpRVU5zUkN4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVkQlFVY3NWVUZCVlN4SFFVRkhMRWxCUVVrc1EwRkJRenRUUVVOdVJEdEpRVU5NTEVOQlFVTTdRMEZEU2pzN096czdPenM3T3pzN096czdPenM3UVVOcVNFUXNhMFJCUVd0RU8wRkJSVkk3UVVGRFJUdEJRVVUxUXpzN1IwRkZSenRCUVVOSkxFMUJRVTBzY1VKQlFYRkNPMGxCVVRsQ096czdUMEZIUnp0SlFVTklMRmxCUVZrc1QwRkJiMEk3VVVGV2FFTXNZMEZCVXl4SFFVRkhMRXRCUVVzc1EwRkJRenRSUVVOc1FpeFRRVUZKTEVkQlFVY3NRMEZCUXl4RFFVRkRPMUZCUTFRc1UwRkJTU3hIUVVGbExGTkJRVk1zUTBGQlF6dFJRVU0zUWl4VlFVRkxMRWRCUVVjc1MwRkJTeXhEUVVGRE8xRkJRMlFzY1VKQlFXZENMRWRCUVVjc1JVRkJSU3hEUVVGRE8xRkJUMnhDTEVsQlFVa3NRMEZCUXl4WFFVRlhMRWRCUVVjc1NVRkJTU3h4UkVGQlZ5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMGxCUTJoRUxFTkJRVU03U1VGRlJEczdUMEZGUnp0SlFVTklMR1ZCUVdVN1VVRkRXQ3hKUVVGSkxFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVTdXVUZEV2l4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExHbENRVUZwUWl4RlFVRkZMRU5CUVVNN1UwRkRlRU03U1VGRFRDeERRVUZETzBsQlJVUTdPMDlCUlVjN1NVRkRTQ3hsUVVGbE8xRkJRMWdzU1VGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVNN1VVRkRia0lzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4cFFrRkJhVUlzUlVGQlJTeERRVUZETzBsQlEzcERMRU5CUVVNN1NVRkZSRHM3T3p0UFFVbEhPMGxCUTBnc2QwSkJRWGRDTEVOQlFVTXNTVUZCWjBJc1JVRkJSU3hqUVVFd1FqdFJRVU5xUlN4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExIZENRVUYzUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xRkJRMmhFTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1dVRkJXU3hEUVVGRExFMUJRVTBzUjBGQlJ5eEhRVUZITEVWQlFVVTdXVUZEZUVNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eHBRMEZCYVVNc1JVRkJSU3hEUVVGRE8xbEJRM0pFTEdOQlFXTXNSVUZCUlN4RFFVRkRPMUZCUTNKQ0xFTkJRVU1zUTBGQlF6dEpRVU5PTEVOQlFVTTdTVUZGUkRzN096dFBRVWxITzBsQlEwZ3NlVUpCUVhsQ0xFTkJRVU1zU1VGQlowSXNSVUZCUlN4alFVRXdRanRSUVVOc1JTeHpSa0ZCYzBZN1VVRkRkRVlzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRVZCUVVVN1dVRkRha0lzU1VGQlNTeERRVUZETEZOQlFWTXNSMEZCUnl4SlFVRkpMRU5CUVVNN1dVRkRkRUlzU1VGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVNN1dVRkRia0lzU1VGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4RFFVRkRMRU5CUVVNN1dVRkRaQ3hKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEZOQlFWTXNRMEZCUXp0VFFVTjZRanRSUVVWRUxIbEVRVUY1UkR0UlFVTjZSQ3hKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEVsQlFVa3NVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1VVRkZjRVVzYlVOQlFXMURPMUZCUTI1RExFMUJRVTBzVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlJYQkRMSE5FUVVGelJEdFJRVU4wUkN4SlFVRkpMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVU3V1VGRFdDeE5RVUZOTEVsQlFVa3NSMEZCUnl4SlFVRkpMRlZCUVZVc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNSMEZCUnl4VFFVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03V1VGRGFrVXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTNaQ0xFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNVMEZCVXl4RlFVRkZMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdXVUZEZEVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTTdVMEZEY0VJN1VVRkRSQ3d3UTBGQk1FTTdZVUZEY2tNN1dVRkRSQ3hKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEZOQlFWTXNRMEZCUXp0WlFVTjBRaXhKUVVGSkxFTkJRVU1zVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXp0WlFVTjBRaXh6UkVGQlZTeERRVU5PTEdkRlFVRnZRaXhGUVVGRkxFVkJRM1JDTEhsRFFVRjVReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNTVUZCU1N4SlFVRkpMRU5CUVVNc1NVRkJTU3hGUVVGRkxFVkJRM2hGTEVOQlFVTXNRMEZEU2l4RFFVRkRPMU5CUTB3N1VVRkZSQ3h6UkVGQmMwUTdVVUZEZEVRc1NVRkJTU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNTMEZCU3l4SlFVRkpMRU5CUVVNc1NVRkJTU3hGUVVGRk8xbEJRMmhETEVsQlFVa3NRMEZCUXl4VFFVRlRMRWRCUVVjc1MwRkJTeXhEUVVGRE8xbEJRM1pDTEVsQlFVa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRE8xbEJRMnhDTEhORVFVRlZMRU5CUTA0c1owVkJRVzlDTEVWQlFVVXNSVUZEZEVJc2EwTkJRV3RETEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1JVRkROME1zUTBGQlF5eERRVU5LTEVOQlFVTTdXVUZEUml4SlFVRkpMRU5CUVVNc2QwSkJRWGRDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hqUVVGakxFTkJRVU1zUTBGQlF6dFRRVU0xUkR0UlFVTkVMREJHUVVFd1JqdGhRVU55Uml4SlFVRkpMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVN1dVRkRia01zZDBSQlFWa3NRMEZEVWl4blJVRkJiMElzUlVGQlJTeEZRVU4wUWl4cFJFRkJhVVFzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRWxCUVVrc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJTeERRVU51Uml4RFFVRkRPMWxCUTBZc1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eFRRVUZUTEVOQlFVTTdXVUZEZEVJc1NVRkJTU3hEUVVGRExGTkJRVk1zUjBGQlJ5eExRVUZMTEVOQlFVTTdVMEZETVVJN1NVRkRUQ3hEUVVGRE8wTkJRMG83T3pzN096czdPenM3T3pzN096czdPenRCUTJwSVJDeHJSRUZCYTBRN1FVRk5URHRCUVVOMVFqdEJRVVZ3UlRzN096dEhRVWxITzBGQlEwa3NUVUZCVFN4dFFrRkJiVUk3U1VGVk5VSTdPenM3VDBGSlJ6dEpRVU5JTEZsQlEwa3NNRUpCUVcxRUxFVkJRMjVFTEc5Q1FVRnBReXhGUVVOcVF5eHRRa0ZCZDBNN1VVRllOVU1zY1VWQlFYRkZPMUZCUXpkRUxEaENRVUY1UWl4SFFVRkhMRWxCUVVrc05FVkJRVzlDTEVWQlFVVXNRMEZCUXp0UlFWa3pSQ3hKUVVGSkxFTkJRVU1zTUVKQlFUQkNMRWRCUVVjc01FSkJRVEJDTEVOQlFVTTdVVUZETjBRc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4SFFVRkhMRzlDUVVGdlFpeERRVUZETzFGQlEycEVMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNSMEZCUnl4dFFrRkJiVUlzUTBGQlF6dFJRVU12UXl4TlFVRk5MRmxCUVZrc1IwRkJSeXhEUVVGRExFVkJRV01zUlVGQlJTeEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU12UkN4TlFVRk5MRlZCUVZVc1IwRkJSeXhEUVVGRExFVkJRV01zUlVGQlJTeEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU16UkN4TlFVRk5MRmRCUVZjc1IwRkJSeXhEUVVGRExFVkJRV01zUlVGQlJTeEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU0zUkN4UlFVRlJMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNXVUZCV1N4RlFVRkZMRmxCUVZrc1JVRkJSU3hGUVVGRkxFOUJRVThzUlVGQlJTeExRVUZMTEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUXpGRkxGRkJRVkVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhWUVVGVkxFVkJRVVVzVlVGQlZTeEZRVUZGTEVWQlFVVXNUMEZCVHl4RlFVRkZMRXRCUVVzc1JVRkJSU3hEUVVGRExFTkJRVU03VVVGRGRFVXNVVUZCVVN4RFFVRkRMR2RDUVVGblFpeERRVUZETEZkQlFWY3NSVUZCUlN4WFFVRlhMRVZCUVVVc1JVRkJSU3hQUVVGUExFVkJRVVVzUzBGQlN5eEZRVUZGTEVOQlFVTXNRMEZCUXp0UlFVTjRSU3hKUVVGSkxFTkJRVU1zZVVKQlFYbENMRU5CUVVNc2NVSkJRWEZDTEVOQlEyaEVMRWRCUVVjc1JVRkJSU3hEUVVGRExGRkJRVkVzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhaUVVGWkxFVkJRVVVzV1VGQldTeERRVUZETEVOQlEycEZMRU5CUVVNN1VVRkRSaXhKUVVGSkxFTkJRVU1zZVVKQlFYbENMRU5CUVVNc2NVSkJRWEZDTEVOQlEyaEVMRWRCUVVjc1JVRkJSU3hEUVVGRExGRkJRVkVzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhWUVVGVkxFVkJRVVVzVlVGQlZTeERRVUZETEVOQlF6ZEVMRU5CUVVNN1VVRkRSaXhKUVVGSkxFTkJRVU1zZVVKQlFYbENMRU5CUVVNc2NVSkJRWEZDTEVOQlEyaEVMRWRCUVVjc1JVRkJSU3hEUVVGRExGRkJRVkVzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhYUVVGWExFVkJRVVVzVjBGQlZ5eERRVUZETEVOQlF5OUVMRU5CUVVNN1NVRkRUaXhEUVVGRE8wbEJSVVE3TzA5QlJVYzdTVUZEU0N4eFFrRkJjVUk3VVVGRGFrSXNTVUZCU1N4RFFVRkRMSGxDUVVGNVFpeERRVUZETEdGQlFXRXNSVUZCUlN4RFFVRkRPMGxCUTI1RUxFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3dyUWtGQkswSXNRMEZCUXl3MFFrRkJjVU03VVVGRGFrVXNTVUZCU1N4RFFVRkRMRFJDUVVFMFFpeEhRVUZITERSQ1FVRTBRaXhEUVVGRE8wbEJRM0pGTEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNDeFpRVUZaTEVOQlFVTXNTMEZCYVVJN1VVRkRNVUlzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUTBGQlF5eFpRVUZaTEVWQlFVVXNTVUZCU1N4TFFVRkxMRU5CUVVNc1RVRkJUU3hMUVVGTExFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhsUVVGbExFVkJRVVVzUlVGQlJUdFpRVU16Unl4UFFVRlBPMU5CUTFZN1VVRkRSQ3hKUVVGSkxFbEJRVWtzUTBGQlF5eGxRVUZsTEVsQlFVa3NTVUZCU1N4RlFVRkZPMWxCUXpsQ0xFMUJRVTBzVjBGQlZ5eEhRVUZITEV0QlFVc3NRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRE5VTXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1IwRkJSeXhKUVVGSkxHVkJRV1VzUTBGRGRFTXNWMEZCVnl4RFFVRkRMRlZCUVZVc1JVRkRkRUlzVjBGQlZ5eERRVUZETEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNc05FSkJRVFJDTEVOQlFVTXNTVUZCU1N4RlFVTTFSQ3hYUVVGWExFTkJRVU1zVDBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXl3MFFrRkJORUlzUTBGQlF5eEhRVUZITEVOQlF6bEVMRU5CUVVNN1dVRkZSaXhOUVVGTkxHdENRVUZyUWl4SFFVTndRaXhKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc2NVSkJRWEZDTEVWQlFXOUNMRU5CUVVNN1dVRkRlRVVzVFVGQlRTeFZRVUZWTEVkQlFVY3NTVUZCU1N4VlFVRlZMRU5CUVVNc1dVRkJXU3hGUVVGRkxGZEJRVmNzUTBGQlF5eERRVUZETzFsQlF6ZEVMR3RDUVVGclFpeERRVUZETEdGQlFXRXNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRaUVVVM1F5eE5RVUZOTEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNORUpCUVRSQ0xFTkJReTlFTEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc1EwRkJReXhGUVVOMFFpeEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVNc1EwRkRla0lzUTBGQlF6dFpRVU5HTEUxQlFVMHNhMEpCUVd0Q0xFZEJRM0JDTEVsQlFVa3NRMEZCUXl3d1FrRkJNRUlzUTBGQlF5eHJRa0ZCYTBJc1EwRkJRenRaUVVOMlJDeHJRa0ZCYTBJc1EwRkJReXhIUVVGSExFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTTdaMEpCUTJoRExHbEZRVUZ6UWp0blFrRkRkRUlzUzBGQlN5eERRVUZETEVOQlFVTTdaMEpCUTFBc1MwRkJTeXhEUVVGRExFTkJRVU03WVVGRFZpeERRVUZETEVOQlFVTTdVMEZEVGp0UlFVTkVMRXRCUVVzc1EwRkJReXhqUVVGakxFVkJRVVVzUTBGQlF6dEpRVU16UWl4RFFVRkRPMGxCUlVRN096dFBRVWRITzBsQlEwZ3NWVUZCVlN4RFFVRkRMRlZCUVhOQ08xRkJRemRDTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNXVUZCV1N4RlFVRkZMRWxCUVVrc1NVRkJTU3hEUVVGRExHVkJRV1VzU1VGQlNTeEpRVUZKTEVWQlFVVTdXVUZETTBVc1QwRkJUenRUUVVOV08xRkJRMFFzVFVGQlRTeHJRa0ZCYTBJc1IwRkRjRUlzU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhEUVVGRExIRkNRVUZ4UWl4RlFVRkZMRU5CUVVNN1VVRkRkRVFzVFVGQlRTeHJRa0ZCYTBJc1IwRkRjRUlzU1VGQlNTeERRVUZETERCQ1FVRXdRaXhEUVVGRExHdENRVUZyUWl4RFFVRkRPMUZCUlhaRUxFdEJRVXNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhWUVVGVkxFTkJRVU1zWTBGQll5eERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRaUVVOMlJDeE5RVUZOTEV0QlFVc3NSMEZCUnl4VlFVRlZMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlF6TkRMRWxCUVVrc1MwRkJTeXhEUVVGRExGVkJRVlVzUzBGQlN5eEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRuUWtGRE9VTXNUVUZCVFN4RFFVRkRMRWRCUTBnc1MwRkJTeXhEUVVGRExFOUJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVTXNORUpCUVRSQ0xFTkJRVU1zU1VGQlNTeERRVUZETzJkQ1FVTXpSQ3hOUVVGTkxFTkJRVU1zUjBGQlJ5eExRVUZMTEVOQlFVTXNUMEZCVHl4SFFVRkhMRWxCUVVrc1EwRkJReXcwUWtGQk5FSXNRMEZCUXl4SFFVRkhMRU5CUVVNN1owSkJRMmhGTEUxQlFVMHNTMEZCU3l4SFFVTlFMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl3MFFrRkJORUlzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRMmhGTEd0Q1FVRnJRaXhEUVVGRExFZEJRVWNzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXp0dlFrRkRPVUlzYVVWQlFYTkNPMjlDUVVOMFFpeExRVUZMTEVOQlFVTXNRMEZCUXp0dlFrRkRVQ3hMUVVGTExFTkJRVU1zUTBGQlF6dHBRa0ZEVml4RFFVRkRMRU5CUVVNN1owSkJSVWdzVFVGQlRTeFZRVUZWTEVkQlFVY3NTVUZCU1N4VlFVRlZMRU5CUVVNc1dVRkJXU3hGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzJkQ1FVTjJSQ3hyUWtGQmEwSXNRMEZCUXl4aFFVRmhMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU03WjBKQlF6ZERMRWxCUVVrc1EwRkJReXhsUVVGbExFZEJRVWNzU1VGQlNTeERRVUZETzJkQ1FVTTFRaXhOUVVGTk8yRkJRMVE3VTBGRFNqdFJRVU5FTEZWQlFWVXNRMEZCUXl4alFVRmpMRVZCUVVVc1EwRkJRenRKUVVOb1F5eERRVUZETzBsQlJVUTdPenRQUVVkSE8wbEJRMGdzVjBGQlZ5eERRVUZETEZWQlFYTkNPMUZCUXpsQ0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zV1VGQldTeEZRVUZGTEVsQlFVa3NTVUZCU1N4RFFVRkRMR1ZCUVdVc1NVRkJTU3hKUVVGSkxFVkJRVVU3V1VGRE0wVXNUMEZCVHp0VFFVTldPMUZCUTBRc1RVRkJUU3hyUWtGQmEwSXNSMEZEY0VJc1NVRkJTU3hEUVVGRExEQkNRVUV3UWl4RFFVRkRMR3RDUVVGclFpeERRVUZETzFGQlJYWkVMRXRCUVVzc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUnl4VlFVRlZMRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlR0WlFVTm9SQ3hOUVVGTkxFdEJRVXNzUjBGQlJ5eFZRVUZWTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRM0JETEVsQlFVa3NTMEZCU3l4RFFVRkRMRlZCUVZVc1MwRkJTeXhKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEVWQlFVVXNSVUZCUlR0blFrRkRPVU1zVFVGQlRTeERRVUZETEVkQlEwZ3NTMEZCU3l4RFFVRkRMRTlCUVU4c1IwRkJSeXhKUVVGSkxFTkJRVU1zTkVKQlFUUkNMRU5CUVVNc1NVRkJTU3hEUVVGRE8yZENRVU16UkN4TlFVRk5MRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVU1zVDBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXl3MFFrRkJORUlzUTBGQlF5eEhRVUZITEVOQlFVTTdaMEpCUTJoRkxFMUJRVTBzUzBGQlN5eEhRVU5RTEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5dzBRa0ZCTkVJc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUTJoRkxFMUJRVTBzUzBGQlN5eEhRVU5RTEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5d3dRa0ZCTUVJc1EwRkRMME1zUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc1EwRkJReXhGUVVNeFFpeERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJReXhEUVVGRExFTkJRemRDTEVOQlFVTTdaMEpCUTA0c2EwSkJRV3RDTEVOQlFVTXNSMEZCUnl4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRE8yOUNRVU5vUXl4TFFVRkxMRU5CUVVNc1EwRkJRenR2UWtGRFVDeExRVUZMTEVOQlFVTXNRMEZCUXp0dlFrRkRVQ3hMUVVGTExFTkJRVU1zUTBGQlF6dHZRa0ZEVUN4TFFVRkxMRU5CUVVNc1EwRkJRenRwUWtGRFZpeERRVUZETEVOQlFVTTdaMEpCUTBnc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMmRDUVVNelFpeEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03WjBKQlF6TkNMRTFCUVUwN1lVRkRWRHRUUVVOS08xRkJRMFFzVlVGQlZTeERRVUZETEdOQlFXTXNSVUZCUlN4RFFVRkRPMGxCUTJoRExFTkJRVU03UTBGRFNqdEJRVVZFT3p0SFFVVkhPMEZCUTBrc1RVRkJUU3hsUVVGbE8wbEJTM2hDT3pzN08wOUJTVWM3U1VGRFNDeFpRVUZaTEVWQlFWVXNSVUZCUlN4RFFVRlRMRVZCUVVVc1EwRkJVenRSUVVONFF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4SFFVRkhMRVZCUVVVc1EwRkJRenRSUVVOaUxFbEJRVWtzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMUZCUTFnc1NVRkJTU3hEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdTVUZEWml4RFFVRkRPME5CUTBvN096czdPenM3T3pzN096czdPenM3T3p0QlEzUk5SQ3hyUkVGQmEwUTdRVUZGVWp0QlFVVXdRanRCUVVkd1JUczdSMEZGUnp0QlFVTkpMRTFCUVUwc2FVSkJRV2xDTzBsQlVURkNPenRQUVVWSE8wbEJRMGdzV1VGQldTd3dRa0ZCYlVRN1VVRk9MMFFzY1VWQlFYRkZPMUZCUXpkRUxHZERRVUV5UWl4SFFVRkhMRWxCUVVrc05FVkJRVzlDTEVWQlFVVXNRMEZCUXp0UlFVMDNSQ3hKUVVGSkxFTkJRVU1zTUVKQlFUQkNMRWRCUVVjc01FSkJRVEJDTEVOQlFVTTdVVUZGTjBRc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4SFFVRkhMRU5CUTNwQ0xFMUJRVTBzUTBGQlF5eDNRa0ZCZDBJN1dVRkRMMElzVFVGQlRTeERRVUZETERKQ1FVRXlRanRaUVVOc1F5eE5RVUZOTEVOQlFVTXNjVUpCUVhGQ0xFTkJReTlDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8xRkJRMllzVFVGQlRTeGhRVUZoTEVkQlFVY3NUVUZCWjBJc1EwRkJRenRSUVVWMlF5eE5RVUZOTEdOQlFXTXNSMEZCUnl4RFFVRkRMRVZCUVZNc1JVRkJSU3hGUVVGRkxFTkJRemRDTEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03VVVGRGFFTXNUVUZCVFN4RFFVRkRMR2RDUVVGblFpeERRVUZETEdOQlFXTXNSVUZCUlN4alFVRmpMRU5CUVVNc1EwRkJRenRSUVVWNFJDeEpRVUZKTEdOQlFXTXNTVUZCU1N4aFFVRmhMRVZCUVVVN1dVRkRha01zVFVGQlRTeHJRa0ZCYTBJc1IwRkJSeXhEUVVGRExFVkJRV2RDTEVWQlFVVXNSVUZCUlN4RFFVTTFReXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03V1VGRGJrTXNUVUZCVFN4eFFrRkJjVUlzUjBGQlJ5eERRVUZETEVWQlFXZENMRVZCUVVVc1JVRkJSU3hEUVVNdlF5eEpRVUZKTEVOQlFVTXNkMEpCUVhkQ0xFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdXVUZEZEVNc1RVRkJUU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMR3RDUVVGclFpeEZRVUZGTEd0Q1FVRnJRaXhEUVVGRExFTkJRVU03V1VGRGFFVXNUVUZCVFN4RFFVRkRMR2RDUVVGblFpeERRVUZETEhGQ1FVRnhRaXhGUVVGRkxIRkNRVUZ4UWl4RFFVRkRMRU5CUVVNN1dVRkRkRVVzU1VGQlNTeERRVUZETERKQ1FVRXlRaXhEUVVGRExIRkNRVUZ4UWl4RFFVTnNSQ3hIUVVGSExFVkJRVVVzUTBGQlF5eE5RVUZOTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zYTBKQlFXdENMRVZCUVVVc2EwSkJRV3RDTEVOQlFVTXNRMEZETTBVc1EwRkJRenRaUVVOR0xFbEJRVWtzUTBGQlF5d3lRa0ZCTWtJc1EwRkJReXh4UWtGQmNVSXNRMEZEYkVRc1IwRkJSeXhGUVVGRkxFTkJRVU1zVFVGQlRTeERRVUZETEcxQ1FVRnRRaXhEUVVGRExIRkNRVUZ4UWl4RlFVRkZMSEZDUVVGeFFpeERRVUZETEVOQlEycEdMRU5CUVVNN1UwRkRURHRoUVVGTkxFbEJRVWtzYjBKQlFXOUNMRWxCUVVrc1lVRkJZU3hGUVVGRk8xbEJRemxETEUxQlFVMHNkMEpCUVhkQ0xFZEJRVWNzUTBGQlF5eEZRVUZuUWl4RlFVRkZMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03V1VGRGRFWXNUVUZCVFN3eVFrRkJNa0lzUjBGQlJ5eERRVUZETEVWQlFXZENMRVZCUVVVc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eDNRa0ZCZDBJc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dFpRVU0xUml4TlFVRk5MRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNkMEpCUVhkQ0xFVkJRVVVzZDBKQlFYZENMRU5CUVVNc1EwRkJRenRaUVVNMVJTeE5RVUZOTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zTWtKQlFUSkNMRVZCUVVVc01rSkJRVEpDTEVOQlFVTXNRMEZCUXp0WlFVTnNSaXhKUVVGSkxFTkJRVU1zTWtKQlFUSkNMRU5CUVVNc2NVSkJRWEZDTEVOQlEyeEVMRWRCUVVjc1JVRkJSU3hEUVVGRExFMUJRVTBzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXgzUWtGQmQwSXNSVUZCUlN4M1FrRkJkMElzUTBGQlF5eERRVU4yUml4RFFVRkRPMWxCUTBZc1NVRkJTU3hEUVVGRExESkNRVUV5UWl4RFFVRkRMSEZDUVVGeFFpeERRVU5zUkN4SFFVRkhMRVZCUVVVc1EwRkJReXhOUVVGTkxFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc01rSkJRVEpDTEVWQlFVVXNNa0pCUVRKQ0xFTkJRVU1zUTBGRE4wWXNRMEZCUXp0VFFVTk1PMUZCUTBRc1NVRkJTU3hEUVVGRExGZEJRVmNzUjBGQlJ5eEZRVUZGTEVOQlFVTTdVVUZEZEVJc1NVRkJTU3hUUVVGVExFTkJRVU1zVjBGQlZ5eEZRVUZGTzFsQlEzWkNMRXRCUVVzc1RVRkJUU3hQUVVGUExFbEJRVWtzVTBGQlV5eERRVUZETEZkQlFWY3NSVUZCUlN4RlFVRkZPMmRDUVVNelF5eEpRVUZKTEU5QlFVOHNSVUZCUlR0dlFrRkRWQ3hKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1NVRkJTU3haUVVGWkxFTkJRVU1zYTBKQlFXdENMRVZCUVVVc1JVRkJSU3hQUVVGUExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdhVUpCUTJwR08yRkJRMG83VTBGRFNqdEpRVU5NTEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxIVkNRVUYxUWp0UlFVTnVRaXhKUVVGSkxFTkJRVU1zTWtKQlFUSkNMRU5CUVVNc1lVRkJZU3hGUVVGRkxFTkJRVU03VVVGRGFrUXNTMEZCU1N4TlFVRk5MRlZCUVZVc1NVRkJTU3hKUVVGSkxFTkJRVU1zVjBGQlZ5eEZRVUZGTzFsQlEzUkRMRWxCUVVjc1ZVRkJWU3hEUVVGRExFVkJRVVVzUzBGQlN5eFRRVUZUTEVWQlFVVTdaMEpCUXpWQ0xFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhWUVVGVkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdZVUZETjBNN1UwRkRTanRSUVVORUxFbEJRVWtzUTBGQlF5eFhRVUZYTEVkQlFVY3NSVUZCUlN4RFFVRkRPMUZCUTNSQ0xFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1IwRkJSeXhIUVVGSExFVkJRVVVzUjBGQlV5eERRVUZETEVOQlFVTTdVVUZETVVNc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4SFFVRkhMRWRCUVVjc1JVRkJSU3hIUVVGVExFTkJRVU1zUTBGQlF6dEpRVU5xUkN4RFFVRkRPMGxCUlVRN096dFBRVWRITzBsQlEwZ3NjVUpCUVhGQ0xFTkJRVU1zV1VGQk1FSTdVVUZETlVNc2MwUkJRVlVzUTBGQlF5eG5SVUZCYjBJc1JVRkJSU3hGUVVGRkxIbENRVUY1UWl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMnBGTEUxQlFVMHNUMEZCVHl4SFFVRkhMRmxCUVZrc1EwRkJReXhQUVVGUExFTkJRVU03VVVGRmNrTXNUVUZCVFN4SlFVRkpMRWRCUVdVN1dVRkRja0lzV1VGQldTeEZRVUZGTEU5QlFVODdXVUZEY2tJc1UwRkJVeXhGUVVGRkxFOUJRVTg3V1VGRGJFSXNSVUZCUlN4RlFVRkZMRk5CUVZNN1UwRkRhRUlzUTBGQlF6dFJRVVZHTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzFGQlF6VkNMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRmxCUVZrc1IwRkJSeXhQUVVGUExFTkJRVU03VVVGRGRrUXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNVMEZCVXl4SFFVRkhMRTlCUVU4c1EwRkJRenRSUVVOd1JDeHpSRUZCVlN4RFFVTk9MR2RGUVVGdlFpeEZRVUZGTEVWQlEzUkNMRmRCUVZjc1IwRkJSeXhQUVVGUExFTkJRVU1zUlVGQlJTeEhRVUZITEZsQlFWa3NSVUZEZGtNc1EwRkJReXhEUVVOS0xFTkJRVU03VVVGRFJpeE5RVUZOTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmxCUVZrc1JVRkJSU3hEUVVGRExFTkJRVU03VVVGRGVFUXNTVUZCU1N4RFFVRkRMR3RDUVVGclFpeEZRVUZGTEVOQlFVTTdTVUZET1VJc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMSGRDUVVGM1FpeERRVUZETEZsQlFUQkNPMUZCUXk5RExITkVRVUZWTEVOQlFVTXNaMFZCUVc5Q0xFVkJRVVVzUlVGQlJTdzBRa0ZCTkVJc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU53UlN4elJFRkJWU3hEUVVOT0xHZEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xGZEJRVmNzUjBGQlJ5eFpRVUZaTEVOQlFVTXNUMEZCVHl4RFFVRkRMRVZCUVVVc1IwRkJSeXhsUVVGbExFVkJRM1pFTEVOQlFVTXNRMEZEU2l4RFFVRkRPMUZCUTBZc1RVRkJUU3hwUWtGQmFVSXNSMEZCUnl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExGbEJRVmtzUTBGQlF5eFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1VVRkRka1VzVDBGQlR5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRmxCUVZrc1EwRkJReXhQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdVVUZEY0VRc1NVRkJTU3hEUVVGRExGZEJRVmNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRTFCUVUwc1EwRkRkRU1zUTBGQlF5eFZRVUZWTEVWQlFVVXNSVUZCUlN4RFFVRkRMRlZCUVZVc1MwRkJTeXhUUVVGVExFTkJRek5ETEVOQlFVTTdVVUZEUml4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdTVUZEY2tRc1EwRkJRenRKUVVWRU96dFBRVVZITzBsQlEwZ3NXVUZCV1R0UlFVTlNMRTFCUVUwc1VVRkJVU3hIUVVGSExGTkJRVk1zUTBGQlF5eFhRVUZYTzFsQlEyeERMRU5CUVVNc1EwRkJReXhUUVVGVExFTkJRVU1zVjBGQlZ5eEZRVUZGTzFsQlEzcENMRU5CUVVNc1EwRkJReXhUUVVGVExFTkJRVU1zYVVKQlFXbENPMmRDUVVNM1FpeERRVUZETEVOQlFVTXNVMEZCVXl4RFFVRkRMR2xDUVVGcFFpeEZRVUZGTzJkQ1FVTXZRaXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETzFGQlExUXNTMEZCU3l4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITEZGQlFWRXNRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVU3V1VGRGRFTXNTVUZCU1N4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzc1NVRkJTU3hKUVVGSkxFTkJRVU1zVjBGQlZ5eEZRVUZGTzJkQ1FVTjBSQ3hKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eFpRVUZaTEVkQlFVY3NVVUZCVVN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8yRkJRMnhGTzFOQlEwbzdTVUZEVEN4RFFVRkRPMGxCUlVRN08wOUJSVWM3U1VGRFNDeFpRVUZaTzFGQlExSXNTVUZCU1N4RFFVRkRMRmxCUVZrc1JVRkJSU3hEUVVGRE8xRkJRM0JDTEUxQlFVMHNhMEpCUVd0Q0xFZEJRM0JDTEVsQlFVa3NRMEZCUXl3d1FrRkJNRUlzUTBGQlF5eHJRa0ZCYTBJc1EwRkJRenRSUVVWMlJDeHZSa0ZCYjBZN1VVRkRjRVlzUzBGQlN5eE5RVUZOTEZWQlFWVXNTVUZCU1N4SlFVRkpMRU5CUVVNc1YwRkJWeXhGUVVGRk8xbEJRM1pETERSSFFVRTBSenRaUVVNMVJ5eE5RVUZOTEdWQlFXVXNSMEZCUnl4RFFVRkRMRlZCUVZVc1EwRkJReXhGUVVGRkxFdEJRVXNzVTBGQlV5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhWUVVGVkxFTkJRVU1zUlVGQlJTeERRVUZETzFsQlF6ZEhMRTFCUVUwc1dVRkJXU3hIUVVGSExGVkJRVlVzUTBGQlF5eFpRVUZaTEVOQlFVTTdXVUZETjBNc1MwRkJTeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRlZCUVZVc1EwRkJReXhaUVVGWkxFTkJRVU1zVDBGQlR5eERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRuUWtGRE4wUXNUVUZCVFN4aFFVRmhMRWRCUVVjc1ZVRkJWU3hEUVVGRExGbEJRVmtzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRM3BFTEUxQlFVMHNZMEZCWXl4SFFVRkhMRlZCUVZVc1EwRkJReXhUUVVGVExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVOMlJDeEpRVUZKTEdGQlFXRXNRMEZCUXl4UFFVRlBMRVZCUVVVN2IwSkJRM1pDTEZGQlFWRTdiMEpCUTFJc1NVRkJTU3hEUVVGRExFbEJRVWtzWVVGQllTeERRVUZETEZkQlFWY3NSVUZCUlR0M1FrRkRhRU1zWjBWQlFXZEZPM2RDUVVOb1JTeHJRa0ZCYTBJc1EwRkJReXhIUVVGSExFTkJRVU1zWlVGQlpTeERRVUZETEVOQlFVTTdORUpCUTNCRExHVkJRV1U3TkVKQlEyWXNRMEZCUXpzMFFrRkRSQ3hoUVVGaExFTkJRVU1zUzBGQlN6dDVRa0ZEZEVJc1EwRkJReXhEUVVGRE8zRkNRVU5PTzNsQ1FVRk5MRWxCUVVrc1EwRkJReXhKUVVGSkxHRkJRV0VzUTBGQlF5eFpRVUZaTEVWQlFVVTdkMEpCUTNoRExHbEZRVUZwUlR0M1FrRkRha1VzYTBKQlFXdENMRU5CUVVNc1IwRkJSeXhEUVVGRExHVkJRV1VzUTBGQlF5eERRVUZET3pSQ1FVTndReXhsUVVGbE96UkNRVU5tTEVOQlFVTTdORUpCUTBRc1lVRkJZU3hEUVVGRExFdEJRVXM3ZVVKQlEzUkNMRU5CUVVNc1EwRkJRenR4UWtGRFRqdDVRa0ZCVFR0M1FrRkRTQ3hyUWtGQmEwSXNRMEZCUXl4SFFVRkhMRU5CUVVNc2MwSkJRWE5DTEVOQlFVTXNRMEZCUXpzMFFrRkRNME1zWlVGQlpUczBRa0ZEWml4RFFVRkRPelJDUVVORUxHTkJRV01zUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dDVRa0ZEYWtNc1EwRkJReXhEUVVGRE8zRkNRVU5PTzJsQ1FVTktPM0ZDUVVGTkxFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNUMEZCVHl4SlFVRkpMR05CUVdNc1EwRkJReXhQUVVGUExFVkJRVVU3YjBKQlEzcEVMRlZCUVZVN2IwSkJRMVlzU1VGQlNTeERRVUZETEVsQlFVa3NZVUZCWVN4RFFVRkRMRmRCUVZjc1JVRkJSVHQzUWtGRGFFTXNaMFZCUVdkRk8zZENRVU5vUlN4clFrRkJhMElzUTBGQlF5eEhRVUZITEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVNN05FSkJRM0JETEdWQlFXVTdORUpCUTJZc1EwRkJRenMwUWtGRFJDeERRVUZETzNsQ1FVTktMRU5CUVVNc1EwRkJRenR4UWtGRFRqdDVRa0ZCVFN4SlFVRkpMRU5CUVVNc1NVRkJTU3hoUVVGaExFTkJRVU1zV1VGQldTeEZRVUZGTzNkQ1FVTjRReXhwUlVGQmFVVTdkMEpCUTJwRkxHdENRVUZyUWl4RFFVRkRMRWRCUVVjc1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlF6czBRa0ZEY0VNc1pVRkJaVHMwUWtGRFppeERRVUZET3pSQ1FVTkVMRU5CUVVNN2VVSkJRMG9zUTBGQlF5eERRVUZETzNGQ1FVTk9PM2xDUVVGTk8zZENRVU5JTEd0Q1FVRnJRaXhEUVVGRExFZEJRVWNzUTBGQlF5eDFRa0ZCZFVJc1EwRkJReXhEUVVGRE96UkNRVU0xUXl4bFFVRmxPelJDUVVObUxFTkJRVU03TkVKQlEwUXNRMEZCUXp0NVFrRkRTaXhEUVVGRExFTkJRVU03Y1VKQlEwNDdhVUpCUTBvN1lVRkRTanRaUVVORUxEQkdRVUV3Ump0WlFVTXhSaXhMUVVGTExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1dVRkJXU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSVHRuUWtGRGJFUXNiME5CUVc5RE8yZENRVU53UXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhWUVVGVkxFTkJRVU1zV1VGQldTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkZkRVFzYVVOQlFXbERPMmRDUVVOcVF5dzJTa0ZCTmtvN1owSkJRemRLTEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1ZVRkJWU3hEUVVGRExGbEJRVmtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVVelJDeDVSMEZCZVVjN1owSkJRM3BITEd0Q1FVRnJRaXhEUVVGRExFZEJRVWNzUTBGQlF5eGxRVUZsTEVOQlFVTXNRMEZCUXp0dlFrRkRjRU1zWlVGQlpUdHZRa0ZEWml4RFFVRkRMRWRCUVVjc1EwRkJRenR2UWtGRFRDeERRVUZETzJsQ1FVTktMRU5CUVVNc1EwRkJReXhEUVVGRExHOURRVUZ2UXp0blFrRkRlRU1zYTBKQlFXdENMRU5CUVVNc1IwRkJSeXhEUVVGRExHVkJRV1VzUTBGQlF5eERRVUZETzI5Q1FVTndReXhsUVVGbE8yOUNRVU5tTEVOQlFVTXNSMEZCUnl4RFFVRkRPMjlDUVVOTUxFTkJRVU03YVVKQlEwb3NRMEZCUXl4RFFVRkRMRU5CUVVNc2VVZEJRWGxITzJGQlEyaElPMWxCUTBRc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eGxRVUZsTEVOQlFVTXNRMEZCUXl4VFFVRlRMRWRCUVVjc1dVRkJXU3hEUVVGRE8xTkJRemxFTzFGQlEwUXNTVUZCU1N4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVWQlFVVTdXVUZETjBJc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eFpRVUZaTEVWQlFVVXNRMEZCUXl4RFFVRkRPMU5CUTNwRU8wbEJRMHdzUTBGQlF6dEpRVVZFTEhsQ1FVRjVRaXhEUVVGRExGTkJRV2xDTzFGQlEzWkRMRXRCUVVrc1RVRkJUU3hWUVVGVkxFbEJRVWtzU1VGQlNTeERRVUZETEZkQlFWY3NSVUZCUlR0WlFVTjBReXhKUVVGSExGVkJRVlVzUTBGQlF5eEZRVUZGTEV0QlFVc3NVMEZCVXl4RlFVRkZPMmRDUVVNMVFpeFZRVUZWTEVOQlFVTXNSVUZCUlN4SFFVRkhMRk5CUVZNc1EwRkJRenRuUWtGRE1VSXNUVUZCVFR0aFFVTlVPMU5CUTBvN1NVRkRUQ3hEUVVGRE8wbEJSVVE3TzA5QlJVYzdTVUZEU0N4clFrRkJhMEk3VVVGRFpDeHZRMEZCYjBNN1NVRkRlRU1zUTBGQlF6dEpRVVZFT3p0UFFVVkhPMGxCUTBnc05rUkJRVFpFTzBsQlF6ZEVMSEZDUVVGeFFpeERRVUZETEdGQlFYRkNPMUZCUTNaRExHOURRVUZ2UXp0SlFVTjRReXhEUVVGRE8wbEJSVVFzWTBGQll5eERRVUZETEVWQlFWTTdVVUZEY0VJc01FWkJRVEJHTzFGQlF6RkdMR05CUVdNN1VVRkRaQ3hMUVVGSkxFMUJRVTBzVlVGQlZTeEpRVUZKTEVsQlFVa3NRMEZCUXl4WFFVRlhMRVZCUVVVN1dVRkRkRU1zU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExGVkJRVlVzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0VFFVTTNRenRKUVVOTUxFTkJRVU03UTBGRFNqdEJRV3RDUkRzN1IwRkZSenRCUVVOSUxFbEJRVmtzWVVGMVFsZzdRVUYyUWtRc1YwRkJXU3hoUVVGaE8wbEJRM0pDTEhsR1FVRTBRanRKUVVNMVFpeDFSa0ZCTWtJN1NVRkRNMElzY1VaQlFUQkNPMGxCUXpGQ0xHMUdRVUY1UWp0SlFVTjZRaXhwUlVGQlowSTdTVUZEYUVJc2JVVkJRV2xDTzBsQlEycENMQ3RFUVVGbE8wbEJRMllzYVVWQlFXZENPMGxCUTJoQ0xHbEZRVUZuUWp0SlFVTm9RaXh4UlVGQmEwSTdTVUZEYkVJc2QwVkJRVzlDTzBsQlEzQkNMREJGUVVGeFFqdEpRVU55UWl4clJrRkJlVUk3U1VGRGVrSXNkMFpCUVRSQ08wbEJRelZDTEc5R1FVRXdRanRKUVVNeFFpeHpSa0ZCTWtJN1NVRkRNMElzYTBWQlFXbENPMGxCUTJwQ0xFOUJRVTg3U1VGRFVDd3JSVUZCZFVJN1NVRkRka0lzTWtWQlFYRkNPMGxCUTNKQ0xHbEdRVUYzUWp0SlFVTjRRaXcyUlVGQmMwSTdRVUZETVVJc1EwRkJReXhGUVhaQ1Z5eGhRVUZoTEV0QlFXSXNZVUZCWVN4UlFYVkNlRUk3T3pzN096czdPenM3T3pzN096czdRVU42VkVRc2EwUkJRV3RFTzBGQlIxSTdRVUZITVVNN08wZEJSVWM3UVVGRFNTeE5RVUZOTEcxQ1FVRnRRanRKUVVjMVFqczdUMEZGUnp0SlFVTklMRmxCUVZrc1pVRkJaME03VVVGRGVFTXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1IwRkJSeXhsUVVGbExFTkJRVU03U1VGRE0wTXNRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGdzY1VKQlFYRkNPMUZCUTJwQ0xDdERRVUVyUXp0SlFVTnVSQ3hEUVVGRE8wbEJSVVE3T3p0UFFVZEhPMGxCUTBnc2RVSkJRWFZDTEVOQlFVTXNWVUZCYzBJN1VVRkRNVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNXVUZCV1N4RlFVRkZMRVZCUVVVN1dVRkRNMFFzVDBGQlR6dFRRVU5XTzFGQlEwUXNjMFJCUVZVc1EwRkJReXhuUlVGQmIwSXNSVUZCUlN4RlFVRkZMRmRCUVZjc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU51UkN4TlFVRk5MRXRCUVVzc1IwRkRVQ3hKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEcxQ1FVRnRRaXhEUVVGRExEUkNRVUUwUWl4RFFVTnFSU3hWUVVGVkxFTkJRVU1zVDBGQlR5eEZRVU5zUWl4VlFVRlZMRU5CUVVNc1QwRkJUeXhEUVVOeVFpeERRVUZETzFGQlEwNHNUVUZCVFN4TFFVRkxMRWRCUTFBc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXd3UWtGQk1FSXNRMEZETDBRc1ZVRkJWU3hEUVVGRExGTkJRVk1zUlVGRGNFSXNWVUZCVlN4RFFVRkRMRk5CUVZNc1EwRkRka0lzUTBGQlF6dFJRVU5PTEUxQlFVMHNhMEpCUVd0Q0xFZEJRM0JDTEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc01FSkJRVEJDTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU03VVVGRGRrVXNhMEpCUVd0Q0xFTkJRVU1zUjBGQlJ5eERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRPMWxCUTJoRExFdEJRVXNzUTBGQlF5eERRVUZETzFsQlExQXNTMEZCU3l4RFFVRkRMRU5CUVVNN1dVRkRVQ3hMUVVGTExFTkJRVU1zUTBGQlF6dFpRVU5RTEV0QlFVc3NRMEZCUXl4RFFVRkRPMU5CUTFZc1EwRkJReXhEUVVGRE8xRkJRMGdzVlVGQlZTeERRVUZETEdOQlFXTXNSVUZCUlN4RFFVRkRPMGxCUTJoRExFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3hsUVVGbExFTkJRVU1zVlVGQmMwSTdVVUZEYkVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zV1VGQldTeEZRVUZGTEVWQlFVVTdXVUZETTBRc1QwRkJUenRUUVVOV08xRkJRMFFzYzBSQlFWVXNRMEZCUXl4blJVRkJiMElzUlVGQlJTeEZRVUZGTEdOQlFXTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOMFJDeE5RVUZOTEV0QlFVc3NSMEZEVUN4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRFJDUVVFMFFpeERRVU5xUlN4VlFVRlZMRU5CUVVNc1QwRkJUeXhGUVVOc1FpeFZRVUZWTEVOQlFVTXNUMEZCVHl4RFFVTnlRaXhEUVVGRE8xRkJRMDRzVFVGQlRTeHJRa0ZCYTBJc1IwRkRjRUlzU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl3d1FrRkJNRUlzUTBGQlF5eHJRa0ZCYTBJc1EwRkJRenRSUVVOMlJTeHJRa0ZCYTBJc1EwRkJReXhIUVVGSExFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTTdXVUZEYUVNc1ZVRkJWU3hEUVVGRExFMUJRVTA3V1VGRGFrSXNTMEZCU3l4RFFVRkRMRU5CUVVNN1dVRkRVQ3hMUVVGTExFTkJRVU1zUTBGQlF6dFRRVU5XTEVOQlFVTXNRMEZCUXp0UlFVTklMRlZCUVZVc1EwRkJReXhqUVVGakxFVkJRVVVzUTBGQlF6dEpRVU5vUXl4RFFVRkRPMGxCUlVRN096dFBRVWRITzBsQlEwZ3NZVUZCWVN4RFFVRkRMRlZCUVhOQ08xRkJRMmhETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRmxCUVZrc1JVRkJSU3hGUVVGRk8xbEJRek5FTEU5QlFVODdVMEZEVmp0UlFVTkVMSE5FUVVGVkxFTkJRVU1zWjBWQlFXOUNMRVZCUVVVc1JVRkJSU3haUVVGWkxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEY0VRc1RVRkJUU3hMUVVGTExFZEJRMUFzU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4dFFrRkJiVUlzUTBGQlF5dzBRa0ZCTkVJc1EwRkRha1VzVlVGQlZTeERRVUZETEU5QlFVOHNSVUZEYkVJc1ZVRkJWU3hEUVVGRExFOUJRVThzUTBGRGNrSXNRMEZCUXp0UlFVTk9MRTFCUVUwc2EwSkJRV3RDTEVkQlEzQkNMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zTUVKQlFUQkNMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTTdVVUZEZGtVc2EwSkJRV3RDTEVOQlFVTXNSMEZCUnl4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRE8xbEJRemxDTEZWQlFWVXNRMEZCUXl4TlFVRk5PMWxCUTJwQ0xFdEJRVXNzUTBGQlF5eERRVUZETzFsQlExQXNTMEZCU3l4RFFVRkRMRU5CUVVNN1UwRkRWaXhEUVVGRExFTkJRVU03VVVGRFNDeFZRVUZWTEVOQlFVTXNZMEZCWXl4RlFVRkZMRU5CUVVNN1NVRkRhRU1zUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxHbENRVUZwUWl4RFFVRkRMRlZCUVhOQ08xRkJRM0JETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRmxCUVZrc1JVRkJSU3hGUVVGRk8xbEJRek5FTEU5QlFVODdVMEZEVmp0UlFVTkVMRlZCUVZVc1EwRkJReXhqUVVGakxFVkJRVVVzUTBGQlF6dEpRVU5vUXl4RFFVRkRPMGxCUlVRN096dFBRVWRITzBsQlEwZ3NaMEpCUVdkQ0xFTkJRVU1zVlVGQmMwSTdVVUZEYmtNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zV1VGQldTeEZRVUZGTEVWQlFVVTdXVUZETTBRc1QwRkJUenRUUVVOV08xRkJRMFFzVFVGQlRTeExRVUZMTEVkQlExQXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl3MFFrRkJORUlzUTBGRGFrVXNWVUZCVlN4RFFVRkRMRTlCUVU4c1JVRkRiRUlzVlVGQlZTeERRVUZETEU5QlFVOHNRMEZEY2tJc1EwRkJRenRSUVVOT0xFMUJRVTBzYTBKQlFXdENMRWRCUTNCQ0xFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTXNNRUpCUVRCQ0xFTkJRVU1zYTBKQlFXdENMRU5CUVVNN1VVRkRka1VzYTBKQlFXdENMRU5CUVVNc1IwRkJSeXhEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETzFsQlEycERMRlZCUVZVc1EwRkJReXhWUVVGVk8xbEJRM0pDTEV0QlFVc3NRMEZCUXl4RFFVRkRPMWxCUTFBc1MwRkJTeXhEUVVGRExFTkJRVU03VTBGRFZpeERRVUZETEVOQlFVTTdVVUZEU0N4VlFVRlZMRU5CUVVNc1kwRkJZeXhGUVVGRkxFTkJRVU03U1VGRGFFTXNRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5JTEdsQ1FVRnBRaXhEUVVGRExGVkJRWE5DTzFGQlEzQkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEc5Q1FVRnZRaXhEUVVGRExGbEJRVmtzUlVGQlJTeEZRVUZGTzFsQlF6TkVMRTlCUVU4N1UwRkRWanRSUVVORUxFMUJRVTBzUzBGQlN5eEhRVU5RTEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNORUpCUVRSQ0xFTkJRMnBGTEZWQlFWVXNRMEZCUXl4UFFVRlBMRVZCUTJ4Q0xGVkJRVlVzUTBGQlF5eFBRVUZQTEVOQlEzSkNMRU5CUVVNN1VVRkRUaXhOUVVGTkxHdENRVUZyUWl4SFFVTndRaXhKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETERCQ1FVRXdRaXhEUVVGRExHdENRVUZyUWl4RFFVRkRPMUZCUTNaRkxHdENRVUZyUWl4RFFVRkRMRWRCUVVjc1EwRkJReXhoUVVGaExFTkJRVU1zUTBGQlF6dFpRVU5zUXl4VlFVRlZMRU5CUVVNc1RVRkJUVHRaUVVOcVFpeExRVUZMTEVOQlFVTXNRMEZCUXp0WlFVTlFMRXRCUVVzc1EwRkJReXhEUVVGRE8xTkJRMVlzUTBGQlF5eERRVUZETzBsQlExQXNRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5JTEhWQ1FVRjFRaXhEUVVGRExGVkJRWE5DTzFGQlF6RkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEc5Q1FVRnZRaXhEUVVGRExGbEJRVmtzUlVGQlJTeEZRVUZGTzFsQlF6TkVMRTlCUVU4N1UwRkRWanRSUVVORUxITkVRVUZWTEVOQlFVTXNaMFZCUVc5Q0xFVkJRVVVzUlVGQlJTeGxRVUZsTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRka1FzU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4cFFrRkJhVUlzUTBGRGJFTXNWVUZCVlN4RFFVRkRMRTlCUVU4c1JVRkRiRUlzVlVGQlZTeERRVUZETEU5QlFVOHNSVUZEYkVJc1ZVRkJWU3hEUVVGRExFOUJRVThzUTBGRGNrSXNRMEZCUXp0SlFVTk9MRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU0N4NVFrRkJlVUlzUTBGQlF5eFZRVUZ6UWp0UlFVTTFReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4dlFrRkJiMElzUTBGQlF5eFpRVUZaTEVWQlFVVXNSVUZCUlR0WlFVTXpSQ3hQUVVGUE8xTkJRMVk3VVVGRFJDeHpSRUZCVlN4RFFVRkRMR2RGUVVGdlFpeEZRVUZGTEVWQlFVVXNhVUpCUVdsQ0xFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEZWtRc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eHRRa0ZCYlVJc1EwRkRjRU1zVlVGQlZTeERRVUZETEU5QlFVOHNSVUZEYkVJc1ZVRkJWU3hEUVVGRExFOUJRVThzUlVGRGJFSXNWVUZCVlN4RFFVRkRMRTlCUVU4c1EwRkRja0lzUTBGQlF6dEpRVU5PTEVOQlFVTTdRMEZEU2pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU12VEVRc2EwUkJRV3RFTzBGQlJWVTdRVUZEUmp0QlFVTk9PMEZCUTBFN1FVRkRTVHRCUVVOTE8wRkJRMjVDTzBGQlN6RkRPenRIUVVWSE8wRkJRMGtzVFVGQlRTeHRRa0ZCYlVJN1NVRk5OVUk3T3pzN1QwRkpSenRKUVVOSUxGbEJRMGtzTUVKQlFXMUVMRVZCUTI1RUxHOUNRVUZwUXl4RlFVTnFReXh0UWtGQmQwTTdVVUZXTlVNc1pVRkJWU3hIUVVGbExFbEJRVWtzVlVGQlZTeEZRVUZGTEVOQlFVTTdVVUZaZEVNc1NVRkJTU3hEUVVGRExEQkNRVUV3UWl4SFFVRkhMREJDUVVFd1FpeERRVUZETzFGQlF6ZEVMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNSMEZCUnl4dlFrRkJiMElzUTBGQlF6dFJRVU5xUkN4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVkQlFVY3NiVUpCUVcxQ0xFTkJRVU03U1VGRGJrUXNRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGdzWjBKQlFXZENMRU5CUVVNc1RVRkJZenRSUVVNelFpeHpSRUZCVlN4RFFVRkRMR2RGUVVGdlFpeEZRVUZGTEVWQlFVVXNNRUpCUVRCQ0xFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEYkVVc1RVRkJUU3hyUWtGQmEwSXNSMEZCUnl4SlFVRkpMRzFGUVVGclFpeERRVU0zUXl4SlFVRkpMRU5CUVVNc01FSkJRVEJDTEVWQlF5OUNMRTFCUVUwc1JVRkRUaXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVU5zUWl4RFFVRkRPMUZCUTBZc2EwSkJRV3RDTEVOQlFVTXNjMEpCUVhOQ0xFVkJRVVVzUTBGQlF6dFJRVU0xUXl4UFFVRlBMR3RDUVVGclFpeERRVUZETzBsQlF6bENMRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU0N4aFFVRmhMRU5CUVVNc1lVRkJaME03VVVGRE1VTXNjMFJCUVZVc1EwRkJReXhuUlVGQmIwSXNSVUZCUlN4RlFVRkZMSFZDUVVGMVFpeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUXk5RUxFMUJRVTBzWlVGQlpTeEhRVUZITEVsQlFVa3NOa1JCUVdVc1EwRkRka01zU1VGQlNTeERRVUZETERCQ1FVRXdRaXhGUVVNdlFpeEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFVkJRM3BDTEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUlVGRGVFSXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkRiRUlzUTBGQlF6dFJRVVZHTEZGQlFWRXNZVUZCWVN4RlFVRkZPMWxCUTI1Q0xFdEJRVXNzZVVWQlFUWkNPMmRDUVVNNVFpeGxRVUZsTEVOQlFVTXNlVUpCUVhsQ0xFTkJRVU1zWlVGQlpTeERRVUZETEVOQlFVTTdaMEpCUXpORUxFMUJRVTA3V1VGRFZpeExRVUZMTERKRlFVRXJRanRuUWtGRGFFTXNaVUZCWlN4RFFVRkRMREpDUVVFeVFpeERRVUZETEdWQlFXVXNRMEZCUXl4RFFVRkRPMmRDUVVNM1JDeE5RVUZOTzFsQlExWTdaMEpCUTBrc2RVUkJRVmNzUTBGRFVDeG5SVUZCYjBJc1JVRkJSU3hGUVVOMFFpd3JSRUZCSzBRc1EwRkRiRVVzUTBGQlF6dG5Ra0ZEUml4bFFVRmxMRU5CUVVNc2VVSkJRWGxDTEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVNN1owSkJRek5FTEUxQlFVMDdVMEZEWWp0UlFVVkVMRTlCUVU4c1pVRkJaU3hEUVVGRE8wbEJRek5DTEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNDeGhRVUZoTEVOQlExUXNZMEZCZFVJc1JVRkRka0lzTkVKQlFYRkRPMUZCUlhKRExITkVRVUZWTEVOQlFVTXNaMFZCUVc5Q0xFVkJRVVVzUlVGQlJTeHRRa0ZCYlVJc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU16UkN4SlFVRkpMR05CUVdNc1JVRkJSVHRaUVVOb1FpeE5RVUZOTEcxQ1FVRnRRaXhIUVVGSExFbEJRVWtzY1VWQlFXMUNMRU5CUXk5RExFbEJRVWtzUTBGQlF5d3dRa0ZCTUVJc1JVRkRMMElzU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhGUVVONlFpeEpRVUZKTEVOQlFVTXNiVUpCUVcxQ0xFTkJRek5DTEVOQlFVTTdXVUZEUml4dFFrRkJiVUlzUTBGQlF5d3JRa0ZCSzBJc1EwRkRMME1zTkVKQlFUUkNMRU5CUXk5Q0xFTkJRVU03V1VGRFJpeFBRVUZQTEcxQ1FVRnRRaXhEUVVGRE8xTkJRemxDTzJGQlFVMDdXVUZEU0N4UFFVRlBMRWxCUVVrc05rUkJRV1VzUTBGRGRFSXNTVUZCU1N4RFFVRkRMREJDUVVFd1FpeEZRVU12UWl4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVWQlEzcENMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNRMEZETTBJc1EwRkJRenRUUVVOTU8wbEJRMHdzUTBGQlF6dEpRVVZFT3p0UFFVVkhPMGxCUTBnc1pVRkJaVHRSUVVOWUxITkVRVUZWTEVOQlFVTXNaMFZCUVc5Q0xFVkJRVVVzUlVGQlJTeHRRa0ZCYlVJc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU16UkN4TlFVRk5MR2xDUVVGcFFpeEhRVUZITEVsQlFVa3NhVVZCUVdsQ0xFTkJRek5ETEVsQlFVa3NRMEZCUXl3d1FrRkJNRUlzUTBGRGJFTXNRMEZCUXp0UlFVTkdMRTlCUVU4c2FVSkJRV2xDTEVOQlFVTTdTVUZETjBJc1EwRkJRenREUVVOS08wRkJSVVE3TzBkQlJVYzdRVUZEU1N4TlFVRk5MRlZCUVZVN1NVRkZia0k3VVVGRVFTeGxRVUZWTEVkQlFXdENMRVZCUVVVc1EwRkJRenRSUVVVelFpeEpRVUZKTEVOQlFVTXNWVUZCVlN4SFFVRkhMRVZCUVVVc1EwRkJRenRKUVVONlFpeERRVUZETzBsQlJVUTdPenRQUVVkSE8wbEJRMGdzWVVGQllUdFJRVU5VTEU5QlFVOHNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJRenRKUVVNelFpeERRVUZETzBOQlEwbzdPenM3T3pzN096czdPenM3T3pzN096czdRVU16U1VRc2EwUkJRV3RFTzBGQlJVVTdRVUZEVmp0QlFVZFBPMEZCUTIxQ08wRkJUWEJGT3p0SFFVVkhPMEZCUTBrc1RVRkJUU3hyUWtGQmEwSTdTVUZ4U0ROQ096czdPMDlCU1VjN1NVRkRTQ3haUVVOSkxEQkNRVUZ0UkN4RlFVTnVSQ3hOUVVGakxFVkJRMlFzYTBKQlFUaENPMUZCZUVoc1F5eHhSVUZCY1VVN1VVRkROMFFzYVVOQlFUUkNMRWRCUVVjc1NVRkJTU3cwUlVGQmIwSXNSVUZCUlN4RFFVRkRPMUZCUld4Rk96czdPenRYUVV0SE8xRkJRMGdzYTBKQlFXRXNSMEZCYlVJN1dVRkROVUlzVFVGQlRTeEZRVUZGTEVWQlFVVTdXVUZEVml4TlFVRk5MRVZCUVVVc1JVRkJSVHRaUVVOV0xFMUJRVTBzUlVGQlJTeEZRVUZGTzFsQlExWXNUVUZCVFN4RlFVRkZMRVZCUVVVN1dVRkRWaXhOUVVGTkxFVkJRVVVzUlVGQlJUdFpRVU5XTEUxQlFVMHNSVUZCUlN4RlFVRkZPMWxCUTFZc1RVRkJUU3hGUVVGRkxFVkJRVVU3V1VGRFZpeE5RVUZOTEVWQlFVVXNSVUZCUlR0WlFVTldMRTFCUVUwc1JVRkJSU3hGUVVGRk8xbEJRMVlzVFVGQlRTeEZRVUZGTEVWQlFVVTdXVUZEVml4TlFVRk5MRVZCUVVVc1JVRkJSVHRaUVVOV0xFdEJRVXNzUlVGQlJTeEhRVUZITzFsQlExWXNTMEZCU3l4RlFVRkZMRWRCUVVjN1dVRkRWaXhUUVVGVExFVkJRVVVzUTBGQlF6dFpRVU5hTEVkQlFVY3NSVUZCUlN4RFFVRkRPMWxCUTA0c1NVRkJTU3hGUVVGRkxFVkJRVVU3V1VGRFVpeEpRVUZKTEVWQlFVVXNSVUZCUlR0WlFVTlNMRWxCUVVrc1JVRkJSU3hGUVVGRk8xbEJRMUlzU1VGQlNTeEZRVUZGTEVWQlFVVTdXVUZEVWl4SlFVRkpMRVZCUVVVc1JVRkJSVHRaUVVOU0xFbEJRVWtzUlVGQlJTeEZRVUZGTzFsQlExSXNTVUZCU1N4RlFVRkZMRVZCUVVVN1dVRkRVaXhKUVVGSkxFVkJRVVVzUlVGQlJUdFpRVU5TTEVsQlFVa3NSVUZCUlN4RlFVRkZPMWxCUTFJc1NVRkJTU3hGUVVGRkxFVkJRVVU3V1VGRFVpeFhRVUZYTEVWQlFVVXNSMEZCUnp0WlFVTm9RaXhaUVVGWkxFVkJRVVVzUjBGQlJ6dFpRVU5xUWl4TFFVRkxMRVZCUVVVc1JVRkJSVHRaUVVOVUxGZEJRVmNzUlVGQlJTeEZRVUZGTzFsQlEyWXNTVUZCU1N4RlFVRkZMRVZCUVVVN1dVRkRVaXhKUVVGSkxFVkJRVVVzUlVGQlJUdFpRVU5TTEVsQlFVa3NSVUZCUlN4RlFVRkZPMWxCUTFJc1NVRkJTU3hGUVVGRkxFVkJRVVU3V1VGRFVpeEpRVUZKTEVWQlFVVXNSVUZCUlR0WlFVTlNMRWxCUVVrc1JVRkJSU3hGUVVGRk8xbEJRMUlzU1VGQlNTeEZRVUZGTEVWQlFVVTdXVUZEVWl4SlFVRkpMRVZCUVVVc1JVRkJSVHRaUVVOU0xFbEJRVWtzUlVGQlJTeEZRVUZGTzFsQlExSXNVMEZCVXl4RlFVRkZMRWRCUVVjN1dVRkRaQ3hMUVVGTExFVkJRVVVzUjBGQlJ6dFpRVU5XTEZOQlFWTXNSVUZCUlN4SFFVRkhPMWxCUTJRc1UwRkJVeXhGUVVGRkxFVkJRVVU3V1VGRFlpeFRRVUZUTEVWQlFVVXNSMEZCUnp0WlFVTmtMRWxCUVVrc1JVRkJSU3hGUVVGRk8xbEJRMUlzU1VGQlNTeEZRVUZGTEVWQlFVVTdXVUZEVWl4SlFVRkpMRVZCUVVVc1JVRkJSVHRaUVVOU0xFbEJRVWtzUlVGQlJTeEZRVUZGTzFsQlExSXNTVUZCU1N4RlFVRkZMRVZCUVVVN1dVRkRVaXhKUVVGSkxFVkJRVVVzUlVGQlJUdFpRVU5TTEVsQlFVa3NSVUZCUlN4RlFVRkZPMWxCUTFJc1MwRkJTeXhGUVVGRkxFZEJRVWM3V1VGRFZpeE5RVUZOTEVWQlFVVXNSMEZCUnp0WlFVTllMRXRCUVVzc1JVRkJSU3hIUVVGSE8xbEJRMVlzVlVGQlZTeEZRVUZGTEVkQlFVYzdXVUZEWml4UFFVRlBMRVZCUVVVc1JVRkJSVHRaUVVOWUxFdEJRVXNzUlVGQlJTeEZRVUZGTzFsQlExUXNVVUZCVVN4RlFVRkZMRVZCUVVVN1dVRkRXaXhGUVVGRkxFVkJRVVVzUjBGQlJ6dFpRVU5RTEVWQlFVVXNSVUZCUlN4SFFVRkhPMWxCUTFBc1JVRkJSU3hGUVVGRkxFZEJRVWM3V1VGRFVDeEZRVUZGTEVWQlFVVXNSMEZCUnp0WlFVTlFMRVZCUVVVc1JVRkJSU3hIUVVGSE8xbEJRMUFzUlVGQlJTeEZRVUZGTEVkQlFVYzdXVUZEVUN4RlFVRkZMRVZCUVVVc1IwRkJSenRaUVVOUUxFVkJRVVVzUlVGQlJTeEhRVUZITzFsQlExQXNSVUZCUlN4RlFVRkZMRWRCUVVjN1dVRkRVQ3hIUVVGSExFVkJRVVVzUjBGQlJ6dFpRVU5TTEVkQlFVY3NSVUZCUlN4SFFVRkhPMWxCUTFJc1IwRkJSeXhGUVVGRkxFZEJRVWM3V1VGRFVpeExRVUZMTEVWQlFVVXNSVUZCUlR0WlFVTlVMRlZCUVZVc1JVRkJSU3hIUVVGSE8xbEJRMllzV1VGQldTeEZRVUZGTEVkQlFVYzdXVUZEYWtJc1kwRkJZeXhGUVVGRkxFZEJRVWM3V1VGRGJrSXNZMEZCWXl4RlFVRkZMRWRCUVVjN1dVRkRia0lzVTBGQlV5eEZRVUZGTEVkQlFVYzdXVUZEWkN4aFFVRmhMRVZCUVVVc1IwRkJSenRaUVVOc1FpeFBRVUZQTEVWQlFVVXNSMEZCUnp0WlFVTmFMRTlCUVU4c1JVRkJSU3hIUVVGSE8xbEJRMW9zVDBGQlR5eEZRVUZGTEVkQlFVYzdXVUZEV2l4UFFVRlBMRVZCUVVVc1IwRkJSenRaUVVOYUxFOUJRVThzUlVGQlJTeEhRVUZITzFsQlExb3NUMEZCVHl4RlFVRkZMRWRCUVVjN1dVRkRXaXhQUVVGUExFVkJRVVVzUlVGQlJUdFpRVU5ZTEU5QlFVOHNSVUZCUlN4RlFVRkZPMWxCUTFnc1QwRkJUeXhGUVVGRkxFVkJRVVU3V1VGRFdDeFBRVUZQTEVWQlFVVXNSVUZCUlR0WlFVTllMRTlCUVU4c1JVRkJSU3hIUVVGSE8xbEJRMW9zV1VGQldTeEZRVUZGTEVkQlFVYzdXVUZEYWtJc1VVRkJVU3hGUVVGRkxFZEJRVWM3V1VGRFlpeEpRVUZKTEVWQlFVVXNSVUZCUlR0WlFVTlNMRWRCUVVjc1JVRkJSU3hGUVVGRk8xbEJRMUFzVDBGQlR5eEZRVUZGTEVWQlFVVTdXVUZEV0N4VFFVRlRMRVZCUVVVc1JVRkJSVHRaUVVOaUxGVkJRVlVzUlVGQlJTeEZRVUZGTzFsQlEyUXNVMEZCVXl4RlFVRkZMRVZCUVVVN1dVRkRZaXhOUVVGTkxFVkJRVVVzUlVGQlJUdFpRVU5XTEZGQlFWRXNSVUZCUlN4RlFVRkZPMWxCUTFvc1RVRkJUU3hGUVVGRkxFVkJRVVU3V1VGRFZpeE5RVUZOTEVWQlFVVXNSVUZCUlR0WlFVTldMRmRCUVZjc1JVRkJSU3hGUVVGRk8xTkJRMnhDTEVOQlFVTTdVVUZaUlN4SlFVRkpMRU5CUVVNc01FSkJRVEJDTEVkQlFVY3NNRUpCUVRCQ0xFTkJRVU03VVVGRE4wUXNTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhOUVVGTkxFTkJRVU03VVVGRGNrSXNTVUZCU1N4RFFVRkRMR3RDUVVGclFpeEhRVUZITEd0Q1FVRnJRaXhEUVVGRE8wbEJRMnBFTEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxITkNRVUZ6UWp0UlFVTnNRaXhOUVVGTkxIRkNRVUZ4UWl4SFFVRkhMRU5CUVVNc1JVRkJiMElzUlVGQlJTeEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMSE5DUVVGelFpeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUTNoR0xFMUJRVTBzWTBGQll5eEhRVUZITEVOQlFVTXNSVUZCYVVJc1JVRkJSU3hGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRSUVVOMlJTeE5RVUZOTEZsQlFWa3NSMEZCUnl4RFFVRkRMRVZCUVdsQ0xFVkJRVVVzUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03VVVGRGJrVXNUVUZCVFN4bFFVRmxMRWRCUVVjc1EwRkJReXhGUVVGcFFpeEZRVUZGTEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1VVRkZla1VzVVVGQlVTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExHZENRVUZuUWl4RlFVRkZMSEZDUVVGeFFpeERRVUZETEVOQlFVTTdVVUZEYmtVc1VVRkJVU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRk5CUVZNc1JVRkJSU3hqUVVGakxFTkJRVU1zUTBGQlF6dFJRVU55UkN4UlFVRlJMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNUMEZCVHl4RlFVRkZMRmxCUVZrc1EwRkJReXhEUVVGRE8xRkJSV3BFTERSRFFVRTBRenRSUVVNMVF5eFJRVUZSTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVlVGQlZTeEZRVUZGTEdWQlFXVXNRMEZCUXl4RFFVRkRPMUZCUlhaRUxFbEJRVWtzUTBGQlF5dzBRa0ZCTkVJc1EwRkJReXh4UWtGQmNVSXNRMEZEYmtRc1IwRkJSeXhGUVVGRkxFTkJRVU1zVVVGQlVTeERRVUZETEcxQ1FVRnRRaXhEUVVGRExHZENRVUZuUWl4RlFVRkZMSEZDUVVGeFFpeERRVUZETEVOQlF6bEZMRU5CUVVNN1VVRkRSaXhKUVVGSkxFTkJRVU1zTkVKQlFUUkNMRU5CUVVNc2NVSkJRWEZDTEVOQlEyNUVMRWRCUVVjc1JVRkJSU3hEUVVGRExGRkJRVkVzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhUUVVGVExFVkJRVVVzWTBGQll5eERRVUZETEVOQlEyaEZMRU5CUVVNN1VVRkRSaXhKUVVGSkxFTkJRVU1zTkVKQlFUUkNMRU5CUVVNc2NVSkJRWEZDTEVOQlEyNUVMRWRCUVVjc1JVRkJSU3hEUVVGRExGRkJRVkVzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhQUVVGUExFVkJRVVVzV1VGQldTeERRVUZETEVOQlF6VkVMRU5CUVVNN1VVRkRSaXhKUVVGSkxFTkJRVU1zTkVKQlFUUkNMRU5CUVVNc2NVSkJRWEZDTEVOQlEyNUVMRWRCUVVjc1JVRkJSU3hEUVVGRExGRkJRVkVzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhWUVVGVkxFVkJRVVVzWlVGQlpTeERRVUZETEVOQlEyeEZMRU5CUVVNN1NVRkRUaXhEUVVGRE8wbEJSVVE3TzA5QlJVYzdTVUZEU0N4M1FrRkJkMEk3VVVGRGNFSXNTVUZCU1N4RFFVRkRMRFJDUVVFMFFpeERRVUZETEdGQlFXRXNSVUZCUlN4RFFVRkRPMGxCUTNSRUxFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3hsUVVGbExFTkJRVU1zWVVGQk5FSTdVVUZEZUVNc1RVRkJUU3hQUVVGUExFZEJRVWNzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJRenRSUVVNdlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4SlFVRkpMRTlCUVU4c1MwRkJTeXhIUVVGSExFVkJRVVU3V1VGRE4wSXNUMEZCVHp0VFFVTldPMUZCUlVRc2MwUkJRVlVzUTBGRFRpeG5SVUZCYjBJc1JVRkJSU3hGUVVOMFFpeFpRVUZaTEU5QlFVOHNZMEZCWXl4aFFVRmhMRU5CUVVNc1RVRkJUU3hGUVVGRkxFVkJRM1pFTEVOQlFVTXNRMEZEU2l4RFFVRkRPMUZCUTBZc1RVRkJUU3hyUWtGQmEwSXNSMEZEY0VJc1NVRkJTU3hEUVVGRExEQkNRVUV3UWl4RFFVRkRMR3RDUVVGclFpeERRVUZETzFGQlEzWkVMR3RDUVVGclFpeERRVUZETEVkQlFVY3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenRaUVVNNVFpeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMR0ZCUVdFc1EwRkJRenRaUVVNNVFpeGhRVUZoTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdVMEZETDBJc1EwRkJReXhEUVVGRE8xRkJRMGdzVFVGQlRTeFZRVUZWTEVkQlFVY3NTVUZCU1N4RFFVRkRMR3RDUVVGclFpeERRVUZETEdGQlFXRXNSVUZCUlN4RFFVRkRPMUZCUXpORUxGVkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1VVRkRla0lzYzBWQlFYTkZPMUZCUTNSRkxDdEVRVUVyUkR0UlFVTXZSQ3hKUVVGSkxFOUJRVThzUzBGQlN5eDFSVUZCZVVJc1JVRkJSVHRaUVVOMlF5eFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVTnNRaXhKUVVGSkxHRkJRV0VzUTBGQlF5eFZRVUZWTEVWQlFVVTdaMEpCUXpGQ0xGRkJRVkVzUlVGQlJTeDFSVUZCZVVJN1lVRkRkRU1zUTBGQlF5eERRVU5NTEVOQlFVTTdVMEZEVER0UlFVVkVMRWxCUTBrc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eGhRVUZoTEVOQlFVTXNjVVZCUVhsQ0xFTkJRVU03V1VGRGNFUXNTVUZCU1N4RFFVRkRMRzFDUVVGdFFpeERRVUZETEU5QlFVOHNRMEZCUXl4RlFVTnVRenRaUVVORkxHRkJRV0VzUTBGQlF5eGpRVUZqTEVWQlFVVXNRMEZCUXp0VFFVTnNRenRKUVVOTUxFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3hoUVVGaExFTkJRVU1zWVVGQk5FSTdVVUZEZEVNc1RVRkJUU3hQUVVGUExFZEJRVWNzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJRenRSUVVNdlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RlFVRkZPMWxCUTFZc1QwRkJUenRUUVVOV08xRkJSVVFzYzBSQlFWVXNRMEZCUXl4blJVRkJiMElzUlVGQlJTeEZRVUZGTEZWQlFWVXNUMEZCVHl4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRE0wUXNUVUZCVFN4clFrRkJhMElzUjBGRGNFSXNTVUZCU1N4RFFVRkRMREJDUVVFd1FpeERRVUZETEd0Q1FVRnJRaXhEUVVGRE8xRkJRM1pFTEd0Q1FVRnJRaXhEUVVGRExFZEJRVWNzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkZMRTlCUVU4c1EwRkJSU3hEUVVGRExFTkJRVU03VVVGRk4wTXNTVUZEU1N4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExHRkJRV0VzUTBGQlF5eHhSVUZCZVVJc1EwRkJRenRaUVVOd1JDeEpRVUZKTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zVDBGQlR5eERRVUZETEVWQlEyNURPMWxCUTBVc1lVRkJZU3hEUVVGRExHTkJRV01zUlVGQlJTeERRVUZETzFOQlEyeERPMGxCUTB3c1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMR2RDUVVGblFpeERRVUZETEZGQlFYVkNPMUZCUTNCRExFbEJRVWtzUTBGQlF5eERRVUZETEZWQlFWVXNTVUZCU1N4UlFVRlJMRU5CUVVNc1JVRkJSVHRaUVVNelFpd3dSRUZCWXl4RFFVTldMR2RGUVVGdlFpeEZRVUZGTEVWQlEzUkNMRGhGUVVFNFJTeERRVU5xUml4RFFVRkRPMWxCUTBZc1QwRkJUenRUUVVOV08xRkJSVVFzVFVGQlRTeFJRVUZSTEVkQlFVY3NVVUZCVVN4RFFVRkRMRkZCUVZFc1EwRkJRenRSUVVOdVF5eHpSRUZCVlN4RFFVRkRMR2RGUVVGdlFpeEZRVUZGTEVWQlFVVXNZVUZCWVN4UlFVRlJMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVVV2UkN4TlFVRk5MR3RDUVVGclFpeEhRVU53UWl4SlFVRkpMRU5CUVVNc01FSkJRVEJDTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU03VVVGRGRrUXNhMEpCUVd0Q0xFTkJRVU1zUjBGQlJ5eERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU51UkN4RFFVRkRPMGxCUlVRN096dFBRVWRITzBsQlEwZ3NjMEpCUVhOQ0xFTkJRVU1zWjBKQlFXdERPMUZCUTNKRUxFbEJRVWtzWjBKQlFXZENMRU5CUVVNc1NVRkJTU3hKUVVGSkxHZENRVUZuUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVU3V1VGRGRrUXNaMEpCUVdkQ0xFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF5eEpRVUZKTEVWQlFVVXNSVUZCUlR0blFrRkROME1zYTBaQlFXdEdPMmRDUVVOc1JpeHhRa0ZCY1VJN1owSkJRM0pDTEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUTJoQ0xFbEJRVWtzWVVGQllTeERRVUZETEZOQlFWTXNSVUZCUlR0dlFrRkRla0lzVDBGQlR5eEZRVUZGTEVsQlFVa3NRMEZCUXl4WFFVRlhMRVZCUVVVc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF5eERRVUZETzI5Q1FVTjZReXhSUVVGUkxFVkJRVVVzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRMRU5CUVVNN2FVSkJReTlDTEVOQlFVTXNRMEZEVEN4RFFVRkRPMmRDUVVOR0xFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkRha0lzU1VGQlNTeGhRVUZoTEVOQlFVTXNWVUZCVlN4RlFVRkZPMjlDUVVNeFFpeFBRVUZQTEVWQlFVVXNTVUZCU1N4RFFVRkRMRmRCUVZjc1JVRkJSU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETEVOQlFVTTdiMEpCUTNwRExGRkJRVkVzUlVGQlJTeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNc1EwRkJRenRwUWtGREwwSXNRMEZCUXl4RFFVTk1MRU5CUVVNN1owSkJRMFlzU1VGQlNTeERRVUZETEdGQlFXRXNRMEZEWkN4SlFVRkpMR0ZCUVdFc1EwRkJReXhQUVVGUExFVkJRVVU3YjBKQlEzWkNMRTlCUVU4c1JVRkJSU3hKUVVGSkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNc1EwRkJRenR2UWtGRGVrTXNVVUZCVVN4RlFVRkZMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF5eERRVUZETzJsQ1FVTXZRaXhEUVVGRExFTkJRMHdzUTBGQlF6dFpRVU5PTEVOQlFVTXNRMEZCUXl4RFFVRkRPMU5CUTA0N1NVRkRUQ3hEUVVGRE8wbEJSVVE3T3pzN1QwRkpSenRKUVVOSUxGVkJRVlVzUTBGQlF5eGhRVUUwUWp0UlFVTnVReXd5UjBGQk1rYzdVVUZETTBjc01FZEJRVEJITzFGQlF6RkhMRWxCUVVrc1EwRkJReXhEUVVGRExGTkJRVk1zU1VGQlNTeGhRVUZoTEVOQlFVTXNSVUZCUlR0WlFVTXZRaXh4UjBGQmNVYzdXVUZEY2tjc1RVRkJUU3hMUVVGTExFZEJRVWNzWVVGQk9FSXNRMEZCUXp0WlFVTTNReXhKUVVGSkxFdEJRVXNzUTBGQlF5eEpRVUZKTEVsQlFVa3NTVUZCU1N4RFFVRkRMR0ZCUVdFc1JVRkJSVHRuUWtGRGJFTXNUMEZCVHl4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0aFFVTjZRenRwUWtGQlRUdG5Ra0ZEU0N3d1JFRkJZeXhEUVVOV0xHZEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xHOUNRVUZ2UWl4TFFVRkxMRU5CUVVNc1NVRkJTU3h6UkVGQmMwUXNRMEZEZGtZc1EwRkJRenRuUWtGRFJpeFBRVUZQTEVsQlFVa3NRMEZCUXp0aFFVTm1PMU5CUTBvN1VVRkZSQ3gxUmtGQmRVWTdVVUZGZGtZc1NVRkRTU3hoUVVGaExFTkJRVU1zVDBGQlR5eExRVUZMTEcxRlFVRnhRanRaUVVNdlF5eGhRVUZoTEVOQlFVTXNTVUZCU1N4TFFVRkxMRmxCUVZrc1JVRkRja003V1VGRFJTeFBRVUZQTEhkRlFVRXdRaXhEUVVGRE8xTkJRM0pETzJGQlFVMHNTVUZEU0N4aFFVRmhMRU5CUVVNc1QwRkJUeXhMUVVGTExIRkZRVUYxUWp0WlFVTnFSQ3hoUVVGaExFTkJRVU1zU1VGQlNTeExRVUZMTEdOQlFXTXNSVUZEZGtNN1dVRkRSU3hQUVVGUExEQkZRVUUwUWl4RFFVRkRPMU5CUTNaRE8yRkJRVTBzU1VGRFNDeGhRVUZoTEVOQlFVTXNUMEZCVHl4TFFVRkxMR2xGUVVGdFFqdFpRVU0zUXl4aFFVRmhMRU5CUVVNc1NVRkJTU3hMUVVGTExGVkJRVlVzUlVGRGJrTTdXVUZEUlN4UFFVRlBMSE5GUVVGM1FpeERRVUZETzFOQlEyNURPMkZCUVUwN1dVRkRTQ3hQUVVGUExHRkJRV0VzUTBGQlF5eFBRVUZQTEVOQlFVTTdVMEZEYUVNN1NVRkRUQ3hEUVVGRE8wbEJSVVE3T3p0UFFVZEhPMGxCUTBnc2JVSkJRVzFDTEVOQlFVTXNUMEZCWlR0UlFVTXZRaXh0U1VGQmJVazdVVUZEYmtrc1QwRkJUeXhEUVVGRExFOUJRVThzU1VGQlNTeEhRVUZITEVsQlFVa3NUMEZCVHl4SlFVRkpMRWRCUVVjc1EwRkJReXhKUVVGSkxFOUJRVThzUzBGQlN5eERRVUZETEVOQlFVTTdTVUZETDBRc1EwRkJRenREUVVOS096czdPenM3T3pzN096czdPenM3T3p0QlEycFhSQ3hyUkVGQmEwUTdRVUZIVWp0QlFVc3dRanRCUVVWd1JUczdSMEZGUnp0QlFVTkpMRTFCUVUwc2FVSkJRV2xDTzBsQll6RkNPenM3T3p0UFFVdEhPMGxCUTBnc1dVRkRTU3h2UWtGQmFVTXNSVUZEYWtNc1pVRkJaME1zUlVGRGFFTXNhMEpCUVRoQ08xRkJkRUpzUXl4TlFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8xRkJRMDRzVFVGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0UlFVdE9MR2xEUVVFMFFpeEhRVUZITEVOQlFVTXNWVUZCYzBJc1JVRkJSU3hGUVVGRk8xbEJRM1JFTEVsQlFVa3NRMEZCUXl4MVFrRkJkVUlzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0UlFVTTNReXhEUVVGRExFTkJRVU03VVVGRlJpeHhSVUZCY1VVN1VVRkROMFFzT0VKQlFYbENMRWRCUVVjc1NVRkJTU3cwUlVGQmIwSXNSVUZCUlN4RFFVRkRPMUZCWVRORUxFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1IwRkJSeXh2UWtGQmIwSXNRMEZCUXp0UlFVTnFSQ3hKUVVGSkxFTkJRVU1zWlVGQlpTeEhRVUZITEdWQlFXVXNRMEZCUXp0UlFVTjJReXhKUVVGSkxFTkJRVU1zYTBKQlFXdENMRWRCUVVjc2EwSkJRV3RDTEVOQlFVTTdVVUZETjBNc1RVRkJUU3hyUWtGQmEwSXNSMEZEY0VJc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMSEZDUVVGeFFpeEZRVUZGTEVOQlFVTTdVVUZEZEVRc1NVRkJTU3hEUVVGRExFTkJRVU1zUjBGQlJ5eHJRa0ZCYTBJc1EwRkJReXh4UWtGQmNVSXNSVUZCUlN4RFFVRkRMRXRCUVVzc1IwRkJSeXhEUVVGRExFTkJRVU03VVVGRE9VUXNTVUZCU1N4RFFVRkRMRU5CUVVNc1IwRkJSeXhyUWtGQmEwSXNRMEZCUXl4eFFrRkJjVUlzUlVGQlJTeERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRU5CUVVNN1VVRkRMMFFzU1VGQlNTeERRVUZETEV0QlFVczdXVUZEVGl4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRFJDUVVFMFFpeERRVU5xUlN4SlFVRkpMRU5CUVVNc1EwRkJReXhGUVVOT0xFbEJRVWtzUTBGQlF5eERRVUZETEVOQlExUXNRMEZCUXp0SlFVTldMRU5CUVVNN1NVRkZSRHM3VDBGRlJ6dEpRVU5JTEhGQ1FVRnhRanRSUVVOcVFpeEpRVUZKTEVOQlFVTXNlVUpCUVhsQ0xFTkJRVU1zWVVGQllTeEZRVUZGTEVOQlFVTTdTVUZEYmtRc1EwRkJRenRKUVVWRU96dFBRVVZITzBsQlEwZ3NaVUZCWlR0UlFVTllMRTFCUVUwc2EwSkJRV3RDTEVkQlEzQkNMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4eFFrRkJjVUlzUlVGQlJTeERRVUZETzFGQlEzUkVMRTFCUVUwc2EwSkJRV3RDTEVkQlEzQkNMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zTUVKQlFUQkNMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTTdVVUZGZGtVc1NVRkRTU3hSUVVGUkxFTkJRVU1zYTBKQlFXdENMRXRCUVVzc2EwSkJRV3RDTzFsQlEyeEVMRkZCUVZFc1EwRkJReXh4UWtGQmNVSXNTMEZCU3l4clFrRkJhMElzUlVGRGRrUTdXVUZEUlN4elJFRkJWU3hEUVVGRExHZEZRVUZ2UWl4RlFVRkZMRVZCUVVVc1owSkJRV2RDTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRlRVFzVVVGQlVTeERRVUZETEdkQ1FVRm5RaXhEUVVOeVFpeFhRVUZYTEVWQlExZ3NTVUZCU1N4RFFVRkRMRFJDUVVFMFFpeEZRVU5xUXl4TFFVRkxMRU5CUTFJc1EwRkJRenRaUVVOR0xFbEJRVWtzUTBGQlF5eDVRa0ZCZVVJc1EwRkJReXh4UWtGQmNVSXNRMEZEYUVRc1IwRkJSeXhGUVVGRkxFTkJRVU1zVVVGQlVTeERRVUZETEcxQ1FVRnRRaXhEUVVNNVFpeFhRVUZYTEVWQlExZ3NTVUZCU1N4RFFVRkRMRFJDUVVFMFFpeEZRVU5xUXl4TFFVRkxMRU5CUTFJc1EwRkRTaXhEUVVGRE8xTkJRMHc3WVVGQlRUdFpRVU5JTEhORVFVRlZMRU5CUTA0c1owVkJRVzlDTEVWQlFVVXNSVUZEZEVJc2VVTkJRWGxETEVWQlEzcERMRU5CUVVNc1EwRkRTaXhEUVVGRE8xbEJRMFlzTmtkQlFUWkhPMWxCUXpkSExGRkJRVkVzUTBGQlF5eHRRa0ZCYlVJc1EwRkRlRUlzVjBGQlZ5eEZRVU5ZTEVsQlFVa3NRMEZCUXl3MFFrRkJORUlzUlVGRGFrTXNTMEZCU3l4RFFVTlNMRU5CUVVNN1dVRkZSaXc0UlVGQk9FVTdXVUZET1VVc2MwZEJRWE5ITzFsQlEzUkhMSEZEUVVGeFF6dFpRVU55UXl4SlFVRkpMRlZCUVZVc1IwRkJSeXhKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1lVRkJZU3hGUVVGRkxFTkJRVU03V1VGRGVrUXNUVUZCVFN4UFFVRlBMRWRCUVVjc1NVRkJTU3hIUVVGSExFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTTdXVUZEY0VNc1RVRkJUU3hsUVVGbExFZEJRV3RDTEVWQlFVVXNRMEZCUXp0WlFVVXhReXhQUVVGUExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNUVUZCWXl4RlFVRkZMRVZCUVVVN1owSkJReTlDTEdWQlFXVXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRaUVVNMVFpeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVVklMR1ZCUVdVc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF5eGhRVUZoTEVWQlFVVXNSVUZCUlR0blFrRkRkRU1zYTBKQlFXdENMRU5CUVVNc1IwRkJSeXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNZVUZCWVN4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOeVJDeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTklMSGREUVVGM1F6dFpRVU40UXl4VlFVRlZMRWRCUVVjc1JVRkJSU3hEUVVGRE8xTkJRMjVDTzBsQlEwd3NRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5JTEhWQ1FVRjFRaXhEUVVGRExGVkJRWE5DTzFGQlF6RkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1dVRkJXU3hGUVVGRkxFVkJRVVU3V1VGRE0wTXNUMEZCVHp0VFFVTldPMUZCUTBRc1RVRkJUU3hyUWtGQmEwSXNSMEZEY0VJc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5d3dRa0ZCTUVJc1EwRkJReXhyUWtGQmEwSXNRMEZCUXp0UlFVTjJSU3hOUVVGTkxGVkJRVlVzUjBGRFdpeEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zY1VKQlFYRkNMRVZCUVVVc1EwRkJReXhYUVVGWExFTkJRVU03VVVGRGJFVXNUVUZCVFN4WFFVRlhMRWRCUTJJc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMSEZDUVVGeFFpeEZRVUZGTEVOQlFVTXNXVUZCV1N4RFFVRkRPMUZCUlc1RkxFbEJRVWtzUTBGQlF5eERRVUZETEVsQlFVa3NWVUZCVlN4RFFVRkRMRk5CUVZNc1EwRkJRenRSUVVNdlFpeEpRVUZKTEVOQlFVTXNRMEZCUXl4SlFVRkpMRlZCUVZVc1EwRkJReXhUUVVGVExFTkJRVU03VVVGRkwwSXNTVUZCU1N4SlFVRkpMRU5CUVVNc1EwRkJReXhIUVVGSExGVkJRVlVzUlVGQlJUdFpRVU55UWl4SlFVRkpMRU5CUVVNc1EwRkJReXhKUVVGSkxGVkJRVlVzUTBGQlF6dFRRVU40UWp0UlFVTkVMRWxCUVVrc1NVRkJTU3hEUVVGRExFTkJRVU1zUjBGQlJ5eFhRVUZYTEVWQlFVVTdXVUZEZEVJc1NVRkJTU3hEUVVGRExFTkJRVU1zU1VGQlNTeFhRVUZYTEVOQlFVTTdVMEZEZWtJN1VVRkRSQ3hKUVVGSkxFbEJRVWtzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZPMWxCUTFvc1NVRkJTU3hEUVVGRExFTkJRVU1zUjBGQlJ5eFZRVUZWTEVkQlFVY3NTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJRenRUUVVOb1F6dFJRVU5FTEVsQlFVa3NTVUZCU1N4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVU3V1VGRFdpeEpRVUZKTEVOQlFVTXNRMEZCUXl4SFFVRkhMRmRCUVZjc1IwRkJSeXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETzFOQlEycERPMUZCUlVRc1NVRkJTU3hEUVVGRExFdEJRVXM3V1VGRFRpeEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRzFDUVVGdFFpeERRVUZETERSQ1FVRTBRaXhEUVVOcVJTeEpRVUZKTEVOQlFVTXNRMEZCUXl4RlFVTk9MRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRMVFzUTBGQlF6dFJRVU5PTEUxQlFVMHNTMEZCU3l4SFFVTlFMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc01FSkJRVEJDTEVOQlF5OUVMRlZCUVZVc1EwRkJReXhUUVVGVExFVkJRM0JDTEZWQlFWVXNRMEZCUXl4VFFVRlRMRU5CUTNaQ0xFTkJRVU03VVVGRFRpeHJRa0ZCYTBJc1EwRkJReXhIUVVGSExFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTTdXVUZEYUVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzFsQlExb3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8xbEJRMW9zUzBGQlN5eERRVUZETEVOQlFVTTdXVUZEVUN4TFFVRkxMRU5CUVVNc1EwRkJRenRUUVVOV0xFTkJRVU1zUTBGQlF6dEpRVU5RTEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNDeGxRVUZsTEVOQlFVTXNWVUZCYzBJN1VVRkRiRU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUTBGQlF5eFpRVUZaTEVWQlFVVXNSVUZCUlR0WlFVTXpReXhQUVVGUE8xTkJRMVk3VVVGRlJDeE5RVUZOTEd0Q1FVRnJRaXhIUVVOd1FpeEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMREJDUVVFd1FpeERRVUZETEd0Q1FVRnJRaXhEUVVGRE8xRkJRM1pGTEd0Q1FVRnJRaXhEUVVGRExFZEJRVWNzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXp0WlFVTm9ReXhWUVVGVkxFTkJRVU1zVFVGQlRUdFpRVU5xUWl4dFIwRkJiVWM3V1VGRGJrY3NjVVJCUVhGRU8xbEJRM0pFTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRaUVVOYUxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0VFFVTm1MRU5CUVVNc1EwRkJRenRKUVVOUUxFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3hoUVVGaExFTkJRVU1zVlVGQmMwSTdVVUZEYUVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhaUVVGWkxFVkJRVVVzUlVGQlJUdFpRVU16UXl4UFFVRlBPMU5CUTFZN1VVRkRSQ3hOUVVGTkxHdENRVUZyUWl4SFFVTndRaXhKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETERCQ1FVRXdRaXhEUVVGRExHdENRVUZyUWl4RFFVRkRPMUZCUTNaRkxHdENRVUZyUWl4RFFVRkRMRWRCUVVjc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF6dFpRVU01UWl4VlFVRlZMRU5CUVVNc1RVRkJUVHRaUVVOcVFpeHRSMEZCYlVjN1dVRkRia2NzY1VSQlFYRkVPMWxCUTNKRUxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0WlFVTmFMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dFRRVU5tTEVOQlFVTXNRMEZCUXp0SlFVTlFMRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU0N4blFrRkJaMElzUTBGQlF5eFZRVUZ6UWp0UlFVTnVReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhEUVVGRExGbEJRVmtzUlVGQlJTeEZRVUZGTzFsQlF6TkRMRTlCUVU4N1UwRkRWanRSUVVORUxFMUJRVTBzYTBKQlFXdENMRWRCUTNCQ0xFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTXNNRUpCUVRCQ0xFTkJRVU1zYTBKQlFXdENMRU5CUVVNN1VVRkRka1VzYTBKQlFXdENMRU5CUVVNc1IwRkJSeXhEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETzFsQlEycERMRlZCUVZVc1EwRkJReXhWUVVGVk8xbEJRM0pDTEcxSFFVRnRSenRaUVVOdVJ5eHhSRUZCY1VRN1dVRkRja1FzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMWxCUTFvc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzFOQlEyWXNRMEZCUXl4RFFVRkRPMGxCUTFBc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMR2xDUVVGcFFpeERRVUZETEZWQlFYTkNPMUZCUTNCRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zV1VGQldTeEZRVUZGTEVWQlFVVTdXVUZETTBNc1QwRkJUenRUUVVOV08xRkJRMFFzVFVGQlRTeHJRa0ZCYTBJc1IwRkRjRUlzU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl3d1FrRkJNRUlzUTBGQlF5eHJRa0ZCYTBJc1EwRkJRenRSUVVOMlJTeHJRa0ZCYTBJc1EwRkJReXhIUVVGSExFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVTTdXVUZEYkVNc1ZVRkJWU3hEUVVGRExFMUJRVTA3V1VGRGFrSXNiVWRCUVcxSE8xbEJRMjVITEhGRVFVRnhSRHRaUVVOeVJDeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1dVRkRXaXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdVMEZEWml4RFFVRkRMRU5CUVVNN1NVRkRVQ3hEUVVGRE8wbEJSVVE3T3p0UFFVZEhPMGxCUTBnc2RVSkJRWFZDTEVOQlFVTXNWVUZCYzBJN1VVRkRNVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUTBGQlF5eFpRVUZaTEVWQlFVVXNSVUZCUlR0WlFVTXpReXhQUVVGUE8xTkJRMVk3VVVGRFJDeEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMR2xDUVVGcFFpeERRVU5zUXl4VlFVRlZMRU5CUVVNc1QwRkJUeXhGUVVOc1FpeEpRVUZKTEVOQlFVTXNRMEZCUXl4RlFVTk9MRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRMVFzUTBGQlF6dEpRVU5PTEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNDeDVRa0ZCZVVJc1EwRkJReXhWUVVGelFqdFJRVU0xUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRmxCUVZrc1JVRkJSU3hGUVVGRk8xbEJRek5ETEU5QlFVODdVMEZEVmp0UlFVTkVMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zYlVKQlFXMUNMRU5CUTNCRExGVkJRVlVzUTBGQlF5eFBRVUZQTEVWQlEyeENMRWxCUVVrc1EwRkJReXhEUVVGRExFVkJRMDRzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZEVkN4RFFVRkRPMGxCUTA0c1EwRkJRenREUVVOS096czdPenM3T3pzN096czdPenM3TzBGRGFGSkVMR3RFUVVGclJEdEJRVVZzUkRzN08wZEJSMGM3UVVGRFNTeE5RVUZOTEZkQlFWYzdPMEZCUTJJc2MwSkJRVlVzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4bFFVRmxPMEZCUXk5Q0xESkNRVUZsTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1owSkJRV2RDTzBGQlEzSkRMREpDUVVGbExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNaMEpCUVdkQ08wRkJRM0pETEhkQ1FVRlpMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zZFVKQlFYVkNPMEZCUTNwRExIVkNRVUZYTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc01FSkJRVEJDTzBGQlIzUkVPenM3UjBGSFJ6dEJRVU5KTEUxQlFVMHNaMEpCUVdkQ096dEJRVU5zUWl3NFFrRkJZU3hIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEdWQlFXVTdRVUZEYkVNc1owTkJRV1VzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4blFrRkJaMEk3UVVGRGNrTXNaME5CUVdVc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eG5Ra0ZCWjBJN1FVRkRja01zTmtKQlFWa3NSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXgxUWtGQmRVSTdRVUZEZWtNc05FSkJRVmNzUjBGQlJ5eEZRVUZGTEVOQlFVTXNRMEZCUXl3d1FrRkJNRUk3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRGRrSjJSQ3hyUkVGQmEwUTdRVUZGWVR0QlFVTnlRanRCUVV0ak8wRkJRMGs3UVVGRlVUdEJRVVZ3UlRzN1IwRkZSenRCUVVOSkxFMUJRVTBzWlVGQlpUdEpRVk40UWpzN096dFBRVWxITzBsQlEwZ3NXVUZEU1N3d1FrRkJiVVFzUlVGRGJrUXNiMEpCUVdsRExFVkJRMnBETEcxQ1FVRjNReXhGUVVONFF5eHJRa0ZCT0VJN1VVRmFiRU1zY1VWQlFYRkZPMUZCUXpkRUxEaENRVUY1UWl4SFFVRkhMRWxCUVVrc05FVkJRVzlDTEVWQlFVVXNRMEZCUXp0UlFXRXpSQ3hKUVVGSkxFTkJRVU1zTUVKQlFUQkNMRWRCUVVjc01FSkJRVEJDTEVOQlFVTTdVVUZETjBRc1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4SFFVRkhMRzFDUVVGdFFpeERRVUZETzFGQlF5OURMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNSMEZCUnl4dlFrRkJiMElzUTBGQlF6dFJRVU5xUkN4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVkQlFVY3NhMEpCUVd0Q0xFTkJRVU03VVVGRE4wTXNTVUZCU1N4RFFVRkRMR2REUVVGblF5eEZRVUZGTEVOQlFVTTdTVUZETlVNc1EwRkJRenRKUVVWRU96dFBRVVZITzBsQlEwZ3NjVUpCUVhGQ08xRkJRMnBDTEVsQlFVa3NRMEZCUXl4NVFrRkJlVUlzUTBGQlF5eGhRVUZoTEVWQlFVVXNRMEZCUXp0SlFVTnVSQ3hEUVVGRE8wbEJSVVE3T3pzN1QwRkpSenRKUVVOSUxIbENRVUY1UWl4RFFVRkRMR1ZCUVdkRE8xRkJRM1JFTEUxQlFVMHNhMEpCUVd0Q0xFZEJRM0JDTEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUTBGQlF5eHhRa0ZCY1VJc1JVRkJiMElzUTBGQlF6dFJRVU40UlN4TlFVRk5MR2xDUVVGcFFpeEhRVUZwUWl4SlFVRkpMR2xGUVVGcFFpeERRVU42UkN4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVWQlEzcENMR1ZCUVdVc1JVRkRaaXhKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUXpGQ0xFTkJRVU03VVVGRlJpeHJRa0ZCYTBJc1EwRkJReXhyUWtGQmEwSTdXVUZEYWtNc2EwSkJRV3RDTEVOQlFVTXNhMEpCUVd0Q08yZENRVU55UXl4clFrRkJhMElzUTBGQlF5eHhRa0ZCY1VJc1EwRkJRenRSUVVNM1F5eFJRVUZSTEVOQlFVTXNaVUZCWlR0WlFVTndRaXhSUVVGUkxFTkJRVU1zWlVGQlpTeEpRVUZKTEZGQlFWRXNRMEZCUXl4clFrRkJhMElzUTBGQlF6dFJRVVUxUkN4NVJFRkJlVVE3VVVGRGVrUXNTVUZCU1N4clFrRkJhMElzUTBGQlF5eHJRa0ZCYTBJc1JVRkJSVHRaUVVOMlF5eE5RVUZOTEU5QlFVOHNSMEZCUnl4SFFVRkhMRVZCUVVVN1owSkJRMnBDTEd0Q1FVRnJRaXhEUVVGRExHdENRVUZyUWl4RlFVRkZMRU5CUVVNN1dVRkROVU1zUTBGQlF5eERRVUZETzFsQlEwWXNhMEpCUVd0Q0xFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZETzFsQlEzUkVMRWxCUVVrc1EwRkJReXg1UWtGQmVVSXNRMEZCUXl4eFFrRkJjVUlzUTBGRGFFUXNSMEZCUnl4RlFVRkZMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVTnFSU3hEUVVGRE8xTkJRMHc3VVVGRlJDeE5RVUZOTEhWQ1FVRjFRaXhIUVVGSExFZEJRVWNzUlVGQlJTeERRVU5xUXl4cFFrRkJhVUlzUTBGQlF5eGxRVUZsTEVWQlFVVXNRMEZCUXp0UlFVTjRReXhSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUTNKQ0xHMUNRVUZ0UWl4RlFVTnVRaXgxUWtGQmRVSXNSVUZEZGtJc1MwRkJTeXhEUVVOU0xFTkJRVU03VVVGRFJpeFJRVUZSTEVOQlFVTXNaMEpCUVdkQ0xFTkJRM0pDTEhOQ1FVRnpRaXhGUVVOMFFpeDFRa0ZCZFVJc1JVRkRka0lzUzBGQlN5eERRVU5TTEVOQlFVTTdVVUZEUml4SlFVRkpMRU5CUVVNc2VVSkJRWGxDTEVOQlFVTXNjVUpCUVhGQ0xFTkJRMmhFTEVkQlFVY3NSVUZCUlN4RFFVRkRMRkZCUVZFc1EwRkJReXh0UWtGQmJVSXNRMEZET1VJc2JVSkJRVzFDTEVWQlEyNUNMSFZDUVVGMVFpeEZRVU4yUWl4TFFVRkxMRU5CUTFJc1EwRkRTaXhEUVVGRE8xRkJRMFlzU1VGQlNTeERRVUZETEhsQ1FVRjVRaXhEUVVGRExIRkNRVUZ4UWl4RFFVTm9SQ3hIUVVGSExFVkJRVVVzUTBGQlF5eFJRVUZSTEVOQlFVTXNiVUpCUVcxQ0xFTkJRemxDTEhOQ1FVRnpRaXhGUVVOMFFpeDFRa0ZCZFVJc1JVRkRka0lzUzBGQlN5eERRVU5TTEVOQlEwb3NRMEZCUXp0UlFVVkdMRTFCUVUwc1YwRkJWeXhIUVVGSExFTkJRVU1zVlVGQmMwSXNSVUZCUlN4RlFVRkZMRU5CUXpORExHbENRVUZwUWl4RFFVRkRMR1ZCUVdVc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF6dFJRVU5zUkN4TlFVRk5MRk5CUVZNc1IwRkJSeXhEUVVGRExGVkJRWE5DTEVWQlFVVXNSVUZCUlN4RFFVTjZReXhwUWtGQmFVSXNRMEZCUXl4aFFVRmhMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU03VVVGRGFFUXNUVUZCVFN4UFFVRlBMRWRCUVVjc1EwRkJReXhWUVVGelFpeEZRVUZGTEVWQlFVVXNRMEZEZGtNc2FVSkJRV2xDTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTTdVVUZEYmtRc1RVRkJUU3hWUVVGVkxFZEJRVWNzUTBGQlF5eFZRVUZ6UWl4RlFVRkZMRVZCUVVVc1EwRkRNVU1zYVVKQlFXbENMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNN1VVRkRjRVFzYTBKQlFXdENMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNWMEZCVnl4RlFVRkZMRmRCUVZjc1EwRkJReXhEUVVGRE8xRkJRemxFTEd0Q1FVRnJRaXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRk5CUVZNc1JVRkJSU3hUUVVGVExFTkJRVU1zUTBGQlF6dFJRVU14UkN4clFrRkJhMElzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhQUVVGUExFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVTTdVVUZEZEVRc2EwSkJRV3RDTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVlVGQlZTeEZRVUZGTEZWQlFWVXNRMEZCUXl4RFFVRkRPMUZCUlRWRUxFbEJRVWtzUTBGQlF5eDVRa0ZCZVVJc1EwRkJReXh4UWtGQmNVSXNRMEZEYUVRc1IwRkJSeXhGUVVGRkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNWMEZCVnl4RlFVRkZMRmRCUVZjc1EwRkJReXhEUVVONlJTeERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMSGxDUVVGNVFpeERRVUZETEhGQ1FVRnhRaXhEUVVOb1JDeEhRVUZITEVWQlFVVXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhUUVVGVExFVkJRVVVzVTBGQlV5eERRVUZETEVOQlEzSkZMRU5CUVVNN1VVRkRSaXhKUVVGSkxFTkJRVU1zZVVKQlFYbENMRU5CUVVNc2NVSkJRWEZDTEVOQlEyaEVMRWRCUVVjc1JVRkJSU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRzFDUVVGdFFpeERRVUZETEU5QlFVOHNSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkRha1VzUTBGQlF6dFJRVU5HTEVsQlFVa3NRMEZCUXl4NVFrRkJlVUlzUTBGQlF5eHhRa0ZCY1VJc1EwRkRhRVFzUjBGQlJ5eEZRVUZGTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc1ZVRkJWU3hGUVVGRkxGVkJRVlVzUTBGQlF5eERRVU4yUlN4RFFVRkRPMUZCUTBZc1NVRkJTU3hEUVVGRExIbENRVUY1UWl4RFFVRkRMSEZDUVVGeFFpeERRVU5vUkN4SFFVRkhMRVZCUVVVc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4eFFrRkJjVUlzUlVGQlJTeERRVU5zUkN4RFFVRkRPMUZCUTBZc1NVRkJTU3hEUVVGRExIbENRVUY1UWl4RFFVRkRMSEZDUVVGeFFpeERRVUZETEVkQlFVY3NSVUZCUlR0WlFVTjBSQ3hKUVVOSkxGRkJRVkVzUTBGQlF5eGxRVUZsTzJkQ1FVTjRRaXhEUVVGRExGRkJRVkVzUTBGQlF5eHJRa0ZCYTBJc1MwRkJTeXhyUWtGQmEwSTdiMEpCUXk5RExGRkJRVkVzUTBGQlF5eHhRa0ZCY1VJc1MwRkJTeXhyUWtGQmEwSXNRMEZCUXl4RlFVTTFSRHRuUWtGRFJTeFJRVUZSTEVOQlFVTXNaVUZCWlN4RlFVRkZMRU5CUVVNN1lVRkRPVUk3VVVGRFRDeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTlFMRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU0N3eVFrRkJNa0lzUTBGQlF5eGxRVUZuUXp0UlFVTjRSQ3hOUVVGTkxHdENRVUZyUWl4SFFVTndRaXhKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc2NVSkJRWEZDTEVWQlFXOUNMRU5CUVVNN1VVRkRlRVVzVFVGQlRTeHRRa0ZCYlVJc1IwRkJSeXhKUVVGSkxIRkZRVUZ0UWl4RFFVRkRMR1ZCUVdVc1EwRkJReXhEUVVGRE8xRkJSWEpGTEUxQlFVMHNWMEZCVnl4SFFVRkhMRU5CUVVNc1ZVRkJjMElzUlVGQlJTeEZRVUZGTEVOQlF6TkRMRzFDUVVGdFFpeERRVUZETEhWQ1FVRjFRaXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzFGQlF6VkVMRTFCUVUwc1YwRkJWeXhIUVVGSExFTkJRVU1zVlVGQmMwSXNSVUZCUlN4RlFVRkZMRU5CUXpORExHMUNRVUZ0UWl4RFFVRkRMR1ZCUVdVc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF6dFJRVU53UkN4TlFVRk5MRk5CUVZNc1IwRkJSeXhEUVVGRExGVkJRWE5DTEVWQlFVVXNSVUZCUlN4RFFVTjZReXh0UWtGQmJVSXNRMEZCUXl4aFFVRmhMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU03VVVGRGJFUXNUVUZCVFN4aFFVRmhMRWRCUVVjc1EwRkJReXhWUVVGelFpeEZRVUZGTEVWQlFVVXNRMEZETjBNc2JVSkJRVzFDTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTTdVVUZEZEVRc1RVRkJUU3hQUVVGUExFZEJRVWNzUTBGQlF5eFZRVUZ6UWl4RlFVRkZMRVZCUVVVc1EwRkRka01zYlVKQlFXMUNMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNN1VVRkRja1FzVFVGQlRTeFZRVUZWTEVkQlFVY3NRMEZCUXl4VlFVRnpRaXhGUVVGRkxFVkJRVVVzUTBGRE1VTXNiVUpCUVcxQ0xFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU03VVVGRGRFUXNhMEpCUVd0Q0xFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1YwRkJWeXhGUVVGRkxGZEJRVmNzUTBGQlF5eERRVUZETzFGQlF6bEVMR3RDUVVGclFpeERRVUZETEdkQ1FVRm5RaXhEUVVGRExGZEJRVmNzUlVGQlJTeFhRVUZYTEVOQlFVTXNRMEZCUXp0UlFVTTVSQ3hyUWtGQmEwSXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFRRVUZUTEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNN1VVRkRNVVFzYTBKQlFXdENMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNZVUZCWVN4RlFVRkZMR0ZCUVdFc1EwRkJReXhEUVVGRE8xRkJRMnhGTEd0Q1FVRnJRaXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRTlCUVU4c1JVRkJSU3hQUVVGUExFTkJRVU1zUTBGQlF6dFJRVU4wUkN4clFrRkJhMElzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhWUVVGVkxFVkJRVVVzVlVGQlZTeERRVUZETEVOQlFVTTdVVUZGTlVRc1NVRkJTU3hEUVVGRExIbENRVUY1UWl4RFFVRkRMSEZDUVVGeFFpeERRVU5vUkN4SFFVRkhMRVZCUVVVc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eFhRVUZYTEVWQlFVVXNWMEZCVnl4RFFVRkRMRU5CUTNwRkxFTkJRVU03VVVGRFJpeEpRVUZKTEVOQlFVTXNlVUpCUVhsQ0xFTkJRVU1zY1VKQlFYRkNMRU5CUTJoRUxFZEJRVWNzUlVGQlJTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRmRCUVZjc1JVRkJSU3hYUVVGWExFTkJRVU1zUTBGRGVrVXNRMEZCUXp0UlFVTkdMRWxCUVVrc1EwRkJReXg1UWtGQmVVSXNRMEZCUXl4eFFrRkJjVUlzUTBGRGFFUXNSMEZCUnl4RlFVRkZMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zVTBGQlV5eEZRVUZGTEZOQlFWTXNRMEZCUXl4RFFVTnlSU3hEUVVGRE8xRkJRMFlzU1VGQlNTeERRVUZETEhsQ1FVRjVRaXhEUVVGRExIRkNRVUZ4UWl4RFFVTm9SQ3hIUVVGSExFVkJRVVVzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4aFFVRmhMRVZCUVVVc1lVRkJZU3hEUVVGRExFTkJRemRGTEVOQlFVTTdVVUZEUml4SlFVRkpMRU5CUVVNc2VVSkJRWGxDTEVOQlFVTXNjVUpCUVhGQ0xFTkJRMmhFTEVkQlFVY3NSVUZCUlN4RFFVRkRMR3RDUVVGclFpeERRVUZETEcxQ1FVRnRRaXhEUVVGRExFOUJRVThzUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZEYWtVc1EwRkJRenRSUVVOR0xFbEJRVWtzUTBGQlF5eDVRa0ZCZVVJc1EwRkJReXh4UWtGQmNVSXNRMEZEYUVRc1IwRkJSeXhGUVVGRkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNWVUZCVlN4RlFVRkZMRlZCUVZVc1EwRkJReXhEUVVOMlJTeERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMSGxDUVVGNVFpeERRVUZETEhGQ1FVRnhRaXhEUVVOb1JDeEhRVUZITEVWQlFVVXNRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eHhRa0ZCY1VJc1JVRkJSU3hEUVVOd1JDeERRVUZETzBsQlEwNHNRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGdzWjBOQlFXZERPMUZCUXpWQ0xFMUJRVTBzYTBKQlFXdENMRWRCUTNCQ0xFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXh4UWtGQmNVSXNSVUZCYjBJc1EwRkJRenRSUVVWNFJTeG5SRUZCWjBRN1VVRkRhRVFzVFVGQlRTeFpRVUZaTEVkQlFVY3NRMEZCUXl4TFFVRnBRaXhGUVVGRkxFVkJRVVU3V1VGRGRrTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4WlFVRlpMRVZCUVVVc1JVRkJSVHRuUWtGRE0wTXNUMEZCVHp0aFFVTldPMWxCUTBRc2MwUkJRVlVzUTBGQlF5eG5SVUZCYjBJc1JVRkJSU3hGUVVGRkxHVkJRV1VzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTjJSQ3hKUVVGSkxFTkJRVU1zWTBGQll5eEZRVUZGTEVOQlFVTTdXVUZEZEVJc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTXNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRE5VUXNRMEZCUXl4RFFVRkRPMUZCUlVZc09FTkJRVGhETzFGQlF6bERMRTFCUVUwc1dVRkJXU3hIUVVGSExFTkJRVU1zUzBGQmFVSXNSVUZCUlN4RlFVRkZPMWxCUTNaRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zV1VGQldTeEZRVUZGTEVWQlFVVTdaMEpCUXpORExFOUJRVTg3WVVGRFZqdFpRVU5FTEhORVFVRlZMRU5CUVVNc1owVkJRVzlDTEVWQlFVVXNSVUZCUlN4WlFVRlpMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRGNFUXNTVUZCU1N4RFFVRkRMR05CUVdNc1JVRkJSU3hEUVVGRE8xbEJRM1JDTEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eExRVUZMTEVOQlFVTXNUMEZCVHl4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRExFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUXpsRUxFTkJRVU1zUTBGQlF6dFJRVU5HTEd0Q1FVRnJRaXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRmxCUVZrc1JVRkJSU3haUVVGWkxFTkJRVU1zUTBGQlF6dFJRVU5vUlN4clFrRkJhMElzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhaUVVGWkxFVkJRVVVzV1VGQldTeERRVUZETEVOQlFVTTdVVUZGYUVVc1NVRkJTU3hEUVVGRExIbENRVUY1UWl4RFFVRkRMSEZDUVVGeFFpeERRVU5vUkN4SFFVRkhMRVZCUVVVc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eFpRVUZaTEVWQlFVVXNXVUZCV1N4RFFVRkRMRU5CUXpORkxFTkJRVU03VVVGRFJpeEpRVUZKTEVOQlFVTXNlVUpCUVhsQ0xFTkJRVU1zY1VKQlFYRkNMRU5CUTJoRUxFZEJRVWNzUlVGQlJTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRmxCUVZrc1JVRkJSU3haUVVGWkxFTkJRVU1zUTBGRE0wVXNRMEZCUXp0SlFVTk9MRU5CUVVNN1NVRkZSRHM3T3pzN1QwRkxSenRKUVVOSUxHMUNRVUZ0UWl4RFFVRkRMRTlCUVdVc1JVRkJSU3hEUVVGVExFVkJRVVVzUTBGQlV6dFJRVU55UkN4TlFVRk5MRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc05FSkJRVFJDTEVOQlF5OUVMRU5CUVVNc1JVRkRSQ3hEUVVGRExFTkJRMG9zUTBGQlF6dFJRVU5HTEVsQlFVa3NUMEZCVHl4SFFVRkhMSGxGUVVFNFFpeEZRVUZGTzFsQlF6RkRMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zYVVWQlFYTkNMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU1zUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1UwRkRPVVE3VVVGRFJDeEpRVUZKTEU5QlFVOHNSMEZCUnl3eVJVRkJaME1zUlVGQlJUdFpRVU0xUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExITkZRVUV5UWl4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRExFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMU5CUTI1Rk8xRkJRMFFzU1VGQlNTeFBRVUZQTEVkQlFVY3NNa1ZCUVdkRExFVkJRVVU3V1VGRE5VTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXh6UlVGQk1rSXNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJReXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0VFFVTnVSVHRSUVVORUxFbEJRVWtzVDBGQlR5eEhRVUZITEhkRlFVRTJRaXhGUVVGRk8xbEJRM3BETEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc2JVVkJRWGRDTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdVMEZEYUVVN1VVRkRSQ3hKUVVGSkxFOUJRVThzUjBGQlJ5eDFSVUZCTkVJc1JVRkJSVHRaUVVONFF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMR3RGUVVGMVFpeEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFOQlF5OUVPMGxCUTB3c1EwRkJRenRKUVVWRU96czdPenRQUVV0SE8wbEJRMGdzYVVKQlFXbENMRU5CUVVNc1QwRkJaU3hGUVVGRkxFTkJRVk1zUlVGQlJTeERRVUZUTzFGQlEyNUVMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1dVRkJXU3hGUVVGRkxFVkJRVVU3V1VGRE0wTXNUMEZCVHp0VFFVTldPMUZCUTBRc1RVRkJUU3hMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEcxQ1FVRnRRaXhEUVVGRExEUkNRVUUwUWl4RFFVTXZSQ3hEUVVGRExFVkJRMFFzUTBGQlF5eERRVU5LTEVOQlFVTTdVVUZEUml4SlFVRkpMRTlCUVU4c1IwRkJSeXg1UlVGQk9FSXNSVUZCUlR0WlFVTXhReXhKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEdsRlFVRnpRaXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xTkJRMmhGTzFGQlEwUXNTVUZCU1N4UFFVRlBMRWRCUVVjc01rVkJRV2RETEVWQlFVVTdXVUZETlVNc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eHpSVUZCTWtJc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF5eEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRUUVVOeVJUdFJRVU5FTEVsQlFVa3NUMEZCVHl4SFFVRkhMREpGUVVGblF5eEZRVUZGTzFsQlF6VkRMRWxCUVVrc1EwRkJReXhoUVVGaExFTkJRVU1zYzBWQlFUSkNMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU1zUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1UwRkRja1U3VVVGRFJDeEpRVUZKTEU5QlFVOHNSMEZCUnl4M1JVRkJOa0lzUlVGQlJUdFpRVU42UXl4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExHMUZRVUYzUWl4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRExFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMU5CUTJ4Rk8xRkJRMFFzU1VGQlNTeFBRVUZQTEVkQlFVY3NkVVZCUVRSQ0xFVkJRVVU3V1VGRGVFTXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhyUlVGQmRVSXNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJReXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0VFFVTnFSVHRKUVVOTUxFTkJRVU03U1VGRlJEczdUMEZGUnp0SlFVTklMR05CUVdNN1VVRkRWaXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhEUVVGRExGbEJRVmtzUlVGQlJTeEZRVUZGTzFsQlF6TkRMRTlCUVU4N1UwRkRWanRSUVVORUxFMUJRVTBzYTBKQlFXdENMRWRCUTNCQ0xFbEJRVWtzUTBGQlF5d3dRa0ZCTUVJc1EwRkJReXhyUWtGQmEwSXNRMEZCUXp0UlFVTjJSQ3hyUWtGQmEwSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1dVRkJXU3hEUVVGRExFVkJRVVVzUTBGQlF6dEpRVU16UXl4RFFVRkRPMGxCUlVRN08wOUJSVWM3U1VGRFNDeGpRVUZqTzFGQlExWXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4WlFVRlpMRVZCUVVVc1JVRkJSVHRaUVVNelF5eFBRVUZQTzFOQlExWTdVVUZEUkN4TlFVRk5MR3RDUVVGclFpeEhRVU53UWl4SlFVRkpMRU5CUVVNc01FSkJRVEJDTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU03VVVGRGRrUXNhMEpCUVd0Q0xFTkJRVU1zUjBGQlJ5eERRVUZETEZsQlFWa3NRMEZCUXl4RlFVRkZMRU5CUVVNN1NVRkRNME1zUTBGQlF6dEpRVVZFT3pzN096dFBRVXRITzBsQlEwZ3NZVUZCWVN4RFFVRkRMRTFCUVdNc1JVRkJSU3hEUVVGVExFVkJRVVVzUTBGQlV6dFJRVU01UXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRmxCUVZrc1JVRkJSU3hGUVVGRk8xbEJRek5ETEU5QlFVODdVMEZEVmp0UlFVTkVMSE5FUVVGVkxFTkJRMDRzWjBWQlFXOUNMRVZCUVVVc1JVRkRkRUlzWjBKQlFXZENMRTFCUVUwc1lVRkJZU3hEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVWQlF6ZERMRU5CUVVNc1EwRkRTaXhEUVVGRE8xRkJRMFlzVFVGQlRTeHJRa0ZCYTBJc1IwRkRjRUlzU1VGQlNTeERRVUZETERCQ1FVRXdRaXhEUVVGRExHdENRVUZyUWl4RFFVRkRPMUZCUTNaRUxHdENRVUZyUWl4RFFVRkRMRWRCUVVjc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF5eERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU40UkN4RFFVRkRPMGxCUlVRN096czdPMDlCUzBjN1NVRkRTQ3hYUVVGWExFTkJRVU1zVFVGQll5eEZRVUZGTEVOQlFWTXNSVUZCUlN4RFFVRlRPMUZCUXpWRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zV1VGQldTeEZRVUZGTEVWQlFVVTdXVUZETTBNc1QwRkJUenRUUVVOV08xRkJRMFFzYzBSQlFWVXNRMEZEVGl4blJVRkJiMElzUlVGQlJTeEZRVU4wUWl4blFrRkJaMElzVFVGQlRTeFhRVUZYTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1JVRkRNME1zUTBGQlF5eERRVU5LTEVOQlFVTTdVVUZEUml4TlFVRk5MRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc05FSkJRVFJDTEVOQlF5OUVMRU5CUVVNc1JVRkRSQ3hEUVVGRExFTkJRMG9zUTBGQlF6dFJRVU5HTEUxQlFVMHNhMEpCUVd0Q0xFZEJRM0JDTEVsQlFVa3NRMEZCUXl3d1FrRkJNRUlzUTBGQlF5eHJRa0ZCYTBJc1EwRkJRenRSUVVOMlJDeHJRa0ZCYTBJc1EwRkJReXhIUVVGSExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTXNRMEZCUXl4TlFVRk5MRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU1zUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOc1JTeERRVUZETzBOQlEwbzdPenM3T3pzN096czdPenM3T3p0QlEzcFhSQ3hyUkVGQmEwUTdRVUZGYkVRN096czdSMEZKUnp0QlFVTkpMRTFCUVUwc1pVRkJaVHM3UVVGRGFrSXNlVUpCUVZNc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRFpDeHhRa0ZCU3l4SFFVRkhMRVZCUVVVc1EwRkJRenRCUVVOWUxIVkNRVUZQTEVkQlFVY3NSVUZCUlN4RFFVRkRPMEZCUTJJc2JVSkJRVWNzUjBGQlJ5eEZRVUZGTEVOQlFVTTdRVUZEVkN3d1FrRkJWU3hIUVVGSExFZEJRVWNzUTBGQlF6dEJRVU5xUWl3MFFrRkJXU3hIUVVGSExFZEJRVWNzUTBGQlF6dEJRVU51UWl4M1FrRkJVU3hIUVVGSExFZEJRVWNzUTBGQlF6czdPenM3T3pzN096czdPenM3T3pzN1FVTmtNVUlzYTBSQlFXdEVPMEZCUlZJN1FVRkxNRUk3UVVGRGNFVTdPMGRCUlVjN1FVRkRTU3hOUVVGTkxHVkJRV1U3U1VGWmVFSTdPenM3VDBGSlJ6dEpRVU5JTEZsQlEwa3NNRUpCUVcxRUxFVkJRMjVFTEc5Q1FVRnBReXhGUVVOcVF5eHRRa0ZCZDBNN1VVRm1OVU1zV1VGQlR5eEhRVUZITEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRla01zWTBGQlV5eEhRVUZITEVsQlFVa3NSMEZCUnl4RlFVRkZMRU5CUVVNN1VVRkRkRUlzYVVKQlFWa3NSMEZCUnl4SFFVRkhMRU5CUVVNN1VVRkZia0lzY1VWQlFYRkZPMUZCUXpkRUxEaENRVUY1UWl4SFFVRkhMRWxCUVVrc05FVkJRVzlDTEVWQlFVVXNRMEZCUXp0UlFWa3pSQ3hKUVVGSkxFTkJRVU1zTUVKQlFUQkNMRWRCUVVjc01FSkJRVEJDTEVOQlFVTTdVVUZETjBRc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4SFFVRkhMRzlDUVVGdlFpeERRVUZETzFGQlEycEVMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNSMEZCUnl4dFFrRkJiVUlzUTBGQlF6dFJRVU12UXl4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVkQlFVY3NiMEpCUVc5Q0xFTkJRVU1zWlVGQlpTeEZRVUZGTEVOQlFVTTdVVUZEYWtVc1RVRkJUU3haUVVGWkxFZEJRVWNzUTBGQlF5eEZRVUZqTEVWQlFVVXNSVUZCUlN4RFFVTndReXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUXpGQ0xFMUJRVTBzVlVGQlZTeEhRVUZITEVOQlFVTXNSVUZCWXl4RlFVRkZMRVZCUVVVc1EwRkRiRU1zU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRSUVVONFFpeE5RVUZOTEZkQlFWY3NSMEZCUnl4RFFVRkRMRVZCUVdNc1JVRkJSU3hGUVVGRkxFTkJRMjVETEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03VVVGRGVrSXNTVUZCU1N4RFFVRkRMR3RDUVVGclFpeERRVUZETEdkQ1FVRm5RaXhEUVVGRExGbEJRVmtzUlVGQlJTeFpRVUZaTEVOQlFVTXNRMEZCUXp0UlFVTnlSU3hKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNWVUZCVlN4RlFVRkZMRlZCUVZVc1EwRkJReXhEUVVGRE8xRkJRMnBGTEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhYUVVGWExFVkJRVVVzVjBGQlZ5eERRVUZETEVOQlFVTTdVVUZEYmtVc1NVRkJTU3hEUVVGRExIbENRVUY1UWl4RFFVRkRMSEZDUVVGeFFpeERRVU5vUkN4SFFVRkhMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNXVUZCV1N4RlFVRkZMRmxCUVZrc1EwRkJReXhEUVVOb1JpeERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMSGxDUVVGNVFpeERRVUZETEhGQ1FVRnhRaXhEUVVOb1JDeEhRVUZITEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zVlVGQlZTeEZRVUZGTEZWQlFWVXNRMEZCUXl4RFFVTTFSU3hEUVVGRE8xRkJRMFlzU1VGQlNTeERRVUZETEhsQ1FVRjVRaXhEUVVGRExIRkNRVUZ4UWl4RFFVTm9SQ3hIUVVGSExFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc1YwRkJWeXhGUVVGRkxGZEJRVmNzUTBGQlF5eERRVU01UlN4RFFVRkRPMUZCUTBZc2MwUkJRVlVzUTBGQlF5eG5SVUZCYjBJc1JVRkJSU3hGUVVGRkxIbENRVUY1UWl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJSV3BGTERoQ1FVRTRRanRSUVVNNVFpeE5RVUZOTEd0Q1FVRnJRaXhIUVVGSExFTkJRVU1zUzBGQmFVSXNSVUZCUlN4RlFVRkZPMWxCUXpkRExFdEJRVXNzUTBGQlF5eGpRVUZqTEVWQlFVVXNRMEZCUXp0UlFVTXpRaXhEUVVGRExFTkJRVU03VVVGRFJpeFJRVUZSTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVjBGQlZ5eEZRVUZGTEd0Q1FVRnJRaXhEUVVGRExFTkJRVU03VVVGRE0wUXNTVUZCU1N4RFFVRkRMSGxDUVVGNVFpeERRVUZETEhGQ1FVRnhRaXhEUVVOb1JDeEhRVUZITEVWQlFVVXNRMEZCUXl4UlFVRlJMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNWMEZCVnl4RlFVRkZMR3RDUVVGclFpeERRVUZETEVOQlEzUkZMRU5CUVVNN1NVRkRUaXhEUVVGRE8wbEJSVVE3TzA5QlJVYzdTVUZEU0N4eFFrRkJjVUk3VVVGRGFrSXNTVUZCU1N4RFFVRkRMSGxDUVVGNVFpeERRVUZETEdGQlFXRXNSVUZCUlN4RFFVRkRPMGxCUTI1RUxFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3hoUVVGaExFTkJRVU1zUzBGQldUdFJRVU4wUWl4TlFVRk5MRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRPMUZCUTJ4RExFbEJRVWtzVFVGQlRTeExRVUZMTEZOQlFWTXNSVUZCUlR0WlFVTjBRaXh6UkVGQlZTeERRVU5PTEdkRlFVRnZRaXhGUVVGRkxFVkJRM1JDTERaQ1FVRTJRaXhGUVVNM1FpeERRVUZETEVOQlEwb3NRMEZCUXp0VFFVTk1PMUZCUTBRc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRlZCUVZVc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlF6dEpRVU5xUkN4RFFVRkRPMGxCUlVRN096dFBRVWRITzBsQlEwZ3NWMEZCVnl4RFFVRkRMRXRCUVZrN1VVRkRjRUlzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGVFUXNkVXBCUVhWS08xRkJRM1pLTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eEZRVUZGTEVOQlFVTTdXVUZETlVJc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzFGQlEycENMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMGdzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzBsQlF6VkRMRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU0N4WlFVRlpMRU5CUVVNc1ZVRkJjMEk3VVVGREwwSXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4WlFVRlpMRVZCUVVVc1JVRkJSVHRaUVVNelF5eFBRVUZQTzFOQlExWTdVVUZEUkN4TFFVRkxMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NWVUZCVlN4RFFVRkRMR05CUVdNc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVTdXVUZEZGtRc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eFZRVUZWTEVOQlFVTXNZMEZCWXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VTBGRGNFUTdVVUZEUkN4elJFRkJWU3hEUVVGRExHZEZRVUZ2UWl4RlFVRkZMRVZCUVVVc1lVRkJZU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlJYSkVMRWxCUVVrc1EwRkJReXhoUVVGaExFTkJRVU1zV1VGQldTeEZRVUZGTEZWQlFWVXNRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJRenRSUVVNMVJDeFZRVUZWTEVOQlFVTXNZMEZCWXl4RlFVRkZMRU5CUVVNN1NVRkRhRU1zUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxGVkJRVlVzUTBGQlF5eFZRVUZ6UWp0UlFVTTNRaXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhEUVVGRExGbEJRVmtzUlVGQlJTeEZRVUZGTzFsQlF6TkRMRTlCUVU4N1UwRkRWanRSUVVORUxITkVRVUZWTEVOQlFVTXNaMFZCUVc5Q0xFVkJRVVVzUlVGQlJTeFhRVUZYTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRia1FzU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4VlFVRlZMRVZCUVVVc1ZVRkJWU3hEUVVGRExHTkJRV01zUTBGQlF5eERRVUZETzFGQlF6RkVMR2xGUVVGcFJUdFJRVU5xUlN4TFFVRkxMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NWVUZCVlN4RFFVRkRMR05CUVdNc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVTdXVUZEZGtRc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eFZRVUZWTEVOQlFVTXNZMEZCWXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VTBGRGJFUTdVVUZEUkN4VlFVRlZMRU5CUVVNc1kwRkJZeXhGUVVGRkxFTkJRVU03U1VGRGFFTXNRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5JTEZkQlFWY3NRMEZCUXl4VlFVRnpRanRSUVVNNVFpeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRzlDUVVGdlFpeERRVUZETEZsQlFWa3NSVUZCUlN4RlFVRkZPMWxCUXpORExFOUJRVTg3VTBGRFZqdFJRVU5FTEhORVFVRlZMRU5CUVVNc1owVkJRVzlDTEVWQlFVVXNSVUZCUlN4WlFVRlpMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGNFUXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhYUVVGWExFVkJRVVVzVlVGQlZTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMUZCUTNCRUxGVkJRVlVzUTBGQlF5eGpRVUZqTEVWQlFVVXNRMEZCUXp0SlFVTm9ReXhEUVVGRE8wbEJSVVFzWVVGQllTeERRVUZETEVsQlFWa3NSVUZCUlN4UFFVRnJRanRSUVVNeFF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRzlDUVVGdlFpeERRVUZETEZsQlFWa3NSVUZCUlN4RlFVRkZPMWxCUXpORExFOUJRVTg3VTBGRFZqdFJRVU5FTEUxQlFVMHNUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4eFFrRkJjVUlzUlVGQlJTeERRVUZETEhGQ1FVRnhRaXhGUVVGRkxFTkJRVU03VVVGRGVrWXNUVUZCVFN4clFrRkJhMElzUjBGRGNFSXNTVUZCU1N4RFFVRkRMREJDUVVFd1FpeERRVUZETEd0Q1FVRnJRaXhEUVVGRE8xRkJSWFpFTEV0QlFVc3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eFBRVUZQTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRk8xbEJRM0pETEUxQlFVMHNWVUZCVlN4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExHZEVRVUZuUkR0WlFVTjBSU3hOUVVGTkxFdEJRVXNzUjBGQlJ5eFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRla0lzVFVGQlRTeERRVUZETEVkQlFVY3NTMEZCU3l4RFFVRkRMRTlCUVU4c1IwRkJSeXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETzFsQlEzUkRMRTFCUVUwc1EwRkJReXhIUVVGSExFdEJRVXNzUTBGQlF5eFBRVUZQTEVkQlFVY3NUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJRenRaUVVOeVF5eHpSRUZCVlN4RFFVTk9MR2RGUVVGdlFpeEZRVUZGTEVWQlEzUkNMRWxCUVVrc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRlZCUVZVc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NSVUZEZGtRc1EwRkJReXhEUVVOS0xFTkJRVU03V1VGRlJpeE5RVUZOTEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNORUpCUVRSQ0xFTkJReTlFTEVOQlFVTXNSVUZEUkN4RFFVRkRMRU5CUTBvc1EwRkJRenRaUVVOR0xGRkJRVkVzU1VGQlNTeEZRVUZGTzJkQ1FVTldMRXRCUVVzc1dVRkJXVHR2UWtGRFlpeHJRa0ZCYTBJc1EwRkJReXhIUVVGSExFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTTdkMEpCUTJwRExGVkJRVlU3ZDBKQlExWXNTMEZCU3l4RFFVRkRMRU5CUVVNN2QwSkJRMUFzUzBGQlN5eERRVUZETEVOQlFVTTdkMEpCUTFBc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRlZCUVZVc1EwRkJRenQzUWtGRGNFTXNTVUZCU1N4RFFVRkRMRmxCUVZrc1IwRkJSeXhEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN2QwSkJRM1pFTEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0eFFrRkRlRUlzUTBGQlF5eERRVUZETzI5Q1FVTklMRTFCUVUwN1owSkJRMVlzUzBGQlN5eFZRVUZWTzI5Q1FVTllMR3RDUVVGclFpeERRVUZETEVkQlFVY3NRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenQzUWtGREwwSXNWVUZCVlR0M1FrRkRWaXhMUVVGTExFTkJRVU1zUTBGQlF6dDNRa0ZEVUN4TFFVRkxMRU5CUVVNc1EwRkJRenQzUWtGRFVDeEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zVlVGQlZTeERRVUZETzNkQ1FVTndReXhKUVVGSkxFTkJRVU1zV1VGQldTeEhRVUZITEV0QlFVc3NRMEZCUXl4TFFVRkxPM2RDUVVNdlFpeExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdjVUpCUTNoQ0xFTkJRVU1zUTBGQlF6dHZRa0ZEU0N4TlFVRk5PMmRDUVVOV0xFdEJRVXNzVjBGQlZ6dHZRa0ZEV2l4clFrRkJhMElzUTBGQlF5eEhRVUZITEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNN2QwSkJRMmhETEZWQlFWVTdkMEpCUTFZc1MwRkJTeXhEUVVGRExFTkJRVU03ZDBKQlExQXNTMEZCU3l4RFFVRkRMRU5CUVVNN2QwSkJRMUFzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1MwRkJTeXhEUVVGRExGVkJRVlVzUTBGQlF6dDNRa0ZEY0VNc1NVRkJTU3hEUVVGRExGbEJRVmtzUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03ZDBKQlEzWkVMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenR4UWtGRGVFSXNRMEZCUXl4RFFVRkRPMjlDUVVOSUxFMUJRVTA3WVVGRFlqdFRRVU5LTzBsQlEwd3NRMEZCUXp0RFFVTktPenM3T3pzN096czdPenM3T3pzN1FVTXZUVVFzYTBSQlFXdEVPMEZCUzJ4RU96dEhRVVZITzBGQlEwa3NUVUZCVFN4dFFrRkJiVUk3U1VGSk5VSTdPMDlCUlVjN1NVRkRTQ3haUVVGWkxEQkNRVUZ0UkR0UlFVTXpSQ3hKUVVGSkxFTkJRVU1zTUVKQlFUQkNMRWRCUVVjc01FSkJRVEJDTEVOQlFVTTdVVUZETjBRc1NVRkJTU3hEUVVGRExGZEJRVmNzUjBGQlJ5eEZRVUZGTEVOQlFVTTdTVUZETVVJc1EwRkJRenRKUVVWRU96czdPenRQUVV0SE8wbEJRMGdzVFVGQlRTeERRVUZETEdWQlFXVXNRMEZCUXl4UFFVRm5RanRSUVVOdVF5eFBRVUZQTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUTJJc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF6dFpRVU5ZTEU5QlFVOHNSVUZCUlN4UFFVRlBMRU5CUVVNc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUXk5Q0xFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlEwNHNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJRenRuUWtGRFdDeFBRVUZQTEVWQlFVVXNRMEZCUXl4RFFVRkRMRTlCUVU4N1owSkJRMnhDTEU5QlFVOHNSVUZCUlN4RFFVRkRMRU5CUVVNc1QwRkJUenRuUWtGRGJFSXNTMEZCU3l4RlFVRkZMRU5CUVVNc1EwRkJReXhMUVVGTE8yRkJRMnBDTEVOQlFVTXNRMEZEVEN4RFFVTktPMWxCUTBRc1NVRkJTU3hGUVVGRkxFOUJRVThzUTBGQlF5eEpRVUZKTzFOQlEzSkNMRU5CUVVNc1EwRkRUQ3hEUVVGRE8wbEJRMDRzUTBGQlF6dEpRVVZFTEZsQlFWa3NRMEZEVWl4TlFVRnhRaXhGUVVOeVFpeExRVUZqTEVWQlEyUXNVVUZCTUVJN1VVRkZNVUlzU1VGQlNTeE5RVUZOTEVOQlFVTXNUMEZCVHl4RlFVRkZPMWxCUTJoQ0xFMUJRVTBzVjBGQlZ5eEhRVUZITEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVGRExGTkJRVk1zUlVGQlJTeFJRVUZSTEVOQlFVTXNRMEZCUXp0WlFVTTVSQ3hKUVVGSkxFTkJRVU1zVjBGQlZ5eEZRVUZGTzJkQ1FVTmtMRTlCUVU4N1lVRkRWanRaUVVWRUxFbEJRVWtzVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXp0WlFVTm1MRWxCUVVrc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eFJRVUZSTEVOQlFVTXNWVUZCVlN4RFFVRkRMRVZCUVVVN1owSkJRM1JETEUxQlFVMHNSMEZCUnl4RFFVRkRMRU5CUVVNN1lVRkRaRHRwUWtGQlRTeEpRVUZKTEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1VVRkJVU3hEUVVGRExHTkJRV01zUTBGQlF5eEZRVUZGTzJkQ1FVTnFSQ3hOUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZETzJGQlEyUTdXVUZEUkN4dFJrRkJiVVk3V1VGRGJrWXNTVUZCU1N4RFFVRkRMREJDUVVFd1FpeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFZEJRVWNzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0blFrRkRMMFFzVFVGQlRUdGhRVU5VTEVOQlFVTXNRMEZCUXp0WlFVVklMSFZDUVVGMVFqdFpRVU4yUWl4SlFVRkpMRlZCUVZVc1IwRkJSeXhEUVVGRExFTkJRVU03V1VGRGJrSXNVVUZCVVN4TlFVRk5MRU5CUVVNc1ZVRkJWU3hGUVVGRk8yZENRVU4yUWl4TFFVRkxMRTFCUVUwN2IwSkJRMUFzVlVGQlZTeEhRVUZITEVOQlFVTXNRMEZCUXp0dlFrRkRaaXhOUVVGTk8yZENRVU5XTEV0QlFVc3NUMEZCVHp0dlFrRkRVaXhWUVVGVkxFZEJRVWNzUTBGQlF5eERRVUZETzI5Q1FVTm1MRTFCUVUwN1lVRkRZanRaUVVWRUxEUkNRVUUwUWp0WlFVTTFRaXhOUVVGTkxFMUJRVTBzUjBGQlJ5eFhRVUZYTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTFCUVUwc1EwRkJRenRaUVVNMVF5eE5RVUZOTEVkQlFVY3NSMEZCUnl4RlFVRkZMRU5CUVVNN1dVRkRaaXhMUVVGTExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1JVRkJSU3hGUVVGRkxFTkJRVU1zUlVGQlJTeEZRVUZGTzJkQ1FVTjZRaXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NTVUZCU1N4WlFVRlpMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8yRkJRemRETzFsQlJVUXNhMEpCUVd0Q08xbEJRMnhDTEVsQlFVa3NRMEZCUXl3d1FrRkJNRUlzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhIUVVGSExFTkJRVU1zZFVKQlFYVkNMRU5CUVVNc1EwRkJRenRuUWtGRE5VVXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXp0blFrRkRMMElzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF6dG5Ra0ZETDBJc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJRenRuUWtGRGFFTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXp0blFrRkRhRU1zVlVGQlZUdGhRVU5pTEVOQlFVTXNRMEZCUXp0WlFVVklMSEZEUVVGeFF6dFpRVU55UXl4SlFVRkpMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zVlVGQlZTeERRVUZETEV0QlFVc3NVMEZCVXl4RlFVRkZPMmRDUVVNMVF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRlZCUVZVc1EwRkJReXhIUVVGSE8yOUNRVU16UWl4VFFVRlRMRVZCUVVVc1UwRkJVenR2UWtGRGNFSXNXVUZCV1N4RlFVRkZMRk5CUVZNN2IwSkJRM1JETEVWQlFVVXNSVUZCUlN4VFFVRlRPMmxDUVVORUxFTkJRVU03WjBKQlEwWXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF5eFRRVUZUTEVkQlFVY3NiVUpCUVcxQ0xFTkJRVU1zWlVGQlpTeERRVUZETEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenRoUVVOb1J6dFpRVVZFTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU1zV1VGQldTeEhRVUZITEcxQ1FVRnRRaXhEUVVGRExHVkJRV1VzUTBGQlF5eE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1dVRkZhRWNzVFVGQlRTeFZRVUZWTEVkQlFVY3NTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF6dFpRVU5vUkN4TlFVRk5MRk5CUVZNc1IwRkJSeXhWUVVGVkxFTkJRVU1zV1VGQldTeERRVUZETzFsQlF6RkRMRTFCUVUwc1UwRkJVeXhIUVVGSExGVkJRVlVzUTBGQlF5eFRRVUZUTEVOQlFVTTdXVUZEZGtNc2RVSkJRWFZDTzFsQlEzWkNMRXRCUVVzc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUnl4VFFVRlRMRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlR0blFrRkRMME1zVFVGQlRTeFZRVUZWTEVkQlFVY3NVMEZCVXl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZEZUVNc1RVRkJUU3hWUVVGVkxFZEJRVWNzVTBGQlV5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRuUWtGRmVFTXNTVUZCU1N4VlFVRlZMRU5CUVVNc1QwRkJUeXhGUVVGRk8yOUNRVU53UWl4UlFVRlJPMjlDUVVOU0xFbEJRVWtzVVVGQlVTeEhRVUZITEZWQlFWVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMjlDUVVNeFF5eEpRVUZKTEVOQlFVTXNNRUpCUVRCQ0xFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1IwRkJSeXhEUVVGRExHbENRVUZwUWl4RFFVRkRMRU5CUVVNc1EwRkJReXhWUVVGVkxFVkJRVVVzUTBGQlF5eEZRVUZGTEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNN2FVSkJRM2hITzNGQ1FVRk5MRWxCUVVrc1ZVRkJWU3hEUVVGRExFOUJRVThzUlVGQlJUdHZRa0ZETTBJc1NVRkJTU3hEUVVGRExEQkNRVUV3UWl4RFFVRkRMR3RDUVVGclFpeERRVUZETEVkQlFVY3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eERRVUZETEVOQlFVTXNWVUZCVlN4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzJsQ1FVTnNSenRuUWtGRlJDeEpRVUZKTEZWQlFWVXNRMEZCUXl4UFFVRlBMRVZCUVVVN2IwSkJRM0JDTEZWQlFWVTdiMEpCUTFZc1NVRkJTU3hSUVVGUkxFZEJRVWNzVlVGQlZTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdiMEpCUXpGRExFbEJRVWtzUTBGQlF5d3dRa0ZCTUVJc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4SFFVRkhMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNRMEZCUXl4RFFVRkRMRlZCUVZVc1JVRkJSU3hEUVVGRExFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXp0cFFrRkRlRWM3Y1VKQlEwa3NTVUZCU1N4VlFVRlZMRU5CUVVNc1QwRkJUeXhGUVVGRk8yOUNRVU42UWl4SlFVRkpMRU5CUVVNc01FSkJRVEJDTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUjBGQlJ5eERRVUZETEhWQ1FVRjFRaXhEUVVGRExFTkJRVU1zUTBGQlF5eFZRVUZWTEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03YVVKQlEzWkhPMkZCUTBvN1dVRkZSQ3cwUWtGQk5FSTdXVUZETlVJc1MwRkJTeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZPMmRDUVVNMVF5eEpRVUZKTEZsQlFWa3NSMEZCUnl4VFFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzJkQ1FVTnlReXhKUVVGSkxHRkJRV0VzUjBGQlJ5eFRRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVU4wUXl3MlEwRkJOa003WjBKQlF6ZERMRWxCUVVjc1dVRkJXU3hKUVVGSkxHRkJRV0VzUlVGQlJUdHZRa0ZET1VJc1NVRkJTU3hEUVVGRExEQkNRVUV3UWl4RFFVRkRMR3RDUVVGclFpeERRVUZETEVkQlFVY3NRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJReXhEUVVGRExGVkJRVlVzUlVGQlJTeERRVUZETEVWQlFVVXNXVUZCV1N4RFFVRkRMRU5CUVVNc1EwRkJRenRwUWtGRGNrYzdZVUZEU2p0WlFVVkVMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTXNVMEZCVXl4SFFVRkhMRk5CUVZNc1EwRkJRenRUUVVOMFJEdEpRVU5NTEVOQlFVTTdRMEZEU2pzN096czdPenM3T3pzN096czdPMEZETDBsRUxHdEVRVUZyUkR0QlFVVXpReXhOUVVGTkxFMUJRVTA3U1VGSFpqczdPMDlCUjBjN1NVRkRTQ3hOUVVGTkxFTkJRVU1zWVVGQllUdFJRVU5vUWl4TlFVRk5MRXRCUVVzc1IwRkJSeXhKUVVGSkxFdEJRVXNzUlVGQlJTeERRVUZETzFGQlF6RkNMRWxCUVVrc1kwRkJZeXhIUVVGSExIRkRRVUZ4UXl4RFFVRkRPMUZCUlRORUxHMUNRVUZ0UWp0UlFVTnVRaXhKUVVGSkxFdEJRVXNzUTBGQlF5eExRVUZMTEVWQlFVVTdXVUZEWWl4alFVRmpMRWRCUVVjc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1VVRkJVU3hGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETzFOQlEycEZPMUZCUlVRc1QwRkJUeXhqUVVGakxFTkJRVU03U1VGRE1VSXNRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGdzVFVGQlRTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExHVkJRWFZDTzFGQlF6ZERMRWxCUVVrc1NVRkJTU3hEUVVGRExHVkJRV1VzU1VGQlNTeEpRVUZKTEVWQlFVVTdXVUZET1VJc1NVRkJTU3hEUVVGRExHVkJRV1VzUjBGQlJ5eGxRVUZsTEVOQlFVTTdVMEZETVVNN1NVRkRUQ3hEUVVGRE8wbEJSVVE3T3pzN08wOUJTMGM3U1VGRFNDeE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRXRCUVdFc1JVRkJSU3hQUVVGbExFVkJRVVVzVTBGQmEwSTdVVUZEZWtRc1NVRkJTU3hUUVVGVExFZEJRVWNzU1VGQlNTeERRVUZETEdWQlFXVXNSVUZCUlR0WlFVTnNReXhQUVVGUE8xTkJRMVk3VVVGRlJDeE5RVUZOTEZsQlFWa3NSMEZCUnl4dlFrRkJiMElzVDBGQlR5eGhRVUZoTEV0QlFVc3NSVUZCUlN4RFFVRkRPMUZCUTNKRkxFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNN1NVRkRPVUlzUTBGQlF6dEpRVVZFT3pzN096dFBRVXRITzBsQlEwZ3NUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGaExFVkJRVVVzVDBGQlpTeEZRVUZGTEZOQlFXdENPMUZCUXpGRUxFbEJRVWtzVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXl4bFFVRmxMRVZCUVVVN1dVRkRiRU1zVDBGQlR6dFRRVU5XTzFGQlJVUXNUVUZCVFN4WlFVRlpMRWRCUVVjc2NVSkJRWEZDTEU5QlFVOHNSVUZCUlN4RFFVRkRPMUZCUTNCRUxFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNN1NVRkRMMElzUTBGQlF6dEpRVVZFT3pzN08wOUJTVWM3U1VGRFNDeE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRXRCUVdFc1JVRkJSU3hQUVVGbE8xRkJRM1pETEUxQlFVMHNXVUZCV1N4SFFVRkhMSE5DUVVGelFpeFBRVUZQTEdGQlFXRXNTMEZCU3l4RlFVRkZMRU5CUVVNN1VVRkRka1VzVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJRenRKUVVOb1F5eERRVUZETzBsQlJVUTdPenM3VDBGSlJ6dEpRVU5JTEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1MwRkJZU3hGUVVGRkxFOUJRV1U3VVVGRGVrTXNUVUZCVFN4WlFVRlpMRWRCUVVjc01rSkJRVEpDTEV0QlFVc3NWVUZCVlN4UFFVRlBMRVZCUVVVc1EwRkJRenRSUVVONlJTeFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRE8wbEJReTlDTEVOQlFVTTdPMEZCTTBWTkxITkNRVUZsTEVkQlFVY3NRMEZCUXl4RFFVRkRPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRFNDOUNMR3RFUVVGclJEdEJRVTEyUWp0QlFVVXlRanRCUVVOT08wRkJSVEJDTzBGQlF6VkNPMEZCUTBZN1FVRkZSanRCUVU5dVF5eE5RVUZOTEdWQlFXVTdTVUZsZUVJN1VVRkRTU3hKUVVGSkxFTkJRVU1zYVVKQlFXbENMRWRCUVVjc1NVRkJTU3dyUkVGQmFVSXNSVUZCUlN4RFFVRkRPMUZCUTJwRUxFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1IwRkJSeXhKUVVGSkxDdEVRVUZwUWl4RlFVRkZMRU5CUVVNN1VVRkRha1FzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhIUVVGSExFbEJRVWtzSzBSQlFXZENMRVZCUVVVc1EwRkJRenRSUVVNdlF5eEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFZEJRVWNzU1VGQlNTeHBSVUZCYTBJc1JVRkJSU3hEUVVGRE8xRkJRMjVFTEVsQlFVa3NRMEZCUXl4WlFVRlpMRWRCUVVjc1NVRkJTU3gxUkVGQldTeEZRVUZGTEVOQlFVTTdVVUZEZGtNc1NVRkJTU3hEUVVGRExGZEJRVmNzUjBGQlJ5eEpRVUZKTEhGRVFVRlhMRVZCUVVVc1EwRkJRenRSUVVOeVF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRWxCUVVrc1IwRkJSeXhGUVVGclFpeERRVUZETzBsQlF6VkRMRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU0N4WlFVRlpMRU5CUVVNc1kwRkJPRUk3VVVGRGRrTXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1IwRkJSeXhKUVVGSkxFdEJRVXNzUlVGQmFVSXNRMEZCUXp0UlFVTnNSQ3hKUVVGSkxFTkJRVU1zWjBKQlFXZENMRWRCUVVjc1NVRkJTU3hMUVVGTExFVkJRV2xDTEVOQlFVTTdVVUZEYmtRc1NVRkJTU3hEUVVGRExHTkJRV01zUjBGQlJ5eEpRVUZKTEV0QlFVc3NSVUZCYzBJc1EwRkJRenRSUVVWMFJDeGpRVUZqTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1NVRkJTU3hGUVVGRkxFVkJRVVU3V1VGRE5VSXNUVUZCVFN4SlFVRkpMRWRCUVcxQ0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTTdXVUZGZGtNc1VVRkJVU3hKUVVGSkxFVkJRVVU3WjBKQlExWXNTMEZCU3l4blFrRkJaMEk3YjBKQlEycENMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenR2UWtGREwwSXNUVUZCVFR0blFrRkRWaXhMUVVGTExHRkJRV0U3YjBKQlEyUXNUVUZCVFR0blFrRkRWaXhMUVVGTExFOUJRVTg3YjBKQlExSXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dHZRa0ZEZGtJc1RVRkJUVHRuUWtGRFZpeExRVUZMTEdOQlFXTTdiMEpCUTJZc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8yOUNRVU0zUWl4TlFVRk5PMmRDUVVOV0xFdEJRVXNzWVVGQllUdHZRa0ZEWkN4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN2IwSkJRelZDTEUxQlFVMDdaMEpCUTFZc1MwRkJTeXhwUWtGQmFVSTdiMEpCUTJ4Q0xFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dHZRa0ZEYUVNc1RVRkJUVHRuUWtGRFZpeExRVUZMTEdOQlFXTTdiMEpCUTJZc1RVRkJUVHRuUWtGRFZpeExRVUZMTEdWQlFXVTdiMEpCUTJoQ0xFMUJRVTA3WjBKQlExWXNTMEZCU3l4alFVRmpPMjlDUVVObUxFMUJRVTA3WjBKQlExWXNTMEZCU3l4cFFrRkJhVUk3YjBKQlEyeENMRTFCUVUwN1owSkJRMVlzUzBGQlN5eHJRa0ZCYTBJN2IwSkJRMjVDTEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0dlFrRkRha01zVFVGQlRUdG5Ra0ZEVml4TFFVRkxMRzlDUVVGdlFqdHZRa0ZEY2tJc1RVRkJUVHRuUWtGRFZpeExRVUZMTEhGQ1FVRnhRanR2UWtGRGRFSXNTVUZCU1N4RFFVRkRMRzlDUVVGdlFpeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMjlDUVVOb1F5eE5RVUZOTzJkQ1FVTldMRXRCUVVzc1QwRkJUenR2UWtGRFVpeEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8yOUNRVU4yUWl4TlFVRk5PMmRDUVVOV0xFdEJRVXNzVjBGQlZ6dHZRa0ZEV2l4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzI5Q1FVTXpRaXhOUVVGTk8yZENRVU5XTEV0QlFVc3NVVUZCVVR0dlFrRkRWQ3hKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMjlDUVVONFFpeE5RVUZOTzJkQ1FVTldPMjlDUVVOSkxIZEVRVUZaTEVOQlFVTXNaMFZCUVc5Q0xFVkJRVVVzUlVGQlJTeHhRa0ZCY1VJc1EwRkJReXhEUVVGRE8yOUNRVU0xUkN4elJFRkJWU3hEUVVGRExHZEZRVUZ2UWl4RlFVRkZMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03YjBKQlEzcERMRTFCUVUwN1lVRkRZanRSUVVOTUxFTkJRVU1zUTBGQlF5eERRVUZETzBsQlExQXNRMEZCUXp0SlFVVkVPenM3TzA5QlNVYzdTVUZEU0N4WlFVRlpMRU5CUVVNc1NVRkJhVUk3VVVGRE1VSXNTVUZCU1N4RFFVRkRMRmRCUVZjc1IwRkJSeXhKUVVGSkxFTkJRVU03U1VGRE5VSXNRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5JTEcxQ1FVRnRRaXhEUVVGRExFbEJRWGRDTzFGQlJYaERMSEZFUVVGeFJEdFJRVU55UkN4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTTdTVUZGYkVNc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMR2xDUVVGcFFpeERRVUZETEVsQlFYTkNPMUZCUTNCRExFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhoUVVGaExFZEJRVWNzU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXp0UlFVTjZSQ3hKUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTTdVVUZEYWtRc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMSEZDUVVGeFFqdFpRVU4yUXl4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTTdVVUZETDBJc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRVZCUVVVc1IwRkJSeXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETzFGQlEyNURMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF6dFJRVU42UXl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNaMEpCUVdkQ0xFZEJRVWNzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRE8xRkJReTlFTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eFpRVUZaTEVkQlFVY3NTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJRenRSUVVOMlJDeEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVVVGQlVTeEhRVUZITEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNN1VVRkRMME1zU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRPMUZCUTNwRExFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhUUVVGVExFZEJRVWNzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXp0SlFVTnlSQ3hEUVVGRE8wbEJSVVE3T3p0UFFVZEhPMGxCUTBnc2IwSkJRVzlDTEVOQlFVTXNTVUZCYlVJN1VVRkRjRU1zVFVGQlRTeGpRVUZqTEVkQlFVY3NTVUZCU1N4NVJFRkJZU3hGUVVGRkxFTkJRVU03VVVGRE0wTXNZMEZCWXl4RFFVRkRMRXRCUVVzc1IwRkJSeXhwUWtGQmFVSXNRMEZCUXp0UlFVTjZReXhqUVVGakxFTkJRVU1zVDBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNN1VVRkRkRU1zWTBGQll5eERRVUZETEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRE8xRkJRMmhETEdOQlFXTXNRMEZCUXl4UlFVRlJMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF6dFJRVU40UXl4alFVRmpMRU5CUVVNc1lVRkJZU3hIUVVGSExFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTTdVVUZEYkVRc1kwRkJZeXhEUVVGRExFVkJRVVVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRPMUZCUXpWQ0xHTkJRV01zUTBGQlF5eGhRVUZoTEVkQlFVY3NTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJRenRSUVVOc1JDeGpRVUZqTEVOQlFVTXNWMEZCVnl4SFFVRkhMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU03VVVGRE9VTXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJReXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTTdTVUZET1VNc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMSEZDUVVGeFFpeERRVUZETEVsQlFXMUNPMUZCUTNKRExFMUJRVTBzWlVGQlpTeEhRVUZITEVsQlFVa3NlVVJCUVdFc1JVRkJSU3hEUVVGRE8xRkJRelZETEdWQlFXVXNRMEZCUXl4TFFVRkxMRWRCUVVjc2EwSkJRV3RDTEVOQlFVTTdVVUZETTBNc1pVRkJaU3hEUVVGRExFOUJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRPMUZCUTNaRExHVkJRV1VzUTBGQlF5eEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJRenRSUVVOcVF5eGxRVUZsTEVOQlFVTXNVVUZCVVN4SFFVRkhMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU03VVVGRGVrTXNaVUZCWlN4RFFVRkRMRVZCUVVVc1IwRkJSeXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETzFGQlF6ZENMR1ZCUVdVc1EwRkJReXhoUVVGaExFZEJRVWNzU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXp0UlFVTnVSQ3hsUVVGbExFTkJRVU1zWVVGQllTeEhRVUZITEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNN1VVRkRia1FzWlVGQlpTeERRVUZETEZkQlFWY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1YwRkJWenRSUVVNNVF5eEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4RFFVRkRPMGxCUTJoRUxFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3huUWtGQlowSXNRMEZCUXl4SlFVRnhRanRSUVVOc1F5eFJRVUZSTEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVN1dVRkRaaXhMUVVGTExFOUJRVTg3WjBKQlExSXNOa1JCUVRaRU8yZENRVU0zUkN4dFJVRkJiVVU3WjBKQlEyNUZMSE5DUVVGelFqdG5Ra0ZEZEVJc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4SFFVRkhMRWxCUVc5RExFTkJRVU03WjBKQlJUbEVMRWxCUVVrc1NVRkJTU3hEUVVGRExHTkJRV01zU1VGQlNTeFRRVUZUTEVWQlFVVTdiMEpCUTJ4RExFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhQUVVGUE8zZENRVU14UWl4RFFVRkRMRU5CUVVNN05FSkJRMFVzUTBGQlF5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zWVVGQllUdG5RMEZEYWtNc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUXpzMFFrRkRNME1zUTBGQlF5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zVTBGQlV6dG5RMEZETjBJc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXp0dlFrRkRka01zU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExFOUJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVTjJReXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1QwRkJUeXhEUVVOcVF5eERRVUZETzJsQ1FVTk1PMmRDUVVORUxFbEJRVWtzUTBGQlF5eGpRVUZqTEhGQ1FVRlJMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUlN4RFFVRkRPMmRDUVVOd1JDeE5RVUZOTzFsQlExWXNTMEZCU3l4UFFVRlBPMmRDUVVOU0xEWkVRVUUyUkR0blFrRkROMFFzYlVWQlFXMUZPMmRDUVVOdVJTeHpRa0ZCYzBJN1owSkJRM1JDTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUjBGQlJ5eEpRVUZ2UXl4RFFVRkRPMmRDUVVVNVJDeEpRVUZKTEVsQlFVa3NRMEZCUXl4alFVRmpMRWxCUVVrc1UwRkJVeXhGUVVGRk8yOUNRVU5zUXl4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNUMEZCVHp0M1FrRkRNVUlzUTBGQlF5eERRVUZET3pSQ1FVTkZMRU5CUVVNc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMR0ZCUVdFN1owTkJRMnBETEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVU03TkVKQlF6TkRMRU5CUVVNc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRk5CUVZNN1owTkJRemRDTEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU03YjBKQlEzWkRMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGRGRrTXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEU5QlFVOHNRMEZEYWtNc1EwRkJRenRwUWtGRFREdG5Ra0ZEUkN4SlFVRkpMRU5CUVVNc1kwRkJZeXh4UWtGQlVTeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVVVzUTBGQlF6dG5Ra0ZEY0VRc1RVRkJUVHRaUVVOV08yZENRVU5KTEhORVFVRlZMRU5CUVVNc1owVkJRVzlDTEVWQlFVVXNSVUZCUlN4eFFrRkJjVUlzUTBGQlF5eERRVUZETzJkQ1FVTXhSQ3hOUVVGTk8xTkJRMkk3U1VGRFRDeERRVUZETzBsQlJVUTdPenRQUVVkSE8wbEJRMGdzYjBKQlFXOUNMRU5CUVVNc1NVRkJjMEk3VVVGRGRrTXNVVUZCVVN4SlFVRkpMRU5CUVVNc1NVRkJTU3hGUVVGRk8xbEJRMllzUzBGQlN5eFBRVUZQTzJkQ1FVTlNMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4VFFVRlRMRWRCUVVjc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF6dG5Ra0ZEYmtRc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRVZCUVVVc1IwRkJSeXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETzJkQ1FVTnlReXhKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1QwRkJUeXhIUVVGSExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTTdaMEpCUXk5RExFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhYUVVGWExFZEJRVWNzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXp0blFrRkRka1FzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExHVkJRV1VzUjBGQlJ5eEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRPMmRDUVVNdlJDeEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNN1owSkJRMjVFTEUxQlFVMDdXVUZEVml4TFFVRkxMRTlCUVU4N1owSkJRMUlzVFVGQlRUdFpRVVZXTzJkQ1FVTkpMRTFCUVUwN1UwRkRZanRKUVVOTUxFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3hYUVVGWExFTkJRVU1zU1VGQmRVSTdVVUZETDBJc2NVUkJRWEZFTzFGQlEzSkVMRWxCUTBrc1NVRkJTU3hEUVVGRExFbEJRVWtzUzBGQlN5eFBRVUZQTzFsQlEzSkNMRU5CUVVNc1NVRkJTU3hEUVVGRExHVkJRV1VzUzBGQlN5eGhRVUZoTEVsQlFVa3NTVUZCU1N4RFFVRkRMRWxCUVVrc1MwRkJTeXhQUVVGUExFTkJRVU1zUlVGRGJrVTdXVUZEUlN4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNZVUZCWVN4SFFVRkhMRWxCUVVrc1EwRkJReXhoUVVGaExFTkJRVU03V1VGRE1VUXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEdOQlFXTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRE8xbEJRelZFTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eFhRVUZYTEVkQlFVY3NTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJRenRaUVVOMFJDeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zVlVGQlZTeEhRVUZITEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNN1UwRkRka1E3U1VGRFRDeERRVUZETzBsQlJVUXNaVUZCWlN4RFFVRkRMRWxCUVhWQ08xRkJRMjVETEVsQlFVa3NRMEZCUXl4alFVRmpMRWRCUVVjc1NVRkJTU3hEUVVGRE8wbEJReTlDTEVOQlFVTTdTVUZIUkN4WFFVRlhMRU5CUVVNc1NVRkJaMEk3VVVGRGVFSXNUVUZCVFN4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF6dFJRVU40UWl4TlFVRk5MRk5CUVZNc1IwRkJSeXhIUVVGSExFbEJRVWtzUTBGQlF5eFJRVUZSTzJGQlF6ZENMRTlCUVU4c1EwRkJReXhSUVVGUkxFVkJRVVVzUlVGQlJTeERRVUZETzJGQlEzSkNMRTlCUVU4c1EwRkJReXhSUVVGUkxFVkJRVVVzUlVGQlJTeERRVUZETEVkQlEzUkNMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF5eERRVUZETEVsQlFVa3NTVUZCU1N4RFFVRkRMRmRCUVZjc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eEZRVU5vUkN4RlFVRkZMRU5CUVVNN1VVRkRTQ3hKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4UFFVRlBMRVZCUVVVc1UwRkJVeXhEUVVGRExFTkJRVU03U1VGRGVFTXNRMEZCUXp0SlFVVkVMSFZDUVVGMVFpeERRVU51UWl4alFVRnpRaXhGUVVOMFFpeGxRVUVyUWl4RlFVTXZRaXhwUWtGQmVVSTdVVUZGZWtJc1RVRkJUU3hUUVVGVExFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NSVUZCUlN4SFFVRkhMR05CUVdNc1EwRkJRenRSUVVNNVF5eEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhKUVVGSkxFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTTdZVUZETVVNc1YwRkJWeXhGUVVGRk8yRkJRMklzVFVGQlRTeERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNN1lVRkRZaXhSUVVGUkxFVkJRVVVzUTBGQlF6dFJRVVZvUWl4TlFVRk5MRzFDUVVGdFFpeEhRVU55UWl4bFFVRmxMRXRCUVVzc1NVRkJTVHRaUVVOd1FpeERRVUZETEVOQlFVTXNZMEZCWXp0WlFVTm9RaXhEUVVGRExFTkJRVU1zWlVGQlpUdG5Ra0ZEYWtJc1EwRkJReXhEUVVGRExFMUJRVTA3WjBKQlExSXNRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJRenRSUVVOc1FpeEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRzFDUVVGdFFpeEhRVUZITEcxQ1FVRnRRaXhEUVVGRE8xRkJSVFZFTEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc2FVSkJRV2xDTEVkQlFVY3NhVUpCUVdsQ0xFTkJRVU03U1VGRE5VUXNRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5JTEZGQlFWRXNRMEZCUXl4TFFVRmpPMUZCUTI1Q0xFOUJRVThzVDBGQlR5eExRVUZMTEV0QlFVc3NVVUZCVVN4SlFVRkpMRkZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEpRVU40UkN4RFFVRkRPMGxCUlVRN096dFBRVWRITzBsQlEwa3NjMEpCUVhOQ08xRkJSWHBDTEd0RVFVRnJSRHRSUVVOc1JDeEpRVUZKTEVsQlFVa3NRMEZCUXl4alFVRmpMRVZCUVVNN1dVRkRjRUlzZVVWQlFYbEZPMWxCUTNwRkxFOUJRVThzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhoUVVGaExFVkJRVVVzUlVGQlJTeERRVUZETEdGQlFXRXNRMEZCUXl4RlFVRkZMRXRCUVVzc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eDFRa0ZCZFVJc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF6dFRRVU01U0R0UlFVVkVMREpEUVVFeVF6dFJRVU16UXl4UFFVRlBMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNZVUZCWVN4RlFVRkZMRVZCUVVVc1EwRkJReXhoUVVGaExFTkJRVU1zVVVGQlVTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMGxCUTNKR0xFTkJRVU03UTBGRFNqczdPenM3T3pzN096czdPenM3TzBGRE0xVkVMR3RFUVVGclJEdEJRVVZzUkRzN1IwRkZSenRCUVVOSkxFMUJRVTBzYTBKQlFXdENPME5CYTBJNVFqczdPenM3T3pzN096czdPenM3TzBGRGRrSkVMR3RFUVVGclJEdEJRVVZzUkRzN1IwRkZSenRCUVVOSkxFMUJRVTBzWVVGQllUdERRVk42UWpzN096czdPenM3T3pzN096czdPMEZEWkVRc2EwUkJRV3RFTzBGQlJXeEVPenRIUVVWSE8wRkJRMGtzVFVGQlRTeG5Ra0ZCWjBJN1EwRlhOVUk3T3pzN096czdPenM3T3pzN096czdPMEZEYUVKRUxHdEVRVUZyUkR0QlFVVnNSRHM3UjBGRlJ6dEJRVU5KTEUxQlFVMHNhVUpCUVdsQ08wTkJiME0zUWp0QlFVVkVPenRIUVVWSE8wRkJRMGtzVFVGQlRTeHBRa0ZCYVVJN1EwRXlRemRDTzBGQlJVUTdPMGRCUlVjN1FVRkRTU3hOUVVGTkxHVkJRV1U3UTBFeVJETkNPenM3T3pzN096czdPenM3T3pzN08wRkRla3BFTEd0RVFVRnJSRHRCUVVWc1JEczdSMEZGUnp0QlFVTkpMRTFCUVUwc2EwSkJRV3RDTzBOQlR6bENPMEZCUlVRN08wZEJSVWM3UVVGRFNTeE5RVUZOTEdkQ1FVRm5RanREUVZFMVFqczdPenM3T3pzN096czdPenM3T3pzN096czdRVU42UWtRc2EwUkJRV3RFT3pzN096czdPenM3TzBGQlJWSTdRVUZEZVVJN1FVRkRaanRCUVVOSk8wRkJRMW83UVVGRk5VTTdPMGRCUlVjN1FVRkRTU3hOUVVGTkxIZENRVUYzUWp0SlFVOXFRenM3T3p0UFFVbEhPMGxCUTBnc1dVRkRTU3hQUVVGNVFpeEZRVU42UWl4TlFVRmpMRVZCUTJRc1kwRkJjMEk3VVVGRmRFSXNTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhOUVVGTkxFTkJRVU03VVVGRGNrSXNTVUZCU1N4RFFVRkRMRzlDUVVGdlFpeERRVUZETEU5QlFVOHNSVUZCUlN4alFVRmpMRU5CUVVNc1EwRkJRenRKUVVOMlJDeERRVUZETzBsQlJVUXNiMEpCUVc5Q0xFTkJRVU1zVDBGQmVVSXNSVUZCUlN4alFVRnpRanRSUVVOc1JTeHBSRUZCYVVRN1VVRkRha1FzU1VGQlNTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMR0ZCUVdFc1EwRkJReXd5UkVGQlpTeERRVUZETEVWQlFVVTdXVUZETlVNc1QwRkJUeXhEUVVGRExHdENRVUZyUWl4SFFVRkhMRTlCUVU4c1EwRkJRenRaUVVOeVF5eHpSRUZCVlN4RFFVTk9MR2RGUVVGdlFpeEZRVUZGTEVWQlEzUkNMQ3RGUVVFclJTeERRVU5zUml4RFFVRkRPMU5CUTB3N1VVRkZSQ3dyUTBGQkswTTdVVUZETDBNc1NVRkJTU3hEUVVGRExHTkJRV01zUjBGQlJ5eEpRVUZKTEdsQ1FVRnBRaXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETzFGQlEzSkVMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zYzBKQlFYTkNMRWRCUVVjc1EwRkJReXhGUVVGVExFVkJRVVVzUlVGQlJTeERRVU4yUkN4SlFVRkpMRU5CUVVNc2RVSkJRWFZDTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1VVRkRja01zU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl3d1FrRkJNRUlzUjBGQlJ5eERRVUZETEVWQlFWTXNSVUZCUlN4RlFVRkZMRU5CUXpORUxFbEJRVWtzUTBGQlF5dzRRa0ZCT0VJc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU0xUXl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExIbENRVUY1UWl4SFFVRkhMRU5CUVVNc1JVRkJVeXhGUVVGRkxFVkJRVVVzUTBGRE1VUXNTVUZCU1N4RFFVRkRMRFpDUVVFMlFpeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUXpORExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNUMEZCVHl4SFFVRkhMRU5CUVVNc1JVRkJhVUlzUlVGQlJTeEZRVUZGTEVOQlEyaEVMRWxCUVVrc1EwRkJReXhoUVVGaExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdVVUZETTBJc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eGpRVUZqTEVkQlFVY3NRMEZCUXl4RlFVRTJRaXhGUVVGRkxFVkJRVVVzUTBGRGJrVXNTVUZCU1N4RFFVRkRMR3RDUVVGclFpeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUTJoRExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNZVUZCWVN4SFFVRkhMRU5CUVVNc1JVRkJkVUlzUlVGQlJTeEZRVUZGTEVOQlF6VkVMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRSUVVNdlFpeEpRVUZKTEVOQlFVTXNaVUZCWlN4SFFVRkhMRWxCUVVrc05rUkJRV1VzUlVGQlJTeERRVUZETzFGQlF6ZERMRWxCUVVrc1EwRkJReXhqUVVGakxFZEJRVWNzWTBGQll5eERRVUZETzFGQlEzSkRMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNSMEZCUnl4SlFVRkpMRU5CUVVNN1NVRkRja01zUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSExGZEJRVmNzUTBGQlF5eFpRVUUyUWl4RlFVRkZMRTFCUVdNN08xbEJRek5FTEhORVFVRlZMRU5CUVVNc1owVkJRVzlDTEVWQlFVVXNSVUZCUlN4alFVRmpMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRmRFUXNUVUZCVFN4eFFrRkJjVUlzUjBGRGRrSXNVVUZCVVN4RFFVRkRMRkZCUVZFc1MwRkJTeXhYUVVGWE8yZENRVU5xUXl4UlFVRlJMRU5CUVVNc1VVRkJVU3hMUVVGTExGZEJRVmNzUTBGQlF6dFpRVU4wUXl4TlFVRk5MR2xDUVVGcFFpeEhRVUZITEZGQlFWRXNRMEZCUXl4UlFVRlJMRXRCUVVzc1VVRkJVU3hEUVVGRE8xbEJRM3BFTEVsQlFVa3NUVUZCVFN4SFFVRkhMRTFCUVUwc1EwRkJReXhoUVVGaExFTkJRVU1zZDBSQlFWa3NRMEZCUXl4RFFVRkRPMWxCUTJoRUxFbEJRVWtzVFVGQlRTeEpRVUZKTEVOQlFVTXNRMEZCUXl4eFFrRkJjVUlzU1VGQlNTeHBRa0ZCYVVJc1EwRkJReXhGUVVGRk8yZENRVU42UkN4TlFVRk5MRWRCUVVjc1MwRkJTeXhEUVVGRE8yZENRVU5tTEhkRVFVRlpMRU5CUTFJc1owVkJRVzlDTEVWQlFVVXNSVUZEZEVJc05FZEJRVFJITEVOQlF5OUhMRU5CUVVNN1owSkJRMFlzZDBSQlFWa3NRMEZEVWl4blJVRkJiMElzUlVGQlJTeEZRVU4wUWl3NFNVRkJPRWtzUTBGRGFrb3NRMEZCUXp0aFFVTk1PMWxCUlVRc1NVRkJTU3hEUVVGRExITkNRVUZ6UWl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eEhRVUZITEVWQlFVVTdPMmRDUVVNM1F5eFZRVUZKTEVOQlFVTXNZMEZCWXl3d1EwRkRZaXhYUVVGWExFTkJRVU1zV1VGQldTeEZRVU42UWl4SlFVRkpMRU5CUVVNc1EwRkJReXhMUVVGblF5eEZRVUZGTEVWQlFVVTdPMjlDUVVOMlF5eEpRVUZKTEVOQlFVTXNlVUpCUVhsQ0xFVkJRVVVzUTBGQlF6dHZRa0ZEYWtNc1MwRkJTeXhEUVVGRExFZEJRVWNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTTdiMEpCUXpkRExGVkJRVWtzUTBGQlF5eGpRVUZqTERCRFFVRkZMRzFDUVVGdFFpeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMjlDUVVOb1JDeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdaMEpCUTJ4RExFTkJRVU1zUlVGRFFTeExRVUZMTEVOQlFVTXNSMEZCUnl4RlFVRkZPMjlDUVVOU0xFbEJRVWtzUTBGQlF5d3lRa0ZCTWtJc1JVRkJSU3hEUVVGRE8yZENRVU4yUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOWUxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlExQXNRMEZCUXp0TFFVRkJPMGxCUlVRN08wOUJSVWM3U1VGRFJ5eFpRVUZaTEVOQlFVTXNTMEZCWjBNc1JVRkJSU3hOUVVGak96czdXVUZGTDBRc2MwUkJRVlVzUTBGQlF5eG5SVUZCYjBJc1JVRkJSU3hGUVVGRkxHVkJRV1VzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVVjJSQ3hWUVVGSkxFTkJRVU1zWTBGQll5d3dRMEZCUlN4dlFrRkJiMElzUTBGQlF5eExRVUZMTEVWQlFVVXNTVUZCU1N4RFFVRkRMRWRCUVVjc1JVRkJSVHRuUWtGRGRrUXNUVUZCVFN4eFFrRkJjVUlzUjBGRGRrSXNVVUZCVVN4RFFVRkRMRkZCUVZFc1MwRkJTeXhYUVVGWE8yOUNRVU5xUXl4UlFVRlJMRU5CUVVNc1VVRkJVU3hMUVVGTExGZEJRVmNzUTBGQlF6dG5Ra0ZEZEVNc1RVRkJUU3hwUWtGQmFVSXNSMEZCUnl4UlFVRlJMRU5CUVVNc1VVRkJVU3hMUVVGTExGRkJRVkVzUTBGQlF6dG5Ra0ZEZWtRc1NVRkJTU3hOUVVGTkxFZEJRVWNzVFVGQlRTeERRVUZETEdGQlFXRXNRMEZCUXl4M1JFRkJXU3hEUVVGRExFTkJRVU03WjBKQlEyaEVMRWxCUVVrc1RVRkJUU3hKUVVGSkxFTkJRVU1zUTBGQlF5eHhRa0ZCY1VJc1NVRkJTU3hwUWtGQmFVSXNRMEZCUXl4RlFVRkZPMjlDUVVONlJDeE5RVUZOTEVkQlFVY3NTMEZCU3l4RFFVRkRPMjlDUVVObUxIZEVRVUZaTEVOQlExSXNaMFZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNORWRCUVRSSExFTkJReTlITEVOQlFVTTdiMEpCUTBZc2QwUkJRVmtzUTBGRFVpeG5SVUZCYjBJc1JVRkJSU3hGUVVOMFFpdzRTVUZCT0Vrc1EwRkRha29zUTBGQlF6dHBRa0ZEVER0blFrRkZSQ3d5UkVGQk1rUTdaMEpCUXpORUxFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU1zTWtWQlFTdENMRVZCUVVVc1NVRkJTU3hEUVVGRExHZERRVUZuUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlJXNUlMRWxCUVVrc1EwRkJReXh6UWtGQmMwSXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU1zUjBGQlJ5eEZRVUZGT3p0dlFrRkROME1zVlVGQlNTeERRVUZETEdOQlFXTXNNRU5CUTJJc1dVRkJXU3hIUVVOaUxFbEJRVWtzUTBGQlF5eERRVUZETEUxQlFXbERMRVZCUVVVc1JVRkJSVHM3ZDBKQlEzaERMRTFCUVUwc1EwRkJReXhIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETzNkQ1FVTXZReXhQUVVGUExGVkJRVWtzUTBGQlF5eGpRVUZqTERCRFFVRkZMRzFDUVVGdFFpeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMjlDUVVNMVJDeERRVUZETEVWQlEwRXNTVUZCU1N4RFFVRkRMRWRCUVVjc1JVRkJSVHM3ZDBKQlExQXNTVUZCU1N4RFFVRkRMR3RDUVVGclFpeERRVU51UWl4VlFVRkpMRU5CUVVNc1kwRkJZeXd3UTBGQlJTeDFRa0ZCZFVJc1EwRkRMME1zUTBGQlF6dHZRa0ZEVGl4RFFVRkRMRVZCUTBFc1MwRkJTeXhEUVVGRExFZEJRVWNzUlVGQlJUdDNRa0ZEVWl4M1JFRkJXU3hEUVVOU0xHZEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xIVkNRVUYxUWl4RFFVTXhRaXhEUVVGRE8yOUNRVU5PTEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVOWUxFTkJRVU1zUTBGQlF5eERRVUZETzFsQlExQXNRMEZCUXl4RFFVRkRMRU5CUVVNN08wdEJRMDQ3U1VGRlNqczdPMDlCUjAwN1NVRkRTQ3hoUVVGaExFTkJRVU1zVFVGQmFVTTdPMUZCUXpORExGVkJRVWtzUTBGQlF5eGpRVUZqTERCRFFVRkZMRzlDUVVGdlFpeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMUZCUld4RUxESkVRVUV5UkR0UlFVTXpSQ3hKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEhWQ1FVRjFRaXhEUVVGRExESkZRVUVyUWl4RlFVRkZMRWxCUVVrc1EwRkJReXhuUTBGQlowTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRM2hJTEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxHRkJRV0U3TzFGQlExUXNWVUZCU1N4RFFVRkRMR05CUVdNc01FTkJRVVVzVVVGQlVTeERRVUZETEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJReXhUUVVGNVFpeEZRVUZGTEVWQlFVVTdXVUZEYmtVc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eFpRVUZaTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1dVRkROME1zU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRExFTkJRVU03V1VGRmVFTXNOa1ZCUVRaRk8xbEJRemRGTEVsQlFVa3NTVUZCU1N4RFFVRkRMRzlDUVVGdlFpeEpRVUZKTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRTlCUVU4c1JVRkJSVHRuUWtGREwwVXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXh4UWtGQmNVSXNRMEZETjBJc01rVkJRU3RDTEVWQlF5OUNMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NRMEZETTBJc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhQUVVGUExFTkJRMnBFTEVOQlEwb3NRMEZCUXp0aFFVTk1PMUZCUTB3c1EwRkJReXhEUVVGRExFTkJRVU03U1VGRFVDeERRVUZETzBsQlJVUTdPMDlCUlVjN1NVRkRTQ3hMUVVGTE8xRkJRMFFzU1VGQlNTeEpRVUZKTEVOQlFVTXNZMEZCWXl4RlFVRkZPMWxCUTNKQ0xFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUVVNN1dVRkROVUlzU1VGQlNTeERRVUZETEdOQlFXTXNSMEZCUnl4SlFVRkpMRU5CUVVNN1UwRkRPVUk3U1VGRFRDeERRVUZETzBsQlJVUTdPenM3TzA5QlMwYzdTVUZEU0N4UlFVRlJMRU5CUVVNc1IwRkJWeXhGUVVGRkxFMUJRV1U3VVVGRGFrTXNTVUZCU1N4VFFVRlRMRWRCUVVjc1IwRkJSeXhEUVVGRExFOUJRVThzUTBGRGRrSXNhVVJCUVdsRUxFVkJRMnBFTEdsRlFVRnBSU3hEUVVOd1JTeERRVUZETzFGQlJVWXNiVVJCUVcxRU8xRkJRMjVFTEVsQlFVa3NVVUZCVVN4SFFVRkhMREpDUVVFeVFpeERRVUZETzFGQlJUTkRMRWxCUVVrc1RVRkJUU3hGUVVGRk8xbEJRMUlzYVVaQlFXbEdPMWxCUTJwR0xGRkJRVkVzU1VGQlNTdzJRa0ZCTmtJc1EwRkJRenRUUVVNM1F6dFJRVVZFTEhGRlFVRnhSVHRSUVVOeVJTeFJRVUZSTEVsQlFVa3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhoUVVGaExFTkJRVU1zWjBWQlFXOUNMRU5CUVVNN1dVRkRka1FzUTBGQlF5eERRVUZETEZkQlFWYzdXVUZEWWl4RFFVRkRMRU5CUVVNc1YwRkJWeXhEUVVGRE8xRkJSV3hDTEhsRVFVRjVSRHRSUVVONlJDeFJRVUZSTEVsQlFVa3NaMEpCUVdkQ0xFTkJRVU03VVVGRk4wSXNaMGRCUVdkSE8xRkJRMmhITEZOQlFWTXNSMEZCUnl4VFFVRlRMRU5CUVVNc1QwRkJUeXhEUVVGRExHZENRVUZuUWl4RlFVRkZMRkZCUVZFc1EwRkJReXhEUVVGRE8xRkJSVEZFTEU5QlFVOHNVMEZCVXl4RFFVRkRPMGxCUTNKQ0xFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3hYUVVGWExFTkJRVU1zV1VGQk5rSTdPMUZCUTNKRExITkVRVUZWTEVOQlFVTXNaMFZCUVc5Q0xFVkJRVVVzUlVGQlJTdzBRa0ZCTkVJc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVVZ3UlN4elJFRkJjMFE3VVVGRGRFUXNTVUZCU1N4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExHRkJRV0VzUTBGQlF5d3lSRUZCWlN4RFFVRkRMRVZCUVVVN1dVRkROVU1zY1VaQlFYRkdPMWxCUTNKR0xFbEJRVWtzV1VGQldTeERRVUZETEZOQlFWTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTzJkQ1FVTTNReXgxUkVGQlZ5eERRVU5RTEdkRlFVRnZRaXhGUVVGRkxFVkJRM1JDTERaRVFVRTJSQ3haUVVGWkxFTkJRVU1zU1VGQlNTeG5Ra0ZCWjBJc1dVRkJXU3hEUVVGRExGRkJRVkVzWTBGQll5eFpRVUZaTEVOQlFVTXNUMEZCVHl4WFFVRlhMRmxCUVZrc1EwRkJReXhKUVVGSkxFbEJRVWtzUlVGRGNrd3NRMEZCUXl4RFFVTktMRU5CUVVNN1owSkJRMFlzVDBGQlR6dGhRVU5XTzFOQlEwbzdVVUZGUkN4VlFVRkpMRU5CUVVNc1kwRkJZeXd3UTBGQlJTeGxRVUZsTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNN1NVRkRka1FzUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxIVkNRVUYxUWl4RFFVRkRMRXRCUVZrN1VVRkRhRU1zYzBSQlFWVXNRMEZEVGl4blJVRkJiMElzUlVGQlJTeEZRVU4wUWl3d1FrRkJNRUlzUjBGQlJ5eExRVUZMTEVWQlEyeERMRU5CUVVNc1EwRkRTaXhEUVVGRE8wbEJRMDRzUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxEaENRVUU0UWl4RFFVRkRMRXRCUVZrN1VVRkRka01zYzBSQlFWVXNRMEZEVGl4blJVRkJiMElzUlVGQlJTeEZRVU4wUWl3clFrRkJLMElzUjBGQlJ5eExRVUZMTEVWQlEzWkRMRU5CUVVNc1EwRkRTaXhEUVVGRE8xRkJRMFlzU1VGQlNTeERRVUZETERCQ1FVRXdRaXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzBsQlF6TkRMRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU0N3MlFrRkJOa0lzUTBGQlF5eExRVUZaTzFGQlEzUkRMSE5FUVVGVkxFTkJRMDRzWjBWQlFXOUNMRVZCUVVVc1JVRkRkRUlzT0VKQlFUaENMRWRCUVVjc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eExRVUZMTEVOQlFVTXNSVUZEZEVRc1EwRkJReXhEUVVOS0xFTkJRVU03U1VGRFRpeERRVUZETzBsQlJVUTdPenRQUVVkSE8wbEJRMGdzWVVGQllTeERRVUZETEV0QlFXOUNPMUZCUXpsQ0xFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1NVRkRlRUlzUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxHdENRVUZyUWl4RFFVRkRMRXRCUVdkRE8xRkJReTlETEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0SlFVTnVReXhEUVVGRE8wbEJSVVE3T3p0UFFVZEhPMGxCUTBnc2FVSkJRV2xDTEVOQlFVTXNTMEZCTUVJN1VVRkRlRU1zU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRKUVVNNVFpeERRVUZETzBsQlJVUTdPenRQUVVkSE8wbEJRMGdzTmtSQlFUWkVPMGxCUXpkRUxFOUJRVThzUTBGQlF5eFZRVUY1UWp0UlFVTTNRaXh2UTBGQmIwTTdTVUZEZUVNc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMRFpFUVVFMlJEdEpRVU0zUkN3d1FrRkJNRUlzUTBGQlF5eExRVUZaTzFGQlEyNURMRzlEUVVGdlF6dEpRVU40UXl4RFFVRkRPMGxCUlVRN096dFBRVWRITzBsQlEwZ3NOa1JCUVRaRU8wbEJRemRFTEd0Q1FVRnJRaXhEUVVGRExITkNRVUZwUkR0UlFVTm9SU3h2UTBGQmIwTTdTVUZEZUVNc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMRFpFUVVFMlJEdEpRVU0zUkN4aFFVRmhMRU5CUVVNc1owSkJRWEZETzFGQlF5OURMRzlEUVVGdlF6dEpRVU40UXl4RFFVRkRPMGxCUlVRN096czdUMEZKUnp0SlFVTklMR2REUVVGblF5eERRVUZETEVkQlFUaENPMUZCUXpORUxHdEZRVUZyUlR0UlFVTnNSU3hOUVVGTkxHdENRVUZyUWl4SFFVRnJRaXhKUVVGSkxFdEJRVXNzUlVGQlZTeERRVUZETzFGQlF6bEVMRTFCUVUwc1YwRkJWeXhIUVVGaExFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dFJRVU0zUkN4TlFVRk5MR2RDUVVGblFpeEhRVUZoTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNNa1ZCUVN0Q0xFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTTdVVUZEZWtjc1MwRkJTU3hOUVVGTkxFOUJRVThzU1VGQlNTeFhRVUZYTEVWQlFVVTdXVUZET1VJc2NVWkJRWEZHTzFsQlEzSkdMRWxCUVVjc1owSkJRV2RDTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTlCUVU4c1EwRkJReXhGUVVGRk8yZENRVU51UXl4clFrRkJhMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1owSkJRMnBETEZOQlFWTTdZVUZEV2p0WlFVTkVMSGxIUVVGNVJ6dHBRa0ZEY0VjN1owSkJRMFFzVFVGQlRTeHZRa0ZCYjBJc1IwRkJZU3hQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMmRDUVVNeFJDeE5RVUZOTEZkQlFWY3NSMEZCUnl4dlFrRkJiMElzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkROVU1zUzBGQlNTeE5RVUZOTEZsQlFWa3NTVUZCU1N4blFrRkJaMElzUlVGQlJUdHZRa0ZEZUVNc1NVRkJSeXhaUVVGWkxFTkJRVU1zVVVGQlVTeERRVUZETEZkQlFWY3NRMEZCUXl4RlFVRkZPM2RDUVVOdVF5eHpSVUZCYzBVN2QwSkJRM1JGTEd0Q1FVRnJRaXhEUVVGRExFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXp0M1FrRkRkRU1zVFVGQlRUdHhRa0ZEVkR0cFFrRkRTanRoUVVOS08xTkJRMG83VVVGRFJDeFBRVUZQTEd0Q1FVRnJRaXhEUVVGRE8wbEJRemxDTEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFJ5eHpRa0ZCYzBJc1EwRkJReXhOUVVGbE96czdXVUZGZUVNc01FUkJRVEJFTzFsQlF6RkVMRWxCUVVrc1owSkJRV2RDTEVkQlFVY3NTMEZCU3l4RFFVRkRPMWxCUXpkQ0xFdEJRVXNzVFVGQlRTeFhRVUZYTEVsQlFVa3NaMEpCUVVrc1EwRkJReXhqUVVGakxEQkRRVUZGTEdWQlFXVXNSVUZCUlN4dFEwRkJTU3hGUVVGRkxFVkJRVVU3WjBKQlEzQkZMRWxCUVVrc1YwRkJWeXhKUVVGSkxGZEJRVmNzUTBGQlF5eFJRVUZSTEVsQlFVa3NWMEZCVnl4RFFVRkRMRkZCUVZFc1EwRkJReXhMUVVGTExFbEJRVWtzVjBGQlZ5eERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hMUVVGTExFOUJRVThzUlVGQlJUdHZRa0ZEYkVnc1owSkJRV2RDTEVkQlFVY3NTVUZCU1N4RFFVRkRPMjlDUVVONFFpeE5RVUZOTzJsQ1FVTlVPMkZCUTBvN1dVRkRSQ3hKUVVGSExFTkJRVU1zWjBKQlFXZENMRVZCUVVVN1owSkJRMnhDTEZWQlFVa3NRMEZCUXl4alFVRmpMREJEUVVGRkxHTkJRV01zUTBGQlF5eFBRVUZQTEVWQlFVVXNSVUZCUlN4VFFVRlRMRVZCUVVVc1ZVRkJWU3hGUVVGRkxFTkJRVU1zUTBGQlF6dGhRVU16UlR0WlFVVkVMRWxCUVVrc1kwRkJZeXhEUVVGRExHVkJRV1VzU1VGQlNTeEpRVUZKTEVOQlFVTXNZMEZCWXl4SlFVRkpMRVZCUVVVc1JVRkJSVHRuUWtGRE4wUXNTMEZCU3l4TlFVRk5MRmRCUVZjc1NVRkJTU3huUWtGQlNTeERRVUZETEdOQlFXTXNNRU5CUVVVc1pVRkJaU3hGUVVGRkxHMURRVUZKTEVWQlFVVXNSVUZCUlR0dlFrRkRjRVVzU1VGRFNTeFhRVUZYTzNkQ1FVTllMRmRCUVZjc1EwRkJReXhSUVVGUk8zZENRVU53UWl4WFFVRlhMRU5CUVVNc1VVRkJVU3hEUVVGRExFdEJRVXM3ZDBKQlF6RkNMRmRCUVZjc1EwRkJReXhSUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NTMEZCU3l4UFFVRlBPM2RDUVVNelF5eFhRVUZYTEVOQlFVTXNiVUpCUVcxQ0xFVkJRMnBETzNkQ1FVTkZMRFJFUVVFMFJEdDNRa0ZETlVRc1RVRkJUU3hwUWtGQmFVSXNSMEZCUnl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0M1FrRkRla1FzVFVGQlRTdzRRa0ZCT0VJc1IwRkJNRUk3TkVKQlF6RkVMRkZCUVZFc1JVRkJSU3hSUVVGUkxFZEJRVWNzYVVKQlFXbENMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zVlVGQlZUczBRa0ZEY0VRc1UwRkJVeXhGUVVGRkxFdEJRVXM3TkVKQlEyaENMRmRCUVZjc1JVRkJSU3hwUWtGQmFVSXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVTdlVUpCUTJoRk8zZENRVVZFTEhsR1FVRjVSanQzUWtGRGVrWXNUVUZCVFN4clFrRkJhMElzUjBGQmFVTXNRMEZCUXl3NFFrRkJPRUlzUTBGQlF5eERRVUZETzNkQ1FVVXhSaXh4UmtGQmNVWTdkMEpCUTNKR0xHTkJRV01zUTBGQlF5eGxRVUZsTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEhGQ1FVRTJReXhGUVVGRkxFVkJRVVU3TkVKQlEzSkhMQ3RFUVVFclJEczBRa0ZETDBRc1NVRkJSeXh4UWtGQmNVSXNRMEZCUXl4UlFVRlJMRWxCUVVrc09FSkJRVGhDTEVOQlFVTXNVVUZCVVN4RlFVRkZPMmREUVVNeFJTeHJRa0ZCYTBJc1EwRkJReXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1EwRkJRenMyUWtGRGJFUTdhVU5CUTBrc1NVRkJSeXh6UWtGQmNVSXNZVUZCY2tJc2NVSkJRWEZDTEhWQ1FVRnlRaXh4UWtGQmNVSXNRMEZCUlN4WFFVRlhMRTFCUVVrc09FSkJRVGhDTEdGQlFUbENMRGhDUVVFNFFpeDFRa0ZCT1VJc09FSkJRVGhDTEVOQlFVVXNWMEZCVnl4SFFVRkZPMmREUVVOMlJpeHJRa0ZCYTBJc1EwRkJReXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1EwRkJRenMyUWtGRGJFUTdkMEpCUTB3c1EwRkJReXhEUVVGRExFTkJRVU03ZDBKQlJVZ3NTMEZCU3l4TlFVRk5MRXRCUVVzc1NVRkJTU3hyUWtGQmEwSXNSVUZCUlRzMFFrRkRjRU1zU1VGQlNTeE5RVUZMTEdGQlFVd3NTMEZCU3l4MVFrRkJUQ3hMUVVGTExFTkJRVVVzVjBGQlZ5eE5RVUZMTEZOQlFWTXNTVUZCU1N4TFFVRkxMRU5CUVVNc1YwRkJWeXhMUVVGTExFVkJRVVVzUlVGQlJUdG5RMEZET1VRc01rWkJRVEpHTzJkRFFVTXpSaXhQUVVGUExFdEJRVXNzUTBGQlF5eFhRVUZYTEVOQlFVTTdOa0pCUXpWQ08zbENRVU5LTzNkQ1FVVkVMRmRCUVZjc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eERRVUZETzNGQ1FVTjJSRHRwUWtGRFNqdGhRVU5LTzFsQlJVUXNTVUZCU1N4blFrRkJaMElzUjBGQlJ5eExRVUZMTEVOQlFVTTdXVUZETjBJc1MwRkJTeXhOUVVGTkxGZEJRVmNzU1VGQlNTeG5Ra0ZCU1N4RFFVRkRMR05CUVdNc01FTkJRVVVzWlVGQlpTeEZRVUZGTEcxRFFVRkpMRVZCUVVVc1JVRkJSVHRuUWtGRGNFVXNTVUZCU1N4WFFVRlhMRWxCUVVrc1YwRkJWeXhEUVVGRExGRkJRVkVzU1VGQlNTeFhRVUZYTEVOQlFVTXNVVUZCVVN4RFFVRkRMRXRCUVVzc1NVRkJTU3hYUVVGWExFTkJRVU1zVVVGQlVTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRXRCUVVzc1QwRkJUeXhGUVVGRk8yOUNRVU5zU0N4blFrRkJaMElzUjBGQlJ5eEpRVUZKTEVOQlFVTTdiMEpCUTNoQ0xFMUJRVTA3YVVKQlExUTdZVUZEU2p0WlFVVkVMRGhGUVVFNFJUdFpRVU01UlN4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRk8yZENRVU5VTEVsQlFVY3NRMEZCUXl4blFrRkJaMElzUlVGQlJUdHZRa0ZEYkVJc1ZVRkJTU3hEUVVGRExHTkJRV01zTUVOQlFVVXNZMEZCWXl4RFFVRkRMRTlCUVU4c1JVRkJSVHQzUWtGRGVrTXNVMEZCVXl4RlFVRkZMRlZCUVZVN2NVSkJRM2hDTEVOQlFVTXNRMEZCUXp0cFFrRkRUanRoUVVOS08ybENRVUZOTzJkQ1FVTklMREpEUVVFeVF6dG5Ra0ZETTBNc1RVRkJUU3haUVVGWkxFZEJRVWM3YjBKQlEycENMR1ZCUVdVc1JVRkJSU3hMUVVGTE8yOUNRVU4wUWl4WlFVRlpMRVZCUVVVc1EwRkJRenR2UWtGRFppeG5Ra0ZCWjBJc1JVRkJSU3hMUVVGTE8yOUNRVU4yUWl4UFFVRlBMRVZCUVVVc1EwRkJRenR2UWtGRFZpeG5Ra0ZCWjBJc1JVRkJSU3hMUVVGTE8yOUNRVU4yUWl4VlFVRlZMRVZCUVVVc1MwRkJTenR2UWtGRGFrSXNWVUZCVlN4RlFVRkZMRVZCUVVVN2IwSkJRMlFzVFVGQlRTeEZRVUZGTEVkQlFVYzdhVUpCUTJRN1owSkJSVVFzTmtKQlFUWkNPMmRDUVVNM1FpeE5RVUZOTEdkQ1FVRm5RaXhIUVVFeVFqdHZRa0ZETjBNc1MwRkJTeXhGUVVGRkxFdEJRVXM3YjBKQlExb3NTMEZCU3l4RlFVRkZMRmxCUVZrN2FVSkJRM1JDTEVOQlFVTTdaMEpCUlVZc09FZEJRVGhITzJkQ1FVTTVSeXhOUVVGTkxFMUJRVTBzUjBGQlJ5eE5RVUZOTEZOQlFWTXNRMEZCUXl4WlFVRlpMRU5CUVVNc1dVRkJXU3hEUVVOd1JDeG5Ra0ZCWjBJc1EwRkRia0lzUTBGQlF6dG5Ra0ZEUml4SlFVRkpMRTFCUVUwc1JVRkJSVHR2UWtGRFVpeEpRVUZKTEdkQ1FVRm5RaXhGUVVGRk8zZENRVU5zUWl4TFFVRkxMRTFCUVUwc1YwRkJWeXhKUVVGSkxHZENRVUZKTEVOQlFVTXNZMEZCWXl3d1EwRkJSU3hsUVVGbExFVkJRVVVzYlVOQlFVa3NSVUZCUlN4RlFVRkZPelJDUVVOd1JTeEpRVUZKTEN0RlFVRnRReXhEUVVGRExGZEJRVmNzUTBGQlF5eEZRVUZGTzJkRFFVTnNSQ3hMUVVGTExFMUJRVTBzUzBGQlN5eEpRVUZKTEUxQlFVMHNRMEZCUXl4VFFVRlRMRVZCUVVVc1JVRkJSVHR2UTBGRGNFTXNTVUZCU1N4TFFVRkxMRU5CUVVNc1NVRkJTU3hKUVVGSkxFdEJRVXNzUTBGQlF5eEpRVUZKTEVsQlFVa3NUMEZCVHl4RlFVRkZPM2REUVVOeVF5eFhRVUZYTEVOQlFVTXNUVUZCVFN4RFFVRkRMRmxCUVZrc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dDNRMEZEZGtNc1YwRkJWeXhEUVVGRExGTkJRVk1zUjBGQlJ5eFZRVUZWTEVOQlFVTTdjVU5CUTNSRE8ybERRVU5LT3paQ1FVTktPM2xDUVVOS08zRkNRVU5LTzNsQ1FVRk5PM2RDUVVOSUxFdEJRVXNzVFVGQlRTeExRVUZMTEVsQlFVa3NUVUZCVFN4RFFVRkRMRk5CUVZNc1JVRkJSU3hGUVVGRk96UkNRVU53UXl4SlFVRkpMRXRCUVVzc1EwRkJReXhKUVVGSkxFbEJRVWtzUzBGQlN5eERRVUZETEVsQlFVa3NTVUZCU1N4UFFVRlBMRVZCUVVVN1owTkJRM0pETEZWQlFVa3NRMEZCUXl4alFVRmpMREJEUVVGRkxHTkJRV01zUTBGQlF5eExRVUZMTEVWQlFVVTdiME5CUTNaRExGTkJRVk1zUlVGQlJTeFZRVUZWTzJsRFFVTjRRaXhEUVVGRExFTkJRVU03TmtKQlEwNDdlVUpCUTBvN2NVSkJRMG83YVVKQlEwbzdjVUpCUVUwN2IwSkJRMGdzU1VGQlJ5eERRVUZETEdkQ1FVRm5RaXhGUVVGRk8zZENRVU5zUWl4VlFVRkpMRU5CUVVNc1kwRkJZeXd3UTBGQlJTeGpRVUZqTEVOQlFVTXNUMEZCVHl4RlFVRkZPelJDUVVONlF5eFRRVUZUTEVWQlFVVXNWVUZCVlR0NVFrRkRlRUlzUTBGQlF5eERRVUZETzNGQ1FVTk9PMmxDUVVOS08yRkJRMG83TzB0QlEwbzdTVUZGUkRzN08wOUJSMGM3U1VGRFNDdzJSRUZCTmtRN1NVRkROMFFzV1VGQldTeERRVUZETEV0QlFYTkNPMUZCUXk5Q0xHOURRVUZ2UXp0SlFVTjRReXhEUVVGRE8wbEJSVVE3T3p0UFFVZEhPMGxCUTBnc05rUkJRVFpFTzBsQlF6ZEVMR2xDUVVGcFFpeERRVUZETEV0QlFXZERPMUZCUXpsRExHOURRVUZ2UXp0SlFVTjRReXhEUVVGRE8wbEJSVVE3T3p0UFFVZEhPMGxCUTBnc05rUkJRVFpFTzBsQlF6ZEVMR3RDUVVGclFpeERRVUZETEUxQlFXbERPMUZCUTJoRUxHOURRVUZ2UXp0SlFVTjRReXhEUVVGRE8wbEJSVVE3TzA5QlJVYzdTVUZEU0N4NVFrRkJlVUk3VVVGRGNrSXNiME5CUVc5RE8wbEJRM2hETEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxESkNRVUV5UWp0UlFVTjJRaXh2UTBGQmIwTTdTVUZEZUVNc1EwRkJRenRKUVVWRUxHOUNRVUZ2UWl4RFFVTm9RaXh4UWtGQlowUTdVVUZGYUVRc2NVUkJRWEZFTzFGQlEzSkVMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zWlVGQlpUdFpRVU12UWl4UFFVRlBMRU5CUVVNc01FSkJRVEJDTEVOQlFVTXNRMEZCUXp0UlFVVjRReXhOUVVGTkxHbENRVUZwUWl4SFFVRnJRaXhGUVVGRkxFTkJRVU03VVVGRE5VTXNUVUZCVFN4UlFVRlJMRWRCUVVjc2EwUkJRV0VzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dFJRVU14UkN4eFJVRkJjVVU3VVVGRGNrVXNVVUZCVVN4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRE8xRkJRMnBDTEZGQlFWRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhaUVVGWkxFVkJRVVVzUlVGQlJUdFpRVU01UWl4TlFVRk5MRVZCUVVVc1RVRkJUU3hGUVVGRkxFZEJRVWNzZFVSQlFXdENMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU03V1VGRGNFUXNiVU5CUVcxRE8xbEJRMjVETEUxQlFVMHNUMEZCVHl4SFFVRkhMRzlDUVVGdlFpeERRVUZETzFsQlEzSkRMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNSVUZCUlR0blFrRkRha0lzVFVGQlRTeEhRVUZITEVkQlEwd3NRMEZCUXl4RFFVRkRMRWxCUVVrN2IwSkJRMDRzUjBGQlJ6dHZRa0ZEU0N4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eFZRVUZWTEVsQlFVa3NSVUZCUlN4RFFVRkRPM2xDUVVNeFFpeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU1zUjBGQlJ5eEhRVUZITEVkQlFVY3NRMEZCUXl4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dDVRa0ZEY2tNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzJkQ1FVTnVRaXhOUVVGTkxFdEJRVXNzUjBGQlJ5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8yZENRVU5vUXl4SlFVRkpMRXRCUVVzc1MwRkJTeXhKUVVGSkxFVkJRVVU3YjBKQlEyaENMRWxCUVVrc1EwRkJReXhEUVVGRExFbEJRVWtzU1VGQlNTeExRVUZMTEVWQlFVVTdkMEpCUTJwQ0xHbEZRVUZwUlR0M1FrRkRha1VzUTBGQlF5eERRVUZETEZWQlFWVXNSMEZCUnpzMFFrRkRXQ3haUVVGWkxFVkJRVVVzUjBGQlJ6dDVRa0ZEY0VJc1EwRkJRenR4UWtGRFREdHZRa0ZEUkN4TlFVRk5MRkZCUVZFc1IwRkRWaXhEUVVGRExFTkJRVU1zU1VGQlNUdDNRa0ZEVGl4SFFVRkhPM2RDUVVOSUxFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRlZCUVZVc1NVRkJTU3hGUVVGRkxFTkJRVU03TmtKQlF6RkNMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4SFFVRkhMRWRCUVVjc1IwRkJSeXhEUVVGRExFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPelpDUVVOeVF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN2IwSkJRMjVDTEdsQ1FVRnBRaXhEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0cFFrRkRjRU03V1VGRFRDeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTlFMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJSVWdzVDBGQlR5eHBRa0ZCYVVJc1EwRkJRenRKUVVNM1FpeERRVUZETzBOQlEwbzdPenM3T3pzN096czdPenM3T3p0QlF5OXJRa1FzYTBSQlFXdEVPMEZCUld4RU96dEhRVVZITzBGQlEwa3NUVUZCVFN4WlFVRlpPME5CU1hoQ096czdPenM3T3pzN096czdPenM3UVVOVVJDeHJSRUZCYTBRN1FVRkZiRVE3TzBkQlJVYzdRVUZEU1N4TlFVRk5MRmRCUVZjN1EwRkxka0k3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRMVpFTEd0RVFVRnJSRHRCUVVWVk8wRkJSMjlDTzBGQlEzQkNPMEZCUTJ4Q08wRkJSV2RDTzBGQmRVSTFRanRCUVVVMlFqdEJRVU54UWp0QlFVbDJRanRCUVV0aU8wRkJWelZET3pzN096dEhRVXRITzBGQlEwa3NUVUZCVFN4alFVRmpPMGxCYzBKMlFqczdPenRQUVVsSE8wbEJRMGdzV1VGQldTeE5RVUZqTEVWQlFVVXNVMEZCYlVNN1VVRmtka1FzZVVKQlFXOUNMRWRCUVVjc1MwRkJTeXhEUVVGRE8xRkJaV3BETEVsQlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1RVRkJUU3hEUVVGRE8xRkJSWEpDTEVsQlFVa3NVMEZCVXl4aFFVRlVMRk5CUVZNc2RVSkJRVlFzVTBGQlV5eERRVUZGTEd0Q1FVRnJRaXhGUVVGRk8xbEJReTlDTEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUjBGQlJ5eFRRVUZUTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU03VTBGRE0wUTdVVUZGUkN4SlFVRkpMRU5CUVVNc1lVRkJZU3hIUVVGSExFbEJRVWtzTkVSQlFWa3NSVUZCUlN4RFFVRkRPMUZCUlhoRExFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1JVRkJSU3hEUVVGRE8xRkJSWHBDTEdWQlFXVTdVVUZEWml4SlFVRkpMRU5CUVVNc2VVSkJRWGxDTEVOQlF6RkNMRWxCUVVrc2QwWkJRWE5DTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGRGFFUXNRMEZCUXp0UlFVVkdMRzlDUVVGdlFqdFJRVU53UWl4SlFVRkpMRU5CUVVNc2MwSkJRWE5DTEVkQlFVY3NTVUZCU1N4clJVRkJaMElzUTBGRE9VTXNTVUZCU1N4RFFVRkRMR3RDUVVGclFpeERRVU14UWl4RFFVRkRPMUZCUTBZc1NVRkJTU3hEUVVGRExITkNRVUZ6UWl4RFFVRkRMR2REUVVGblF5eEhRVUZITEVOQlF6TkVMRU5CUVZNc1JVRkRWQ3hEUVVGVExFVkJRMWdzUlVGQlJTeERRVU5CTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eDNRMEZCZDBNc1EwRkRNMFFzUTBGQlF5eEZRVU5FTEVOQlFVTXNRMEZEU2l4RFFVRkRPMUZCUTA0c1NVRkJTU3hEUVVGRExIbENRVUY1UWl4SFFVRkhMRU5CUVVNc1QwRkJaME1zUlVGQlJTeEZRVUZGTEVOQlEyeEZMRWxCUVVrc1EwRkJReXh6UWtGQmMwSXNRMEZCUXl4dlFrRkJiMElzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0UlFVVTVSQ3hKUVVGSkxFTkJRVU1zWjBKQlFXZENMRWRCUVVjc1NVRkJTU3h0UlVGQlpTeERRVUZETEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eERRVUZETzFGQlJYQkZMRWxCUVVrc1EwRkJReXcyUWtGQk5rSXNSMEZCUnl4SlFVRkpMRU5CUVVNc05rSkJRVFpDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJRenRSUVVWc1JpeHRSRUZCYlVRN1VVRkRia1FzU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eHBRa0ZCYVVJc1JVRkJSU3hEUVVGRExHOUNRVUV3UXl4RlFVRkZMRVZCUVVVN1dVRkZiRWNzYlVOQlFXMURPMWxCUTI1RExFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zWlVGQlpTeEZRVUZITEVsQlFVa3NRMEZCUXl3MlFrRkJOa0lzUTBGQlF5eERRVUZETzFGQlF6bEdMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRMUFzUTBGQlF6dEpRVVZFT3p0UFFVVkhPMGxCUTBnc1NVRkJWeXhyUWtGQmEwSTdVVUZEZWtJc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eHRRa0ZCYlVJc1JVRkJSVHRaUVVNelFpeEpRVUZKTEVOQlFVTXNiVUpCUVcxQ0xFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRaUVVONlJDeEpRVUZKTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zUlVGQlJTeEhRVUZITEc5Q1FVRnZRaXhEUVVGRE8xTkJRM1JFTzFGQlEwUXNUMEZCVHl4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTTdTVUZEY0VNc1EwRkJRenRKUVVWRU96dFBRVVZITzBsQlEwc3NhVUpCUVdsQ08xRkJRM0pDTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc05FSkJRVFJDTEVOQlEzQkRMSEZGUVVGNVFpeEZRVU42UWl4RFFVRkRMSE5DUVVFclFpeEZRVUZGTEVWQlFVVTdXVUZEYUVNc2EwZEJRV3RITzFsQlEyeEhMQ3RFUVVFclJEdFpRVU12UkN4SlFVTkpMSE5DUVVGelFpeExRVUZMTEVsQlFVazdaMEpCUXk5Q0xFTkJRVU1zU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExHMUNRVUZ0UWl4RlFVTTNRenRuUWtGRFJTeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zYTBOQlFXdERMRVZCUVVVc1EwRkJRenRoUVVNdlJEdFJRVU5NTEVOQlFVTXNRMEZEU2l4RFFVRkRPMUZCUlVZc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5dzBRa0ZCTkVJc1EwRkRjRU1zT0VSQlFXdENMRVZCUTJ4Q0xFTkJRVU1zV1VGQmNVSXNSVUZCUlN4RlFVRkZPMWxCUTNSQ0xFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhoUVVGaExFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTTdVVUZEZGtRc1EwRkJReXhEUVVOS0xFTkJRVU03VVVGRlJpeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRFJDUVVFMFFpeERRVU53UXl4NVJVRkJOa0lzUlVGRE4wSXNSMEZCUnl4RlFVRkZPMWxCUTBRc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRmRCUVZjc1EwRkJReXh4UWtGQmNVSXNSVUZCUlN4RFFVRkRPMUZCUXk5RUxFTkJRVU1zUTBGRFNpeERRVUZETzFGQlJVWXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXcwUWtGQk5FSXNRMEZEY0VNc2JVVkJRWFZDTEVWQlEzWkNMRU5CUVVNc1pVRkJkMElzUlVGQlJTeEZRVUZGTzFsQlEzcENMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zV1VGQldTeERRVU53UWl4dFJVRkJkVUlzUlVGRGRrSXNiVUpCUTBrc1pVRkJaU3hEUVVGRExFTkJRVU1zUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXl4RFFVRkRMRkZCUTI1RExGRkJRVkVzUTBGRFdDeERRVUZETzFsQlEwWXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEc5Q1FVRnZRaXhEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNZVUZCWVN4RFFVRkRMRFJFUVVGblFpeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTTNSaXhEUVVGRExFTkJRMG9zUTBGQlF6dFJRVVZHTEdGQlFXRTdVVUZEWWl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExEUkNRVUUwUWl4RFFVTndReXdyUkVGQmJVSXNSVUZEYmtJc1EwRkJReXhUUVVGclFpeEZRVUZGTEVWQlFVVTdXVUZEYmtJc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMSFZDUVVGMVFpeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMUZCUXpsRUxFTkJRVU1zUTBGRFNpeERRVUZETzFGQlJVWXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXcwUWtGQk5FSXNRMEZEY0VNc05FUkJRV2RDTEVWQlEyaENMRU5CUVVNc1UwRkJhMElzUlVGQlJTeEZRVUZGTzFsQlEyNUNMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4dlFrRkJiMElzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXp0UlFVTXpSQ3hEUVVGRExFTkJRMG9zUTBGQlF6dFJRVVZHTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc05FSkJRVFJDTEVOQlEzQkRMSE5GUVVFd1FpeEZRVU14UWl4RFFVRkRMRzFDUVVFMFFpeEZRVUZGTEVWQlFVVTdXVUZETjBJc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRzlDUVVGdlFpeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1lVRkJZU3hEUVVGRExEUkVRVUZuUWl4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVNM1JpeERRVUZETEVOQlEwb3NRMEZCUXp0UlFVVkdMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zTkVKQlFUUkNMRU5CUTNCRExEUkVRVUZuUWl4RlFVTm9RaXhEUVVGRExGTkJRV3RDTEVWQlFVVXNSVUZCUlR0WlFVTnVRaXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1VVRkRNMFFzUTBGQlF5eERRVU5LTEVOQlFVTTdVVUZGUml4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExEUkNRVUUwUWl4RFFVTndReXc0UkVGQmEwSXNSVUZEYkVJc1EwRkJReXhUUVVGclFpeEZRVUZGTEVWQlFVVTdXVUZEYmtJc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMSE5DUVVGelFpeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMUZCUXpkRUxFTkJRVU1zUTBGRFNpeERRVUZETzFGQlJVWXNiVUpCUVcxQ08xRkJRMjVDTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc2JVTkJRVzFETEVOQlF6TkRMRzFGUVVGMVFpeEZRVU4yUWl4RFFVRkRMRkZCUVdkQ0xFVkJRVVVzUlVGQlJUdFpRVU5xUWl4elJFRkJWU3hEUVVOT0xHZEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xHMURRVUZ0UXl4RlFVTnVReXhEUVVGRExFTkJRMG9zUTBGQlF6dFpRVU5HTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dFpRVU5zUkN4elJFRkJWU3hEUVVOT0xHZEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xEWkRRVUUyUXl4RlFVTTNReXhEUVVGRExFTkJRMG9zUTBGQlF6dFJRVU5PTEVOQlFVTXNRMEZEU2l4RFFVRkRPMUZCUlVZc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eHRRMEZCYlVNc1EwRkRNME1zYlVWQlFYVkNMRVZCUTNaQ0xFTkJRVU1zVVVGQlowSXNSVUZCUlN4RlFVRkZPMWxCUTJwQ0xITkVRVUZWTEVOQlEwNHNaMFZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNPRU5CUVRoRExFVkJRemxETEVOQlFVTXNRMEZEU2l4RFFVRkRPMWxCUTBZc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMR2RDUVVGblFpeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMWxCUTJ4RUxITkVRVUZWTEVOQlEwNHNaMFZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNOa05CUVRaRExFVkJRemRETEVOQlFVTXNRMEZEU2l4RFFVRkRPMUZCUTA0c1EwRkJReXhEUVVOS0xFTkJRVU03VVVGRlJpeHJRa0ZCYTBJN1VVRkRiRUlzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4dFEwRkJiVU1zUTBGRE0wTXNPRVZCUVd0RExFVkJRMnhETEVOQlFVTXNVVUZCWjBJc1JVRkJSU3hGUVVGRk8xbEJRMnBDTEhORVFVRlZMRU5CUTA0c1owVkJRVzlDTEVWQlFVVXNSVUZEZEVJc09FTkJRVGhETEVWQlF6bERMRU5CUVVNc1EwRkRTaXhEUVVGRE8xbEJRMFlzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1EwRkJRenRaUVVNdlJTeHpSRUZCVlN4RFFVTk9MR2RGUVVGdlFpeEZRVUZGTEVWQlEzUkNMRFpEUVVFMlF5eEZRVU0zUXl4RFFVRkRMRU5CUTBvc1EwRkJRenRSUVVOT0xFTkJRVU1zUTBGRFNpeERRVUZETzFGQlJVWXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXh0UTBGQmJVTXNRMEZETTBNc09FVkJRV3RETEVWQlEyeERMRU5CUVVNc1VVRkJaMElzUlVGQlJTeEZRVUZGTzFsQlEycENMSE5FUVVGVkxFTkJRMDRzWjBWQlFXOUNMRVZCUVVVc1JVRkRkRUlzT0VOQlFUaERMRVZCUXpsRExFTkJRVU1zUTBGRFNpeERRVUZETzFsQlEwWXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEc5Q1FVRnZRaXhEUVVGRExGRkJRVkVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zUTBGQlF6dFpRVU12UlN4elJFRkJWU3hEUVVOT0xHZEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xEWkRRVUUyUXl4RlFVTTNReXhEUVVGRExFTkJRMG9zUTBGQlF6dFJRVU5PTEVOQlFVTXNRMEZEU2l4RFFVRkRPMUZCUlVZc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eHRRMEZCYlVNc1EwRkRNME1zZFVWQlFUSkNMRVZCUXpOQ0xFTkJRVU1zVVVGQlowSXNSVUZCUlN4RlFVRkZPMWxCUTJwQ0xITkVRVUZWTEVOQlEwNHNaMFZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNPRU5CUVRoRExFVkJRemxETEVOQlFVTXNRMEZEU2l4RFFVRkRPMWxCUTBZc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMR0ZCUVdFc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dFpRVU12UXl4elJFRkJWU3hEUVVOT0xHZEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xEWkRRVUUyUXl4RlFVTTNReXhEUVVGRExFTkJRMG9zUTBGQlF6dFJRVU5PTEVOQlFVTXNRMEZEU2l4RFFVRkRPMUZCUlVZc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eHJRMEZCYTBNc1EwRkRNVU1zTWtWQlFTdENMRVZCUXk5Q0xFTkJRVU1zVVVGQlowSXNSVUZCUlN4RlFVRkZPMWxCUTJwQ0xFbEJRVWtzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhGUVVGRk8yZENRVU40UWl4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdZVUZEZEVRN1VVRkRUQ3hEUVVGRExFTkJRMG9zUTBGQlF6dFJRVVZHTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc2RVSkJRWFZDTEVOQlFVTXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhEUVVGRE8wbEJRelZFTEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNDdzJSRUZCTmtRN1NVRkROMFFzZVVKQlFYbENMRU5CUVVNc1QwRkJaME03VVVGRGRFUXNUVUZCVFN4SlFVRkpMRXRCUVVzc1EwRkJReXg1UWtGQmVVSXNRMEZCUXl4RFFVRkRPMGxCUXk5RExFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3gzUWtGQmQwSXNRMEZCUXl4eFFrRkJPRUk3VVVGRGJrUXNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeEhRVUZITEhGQ1FVRnhRaXhEUVVGRE8wbEJRMnhFTEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFN5eDVRa0ZCZVVJc1EwRkROMElzYzBKQlFUaERPMUZCUlRsRExFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1IwRkJSeXh6UWtGQmMwSXNRMEZCUXp0UlFVVm9SQ3hKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc2FVSkJRV2xDTEVOQlEzQkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc01rVkJRU3RDTEVOQlFVTTdZVUZEZUVRc1VVRkJVU3hEUVVOb1FpeERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEdsQ1FVRnBRaXhGUVVGRkxFTkJRVU03VVVGRk0wTXNNRU5CUVRCRE8xRkJRekZETEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUlVGQlJTeERRVUZETzBsQlF5OUNMRU5CUVVNN1NVRkZSRHM3VDBGRlJ6dEpRVU5KTEU5QlFVODdVVUZEVml4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExHRkJRV0VzUTBGQlF5eEpRVUZKTEhGRlFVRnhRaXhGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU01UkN4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNlVUpCUVhsQ0xFVkJRVVVzUTBGQlF6dEpRVU4yUkN4RFFVRkRPMGxCUlVRN096dFBRVWRITzBsQlEwa3NVMEZCVXp0UlFVTmFMRWxCUVVrc1EwRkJReXhoUVVGaExFTkJRVU1zWVVGQllTeERRVUZETEVsQlFVa3NiMFZCUVc5Q0xFVkJRVVVzUTBGQlF5eERRVUZETzFGQlF6ZEVMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4WlFVRlpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNRMEZCUXp0SlFVTXpSQ3hEUVVGRE8wbEJSVVE3TzA5QlJVYzdTVUZEU1N4VlFVRlZPMUZCUTJJc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eGhRVUZoTEVOQlFVTXNTVUZCU1N4M1JVRkJkMElzUlVGQlJTeERRVUZETEVOQlFVTTdVVUZEYWtVc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRE8wbEJRMjVETEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSkxFbEJRVWs3VVVGRFVDeEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFVkJRVVVzUTBGQlF6dFJRVU40UWl4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNWVUZCVlN4RlFVRkZMRU5CUVVNN1NVRkRlRU1zUTBGQlF6dEpRVVZFT3p0UFFVVkhPMGxCUTBzc2JVSkJRVzFDTzFGQlEzWkNMR2xGUVVGcFJUdFJRVU5xUlN4SlFVRkpMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zWVVGQllTeERRVUZETERaRVFVRnBRaXhEUVVGRExFVkJRVVU3V1VGRE9VTXNjMFpCUVhOR08xbEJRM1JHTEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUlVGQlJTeERRVUZETzFsQlF6VkNMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4NVFrRkJlVUlzUlVGQlJTeERRVUZETzFOQlEzUkVPMGxCUTB3c1EwRkJRenRKUVVWRU96czdPenM3TzA5QlQwYzdTVUZEU1N4blFrRkJaMElzUTBGQlF5eFhRVUZYTEVkQlFVY3NTMEZCU3p0UlFVTjJReXcwUkVGQk5FUTdVVUZETlVRc1NVRkJTU3hKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEdGQlFXRXNRMEZCUXl4UlFVRlJMRU5CUVVNc1JVRkJSVHRaUVVOeVF5eEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdXVUZETDBJc1QwRkJUenRUUVVOV08xRkJSVVFzT0VaQlFUaEdPMUZCUXpsR0xFbEJRVWtzVjBGQlZ5eEZRVUZGTzFsQlEySXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhqUVVGakxFTkJRVU1zVVVGQlVTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMWxCUXpORExFbEJRVWtzUTBGQlF5eFRRVUZUTEVWQlFVVXNRMEZCUXp0WlFVTnFRaXhQUVVGUE8xTkJRMVk3VVVGRlJDeHBSMEZCYVVjN1VVRkRha2NzTUVSQlFXTXNRMEZEVml4blJVRkJiMElzUlVGQlJTeEZRVU4wUWl4clNrRkJhMG9zUTBGRGNrb3NRMEZCUXp0SlFVTk9MRU5CUVVNN1NVRkZUU3hqUVVGak8xRkJRMnBDTEVsQlFVa3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhoUVVGaExFTkJRVU1zVVVGQlVTeERRVUZETEVWQlFVVTdXVUZEY2tNc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xbEJRemxDTEU5QlFVODdVMEZEVmp0UlFVVkVMREJGUVVFd1JUdFJRVU14UlN4MVJFRkJWeXhEUVVOUUxHZEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xIVkhRVUYxUnl4RFFVTXhSeXhEUVVGRE8wbEJRMDRzUTBGQlF6dEpRVVZQTEd0Q1FVRnJRaXhEUVVGRExFbEJRV0U3TzFGQlJYQkRMRXRCUVVzc1RVRkJUU3hYUVVGWExFbEJRVWtzTkVKQlFVa3NRMEZCUXl4cFFrRkJhVUlzTUVOQlFVVXNkMEpCUVhkQ0xEQkRRVUZGTEdOQlFXTXNNRU5CUVVVc1pVRkJaU3hGUVVGRkxHMURRVUZKTEVWQlFVVXNSVUZCUlR0WlFVTnFTQ3hKUVVGSkxEUkZRVUZuUXl4RFFVRkRMRmRCUVZjc1EwRkJReXhGUVVGRk8yZENRVU12UXl4WFFVRlhMRU5CUVVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eFBRVUZQTEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNN1lVRkROVU03VTBGRFNqdEpRVU5NTEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxHOUNRVUZ2UWp0UlFVTm9RaXhKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEdGQlFXRXNRMEZCUXl4SlFVRkpMSE5GUVVGelFpeEZRVUZGTEVOQlFVTXNRMEZCUXp0SlFVTnVSU3hEUVVGRE8wbEJSVVE3TzA5QlJVYzdTVUZEU0N4WlFVRlpPMUZCUTFJc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eGhRVUZoTEVOQlFVTXNTVUZCU1N3NFJFRkJZeXhGUVVGRkxFTkJRVU1zUTBGQlF6dEpRVU16UkN4RFFVRkRPMGxCUlVRN08wOUJSVWM3U1VGRFNDeG5Ra0ZCWjBJN1VVRkRXaXhKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEdGQlFXRXNRMEZCUXl4SlFVRkpMR3RGUVVGclFpeEZRVUZGTEVOQlFVTXNRMEZCUXp0SlFVTXZSQ3hEUVVGRE8wbEJSVVE3T3pzN08wOUJTMGM3U1VGRFNDeGhRVUZoTEVOQlFVTXNWMEZCYlVJc1JVRkJSU3h4UWtGQk9FSTdVVUZETjBRc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eGhRVUZoTEVOQlF6VkNMRWxCUVVrc2RVVkJRWFZDTEVOQlFVTTdXVUZEZUVJc1YwRkJWeXhGUVVGRkxGZEJRVmM3V1VGRGVFSXNjVUpCUVhGQ0xFVkJRVVVzY1VKQlFYRkNPMU5CUXk5RExFTkJRVU1zUTBGRFRDeERRVUZETzBsQlEwNHNRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGdzYlVKQlFXMUNPMUZCUTJZc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eGhRVUZoTEVOQlFVTXNTVUZCU1N4eFJVRkJjVUlzUlVGQlJTeERRVUZETEVOQlFVTTdTVUZEYkVVc1EwRkJRenRKUVVWRU96dFBRVVZITzBsQlEwZ3NhMEpCUVd0Q08xRkJRMlFzU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4aFFVRmhMRU5CUVVNc1NVRkJTU3h2UlVGQmIwSXNSVUZCUlN4RFFVRkRMRU5CUVVNN1NVRkRha1VzUTBGQlF6dEpRVVZFT3p0UFFVVkhPMGxCUTBnc1pVRkJaVHRSUVVOWUxFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNZVUZCWVN4RFFVRkRMRWxCUVVrc2FVVkJRV2xDTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpsRUxFTkJRVU03U1VGRlJEczdUMEZGUnp0SlFVTklMRzFDUVVGdFFqdFJRVU5tTEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1lVRkJZU3hEUVVGRExFbEJRVWtzY1VWQlFYRkNMRVZCUVVVc1EwRkJReXhEUVVGRE8xRkJRemxFTEVsQlFVa3NRMEZCUXl4bFFVRmxMRWRCUVVjc1NVRkJTU3hEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETzBsQlEzUkRMRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU0N4dlFrRkJiMElzUTBGQlF5eGpRVUZyUXp0UlFVTnVSQ3hKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEdGQlFXRXNRMEZETlVJc1NVRkJTU3h6UlVGQmMwSXNRMEZCUXl4RlFVRkZMR05CUVdNc1JVRkJSU3hEUVVGRExFTkJRMnBFTEVOQlFVTTdTVUZEVGl4RFFVRkRPMGxCUlVRc2FVTkJRV2xETEVOQlFVTXNVVUZCZDBNN1VVRkRkRVVzU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4aFFVRmhMRU5CUXpWQ0xFbEJRVWtzYlVaQlFXMURMRU5CUVVNc1JVRkJSU3hSUVVGUkxFVkJRVVVzUTBGQlF5eERRVU40UkN4RFFVRkRPMGxCUTA0c1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMR0ZCUVdFc1EwRkJReXhWUVVFeVFqdFJRVU55UXl4WFFVRlhPMUZCUTFnc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eGxRVUZsTEVsQlFVa3NTVUZCU1N4RFFVRkRMR1ZCUVdVc1MwRkJTeXhUUVVGVExFVkJRVVU3V1VGRE4wUXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTTdVMEZEY2tNN1VVRkRSQ3hWUVVGVkxFTkJRVU1zZFVKQlFYVkNMRU5CUXpsQ0xFbEJRVWtzUTBGQlF5eGxRVUZsTEVWQlEzQkNMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNSVUZEY2tJc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRlZCUVZVc1EwRkRjRU1zUTBGQlF6dFJRVVZHTEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1lVRkJZU3hEUVVNMVFpeEpRVUZKTEd0RlFVRnJRaXhEUVVGRExFVkJRVVVzWlVGQlpTeEZRVUZGTEZWQlFWVXNSVUZCUlN4RFFVRkRMRU5CUXpGRUxFTkJRVU03U1VGRFRpeERRVUZETzBsQlJVUTdPenRQUVVkSE8wbEJRMGdzYjBKQlFXOUNMRU5CUVVNc1JVRkJWVHRSUVVNelFpeEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMR0ZCUVdFc1EwRkROVUlzU1VGQlNTeHpSVUZCYzBJc1EwRkJReXhGUVVGRkxFdEJRVXNzUlVGQlJTeEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVTTFReXhEUVVGRE8wbEJRMDRzUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxHdENRVUZyUWl4RFFVRkRMRkZCUVhsQ096dFJRVU40UXl4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExHRkJRV0VzUTBGRE5VSXNTVUZCU1N4dlJVRkJiMElzUTBGQlF5eEZRVUZGTEZGQlFWRXNSVUZCUlN4RFFVRkRMRU5CUTNwRExFTkJRVU03VVVGRFJpeEpRVUZKTEZGQlFWRXNRMEZCUXl4elFrRkJjMElzUlVGQlJUdFpRVU5xUXl4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTzJkQ1FVTnlRaXhqUVVGUkxFTkJRVU1zYzBKQlFYTkNMRU5CUVVNc01rSkJRVEpDTEcxRFFVRkpMRXRCUVVzc1EwRkJRenRaUVVONlJTeEpRVUZKTEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUzBGQlN5eExRVUZMTEVWQlFVVTdaMEpCUTNKRExIVkVRVUZYTEVOQlExQXNaMFZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNkMGRCUVhkSExFTkJRek5ITEVOQlFVTTdZVUZEVER0VFFVTktPMUZCUlVRc1RVRkJUU3haUVVGWkxFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4WlFVRlpMRU5CUVVNN1VVRkRPVU1zVFVGQlRTeFRRVUZUTEVkQlFVY3NTVUZCU1N4bFFVRmxMRU5CUVVNc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0UlFVTTVSQ3gxUkVGQlZ5eERRVU5RTEdkRlFVRnZRaXhGUVVGRkxFVkJRM1JDTEhkQ1FVRjNRaXhaUVVGWkxFVkJRVVVzUTBGRGVrTXNRMEZCUXp0UlFVTkdMRWxCUVVrc1VVRkJVU3hEUVVGRExHVkJRV1VzUlVGQlJUdFpRVU14UWl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExHbENRVUZwUWl4RFFVTjZRaXh0UlVGQmRVSTdXVUZEZGtJc09FZEJRVGhITzFsQlF6bEhMRU5CUVVNc1dVRkJXU3hKUVVGSkxGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNiVVZCUVhWQ0xFTkJRVU1zUTBGQlF6dG5Ra0ZEY0VRc1EwRkJReXhEUVVGRExFMUJRVTBzUTBGQlF5eFZRVUZWTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXh0UlVGQmRVSXNRMEZCUXl4RFFVRkRPMmRDUVVNelJDeERRVUZETEVOQlFVTXNVVUZCVVN4RFFVRkRMR1ZCUVdVc1EwRkJReXhMUVVGTExFTkJRM1pETEVOQlFVTTdXVUZIUml4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExHbENRVUZwUWl4RFFVTjZRaXh0UlVGQmRVSXNSVUZEZGtJc1EwRkJReXhaUVVGWkxFbEJRVWtzVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4dFJVRkJkVUlzUTBGQlF5eERRVUZETzJkQ1FVTndSQ3hEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEZWQlFWVXNRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExHMUZRVUYxUWl4RFFVRkRMRU5CUVVNN1owSkJRek5FTEVOQlFVTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1pVRkJaU3hEUVVGRExFdEJRVXNzUTBGRGRrTXNRMEZCUXp0VFFVTk1PMUZCUTBRc1NVRkJTU3hSUVVGUkxFTkJRVU1zWTBGQll5eEZRVUZGTzFsQlEzcENMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zYVVKQlFXbENMRU5CUTNwQ0xEaEZRVUZyUXl4RlFVTnNReXhEUVVGRExGbEJRVmtzU1VGQlNTeFRRVUZUTEVOQlFVTXNSMEZCUnl4RFFVRkRMRGhGUVVGclF5eERRVUZETEVOQlFVTTdaMEpCUXk5RUxFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVTXNWVUZCVlN4RFFVRkRMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zT0VWQlFXdERMRU5CUVVNc1EwRkJRenRuUWtGRGRFVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1VVRkJVU3hEUVVGRExHTkJRV01zUTBGQlF5eFZRVUZWTEVkQlFVY3NTVUZCU1N4RFFVRkRMRU5CUVVNc2FVSkJRV2xDTEVOQlEzUkZMRU5CUVVNN1dVRkRSaXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEdsQ1FVRnBRaXhEUVVONlFpdzRSVUZCYTBNc1JVRkRiRU1zUTBGQlF5eFpRVUZaTEVsQlFVa3NVMEZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXc0UlVGQmEwTXNRMEZCUXl4RFFVRkRPMmRDUVVNdlJDeERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMRlZCUVZVc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETERoRlFVRnJReXhEUVVGRExFTkJRVU03WjBKQlEzUkZMRU5CUVVNc1EwRkJReXhEUVVGRExGRkJRVkVzUTBGQlF5eGpRVUZqTEVOQlFVTXNWVUZCVlN4SFFVRkhMRWxCUVVrc1EwRkJReXhEUVVGRExHbENRVUZwUWl4RFFVVjBSU3hEUVVGRE8xbEJRMFlzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4cFFrRkJhVUlzUTBGRGVrSXNkVVZCUVRKQ0xFVkJRek5DTEVOQlFVTXNXVUZCV1N4SlFVRkpMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zZFVWQlFUSkNMRU5CUVVNc1EwRkJRenRuUWtGRGVFUXNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhWUVVGVkxFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4MVJVRkJNa0lzUTBGQlF5eERRVUZETzJkQ1FVTXZSQ3hEUVVGRExFTkJRVU1zVVVGQlVTeERRVUZETEdOQlFXTXNRMEZCUXl4SFFVRkhMRU5CUTNCRExFTkJRVU03VTBGRFREdEpRVU5NTEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNDd3dRa0ZCTUVJc1EwRkJReXh0UWtGQk5FSTdVVUZEYmtRc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eGpRVUZqTEVOQlEzUkNMSEZGUVVGNVFpeEZRVU42UWl4dFFrRkJiVUlzUTBGRGRFSXNRMEZCUXp0SlFVTk9MRU5CUVVNN1NVRkZSQ3hqUVVGakxFTkJRVU1zVjBGQmJVSTdVVUZET1VJc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eGhRVUZoTEVOQlF6VkNMRWxCUVVrc1owVkJRV2RDTEVOQlFVTXNSVUZCUlN4TFFVRkxMRVZCUVVVc1YwRkJWeXhGUVVGRkxFTkJRVU1zUTBGREwwTXNRMEZCUXp0SlFVTk9MRU5CUVVNN1NVRkZSQ3h4UkVGQmNVUTdTVUZEY2tRc05rSkJRVFpDTEVOQlFVTXNhMEpCUVhORE8xRkJRMmhGTEdkRFFVRm5RenRSUVVOb1F5eEpRVUZKTEcxQ1FVRnRRaXhIUVVGSExHdENRVUZyUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zYzBKQlFYTkNMRVZCUVVVc1EwRkJRenRSUVVVelJpeHBSRUZCYVVRN1VVRkRha1FzU1VGQlNTeHRRa0ZCYlVJc1NVRkJTU3hKUVVGSkxFVkJRVVU3V1VGRk4wSXNaMFZCUVdkRk8xbEJRMmhGTEVsQlFVa3NZMEZCWXl4SFFVRkhMR3RDUVVGclFpeERRVUZETEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc1pVRkJaU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEZOQlFWTXNSVUZCUlN4RlFVRkZMRU5CUVVNc1UwRkJVeXhEUVVGRExFVkJRVVVzU1VGQlNTeHRRa0ZCYlVJc1EwRkJReXhuUWtGQlowSXNSVUZCUlN4SlFVRkpMRU5CUVVNN1dVRkZOVW9zYTBkQlFXdEhPMWxCUTJ4SExFbEJRVWtzWTBGQll5eEpRVUZKTEVsQlFVa3NTVUZCU1N4alFVRmpMRU5CUVVNc1lVRkJZU3hKUVVGSkxFOUJRVThzU1VGQlNTeGpRVUZqTEVOQlFVTXNZVUZCWVN4SlFVRkpMRXRCUVVzc1JVRkJSVHRuUWtGRk5VY3NORU5CUVRSRE8yZENRVU0xUXl4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExHRkJRV0VzUTBGQlF5eEpRVUZKTERKRlFVRXlRaXhGUVVGRkxFTkJRVU1zUTBGQlF6dGhRVU4yUlR0WlFVTkVMRzFGUVVGdFJUdFpRVU51UlN4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRMR1ZCUVdVc1JVRkJSU3hKUVVGSkxFTkJRVU1zTmtKQlFUWkNMRU5CUVVNc1EwRkJRenRUUVVNdlJqdEpRVU5NTEVOQlFVTTdTVUZGUkRzN096dFBRVWxITzBsQlEwa3NhMEpCUVd0Q08xRkJRM0pDTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNWMEZCVnl4RFFVRkRMRmxCUVZrc1JVRkJSU3hGUVVGRk8xbEJRM0JFTEU5QlFVOHNTMEZCU3l4RFFVRkRPMU5CUTJoQ08xRkJRMFFzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExHVkJRV1VzUlVGQlJTeERRVUZETzFGQlEzcERMRTlCUVU4c1NVRkJTU3hEUVVGRE8wbEJRMmhDTEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNTdzJRa0ZCTmtJc1EwRkJReXhOUVVGdlF6dFJRVU55UlN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRmRCUVZjc1EwRkJReXhaUVVGWkxFVkJRVVVzUlVGQlJUdFpRVU53UkN4UFFVRlBMRXRCUVVzc1EwRkJRenRUUVVOb1FqdFJRVU5FTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc2FVTkJRV2xETEVWQlFVVTdXVUZEZWtNc1NVRkJTU3hEUVVGRExHbERRVUZwUXl4SFFVRkhMRWxCUVVrc01rZEJRV2RETEVOQlEzcEZMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl3d1FrRkJNRUlzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVWQlF6bEZMRU5CUVVNc1RVRkJiME1zUlVGQlJTeEZRVUZGTzJkQ1FVTnlReXhKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEdGQlFXRXNRMEZCUXl4SlFVRkpMR2xHUVVGcFF5eERRVUZGTEVWQlFVVXNUVUZCVFN4RlFVRkZMRU5CUVVNc1EwRkJRenRaUVVONFJpeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTlFMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNRMEZEYWtJc1owTkJRV2RETEVWQlEyaERMRU5CUVVNc1JVRkJReXhKUVVGSkxFVkJRVVVzUlVGQlF5eFJRVUZSTEVWQlFVTXNSVUZCUlN4RlFVRkZMRVZCUVVVN1owSkJRM0JDTEVsQlFVa3NRMEZCUXl4cFEwRkJhVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1dVRkROMFFzUTBGQlF5eERRVU5LTzFOQlEwbzdVVUZEUkN4UFFVRlBMRWxCUVVrc1EwRkJReXhwUTBGQmFVTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03U1VGRGFFVXNRMEZCUXp0SlFVVkVPenM3TzA5QlNVYzdTVUZEU1N4alFVRmpPMUZCUTJwQ0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zVjBGQlZ5eERRVUZETEZsQlFWa3NSVUZCUlN4RlFVRkZPMWxCUTNCRUxFOUJRVThzUzBGQlN5eERRVUZETzFOQlEyaENPMUZCUTBRc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRmRCUVZjc1JVRkJSU3hEUVVGRE8xRkJRM0pETEU5QlFVOHNTVUZCU1N4RFFVRkRPMGxCUTJoQ0xFTkJRVU03U1VGRlJEczdPenRQUVVsSE8wbEJRMGtzWVVGQllUdFJRVU5vUWl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRmRCUVZjc1EwRkJReXhaUVVGWkxFVkJRVVVzUlVGQlJUdFpRVU53UkN4UFFVRlBMRXRCUVVzc1EwRkJRenRUUVVOb1FqdFJRVU5FTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eHBRa0ZCYVVJc1JVRkJSU3hEUVVGRE8xRkJRek5ETEU5QlFVOHNTVUZCU1N4RFFVRkRPMGxCUTJoQ0xFTkJRVU03U1VGRlJEczdPenRQUVVsSE8wbEJRMGtzYVVKQlFXbENMRU5CUVVNc1ZVRkJNa0k3VVVGRGFFUXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4WFFVRlhMRU5CUVVNc1dVRkJXU3hGUVVGRkxFVkJRVVU3V1VGRGNFUXNUMEZCVHl4TFFVRkxMRU5CUVVNN1UwRkRhRUk3VVVGRFJDeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU03VVVGRGNrUXNUMEZCVHl4SlFVRkpMRU5CUVVNN1NVRkRhRUlzUTBGQlF6dEpRVVZFT3pzN08wOUJTVWM3U1VGRFNTeFhRVUZYTEVOQlFVTXNWVUZCYTBJN1VVRkRha01zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eFhRVUZYTEVOQlFVTXNXVUZCV1N4RlFVRkZMRVZCUVVVN1dVRkRjRVFzVDBGQlR5eExRVUZMTEVOQlFVTTdVMEZEYUVJN1VVRkRSQ3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhKUVVGSkxHZENRVUZuUWl4SlFVRkpMRlZCUVZVc1JVRkJSVHRaUVVNNVJDeFBRVUZQTEV0QlFVc3NRMEZCUXp0VFFVTm9RanRSUVVORUxFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhYUVVGWExFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTTdVVUZETDBNc1QwRkJUeXhKUVVGSkxFTkJRVU03U1VGRGFFSXNRMEZCUXp0SlFVVkVPenM3TzA5QlNVYzdTVUZEU1N4clFrRkJhMElzUTBGQlF5eFBRVUZsTzFGQlEzSkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1YwRkJWeXhEUVVGRExGbEJRVmtzUlVGQlJTeEZRVUZGTzFsQlEyeEdMRTlCUVU4c1MwRkJTeXhEUVVGRE8xTkJRMmhDTzFGQlEwUXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETzFGQlEyNUVMRTlCUVU4c1NVRkJTU3hEUVVGRE8wbEJRMmhDTEVOQlFVTTdTVUZGUkRzN096dFBRVWxITzBsQlEwa3NkMEpCUVhkQ0xFTkJRek5DTEVsQlFWa3NSVUZEV2l4UlFVRnZRenRSUVVWd1F5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zYTBKQlFXdENMRU5CUVVNc2QwSkJRWGRDTEVOQlFVTXNTVUZCU1N4RlFVRkZMRkZCUVZFc1EwRkJReXhEUVVGRE8wbEJRM1pHTEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNTd3lRa0ZCTWtJc1EwRkJReXhKUVVGWk8xRkJRek5ETEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXd5UWtGQk1rSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRKUVVOb1JpeERRVUZETzBsQlJVUTdPenM3VDBGSlJ6dEpRVU5KTEdGQlFXRXNRMEZCUXl4RFFVRnpRanRSUVVOMlF5eFBRVUZQTEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBsQlF5OURMRU5CUVVNN1NVRkZSRHM3T3p0UFFVbEhPMGxCUTBrc1owSkJRV2RDTEVOQlIzSkNMRWxCUVU4c1JVRkJSU3hSUVVGblF6dFJRVU4yUXl4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRWxCUVVrc1JVRkJSU3hSUVVGUkxFTkJRVU1zUTBGQlF6dEpRVU40UkN4RFFVRkRPMGxCUlVRN096czdUMEZKUnp0SlFVTkpMRzFDUVVGdFFpeERRVWQ0UWl4SlFVRlBMRVZCUVVVc1VVRkJaME03VVVGRGRrTXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4SlFVRkpMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVU03U1VGRE0wUXNRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGtzVVVGQlVUdFJRVU5ZTEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc1UwRkJVeXhGUVVGRkxFTkJRVU03U1VGRGNrTXNRMEZCUXp0SlFVVkVPenM3TzA5QlNVYzdTVUZEU1N4MVFrRkJkVUlzUTBGQlF5eDNRa0ZCYjBNN1VVRkRMMFFzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExHOUNRVUZ2UWl4SFFVRkhMSGRDUVVGM1FpeERRVUZETzBsQlF6TkZMRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU0N4SlFVRlhMRzFDUVVGdFFqdFJRVU14UWl4UFFVRlBMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4dFFrRkJiVUlzUTBGQlF6dEpRVU4wUkN4RFFVRkRPMGxCUlVRN08wOUJSVWM3U1VGRFNDeEpRVUZYTEdWQlFXVTdVVUZEZEVJc1QwRkJUeXhKUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNN1NVRkRha01zUTBGQlF6dEpRVVZOTEhOQ1FVRnpRaXhEUVVGRExFbEJRVmtzUlVGQlJTeFRRVUV5UWl4RlFVRkZMRTlCUVRoRU8xRkJRMjVKTEVsQlFVY3NVMEZCVXl4TFFVRkxMSEZIUVVFMlFpeEpRVUZKTEU5QlFVOHNUMEZCVHl4TFFVRkxMRmRCUVZjc1JVRkJSVHRaUVVNNVJTd3dSRUZCWXl4RFFVRkRMR2RGUVVGdlFpeEZRVUZGTEVWQlFVVXNLME5CUVN0RExFbEJRVWtzUlVGQlJTeERRVUZETzFsQlF6ZEdMRTlCUVU4N1UwRkRWanRSUVVWRUxFbEJRVWNzVTBGQlV5eExRVUZMTEcxSFFVRXlRaXhKUVVGSkxFOUJRVThzVDBGQlR5eExRVUZMTEZkQlFWY3NSVUZCUlR0WlFVTTFSU3hKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc2RVSkJRWFZDTEVOQlFVTXNjMEpCUVhOQ0xFTkJRMnBGTEZOQlFWTXNSVUZEVkN4SlFVRkpMRVZCUTBvc1EwRkJReXhKUVVFMFFpeEZRVUZGTEVWQlFVVXNRMEZEYWtNc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMSEZDUVVGeFFpeERRVUZETEhGQ1FVRnhRaXhEUVVNNVJDeEpRVUZKTEVWQlEwb3NTVUZCU1N4RFFVTlFMRU5CUTBvc1EwRkJRenRUUVVOTU8yRkJRVTA3V1VGRFNDeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zZFVKQlFYVkNMRU5CUVVNc2MwSkJRWE5DTEVOQlEycEZMRk5CUVZNc1JVRkRWQ3hKUVVGSkxFVkJRMG9zUTBGQlF5eEpRVUZwUWl4RlFVRkZMRVZCUVVVc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlEzWkRMRU5CUVVNN1UwRkRURHRKUVVOTUxFTkJRVU03U1VGRlJDeEpRVUZYTEd0Q1FVRnJRanRSUVVONlFpeFBRVUZQTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eDFRa0ZCZFVJc1EwRkJReXhyUWtGQmEwSXNRMEZCUXp0SlFVTTNSU3hEUVVGRE8wbEJSVTBzWTBGQll6dFJRVU5xUWl4UFFVRlBMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4alFVRmpMRU5CUVVNN1NVRkRha1FzUTBGQlF6dERRVU5LT3pzN096czdPenM3T3pzN096czdRVU14TTBKRUxHdEVRVUZyUkR0QlFVdHNSRHM3UjBGRlJ6dEJRVU5KTEUxQlFVMHNaMEpCUVdkQ08wbEJWWHBDT3pzN1QwRkhSenRKUVVOSUxGbEJRVmtzYTBKQlFTdENPMUZCUTNaRExFbEJRVWtzUTBGQlF5eGpRVUZqTEVkQlFVY3NTVUZCU1N4RFFVRkRPMUZCUXpOQ0xFbEJRVWtzUTBGQlF5eFhRVUZYTEVkQlFVY3NTVUZCU1N4RFFVRkRPMUZCUlhoQ0xFbEJRVWtzWTBGQll5eEpRVUZKTEZGQlFWRXNRMEZCUXl4bFFVRmxMRVZCUVVVN1dVRkROVU1zU1VGQlNTeERRVUZETERaQ1FVRTJRaXhEUVVGRExHdENRVUZyUWl4RFFVRkRMRU5CUVVNN1UwRkRNVVE3U1VGRFRDeERRVUZETzBsQlJVUTdPenM3TzA5QlMwYzdTVUZEU0N3MlJFRkJOa1E3U1VGRE4wUXNaME5CUVdkRExFTkJRelZDTEVOQlFWTXNSVUZEVkN4RFFVRlRPMUZCUlZRc1QwRkJUeXhKUVVGSkxFTkJRVU03U1VGRGFFSXNRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5JTERaQ1FVRTJRaXhEUVVGRExHdENRVUVyUWp0UlFVTjZSQ3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZkQlFWY3NSVUZCUlR0WlFVTnVRaXhKUVVGSkxFTkJRVU1zVjBGQlZ5eEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03V1VGRGJrUXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhGUVVGRkxFZEJRVWNzWVVGQllTeERRVUZETzFsQlEzQkRMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zVTBGQlV5eEhRVUZITEVOQlFVTXNRMEZCUXp0WlFVVXZRaXd3UkVGQk1FUTdXVUZETVVRc2EwUkJRV3RFTzFsQlEyeEVMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNSMEZCUnl4VlFVRlZMRU5CUVVNN1dVRkROME1zU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hIUVVGSExFMUJRVTBzUTBGQlF6dFpRVU55UXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEVkQlFVY3NTMEZCU3l4RFFVRkRPMWxCUTNKRExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1IwRkJSeXhIUVVGSExFTkJRVU03V1VGRmNrTXNhMEpCUVd0Q0xFTkJRVU1zVjBGQlZ5eERRVUZETEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRenRUUVVOd1JEdFJRVVZFTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1kwRkJZeXhGUVVGRk8xbEJRM1JDTEVsQlFVa3NRMEZCUXl4alFVRmpMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0WlFVTjJSQ3hKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEVWQlFVVXNSMEZCUnl4blFrRkJaMElzUTBGQlF6dFpRVU14UXl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExGTkJRVk1zUjBGQlJ5eFhRVUZYTEVOQlFVTTdXVUZETlVNc2EwSkJRV3RDTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF6dFpRVVZ3UkN3clFrRkJLMEk3V1VGREwwSXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhMUVVGTExFTkJRVU1zVDBGQlR5eEhRVUZITEUxQlFVMHNRMEZCUXp0WlFVVXpReXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExGVkJRVlVzUlVGQlJTeERRVUZETEV0QlFWa3NSVUZCUlN4RlFVRkZPMmRDUVVNNVJDd3JRa0ZCSzBJN1owSkJReTlDTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU03WjBKQlEzcENMRXRCUVVzc1EwRkJReXhqUVVGakxFVkJRVVVzUTBGQlF6dFpRVU16UWl4RFFVRkRMRU5CUVVNc1EwRkJRenRUUVVOT08wbEJRMHdzUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxHOUNRVUZ2UWl4RFFVRkRMRTlCUVdkRE8xRkJRMnBFTEVsQlFVa3NUMEZCVHl4RFFVRkRMRzlDUVVGdlFpeEZRVUZGTzFsQlF6bENMQ3RDUVVFclFqdFpRVU12UWl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFdEJRVXNzUTBGQlF5eFBRVUZQTEVkQlFVY3NVMEZCVXl4RFFVRkRPMWxCUXpsRExIbEVRVUY1UkR0WlFVTjZSQ3hOUVVGTkxFZEJRVWNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNaME5CUVdkRExFTkJRemRETEU5QlFVOHNRMEZCUXl4RFFVRkRMRVZCUTFRc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGRFdpeERRVUZETzFsQlEwWXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eEhRVUZITEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1VVRkJVU3hGUVVGRkxFZEJRVWNzU1VGQlNTeERRVUZETzFsQlEzaEVMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NSMEZCUnl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETEVOQlFVTXNVVUZCVVN4RlFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGRE8xTkJRMjVGTzJGQlFVMDdXVUZEU0N3clFrRkJLMEk3V1VGREwwSXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhMUVVGTExFTkJRVU1zVDBGQlR5eEhRVUZITEUxQlFVMHNRMEZCUXp0WlFVTXpReXdyUWtGQkswSTdXVUZETDBJc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXp0VFFVTXpRanRKUVVOTUxFTkJRVU03UTBGRFNqczdPenM3T3pzN096czdPenM3T3p0QlEzaEhSQ3hyUkVGQmEwUTdRVUZGVWp0QlFVVnVReXhOUVVGTkxHdENRVUZyUWp0SlFVRXZRanRSUVVOSkxESkNRVUZ6UWl4SFFVRTBReXhKUVVGSkxFZEJRVWNzUlVGQlJTeERRVUZETzBsQmVVTm9SaXhEUVVGRE8wbEJka05IT3pzN08wOUJTVWM3U1VGRFNDeDNRa0ZCZDBJc1EwRkRjRUlzU1VGQldTeEZRVU5hTEZGQlFXOURPMUZCUlhCRExFbEJRVWtzUTBGQlF5eHpRa0ZCYzBJc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeEZRVUZGTEZGQlFWRXNRMEZCUXl4RFFVRkRPMGxCUTNCRUxFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3d5UWtGQk1rSXNRMEZCUXl4SlFVRlpPMUZCUTNCRExFbEJRVWtzUTBGQlF5eHpRa0ZCYzBJc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdTVUZETjBNc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMRlZCUVZVc1EwRkJReXhQUVVGdlFqdFJRVU16UWl4elJFRkJWU3hEUVVOT0xHZEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xIZERRVUYzUXl4RlFVTjRReXhEUVVGRExFTkJRMG9zUTBGQlF6dFJRVU5HTEUxQlFVMHNVMEZCVXl4SFFVRkhMRWxCUVVrc1YwRkJWeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdVVUZGY2tVc2MwUkJRVlVzUTBGQlF5eG5SVUZCYjBJc1JVRkJSU3hGUVVGRkxGTkJRVk1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTnFSQ3hKUVVGSkxFTkJRVU1zYzBKQlFYTkNMRU5CUVVNc1QwRkJUeXhEUVVNdlFpeERRVUZETEZGQlFXOURMRVZCUVVVc1JVRkJSVHRaUVVOeVF5eFJRVUZSTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1VVRkRlRUlzUTBGQlF5eERRVU5LTEVOQlFVTTdTVUZEVGl4RFFVRkRPME5CUTBvN096czdPenM3T3pzN096czdPenM3UVVNNVEwUXNhMFJCUVd0RU8wRkJSMUk3UVVGSGJrTXNUVUZCVFN4eFFrRkJjVUk3U1VGSk9VSTdPenRQUVVkSE8wbEJRMGdzV1VGRFNTeHBRa0ZCYjBNc1JVRkRjRU1zTmtKQlFYTkVPMUZCUlhSRUxFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1IwRkJSeXhwUWtGQmFVSXNRMEZCUXp0UlFVTXpReXhKUVVGSkxFTkJRVU1zTmtKQlFUWkNMRWRCUVVjc05rSkJRVFpDTEVOQlFVTTdTVUZEZGtVc1EwRkJRenRKUVVWRU96czdPenRQUVV0SE8wbEJRMGdzY1VKQlFYRkNMRU5CUVVNc1YwRkJiVUlzUlVGQlJTeFhRVUZ2UXp0UlFVTXpSU3hKUVVGSkxGZEJRVmNzUzBGQlN5eFRRVUZUTEVWQlFVVTdXVUZETTBJc1YwRkJWeXhIUVVGSExFVkJRVVVzUTBGQlF6dFRRVU53UWp0UlFVVkVMRTFCUVUwc2EwSkJRV3RDTEVkQlEzQkNMRWxCUVVrc1EwRkJReXcyUWtGQk5rSXNRMEZCUXl4clFrRkJhMElzUTBGQlF6dFJRVU14UkN4TlFVRk5MR0ZCUVdFc1IwRkJSeXhyUWtGQmEwSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU03VVVGRE1VUXNTVUZCU1N4aFFVRmhMRXRCUVVzc1UwRkJVeXhGUVVGRk8xbEJRemRDTEhkRVFVRlpMRU5CUTFJc1owVkJRVzlDTEVWQlFVVXNSVUZEZEVJc2EwVkJRV3RGTEZkQlFWY3NiVWhCUVcxSUxFTkJRMjVOTEVOQlFVTTdXVUZEUml4UFFVRlBPMU5CUTFZN1VVRkZSQ3hKUVVGSExHRkJRV0VzUTBGQlF5eFRRVUZUTEVsQlFVa3NWMEZCVnl4SlFVRkpMR0ZCUVdFc1EwRkJReXhUUVVGVExFTkJRVU1zVFVGQlRTeExRVUZMTEZkQlFWY3NRMEZCUXl4TlFVRk5MRVZCUVVVN1dVRkRhRWNzZDBSQlFWa3NRMEZEVWl4blJVRkJiMElzUlVGQlJTeEZRVU4wUWl4dFJVRkJiVVVzWVVGQllTeERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhQUVVGbExFVkJRVVVzUlVGQlJUdG5Ra0ZETDBjc1VVRkJVU3hQUVVGUExFVkJRVVU3YjBKQlEySXNTMEZCU3l4UFFVRlBMRU5CUVVNN2IwSkJRMklzUzBGQlN5eFJRVUZSTEVOQlFVTTdiMEpCUTJRc1MwRkJTeXhQUVVGUExFTkJRVU03YjBKQlEySXNTMEZCU3l4UFFVRlBMRU5CUVVNN2IwSkJRMklzUzBGQlN5eFJRVUZSTzNkQ1FVTlVMRTlCUVU4c1VVRkJVU3hEUVVGRE8yOUNRVU53UWl4TFFVRkxMRkZCUVZFN2QwSkJRMVFzVDBGQlR5eFJRVUZSTEVOQlFVTTdhVUpCUTNaQ08xbEJRMHdzUTBGQlF5eERRVUZETEVOQlFVTXNVVUZCVVN4RlFVRkhMSEZDUVVGeFFpeFhRVUZYTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1QwRkJkMElzUlVGQlJTeEZRVUZGTEVOQlFVTXNUMEZCVHl4UFFVRlBMRU5CUVVNc1EwRkJReXhSUVVGUkxFVkJRVVVzU1VGQlNTeERRVU5zU0N4RFFVRkRPMWxCUTBZc1QwRkJUenRUUVVOV08xRkJSVVFzU1VGQlNTeFZRVUZWTEVkQlFVY3NRMEZCUXl4RFFVRkRPMUZCUTI1Q0xFMUJRVTBzVjBGQlZ5eEhRVUZITEVsQlFVa3NWMEZCVnl4RlFVRkZMRU5CUVVNN1VVRkRkRU1zZDBWQlFYZEZPMUZCUTNoRkxGZEJRVmNzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4UFFVRjNRaXhGUVVGRkxFZEJRVmNzUlVGQlJTeEZRVUZGTzFsQlF6RkVMRTFCUVUwc1NVRkJTU3hIUVVGSExHRkJRV0VzUTBGQlF5eFRRVUZUTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1dVRkRNVU1zVVVGQlVTeEpRVUZKTEVWQlFVVTdaMEpCUTFZc1MwRkJTeXhQUVVGUE8yOUNRVU5TTEZWQlFWVXNTVUZCU1N4RFFVRkRMRU5CUVVNN2IwSkJRMmhDTEUxQlFVMDdaMEpCUlZZc1MwRkJTeXhSUVVGUk8yOUNRVU5VTEZWQlFWVXNTVUZCU1N4RFFVRkRMRU5CUVVNN2IwSkJRMmhDTEUxQlFVMDdaMEpCUlZZc1MwRkJTeXhQUVVGUE8yOUNRVU5TTEZWQlFWVXNTVUZCU1N4RFFVRkRMRU5CUVVNN2IwSkJRMmhDTEUxQlFVMDdaMEpCUlZZc1MwRkJTeXhQUVVGUE8yOUNRVU5TTEZWQlFWVXNTVUZCU1N4RFFVRkRMRU5CUVVNN2IwSkJRMmhDTEUxQlFVMDdaMEpCUlZZc1MwRkJTeXhSUVVGUk8yOUNRVU5VTEZWQlFWVXNTVUZCU1N4RFFVRkRMRU5CUVVNN2IwSkJRMmhDTEUxQlFVMDdaMEpCUlZZc1MwRkJTeXhSUVVGUk8yOUNRVU5VTERSQ1FVRTBRanR2UWtGRE5VSXNWVUZCVlN4SlFVRkpMRU5CUVVNc1EwRkJRenR2UWtGRGFFSXNlVUpCUVhsQ08yOUNRVU42UWl4VlFVRlZMRWxCUVVrc1EwRkJReXhIUVVGSExGZEJRVmNzUTBGQlF5eE5RVUZOTEVOQlFVTXNUMEZCYVVJc1EwRkJReXhEUVVGRExFMUJRVTBzUTBGQlF6dHZRa0ZETDBRc1RVRkJUVHRoUVVOaU8xRkJRMHdzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZGU0N4TlFVRk5MRWxCUVVrc1IwRkJSeXhKUVVGSkxGRkJRVkVzUTBGQlF5eEpRVUZKTEZkQlFWY3NRMEZCUXl4VlFVRlZMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU16UkN4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zUlVGQlJTeGhRVUZoTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1VVRkRia01zU1VGQlNTeFZRVUZWTEVkQlFVY3NRMEZCUXl4RFFVRkRPMUZCUlc1Q0xGZEJRVmNzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4UFFVRjNRaXhGUVVGRkxFZEJRVmNzUlVGQlJTeEZRVUZGTzFsQlF6RkVMRTFCUVUwc1NVRkJTU3hIUVVGSExHRkJRV0VzUTBGQlF5eFRRVUZUTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1dVRkRNVU1zVVVGQlVTeEpRVUZKTEVWQlFVVTdaMEpCUTFZc1MwRkJTeXhQUVVGUE8yOUNRVU5TTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFOUJRV2xDTEVOQlFVTXNRMEZCUXp0dlFrRkROME1zVlVGQlZTeEpRVUZKTEVOQlFVTXNRMEZCUXp0dlFrRkRhRUlzVFVGQlRUdG5Ra0ZGVml4TFFVRkxMRkZCUVZFN2IwSkJRMVFzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4VlFVRlZMRVZCUVVVc1QwRkJhVUlzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0dlFrRkRjRVFzVlVGQlZTeEpRVUZKTEVOQlFVTXNRMEZCUXp0dlFrRkRhRUlzVFVGQlRUdG5Ra0ZGVml4TFFVRkxMRTlCUVU4N2IwSkJRMUlzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4VlFVRlZMRVZCUVVVc1QwRkJhVUlzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0dlFrRkRia1FzVlVGQlZTeEpRVUZKTEVOQlFVTXNRMEZCUXp0dlFrRkRhRUlzVFVGQlRUdG5Ra0ZGVml4TFFVRkxMRTlCUVU4N2IwSkJRMUlzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4VlFVRlZMRVZCUVVVc1QwRkJhVUlzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0dlFrRkRja1FzVlVGQlZTeEpRVUZKTEVOQlFVTXNRMEZCUXp0dlFrRkRhRUlzVFVGQlRUdG5Ra0ZGVml4TFFVRkxMRkZCUVZFN2IwSkJRMVFzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4VlFVRlZMRVZCUVVVc1QwRkJhVUlzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0dlFrRkRja1FzVlVGQlZTeEpRVUZKTEVOQlFVTXNRMEZCUXp0dlFrRkRhRUlzVFVGQlRUdG5Ra0ZGVml4TFFVRkxMRkZCUVZFN2IwSkJRMVFzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4VlFVRlZMRVZCUVVjc1QwRkJhMElzUTBGQlF5eE5RVUZOTEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN2IwSkJRemRFTEZWQlFWVXNTVUZCU1N4RFFVRkRMRU5CUVVNN2IwSkJRMmhDTEV0QlFVc3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlNTeFBRVUZyUWl4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJUdDNRa0ZEYWtRc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eFZRVUZWTEVWQlFVY3NUMEZCYTBJc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN2QwSkJRM0JGTEZWQlFWVXNTVUZCU1N4RFFVRkRMRU5CUVVNN2NVSkJRMjVDTzI5Q1FVTkVMRTFCUVUwN1lVRkRZanRSUVVOTUxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlJVZ3NTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4UFFVRlBMRVZCUVVVc1JVRkJSVHRaUVVOdVF5eDFSRUZCVnl4RFFVTlFMR2RGUVVGdlFpeEZRVUZGTEVWQlEzUkNMREpFUVVFeVJDeFhRVUZYTEUxQlFVMHNTVUZCU1N4VlFVRlZMRU5CUTNSR0xFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlEyUXNSVUZCUlN4RFFVTk9MRU5CUVVNN1dVRkRSaXhQUVVGUE8xTkJRMVk3VVVGRlJDeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRKUVVOcVJDeERRVUZETzBOQlEwbzdPenM3T3pzN096czdPenM3T3pzN096dEJRM3BLUkN4clJFRkJhMFE3UVVGRlVqdEJRVVZ1UXl4TlFVRk5MR2xDUVVGcFFqdERRVWMzUWp0QlFVVk5MRTFCUVUwc2RVSkJRWFZDTzBsQlkyaERPMUZCUTBrc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4SFFVRkhMRWxCUVVrc1IwRkJSeXhGUVVGRkxFTkJRVU03VVVGRGNFTXNTVUZCU1N4RFFVRkRMRzlDUVVGdlFpeEhRVUZITEVsQlFVa3NSMEZCUnl4RlFVRkZMRU5CUVVNN1VVRkRkRU1zU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhIUVVGSExFbEJRVWtzUjBGQlJ5eEZRVUZGTEVOQlFVTTdVVUZEY0VNc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4SFFVRkhMRWxCUVVrc1IwRkJSeXhGUVVGRkxFTkJRVU03U1VGRE1VTXNRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGdzZFVKQlFYVkNPMUZCUTI1Q096dFhRVVZITzFGQlEwZ3NTVUZCU1N4RFFVRkRMR3RDUVVGclFpeERRVUZETEVkQlFVY3NRMEZCUXl4bFFVRmxMRVZCUVVVN1dVRkRla01zUlVGQlJTeEZRVUZGTEVOQlFVTTdXVUZEVEN4VFFVRlRMRVZCUVVVc1JVRkJSVHRUUVVOb1FpeERRVUZETEVOQlFVTTdVVUZEU0N4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNSMEZCUnl4RFFVRkRMSFZDUVVGMVFpeEZRVUZGTzFsQlEycEVMRVZCUVVVc1JVRkJSU3hEUVVGRE8xbEJRMHdzVTBGQlV5eEZRVUZGTEVWQlFVVTdVMEZEYUVJc1EwRkJReXhEUVVGRE8xRkJRMGdzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFZEJRVWNzUTBGQlF5eFpRVUZaTEVWQlFVVTdXVUZEZEVNc1JVRkJSU3hGUVVGRkxFTkJRVU03V1VGRFRDeFRRVUZUTEVWQlFVVXNSVUZCUlR0VFFVTm9RaXhEUVVGRExFTkJRVU03VVVGRFNDeEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUjBGQlJ5eERRVUZETEhWQ1FVRjFRaXhGUVVGRk8xbEJRMnBFTEVWQlFVVXNSVUZCUlN4RFFVRkRPMWxCUTB3c1UwRkJVeXhGUVVGRkxFVkJRVVU3VTBGRGFFSXNRMEZCUXl4RFFVRkRPMUZCUTBnc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRWRCUVVjc1EwRkJReXhuUWtGQlowSXNSVUZCUlR0WlFVTXhReXhGUVVGRkxFVkJRVVVzUTBGQlF6dFpRVU5NTEZOQlFWTXNSVUZCUlN4RlFVRkZPMU5CUTJoQ0xFTkJRVU1zUTBGQlF6dFJRVU5JTEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eEhRVUZITEVOQlFVTXNaVUZCWlN4RlFVRkZPMWxCUTNwRExFVkJRVVVzUlVGQlJTeERRVUZETzFsQlEwd3NVMEZCVXl4RlFVRkZMRVZCUVVVN1UwRkRhRUlzUTBGQlF5eERRVUZETzFGQlEwZ3NTVUZCU1N4RFFVRkRMR3RDUVVGclFpeERRVUZETEVkQlFVY3NRMEZCUXl4aFFVRmhMRVZCUVVVN1dVRkRka01zUlVGQlJTeEZRVUZGTEVOQlFVTTdXVUZEVEN4VFFVRlRMRVZCUVVVc1EwRkJReXhSUVVGUkxFTkJRVU03VTBGRGVFSXNRMEZCUXl4RFFVRkRPMUZCUTBnc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRWRCUVVjc1EwRkJReXgzUWtGQmQwSXNSVUZCUlR0WlFVTnNSQ3hGUVVGRkxFVkJRVVVzUTBGQlF6dFpRVU5NTEZOQlFWTXNSVUZCUlN4RlFVRkZPMU5CUTJoQ0xFTkJRVU1zUTBGQlF6dFJRVU5JTEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eEhRVUZITEVOQlFVTXNWVUZCVlN4RlFVRkZPMWxCUTNCRExFVkJRVVVzUlVGQlJTeERRVUZETzFsQlEwd3NVMEZCVXl4RlFVRkZMRVZCUVVVN1UwRkRhRUlzUTBGQlF5eERRVUZETzFGQlEwZ3NTVUZCU1N4RFFVRkRMR3RDUVVGclFpeERRVUZETEVkQlFVY3NRMEZCUXl4M1FrRkJkMElzUlVGQlJUdFpRVU5zUkN4RlFVRkZMRVZCUVVVc1EwRkJRenRaUVVOTUxGTkJRVk1zUlVGQlJTeEZRVUZGTzFOQlEyaENMRU5CUVVNc1EwRkJRenRSUVVOSU96dFhRVVZITzFGQlEwZ3NNRU5CUVRCRE8xRkJRekZETEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eEhRVUZITEVOQlFVTXNaVUZCWlN4RlFVRkZPMWxCUTNwRExFVkJRVVVzUlVGQlJTeEZRVUZGTzFsQlEwNHNVMEZCVXl4RlFVRkZMRU5CUVVNc1VVRkJVU3hEUVVGRE8xTkJRM2hDTEVOQlFVTXNRMEZCUXp0UlFVTklMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1UwRkJVeXhGUVVGRk8xbEJRMjVETEVWQlFVVXNSVUZCUlN4RlFVRkZPMWxCUTA0c1UwRkJVeXhGUVVGRkxFTkJRVU1zVVVGQlVTeERRVUZETzFOQlEzaENMRU5CUVVNc1EwRkJRenRSUVVOSUxEQkRRVUV3UXp0UlFVTXhReXhKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1IwRkJSeXhEUVVGRExGTkJRVk1zUlVGQlJUdFpRVU51UXl4RlFVRkZMRVZCUVVVc1JVRkJSVHRaUVVOT0xDdENRVUVyUWp0WlFVTXZRaXhUUVVGVExFVkJRVVVzUTBGQlF5eFBRVUZQTEVWQlFVVXNUMEZCVHl4RFFVRkRPMU5CUTJoRExFTkJRVU1zUTBGQlF6dFJRVU5JTEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eEhRVUZITEVOQlFVTXNUMEZCVHl4RlFVRkZPMWxCUTJwRExFVkJRVVVzUlVGQlJTeEZRVUZGTzFsQlEwNHNjVUpCUVhGQ08xbEJRM0pDTEZOQlFWTXNSVUZCUlN4RFFVRkRMRTlCUVU4c1EwRkJRenRUUVVOMlFpeERRVUZETEVOQlFVTTdVVUZEU0N4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNSMEZCUnl4RFFVRkRMRlZCUVZVc1JVRkJSVHRaUVVOd1F5eEZRVUZGTEVWQlFVVXNSVUZCUlR0WlFVTk9MSE5DUVVGelFqdFpRVU4wUWl4VFFVRlRMRVZCUVVVc1EwRkJReXhSUVVGUkxFTkJRVU03VTBGRGVFSXNRMEZCUXl4RFFVRkRPMUZCUTBnc2QwTkJRWGRETzFGQlEzaERMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1dVRkJXU3hGUVVGRk8xbEJRM1JETEVWQlFVVXNSVUZCUlN4RlFVRkZPMWxCUTA0c1UwRkJVeXhGUVVGRkxFVkJRVVU3VTBGRGFFSXNRMEZCUXl4RFFVRkRPMUZCUTBnc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRWRCUVVjc1EwRkJReXhaUVVGWkxFVkJRVVU3V1VGRGRFTXNSVUZCUlN4RlFVRkZMRVZCUVVVN1dVRkRUaXhUUVVGVExFVkJRVVVzUlVGQlJUdFRRVU5vUWl4RFFVRkRMRU5CUVVNN1VVRkRTQ3hKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1IwRkJSeXhEUVVGRExGZEJRVmNzUlVGQlJUdFpRVU55UXl4RlFVRkZMRVZCUVVVc1JVRkJSVHRaUVVOT0xITkRRVUZ6UXp0WlFVTjBReXhUUVVGVExFVkJRVVVzUTBGQlF5eFBRVUZQTEVWQlFVVXNVVUZCVVN4RlFVRkZMRkZCUVZFc1EwRkJRenRUUVVNelF5eERRVUZETEVOQlFVTTdVVUZEU0N4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNSMEZCUnl4RFFVRkRMRk5CUVZNc1JVRkJSVHRaUVVOdVF5eEZRVUZGTEVWQlFVVXNSVUZCUlR0WlFVTk9MSE5EUVVGelF6dFpRVU4wUXl4VFFVRlRMRVZCUVVVc1EwRkJReXhQUVVGUExFVkJRVVVzVVVGQlVTeEZRVUZGTEZGQlFWRXNRMEZCUXp0VFFVTXpReXhEUVVGRExFTkJRVU03VVVGRFNDeEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUjBGQlJ5eERRVUZETEZkQlFWY3NSVUZCUlR0WlFVTnlReXhGUVVGRkxFVkJRVVVzUlVGQlJUdFpRVU5PTEcxRVFVRnRSRHRaUVVOdVJDeFRRVUZUTEVWQlFVVXNRMEZCUXl4UlFVRlJMRVZCUVVVc1VVRkJVU3hGUVVGRkxFOUJRVThzUlVGQlJTeFBRVUZQTEVOQlFVTTdVMEZEY0VRc1EwRkJReXhEUVVGRE8xRkJRMGdzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFZEJRVWNzUTBGQlF5eFpRVUZaTEVWQlFVVTdXVUZEZEVNc1JVRkJSU3hGUVVGRkxFVkJRVVU3V1VGRFRpeHpRMEZCYzBNN1dVRkRkRU1zVTBGQlV5eEZRVUZGTEVOQlFVTXNUMEZCVHl4RlFVRkZMRkZCUVZFc1JVRkJSU3hSUVVGUkxFTkJRVU03VTBGRE0wTXNRMEZCUXl4RFFVRkRPMUZCUTBnc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRWRCUVVjc1EwRkJReXhoUVVGaExFVkJRVVU3V1VGRGRrTXNSVUZCUlN4RlFVRkZMRVZCUVVVN1dVRkRUaXh6UTBGQmMwTTdXVUZEZEVNc1UwRkJVeXhGUVVGRkxFTkJRVU1zVDBGQlR5eEZRVUZGTEZGQlFWRXNSVUZCUlN4UlFVRlJMRU5CUVVNN1UwRkRNME1zUTBGQlF5eERRVUZETzFGQlEwZ3NkME5CUVhkRE8xRkJRM2hETEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eEhRVUZITEVOQlFVTXNXVUZCV1N4RlFVRkZPMWxCUTNSRExFVkJRVVVzUlVGQlJTeEZRVUZGTzFsQlEwNHNiMFZCUVc5Rk8xbEJRM0JGTEZOQlFWTXNSVUZCUlN4RFFVRkRMRTlCUVU4c1JVRkJSU3hSUVVGUkxFVkJRVVVzVVVGQlVTeEZRVUZGTEU5QlFVOHNSVUZCUlN4UFFVRlBMRVZCUVVVc1QwRkJUeXhEUVVGRE8xTkJRM1JGTEVOQlFVTXNRMEZCUXp0UlFVTklMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1ZVRkJWU3hGUVVGRk8xbEJRM0JETEVWQlFVVXNSVUZCUlN4RlFVRkZPMWxCUTA0c2IwVkJRVzlGTzFsQlEzQkZMRk5CUVZNc1JVRkJSU3hEUVVGRExFOUJRVThzUlVGQlJTeFJRVUZSTEVWQlFVVXNVVUZCVVN4RlFVRkZMRTlCUVU4c1JVRkJSU3hQUVVGUExFVkJRVVVzVDBGQlR5eERRVUZETzFOQlEzUkZMRU5CUVVNc1EwRkJRenRSUVVOSUxFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhIUVVGSExFTkJRVU1zVjBGQlZ5eEZRVUZGTzFsQlEzSkRMRVZCUVVVc1JVRkJSU3hGUVVGRk8xbEJRMDRzYjBWQlFXOUZPMWxCUTNCRkxGTkJRVk1zUlVGQlJTeERRVUZETEU5QlFVOHNSVUZCUlN4UlFVRlJMRVZCUVVVc1VVRkJVU3hGUVVGRkxFOUJRVThzUlVGQlJTeFBRVUZQTEVWQlFVVXNUMEZCVHl4RFFVRkRPMU5CUTNSRkxFTkJRVU1zUTBGQlF6dFJRVU5JTEhsRFFVRjVRenRSUVVONlF5eEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUjBGQlJ5eERRVUZETEd0Q1FVRnJRaXhGUVVGRk8xbEJRelZETEVWQlFVVXNSVUZCUlN4RlFVRkZPMWxCUTA0c1UwRkJVeXhGUVVGRkxFVkJRVVU3VTBGRGFFSXNRMEZCUXl4RFFVRkRPMUZCUTBnc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRWRCUVVjc1EwRkJReXh6UWtGQmMwSXNSVUZCUlR0WlFVTm9SQ3hGUVVGRkxFVkJRVVVzUlVGQlJUdFpRVU5PTEhORFFVRnpRenRaUVVOMFF5eFRRVUZUTEVWQlFVVXNRMEZCUXl4UFFVRlBMRVZCUVVVc1QwRkJUeXhGUVVGRkxFOUJRVThzUTBGQlF6dFRRVU42UXl4RFFVRkRMRU5CUVVNN1VVRkRTQ3hKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1IwRkJSeXhEUVVGRExIVkNRVUYxUWl4RlFVRkZPMWxCUTJwRUxFVkJRVVVzUlVGQlJTeEZRVUZGTzFsQlEwNHNlVU5CUVhsRE8xbEJRM3BETEZOQlFWTXNSVUZCUlN4RFFVRkRMRTlCUVU4c1JVRkJSU3hQUVVGUExFVkJRVVVzVDBGQlR5eERRVUZETzFOQlEzcERMRU5CUVVNc1EwRkJRenRSUVVOSUxFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhIUVVGSExFTkJRVU1zWlVGQlpTeEZRVUZGTzFsQlEzcERMRVZCUVVVc1JVRkJSU3hGUVVGRk8xbEJRMDRzZVVOQlFYbERPMWxCUTNwRExGTkJRVk1zUlVGQlJTeERRVUZETEU5QlFVOHNSVUZCUlN4UFFVRlBMRVZCUVVVc1VVRkJVU3hEUVVGRE8xTkJRekZETEVOQlFVTXNRMEZCUXp0UlFVTklMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4SFFVRkhMRU5CUVVNc2NVSkJRWEZDTEVWQlFVVTdXVUZETDBNc1JVRkJSU3hGUVVGRkxFVkJRVVU3V1VGRFRpeHZRa0ZCYjBJN1dVRkRjRUlzVTBGQlV5eEZRVUZGTEVOQlFVTXNUMEZCVHl4RFFVRkRPMU5CUTNaQ0xFTkJRVU1zUTBGQlF6dFJRVVZJTEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RlFVRkZMSGxDUVVGNVFpeERRVUZETEVOQlFVTTdVVUZETlVRc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFVkJRVVVzVlVGQlZTeERRVUZETEVOQlFVTTdVVUZETjBNc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFVkJRVVVzVTBGQlV5eERRVUZETEVOQlFVTTdVVUZETlVNc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFVkJRVVVzWVVGQllTeERRVUZETEVOQlFVTTdVVUZEYUVRc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFVkJRVVVzWlVGQlpTeERRVUZETEVOQlFVTTdVVUZEYkVRc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFVkJRVVVzYlVKQlFXMUNMRU5CUVVNc1EwRkJRenRSUVVOMFJDeEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNSVUZCUlN4aFFVRmhMRU5CUVVNc1EwRkJRenRSUVVOb1JDeEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNSVUZCUlN4cFFrRkJhVUlzUTBGQlF5eERRVUZETzFGQlEzQkVMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhGUVVGRkxHVkJRV1VzUTBGQlF5eERRVUZETzFGQlEyeEVMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhGUVVGRkxHTkJRV01zUTBGQlF5eERRVUZETzFGQlEycEVMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hGUVVGRkxHTkJRV01zUTBGQlF5eERRVUZETzFGQlEyeEVMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hGUVVGRkxGVkJRVlVzUTBGQlF5eERRVUZETzFGQlF6bERMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hGUVVGRkxIVkNRVUYxUWl4RFFVRkRMRU5CUVVNN1VVRkRNMFFzU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVWQlFVVXNhVUpCUVdsQ0xFTkJRVU1zUTBGQlF6dFJRVU55UkN4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1JVRkJSU3gzUWtGQmQwSXNRMEZCUXl4RFFVRkRPMUZCUXpWRUxFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eEZRVUZGTEZWQlFWVXNRMEZCUXl4RFFVRkRPMGxCUTI1RUxFTkJRVU03U1VGRlJEczdPenM3VDBGTFJ6dEpRVU5JTEhOQ1FVRnpRaXhEUVVOc1FpeG5Ra0ZCYTBNc1JVRkRiRU1zVjBGQmJVSXNSVUZEYmtJc1kwRkJNa1E3VVVGRk0wUXNVVUZCVVN4blFrRkJaMElzUlVGQlJUdFpRVU4wUWl4TFFVRkxMR2RDUVVGblFpeERRVUZETEZWQlFWVTdaMEpCUXpWQ0xFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhIUVVGSExFTkJRVU1zVjBGQlZ5eEZRVUZGTEdOQlFXTXNRMEZCUXl4RFFVRkRPMmRDUVVONlJDeE5RVUZOTzFsQlExWXNTMEZCU3l4blFrRkJaMElzUTBGQlF5eFpRVUZaTzJkQ1FVTTVRaXhKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1IwRkJSeXhEUVVGRExGZEJRVmNzUlVGQlJTeGpRVUZqTEVOQlFVTXNRMEZCUXp0blFrRkRNMFFzVFVGQlRUdFpRVU5XTzJkQ1FVTkpMSE5FUVVGVkxFTkJRMDRzWjBWQlFXOUNMRVZCUVVVc1JVRkRkRUlzTmtKQlFUWkNMR2RDUVVGblFpeEZRVUZGTEVOQlEyeEVMRU5CUVVNN1UwRkRWRHRKUVVOTUxFTkJRVU03UTBGRFNqdEJRVVZFT3p0SFFVVkhPMEZCUTBnc1NVRkJXU3huUWtGSFdEdEJRVWhFTEZkQlFWa3NaMEpCUVdkQ08wbEJRM2hDTEcxRlFVRmpPMGxCUTJRc2RVVkJRV2RDTzBGQlEzQkNMRU5CUVVNc1JVRklWeXhuUWtGQlowSXNTMEZCYUVJc1owSkJRV2RDTEZGQlJ6TkNPenM3T3pzN096czdPenM3T3pzN1FVTjRUMFFzYTBSQlFXdEVPMEZCU1RORExFMUJRVTBzTkVKQlFUUkNPMGxCUjNKRE96dFBRVVZITzBsQlEwZ3NXVUZCV1N4eFFrRkJORU03VVVGRGNFUXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeEhRVUZITEhGQ1FVRnhRaXhEUVVGRE8wbEJRM1pFTEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxIbENRVUY1UWp0UlFVTnlRaXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc2NVSkJRWEZDTEVOQlF6VkRMSFZDUVVGMVFpeERRVU14UWl4RFFVRkRPMGxCUTA0c1EwRkJRenRKUVVWRU96dFBRVVZITzBsQlEwZ3NhVUpCUVdsQ08xRkJRMklzU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRE8wbEJRMjVGTEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxIbENRVUY1UWp0UlFVTnlRaXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc2NVSkJRWEZDTEVOQlF6VkRMSFZDUVVGMVFpeERRVU14UWl4RFFVRkRPMGxCUTA0c1EwRkJRenRKUVVWRU96dFBRVVZITzBsQlEwZ3NhMEpCUVd0Q08xRkJRMlFzU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExIRkNRVUZ4UWl4RFFVRkRMR2RDUVVGblFpeERRVUZETEVOQlFVTTdTVUZEZGtVc1EwRkJRenRKUVVWRU96dFBRVVZITzBsQlEwZ3NhVUpCUVdsQ08xRkJRMklzU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExIRkNRVUZ4UWl4RFFVRkRMR1ZCUVdVc1EwRkJReXhEUVVGRE8wbEJRM1JGTEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxEQkNRVUV3UWp0UlFVTjBRaXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc2NVSkJRWEZDTEVOQlF6VkRMSGRDUVVGM1FpeERRVU16UWl4RFFVRkRPMGxCUTA0c1EwRkJRenREUVVOS096czdPenM3T3pzN096czdPenM3T3pzN08wRkROMFJFTEd0RVFVRnJSRHRCUVVWU08wRkJSekZET3p0SFFVVkhPMEZCUTBrc1RVRkJUU3h0UWtGQmJVSTdTVUZ0UWpWQ096dFBRVVZITzBsQlEwZ3NXVUZCV1N4dlFrRkJhVU03VVVGRGVrTXNTVUZCU1N4RFFVRkRMRzlDUVVGdlFpeEhRVUZITEc5Q1FVRnZRaXhEUVVGRE8xRkJRMnBFTEVsQlFVa3NRMEZCUXl4blEwRkJaME1zUjBGQlJ5eEhRVUZITEVWQlFVVTdXVUZEZWtNc1RVRkJUU3hKUVVGSkxFdEJRVXNzUTBGRFdDd3dSRUZCTUVRc1EwRkROMFFzUTBGQlF6dFJRVU5PTEVOQlFVTXNRMEZCUXp0UlFVTkdMRWxCUVVrc1EwRkJReXc0UWtGQk9FSXNSMEZCUnl4SFFVRkhMRVZCUVVVN1dVRkRka01zVFVGQlRTeEpRVUZKTEV0QlFVc3NRMEZEV0N3d1JFRkJNRVFzUTBGRE4wUXNRMEZCUXp0UlFVTk9MRU5CUVVNc1EwRkJRenRSUVVOR0xFbEJRVWtzUTBGQlF5eHZRMEZCYjBNc1IwRkJSeXhIUVVGSExFVkJRVVU3V1VGRE4wTXNUVUZCVFN4SlFVRkpMRXRCUVVzc1EwRkRXQ3c0UkVGQk9FUXNRMEZEYWtVc1EwRkJRenRSUVVOT0xFTkJRVU1zUTBGQlF6dEpRVU5PTEVOQlFVTTdTVUZGUkRzN096dFBRVWxITzBsQlEwZ3NORUpCUVRSQ0xFTkJRM2hDTEVOQlFWTXNSVUZEVkN4RFFVRlRPMUZCUlZRc1QwRkJUeXhKUVVGSkxFTkJRVU1zWjBOQlFXZERMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzBsQlEzWkVMRU5CUVVNN1NVRkZSRHM3T3p0UFFVbEhPMGxCUTBnc1owTkJRV2RETEVOQlF6VkNMRU5CUVZNc1JVRkRWQ3hEUVVGVE8xRkJSVlFzVDBGQlR5eEpRVUZKTEVOQlFVTXNiME5CUVc5RExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUXpORUxFTkJRVU03U1VGRlJEczdPenRQUVVsSE8wbEJRMGdzTUVKQlFUQkNMRU5CUTNSQ0xFTkJRVk1zUlVGRFZDeERRVUZUTzFGQlJWUXNUMEZCVHl4SlFVRkpMRU5CUVVNc09FSkJRVGhDTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRM0pFTEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxIbENRVUY1UWp0UlFVTnlRaXhKUVVGSkxFTkJRVU1zYTBKQlFXdENPMWxCUTI1Q0xFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXh4UWtGQmNVSXNSVUZCUlN4RFFVRkRPMUZCUTNSRUxFbEJRVWtzUTBGQlF5eFpRVUZaTEVkQlFVY3NTVUZCU1N4RFFVRkRMRzlDUVVGdlFpeERRVUZETEdWQlFXVXNSVUZCUlN4RFFVRkRPMUZCUldoRkxFbEJRVWtzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhKUVVGSkxFbEJRVWtzUTBGQlF5eFpRVUZaTEVWQlFVVTdXVUZET1VNc1RVRkJUU3hYUVVGWExFZEJRVWNzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExGZEJRVmNzU1VGQlNTeERRVUZETEVOQlFVTTdXVUZETjBRc1RVRkJUU3haUVVGWkxFZEJRVWNzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExGbEJRVmtzU1VGQlNTeERRVUZETEVOQlFVTTdXVUZETDBRc1RVRkJUU3hWUVVGVkxFZEJRVWNzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4VlFVRlZMRWxCUVVrc1EwRkJReXhEUVVGRE8xbEJRM0pFTEUxQlFVMHNWMEZCVnl4SFFVRkhMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zVjBGQlZ5eEpRVUZKTEVOQlFVTXNRMEZCUXp0WlFVTjJSQ3hOUVVGTkxHbENRVUZwUWl4SFFVRkhMRmxCUVZrc1IwRkJSeXhYUVVGWExFTkJRVU03V1VGRGNrUXNUVUZCVFN4blFrRkJaMElzUjBGQlJ5eFhRVUZYTEVkQlFVY3NWVUZCVlN4RFFVRkRPMWxCUTJ4RUxFbEJRVWtzYVVKQlFXbENMRWRCUVVjc1owSkJRV2RDTEVWQlFVVTdaMEpCUTNSRExITkVRVUZWTEVOQlEwNHNaMFZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNkVVZCUVhWRkxFVkJRM1pGTEVOQlFVTXNRMEZEU2l4RFFVRkRPMmRDUVVOR0xFbEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NhVUpCUVdsQ0xFZEJRVWNzWjBKQlFXZENMRU5CUVVNN1owSkJRMnhFTEVsQlFVa3NRMEZCUXl4blEwRkJaME1zUjBGQlJ5eERRVU53UXl4RFFVRlRMRVZCUTFRc1EwRkJVeXhGUVVOWUxFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNkME5CUVhkRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVONlJDeEpRVUZKTEVOQlFVTXNPRUpCUVRoQ0xFZEJRVWNzUTBGQlF5eERRVUZUTEVWQlFVVXNRMEZCVXl4RlFVRkZMRVZCUVVVc1EwRkRNMFFzU1VGQlNTeERRVUZETEhORFFVRnpReXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkRkRVFzU1VGQlNTeERRVUZETEc5RFFVRnZReXhIUVVGSExFTkJRM2hETEVOQlFWTXNSVUZEVkN4RFFVRlRMRVZCUTFnc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5dzBRMEZCTkVNc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdZVUZEYUVVN2FVSkJRVTA3WjBKQlEwZ3NjMFJCUVZVc1EwRkRUaXhuUlVGQmIwSXNSVUZCUlN4RlFVTjBRaXgzUlVGQmQwVXNSVUZEZUVVc1EwRkJReXhEUVVOS0xFTkJRVU03WjBKQlEwWXNTVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhuUWtGQlowSXNSMEZCUnl4cFFrRkJhVUlzUTBGQlF6dG5Ra0ZEYkVRc1NVRkJTU3hEUVVGRExHZERRVUZuUXl4SFFVRkhMRU5CUTNCRExFTkJRVk1zUlVGRFZDeERRVUZUTEVWQlExZ3NSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXg1UTBGQmVVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlF6RkVMRWxCUVVrc1EwRkJReXc0UWtGQk9FSXNSMEZCUnl4RFFVRkRMRU5CUVZNc1JVRkJSU3hEUVVGVExFVkJRVVVzUlVGQlJTeERRVU16UkN4SlFVRkpMRU5CUVVNc2RVTkJRWFZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVU4yUkN4SlFVRkpMRU5CUVVNc2IwTkJRVzlETEVkQlFVY3NRMEZEZUVNc1EwRkJVeXhGUVVOVUxFTkJRVk1zUlVGRFdDeEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMRFpEUVVFMlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRoUVVOcVJUdFRRVU5LTzBsQlEwd3NRMEZCUXp0SlFVVkVPenM3TzA5QlNVYzdTVUZEU0N4M1EwRkJkME1zUTBGRGNFTXNRMEZCVXl4RlFVTlVMRU5CUVZNN1VVRkZWQ3hOUVVGTkxGZEJRVmNzUjBGQlJ5eERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMR3RDUVVGclFpeERRVUZETEZkQlFWY3NRMEZCUXp0UlFVTTFSQ3hOUVVGTkxGZEJRVmNzUjBGRFlpeEpRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRU5CUVVNc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhaUVVGWkxFZEJRVWNzUjBGQlJ5eERRVUZETEVkQlFVY3NSMEZCUnl4RFFVRkRPMUZCUTNoRkxFbEJRMGtzVjBGQlZ5eEhRVUZITEVkQlFVYzdXVUZEYWtJc1YwRkJWeXhIUVVGSExFZEJRVWM3V1VGRGFrSXNWMEZCVnl4SFFVRkhMRWRCUVVjN1dVRkRha0lzVjBGQlZ5eEhRVUZITEVkQlFVY3NSVUZEYmtJN1dVRkRSU3hQUVVGUExFbEJRVWtzWjBOQlFXZERMRU5CUVVNc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXp0VFFVTndSVHRoUVVGTk8xbEJRMGdzVDBGQlR5eEpRVUZKTEdkRFFVRm5ReXhEUVVOMlF5eEpRVUZKTEVWQlEwb3NWMEZCVnl4SFFVRkhMRXRCUVVzc1JVRkRia0lzVjBGQlZ5eEhRVUZITEV0QlFVc3NRMEZEZEVJc1EwRkJRenRUUVVOTU8wbEJRMHdzUTBGQlF6dEpRVVZFT3pzN08wOUJTVWM3U1VGRFNDdzBRMEZCTkVNc1EwRkJReXhEUVVGVExFVkJRVVVzUTBGQlV6dFJRVU0zUkN4TlFVRk5MRmRCUVZjc1IwRkJSeXhEUVVGRExFZEJRVWNzUzBGQlN5eERRVUZETzFGQlF6bENMRTFCUVUwc1YwRkJWeXhIUVVGSExFTkJRVU1zUTBGQlF5eEhRVUZITEV0QlFVc3NSMEZCUnl4SFFVRkhMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eEhRVUZITEVkQlFVY3NRMEZCUXp0UlFVTjZSQ3hQUVVGUExFbEJRVWtzYjBOQlFXOURMRU5CUXpORExGZEJRVmNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zVjBGQlZ5eEZRVU5xUkN4WFFVRlhMRWRCUVVjc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRmxCUVZrc1EwRkRja1FzUTBGQlF6dEpRVU5PTEVOQlFVTTdTVUZGUkRzN096dFBRVWxITzBsQlEwZ3NjME5CUVhORExFTkJRVU1zUTBGQlV5eEZRVUZGTEVOQlFWTTdVVUZEZGtRc1RVRkJUU3hYUVVGWExFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4SFFVRkhMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRenRSUVVOd1JTeE5RVUZOTEZkQlFWY3NSMEZEWWl4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFZEJRVWNzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRWRCUVVjc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRE8xRkJRM0JGTEU5QlFVOHNTVUZCU1N3NFFrRkJPRUlzUTBGRGNrTXNWMEZCVnl4SFFVRkhMRXRCUVVzc1JVRkRia0lzVjBGQlZ5eEhRVUZITEV0QlFVc3NRMEZEZEVJc1EwRkJRenRKUVVOT0xFTkJRVU03U1VGRlJEczdPenRQUVVsSE8wbEJRMGdzZVVOQlFYbERMRU5CUVVNc1EwRkJVeXhGUVVGRkxFTkJRVk03VVVGRE1VUXNUVUZCVFN4WFFVRlhMRWRCUTJJc1NVRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJ5eERRVUZETEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNWMEZCVnl4SFFVRkhMRWRCUVVjc1EwRkJReXhIUVVGSExFZEJRVWNzUTBGQlF6dFJRVU4yUlN4TlFVRk5MRmRCUVZjc1IwRkJSeXhEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExGbEJRVmtzUTBGQlF6dFJRVU0zUkN4SlFVTkpMRmRCUVZjc1IwRkJSeXhIUVVGSE8xbEJRMnBDTEZkQlFWY3NSMEZCUnl4SFFVRkhPMWxCUTJwQ0xGZEJRVmNzUjBGQlJ5eEhRVUZITzFsQlEycENMRmRCUVZjc1IwRkJSeXhIUVVGSExFVkJRMjVDTzFsQlEwVXNUMEZCVHl4SlFVRkpMR2REUVVGblF5eERRVUZETEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03VTBGRGNFVTdZVUZCVFR0WlFVTklMRTlCUVU4c1NVRkJTU3huUTBGQlowTXNRMEZEZGtNc1NVRkJTU3hGUVVOS0xGZEJRVmNzUjBGQlJ5eExRVUZMTEVWQlEyNUNMRmRCUVZjc1IwRkJSeXhMUVVGTExFTkJRM1JDTEVOQlFVTTdVMEZEVER0SlFVTk1MRU5CUVVNN1NVRkZSRHM3T3p0UFFVbEhPMGxCUTBnc05rTkJRVFpETEVOQlFVTXNRMEZCVXl4RlFVRkZMRU5CUVZNN1VVRkRPVVFzVFVGQlRTeFhRVUZYTEVkQlFVY3NRMEZCUXl4RFFVRkRMRWRCUVVjc1MwRkJTeXhIUVVGSExFZEJRVWNzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1IwRkJSeXhEUVVGRE8xRkJRM3BFTEUxQlFVMHNWMEZCVnl4SFFVRkhMRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVU03VVVGRE9VSXNUMEZCVHl4SlFVRkpMRzlEUVVGdlF5eERRVU16UXl4WFFVRlhMRWRCUVVjc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRmRCUVZjc1JVRkRha1FzVjBGQlZ5eEhRVUZITEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eFpRVUZaTEVOQlEzSkVMRU5CUVVNN1NVRkRUaXhEUVVGRE8wbEJSVVE3T3pzN1QwRkpSenRKUVVOSUxIVkRRVUYxUXl4RFFVRkRMRU5CUVZNc1JVRkJSU3hEUVVGVE8xRkJRM2hFTEUxQlFVMHNWMEZCVnl4SFFVTmlMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJ5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU03VVVGRGJrVXNUVUZCVFN4WFFVRlhMRWRCUVVjc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eEhRVUZITEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXp0UlFVTnlSU3hQUVVGUExFbEJRVWtzT0VKQlFUaENMRU5CUTNKRExGZEJRVmNzUjBGQlJ5eExRVUZMTEVWQlEyNUNMRmRCUVZjc1IwRkJSeXhMUVVGTExFTkJRM1JDTEVOQlFVTTdTVUZEVGl4RFFVRkRPME5CUTBvN1FVRkZSRHM3UjBGRlJ6dEJRVU5KTEUxQlFVMHNaME5CUVdkRE8wbEJTM3BETEZsQlFWa3NUMEZCWjBJc1JVRkJSU3hEUVVGVExFVkJRVVVzUTBGQlV6dFJRVU01UXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhIUVVGSExFOUJRVThzUTBGQlF6dFJRVU4yUWl4SlFVRkpMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dFJRVU5ZTEVsQlFVa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wbEJRMllzUTBGQlF6dERRVU5LTzBGQlJVUTdPMGRCUlVjN1FVRkRTU3hOUVVGTkxHOURRVUZ2UXp0SlFVazNReXhaUVVGWkxFTkJRVk1zUlVGQlJTeERRVUZUTzFGQlF6VkNMRWxCUVVrc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzFGQlExZ3NTVUZCU1N4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03U1VGRFppeERRVUZETzBOQlEwbzdRVUZGUkRzN1IwRkZSenRCUVVOSkxFMUJRVTBzT0VKQlFUaENPMGxCU1haRExGbEJRVmtzUTBGQlV5eEZRVUZGTEVOQlFWTTdVVUZETlVJc1NVRkJTU3hEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdVVUZEV0N4SlFVRkpMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dEpRVU5tTEVOQlFVTTdRMEZEU2pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUXpsUlJEczdPMGRCUjBjN1FVRkRTU3hOUVVGTkxIVkNRVUYzUWl4VFFVRlJMRXRCUVVzN1NVRlJPVU1zV1VGQldTeEpRVUZ4UXp0UlFVTTNReXhMUVVGTExFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1EwRkJRenRSUVVNMVFpeEpRVUZKTEVOQlFVTXNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJRenRKUVVOeVFpeERRVUZETzBOQlEwbzdRVUZGUkRzN1IwRkZSenRCUVVOSkxFMUJRVTBzY1VKQlFYTkNMRk5CUVZFc1MwRkJTenRKUVUwMVF5eFpRVUZaTEVsQlFXMURPMUZCUXpORExFdEJRVXNzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhEUVVGRE8xRkJRekZDTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRE8wbEJRM0pDTEVOQlFVTTdRMEZEU2p0QlFVVkVPenRIUVVWSE8wRkJRMGtzVFVGQlRTeDVRa0ZCTUVJc1UwRkJVU3hMUVVGTE8wbEJSV2hFTzFGQlEwa3NTMEZCU3l4RFFVRkRMSE5DUVVGelFpeERRVUZETEVOQlFVTTdTVUZEYkVNc1EwRkJRenREUVVOS08wRkJSVVE3TzBkQlJVYzdRVUZEU1N4TlFVRk5MR2RDUVVGcFFpeFRRVUZSTEV0QlFVczdTVUZGZGtNN1VVRkRTU3hMUVVGTExFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVTTdTVUZEZWtJc1EwRkJRenREUVVOS08wRkJSVVE3TzBkQlJVYzdRVUZEU1N4TlFVRk5MSE5DUVVGMVFpeFRRVUZSTEV0QlFVczdTVUZOTjBNc1dVRkJXU3hKUVVGdlF6dFJRVU0xUXl4TFFVRkxMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNRMEZCUXp0UlFVTXpRaXhKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXp0SlFVTnlRaXhEUVVGRE8wTkJRMG83UVVGRlJEczdSMEZGUnp0QlFVTkpMRTFCUVUwc1kwRkJaU3hUUVVGUkxFdEJRVXM3U1VGRmNrTTdVVUZEU1N4TFFVRkxMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU03U1VGRGRrSXNRMEZCUXp0RFFVTktPMEZCUlVRN08wZEJSVWM3UVVGRFNTeE5RVUZOTEhOQ1FVRjFRaXhUUVVGUkxFdEJRVXM3U1VGRk4wTTdVVUZEU1N4TFFVRkxMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNRMEZCUXp0SlFVTXZRaXhEUVVGRE8wTkJRMG83UVVGRlJEczdSMEZGUnp0QlFVTkpMRTFCUVUwc2NVSkJRWE5DTEZOQlFWRXNTMEZCU3p0SlFVVTFRenRSUVVOSkxFdEJRVXNzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhEUVVGRE8wbEJRemxDTEVOQlFVTTdRMEZEU2p0QlFVVkVPenRIUVVWSE8wRkJRMGtzVFVGQlRTeHZRa0ZCY1VJc1UwRkJVU3hMUVVGTE8wbEJSVE5ETzFGQlEwa3NTMEZCU3l4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVOQlFVTTdTVUZETjBJc1EwRkJRenREUVVOS08wRkJSVVE3TzBkQlJVYzdRVUZEU1N4TlFVRk5MR2xDUVVGclFpeFRRVUZSTEV0QlFVczdTVUZGZUVNN1VVRkRTU3hMUVVGTExFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTTdTVUZETVVJc1EwRkJRenREUVVOS08wRkJSVVE3TzBkQlJVYzdRVUZEU1N4TlFVRk5MSFZDUVVGM1FpeFRRVUZSTEV0QlFVczdTVUZST1VNc1dVRkJXU3hKUVVGeFF6dFJRVU0zUXl4TFFVRkxMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNRMEZCUXp0UlFVTTFRaXhKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXp0SlFVTnlRaXhEUVVGRE8wTkJRMG83UVVGRlJEczdSMEZGUnp0QlFVTkpMRTFCUVUwc2IwSkJRWEZDTEZOQlFWRXNTMEZCU3p0SlFWRXpReXhaUVVGWkxFbEJRV3RETzFGQlF6RkRMRXRCUVVzc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4RFFVRkRPMUZCUTNwQ0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRPMGxCUTNKQ0xFTkJRVU03UTBGRFNqdEJRVVZFT3p0SFFVVkhPMEZCUTBrc1RVRkJUU3h4UWtGQmMwSXNVMEZCVVN4TFFVRkxPMGxCVVRWRExGbEJRVmtzU1VGQmJVTTdVVUZETTBNc1MwRkJTeXhEUVVGRExHdENRVUZyUWl4RFFVRkRMRU5CUVVNN1VVRkRNVUlzU1VGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNN1NVRkRja0lzUTBGQlF6dERRVU5LTzBGQlJVUTdPMGRCUlVjN1FVRkRTU3hOUVVGTkxIRkNRVUZ6UWl4VFFVRlJMRXRCUVVzN1NVRlJOVU1zV1VGQldTeEpRVUZ0UXp0UlFVTXpReXhMUVVGTExFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1EwRkJRenRSUVVNeFFpeEpRVUZKTEVOQlFVTXNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJRenRKUVVOeVFpeERRVUZETzBOQlEwbzdRVUZGUkRzN1IwRkZSenRCUVVOSkxFMUJRVTBzY1VKQlFYTkNMRk5CUVZFc1MwRkJTenRKUVVVMVF6dFJRVU5KTEV0QlFVc3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eERRVUZETzBsQlF6bENMRU5CUVVNN1EwRkRTanRCUVVWRU96dEhRVVZITzBGQlEwa3NUVUZCVFN4clFrRkJiVUlzVTBGQlVTeExRVUZMTzBsQlJYcERPMUZCUTBrc1MwRkJTeXhEUVVGRExHVkJRV1VzUTBGQlF5eERRVUZETzBsQlF6TkNMRU5CUVVNN1EwRkRTanRCUVVWRU96dEhRVVZITzBGQlEwa3NUVUZCVFN4eFFrRkJjMElzVTBGQlVTeExRVUZMTzBsQlJUVkRPMUZCUTBrc1MwRkJTeXhEUVVGRExHVkJRV1VzUTBGQlF5eERRVUZETzBsQlF6TkNMRU5CUVVNN1EwRkRTanRCUVVWRU96dEhRVVZITzBGQlEwa3NUVUZCVFN4M1FrRkJlVUlzVTBGQlVTeExRVUZMTzBsQlJTOURPMUZCUTBrc1MwRkJTeXhEUVVGRExHdENRVUZyUWl4RFFVRkRMRU5CUVVNN1NVRkRPVUlzUTBGQlF6dERRVU5LTzBGQlJVUTdPMGRCUlVjN1FVRkRTU3hOUVVGTkxHOUNRVUZ4UWl4VFFVRlJMRXRCUVVzN1NVRkZNME03VVVGRFNTeExRVUZMTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zUTBGQlF6dEpRVU0zUWl4RFFVRkRPME5CUTBvN1FVRkZSRHM3UjBGRlJ6dEJRVU5KTEUxQlFVMHNiMEpCUVhGQ0xGTkJRVkVzUzBGQlN6dEpRVTB6UXl4WlFVRlpMRWxCUVd0RE8xRkJRekZETEV0QlFVc3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eERRVUZETzFGQlEzcENMRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETzBsQlEzSkNMRU5CUVVNN1EwRkRTanRCUVVWRU96dEhRVVZITzBGQlEwa3NUVUZCVFN4bFFVRm5RaXhUUVVGUkxFdEJRVXM3U1VGRmRFTTdVVUZEU1N4TFFVRkxMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU03U1VGRGVFSXNRMEZCUXp0RFFVTktPMEZCUlVRN096dEhRVWRITzBGQlEwa3NUVUZCVFN4MVFrRkJkMElzVTBGQlVTeExRVUZMTzBsQlRUbERMRmxCUVZrc1NVRkJjVU03VVVGRE4wTXNTMEZCU3l4RFFVRkRMRzlDUVVGdlFpeERRVUZETEVOQlFVTTdVVUZETlVJc1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTTdTVUZEY2tJc1EwRkJRenREUVVOS08wRkJSVVE3TzBkQlJVYzdRVUZEU1N4TlFVRk5MRzlDUVVGeFFpeFRRVUZSTEV0QlFVczdTVUZWTTBNc1dVRkJXU3hKUVVGclF6dFJRVU14UXl4TFFVRkxMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNRMEZCUXp0UlFVTjZRaXhKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXp0SlFVTnlRaXhEUVVGRE8wTkJRMG83UVVGRlJEczdSMEZGUnp0QlFVTkpMRTFCUVUwc2IwSkJRWEZDTEZOQlFWRXNTMEZCU3p0SlFVVXpRenRSUVVOSkxFdEJRVXNzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhEUVVGRE8wbEJRemRDTEVOQlFVTTdRMEZEU2p0QlFVVkVPenRIUVVWSE8wRkJRMGtzVFVGQlRTeHJRa0ZCYlVJc1UwRkJVU3hMUVVGTE8wbEJUWHBETEZsQlFWa3NTVUZCWjBNN1VVRkRlRU1zUzBGQlN5eERRVUZETEdWQlFXVXNRMEZCUXl4RFFVRkRPMUZCUTNaQ0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRPMGxCUTNKQ0xFTkJRVU03UTBGRFNqdEJRVVZFT3p0SFFVVkhPMEZCUTBrc1RVRkJUU3gzUWtGQmVVSXNVMEZCVVN4TFFVRkxPMGxCVlM5RExGbEJRVmtzU1VGQmMwTTdVVUZET1VNc1MwRkJTeXhEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRU5CUVVNN1VVRkROMElzU1VGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNN1NVRkRja0lzUTBGQlF6dERRVU5LTzBGQlJVUTdPMGRCUlVjN1FVRkRTU3hOUVVGTkxEWkNRVUU0UWl4VFFVRlJMRXRCUVVzN1NVRk5jRVFzV1VGQldTeEpRVUV5UXp0UlFVTnVSQ3hMUVVGTExFTkJRVU1zTUVKQlFUQkNMRU5CUVVNc1EwRkJRenRSUVVOc1F5eEpRVUZKTEVOQlFVTXNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJRenRKUVVOeVFpeERRVUZETzBOQlEwbzdRVUZGUkRzN1IwRkZSenRCUVVOSkxFMUJRVTBzYzBKQlFYVkNMRk5CUVZFc1MwRkJTenRKUVUwM1F5eFpRVUZaTEVsQlFXOURPMUZCUXpWRExFdEJRVXNzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhEUVVGRE8xRkJRek5DTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRE8wbEJRM0pDTEVOQlFVTTdRMEZEU2p0QlFVVkVPenM3UjBGSFJ6dEJRVU5KTEUxQlFVMHNiVU5CUVc5RExGTkJRVkVzUzBGQlN6dEpRVTB4UkN4WlFVRlpMRWxCUVdsRU8xRkJRM3BFTEV0QlFVc3NRMEZCUXl4blEwRkJaME1zUTBGQlF5eERRVUZETzFGQlEzaERMRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETzBsQlEzSkNMRU5CUVVNN1EwRkRTanRCUVVWRU96dEhRVVZITzBGQlEwa3NUVUZCVFN4cFEwRkJhME1zVTBGQlVTeExRVUZMTzBsQlRYaEVMRmxCUVZrc1NVRkJLME03VVVGRGRrUXNTMEZCU3l4RFFVRkRMRGhDUVVFNFFpeERRVUZETEVOQlFVTTdVVUZEZEVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTTdTVUZEY2tJc1EwRkJRenREUVVOS08wRkJSVVE3TzBkQlJVYzdRVUZEU1N4TlFVRk5MRzlDUVVGeFFpeFRRVUZSTEV0QlFVczdTVUZOTTBNc1dVRkJXU3hKUVVGclF6dFJRVU14UXl4TFFVRkxMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNRMEZCUXp0UlFVTjZRaXhKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXp0SlFVTnlRaXhEUVVGRE8wTkJRMG83UVVGM1EwUTdPMGRCUlVjN1FVRkRTU3hOUVVGTkxHOUNRVUZ4UWl4VFFVRlJMRXRCUVVzN1NVRkhNME1zV1VGQldTeEpRVUZyUXp0UlFVTXhReXhMUVVGTExFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1EwRkJRenRSUVVONlFpeEpRVUZKTEVOQlFVTXNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJRenRKUVVOeVFpeERRVUZETzBOQlEwbzdRVUZGUkRzN1IwRkZSenRCUVVOSkxFMUJRVTBzY1VKQlFYTkNMRk5CUVZFc1MwRkJTenRKUVVVMVF6dFJRVU5KTEV0QlFVc3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eERRVUZETzBsQlF6bENMRU5CUVVNN1EwRkRTanRCUVVWRU96dEhRVVZITzBGQlEwa3NUVUZCVFN4dFFrRkJiMElzVTBGQlVTeExRVUZMTzBsQlJURkRPMUZCUTBrc1MwRkJTeXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRU5CUVVNN1NVRkROVUlzUTBGQlF6dERRVU5LTzBGQlUwUTdPMGRCUlVjN1FVRkRTU3hOUVVGTkxGbEJRV0VzVTBGQlVTeExRVUZMTzBsQlIyNURMRmxCUVZrc1NVRkJNRUk3VVVGRGJFTXNTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRE8xRkJRMnBDTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRE8wbEJRM0pDTEVOQlFVTTdRMEZEU2p0QlFVVkVPenRIUVVWSE8wRkJRMGtzVFVGQlRTeG5Ra0ZCYVVJc1UwRkJVU3hMUVVGTE8wbEJUWFpETEZsQlFWa3NTVUZCT0VJN1VVRkRkRU1zUzBGQlN5eERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkRPMUZCUTNKQ0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRPMGxCUTNKQ0xFTkJRVU03UTBGRFNqdEJRVVZFT3p0SFFVVkhPMEZCUTBrc1RVRkJUU3d5UWtGQk5FSXNVMEZCVVN4TFFVRkxPMGxCUld4RU8xRkJRMGtzUzBGQlN5eERRVUZETEhkQ1FVRjNRaXhEUVVGRExFTkJRVU03U1VGRGNFTXNRMEZCUXp0RFFVTktPMEZCZVVOTkxFMUJRVTBzV1VGQllTeFRRVUZSTEZkQlFWYzdTVUZEZWtNN096czdUMEZKUnp0SlFVTkpMR0ZCUVdFc1EwRkJReXhEUVVGelFqdFJRVU4yUXl4UFFVRlBMRXRCUVVzc1EwRkJReXhoUVVGaExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEYkVNc1EwRkJRenRKUVVWRU96czdPMDlCU1VjN1NVRkRTU3huUWtGQlowSXNRMEZIY2tJc1NVRkJUeXhGUVVGRkxGRkJRV2RETzFGQlEzWkRMRXRCUVVzc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4SlFVRkpMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVU03U1VGRE0wTXNRMEZCUXp0SlFVVkVPenM3TzA5QlNVYzdTVUZEU1N4dFFrRkJiVUlzUTBGSGVFSXNTVUZCVHl4RlFVRkZMRkZCUVdkRE8xRkJRM1pETEV0QlFVc3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eEpRVUZKTEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVNN1NVRkRPVU1zUTBGQlF6dERRVU5LT3pzN096czdPenM3T3pzN096czdRVU0zYlVKRUxHdEVRVUZyUkR0QlFVa3pReXhOUVVGTkxHOUNRVUZ2UWp0SlFVYzNRanRSUVVOSkxFbEJRVWtzUTBGQlF5eHRRa0ZCYlVJc1IwRkJSeXhGUVVGRkxFTkJRVU03U1VGRGJFTXNRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5JTEhGQ1FVRnhRaXhEUVVGRExGRkJRVFJDTzFGQlF6bERMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03U1VGRE5VTXNRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGdzWVVGQllUdFJRVU5VTEV0QlFVc3NUVUZCVFN4UlFVRlJMRWxCUVVrc1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4RlFVRkZPMWxCUXpkRExGRkJRVkVzUlVGQlJTeERRVUZETzFOQlEyUTdVVUZEUkN4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVkQlFVY3NSVUZCUlN4RFFVRkRPMGxCUTJ4RExFTkJRVU03UTBGRFNqczdPenM3T3pzN096czdPenM3T3pzN1FVTTFRa1FzYTBSQlFXdEVPMEZCUlZJN1FVRkZNVU03TzBkQlJVYzdRVUZEU1N4TlFVRk5MRkZCUVZFN1NVRkRha0k3T3p0UFFVZEhPMGxCUTBnc1RVRkJUU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRWxCUVdkQ0xFVkJRVVVzU1VGQmEwSTdVVUZETjBRc2QwVkJRWGRGTzFGQlEzaEZMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eEZRVUZGTzFsQlEycENMRWxCUVVrc1EwRkJReXhSUVVGUkxFZEJRVWNzUlVGQlJTeERRVUZETzFsQlEyNUNMRWxCUVVrc1EwRkJReXhUUVVGVExFZEJRVWNzUlVGQlJTeERRVUZETzFsQlEzQkNMRWxCUVVrc1EwRkJReXhUUVVGVExFZEJRVWNzU1VGQlNTeERRVUZETzFsQlEzUkNMRWxCUVVrc1EwRkJReXhMUVVGTExFZEJRVWNzUzBGQlN5eERRVUZETzFsQlEyNUNMRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzUTBGQlF5eERRVUZETzFsQlEyUXNTVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhGUVVGRkxFTkJRVU03V1VGRFppeEpRVUZKTEVOQlFVTXNZMEZCWXl4SFFVRkhMRWxCUVVrc1NVRkJTU3hGUVVGRkxFTkJRVU1zVDBGQlR5eEZRVUZGTEVOQlFVTTdXVUZETTBNc2MwUkJRVlVzUTBGRFRpeG5SVUZCYjBJc1JVRkJSU3hGUVVOMFFpdzRRa0ZCT0VJc1JVRkRPVUlzUTBGQlF5eERRVU5LTEVOQlFVTTdVMEZEVER0UlFVVkVMRTFCUVUwc2FVSkJRV2xDTEVkQlFVY3NTVUZCU1N4WFFVRlhMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zVFVGQlRTeERRVU4wUkN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVU5vUWl4RFFVRkRPMUZCUTBZc2MwUkJRVlVzUTBGQlF5eG5SVUZCYjBJc1JVRkJSU3hGUVVGRkxHbENRVUZwUWl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRM3BFTEVsQlFVa3NRMEZCUXl4VFFVRlRMRWRCUVVjc2FVSkJRV2xDTEVOQlFVTTdTVUZEZGtNc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMRTFCUVUwc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4SlFVRm5RaXhGUVVGRkxFbEJRV3RDTzFGQlF6VkVMSGRGUVVGM1JUdFJRVU40UlN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUlVGQlJUdFpRVU5xUWl4SlFVRkpMRU5CUVVNc1VVRkJVU3hIUVVGSExFVkJRVVVzUTBGQlF6dFpRVU51UWl4SlFVRkpMRU5CUVVNc1UwRkJVeXhIUVVGSExFVkJRVVVzUTBGQlF6dFpRVU53UWl4SlFVRkpMRU5CUVVNc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF6dFpRVU4wUWl4SlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExFdEJRVXNzUTBGQlF6dFpRVU51UWl4SlFVRkpMRU5CUVVNc1NVRkJTU3hIUVVGSExFTkJRVU1zUTBGQlF6dFpRVU5rTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1JVRkJSU3hEUVVGRE8xbEJRMllzU1VGQlNTeERRVUZETEdOQlFXTXNSMEZCUnl4SlFVRkpMRWxCUVVrc1JVRkJSU3hEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETzFsQlF6TkRMSE5FUVVGVkxFTkJRMDRzWjBWQlFXOUNMRVZCUVVVc1JVRkRkRUlzT0VKQlFUaENMRVZCUXpsQ0xFTkJRVU1zUTBGRFNpeERRVUZETzFOQlEwdzdVVUZGUkN4TlFVRk5MRmxCUVZrc1IwRkJSeXhKUVVGSkxGZEJRVmNzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTNKRkxITkVRVUZWTEVOQlFVTXNaMFZCUVc5Q0xFVkJRVVVzUlVGQlJTeFpRVUZaTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRjRVFzU1VGQlNTeERRVUZETEZGQlFWRXNSMEZCUnl4WlFVRlpMRU5CUVVNN1NVRkRha01zUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxFMUJRVTBzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhKUVVGblFpeEZRVUZGTEVsQlFXdENPMUZCUXpWRUxHZEZRVUZuUlR0UlFVTm9SU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTTdXVUZCUlN4UFFVRlBPMUZCUlRWQ0xIbEVRVUY1UkR0UlFVTjZSQ3hKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUTJwQ0xFbEJRVWtzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFVkJRVVVzU1VGQlNTeERRVUZETzFsQlEyNUVMRXRCUVVzc1EwRkJReXh0UkVGQmJVUXNRMEZEYUVVc1EwRkJRenRSUVVWR0xHMURRVUZ0UXp0UlFVTnVReXhOUVVGTkxGTkJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVVZ3UXl3NFEwRkJPRU03VVVGRE9VTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTTdVVUZGTVVJc2MwSkJRWE5DTzFGQlEzUkNMSE5FUVVGVkxFTkJRMDRzWjBWQlFXOUNMRVZCUVVVc1JVRkRkRUlzZDBKQlFYZENMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeEpRVUZKTEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1JVRkRka1FzUTBGQlF5eERRVU5LTEVOQlFVTTdVVUZGUml4SlFVRkpMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeExRVUZMTEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVN1dVRkRhRU1zU1VGQlNTeERRVUZETEZOQlFWTXNSMEZCUnl4TFFVRkxMRU5CUVVNN1dVRkRka0lzU1VGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNN1dVRkRiRUlzYzBSQlFWVXNRMEZCUXl4blJVRkJiMElzUlVGQlJTeEZRVUZGTEhkQ1FVRjNRaXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEyaEZMRTFCUVUwc1owSkJRV2RDTEVkQlFVY3NTVUZCU1N4SlFVRkpMRVZCUVVVc1EwRkJReXhQUVVGUExFVkJRVVVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRPMWxCUTNCRkxFMUJRVTBzWlVGQlpTeEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUXpsQ0xFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4RlFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGRExFZEJRVWNzWjBKQlFXZENMRU5CUXpkRExFTkJRVU03V1VGRFJpeHpSRUZCVlN4RFFVTk9MR2RGUVVGdlFpeEZRVUZGTEVWQlEzUkNMRFpDUVVFMlFpeGxRVUZsTEdGQlEzaERMR2RDUVVGblFpeEhRVUZITEVsQlEzWkNMRlZCUVZVc1JVRkRWaXhEUVVGRExFTkJRMG9zUTBGQlF6dFpRVVZHTEhOQ1FVRnpRanRaUVVOMFFqczdPenRsUVVsSE8xbEJRMGdzVFVGQlRTeFJRVUZSTEVkQlFVY3NTVUZCU1N4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVU1zUTBGQlF6dFpRVU01UkN4TlFVRk5MRU5CUVVNc1IwRkJSeXhSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMWxCUTNSRExFTkJRVU1zUTBGQlF5eFpRVUZaTEVOQlFVTXNUVUZCVFN4RlFVRkZMRWRCUVVjc1EwRkJReXhsUVVGbExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTjBSQ3hEUVVGRExFTkJRVU1zV1VGQldTeERRVUZETEZWQlFWVXNSVUZCUlN4WlFVRlpMRWxCUVVrc1EwRkJReXhUUVVGVExFVkJRVVVzUTBGQlF5eERRVUZETzFsQlEzcEVMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTNoQ0xHbEdRVUZwUmp0WlFVTnFSaXhEUVVGRExFTkJRVU1zVFVGQlRTeEZRVUZGTEVOQlFVTTdVMEZEWkR0aFFVRk5MRWxCUVVrc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSVHRaUVVOeVF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4SFFVRkhMRXRCUVVzc1EwRkJRenRaUVVOMlFpeDNSRUZCV1N4RFFVTlNMR2RGUVVGdlFpeEZRVUZGTEVWQlEzUkNMSGxEUVVGNVF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1NVRkJTU3hKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlF6TkZMRU5CUVVNN1UwRkRURHRKUVVOTUxFTkJRVU03UTBGRFNqdEJRVVZFT3p0SFFVVkhPMEZCUTBrc1RVRkJUU3haUVVGWk8wbEJRWHBDTzFGQlEwa3NZVUZCVVN4SFFVRkhMRVZCUVVVc1EwRkJRenRSUVVOa0xHTkJRVk1zUjBGQlJ5eEZRVUZGTEVOQlFVTTdVVUZEWml4alFVRlRMRWRCUVVjc1MwRkJTeXhEUVVGRE8xRkJRMnhDTEZOQlFVa3NSMEZCUnl4RFFVRkRMRU5CUVVNN1VVRkRWQ3hUUVVGSkxFZEJRWE5DTEVWQlFVVXNRMEZCUXp0UlFVTTNRaXhWUVVGTExFZEJRVWNzUzBGQlN5eERRVUZETzBsQlJXeENMRU5CUVVNN1EwRkJRVHM3T3pzN096czdPenM3T3pzN08wRkRNMGxOTEUxQlFVMHNVVUZCVVR0SlFVTnFRaXhOUVVGTkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1YwRkJNa003VVVGRGFrVXNUMEZCVHl4SlFVRkpMRU5CUVVNc01FSkJRVEJDTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWxCUVVrc1NVRkJTU3hEUVVGRExIVkNRVUYxUWl4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRE8wbEJRM0pITEVOQlFVTTdTVUZGUkN4TlFVRk5MRU5CUVVNc01FSkJRVEJDTEVOQlFVTXNWMEZCTWtNN1VVRkRla1VzVDBGQlR5eERRVUZETEVOQlFVTXNWMEZCVnp0WlFVTm9RaXhEUVVGRExGZEJRVmNzUTBGQlF5eFRRVUZUTEV0QlFVc3NWVUZCVlN4SlFVRkpMRmRCUVZjc1EwRkJReXhUUVVGVExFdEJRVXNzVlVGQlZTeERRVUZETzFsQlF6bEZMRmRCUVZjc1EwRkJReXhSUVVGUk8xbEJRM0JDTEZkQlFWY3NRMEZCUXl4UlFVRlJMRU5CUVVNc1MwRkJTenRaUVVNeFFpeFhRVUZYTEVOQlFVTXNVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFdEJRVXNzVDBGQlR5eERRVUZETzBsQlEzQkVMRU5CUVVNN1NVRkZSQ3hOUVVGTkxFTkJRVU1zZFVKQlFYVkNMRU5CUVVNc1YwRkJNa003VVVGRGRFVXNUMEZCVHl4RFFVRkRMRU5CUVVNc1YwRkJWenRaUVVOb1FpeERRVUZETEZkQlFWY3NRMEZCUXl4VFFVRlRMRXRCUVVzc1ZVRkJWU3hKUVVGSkxGZEJRVmNzUTBGQlF5eFRRVUZUTEV0QlFVc3NWVUZCVlN4RFFVRkRPMWxCUXpsRkxGZEJRVmNzUTBGQlF5eE5RVUZOTzFsQlEyeENMRmRCUVZjc1EwRkJReXhOUVVGTkxFTkJRVU1zUzBGQlN6dFpRVU40UWl4WFFVRlhMRU5CUVVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEV0QlFVc3NUMEZCVHl4RFFVRkRPMGxCUTJ4RUxFTkJRVU03U1VGRlJDeE5RVUZOTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zVjBGQk1rTTdVVUZEYWtVc1QwRkJUeXhKUVVGSkxFTkJRVU1zTUVKQlFUQkNMRU5CUVVNc1YwRkJWeXhEUVVGRExFbEJRVWtzU1VGQlNTeERRVUZETEhWQ1FVRjFRaXhEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETzBsQlEzSkhMRU5CUVVNN1NVRkZSQ3hOUVVGTkxFTkJRVU1zTUVKQlFUQkNMRU5CUVVNc1YwRkJNa003VVVGRGVrVXNUMEZCVHl4RFFVRkRMRU5CUVVNc1YwRkJWenRaUVVOb1FpeERRVUZETEZkQlFWY3NRMEZCUXl4VFFVRlRMRXRCUVVzc1ZVRkJWU3hKUVVGSkxGZEJRVmNzUTBGQlF5eFRRVUZUTEV0QlFVc3NWVUZCVlN4RFFVRkRPMWxCUXpsRkxGZEJRVmNzUTBGQlF5eFJRVUZSTzFsQlEzQkNMRmRCUVZjc1EwRkJReXhSUVVGUkxFTkJRVU1zUzBGQlN6dFpRVU14UWl4WFFVRlhMRU5CUVVNc1VVRkJVU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEV0QlFVc3NUMEZCVHl4RFFVRkRPMGxCUTNCRUxFTkJRVU03U1VGRlJDeE5RVUZOTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU1zVjBGQk1rTTdVVUZEZEVVc1QwRkJUeXhEUVVGRExFTkJRVU1zVjBGQlZ6dFpRVU5vUWl4RFFVRkRMRmRCUVZjc1EwRkJReXhUUVVGVExFdEJRVXNzVlVGQlZTeEpRVUZKTEZkQlFWY3NRMEZCUXl4VFFVRlRMRXRCUVVzc1ZVRkJWU3hEUVVGRE8xbEJRemxGTEZkQlFWY3NRMEZCUXl4TlFVRk5PMWxCUTJ4Q0xGZEJRVmNzUTBGQlF5eE5RVUZOTEVOQlFVTXNTMEZCU3p0WlFVTjRRaXhYUVVGWExFTkJRVU1zVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRXRCUVVzc1QwRkJUeXhEUVVGRE8wbEJRMnhFTEVOQlFVTTdRMEZEU2pzN096czdPenM3T3pzN096czdPenRCUTNoRFJDeHJSRUZCYTBRN1FVRkhVanRCUVVjeFF6czdSMEZGUnp0QlFVTkpMRTFCUVUwc1owSkJRV2RDTzBsQlMzcENPenRQUVVWSE8wbEJRMGdzV1VGQldTeHZRa0ZCYVVNN1VVRkRla01zU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhIUVVGSExHOUNRVUZ2UWl4RFFVRkRPMUZCUTJwRUxFbEJRVWtzUTBGQlF5eFpRVUZaTEVkQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJReXhQUVVGUExFTkJRWEZDTEVOQlFVTTdVVUZEZUVVc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMR1ZCUVdVc1EwRkJReXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTTdTVUZEYWtVc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMR0ZCUVdFc1EwRkJReXhoUVVFMFFqdFJRVU4wUXl4elJFRkJWU3hEUVVOT0xHZEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xHZENRVUZuUWl4SFFVRkhMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zWVVGQllTeERRVUZETEU5QlFVOHNRMEZCUXl4RlFVTjRSQ3hEUVVGRExFTkJRMG9zUTBGQlF6dFJRVU5HTEd0SVFVRnJTRHRSUVVOc1NDeHJSMEZCYTBjN1VVRkRiRWNzU1VGQlNTeGhRVUZoTEVOQlFVTXNTMEZCU3l4RFFVRkRMRVZCUVVVc1NVRkJTU3hWUVVGVkxFVkJRVVU3V1VGRGRFTXNUMEZCVHp0VFFVTldPMUZCUlVRc1RVRkJUU3haUVVGWkxFZEJRVWNzU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhEUVVGRExHVkJRV1VzUlVGQlJTeERRVUZETzFGQlJXcEZMRWxCUVVrc1lVRkJZU3hEUVVGRExFdEJRVXNzUlVGQlJUdFpRVU55UWl4elJFRkJWU3hEUVVOT0xHZEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xHTkJRV003WjBKQlExWXNZVUZCWVN4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSk8yZENRVU40UWl4TlFVRk5PMmRDUVVOT0xHRkJRV0VzUTBGQlF5eExRVUZMTEVOQlFVTXNSVUZCUlR0blFrRkRkRUlzWTBGQll6dG5Ra0ZEWkN4aFFVRmhMRU5CUVVNc1MwRkJTeXhEUVVGRExGVkJRVlVzUlVGRGJFTXNRMEZCUXl4RFFVTktMRU5CUVVNN1UwRkRURHRSUVVWRUxFbEJRVWtzWVVGQllTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRWxCUVVrc1QwRkJUeXhGUVVGRk8xbEJRM0pETEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eGhRVUZoTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRGFFUXNUMEZCVHp0VFFVTldPMkZCUVUwc1NVRkRTQ3hoUVVGaExFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NTVUZCU1N4UFFVRlBPMWxCUTI1RExGbEJRVmtzUTBGQlF5eFRRVUZUTEV0QlFVc3NZVUZCWVN4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUlVGRGNrUTdXVUZEUlN4WlFVRlpMRU5CUVVNc1UwRkJVeXhIUVVGSExHRkJRV0VzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRiRVFzYzBSQlFWVXNRMEZEVGl4blJVRkJiMElzUlVGQlJTeEZRVU4wUWl3MFEwRkJORU1zUTBGREwwTXNRMEZCUXp0WlFVTkdMRTlCUVU4N1UwRkRWanRKUVVOTUxFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3huUWtGQlowSXNRMEZCUXl4blFrRkJOa0k3VVVGRE1VTXNUVUZCVFN4WlFVRlpMRWRCUVVjc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMR1ZCUVdVc1JVRkJSU3hEUVVGRE8xRkJSV3BGTEcxSFFVRnRSenRSUVVOdVJ5eEpRVUZKTEZsQlFWa3NRMEZCUXl4VFFVRlRMRWxCUVVrc1owSkJRV2RDTEVWQlFVVTdXVUZETlVNc1QwRkJUenRUUVVOV08xRkJRMFFzZVVaQlFYbEdPMkZCUTNCR0xFbEJRMFFzV1VGQldTeERRVUZETEZOQlFWTTdXVUZEZEVJc1dVRkJXU3hEUVVGRExGTkJRVk1zUzBGQlN5eG5Ra0ZCWjBJc1JVRkROME03V1VGRFJTdzJRa0ZCTmtJN1dVRkROMElzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4VFFVRlRMRWRCUVVjc1owSkJRV2RDTEVOQlFVTTdXVUZETDBNc2MwUkJRVlVzUTBGRFRpeG5SVUZCYjBJc1JVRkJSU3hGUVVOMFFpd3dSRUZCTUVRc1EwRkROMFFzUTBGQlF6dFRRVU5NTzBsQlEwd3NRMEZCUXp0RFFVTktPenM3T3pzN096czdPenM3T3pzN096dEJRemxHUkN4clJFRkJhMFE3UVVGRlJEdEJRVU5RTzBGQlZ6RkRPenRIUVVWSE8wRkJRMGtzVFVGQlRTeFhRVUZYTzBsQlYzQkNPenM3VDBGSFJ6dEpRVU5JTEZsQlFWa3NhMEpCUVN0Q0xFVkJRVVVzVFVGQll6dFJRVlp1UkN4dlFrRkJaU3hIUVVGSExFbEJRVWtzU1VGQlNTeEZRVUZGTEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVNN1VVRlhNME1zU1VGQlNTeERRVUZETEZsQlFWa3NSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETzFGQlEzQkVMRWxCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzVFVGQlRTeERRVUZETzFGQlEzSkNMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zUlVGQlJTeEhRVUZITEdkQ1FVRm5RaXhEUVVGRE8xRkJRM2hETEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc2RVSkJRWFZDTEVkQlFVY3NTVUZCU1N4RFFVRkRPMUZCUTJwRUxFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNWMEZCVnl4SFFVRkhMRWxCUVVrc1EwRkJRenRSUVVOeVF5eEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRXRCUVVzc1EwRkJReXhMUVVGTExFZEJRVWNzVFVGQlRTeERRVUZETzFGQlEzWkRMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNSMEZCUnl4TlFVRk5MRU5CUVVNN1VVRkRlRU1zU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hIUVVGSExGVkJRVlVzUTBGQlF6dFJRVU01UXl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFdEJRVXNzUTBGQlF5eGhRVUZoTEVkQlFVY3NTMEZCU3l4RFFVRkRPMUZCUXpsRExHdENRVUZyUWl4RFFVRkRMRmRCUVZjc1EwRkJReXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTTdVVUZGYkVRc1NVRkJTU3hEUVVGRExITkNRVUZ6UWl4SFFVRkhMRWRCUVVjc1JVRkJSVHRaUVVNdlFpeFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVTlFMR2xHUVVGcFJpeERRVU53Uml4RFFVRkRPMUZCUTA0c1EwRkJReXhEUVVGRE8xRkJRMFlzU1VGQlNTeERRVUZETEdsRFFVRnBReXhIUVVGSExFZEJRVWNzUlVGQlJUdFpRVU14UXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVOUUxEQkhRVUV3Unl4RFFVTTNSeXhEUVVGRE8xRkJRMDRzUTBGQlF5eERRVUZETzFGQlJVWXNhVU5CUVdsRE8xRkJRMnBETEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1QwRkJUeXhIUVVGSExFZEJRVWNzUlVGQlJUdFpRVU0zUWl4SlFVRkpMRWxCUVVrc1EwRkJReXhaUVVGWkxFbEJRVWtzVTBGQlV5eEpRVUZKTEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1RVRkJUU3hGUVVGRk8yZENRVU0xUkN4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETzJGQlF6VkNPMWxCUTBRc1NVRkJTU3hKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEUxQlFVMHNSVUZCUlR0blFrRkRNVUlzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJRenRoUVVNMVFqdFJRVU5NTEVOQlFVTXNRMEZCUXp0UlFVVkdMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zWjBKQlFXZENMRWRCUVVjc1IwRkJSeXhGUVVGRk8xbEJRM1JETEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUlVGQlJTeERRVUZETzFGQlF6bENMRU5CUVVNc1EwRkJRenRSUVVWR0xHdEdRVUZyUmp0UlFVTnNSaXhOUVVGTkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1VVRkJVU3hGUVVGRkxFZEJRVWNzUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUlVGQlJTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUTNoRkxFMUJRVTBzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXh0UWtGQmJVSXNSVUZCUlN4SFFVRkhMRVZCUVVVc1EwRkRPVU1zU1VGQlNTeERRVUZETEcxQ1FVRnRRaXhGUVVGRkxFTkJRemRDTEVOQlFVTTdTVUZEVGl4RFFVRkRPMGxCUlUwc1pVRkJaU3hEUVVGRExGbEJRVGhDTzFGQlEycEVMRWxCUVVrc1EwRkJReXhaUVVGWkxFZEJRVWNzV1VGQldTeERRVUZETzBsQlEzSkRMRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU0N4SlFVRkpPMUZCUTBFc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhoUVVGaExFTkJReTlETEdsRlFVRnhRaXhEUVVONFFpeERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhSUVVGUkxFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4aFFVRmhMRU5CUTJ4RUxDdEVRVUZ0UWl4RFFVTjBRaXhEUVVGRE8xRkJRMFlzVDBGQlR5eEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRE8wbEJRM0JETEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxGRkJRVkU3VVVGRFNpeFBRVUZQTEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1RVRkJUU3hEUVVGRE8wbEJRM0JETEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxGbEJRVms3VVVGRFVpeFBRVUZQTEVOQlEwZ3NTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhWUVVGVkxFdEJRVXNzVTBGQlV6dFpRVU14UXl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExGVkJRVlVzUjBGQlJ5eERRVUZETEVOQlEyNURMRU5CUVVNN1NVRkRUaXhEUVVGRE8wbEJSVVE3TzA5QlJVYzdTVUZEU0N4alFVRmpPMUZCUTFZc1QwRkJUeXhEUVVOSUxFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNVMEZCVXl4TFFVRkxMRk5CUVZNN1dVRkRla01zU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4VFFVRlRMRXRCUVVzc1NVRkJTU3hEUVVOMlF5eERRVUZETzBsQlEwNHNRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5JTEdWQlFXVTdVVUZEV0N4UFFVRlBMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU03U1VGRE4wSXNRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5JTEhGQ1FVRnhRanRSUVVOcVFpeFBRVUZQTEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1lVRkJZU3hEUVVGRE8wbEJRek5ETEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNDeGxRVUZsTEVOQlFVTXNUMEZCWjBJN1VVRkROVUlzT0VoQlFUaElPMUZCUXpsSUxFMUJRVTBzV1VGQldTeEhRVUZITEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNN1VVRkRla0lzV1VGQldTeERRVUZETEZOQlFWVTdZVUZEYUVNc1UwRkJVeXhGUVVGRk8yRkJRMWdzVDBGQlR5eERRVUZETEVOQlFVTXNTMEZCZFVJc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNUMEZCVHl4SFFVRkhMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU03U1VGRGVrVXNRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGdzYTBKQlFXdENPMUZCUTJRc2IwTkJRVzlETzBsQlEzaERMRU5CUVVNN1NVRkZSRHM3VDBGRlJ6dEpRVU5JTEcxQ1FVRnRRanRSUVVObUxGbEJRVmtzUTBGQlF5eEpRVUZKTEVOQlFVTXNkMEpCUVhkQ0xFTkJRVU1zUTBGQlF6dFJRVU0xUXl4SlFVRkpMRU5CUVVNc2QwSkJRWGRDTEVkQlFVY3NUVUZCVFN4RFFVRkRMRlZCUVZVc1EwRkJReXhIUVVGSExFVkJRVVU3V1VGRGJrUXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeEZRVUZGTEVOQlFVTTdVVUZETjBJc1EwRkJReXhGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETzBsQlExb3NRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5JTEdsQ1FVRnBRanRSUVVOaUxFMUJRVTBzYTBKQlFXdENMRWRCUVVjc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4RlFVRkZMRU5CUVVNN1VVRkZlRVFzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhGUVVGRk8xbEJRM0pDTEU5QlFVODdVMEZEVmp0UlFVVkVMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNSVUZCUlN4RFFVRkRPMUZCUlRkQ0xFbEJRVWtzYTBKQlFXdENMRU5CUVVNc1UwRkJVeXhEUVVGRExGRkJRVkVzUTBGQlF5eFpRVUZaTEVOQlFVTXNSVUZCUlR0WlFVTnlSQ3hKUVVGSkxFTkJRVU1zYzBKQlFYTkNMRVZCUVVVc1EwRkJRenRaUVVNNVFpeFBRVUZQTzFOQlExWTdVVUZGUkN4dFEwRkJiVU03VVVGRGJrTXNTVUZCU1N4RFFVRkRMRzlEUVVGdlF5eEZRVUZGTEVOQlFVTTdVVUZETlVNc1NVRkJTU3hEUVVGRExITkNRVUZ6UWl4RlFVRkZMRU5CUVVNN1NVRkRiRU1zUTBGQlF6dEpRVVZFT3p0UFFVVkhPMGxCUTBnc2IwTkJRVzlETzFGQlEyaERMRTFCUVUwc2EwSkJRV3RDTEVkQlFVY3NTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeEZRVUZGTEVOQlFVTTdVVUZGZUVRc2EwWkJRV3RHTzFGQlEyeEdMRTFCUVUwc1ZVRkJWU3hIUVVGSExFMUJRVTBzUTBGQlF6dFJRVU14UWl4TlFVRk5MRmRCUVZjc1IwRkJSeXhOUVVGTkxFTkJRVU03VVVGRE0wSXNUVUZCVFN4UlFVRlJMRWRCUVVjc1EwRkJReXhEUVVGRE8xRkJRMjVDTEUxQlFVMHNVMEZCVXl4SFFVRkhMRU5CUVVNc1EwRkJRenRSUVVOd1FpeHJRa0ZCYTBJc1EwRkJReXhaUVVGWkxFTkJRek5DTEU5QlFVOHNSVUZEVUN4UFFVRlBPMWxCUTBnc1VVRkJVVHRaUVVOU0xGbEJRVms3V1VGRFdpeFRRVUZUTzFsQlExUXNZVUZCWVR0WlFVTmlMRlZCUVZVN1dVRkRWaXhaUVVGWk8xbEJRMW9zVjBGQlZ6dFpRVU5ZTEc5Q1FVRnZRaXhEUVVNelFpeERRVUZETzBsQlEwNHNRMEZCUXp0SlFVVkVMSEZDUVVGeFFqdFJRVU5xUWl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eGhRVUZoTEVOQlFVTXNlVVZCUVRaQ0xFTkJRVU1zUlVGQlJUdFpRVU16UkN4UFFVRlBPMU5CUTFZN1VVRkZSQ3hOUVVGTkxFZEJRVWNzUjBGQlJ5eEpRVUZKTEVsQlFVa3NSVUZCUlN4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRE8xRkJRMnBETEVsQlFVa3NSMEZCUnl4SFFVRkhMRWxCUVVrc1EwRkJReXhsUVVGbExFZEJRVWNzUjBGQlJ5eEZRVUZGTzFsQlEyeERMRTFCUVUwc2EwSkJRV3RDTEVkQlFVY3NTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeEZRVUZGTEVOQlFVTTdXVUZEZUVRc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RlFVRkZPMmRDUVVOeVFpeFBRVUZQTzJGQlExWTdXVUZGUkN4SlFVRkpMRU5CUVVNc2FVTkJRV2xETEVOQlEyeERMR3RDUVVGclFpeERRVUZETEZkQlFWY3NSVUZET1VJc2EwSkJRV3RDTEVOQlFVTXNXVUZCV1N4RFFVTnNReXhEUVVGRE8xbEJSVVlzU1VGQlNTeERRVUZETEdWQlFXVXNSMEZCUnl4SlFVRkpMRWxCUVVrc1JVRkJSU3hEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETzFOQlF5OURPMkZCUVUwN1dVRkRTQ3h6UkVGQlZTeERRVU5PTEdkRlFVRnZRaXhGUVVGRkxFVkJRM1JDTEN0Q1FVRXJRaXhGUVVNdlFpeERRVUZETEVOQlEwb3NRMEZCUXp0WlFVTkdMRmxCUVZrc1EwRkJReXhKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc1EwRkJRenRaUVVOMlF5eEpRVUZKTEVOQlFVTXNiVUpCUVcxQ0xFZEJRVWNzVFVGQlRTeERRVUZETEZWQlFWVXNRMEZEZUVNc1IwRkJSeXhGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhGUVVGRkxFVkJRMnhETEVkQlFVY3NRMEZEVGl4RFFVRkRPMU5CUTB3N1NVRkRUQ3hEUVVGRE8wTkJRMG83T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEY2xCRUxHdEVRVUZyUkR0QlFVVnpRanRCUVVWTU8wRkJVVlU3UVVGRGVFSTdRVUZEZDBJN1FVRkRiVUk3UVVGVmRFVTdRVUZMWXp0QlFVTXJRanRCUVVNM1FqdEJRVU5uUWp0QlFVTlZPMEZCUTFnN1FVRkpTRHRCUVVOMVFqdEJRVWROTzBGQlEyTTdRVUZITlVJN1FVRkphRU03UVVGalVEdEJRVXM1UWpzN1IwRkZSenRCUVVOSkxFMUJRVTBzYzBKQlFYTkNPMGxCTmtNdlFqczdPenRQUVVsSE8wbEJRMGdzV1VGQldTeE5RVUZqTEVWQlFVVXNZMEZCT0VJN1VVRnNRekZFTERCQ1FVRnhRaXhIUVVGSExFbEJRVWtzUTBGQlF6dFJRVEpDTjBJc2EwSkJRV0VzUjBGQmEwTXNVMEZCVXl4RFFVRkRPMUZCVVhKRUxFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NUVUZCVFN4RFFVRkRPMUZCUTNKQ0xFbEJRVWtzUTBGQlF5eGpRVUZqTEVkQlFVY3NZMEZCWXl4RFFVRkRPMUZCUTNKRExFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1IwRkJSeXhKUVVGSkxIRkdRVUZyUWl4RlFVRkZMRU5CUVVNN1VVRkRia1FzU1VGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4SlFVRkpMSGRFUVVGWkxFVkJRVVVzUTBGQlF6dFJRVVV2UWl4SlFVRkpMRU5CUVVNc1kwRkJZeXhIUVVGSE8xbEJRMnhDTEcxQ1FVRnRRaXhGUVVGRkxFbEJRVWs3V1VGRGVrSXNiVUpCUVcxQ0xFVkJRVVVzU1VGQlNUdFRRVU0xUWl4RFFVRkRPMUZCUlVZc2QwWkJRWGRHTzFGQlEzaEdMRWxCUVVrc1EwRkJReXhoUVVGaExFZEJRVWNzU1VGQlNTdzJSRUZCWVN4RFFVTnNReXhKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVU5ZTEVsQlFVa3NRMEZCUXl4alFVRmpMRVZCUTI1Q0xFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVOcVF5eERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXh4UWtGQmNVSXNSMEZCUnl4SFFVRkhMRVZCUVVVN1dVRkROVU1zU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhEUVVGRExEaERRVUU0UXl4RFFVRkRMRU5CUVVNN1VVRkRPVVVzUTBGQlF5eERRVUZETzFGQlJVWXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeEhRVUZITEVsQlFVa3NjVVpCUVhGQ0xFTkJRMnhFTEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc2EwSkJRV3RDTEVOQlEzcERMRU5CUVVNN1VVRkZSaXhKUVVGSkxFTkJRVU1zVjBGQlZ5eEhRVUZITEVsQlFVa3NhVVZCUVZjc1EwRkRPVUlzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4clFrRkJhMElzUlVGRGRFTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkRaQ3hEUVVGRE8xRkJRMFlzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4clFrRkJhMElzUjBGQlJ5eEhRVUZITEVWQlFVVXNRMEZEZGtNc1NVRkJTU3hEUVVGRExITkNRVUZ6UWl4RlFVRkZMRU5CUVVNN1VVRkZiRU1zYjBoQlFXOUlPMUZCUTNCSUxFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNhVU5CUVdsRExFZEJRVWNzUTBGRGFrUXNTMEZCWVN4RlFVTmlMRTFCUVdNc1JVRkRhRUlzUlVGQlJUdFpRVU5CTEUxQlFVMHNWVUZCVlN4SFFVRkhPMmRDUVVObUxHdENRVUZyUWl4RlFVRkZMRXRCUVVzN1owSkJRM3BDTEcxQ1FVRnRRaXhGUVVGRkxFMUJRVTA3WVVGRE9VSXNRMEZCUXp0WlFVVkdMRWxCUVVrc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eEhRVUZITEVOQlF5OURMRk5CUVZNc1EwRkRXaXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGNFTXNRMEZCUXl4RFFVRkRPMUZCUlVZc2RVbEJRWFZKTzFGQlEzWkpMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zYzBKQlFYTkNMRWRCUVVjc1IwRkJSeXhGUVVGRk8xbEJRek5ETEVsQlFVa3NRMEZCUXl4M1FrRkJkMElzUlVGQlJTeERRVUZETzFGQlEzQkRMRU5CUVVNc1EwRkJRenRSUVVWR0xFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1IwRkJSeXhKUVVGSkxESkZRVUZuUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF6dFJRVVV2UkN4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVkQlFVY3NTVUZCU1N3d1JVRkJiVUlzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNN1VVRkZja1VzU1VGQlNTeERRVUZETERaQ1FVRTJRaXhIUVVGSExFbEJRVWtzY1VaQlFYRkNMRVZCUVVVc1EwRkJRenRSUVVOcVJTeEpRVUZKTEVOQlFVTXNlVUpCUVhsQ0xFZEJRVWNzU1VGQlNTeHhSa0ZCY1VJc1JVRkJSU3hEUVVGRE8xRkJRemRFTEVsQlFVa3NRMEZCUXl4blEwRkJaME1zUTBGRGFrTXNTVUZCU1N4RFFVRkRMRFpDUVVFMlFpeERRVU55UXl4RFFVRkRPMUZCUTBZc1NVRkJTU3hEUVVGRExHZERRVUZuUXl4RFFVRkRMRWxCUVVrc1EwRkJReXg1UWtGQmVVSXNRMEZCUXl4RFFVRkRPMUZCUTNSRkxFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1IwRkJSeXhKUVVGSkxEWkZRVUZwUWl4RFFVTXhReXhKUVVGSkxFTkJRVU1zTmtKQlFUWkNMRU5CUTNKRExFTkJRVU03VVVGRFJpeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zT0VKQlFUaENMRWRCUVVjc1IwRkJSeXhGUVVGRkxFTkJRM3BFTEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc2IwSkJRVzlDTEVWQlFVVXNRMEZCUXp0UlFVVTVReXhKUVVGSkxFTkJRVU1zZFVKQlFYVkNMRWRCUVVjc1NVRkJTU3dyUmtGQmRVSXNSVUZCUlN4RFFVRkRPMUZCUlRkRUxESkNRVUV5UWp0UlFVTXpRaXhKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRWRCUVVjc1NVRkJTU3hwUmtGQmJVSXNSVUZCUlN4RFFVRkRPMUZCUTNKRUxFbEJRVWtzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhSUVVGUkxFZEJRVWNzUTBGRGFFTXNZVUZCTWtNc1JVRkROME1zUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUXp0UlFVTXZReXhKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc1kwRkJZeXhIUVVGSExFTkJRM1JETEZkQlFTdERMRVZCUTJwRUxFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNlVUpCUVhsQ0xFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTTdVVUZEYWtRc1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRzFDUVVGdFFpeEhRVUZITEVOQlF6TkRMRTlCUVdkRUxFVkJRMnhFTEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc09FSkJRVGhDTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1VVRkRiRVFzU1VGQlNTeERRVUZETEcxQ1FVRnRRaXhEUVVGRExHRkJRV0VzUjBGQlJ5eERRVUZETEZkQlFUaERMRVZCUVVVc1JVRkJSVHRaUVVONFJpeEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMR05CUVdNc1EwRkJReXhYUVVGWExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdVVUZETVVRc1EwRkJReXhEUVVGRE8xRkJRMFlzU1VGQlNTeERRVUZETEcxQ1FVRnRRaXhEUVVGRExFMUJRVTBzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhOUVVGTkxFVkJRVVVzUjBGQlJ5eEZRVUZGTzFsQlF6RkVMRTFCUVUwc2FVSkJRV2xDTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhoUVVGaExFTkJReTlETEcxRlFVRnpRaXhEUVVONlFpeERRVUZETzFsQlEwWXNTVUZCUnl4RFFVRkRMR2xDUVVGcFFpeEZRVU55UWp0blFrRkRTU3hKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc2JVSkJRVzFDTEVWQlFVVXNRMEZCUXp0aFFVTnNSRHRSUVVOTUxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEwZ3NTVUZCU1N4RFFVRkRMRzFDUVVGdFFpeERRVUZETEU5QlFVOHNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFBRVUZQTEVWQlFVVXNRMEZCUXl4TFFVRnRRaXhGUVVGRkxFVkJRVVU3V1VGREwwVXNkVVZCUVhWRk8xbEJRM1pGTEhWRlFVRjFSVHRaUVVOMlJTeHRSVUZCYlVVN1dVRkRia1VzZDBKQlFYZENPMWxCUTNoQ0xFMUJRVTBzWlVGQlpTeEhRVUZITEVsQlFVa3NRMEZCUXp0WlFVVTNRaXhOUVVGTkxHZENRVUZuUWl4SFFVRkhMRWxCUVVrc1EwRkJReXhsUVVGbE8yMUNRVU4yUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzU1VGQlNTeGxRVUZsTzIxQ1FVTndReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEhOQ1FVRnpRaXhEUVVGRExHMUdRVUZ6UXl4RFFVRkRMRWRCUVVjc1EwRkJRenRaUVVWd1JpeE5RVUZOTEdsQ1FVRnBRaXhIUVVGSExFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJRenRaUVVOb1J5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMR0ZCUVdFc1EwRkJReXhwUWtGQmFVSXNSVUZCUlN4RFFVRkRMR2RDUVVGblFpeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhEUVVGRE8xbEJSV2hITEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc2JVSkJRVzFDTEVWQlFVVXNRMEZCUXp0WlFVVjZReXhyUlVGQmEwVTdXVUZEYkVVc1NVRkJTU3hKUVVGSkxFTkJRVU1zWjBKQlFXZENMRWxCUVVrc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4TFFVRkxMRk5CUVZNc1JVRkJSVHRuUWtGRE9VUXNUVUZCVFN4RFFVRkRMR0ZCUVdFc1EwRkJReXhKUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1EwRkJRenRoUVVNdlF6dFpRVVZFTEdsRFFVRnBRenRaUVVOcVF5eEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdXVUZGTjBJc01rUkJRVEpFTzFsQlF6TkVMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRaUVVOcVF5eEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdXVUZEYWtNc1NVRkJTU3hEUVVGRExIVkNRVUYxUWl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8xbEJRM0JETEVsQlFVa3NRMEZCUXl4elFrRkJjMElzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0WlFVVnVReXhKUVVGSkxHZENRVUZuUWl4RlFVRkZPMmRDUVVOc1FpeDNSRUZCZDBRN1owSkJRM2hFTEZWQlFWVXNRMEZCUXl4SFFVRkhMRVZCUVVVN2IwSkJRMW9zU1VGQlNTeERRVUZETEdOQlFXTXNSMEZCUnl4SlFVRkpMRU5CUVVNN2IwSkJRek5DTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUlVGQlJTeERRVUZETzI5Q1FVTjRRaXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03WjBKQlF6TkRMRU5CUVVNc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF6dGhRVU5hTzFGQlEwd3NRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkZTQ3hwU0VGQmFVZzdVVUZEYWtnc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4SFFVRkhMRWxCUVVrc05FWkJRWEZDTEVOQlEyeEVMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNSVUZEZEVJc1NVRkJTU3hEUVVGRExIVkNRVUYxUWl4RFFVTXZRaXhEUVVGRE8xRkJRMFlzU1VGQlNTeERRVUZETERSQ1FVRTBRaXhIUVVGSExFbEJRVWtzTUVkQlFUUkNMRU5CUTJoRkxFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1EwRkROMElzUTBGQlF6dFJRVU5HTEVsQlFVa3NRMEZCUXl4MVFrRkJkVUlzUlVGQlJTeERRVUZETzFGQlF5OUNMRWxCUVVrc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4MVFrRkJkVUlzUlVGQlJTeERRVUZETzFGQlJYWkVMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNSMEZCUnl4SlFVRkpMRFpGUVVGdFFpeERRVU01UXl4SlFVRkpMRU5CUVVNc2RVSkJRWFZDTEVWQlF6VkNMRWxCUVVrc1EwRkJReXhYUVVGWExFVkJRMmhDTEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGRE0wSXNRMEZCUXp0UlFVVkdMRWxCUVVrc1EwRkJReXhWUVVGVkxFZEJRVWNzUzBGQlN5eERRVUZETzFGQlEzaENMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNSMEZCUnl4TFFVRkxMRU5CUVVNN1VVRkRha01zU1VGQlNTeERRVUZETEdOQlFXTXNSMEZCUnl4RlFVRkZMRU5CUVVNN1VVRkRla0lzU1VGQlNTeERRVUZETEdWQlFXVXNSMEZCUnl4SlFVRkpMRU5CUVVNN1VVRkROVUlzU1VGQlNTeERRVUZETEdOQlFXTXNSMEZCUnl4TFFVRkxMRU5CUVVNN1VVRkROVUlzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhIUVVGSExFTkJRVU1zUTBGQlF6dFJRVVV4UWl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExHdERRVUZyUXl4RFFVTXhReXgzUlVGQk1rSXNSVUZETTBJc1EwRkJReXhWUVVGVkxFVkJRVVVzUlVGQlJUdFpRVU5ZTEVsQlFVY3NWVUZCVlN4TFFVRkxMRVZCUVVVc1JVRkJSVHRuUWtGRGJFSXNUMEZCVHp0aFFVTldPMWxCUlVRc2VVUkJRWGxFTzFsQlEzcEVMRWxCUVVrc1EwRkJReXgzUWtGQmQwSXNRMEZCUXl4alFVRmpMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU03V1VGRGNrUXNTVUZCU1N4RFFVRkRMSGRDUVVGM1FpeERRVUZETEc5Q1FVRnZRaXhEUVVNNVF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RlFVTm1MRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRM1JDTEVOQlFVTTdXVUZEUml4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVkQlFVY3NWVUZCVlN4RFFVRkRPMWxCUTI1RExFbEJRVWtzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhoUVVGaExFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTTdVVUZEZGtRc1EwRkJReXhEUVVOS0xFTkJRVU03VVVGRlJpeEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVVTVRaXhKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRWRCUVVrc1IwRkJSeXhGUVVGRk8xbEJRemxDTEVsQlFVa3NiVUpCUVcxQ0xFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4dFFrRkJiVUlzUTBGRGNrUXNLMFZCUVd0RExFTkJRM0pETEVOQlFVTTdXVUZGUml4NVJVRkJlVVU3V1VGRGVrVXNTVUZCU1N4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExHRkJRV0VzUTBGQlF5eHRSVUZCYzBJc1EwRkJReXhGUVVGRk8yZENRVU51UkN4dFFrRkJiVUlzU1VGQlNTeEhRVUZITEVkQlFVY3NiVVZCUVhOQ0xFZEJRVWNzVDBGQlR5eERRVUZETzJGQlEycEZPMWxCUlVRc2RVZEJRWFZITzFsQlEzWkhMREpFUVVFeVJEdFpRVU16UkN4cFNFRkJhVWc3V1VGRGFrZ3NTVUZCU1R0WlFVVktMRTlCUVU4c2JVSkJRVzFDTEVOQlFVTTdVVUZETDBJc1EwRkJRenRKUVVOTUxFTkJRVU03U1VGRlJEczdPenRQUVVsSE8wbEJRMGdzZDBOQlFYZERMRU5CUTNCRExFTkJRVk1zUlVGRFZDeERRVUZUTzFGQlJWUXNUMEZCVHl4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNaME5CUVdkRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUXpORkxFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3hsUVVGbExFTkJRVU1zUzBGQmJVSTdVVUZETDBJc1RVRkJUU3hQUVVGUExFZEJRVWNzU1VGQlNTeFZRVUZWTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xRkJRek5ETEhWRVFVRlZMRU5CUVVNc2FVVkJRVzlDTEVWQlFVVXNSVUZCUlN4dFFrRkJiVUlzUjBGQlJ5eFBRVUZQTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkZja1VzVDBGQlR6dFJRVU5RTEUxQlFVMHNWMEZCVnl4SFFVTmlMRWxCUVVrc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4dlFrRkJiMElzUTBGQlF5eEhRVUZITEVOQlEycEVMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUTBGRFlpeERRVUZETzFGQlEwNHNTVUZCU1N4RFFVRkRMSFZDUVVGMVFpeERRVUZETEc5Q1FVRnZRaXhEUVVGRExFZEJRVWNzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZET1VRc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGRFlpeERRVUZETzFGQlEwWXNaVUZCWlR0UlFVTm1MRFpPUVVFMlRqdFJRVU0zVGl4SFFVRkhPMGxCUTFBc1EwRkJRenRKUVVWRU96dFBRVVZITzBsQlEwZ3NkVUpCUVhWQ08xRkJRMjVDTEdkQ1FVRm5RanRSUVVOb1FpeHpTRUZCYzBnN1VVRkRkRWdzU1VGQlNTeERRVUZETEhWQ1FVRjFRaXhEUVVGRExITkNRVUZ6UWl4RFFVTXZReXh4UjBGQk5rSXNSVUZETjBJc2VVSkJRWGxDTEVWQlEzcENMRU5CUVVNc1NVRkJhVUlzUlVGQlJTeEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMSGxDUVVGNVFpeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVTTVSQ3hEUVVGRE8xRkJRMFlzU1VGQlNTeERRVUZETEhWQ1FVRjFRaXhEUVVGRExITkNRVUZ6UWl4RFFVTXZReXh4UjBGQk5rSXNSVUZETjBJc1ZVRkJWU3hGUVVOV0xFTkJRVU1zU1VGQmFVSXNSVUZCUlN4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRlZCUVZVc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGRGJFVXNRMEZCUXp0UlFVTkdMRWxCUVVrc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4elFrRkJjMElzUTBGREwwTXNjVWRCUVRaQ0xFVkJRemRDTEZOQlFWTXNSVUZEVkN4RFFVRkRMRWxCUVdsQ0xFVkJRVVVzUlVGQlJUdFpRVU5zUWl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzFGQlEzcENMRU5CUVVNc1EwRkRTaXhEUVVGRE8xRkJRMFlzU1VGQlNTeERRVUZETEhWQ1FVRjFRaXhEUVVGRExITkNRVUZ6UWl4RFFVTXZReXh4UjBGQk5rSXNSVUZETjBJc1lVRkJZU3hGUVVOaUxFTkJRVU1zU1VGQmFVSXNSVUZCUlN4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVONlJDeERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMSFZDUVVGMVFpeERRVUZETEhOQ1FVRnpRaXhEUVVNdlF5eHhSMEZCTmtJc1JVRkROMElzWlVGQlpTeEZRVU5tTEVkQlFVY3NSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXh0UTBGQmJVTXNSVUZCUlN4RFFVTnVSQ3hEUVVGRE8xRkJRMFlzU1VGQlNTeERRVUZETEhWQ1FVRjFRaXhEUVVGRExITkNRVUZ6UWl4RFFVTXZReXh4UjBGQk5rSXNSVUZETjBJc2JVSkJRVzFDTEVWQlEyNUNMRU5CUVVNc1NVRkJhVUlzUlVGQlJTeEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMSFZDUVVGMVFpeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVTTFSQ3hEUVVGRE8xRkJRMFlzU1VGQlNTeERRVUZETEhWQ1FVRjFRaXhEUVVGRExITkNRVUZ6UWl4RFFVTXZReXh4UjBGQk5rSXNSVUZETjBJc1lVRkJZU3hGUVVOaUxFTkJRVU1zU1VGQmFVSXNSVUZCUlN4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExIVkNRVUYxUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVNMVJDeERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMSFZDUVVGMVFpeERRVUZETEhOQ1FVRnpRaXhEUVVNdlF5eHhSMEZCTmtJc1JVRkROMElzZDBKQlFYZENMRVZCUTNoQ0xFTkJRVU1zU1VGQmFVSXNSVUZCUlN4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExHOURRVUZ2UXl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVONlJUdFJRVU5FTEVsQlFVa3NRMEZCUXl4MVFrRkJkVUlzUTBGQlF5eHpRa0ZCYzBJc1EwRkRMME1zY1VkQlFUWkNMRVZCUXpkQ0xHbENRVUZwUWl4RlFVTnFRaXhEUVVGRExFbEJRV2xDTEVWQlFVVXNSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkRNVVFzUTBGQlF6dFJRVU5HTEVsQlFVa3NRMEZCUXl4MVFrRkJkVUlzUTBGQlF5eHpRa0ZCYzBJc1EwRkRMME1zY1VkQlFUWkNMRVZCUXpkQ0xHVkJRV1VzUlVGRFppeERRVUZETEVsQlFXbENMRVZCUVVVc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUTNCRUxFTkJRVU03VVVGRFJpeEpRVUZKTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU1zYzBKQlFYTkNMRU5CUXk5RExIRkhRVUUyUWl4RlFVTTNRaXhqUVVGakxFVkJRMlFzUTBGQlF5eEpRVUZwUWl4RlFVRkZMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVTnVSQ3hEUVVGRE8xRkJRMFlzU1VGQlNTeERRVUZETEhWQ1FVRjFRaXhEUVVGRExITkNRVUZ6UWl4RFFVTXZReXh4UjBGQk5rSXNSVUZETjBJc1kwRkJZeXhGUVVOa0xFTkJRVU1zU1VGQmFVSXNSVUZCUlN4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZEYmtRc1EwRkJRenRSUVVOR0xFbEJRVWtzUTBGQlF5eDFRa0ZCZFVJc1EwRkJReXh6UWtGQmMwSXNRMEZETDBNc2NVZEJRVFpDTEVWQlF6ZENMRlZCUVZVc1JVRkRWaXhIUVVGSExFVkJRVVU3V1VGRFJDeG5Ra0ZCWjBJN1VVRkRjRUlzUTBGQlF5eERRVU5LTEVOQlFVTTdVVUZEUml4SlFVRkpMRU5CUVVNc2RVSkJRWFZDTEVOQlFVTXNjMEpCUVhOQ0xFTkJReTlETEhGSFFVRTJRaXhGUVVNM1FpeDFRa0ZCZFVJc1JVRkRka0lzUTBGQlF5eEpRVUZwUWl4RlFVRkZMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zZFVKQlFYVkNMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRelZFTEVOQlFVTTdVVUZEUml4SlFVRkpMRU5CUVVNc2RVSkJRWFZDTEVOQlFVTXNjMEpCUVhOQ0xFTkJReTlETEhGSFFVRTJRaXhGUVVNM1FpeHBRa0ZCYVVJc1JVRkRha0lzUTBGQlF5eEpRVUZwUWl4RlFVRkZMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRM1JFTEVOQlFVTTdVVUZEUml4SlFVRkpMRU5CUVVNc2RVSkJRWFZDTEVOQlFVTXNjMEpCUVhOQ0xFTkJReTlETEhGSFFVRTJRaXhGUVVNM1FpeFZRVUZWTEVWQlExWXNRMEZCUXl4SlFVRnBRaXhGUVVGRkxFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zU1VGQlNTeERRVUZETEVOQlEzUkVMRU5CUVVNN1VVRkZSaXhqUVVGak8xRkJRMlFzU1VGQlNTeERRVUZETEhWQ1FVRjFRaXhEUVVGRExITkNRVUZ6UWl4RFFVTXZReXh0UjBGQk1rSXNSVUZETTBJc1pVRkJaU3hGUVVObUxFZEJRVWNzUlVGQlJTeERRVU5FTEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eHhRa0ZCY1VJc1EwRkROVU1zWlVGQlpTeERRVU5zUWl4RFFVTlNMRU5CUVVNN1VVRkRSaXhKUVVGSkxFTkJRVU1zZFVKQlFYVkNMRU5CUVVNc2MwSkJRWE5DTEVOQlF5OURMRzFIUVVFeVFpeEZRVU16UWl4MVFrRkJkVUlzUlVGRGRrSXNSMEZCUnl4RlFVRkZMRU5CUTBRc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMSEZDUVVGeFFpeERRVU0xUXl4MVFrRkJkVUlzUTBGRE1VSXNRMEZEVWl4RFFVRkRPMUZCUTBZc1NVRkJTU3hEUVVGRExIVkNRVUYxUWl4RFFVRkRMSE5DUVVGelFpeERRVU12UXl4dFIwRkJNa0lzUlVGRE0wSXNXVUZCV1N4RlFVTmFMRWRCUVVjc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkRka1VzUTBGQlF6dFJRVU5HTEVsQlFVa3NRMEZCUXl4MVFrRkJkVUlzUTBGQlF5eHpRa0ZCYzBJc1EwRkRMME1zYlVkQlFUSkNMRVZCUXpOQ0xIVkNRVUYxUWl4RlFVTjJRaXhIUVVGSExFVkJRVVVzUTBGRFJDeEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zY1VKQlFYRkNMRU5CUXpWRExIVkNRVUYxUWl4RFFVTXhRaXhEUVVOU0xFTkJRVU03VVVGRFJpeEpRVUZKTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU1zYzBKQlFYTkNMRU5CUXk5RExHMUhRVUV5UWl4RlFVTXpRaXhuUWtGQlowSXNSVUZEYUVJc1IwRkJSeXhGUVVGRkxFTkJRMFFzU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExIRkNRVUZ4UWl4RFFVTTFReXhuUWtGQlowSXNRMEZEYmtJc1EwRkRVaXhEUVVGRE8xRkJRMFlzU1VGQlNTeERRVUZETEhWQ1FVRjFRaXhEUVVGRExITkNRVUZ6UWl4RFFVTXZReXh0UjBGQk1rSXNSVUZETTBJc1pVRkJaU3hGUVVObUxFZEJRVWNzUlVGQlJTeERRVU5FTEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eHhRa0ZCY1VJc1EwRkROVU1zWlVGQlpTeERRVU5zUWl4RFFVTlNMRU5CUVVNN1VVRkRSaXhKUVVGSkxFTkJRVU1zZFVKQlFYVkNMRU5CUVVNc2MwSkJRWE5DTEVOQlF5OURMRzFIUVVFeVFpeEZRVU16UWl4aFFVRmhMRVZCUTJJc1EwRkJReXhKUVVFMFFpeEZRVUZGTEVWQlFVVXNRMEZETjBJc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMSEZDUVVGeFFpeERRVU0xUXl4aFFVRmhMRVZCUVVVc1NVRkJTU3hEUVVOMFFpeERRVU5TTEVOQlFVTTdVVUZEUml4SlFVRkpMRU5CUVVNc2RVSkJRWFZDTEVOQlFVTXNjMEpCUVhOQ0xFTkJReTlETEcxSFFVRXlRaXhGUVVNelFpeDNRa0ZCZDBJc1JVRkRlRUlzUjBGQlJ5eEZRVUZGTEVOQlEwUXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeERRVUZETEhGQ1FVRnhRaXhEUVVNMVF5eDNRa0ZCZDBJc1EwRkRNMElzUTBGRFVpeERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMSFZDUVVGMVFpeERRVUZETEhOQ1FVRnpRaXhEUVVNdlF5eHRSMEZCTWtJc1JVRkRNMElzVlVGQlZTeEZRVU5XTEVkQlFVY3NSVUZCUlR0WlFVTkVMR2RDUVVGblFqdFJRVU53UWl4RFFVRkRMRU5CUTBvc1EwRkJRenRSUVVOR0xFbEJRVWtzUTBGQlF5eDFRa0ZCZFVJc1EwRkJReXh6UWtGQmMwSXNRMEZETDBNc2JVZEJRVEpDTEVWQlF6TkNMR1ZCUVdVc1JVRkRaaXhEUVVGRExFbEJRVFJDTEVWQlFVVXNSVUZCUlN4RFFVTTNRaXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc2NVSkJRWEZDTEVOQlF6VkRMR1ZCUVdVc1JVRkJSU3hKUVVGSkxFTkJRM2hDTEVOQlExSXNRMEZCUXp0UlFVTkdMRWxCUVVrc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4elFrRkJjMElzUTBGREwwTXNiVWRCUVRKQ0xFVkJRek5DTEZOQlFWTXNSVUZEVkN4RFFVRkRMRWxCUVRSQ0xFVkJRVVVzUlVGQlJTeERRVU0zUWl4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNjVUpCUVhGQ0xFTkJRelZETEZOQlFWTXNSVUZCUlN4SlFVRkpMRU5CUTJ4Q0xFTkJRMUlzUTBGQlF6dFJRVU5HTEVsQlFVa3NRMEZCUXl4MVFrRkJkVUlzUTBGQlF5eHpRa0ZCYzBJc1EwRkRMME1zYlVkQlFUSkNMRVZCUXpOQ0xHTkJRV01zUlVGRFpDeERRVUZETEVsQlFUUkNMRVZCUVVVc1JVRkJSU3hEUVVNM1FpeEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zY1VKQlFYRkNMRU5CUXpWRExHTkJRV01zUlVGQlJTeEpRVUZKTEVOQlEzWkNMRU5CUTFJc1EwRkJRenRSUVVOR0xFbEJRVWtzUTBGQlF5eDFRa0ZCZFVJc1EwRkJReXh6UWtGQmMwSXNRMEZETDBNc2JVZEJRVEpDTEVWQlF6TkNMRk5CUVZNc1JVRkRWQ3hEUVVGRExFbEJRVFJDTEVWQlFVVXNSVUZCUlN4RFFVTTNRaXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc2NVSkJRWEZDTEVOQlF6VkRMRk5CUVZNc1JVRkRWQ3hKUVVGSkxFTkJRMUFzUTBGRFVpeERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMSFZDUVVGMVFpeERRVUZETEhOQ1FVRnpRaXhEUVVNdlF5eHRSMEZCTWtJc1JVRkRNMElzVDBGQlR5eEZRVU5RTEVOQlFVTXNTVUZCTkVJc1JVRkJSU3hGUVVGRkxFTkJRemRDTEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhQUVVGUExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlEzUkZMRU5CUVVNN1VVRkRSaXhKUVVGSkxFTkJRVU1zZFVKQlFYVkNMRU5CUVVNc2MwSkJRWE5DTEVOQlF5OURMRzFIUVVFeVFpeEZRVU16UWl4VlFVRlZMRVZCUTFZc1EwRkJReXhKUVVFMFFpeEZRVUZGTEVWQlFVVXNRMEZETjBJc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMSEZDUVVGeFFpeERRVU0xUXl4VlFVRlZMRVZCUTFZc1NVRkJTU3hEUVVOUUxFTkJRMUlzUTBGQlF6dFJRVU5HTEVsQlFVa3NRMEZCUXl4MVFrRkJkVUlzUTBGQlF5eHpRa0ZCYzBJc1EwRkRMME1zYlVkQlFUSkNMRVZCUXpOQ0xGbEJRVmtzUlVGRFdpeERRVUZETEVsQlFUUkNMRVZCUVVVc1JVRkJSU3hEUVVNM1FpeEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zY1VKQlFYRkNMRU5CUXpWRExGbEJRVmtzUlVGRFdpeEpRVUZKTEVOQlExQXNRMEZEVWl4RFFVRkRPMUZCUTBZc1NVRkJTU3hEUVVGRExIVkNRVUYxUWl4RFFVRkRMSE5DUVVGelFpeERRVU12UXl4dFIwRkJNa0lzUlVGRE0wSXNXVUZCV1N4RlFVTmFMRU5CUVVNc1NVRkJORUlzUlVGQlJTeEZRVUZGTEVOQlF6ZENMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4eFFrRkJjVUlzUTBGRE5VTXNXVUZCV1N4RlFVTmFMRWxCUVVrc1EwRkRVQ3hEUVVOU0xFTkJRVU03VVVGRFJpeEpRVUZKTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU1zYzBKQlFYTkNMRU5CUXk5RExHMUhRVUV5UWl4RlFVTXpRaXhYUVVGWExFVkJRMWdzUTBGQlF5eEpRVUUwUWl4RlFVRkZMRVZCUVVVc1EwRkROMElzU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExIRkNRVUZ4UWl4RFFVTTFReXhYUVVGWExFVkJRMWdzU1VGQlNTeERRVU5RTEVOQlExSXNRMEZCUXp0UlFVTkdMRWxCUVVrc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4elFrRkJjMElzUTBGREwwTXNiVWRCUVRKQ0xFVkJRek5DTEZOQlFWTXNSVUZEVkN4RFFVRkRMRWxCUVRSQ0xFVkJRVVVzUlVGQlJTeERRVU0zUWl4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNjVUpCUVhGQ0xFTkJRelZETEZOQlFWTXNSVUZEVkN4SlFVRkpMRU5CUTFBc1EwRkRVaXhEUVVGRE8xRkJRMFlzU1VGQlNTeERRVUZETEhWQ1FVRjFRaXhEUVVGRExITkNRVUZ6UWl4RFFVTXZReXh0UjBGQk1rSXNSVUZETTBJc1YwRkJWeXhGUVVOWUxFTkJRVU1zU1VGQk5FSXNSVUZCUlN4RlFVRkZMRU5CUXpkQ0xFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXh4UWtGQmNVSXNRMEZETlVNc1YwRkJWeXhGUVVOWUxFbEJRVWtzUTBGRFVDeERRVU5TTEVOQlFVTTdVVUZEUml4SlFVRkpMRU5CUVVNc2RVSkJRWFZDTEVOQlFVTXNjMEpCUVhOQ0xFTkJReTlETEcxSFFVRXlRaXhGUVVNelFpeFpRVUZaTEVWQlExb3NRMEZCUXl4SlFVRTBRaXhGUVVGRkxFVkJRVVVzUTBGRE4wSXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeERRVUZETEhGQ1FVRnhRaXhEUVVNMVF5eFpRVUZaTEVWQlExb3NTVUZCU1N4RFFVTlFMRU5CUTFJc1EwRkJRenRSUVVOR0xFbEJRVWtzUTBGQlF5eDFRa0ZCZFVJc1EwRkJReXh6UWtGQmMwSXNRMEZETDBNc2JVZEJRVEpDTEVWQlF6TkNMR0ZCUVdFc1JVRkRZaXhEUVVGRExFbEJRVFJDTEVWQlFVVXNSVUZCUlN4RFFVTTNRaXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc2NVSkJRWEZDTEVOQlF6VkRMR0ZCUVdFc1JVRkRZaXhKUVVGSkxFTkJRMUFzUTBGRFVpeERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMSFZDUVVGMVFpeERRVUZETEhOQ1FVRnpRaXhEUVVNdlF5eHRSMEZCTWtJc1JVRkRNMElzV1VGQldTeEZRVU5hTEVOQlFVTXNTVUZCTkVJc1JVRkJSU3hGUVVGRkxFTkJRemRDTEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eHhRa0ZCY1VJc1EwRkROVU1zV1VGQldTeEZRVU5hTEVsQlFVa3NRMEZEVUN4RFFVTlNMRU5CUVVNN1VVRkRSaXhKUVVGSkxFTkJRVU1zZFVKQlFYVkNMRU5CUVVNc2MwSkJRWE5DTEVOQlF5OURMRzFIUVVFeVFpeEZRVU16UWl4VlFVRlZMRVZCUTFZc1EwRkJReXhKUVVFMFFpeEZRVUZGTEVWQlFVVXNRMEZETjBJc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMSEZDUVVGeFFpeERRVU0xUXl4VlFVRlZMRVZCUTFZc1NVRkJTU3hEUVVOUUxFTkJRMUlzUTBGQlF6dFJRVU5HTEVsQlFVa3NRMEZCUXl4MVFrRkJkVUlzUTBGQlF5eHpRa0ZCYzBJc1EwRkRMME1zYlVkQlFUSkNMRVZCUXpOQ0xGZEJRVmNzUlVGRFdDeERRVUZETEVsQlFUUkNMRVZCUVVVc1JVRkJSU3hEUVVNM1FpeEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zY1VKQlFYRkNMRU5CUXpWRExGZEJRVmNzUlVGRFdDeEpRVUZKTEVOQlExQXNRMEZEVWl4RFFVRkRPMUZCUTBZc1NVRkJTU3hEUVVGRExIVkNRVUYxUWl4RFFVRkRMSE5DUVVGelFpeERRVU12UXl4dFIwRkJNa0lzUlVGRE0wSXNhMEpCUVd0Q0xFVkJRMnhDTEVkQlFVY3NSVUZCUlN4RFFVTkVMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4eFFrRkJjVUlzUTBGRE5VTXNhMEpCUVd0Q0xFTkJRM0pDTEVOQlExSXNRMEZCUXp0UlFVTkdMRWxCUVVrc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4elFrRkJjMElzUTBGREwwTXNiVWRCUVRKQ0xFVkJRek5DTEhOQ1FVRnpRaXhGUVVOMFFpeERRVUZETEVsQlFUUkNMRVZCUVVVc1JVRkJSU3hEUVVNM1FpeEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zY1VKQlFYRkNMRU5CUXpWRExITkNRVUZ6UWl4RlFVTjBRaXhKUVVGSkxFTkJRMUFzUTBGRFVpeERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMSFZDUVVGMVFpeERRVUZETEhOQ1FVRnpRaXhEUVVNdlF5eHRSMEZCTWtJc1JVRkRNMElzZFVKQlFYVkNMRVZCUTNaQ0xFTkJRVU1zU1VGQk5FSXNSVUZCUlN4RlFVRkZMRU5CUXpkQ0xFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXh4UWtGQmNVSXNRMEZETlVNc2RVSkJRWFZDTEVWQlEzWkNMRWxCUVVrc1EwRkRVQ3hEUVVOU0xFTkJRVU03VVVGRFJpeEpRVUZKTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU1zYzBKQlFYTkNMRU5CUXk5RExHMUhRVUV5UWl4RlFVTXpRaXhsUVVGbExFVkJRMllzUTBGQlF5eEpRVUUwUWl4RlFVRkZMRVZCUVVVc1EwRkROMElzU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExIRkNRVUZ4UWl4RFFVTTFReXhsUVVGbExFVkJRMllzU1VGQlNTeERRVU5RTEVOQlExSXNRMEZCUXp0UlFVTkdMRWxCUVVrc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4elFrRkJjMElzUTBGREwwTXNiVWRCUVRKQ0xFVkJRek5DTEhGQ1FVRnhRaXhGUVVOeVFpeERRVUZETEVsQlFUUkNMRVZCUVVVc1JVRkJSU3hEUVVNM1FpeEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zY1VKQlFYRkNMRU5CUXpWRExIRkNRVUZ4UWl4RlFVTnlRaXhKUVVGSkxFTkJRMUFzUTBGRFVpeERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMSFZDUVVGMVFpeERRVUZETEhOQ1FVRnpRaXhEUVVNdlF5eHRSMEZCTWtJc1JVRkRNMElzV1VGQldTeEZRVU5hTEVOQlFVTXNTVUZCTkVJc1JVRkJSU3hGUVVGRkxFTkJRemRDTEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eHhRa0ZCY1VJc1EwRkROVU1zV1VGQldTeEZRVU5hTEVsQlFVa3NRMEZEVUN4RFFVTlNMRU5CUVVNN1VVRkRSaXhKUVVGSkxFTkJRVU1zZFVKQlFYVkNMRU5CUVVNc2MwSkJRWE5DTEVOQlF5OURMRzFIUVVFeVFpeEZRVU16UWl4blFrRkJaMElzUlVGRGFFSXNRMEZCUXl4SlFVRTBRaXhGUVVGRkxFVkJRVVVzUTBGRE4wSXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeERRVUZETEhGQ1FVRnhRaXhEUVVNMVF5eG5Ra0ZCWjBJc1JVRkRhRUlzU1VGQlNTeERRVU5RTEVOQlExSXNRMEZCUXp0UlFVTkdMRWxCUVVrc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4elFrRkJjMElzUTBGREwwTXNiVWRCUVRKQ0xFVkJRek5DTEhWQ1FVRjFRaXhGUVVOMlFpeERRVUZETEVsQlFUUkNMRVZCUVVVc1JVRkJSU3hEUVVNM1FpeEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zY1VKQlFYRkNMRU5CUXpWRExIVkNRVUYxUWl4RlFVTjJRaXhKUVVGSkxFTkJRMUFzUTBGRFVpeERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMSFZDUVVGMVFpeERRVUZETEhOQ1FVRnpRaXhEUVVNdlF5eHRSMEZCTWtJc1JVRkRNMElzVlVGQlZTeEZRVU5XTEVOQlFVTXNTVUZCTkVJc1JVRkJSU3hGUVVGRkxFTkJRemRDTEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eHhRa0ZCY1VJc1EwRkROVU1zVlVGQlZTeEZRVU5XTEVsQlFVa3NRMEZEVUN4RFFVTlNMRU5CUVVNN1VVRkRSaXhKUVVGSkxFTkJRVU1zZFVKQlFYVkNMRU5CUVVNc2MwSkJRWE5DTEVOQlF5OURMRzFIUVVFeVFpeEZRVU16UWl4cFFrRkJhVUlzUlVGRGFrSXNRMEZCUXl4SlFVRTBRaXhGUVVGRkxFVkJRVVVzUTBGRE4wSXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeERRVUZETEhGQ1FVRnhRaXhEUVVNMVF5eHBRa0ZCYVVJc1JVRkRha0lzU1VGQlNTeERRVU5RTEVOQlExSXNRMEZCUXp0UlFVTkdMRWxCUVVrc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4elFrRkJjMElzUTBGREwwTXNiVWRCUVRKQ0xFVkJRek5DTEhWQ1FVRjFRaXhGUVVOMlFpeERRVUZETEVsQlFUUkNMRVZCUVVVc1JVRkJSU3hEUVVNM1FpeEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zY1VKQlFYRkNMRU5CUXpWRExIVkNRVUYxUWl4RlFVTjJRaXhKUVVGSkxFTkJRMUFzUTBGRFVpeERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMSFZDUVVGMVFpeERRVUZETEhOQ1FVRnpRaXhEUVVNdlF5eHRSMEZCTWtJc1JVRkRNMElzYVVKQlFXbENMRVZCUTJwQ0xFTkJRVU1zU1VGQk5FSXNSVUZCUlN4RlFVRkZMRU5CUXpkQ0xFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXh4UWtGQmNVSXNRMEZETlVNc2FVSkJRV2xDTEVWQlEycENMRWxCUVVrc1EwRkRVQ3hEUVVOU0xFTkJRVU03VVVGRFJpeEpRVUZKTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU1zYzBKQlFYTkNMRU5CUXk5RExHMUhRVUV5UWl4RlFVTXpRaXhyUWtGQmEwSXNSVUZEYkVJc1EwRkJReXhKUVVFMFFpeEZRVUZGTEVWQlFVVXNRMEZETjBJc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMSEZDUVVGeFFpeERRVU0xUXl4clFrRkJhMElzUlVGRGJFSXNTVUZCU1N4RFFVTlFMRU5CUTFJc1EwRkJRenRSUVVOR0xFbEJRVWtzUTBGQlF5eDFRa0ZCZFVJc1EwRkJReXh6UWtGQmMwSXNRMEZETDBNc2JVZEJRVEpDTEVWQlF6TkNMRlZCUVZVc1JVRkRWaXhEUVVGRExFbEJRVFJDTEVWQlFVVXNSVUZCUlN4RFFVTTNRaXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc2NVSkJRWEZDTEVOQlF6VkRMRlZCUVZVc1JVRkRWaXhKUVVGSkxFTkJRMUFzUTBGRFVpeERRVUZETzBsQlEwNHNRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5JTEZOQlFWTXNRMEZCUXl4UFFVRnZRanRSUVVNeFFpeDFSRUZCVlN4RFFVTk9MR2xGUVVGdlFpeEZRVUZGTEVWQlEzUkNMSFZEUVVGMVF5eEZRVU4yUXl4RFFVRkRMRU5CUTBvc1EwRkJRenRSUVVOR0xFMUJRVTBzWlVGQlpTeEhRVUZITEVsQlFVa3NWMEZCVnl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFMUJRVTBzUTBGRGNFUXNUMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGRGJrSXNRMEZCUXp0UlFVVkdMSFZFUVVGVkxFTkJRMDRzYVVWQlFXOUNMRVZCUVVVc1JVRkRkRUlzZDBKQlFYZENMRWRCUVVjc1pVRkJaU3hGUVVNeFF5eERRVUZETEVOQlEwb3NRMEZCUXp0UlFVTkdMRTFCUVUwc1QwRkJUeXhIUVVFMFFpeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMR1ZCUVdVc1EwRkJReXhEUVVGRE8xRkJRM0pGTEVsQlFVa3NUMEZCVHl4RFFVRkRMRTlCUVU4c1MwRkJTeXhyUWtGQmEwSXNSVUZCUlR0WlFVTjRReXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEhsQ1FVRjVRaXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETzFOQlF6RkVPMGxCUTB3c1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMR2xDUVVGcFFpeERRVUZETEU5QlFXOUNPMUZCUTJ4RExFbEJRVWs3V1VGRFFTeE5RVUZOTEdOQlFXTXNSMEZCUnl4SlFVRkpMRmRCUVZjc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlEyNUVMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlEyNUNMRU5CUVVNN1dVRkRSaXhOUVVGTkxGbEJRVmtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMR05CUVdNc1EwRkJReXhEUVVGRE8xbEJRMmhFTEVsQlEwa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExHTkJRV01zUTBGQlF5eEpRVUZKTEVOQlFVTXNXVUZCV1N4RlFVRkZMRmRCUVZjc1EwRkJReXhGUVVOc1JUdG5Ra0ZEUlN4NVJFRkJXU3hEUVVOU0xHbEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xDdEZRVUVyUlN4RFFVTnNSaXhEUVVGRE8yRkJRMHc3V1VGRFJDeE5RVUZOTEZOQlFWTXNSMEZCUnl4WlFVRlpMRU5CUVVNc1UwRkJVeXhEUVVGRE8xbEJRM3BETEU5QlFVOHNXVUZCV1N4RFFVRkRMRk5CUVZNc1EwRkJRenRaUVVNNVFpeDFSRUZCVlN4RFFVTk9MR2xGUVVGdlFpeEZRVUZGTEVWQlEzUkNMR2RDUVVOSkxGTkJRVk1zU1VGQlNTeHhSMEZCTmtJN1owSkJRM1JETEVOQlFVTXNRMEZCUXl4alFVRmpPMmRDUVVOb1FpeERRVUZETEVOQlFVTXNXVUZEVml3d1EwRkJNRU1zUTBGRE4wTXNRMEZCUXp0WlFVTkdMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1YwRkJWeXhGUVVGRkxFVkJRVVU3WjBKQlF6bERMRTFCUVUwc1QwRkJUeXhIUVVGSExGbEJRVmtzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXp0blFrRkRNVU1zVVVGQlVTeFRRVUZUTEVWQlFVVTdiMEpCUTJZc1MwRkJTeXh0UjBGQk1rSTdkMEpCUXpWQ0xEQkVRVUV3UkR0M1FrRkRNVVFzU1VGRFNTeERRVUZETEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNc1kwRkJZeXhEUVVGRExFbEJRVWtzUTBGRGFrTXNUMEZCVHl4RlFVTlFMRWxCUVVrc1EwRkRVQ3hGUVVOSU96UkNRVU5GTEhsRVFVRlpMRU5CUTFJc2FVVkJRVzlDTEVWQlFVVXNSVUZEZEVJc1pVRkJaU3hYUVVGWE96WkVRVU5ITEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUXpWQ0xFOUJRVThzUlVGRFVDeEpRVUZKTEVWQlEwb3NRMEZCUXl4RFFVTktMRVZCUVVVc1EwRkRha0lzUTBGQlF6czBRa0ZEUml4MVJVRkJkVVU3TkVKQlEzWkZMRTlCUVU4N2VVSkJRMVk3ZDBKQlJVUXNaMGxCUVdkSk8zZENRVU5vU1N4SlFVRkhMRU5CUVVNc1YwRkJWeXhMUVVGTExHVkJRV1VzU1VGQlNTeFhRVUZYTEV0QlFVc3NVMEZCVXl4SlFVRkpMRmRCUVZjc1MwRkJTeXhoUVVGaExFTkJRVU1zUlVGQlJUczBRa0ZEYUVjc1QwRkJUenQ1UWtGRFZqdDNRa0ZGUkN4SlFVTkpMRWxCUVVrc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eEhRVUZITEVOQlF5OURMRmRCUVZjc1EwRkRaQ3hGUVVOSU96UkNRVU5GTERoSVFVRTRTRHMwUWtGRE9VZ3NTVUZCU1N4RFFVRkRMSFZDUVVGMVFpeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFZEJRVWNzUTBGREwwTXNWMEZCVnl4RlFVTllMRTlCUVU4c1EwRkRWaXhEUVVGRE8zbENRVU5NT3paQ1FVRk5PelJDUVVOSUxIbEVRVUZaTEVOQlExSXNhVVZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNkME5CUVhkRExGZEJRVmNzYVVaQlFXbEdMRmRCUVZjc1pVRkJaU3hEUVVOcVN5eERRVUZETzNsQ1FVTk1PM2RDUVVORUxFMUJRVTA3YjBKQlExWXNTMEZCU3l4eFIwRkJOa0k3ZDBKQlF6bENMREJFUVVFd1JEdDNRa0ZETVVRc1NVRkRTU3hEUVVGRExFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFVkJRVVVzU1VGQlNTeERRVUZETEVWQlEzUkVPelJDUVVORkxIbEVRVUZaTEVOQlExSXNhVVZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNhVUpCUVdsQ0xGZEJRVmM3T0VOQlEyUXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhQUVVGUExFVkJRVVVzU1VGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUTI1RUxFTkJRVU03TkVKQlEwWXNkVVZCUVhWRk96UkNRVU4yUlN4UFFVRlBPM2xDUVVOV08zZENRVU5FTEVsQlEwa3NTVUZCU1N4RFFVRkRMSFZDUVVGMVFpeERRVUZETEc5Q1FVRnZRaXhEUVVGRExFZEJRVWNzUTBGRGFrUXNWMEZCVnl4RFFVTmtMRVZCUTBnN05FSkJRMFVzYzBaQlFYTkdPelJDUVVOMFJpeEpRVUZKTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1IwRkJSeXhEUVVOcVJDeFBRVUZQTEVOQlFVTXNSVUZCUlN4RlFVTldMRmRCUVZjc1EwRkRaQ3hEUVVGRE8zbENRVU5NT3paQ1FVRk5PelJDUVVOSUxIbEVRVUZaTEVOQlExSXNhVVZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNkME5CUVhkRExFOUJRVThzYlVaQlFXMUdMRmRCUVZjc1pVRkJaU3hEUVVNdlNpeERRVUZETzNsQ1FVTk1PM2RDUVVORUxFMUJRVTA3YjBKQlExWTdkMEpCUTBrc2VVUkJRVmtzUTBGRFVpeHBSVUZCYjBJc1JVRkJSU3hGUVVOMFFpeHpRa0ZCYzBJc1UwRkJVeXhGUVVGRkxFTkJRM0JETEVOQlFVTTdhVUpCUTFRN1dVRkRUQ3hEUVVGRExFTkJRVU1zUTBGQlF6dFpRVVZJTEhkRlFVRjNSVHRaUVVONFJTeEpRVUZKTEVOQlFVTXNORUpCUVRSQ0xFTkJRVU1zTUVKQlFUQkNMRVZCUVVVc1EwRkJRenRaUVVNdlJDeEpRVUZKTEVOQlFVTXNORUpCUVRSQ0xFTkJRVU1zZVVKQlFYbENMRVZCUVVVc1EwRkJRenRUUVVOcVJUdFJRVUZETEU5QlFVOHNRMEZCUXl4RlFVRkZPMWxCUTFJc2RVUkJRVlVzUTBGQlF5eHBSVUZCYjBJc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzFOQlEzcERPMGxCUTB3c1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMSFZDUVVGMVFpeERRVUZETEU5QlFXOUNPMUZCUTNoRExFMUJRVTBzU1VGQlNTeEhRVUZITEVsQlFVa3NWVUZCVlN4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8xRkJRM0pETEhWRVFVRlZMRU5CUTA0c2FVVkJRVzlDTEVWQlFVVXNSVUZEZEVJc2NVUkJRWEZFTEVWQlEzSkVMRU5CUVVNc1EwRkRTaXhEUVVGRE8xRkJRMFlzVFVGQlRTeHhRa0ZCY1VJc1IwRkJSeXhKUVVGSkxFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhQUVVGUExFVkJRVVVzUTBGQlF6dFJRVU0zUkN4MVJFRkJWU3hEUVVOT0xHbEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xESkZRVUV5UlN4eFFrRkJjVUlzUlVGQlJTeERRVU55Unl4RFFVRkRPMUZCUTBZc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eDNRa0ZCZDBJc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4RFFVRkRPMGxCUTNoRkxFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3hwUWtGQmFVSXNRMEZCUXl4UFFVRnZRanRSUVVOc1F5eE5RVUZOTEdOQlFXTXNSMEZCUnl4SlFVRkpMRmRCUVZjc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlF6RkZMRTFCUVUwc1dVRkJXU3hIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNZMEZCWXl4RFFVRkRMRU5CUVVNN1VVRkRhRVFzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExIbENRVUY1UWl4RFFVRkRMRmxCUVZrc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF6dEpRVU5vUml4RFFVRkRPMGxCUlVRc1kwRkJZenRSUVVOV0xFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNWVUZCVlN4RlFVRkZMRU5CUVVNN1VVRkZhRU1zTmtOQlFUWkRPMUZCUXpkRExFbEJRVWtzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4UlFVRlJMRVZCUVVVc1NVRkJTU3hKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEdOQlFXTXNSVUZCUlN4RlFVRkZPMWxCUTJ4RkxFbEJRVWtzUTBGQlF5eFZRVUZWTEVWQlFVVXNRMEZCUXp0VFFVTnlRanRKUVVOTUxFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3hoUVVGaExFTkJRVU1zVlVGQmJVSTdVVUZETjBJc1NVRkJTU3hWUVVGVkxFVkJRVVU3V1VGRFdpeEpRVUZKTEVOQlFVTXNZMEZCWXl4RlFVRkZMRU5CUVVNN1UwRkRla0k3WVVGQlRUdFpRVU5JTEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc2JVSkJRVzFDTEVWQlFVVXNRMEZCUXp0VFFVTTFRenRKUVVOTUxFTkJRVU03U1VGRlJEczdUMEZGUnp0SlFVTklMRmxCUVZrc1EwRkJReXhQUVVGbE8xRkJRM2hDTERoRlFVRTRSVHRSUVVNNVJTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRzFDUVVGdFFpeEZRVUZGTzFsQlF6TkNMSFZFUVVGVkxFTkJRMDRzYVVWQlFXOUNMRVZCUVVVc1JVRkRkRUlzTWtWQlFUSkZMRU5CUXpsRkxFTkJRVU03V1VGRFJpeFBRVUZQTzFOQlExWTdVVUZGUkN3eVJVRkJNa1U3VVVGRE0wVXNTVUZCU1N4RFFVRkRMR05CUVdNc1IwRkJSeXhKUVVGSkxFTkJRVU03VVVGRE0wSXNTVUZCU1N4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNVMEZCVXl4SlFVRkpMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4VFFVRlRMRU5CUVVNc1ZVRkJWU3hKUVVGSkxGTkJRVk1zUTBGQlF5eE5RVUZOTEVWQlFVVTdXVUZEZWtjc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRWRCUVVjc1QwRkJUeXgxUWtGQmRVSXNRMEZCUXl4RFFVRkRPMWxCUXpkRUxGVkJRVlVzUTBGQlF5eEhRVUZITEVWQlFVVTdaMEpCUTFvc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0WlFVTXZRaXhEUVVGRExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdVMEZEV2p0aFFVRk5PMWxCUTBnc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eHZRa0ZCYjBJc1JVRkJSU3hEUVVGRE8xbEJRek5ETEVsQlFVa3NRMEZCUXl4NVFrRkJlVUlzUlVGQlJTeERRVUZETzFOQlEzQkRPMGxCUTB3c1EwRkJRenRKUVVWRU96dFBRVVZITzBsQlEwZ3NaME5CUVdkRE8xRkJRelZDTEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1lVRkJZU3hEUVVNM1FpeEpRVUZKTEhGRlFVRnZRaXhEUVVGRE8xbEJRM0pDTEhGQ1FVRnhRaXhGUVVGRkxFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJN1dVRkRha1FzVDBGQlR5eEZRVUZGTEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eExRVUZMTzFsQlEzcERMRkZCUVZFc1JVRkJSU3hKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1NVRkJTVHRUUVVNMVF5eERRVUZETEVOQlEwd3NRMEZCUXp0UlFVTkdMRWxCUVVrc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4TFFVRkxMRWxCUVVrc1JVRkJSVHRaUVVOeVF5eDFSRUZCVlN4RFFVRkRMR2xGUVVGdlFpeEZRVUZGTEVWQlFVVXNjMEpCUVhOQ0xFTkJRVU1zUTBGQlF6dFpRVU16UkN4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVWQlFVVXNRMEZCUXp0VFFVTTFRanRoUVVGTk8xbEJRMGdzZFVSQlFWVXNRMEZCUXl4cFJVRkJiMElzUlVGQlJTeEZRVUZGTEhOQ1FVRnpRaXhEUVVGRExFTkJRVU03V1VGRE0wUXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeERRVUZETEdWQlFXVXNSVUZCUlN4RFFVRkRPMU5CUTJoRU8xRkJRMFFzVlVGQlZTeERRVUZETEVkQlFVY3NSVUZCUlR0WlFVTmFMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zWlVGQlpTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMUZCUXpWRExFTkJRVU1zUlVGQlJTeEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1EwRkJRenRKUVVOd1JDeERRVUZETzBsQlJVUTdPenRQUVVkSE8wbEJRMGdzYjBKQlFXOUNMRU5CUVVNc1QwRkJiMEk3VVVGRGNrTXNkVVJCUVZVc1EwRkRUaXhwUlVGQmIwSXNSVUZCUlN4RlFVTjBRaXd5UTBGQk1rTXNSVUZETTBNc1EwRkJReXhEUVVOS0xFTkJRVU03VVVGRFJpeE5RVUZOTEVsQlFVa3NSMEZCUnl4SlFVRkpMRlZCUVZVc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6dFJRVU55UXl4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNlVUpCUVhsQ0xFTkJRVU1zU1VGQlNTeEZRVUZGTEVkQlFVY3NSVUZCUlN4RFFVTTFSQ3hKUVVGSkxFTkJRVU1zWjBOQlFXZERMRVZCUVVVc1EwRkRNVU1zUTBGQlF6dEpRVU5PTEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxHMURRVUZ0UXp0UlFVTXZRaXgxUkVGQlZTeERRVU5PTEdsRlFVRnZRaXhGUVVGRkxFVkJRM1JDTERKRFFVRXlReXhGUVVNelF5eERRVUZETEVOQlEwb3NRMEZCUXp0UlFVTkdMRlZCUVZVc1EwRkJReXhIUVVGSExFVkJRVVU3V1VGRFdpeEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMR0ZCUVdFc1EwRkROMElzU1VGQlNTeHhSVUZCYjBJc1JVRkJSU3hEUVVNM1FpeERRVUZETzFsQlEwWXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeERRVUZETEdWQlFXVXNSVUZCUlN4RFFVRkRPMUZCUTJwRUxFTkJRVU1zUlVGQlJTeEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1EwRkJRenRSUVVOb1JDeEpRVUZKTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1pVRkJaU3hGUVVGRkxFVkJRVVU3V1VGRGNFTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhsUVVGbExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdVMEZETVVNN1NVRkRUQ3hEUVVGRE8wbEJSVVE3T3p0UFFVZEhPMGxCUTBnc1pVRkJaU3hEUVVGRExFbEJRV2xDTzFGQlF6ZENMRTFCUVUwc1NVRkJTU3hIUVVGSExFbEJRVWtzVlVGQlZTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUTJ4RExEQkZRVUU0UWl4RFFVRkRMRWxCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdTVUZEY0VRc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMR05CUVdNc1EwRkJReXhKUVVGcFFqdFJRVU0xUWl4TlFVRk5MRWxCUVVrc1IwRkJSeXhKUVVGSkxGVkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTnNReXg1UlVGQk5rSXNRMEZCUXl4SlFVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBsQlEyNUVMRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU0N4alFVRmpMRU5CUVVNc1NVRkJhVUk3VVVGRE5VSXNUVUZCVFN4SlFVRkpMRWRCUVVjc1NVRkJTU3hWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdVVUZEYkVNc2VVVkJRVFpDTEVOQlFVTXNTVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEpRVU51UkN4RFFVRkRPMGxCUlVRN08wOUJSVWM3U1VGRFNDeFZRVUZWTzFGQlEwNHNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zWlVGQlpTeEZRVUZGTEVWQlFVVTdXVUZEY2tNc1RVRkJUU3hQUVVGUExFZEJRMVFzY1VaQlFYRkdMRU5CUVVNN1dVRkRNVVlzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4aFFVRmhMRU5CUXpkQ0xFbEJRVWtzY1VWQlFXOUNMRU5CUVVNc1JVRkJSU3hQUVVGUExFVkJRVVVzUTBGQlF5eERRVU40UXl4RFFVRkRPMWxCUTBZc2VVUkJRVmtzUTBGQlF5eHBSVUZCYjBJc1JVRkJSU3hGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZETzFsQlJUbERMSFZDUVVGMVFqdFpRVU4yUWl4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNhME5CUVd0RExFTkJRVU1zUTBGQlF6dFpRVU01UkN4UFFVRlBPMU5CUTFZN1VVRkZSQ3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4alFVRmpMRVZCUVVVc1JVRkJSVHRaUVVOd1F5d3lSRUZCWXl4RFFVTldMR2xGUVVGdlFpeEZRVUZGTEVWQlEzUkNMR2xGUVVGcFJTeERRVU53UlN4RFFVRkRPMWxCUTBZc1QwRkJUenRUUVVOV08xRkJSVVFzU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNZVUZCWVN4RFFVRkRMRFpFUVVGblFpeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTjJSU3hKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEdGQlFXRXNRMEZCUXl4SlFVRkpMR2RGUVVGbExFVkJRVVVzUTBGQlF5eERRVUZETzFGQlJYcEVMRWxCUVVrc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRmxCUVZrc1EwRkJReXhUUVVGVExFVkJRVVU3V1VGRE9VTXNUVUZCVFN4VlFVRlZMRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eGhRVUZoTEVOQlFVTXNhMFZCUVhGQ0xFTkJRVU03V1VGRGJrVXNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeERRVUZETEZsQlFWa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1ZVRkJWU3hEUVVGRE8xbEJSWFJFTEVsQlFVa3NWVUZCVlN4RlFVRkZPMmRDUVVOa0xFbEJRVWtzUTBGQlF5eFRRVUZUTEVWQlFVVXNRMEZCUXp0aFFVTnNRanRwUWtGQlRUdG5Ra0ZEU0N4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNXVUZCV1R0eFFrRkROMElzU1VGQlNTeEZRVUZGTzNGQ1FVTk9MRWxCUVVrc1EwRkJReXhIUVVGSExFVkJRVVU3YjBKQlExQXNTVUZCU1N4RFFVRkRMRk5CUVZNc1JVRkJSU3hEUVVGRE8yZENRVU55UWl4RFFVRkRMRU5CUVVNN2NVSkJRMFFzUzBGQlN5eERRVUZETEVOQlFVTXNaMEpCUVdkQ0xFVkJRVVVzUlVGQlJUdHZRa0ZEZUVJc2RVUkJRVlVzUTBGQlF5eHBSVUZCYjBJc1JVRkJSU3hGUVVGRkxHZENRVUZuUWl4RFFVRkRMRU5CUVVNN2IwSkJRM0pFTEhWRVFVRlZMRU5CUTA0c2FVVkJRVzlDTEVWQlFVVXNSVUZEZEVJc1owbEJRV2RKTEVOQlEyNUpMRU5CUVVNN2IwSkJRMFlzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4aFFVRmhMRU5CUXpkQ0xFbEJRVWtzZDBWQlFYVkNMRU5CUVVNN2QwSkJRM2hDTEUxQlFVMHNSVUZCUlN4blFrRkJaMEk3Y1VKQlF6TkNMRU5CUVVNc1EwRkRUQ3hEUVVGRE8yZENRVU5PTEVOQlFVTXNRMEZCUXl4RFFVRkRPMkZCUTFZN1UwRkRTanRoUVVGTk8xbEJRMGdzU1VGQlNTeERRVUZETEZOQlFWTXNSVUZCUlN4RFFVRkRPMU5CUTNCQ08xRkJSVVFzU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhIUVVGSExFdEJRVXNzUTBGQlF6dFJRVU51UXl4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNaVUZCWlN4RlFVRkZMRU5CUVVNN1NVRkRha1FzUTBGQlF6dEpRVVZFT3p0UFFVVkhPMGxCUTBzc1UwRkJVenRSUVVOaUxESkVRVUV5UkR0UlFVTXpSQ3hKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExHZENRVUYzUWl4RlFVRkZMRVZCUVVVN1dVRkRka1FzU1VGQlNTeEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zV1VGQldTeERRVUZETEZOQlFWTXNSVUZCUlR0blFrRkRPVU1zU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExGbEJRVmtzUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXp0aFFVTTVRenRaUVVORUxIVkVRVUZWTEVOQlFVTXNhVVZCUVc5Q0xFVkJRVVVzUlVGQlJTeG5Ra0ZCWjBJc1EwRkJReXhEUVVGRE8xbEJRM0pFTEhWRVFVRlZMRU5CUTA0c2FVVkJRVzlDTEVWQlFVVXNSVUZEZEVJc1owbEJRV2RKTEVOQlEyNUpMRU5CUVVNN1dVRkRSaXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEdGQlFXRXNRMEZETjBJc1NVRkJTU3gzUlVGQmRVSXNRMEZCUXl4RlFVRkZMRTFCUVUwc1JVRkJSU3huUWtGQlowSXNSVUZCUlN4RFFVRkRMRU5CUXpWRUxFTkJRVU03VVVGRFRpeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTlFMRU5CUVVNN1NVRkZSRHM3VDBGRlJ6dEpRVU5JTEN0Q1FVRXJRanRSUVVNelFpeEpRVUZKTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1lVRkJZU3hEUVVGRExHZEZRVUZ0UWl4RFFVRkRMRVZCUVVVN1dVRkRhRVFzTkVKQlFUUkNPMWxCUXpWQ0xFbEJRVWtzUTBGQlF5eFZRVUZWTEVWQlFVVXNRMEZCUXp0VFFVTnlRanRSUVVORUxFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1JVRkJSU3hEUVVGRE8wbEJRemRDTEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxIbENRVUY1UWp0UlFVTnlRaXhKUVVGSkxFTkJRVU1zWVVGQllTeEhRVUZITEV0QlFVc3NRMEZCUXp0UlFVTXpRaXhKUVVGSkxFTkJRVU1zWlVGQlpTeEhRVUZITEVsQlFVa3NRMEZCUXp0UlFVTTFRaXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRWRCUVVjc1NVRkJTU3hEUVVGRE8xRkJRemxDTEUxQlFVMHNZVUZCWVN4SFFVRkhMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNSVUZCUlN4RFFVRkRPMUZCUTJ4RUxFbEJRVWtzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhQUVVGUExFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVTTdTVUZEY0VRc1EwRkJRenRKUVVWRU96czdPMDlCU1VjN1NVRkRTQ3haUVVGWkxFTkJRVU1zVlVGQk5FSTdVVUZEY2tNc1NVRkJTU3hEUVVGRExGVkJRVlVzUjBGQlJ5eFZRVUZWTEVOQlFVTTdVVUZETjBJc2VVSkJRWGxDTzFGQlEzcENMRWxCUVVrc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eGhRVUZoTEVOQlFVTXNORVJCUVdVc1EwRkJReXhGUVVGRk8xbEJRelZETERCQ1FVRXdRanRaUVVNeFFpeE5RVUZOTEdGQlFXRXNSMEZCUnl4SlFVRkpMRU5CUVVNc01rSkJRVEpDTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNN1dVRkZia1VzWjBWQlFXZEZPMWxCUTJoRkxFbEJRVWtzUTBGQlF5eGhRVUZoTEVWQlFVVTdaMEpCUTJoQ0xIZEVRVUZYTEVOQlExQXNhVVZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNOa2hCUVRaSUxFTkJRMmhKTEVOQlFVTTdaMEpCUTBZc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMSEZGUVVGeFJTeERRVUZETEVOQlFVTTdaMEpCUTJwSExFOUJRVTg3WVVGRFZqdFRRVU5LTzFGQlJVUXNkME5CUVhkRE8xRkJRM2hETEVsQlFVa3NRMEZCUXl4M1FrRkJkMElzUjBGQlJ5eEpRVUZKTEhsSFFVRjNRaXhEUVVONFJDeEpRVUZKTEVOQlFVTXNWVUZCVlN4RlFVTm1MRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRMWdzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZEZEVJc1EwRkJRenRSUVVWR0xHZEVRVUZuUkR0UlFVTm9SQ3hKUVVGSkxFTkJRVU1zZDBKQlFYZENMRU5CUVVNc1dVRkJXU3hIUVVGSExFTkJRVU1zUzBGQmMwSXNSVUZCUlN4RlFVRkZMRU5CUTNCRkxFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dFJRVVZxUXl4eFJVRkJjVVU3VVVGRGNrVXNTVUZCU1N4RFFVRkRMSGRDUVVGM1FpeERRVUZETEdsQ1FVRnBRaXhIUVVGSExFTkJRemxETEV0QlFXZERMRVZCUTJ4RExFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdVVUZGZGtNc2MwVkJRWE5GTzFGQlEzUkZMRWxCUVVrc1EwRkJReXgzUWtGQmQwSXNRMEZCUXl4clFrRkJhMElzUjBGQlJ5eERRVU12UXl4TFFVRm5ReXhGUVVOc1F5eEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMSE5DUVVGelFpeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMUZCUlhoRExIRkZRVUZ4UlR0UlFVTnlSU3hKUVVGSkxFTkJRVU1zZDBKQlFYZENMRU5CUVVNc2EwSkJRV3RDTEVkQlFVY3NRMEZETDBNc2MwSkJRV2xFTEVWQlEyNUVMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zYzBKQlFYTkNMRU5CUVVNc2MwSkJRWE5DTEVOQlFVTXNRMEZCUXp0UlFVVjZSQ3d3UmtGQk1FWTdVVUZETVVZc1NVRkJTU3hEUVVGRExIZENRVUYzUWl4RFFVRkRMR0ZCUVdFc1IwRkJSeXhEUVVNeFF5eG5Ra0ZCY1VNc1JVRkRka01zUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhEUVVGRE8xRkJSVGxETERoQ1FVRTRRanRSUVVNNVFpeEpRVUZKTEVOQlFVTXNkMEpCUVhkQ0xFTkJRVU1zZVVKQlFYbENMRWRCUVVjc1IwRkJSeXhGUVVGRkxFTkJRek5FTEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc2JVSkJRVzFDTEVWQlFVVXNRMEZCUXp0UlFVTTVReXhKUVVGSkxFTkJRVU1zZDBKQlFYZENMRU5CUVVNc01rSkJRVEpDTEVkQlFVY3NSMEZCUnl4RlFVRkZMRU5CUXpkRUxFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNaVUZCWlN4RlFVRkZMRU5CUVVNN1VVRkRNVU1zU1VGQlNTeHRRa0ZCYlVJc1IwRkJSeXhMUVVGTExFTkJRVU03VVVGRGFFTXNTVUZCU1N4RFFVRkRMSGRDUVVGM1FpeERRVUZETERCQ1FVRXdRaXhIUVVGSExFZEJRVWNzUlVGQlJUdFpRVU0xUkN4NVJrRkJlVVk3V1VGRGVrWXNhMGRCUVd0SE8xbEJRMnhITERSR1FVRTBSanRaUVVNMVJpeEpRVUZKTEVOQlFVTXNiVUpCUVcxQ08yZENRVU53UWl4RFFVRkRMRmRCUVZjc1JVRkJSU3hYUVVGWExFTkJRVU1zUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMSGRDUVVGM1FpeERRVUZETEdOQlFXTXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eEZRVUZGTzJkQ1FVTjBSeXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEd0Q1FVRnJRaXhGUVVGRkxFTkJRVU03WjBKQlEzcERMRzFDUVVGdFFpeEhRVUZITEVsQlFVa3NRMEZCUXp0aFFVTTVRanRSUVVOTUxFTkJRVU1zUTBGQlF6dFJRVVZHTERKRVFVRXlSRHRSUVVNelJDeEpRVUZKTEVOQlFVTXNkMEpCUVhkQ0xFTkJRVU1zVDBGQlR5eEhRVUZITEVOQlFVTXNWVUZCZVVJc1JVRkJSU3hGUVVGRkxFTkJRMnhGTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eGhRVUZoTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNN1VVRkZjRVFzZFVSQlFYVkVPMUZCUTNaRUxFMUJRVTBzYVVKQlFXbENMRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eGhRVUZoTEVOQlF5OURMRzFGUVVGelFpeERRVU42UWl4RFFVRkRPMUZCUTBZc1NVRkJTU3hwUWtGQmFVSXNSVUZCUlR0WlFVTnVRaXdyUlVGQkswVTdXVUZETDBVc1NVRkJTU3hEUVVGRExEWkNRVUUyUWl4RFFVRkRMR2xDUVVGcFFpeERRVU5vUkN4SlFVRkpMRU5CUVVNc2QwSkJRWGRDTEVOQlFVTXNZMEZCWXl4RlFVTTFReXhSUVVGUkxFVkJRMUlzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVNeFFpeERRVUZETzFsQlEwWXNTVUZCU1N4RFFVRkRMRFpDUVVFMlFpeERRVUZETEdWQlFXVXNSMEZCUnl4RFFVTnFSQ3hGUVVFMlFpeEZRVU12UWl4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0WlFVTTVRaXhKUVVGSkxFTkJRVU1zZDBKQlFYZENMRU5CUVVNc1YwRkJWeXhEUVVOeVF5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RlFVTnVRaXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVU5rTEVOQlFVTTdVMEZEVER0SlFVTk1MRU5CUVVNN1NVRkZSRHM3VDBGRlJ6dEpRVU5JTERKQ1FVRXlRaXhEUVVGRExFOUJRWGxDTzFGQlEycEVMR2xIUVVGcFJ6dFJRVU5xUnl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVlVzUlVGQlJUdFpRVU55UWl4M1JFRkJWeXhEUVVGRExHbEZRVUZ2UWl4RlFVRkZMRVZCUVVVc05FSkJRVFJDTEVOQlFVTXNRMEZCUXp0WlFVTnNSU3hQUVVGUExFdEJRVXNzUTBGQlF6dFRRVU5vUWp0UlFVVkVMSFZFUVVGMVJEdFJRVU4yUkN4TFFVRkxMRTFCUVUwc1UwRkJVeXhKUVVGSkxFOUJRVThzUTBGQlF5eFZRVUZWTEVWQlFVVTdXVUZEZUVNc1MwRkJTeXhOUVVGTkxFZEJRVWNzU1VGQlNTeFRRVUZUTEVOQlFVTXNTVUZCU1N4RlFVRkZPMmRDUVVNNVFpeEpRVUZKTEVkQlFVY3NRMEZCUXl4UlFVRlJMRU5CUVVNc1RVRkJUU3hEUVVGRExFVkJRVVU3YjBKQlEzUkNMSFZFUVVGVkxFTkJRMDRzYVVWQlFXOUNMRVZCUVVVc1JVRkRkRUlzTmtKQlFUWkNMRWRCUVVjc1JVRkJSU3hEUVVOeVF5eERRVUZETzI5Q1FVTkdMRTlCUVU4c1NVRkJTU3hEUVVGRE8ybENRVU5tTzJGQlEwbzdVMEZEU2p0UlFVVkVMSGRFUVVGWExFTkJRVU1zYVVWQlFXOUNMRVZCUVVVc1JVRkJSU3cwUWtGQk5FSXNRMEZCUXl4RFFVRkRPMUZCUTJ4RkxFOUJRVThzUzBGQlN5eERRVUZETzBsQlEycENMRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU0N4eFFrRkJjVUlzUTBGQlF5eGhRVUUwUWp0UlFVTTVReXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRVZCUVVVc1EwRkJRenRSUVVWNlFpeHZSMEZCYjBjN1VVRkRjRWNzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4aFFVRmhMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNRMEZCUXp0UlFVVjJSQ3cyU0VGQk5rZzdVVUZETjBnc1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRMR05CUVdNc1IwRkJSeXhEUVVOMFF5eGhRVUV5UXl4RlFVTTNReXhGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExHRkJRV0VzUTBGQlF5eERRVUZETzFGQlF6VkRMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4aFFVRmhMRWRCUVVjc1EwRkRja01zV1VGQmVVTXNSVUZETTBNc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF6dFJRVU14UXl4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNkMEpCUVhkQ0xFZEJRVWNzUTBGRGFFUXNiVUpCUVRKRUxFVkJRemRFTEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc0swSkJRU3RDTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zUTBGQlF6dFJRVVV2UkN3MFNFRkJORWc3VVVGRE5VZ3NTVUZCU1N4RFFVRkRMRzFDUVVGdFFpeERRVUZETEdOQlFXTXNSMEZCUnl4RFFVTjBReXhaUVVGcFF5eEZRVU51UXl4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRE8wbEJReTlETEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxIbENRVUY1UWl4RFFVRkRMRzFDUVVGM1F6dFJRVU01UkN4MVJFRkJWU3hEUVVOT0xHbEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xIRkNRVUZ4UWl4dFFrRkJiVUlzUTBGQlF5eEhRVUZITEVWQlFVVXNSVUZET1VNc1EwRkJReXhEUVVOS0xFTkJRVU03VVVGRlJpeEpRVUZKTEdkQ1FVRm5RaXhIUVVGWExFbEJRVWtzUTBGQlF6dFJRVVZ3UXl3NFEwRkJPRU03VVVGRE9VTXNTVUZCU1N4blFrRkJaMElzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMR2RDUVVGblFpeERRVUZETEhkRlFVRXlRaXhEUVVGRExFTkJRVU03VVVGRGFrWXNUVUZCVFN4cFFrRkJhVUlzUjBGQlJ5eG5Ra0ZCWjBJc1EwRkJReXhSUVVGUkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNN1VVRkRkRVVzU1VGQlNTeERRVUZETEVOQlFVTXNhVUpCUVdsQ0xFVkJRVVU3V1VGRGNrSXNNRU5CUVRCRE8xbEJRekZETEdkQ1FVRm5RaXhIUVVGSExHZENRVUZuUWl4RFFVRkRMRkZCUVZFc1EwRkJRenRUUVVOb1JEdFJRVVZFTERoQ1FVRTRRanRSUVVNNVFpeE5RVUZOTEdOQlFXTXNSMEZCUnl4RFFVRkRMRWRCUVVjc2JVSkJRVzFDTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXcwUTBGQk5FTTdVVUZEYWtjc1kwRkJZeXhEUVVGRExFOUJRVThzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMR2xEUVVGcFF6dFJRVU0zUkN4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExIVkNRVUYxUWl4RFFVTXZRaXgzUlVGQk1rSXNSVUZETTBJc1kwRkJZeXhEUVVOcVFpeERRVUZETzFGQlJVWXNTVUZCU1N4elFrRkJjMElzUjBGQldTeEpRVUZKTEVOQlFVTTdVVUZETTBNc1RVRkJUU3hsUVVGbExFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4aFFVRmhMRU5CUVVNc2EwVkJRWEZDTEVOQlFVTXNRMEZCUXp0UlFVTjZSU3hOUVVGTkxHTkJRV01zUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMSE5DUVVGelFpeERRVUZETEcxR1FVRnpReXhEUVVGRExFTkJRVU03VVVGRGJFY3NUVUZCVFN4alFVRmpMRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eHpRa0ZCYzBJc1EwRkJReXgxUmtGQk1FTXNRMEZCUXl4RFFVRkRPMUZCUlhSSExHbEZRVUZwUlR0UlFVTnFSU3hOUVVGTkxGbEJRVmtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRmxCUVZrc1EwRkJRenRSUVVNNVF5eE5RVUZOTEZOQlFWTXNSMEZCUnl4SlFVRkpMR1ZCUVdVc1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMUZCUXpsRUxFbEJRVWtzV1VGQldTeEpRVUZKTEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc2QwVkJRVEpDTEVOQlFVTXNSVUZCUlR0WlFVTTFSQ3gzUlVGQmQwVTdXVUZEZUVVc1owSkJRV2RDTEVkQlFVY3NVMEZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXgzUlVGQk1rSXNRMEZCUXl4RFFVRkRPMU5CUTJwRk8yRkJRVTBzU1VGQlNTeEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFVkJRVVU3V1VGRE9VSXNORVJCUVRSRU8xbEJRelZFTEdkQ1FVRm5RaXhIUVVGSExFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJRenRUUVVNMVF6dFJRVVZFTEd0RFFVRnJRenRSUVVOc1F5eEpRVUZKTEdkQ1FVRm5RaXhKUVVGSkxHMUNRVUZ0UWl4RFFVRkRMRWRCUVVjc1EwRkJReXhSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1JVRkJSVHRaUVVONFJTeHZSRUZCYjBRN1dVRkRjRVFzYzBKQlFYTkNMRWRCUVVjc1owSkJRV2RDTEVOQlFVTTdVMEZETjBNN1lVRkJUU3hKUVVGSkxFTkJRVU1zUTBGQlF5eG5Ra0ZCWjBJc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eEpRVUZKTEcxQ1FVRnRRaXhEUVVGRExFZEJRVWNzUTBGQlF5eE5RVUZOTEVsQlFVa3NRMEZCUXl4RlFVRkZPMWxCUTNaR0xIVkhRVUYxUnp0WlFVTjJSeXh6UWtGQmMwSXNSMEZCUnl4dFFrRkJiVUlzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1UwRkRka1E3VVVGRlJDeHpSRUZCYzBRN1VVRkRkRVFzU1VGQlNTeHpRa0ZCYzBJc1JVRkJSVHRaUVVONFFpeEpRVUZKTEVOQlFVTXNZMEZCWXl4SFFVRkhMRXRCUVVzc1EwRkJRenRaUVVNMVFpeEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFZEJRVWNzUTBGQlF5eERRVUZETzFsQlF6RkNMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zY1VKQlFYRkNMRU5CUXpkQ0xIZEZRVUV5UWl4RlFVTXpRaXh6UWtGQmMwSXNRMEZEZWtJc1EwRkJRenRUUVVOTU8yRkJRVTA3V1VGRFNDdzJRa0ZCTmtJN1dVRkROMElzZDBSQlFYZEVPMWxCUTNoRUxFbEJRVWtzWlVGQlpTeEZRVUZGTzJkQ1FVTnFRaXhKUVVGSkxFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1IwRkJSeXhqUVVGakxFVkJRVVU3YjBKQlEzaERMRFpDUVVFMlFqdHZRa0ZETjBJc1NVRkJTU3hEUVVGRExHTkJRV01zUjBGQlJ5eEpRVUZKTEVOQlFVTTdiMEpCUXpOQ0xFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSU3hEUVVGRE8yOUNRVU40UWl4VlFVRlZMRU5CUVVNc1IwRkJSeXhGUVVGRk8zZENRVU5hTEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eHRRa0ZCYlVJc1JVRkJSU3hEUVVGRE8yOUNRVU51UkN4RFFVRkRMRVZCUVVVc1kwRkJZeXhEUVVGRExFTkJRVU03YVVKQlEzUkNPM0ZDUVVGTk8yOUNRVU5JTEdkRlFVRm5SVHR2UWtGRGFFVXNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeEhRVUZITEVOQlFVTXNRMEZCUXp0dlFrRkRNVUlzU1VGQlNTeERRVUZETEdOQlFXTXNSMEZCUnl4TFFVRkxMRU5CUVVNN2IwSkJRelZDTEVsQlFVa3NRMEZCUXl4bFFVRmxMRWRCUVVjc1MwRkJTeXhEUVVGRE8ybENRVU5vUXp0aFFVTktPMU5CUTBvN1VVRkZSQ3c0UWtGQk9FSTdVVUZET1VJc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eGhRVUZoTEVOQlF6ZENMRWxCUVVrc2VVVkJRWGRDTEVOQlFVTTdXVUZEZWtJc2JVSkJRVzFDTzFsQlEyNUNMSE5DUVVGelFqdFpRVU4wUWl4blFrRkJaMEk3VTBGRGJrSXNRMEZCUXl4RFFVTk1MRU5CUVVNN1NVRkRUaXhEUVVGRE8wbEJSVVFzT0VKQlFUaENMRU5CUVVNc2QwSkJRV3RFTzFGQlF6ZEZMRTFCUVUwc1MwRkJTeXhIUVVGSExIZENRVUYzUWl4RFFVRkRMRXRCUVVzc1EwRkJRenRSUVVVM1F5d3dSRUZCTUVRN1VVRkRNVVFzU1VGQlNTeHRRa0ZCYlVJc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExIZEZRVUV5UWl4RFFVRkRMRU5CUVVNN1VVRkZjRVlzTmtaQlFUWkdPMUZCUXpkR0xFbEJRVWtzVjBGQlZ5eEhRVUZITEcxQ1FVRnRRaXhEUVVGRExGRkJRVkVzUTBGQlF6dFJRVU12UXl4dFFrRkJiVUlzUTBGQlF5eFJRVUZSTEVkQlFVY3NSMEZCUlN4RlFVRkZMRWRCUVVNc1EwRkJReXhEUVVGRE8xRkJSWFJETERaQ1FVRTJRanRSUVVNM1FpeEpRVUZKTEZsQlFWa3NSMEZCUnl4dFFrRkJiVUlzUTBGQlF5eFBRVUZQTEVOQlFVTTdVVUZETDBNc1MwRkJTeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRmxCUVZrc1EwRkJReXhOUVVGTkxFVkJRVVVzUlVGQlJTeERRVUZETEVWQlFVVTdXVUZETVVNc1NVRkJTU3haUVVGWkxFTkJRVU1zUTBGQlF5eERRVUZETEVsQlFVa3NTVUZCU1N4RFFVRkRMR2RDUVVGblFpeEZRVUZGTzJkQ1FVTXhReXhaUVVGWkxFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NTMEZCU3l4RFFVRkRPMmRDUVVONFFpeE5RVUZOTzJGQlExUTdVMEZEU2p0UlFVVkVMR3RDUVVGclFqdFJRVU5zUWl4dFFrRkJiVUlzUTBGQlF5eFBRVUZQTEVkQlFVY3NXVUZCV1N4RFFVRkRPMUZCUlRORExEUkNRVUUwUWp0UlFVTTFRaXh0UWtGQmJVSXNRMEZCUXl4UlFVRlJMRWRCUVVjc1MwRkJTeXhEUVVGRE8xRkJSWEpETEcxRFFVRnRRenRSUVVOdVF5eHRRa0ZCYlVJc1EwRkJReXhSUVVGUkxFZEJRVWNzVjBGQlZ5eERRVUZETzFGQlJUTkRMREpEUVVFeVF6dFJRVU16UXl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVkQlFVY3NkMEpCUVhkQ0xFTkJRVU1zUzBGQlN5eERRVUZETzFGQlJYWkVMSFZDUVVGMVFqdFJRVU4yUWl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExHRkJRV0VzUTBGRE4wSXNTVUZCU1N3NFJVRkJOa0lzUTBGQlF6dFpRVU01UWl4TFFVRkxPMU5CUTFJc1EwRkJReXhEUVVOTUxFTkJRVU03U1VGRFRpeERRVUZETzBsQlJVUTdPenRQUVVkSE8wbEJRMGdzYTBKQlFXdENMRU5CUVVNc1RVRkJjVUk3VVVGRGNFTXNkVVJCUVZVc1EwRkJReXhwUlVGQmIwSXNSVUZCUlN4RlFVRkZMR3RDUVVGclFpeE5RVUZOTEVOQlFVTXNSMEZCUnl4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRmRFVXNUVUZCVFN4VFFVRlRMRWRCUVRoQ08xbEJRM3BETEVkQlFVY3NSVUZCUlN4TlFVRk5MRU5CUVVNc1IwRkJSenRaUVVObUxFbEJRVWtzUlVGQlJTeFJRVUZSTzFOQlEycENMRU5CUVVNN1VVRkZSaXhKUVVGSkxFTkJRVU1zZDBKQlFYZENMRU5CUVVNc1lVRkJZU3hEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETzFGQlEzWkVMRWxCUVVrc1EwRkJReXd5UWtGQk1rSXNSVUZCUlN4RFFVRkRPMGxCUTNaRExFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3hwUWtGQmFVSXNRMEZCUXl4TFFVRnRRanRSUVVOcVF5eDFSRUZCVlN4RFFVRkRMR2xGUVVGdlFpeEZRVUZGTEVWQlFVVXNhVUpCUVdsQ0xFdEJRVXNzUTBGQlF5eEhRVUZITEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVWd1JTeEpRVUZKTEVOQlFVTXNWVUZCVlN4SFFVRkhMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF6dFJRVU5vUkN4SlFVRkpMRWxCUVVrc1EwRkJReXhWUVVGVkxFVkJRVVU3V1VGRGFrSXNaMFpCUVdkR08xbEJRMmhHTEVsQlFVa3NRMEZCUXl4M1FrRkJkMElzUTBGQlF5eGpRVUZqTEVkQlFVY3NSVUZCUlN4RFFVRkRPMU5CUTNKRU8xRkJSVVFzVFVGQlRTeFJRVUZSTEVkQlFUaENPMWxCUTNoRExFZEJRVWNzUlVGQlJTeExRVUZMTEVOQlFVTXNSMEZCUnp0WlFVTmtMRWxCUVVrc1JVRkJSU3hQUVVGUE8xTkJRMmhDTEVOQlFVTTdVVUZGUml4SlFVRkpMRU5CUVVNc2QwSkJRWGRDTEVOQlFVTXNXVUZCV1N4RFFVRkRMRkZCUVZFc1JVRkJSU3hKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdVVUZEYkVVc1NVRkJTU3hEUVVGRExESkNRVUV5UWl4RlFVRkZMRU5CUVVNN1NVRkRka01zUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxDdENRVUVyUWl4RFFVTXpRaXhaUVVGdlJEdFJRVVZ3UkN4TlFVRk5MRmRCUVZjc1IwRkJkVUk3V1VGRGNFTXNUMEZCVHl4RlFVRkZMRWxCUVVrN1dVRkRZaXhWUVVGVkxFVkJRVVVzU1VGQlNUdFpRVU5vUWl4RlFVRkZMRVZCUVVVc1dVRkJXU3hEUVVGRExGbEJRVms3VTBGRGFFTXNRMEZCUXp0UlFVVkdMRTFCUVUwc1kwRkJZeXhIUVVOb1FpeFpRVUZaTEVOQlFVTXNXVUZCV1N4SlFVRkpMRmxCUVZrc1EwRkJReXhaUVVGWkxFTkJRVU03VVVGRk0wUXNTVUZCU1N4RFFVRkRMRFpDUVVFMlFpeERRVUZETEdsQ1FVRnBRaXhEUVVOb1JDeEpRVUZKTEVOQlFVTXNkMEpCUVhkQ0xFTkJRVU1zWTBGQll5eEZRVU0xUXl4alFVRmpMRU5CUVVNc1EwRkJReXhEUVVGRExHdENRVUZyUWl4RFFVRkRMRU5CUVVNc1EwRkJReXhoUVVGaExFVkJRMjVFTEZkQlFWY3NRMEZEWkN4RFFVRkRPMUZCUlVZc1NVRkJTU3hqUVVGakxFVkJRVVU3V1VGRGFFSXNUVUZCVFN4WFFVRlhMRWRCUVhWQ08yZENRVU53UXl4UFFVRlBMRVZCUVVVc1NVRkJTVHRuUWtGRFlpeFZRVUZWTEVWQlFVVXNTVUZCU1R0blFrRkRhRUlzUlVGQlJTeEZRVUZGTEZsQlFWa3NRMEZCUXl4WlFVRlpPMkZCUTJoRExFTkJRVU03V1VGRlJpeEpRVUZKTEVOQlFVTXNlVUpCUVhsQ0xFTkJRVU1zYVVKQlFXbENMRU5CUXpWRExFbEJRVWtzUTBGQlF5eDNRa0ZCZDBJc1EwRkJReXhqUVVGakxFVkJRelZETEd0Q1FVRnJRaXhGUVVOc1FpeFhRVUZYTEVOQlEyUXNRMEZCUXp0WlFVTkdMRWxCUVVrc1EwRkJReXg1UWtGQmVVSXNRMEZCUXl4WlFVRlpMRWRCUVVjc1IwRkJSeXhGUVVGRkxFTkJReTlETEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5d3lRa0ZCTWtJc1JVRkJSU3hEUVVGRE8xbEJRek5FTEhWR1FVRjFSanRaUVVOMlJpeEpRVUZKTEVOQlFVTXNlVUpCUVhsQ0xFTkJRVU1zWlVGQlpTeEhRVUZITEVOQlF6ZERMRVZCUVdkQ0xFVkJRMnhDTEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETzFOQlEycERPMkZCUVUwN1dVRkRTQ3dyUlVGQkswVTdXVUZETDBVc1NVRkJTU3hEUVVGRExEWkNRVUUyUWl4RFFVRkRMR1ZCUVdVc1IwRkJSeXhEUVVOcVJDeEZRVUZuUWl4RlFVTnNRaXhGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRUUVVOcVF6dEpRVU5NTEVOQlFVTTdTVUZGUkN3eVFrRkJNa0k3VVVGRGRrSXNiVVJCUVcxRU8xRkJRMjVFTEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc2IwSkJRVzlDTEVWQlFVVXNRMEZCUXp0UlFVTXhReXgzUkVGQmQwUTdVVUZEZUVRc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eFpRVUZaTEVWQlFVVXNRMEZCUXp0UlFVVnVReXhKUVVGSkxFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1NVRkJTU3hKUVVGSkxFTkJRVU1zWjBKQlFXZENMRXRCUVVzc1UwRkJVeXhGUVVGRk8xbEJRemxFTEUxQlFVMHNRMEZCUXl4aFFVRmhMRU5CUVVNc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRU5CUVVNN1UwRkRMME03VVVGRlJDeEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFZEJRVWNzVFVGQlRTeERRVUZETEZkQlFWY3NRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1VVRkZlRVVzVFVGQlRUdFJRVU5PTEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMR0ZCUVdFc1EwRkJReXcyUkVGQlowSXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRka1VzU1VGQlNTeERRVUZETEhWQ1FVRjFRaXhEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNZVUZCWVN4RFFVRkRMR2RGUVVGdFFpeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTTNSU3hKUVVGSkxFTkJRVU1zYzBKQlFYTkNMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eGhRVUZoTEVOQlFVTXNLMFJCUVd0Q0xFTkJRVU1zUTBGQlF5eERRVUZETzBsQlF5OUZMRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU0N4clFrRkJhMElzUTBGQlF5eFpRVUZwUXp0UlFVTm9SQ3gxUkVGQlZTeERRVU5PTEdsRlFVRnZRaXhGUVVGRkxFVkJRM1JDTEdsRFFVRnBReXhGUVVOcVF5eERRVUZETEVOQlEwb3NRMEZCUXp0UlFVVkdMRTFCUVUwc1UwRkJVeXhIUVVGSExFbEJRVWtzWlVGQlpTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRPMUZCUTNCRUxFbEJRVWtzUTBGQlF5eDNRa0ZCZDBJc1EwRkJReXhYUVVGWExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTTdTVUZEZWtRc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMSE5DUVVGelFpeERRVUZETEZGQlFXMURPMUZCUTNSRUxIVkVRVUZWTEVOQlFVTXNhVVZCUVc5Q0xFVkJRVVVzUlVGQlJTeG5Ra0ZCWjBJc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU40UkN4SlFVRkpMRkZCUVZFc1EwRkJReXhUUVVGVExFbEJRVWtzVVVGQlVTeERRVUZETEZOQlFWTXNRMEZCUXl4VFFVRlRMRVZCUVVVN1dVRkRjRVFzU1VGQlNTeERRVUZETEcxQ1FVRnRRaXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRkZCUVZFc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF6dFRRVU5xUlR0SlFVTk1MRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU0N4cFFrRkJhVUlzUTBGQlF5eG5Ra0ZCY1VNN1VVRkRia1FzZFVSQlFWVXNRMEZEVGl4cFJVRkJiMElzUlVGQlJTeEZRVU4wUWl4dlJVRkJiMFVzUlVGRGNFVXNRMEZCUXl4RFFVTktMRU5CUVVNN1VVRkRSaXhKUVVGSkxFTkJRVU1zTmtKQlFUWkNMRU5CUVVNc1YwRkJWenRaUVVNeFF5eG5Ra0ZCWjBJc1EwRkJReXhQUVVGUExFTkJRVU03VVVGRE4wSXNlVVpCUVhsR08xRkJRM3BHTEVsQlFVa3NRMEZCUXl3MlFrRkJOa0lzUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSU3hEUVVGRE8xRkJRM1JFTEVsQlFVa3NRMEZCUXl3MlFrRkJOa0lzUTBGQlF5eGxRVUZsTEVkQlFVY3NRMEZEYWtRc1JVRkJOa0lzUlVGREwwSXNSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdTVUZEYkVNc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMSEZDUVVGeFFpeERRVUZETEV0QlFXZERPMUZCUTJ4RUxIVkVRVUZWTEVOQlEwNHNhVVZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNhVU5CUVdsRExFVkJRMnBETEVOQlFVTXNRMEZEU2l4RFFVRkRPMUZCUlVZc1RVRkJUU3hYUVVGWExFZEJRWGxDTzFsQlEzUkRMR0ZCUVdFc1JVRkJSU3hKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4elFrRkJjMElzUTBGQlF5d3JSVUZCYTBNc1EwRkJRenRaUVVNMVJpeGhRVUZoTEVWQlFVVXNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zYzBKQlFYTkNMRU5CUVVNc0swVkJRV3RETEVOQlFVTTdVMEZETDBZc1EwRkJRenRSUVVWR0xFbEJRVWtzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhsUVVGbExFTkJRVU1zUzBGQlN5eEZRVUZGTEZkQlFWY3NRMEZCUXl4RFFVRkRPMGxCUTJwRkxFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3h6UWtGQmMwSXNRMEZCUXl4TlFVRnBRenRSUVVOd1JDeDFSRUZCVlN4RFFVTk9MR2xGUVVGdlFpeEZRVUZGTEVWQlEzUkNMR3REUVVGclF5eEZRVU5zUXl4RFFVRkRMRU5CUTBvc1EwRkJRenRSUVVWR0xFMUJRVTBzVjBGQlZ5eEhRVUV3UWp0WlFVTjJReXhoUVVGaExFVkJRVVVzU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc2MwSkJRWE5DTEVOQlFVTXNLMFZCUVd0RExFTkJRVU03V1VGRE5VWXNZVUZCWVN4RlFVRkZMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEhOQ1FVRnpRaXhEUVVGRExDdEZRVUZyUXl4RFFVRkRPMU5CUXk5R0xFTkJRVU03VVVGRlJpeEpRVUZKTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1RVRkJUU3hGUVVGRkxGZEJRVmNzUTBGQlF5eERRVUZETzFGQlJTOUVMRWxCUVVrc1NVRkJTU3hEUVVGRExGVkJRVlVzUlVGQlJUdFpRVU5xUWl4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNORUpCUVRSQ0xFVkJRVVVzUTBGQlF6dFRRVU16UkR0SlFVTk1MRU5CUVVNN1NVRkZSRHM3VDBGRlJ6dEpRVU5JTEhkQ1FVRjNRanRSUVVOd1FpeDFSa0ZCZFVZN1VVRkRka1lzU1VGQlNTeERRVUZETERSQ1FVRTBRaXhIUVVGSExFbEJRVWtzUTBGQlF5eFhRVUZYTzJGQlF5OURMSEZDUVVGeFFpeEZRVUZGTzJGQlEzWkNMSEZDUVVGeFFpeEZRVUZGTEVOQlFVTTdVVUZETjBJc1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRMSGxDUVVGNVFpeEZRVUZGTEVOQlFVTTdVVUZEY2tRc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRmRCUVZjc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF6dEpRVU53UkN4RFFVRkRPMGxCUlVRN08wOUJSVWM3U1VGRFNDeHZRa0ZCYjBJc1EwRkJReXhQUVVGbE96dFJRVU5vUXl4blJrRkJaMFk3VVVGRGFFWXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1IwRkJSeXhKUVVGSkxFTkJRVU03VVVGRE1VSXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1IwRkJSeXhMUVVGTExFTkJRVU03VVVGRE4wSXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeEhRVUZITEU5QlFVOHNRMEZCUXp0UlFVTnFReXhWUVVGSkxFTkJRVU1zYlVKQlFXMUNMREJEUVVGRkxFdEJRVXNzUlVGQlJTeERRVUZETzBsQlEzUkRMRU5CUVVNN1NVRkZSRHM3VDBGRlJ6dEpRVU5JTEcxQ1FVRnRRanM3VVVGRFppeFZRVUZKTEVOQlFVTXNkMEpCUVhkQ0xEQkRRVUZGTEV0QlFVc3NSVUZCUlN4RFFVRkRPMGxCUXpORExFTkJRVU03U1VGRlJEczdUMEZGUnp0SlFVTklMRXRCUVVzN1VVRkRSQ3hKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03VVVGRE9VSXNTVUZCU1N4RFFVRkRMRzFDUVVGdFFpeEZRVUZGTEVOQlFVTTdTVUZETDBJc1EwRkJRenRKUVVWRU96dFBRVVZITzBsQlEwZ3NVVUZCVVR0UlFVTktMRWxCUVVrc1EwRkJReXgzUWtGQmQwSXNRMEZCUXl4aFFVRmhMRVZCUVVVc1EwRkJRenRKUVVOc1JDeERRVUZETzBsQlJVUTdPMDlCUlVjN1NVRkRTQ3hsUVVGbE8xRkJRMWdzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhIUVVGSExFbEJRVWtzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXp0UlFVVnVReXhKUVVGSkxFTkJRVU1zZFVKQlFYVkNMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNSMEZCUnl4RFFVTXZReXhoUVVGaExFTkJRMmhDTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRE8yZENRVU5rTEZOQlFWTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1owSkJRV2RDTzJGQlEyNURMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRFZDeERRVUZETzBsQlJVUTdPMDlCUlVjN1NVRkRTQ3d3UWtGQk1FSXNRMEZCUXl4VlFVRjVRenRSUVVOb1JTeEpRVUZKTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1IwRkJSeXhEUVVNdlF5eDNRa0ZCZDBJc1EwRkRNMElzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBsQlEzQkRMRU5CUVVNN1NVRkZSRHM3T3pzN096czdUMEZSUnp0SlFVTklMR2RDUVVGblFpeERRVUZETEV0QlFXRTdVVUZETVVJc2RVUkJRVlVzUTBGQlF5eHBSVUZCYjBJc1JVRkJSU3hGUVVGRkxGTkJRVk1zUzBGQlN5eEpRVUZKTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkZNVVFzU1VGQlNTeExRVUZMTEVsQlFVa3NTVUZCU1N4RlFVRkZPMWxCUTJZc1NVRkJTU3hEUVVGRExIVkNRVUYxUWl4RFFVRkRMR3RDUVVGclFpeERRVUZETEVkQlFVY3NRMEZETDBNc1UwRkJVeXhEUVVOYUxFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRPMjlDUVVOa0xHVkJRV1VzUlVGQlJTeExRVUZMTzJsQ1FVTjZRaXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFOQlExSTdTVUZEVEN4RFFVRkRPMGxCUlVRN096czdPenM3TzA5QlVVYzdTVUZEUml4blFrRkJaMElzUTBGQlF5eExRVUZoTzFGQlF6TkNMSFZFUVVGVkxFTkJRVU1zYVVWQlFXOUNMRVZCUVVVc1JVRkJSU3hUUVVGVExFdEJRVXNzU1VGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUlRGRUxFbEJRVWtzUzBGQlN5eEpRVUZKTEVsQlFVa3NSVUZCUlR0WlFVTm1MRWxCUVVrc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eEhRVUZITEVOQlF5OURMRk5CUVZNc1EwRkRXaXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXp0dlFrRkRaQ3hsUVVGbExFVkJRVVVzUzBGQlN6dHBRa0ZEZWtJc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFRRVU5TTzBsQlEwd3NRMEZCUXp0SlFVVkVPenM3T3p0UFFVdEhPMGxCUTBnc2IwSkJRVzlDTEVOQlFVTXNWVUZCYTBJN1VVRkRia01zZFVSQlFWVXNRMEZCUXl4cFJVRkJiMElzUlVGQlJTeEZRVUZGTEhOQ1FVRnpRaXhWUVVGVkxFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTXhSU3hKUVVGSkxGVkJRVlVzU1VGQlNTeEpRVUZKTEVWQlFVVTdXVUZEY0VJc1NVRkJTU3hEUVVGRExIVkNRVUYxUWl4RFFVRkRMR3RDUVVGclFpeERRVUZETEVkQlFVY3NRMEZETDBNc1UwRkJVeXhEUVVOYUxFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRPMjlDUVVOa0xHMUNRVUZ0UWl4RlFVRkZMRlZCUVZVN2FVSkJRMnhETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1UwRkRVanRKUVVOTUxFTkJRVU03U1VGRlJEczdPenM3VDBGTFJ6dEpRVU5HTEc5Q1FVRnZRaXhEUVVGRExGVkJRV3RDTzFGQlEzQkRMSFZFUVVGVkxFTkJRVU1zYVVWQlFXOUNMRVZCUVVVc1JVRkJSU3h6UWtGQmMwSXNWVUZCVlN4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRE1VVXNTVUZCU1N4VlFVRlZMRWxCUVVrc1NVRkJTU3hGUVVGRk8xbEJRM0JDTEVsQlFVa3NRMEZCUXl4MVFrRkJkVUlzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhIUVVGSExFTkJReTlETEZOQlFWTXNRMEZEV2l4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF6dHZRa0ZEWkN4dFFrRkJiVUlzUlVGQlJTeFZRVUZWTzJsQ1FVTnNReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFOQlExSTdTVUZEVEN4RFFVRkRPMGxCUlVRN096czdPMDlCUzBjN1NVRkRSaXhoUVVGaExFTkJRVU1zUjBGQlZ6dFJRVU4wUWl4MVJFRkJWU3hEUVVGRExHbEZRVUZ2UWl4RlFVRkZMRVZCUVVVc1kwRkJZeXhIUVVGSExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTXpSQ3hKUVVGSkxFZEJRVWNzU1VGQlNTeEpRVUZKTEVWQlFVVTdXVUZEWWl4SlFVRkpMRU5CUVVNc2RVSkJRWFZDTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUjBGQlJ5eERRVU12UXl4VFFVRlRMRU5CUTFvc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNSVUZCUXl4WlFVRlpMRVZCUVVVc1IwRkJSeXhGUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdXVUZGZWtNc05FTkJRVFJETzFsQlF6VkRMRWxCUVVrc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eEhRVUZITEVOQlF5OURMRk5CUVZNc1EwRkRXaXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4RlFVRkRMR1ZCUVdVc1JVRkJSU3hIUVVGSExFVkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0VFFVTXZRenRKUVVOTUxFTkJRVU03U1VGRlJEczdUMEZGUnp0SlFVTklMRmRCUVZjN1VVRkRVQ3gxUkVGQlZTeERRVU5PTEdsRlFVRnZRaXhGUVVGRkxFVkJRM1JDTEhWRFFVRjFReXhGUVVOMlF5eERRVUZETEVOQlEwb3NRMEZCUXp0UlFVVkdMRWxCUVVrc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eEhRVUZITEVOQlF5OURMRk5CUVZNc1EwRkRXaXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4RlFVRkZMRlZCUVZVc1JVRkJSU3hGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTTFReXhEUVVGRE8wbEJSVVE3TzA5QlJVYzdTVUZEU0N4cFFrRkJhVUk3VVVGRFlpeDFSRUZCVlN4RFFVTk9MR2xGUVVGdlFpeEZRVUZGTEVWQlEzUkNMRFJEUVVFMFF5eEZRVU0xUXl4RFFVRkRMRU5CUTBvc1EwRkJRenRSUVVOR0xFbEJRVWtzUTBGQlF5eDFRa0ZCZFVJc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1pVRkJaU3hEUVVGRExFVkJRVVVzUTBGQlF6dEpRVU16UlN4RFFVRkRPMGxCUlVRN08wOUJSVWM3U1VGRFNDeHBRa0ZCYVVJc1EwRkJReXhWUVVFeVFqdFJRVU42UXl4MVJFRkJWU3hEUVVOT0xHbEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xHOUVRVUZ2UkN4RlFVTndSQ3hEUVVGRExFTkJRMG9zUTBGQlF6dFJRVVZHTEVsQlFVa3NRMEZCUXl4MVFrRkJkVUlzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhIUVVGSExFTkJReTlETEdWQlFXVXNRMEZEYkVJc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRM0JETEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxGZEJRVmNzUTBGQlF5eFZRVUZyUWp0UlFVTXhRaXgxUkVGQlZTeERRVU5PTEdsRlFVRnZRaXhGUVVGRkxFVkJRM1JDTERoRFFVRTRReXhGUVVNNVF5eERRVUZETEVOQlEwb3NRMEZCUXp0UlFVVkdMRWxCUVVrc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eEhRVUZITEVOQlF5OURMRk5CUVZNc1EwRkRXaXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRGNFTXNRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGdzYTBKQlFXdENMRU5CUVVNc1QwRkJaVHRSUVVNNVFpeDFSRUZCVlN4RFFVTk9MR2xGUVVGdlFpeEZRVUZGTEVWQlEzUkNMRFpFUVVFMlJDeEZRVU0zUkN4RFFVRkRMRU5CUTBvc1EwRkJRenRSUVVWR0xFbEJRVWtzUTBGQlF5eDFRa0ZCZFVJc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4SFFVRkhMRU5CUXk5RExGTkJRVk1zUTBGRFdpeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJRenRuUWtGRFpDeGpRVUZqTEVWQlFVVXNUMEZCVHp0aFFVTXhRaXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBsQlExUXNRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGdzYTBOQlFXdERPMUZCUXpsQ0xIVkVRVUZWTEVOQlEwNHNhVVZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNhVVJCUVdsRUxFVkJRMnBFTEVOQlFVTXNRMEZEU2l4RFFVRkRPMUZCUTBZc1NVRkJTU3hEUVVGRExEUkNRVUUwUWl4RFFVRkRMSGxDUVVGNVFpeEZRVUZGTEVOQlFVTTdTVUZEYkVVc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMSFZDUVVGMVFpeERRVUZETEU5QlFXOUNPMUZCUTNoRExIVkVRVUZWTEVOQlEwNHNhVVZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNNa05CUVRKRExFVkJRek5ETEVOQlFVTXNRMEZEU2l4RFFVRkRPMUZCUTBZc1RVRkJUU3hsUVVGbExFZEJRVWNzU1VGQlNTeFhRVUZYTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVOd1JDeFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVOdVFpeERRVUZETzFGQlEwWXNUVUZCVFN4clFrRkJhMElzUjBGQmRVSXNTVUZCU1N4blJrRkJhMElzUlVGQlJTeERRVUZETzFGQlEzaEZMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zYTBKQlFXdENMRVZCUVVVc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eGxRVUZsTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUXk5RUxHdENRVUZyUWl4RFFVRkRMR0ZCUVdFc1JVRkJSU3hEUVVGRE8xRkJSVzVETEd0Q1FVRnJRaXhEUVVGRExHVkJRV1VzUjBGQlJ5eEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU03VVVGRE0wUXNhMEpCUVd0Q0xFTkJRVU1zYjBKQlFXOUNMRWRCUVVjc1NVRkJTU3hEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETzFGQlJYSkVMR3RDUVVGclFpeERRVUZETEhOQ1FVRnpRaXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVU14UXl4clFrRkJhMElzUTBGQlF5eHZRa0ZCYjBJN1dVRkRka01zYTBKQlFXdENMRU5CUVVNc1pVRkJaU3hEUVVOeVF5eERRVUZETzFGQlEwWXNhMEpCUVd0Q0xFTkJRVU1zV1VGQldTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVTm9ReXhyUWtGQmEwSXNRMEZCUXl4clFrRkJhMEk3V1VGRGNrTXNhMEpCUVd0Q0xFTkJRVU1zWVVGQllTeERRVU51UXl4RFFVRkRPMUZCUTBZc2EwSkJRV3RDTEVOQlFVTXNZMEZCWXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVOc1F5eHJRa0ZCYTBJc1EwRkJReXh6UWtGQmMwSTdXVUZEZWtNc2EwSkJRV3RDTEVOQlFVTXNXVUZCV1N4RFFVTnNReXhEUVVGRE8xRkJSVVlzU1VGRFNTeHJRa0ZCYTBJc1EwRkJReXgxUWtGQmRVSTdXVUZETVVNc2EwSkJRV3RDTEVOQlFVTXNiMEpCUVc5Q0xFVkJRM3BETzFsQlEwVXNhMEpCUVd0Q0xFTkJRVU1zWlVGQlpUdG5Ra0ZET1VJc1EwRkJReXhEUVVGRExFTkJRVU1zYTBKQlFXdENMRU5CUVVNc2RVSkJRWFZDTzI5Q1FVTjZReXhyUWtGQmEwSXNRMEZCUXl4alFVRmpPMjlDUVVOeVF5eERRVUZETEd0Q1FVRnJRaXhEUVVGRExHVkJRV1VzUTBGQlF5eERRVUZETzFOQlF6VkRPMUZCUTBRc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4RFFVRkRPMGxCUTJwRkxFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3h2UTBGQmIwTXNRMEZCUXl4UFFVRnZRanRSUVVOeVJDeDFSRUZCVlN4RFFVTk9MR2xGUVVGdlFpeEZRVUZGTEVWQlEzUkNMREJFUVVFd1JDeEZRVU14UkN4RFFVRkRMRU5CUTBvc1EwRkJRenRSUVVOR0xFMUJRVTBzWjBKQlFXZENMRWRCUVVjc1NVRkJTU3hYUVVGWExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNUVUZCVFN4RFFVTnlSQ3hQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVTnVRaXhEUVVGRE8xRkJRMFlzVFVGQlRTeHRRa0ZCYlVJc1IwRkJiVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eERRVUZETzFGQlEzcEdMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zYVVOQlFXbERMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNRMEZCUXp0SlFVTXZSU3hEUVVGRE8wbEJSVVE3T3p0UFFVZEhPMGxCUTBnc2NVSkJRWEZDTEVOQlFVTXNUMEZCYjBJN1VVRkRkRU1zZFVSQlFWVXNRMEZEVGl4cFJVRkJiMElzUlVGQlJTeEZRVU4wUWl3clEwRkJLME1zUlVGREwwTXNRMEZCUXl4RFFVTktMRU5CUVVNN1VVRkRSaXhOUVVGTkxHVkJRV1VzUjBGQlJ5eEpRVUZKTEZkQlFWY3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRM0JFTEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRMjVDTEVOQlFVTTdVVUZEUml4TlFVRk5MSEZDUVVGeFFpeEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1pVRkJaU3hEUVVGRExFTkJRVU03VVVGRk1VUXNUVUZCVFN4bFFVRmxMRWRCUVc5Q0xFbEJRVWtzTUVWQlFXVXNSVUZCUlN4RFFVRkRPMUZCUlM5RUxFbEJRVWtzY1VKQlFYRkNMRU5CUVVNc1QwRkJUeXhGUVVGRk8xbEJReTlDTEdWQlFXVXNRMEZCUXl4bFFVRmxMRWRCUVVjc2NVSkJRWEZDTEVOQlFVTXNUMEZCVHl4RFFVRkRPMU5CUTI1Rk8xRkJSVVFzU1VGQlNTeHhRa0ZCY1VJc1EwRkJReXhOUVVGTkxFVkJRVVU3V1VGRE9VSXNaVUZCWlN4RFFVRkRMR05CUVdNc1IwRkJSeXh4UWtGQmNVSXNRMEZCUXl4TlFVRk5MRU5CUVVNN1UwRkRha1U3VVVGRlJDeEpRVUZKTEhGQ1FVRnhRaXhEUVVGRExHTkJRV01zUlVGQlJUdFpRVU4wUXl4bFFVRmxMRU5CUVVNc2MwSkJRWE5DTzJkQ1FVTnNReXh4UWtGQmNVSXNRMEZCUXl4alFVRmpMRU5CUVVNN1UwRkROVU03VVVGRlJDeEpRVUZKTEhGQ1FVRnhRaXhEUVVGRExHRkJRV0VzU1VGQlNTeHhRa0ZCY1VJc1EwRkJReXhoUVVGaExFTkJRVU1zWTBGQll5eExRVUZMTEZOQlFWTXNSVUZCUlR0WlFVTjZSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEdOQlFXTXNRMEZEZEVJc2IwVkJRWFZDTEVWQlEzWkNMRU5CUVVNc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4aFFVRmhMRU5CUVVNc1kwRkJZeXhEUVVOMlJDeERRVUZETzFOQlEwdzdVVUZGUkN4bFFVRmxMRU5CUVVNc1dVRkJXU3hGUVVGRkxFTkJRVU03VVVGREwwSXNkVVJCUVZVc1EwRkJReXhwUlVGQmIwSXNSVUZCUlN4RlFVRkZMR1ZCUVdVc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVVYyUkN4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExHdENRVUZyUWl4RFFVRkRMR1ZCUVdVc1EwRkJReXhEUVVGRE8wbEJRelZFTEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNDeDFRa0ZCZFVJc1EwRkJReXhQUVVGdlFqdFJRVU40UXl4MVJFRkJWU3hEUVVOT0xHbEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xHbEVRVUZwUkN4RlFVTnFSQ3hEUVVGRExFTkJRMG9zUTBGQlF6dFJRVU5HTEUxQlFVMHNTMEZCU3l4SFFVRkhMRTFCUVUwc1EwRkRhRUlzU1VGQlNTeFhRVUZYTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkRja1FzUTBGQlF6dFJRVU5HTEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0SlFVTnlReXhEUVVGRE8wbEJSVVE3TzA5QlJVYzdTVUZEU0N4elFrRkJjMEk3VVVGRGJFSXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXh0UWtGQmJVSXNSVUZCUlN4RFFVRkRPMUZCUlRGRExIVkVRVUYxUkR0UlFVTjJSQ3hKUVVGSkxFTkJRVU1zSzBKQlFTdENMRVZCUVVVc1EwRkJRenRSUVVOMlF5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFVkJRVVVzUTBGQlF6dFJRVU42UWl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExIRkNRVUZ4UWl4RlFVRkZMRU5CUVVNN1NVRkROME1zUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxIbENRVUY1UWl4RFFVRkRMRTlCUVc5Q08xRkJRekZETEUxQlFVMHNTVUZCU1N4SFFVRkhMRWxCUVVrc1ZVRkJWU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETzFGQlEzSkRMSFZFUVVGVkxFTkJRMDRzYVVWQlFXOUNMRVZCUVVVc1JVRkRkRUlzZFVSQlFYVkVMRVZCUTNaRUxFTkJRVU1zUTBGRFNpeERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMRzFDUVVGdFFpeEhRVUZITEVsQlFVa3NUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkRPMUZCUXpGRUxIVkVRVUZWTEVOQlEwNHNhVVZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNPRVJCUVRoRUxFbEJRVWtzUTBGQlF5eHRRa0ZCYlVJc1JVRkJSU3hEUVVNelJpeERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXd3UWtGQk1FSXNRMEZETVVNc1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4RFFVTXpRaXhEUVVGRE8wbEJRMDRzUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxHZENRVUZuUWl4RFFVRkRMRXRCUVhOQ08xRkJRMjVETEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1lVRkJZU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzBsQlF6ZERMRU5CUVVNN1NVRkZSRHM3VDBGRlJ6dEpRVU5JTEdsQ1FVRnBRanRSUVVOaUxFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNhVUpCUVdsQ0xFVkJRVVVzUTBGQlF6dEpRVU42UXl4RFFVRkRPMGxCUlVRc2FVSkJRV2xDTEVOQlFVTXNTMEZCWVR0UlFVTXpRaXhKUVVGSkxFTkJRVU1zWTBGQll5eEhRVUZITEV0QlFVc3NRMEZCUXp0UlFVTTFRaXhKUVVGSkxFbEJRVWtzUTBGQlF5eDNRa0ZCZDBJc1JVRkJSVHRaUVVNdlFpeEpRVUZKTEVOQlFVTXNkMEpCUVhkQ0xFTkJRVU1zWTBGQll5eEhRVUZITEV0QlFVc3NRMEZCUXp0WlFVTnlSQ3hKUVVGSkxFTkJRVU1zZDBKQlFYZENMRU5CUVVNc2IwSkJRVzlDTEVkQlFVY3NTMEZCU3l4RFFVRkRPMU5CUXpsRU8wbEJRMHdzUTBGQlF6dEpRVVZFTEc5Q1FVRnZRaXhEUVVGRExFdEJRV0U3VVVGRE9VSXNTVUZCU1N4RFFVRkRMRlZCUVZVc1IwRkJSeXhMUVVGTExFTkJRVU03VVVGRGVFSXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU03U1VGRE9VUXNRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGdzZFVKQlFYVkNMRU5CUVVNc1UwRkJhMEk3TzFGQlEzUkRMRlZCUVVrc1EwRkJReXhyUWtGQmEwSXNNRU5CUVVVc2QwSkJRWGRDTEVWQlFVVXNRMEZCUXp0UlFVTndSQ3hKUVVGSkxGTkJRVk1zUlVGQlJUdFpRVU5ZTEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUjBGQlJ5eEpRVUZKTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zWjBKQlFXZENMRU5CUXk5RUxFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlEyUXNRMEZCUXp0VFFVTk1PMGxCUTB3c1EwRkJRenRKUVVWRU96dFBRVVZITzBsQlEwZ3NiMEpCUVc5Q0xFTkJRVU1zVTBGQmEwSTdPMUZCUTI1RExGVkJRVWtzUTBGQlF5eGxRVUZsTERCRFFVRkZMSEZDUVVGeFFpeEZRVUZGTEVOQlFVTTdVVUZET1VNc1NVRkJTU3hUUVVGVExFVkJRVVU3V1VGRFdDeE5RVUZOTEZOQlFWTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExHRkJRV0VzUTBGQlF5eHZSVUZCZFVJc1EwRkJRenRuUWtGRGNFVXNRMEZCUXl4RFFVRkRMRFJGUVVFclFqdG5Ra0ZEYWtNc1EwRkJReXhEUVVGRExEQkZRVUUyUWl4RFFVRkRPMWxCUTJoRExFbEJRVWtzUTBGQlF5eGxRVUZsTzJkQ1FVTndRaXhKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc1lVRkJZU3hEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETzFOQlEzSkVPMGxCUTB3c1EwRkJRenRKUVVWRU96dFBRVVZITzBsQlEwZ3NiMEpCUVc5Q0xFTkJRVU1zVTBGQmEwSTdPMUZCUTI1RExGVkJRVWtzUTBGQlF5eGxRVUZsTERCRFFVRkZMSEZDUVVGeFFpeEZRVUZGTEVOQlFVTTdVVUZET1VNc1NVRkJTU3hUUVVGVExFVkJRVVU3V1VGRFdDeEpRVUZKTEVOQlFVTXNaVUZCWlN4SFFVRkhMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4aFFVRmhMRU5CUTNwRUxFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNZVUZCWVN4RFFVRkRMSFZGUVVFd1FpeERRVUZETEVWQlEzSkVMRWxCUVVrc1EwRkJReXcwUWtGQk5FSXNRMEZEY0VNc1EwRkJRenRUUVVOTU8wbEJRMHdzUTBGQlF6dEpRVVZFT3p0UFFVVkhPMGxCUTBnc2MwSkJRWE5DTEVOQlFVTXNVMEZCYTBJN08xRkJRM0pETEZWQlFVa3NRMEZCUXl4cFFrRkJhVUlzTUVOQlFVVXNkVUpCUVhWQ0xFVkJRVVVzUTBGQlF6dFJRVU5zUkN4SlFVRkpMRk5CUVZNc1JVRkJSVHRaUVVOWUxFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1IwRkJSeXhKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc1pVRkJaU3hGUVVGRkxFTkJRVU03V1VGRGNFVXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEd0Q1FVRnJRaXhIUVVGSExFZEJRVWNzUlVGQlJUdG5Ra0ZETjBNc1NVRkJTU3hEUVVGRExIVkNRVUYxUWl4RFFVRkRMR3RDUVVGclFpeERRVUZETEVkQlFVY3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eEZRVUZGTEVOQlFVTTdXVUZET1VVc1EwRkJRenRaUVVORUxFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXh4UWtGQmNVSXNSMEZCUnl4RFFVRkRMR0ZCUVhGQ0xFVkJRVVVzUlVGQlJUdG5Ra0ZEY2tVc1NVRkJTU3hEUVVGRExIVkNRVUYxUWl4RFFVRkRMR3RDUVVGclFpeERRVUZETEVkQlFVY3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eERRVUZETEVOQlFVTXNZVUZCWVN4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOb1J5eERRVUZETzFOQlEwbzdTVUZEVEN4RFFVRkRPMGxCUlVRc1owTkJRV2RETEVOQlFVTXNWMEZCYTBNN1VVRkRMMFFzVjBGQlZ5eERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUlVGQlJTeERRVU5zUXl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExHRkJRV0VzUTBGRE4wSXNTVUZCU1N4eFJVRkJiMElzUTBGQlF5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1EwRkJReXhEUVVNM1F5eERRVUZETzFGQlEwNHNWMEZCVnl4RFFVRkRMRTlCUVU4c1IwRkJSeXhEUVVGRExFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNSVUZCUlN4RFFVTnVReXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEdGQlFXRXNRMEZETjBJc1NVRkJTU3h6UlVGQmNVSXNRMEZCUXl4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUTBGQlF5eERRVU01UXl4RFFVRkRPMUZCUTA0c1YwRkJWeXhEUVVGRExFOUJRVThzUjBGQlJ5eERRVUZETEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1JVRkJSU3hEUVVOdVF5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMR0ZCUVdFc1EwRkROMElzU1VGQlNTeHpSVUZCY1VJc1EwRkJReXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNRMEZCUXl4RFFVTTVReXhEUVVGRE8wbEJRMVlzUTBGQlF6dEpRVVZOTEhOQ1FVRnpRaXhEUVVGRExFbEJRVmtzUlVGQlJTeFRRVUV5UWl4RlFVRkZMRTlCUVRoRU8xRkJRMjVKTEVsQlFVY3NVMEZCVXl4TFFVRkxMSEZIUVVFMlFpeEpRVUZKTEU5QlFVOHNUMEZCVHl4TFFVRkxMRmRCUVZjc1JVRkJSVHRaUVVNNVJTd3lSRUZCWXl4RFFVTldMR2xGUVVGdlFpeEZRVUZGTEVWQlEzUkNMR3REUVVGclF5eEpRVUZKTERKQ1FVRXlRaXhEUVVOd1JTeERRVUZETzFOQlEwdzdVVUZIUkN4SlFVRkpMRU5CUVVNc2RVSkJRWFZDTEVOQlFVTXNjMEpCUVhOQ0xFTkJReTlETEZOQlFWTXNSVUZEVkN4SlFVRkpMRVZCUTBvc1EwRkJReXhKUVVFMFFpeEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRMRTlCUVU4c1QwRkJUeXhMUVVGTExGZEJRVmNzU1VGQlNTeFRRVUZUTEV0QlFVc3NiVWRCUVRKQ0xFTkJRVU1zUTBGQlF5eERRVUZETzFsQlF6ZEhMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4eFFrRkJjVUlzUTBGRE5VTXNTVUZCU1N4RlFVTktMRWxCUVVrc1EwRkRVQ3hEUVVGRExFTkJRVU03V1VGRFNDeFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUTNCQ0xFTkJRVU03U1VGRFRpeERRVUZETzBOQlEwbzdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRibTlGUkN4clJFRkJhMFE3UVVGRmJFUTdPMGRCUlVjN1FVRkRTQ3hKUVVGWkxHZENRVmRZTzBGQldFUXNWMEZCV1N4blFrRkJaMEk3U1VGRGVFSXNjVU5CUVdsQ08wbEJRMnBDTEd0RVFVRTRRanRKUVVNNVFpdzJSRUZCZVVNN1NVRkRla01zWjBSQlFUUkNPMGxCUXpWQ0xHMURRVUZsTzBsQlEyWXNjVU5CUVdsQ08wbEJRMnBDTEd0RVFVRTRRanRKUVVNNVFpd3lSRUZCZFVNN1NVRkRka01zYVVOQlFXRTdTVUZEWWl4MVEwRkJiVUk3UVVGRGRrSXNRMEZCUXl4RlFWaFhMR2RDUVVGblFpeExRVUZvUWl4blFrRkJaMElzVVVGWE0wSTdRVUZGUkRzN1IwRkZSenRCUVVOSkxFMUJRVTBzVjBGQlZ6dERRVWQyUWp0QlFVVkVPenRIUVVWSE8wRkJRMGtzVFVGQlRTeHRRa0ZCYjBJc1UwRkJVU3hYUVVGWE8wTkJRVWM3UVVGRmRrUTdPMGRCUlVjN1FVRkRTU3hOUVVGTkxHRkJRV01zVTBGQlVTeFhRVUZYTzBOQlJUZERPMEZCUlVRN08wZEJSVWM3UVVGRFNTeE5RVUZOTEcxQ1FVRnZRaXhUUVVGUkxGZEJRVmM3UTBGRmJrUTdRVUZGUkRzN1IwRkZSenRCUVVOSkxFMUJRVTBzZDBKQlFYbENMRk5CUVZFc1YwRkJWenREUVVWNFJEdEJRVVZFT3p0SFFVVkhPMEZCUTBrc1RVRkJUU3hyUWtGQmJVSXNVMEZCVVN4WFFVRlhPME5CUld4RU8wRkJSVVE3TzBkQlJVYzdRVUZEU1N4TlFVRk5MR0ZCUVdNc1UwRkJVU3hYUVVGWE8wTkJSVGRETzBGQlJVUTdPMGRCUlVjN1FVRkRTU3hOUVVGTkxGbEJRV0VzVTBGQlVTeFhRVUZYTzBOQlNUVkRPMEZCUlVRN08wZEJSVWM3UVVGRFNTeE5RVUZOTEcxQ1FVRnZRaXhUUVVGUkxGZEJRVmM3UTBGRmJrUTdRVUZGUkRzN1IwRkZSenRCUVVOSkxFMUJRVTBzZFVKQlFYZENMRk5CUVZFc1YwRkJWenREUVVsMlJEdEJRVVZOTEUxQlFVMHNkVUpCUVhWQ08wTkJTMjVET3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTJoSFJDeHJSRUZCYTBRN1FVRkZVanRCUVVVeFF6czdSMEZGUnp0QlFVTklMRWxCUVZrc1owSkJWVmc3UVVGV1JDeFhRVUZaTEdkQ1FVRm5RanRKUVVONFFpeHZSRUZCWjBNN1NVRkRhRU1zTWtOQlFYVkNPMGxCUTNaQ0xDdERRVUV5UWp0SlFVTXpRaXhyUkVGQk9FSTdTVUZET1VJc2JVTkJRV1U3U1VGRFppeHhRMEZCYVVJN1NVRkRha0lzTmtSQlFYbERPMGxCUTNwRExIRkZRVUZwUkR0SlFVTnFSQ3hwUTBGQllUdEJRVU5xUWl4RFFVRkRMRVZCVmxjc1owSkJRV2RDTEV0QlFXaENMR2RDUVVGblFpeFJRVlV6UWp0QlFVVkVPenRIUVVWSE8wRkJRMGtzVFVGQlRTeFhRVUZYTzBsQlNYQkNPenM3T3pzN096czdUMEZUUnp0SlFVTklMRlZCUVZVc1EwRkJReXhIUVVGWExFVkJRVVVzUzBGQlZUdFJRVU01UWl4UFFVRlBMRXRCUVVzc1EwRkJRenRKUVVOcVFpeERRVUZETzBsQlJVUTdPenRQUVVkSE8wbEJRMGdzVDBGQlR6dFJRVU5JTEhORVFVRlZMRU5CUTA0c1owVkJRVzlDTEVWQlFVVXNSVUZEZEVJc1pVRkJaU3hIUVVGSExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNTVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJReXhWUVVGVkxFVkJRVVVzUTBGQlF5eERRVUZETEVWQlF6RkVMRU5CUVVNc1EwRkRTaXhEUVVGRE8xRkJRMFlzVDBGQlR5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTTdTVUZEYWtRc1EwRkJRenREUVVOS08wRkJWVTBzVFVGQlRTeHZRa0ZCY1VJc1UwRkJVU3hYUVVGWE8wbEJRMnBFTzFGQlEwa3NTMEZCU3l4RlFVRkZMRU5CUVVNN1VVRkRVaXhKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEdkQ1FVRm5RaXhEUVVGRExHTkJRV01zUTBGQlF6dEpRVU5vUkN4RFFVRkRPME5CUTBvN1FVRkZUU3hOUVVGTkxHZENRVUZwUWl4VFFVRlJMRmRCUVZjN1NVRkhOME1zV1VGQldTeFZRVUZyUWp0UlFVTXhRaXhMUVVGTExFVkJRVVVzUTBGQlF6dFJRVU5TTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1owSkJRV2RDTEVOQlFVTXNVMEZCVXl4RFFVRkRPMUZCUTNaRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVkQlFVY3NWVUZCVlN4RFFVRkRPMGxCUTJwRExFTkJRVU03UTBGRFNqdEJRVVZOTEUxQlFVMHNhMEpCUVcxQ0xGTkJRVkVzVjBGQlZ6dEpRVU12UXp0UlFVTkpMRXRCUVVzc1JVRkJSU3hEUVVGRE8xRkJRMUlzU1VGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4blFrRkJaMElzUTBGQlF5eFhRVUZYTEVOQlFVTTdTVUZETjBNc1EwRkJRenREUVVOS08wRkJSVVE3TzBkQlJVYzdRVUZEU1N4TlFVRk5MRmRCUVZrc1UwRkJVU3hYUVVGWE8wbEJSM2hETEZsQlFWa3NTVUZCV1R0UlFVTndRaXhMUVVGTExFVkJRVVVzUTBGQlF6dFJRVU5TTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1owSkJRV2RDTEVOQlFVTXNTVUZCU1N4RFFVRkRPMUZCUTJ4RExFbEJRVWtzUTBGQlF5eEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRPMGxCUTNKQ0xFTkJRVU03UTBGRFNqdEJRVTlFT3p0SFFVVkhPMEZCUTBrc1RVRkJUU3hyUWtGQmJVSXNVMEZCVVN4WFFVRlhPMGxCU3k5RE96dFBRVVZITzBsQlEwZ3NXVUZCV1N4TFFVRm5ReXhGUVVGRkxGZEJRV2xETzFGQlF6TkZMRXRCUVVzc1JVRkJSU3hEUVVGRE8xRkJRMUlzU1VGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4blFrRkJaMElzUTBGQlF5eExRVUZMTEVOQlFVTTdVVUZEYmtNc1NVRkJTU3hEUVVGRExGVkJRVlVzUjBGQlJ5eERRVUZETEVOQlFVTTdVVUZEY0VJc1NVRkJTU3hEUVVGRExGVkJRVlVzUjBGQlJ5eERRVUZETEVOQlFVTTdVVUZGY0VJc1NVRkJTU3hMUVVGTExFVkJRVVU3V1VGRFVDeEpRVUZKTEVOQlFVTXNTVUZCU1N4SFFVRkhMRXRCUVVzc1EwRkJReXhKUVVGM1FpeERRVUZETzFsQlF6TkRMRWxCUVVrc1EwRkJReXhIUVVGSExFZEJRVWNzUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXp0WlFVTnlRaXhKUVVGSkxFTkJRVU1zVlVGQlZTeEhRVUZITEZkQlFWY3NRMEZCUXl4aFFVRmhMRU5CUVVNN1dVRkROVU1zU1VGQlNTeERRVUZETEZWQlFWVXNSMEZCUnl4WFFVRlhMRU5CUVVNc1lVRkJZU3hEUVVGRE8xTkJReTlETzBsQlEwd3NRMEZCUXp0SlFVVkVMRlZCUVZVc1EwRkJReXhIUVVGWExFVkJRVVVzUzBGQlZUdFJRVU01UWl4SlFVRkpMRU5CUVVNc1IwRkJSeXhKUVVGSkxGbEJRVmtzU1VGQlNTeEhRVUZITEVsQlFVa3NXVUZCV1N4RFFVRkRMRWxCUVVrc1MwRkJTeXhKUVVGSkxFTkJRVU03V1VGQlJTeFBRVUZQTEZOQlFWTXNRMEZCUXp0UlFVTnFSaXhQUVVGUExFdEJRVXNzUTBGQlF6dEpRVU5xUWl4RFFVRkRPME5CUTBvN1FVRlBSRHM3UjBGRlJ6dEJRVU5KTEUxQlFVMHNiVUpCUVc5Q0xGTkJRVkVzVjBGQlZ6dEpRVXRvUkRzN1QwRkZSenRKUVVOSUxGbEJRVmtzVFVGQmFVTXNSVUZCUlN4WFFVRnJRenRSUVVNM1JTeExRVUZMTEVWQlFVVXNRMEZCUXp0UlFVTlNMRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzWjBKQlFXZENMRU5CUVVNc1RVRkJUU3hEUVVGRE8xRkJRM0JETEVsQlFVa3NRMEZCUXl4VlFVRlZMRWRCUVVjc1EwRkJReXhEUVVGRE8xRkJRM0JDTEVsQlFVa3NRMEZCUXl4VlFVRlZMRWRCUVVjc1EwRkJReXhEUVVGRE8xRkJSWEJDTEVsQlFVa3NUVUZCVFN4RlFVRkZPMWxCUTFJc1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eE5RVUZOTEVOQlFVTXNTVUZCZDBJc1EwRkJRenRaUVVNMVF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4SFFVRkhMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU03V1VGRGRFSXNTVUZCU1N4RFFVRkRMRlZCUVZVc1IwRkJSeXhYUVVGWExFTkJRVU1zWVVGQllTeERRVUZETzFsQlF6VkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFZEJRVWNzVjBGQlZ5eERRVUZETEdGQlFXRXNRMEZCUXp0VFFVTXZRenRKUVVOTUxFTkJRVU03U1VGRlJDeFZRVUZWTEVOQlFVTXNSMEZCVnl4RlFVRkZMRXRCUVZVN1VVRkRPVUlzU1VGQlNTeERRVUZETEVkQlFVY3NTVUZCU1N4WlFVRlpMRWxCUVVrc1IwRkJSeXhKUVVGSkxGbEJRVmtzUTBGQlF5eEpRVUZKTEV0QlFVc3NTVUZCU1N4RFFVRkRPMWxCUVVVc1QwRkJUeXhUUVVGVExFTkJRVU03VVVGRGFrWXNUMEZCVHl4TFFVRkxMRU5CUVVNN1NVRkRha0lzUTBGQlF6dERRVU5LTzBGQlJVUTdPMGRCUlVjN1FVRkRTU3hOUVVGTkxDdENRVUZuUXl4VFFVRlJMRmRCUVZjN1NVRkROVVE3VVVGRFNTeExRVUZMTEVWQlFVVXNRMEZCUXp0UlFVTlNMRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzWjBKQlFXZENMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTTdTVUZEY0VRc1EwRkJRenREUVVOS08wRkJSVVE3TzBkQlJVYzdRVUZEU1N4TlFVRk5MRGhDUVVFclFpeFRRVUZSTEZkQlFWYzdTVUZETTBRN1VVRkRTU3hMUVVGTExFVkJRVVVzUTBGQlF6dFJRVU5TTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1owSkJRV2RDTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU03U1VGRGVrUXNRMEZCUXp0RFFVTktPMEZCUlVRN08wZEJSVWM3UVVGRFNTeE5RVUZOTEcxQ1FVRnRRanRKUVVrMVFqczdUMEZGUnp0SlFVTklMRmxCUVZrc1UwRkJNRUk3VVVGRGJFTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhuUWtGQlowSXNRMEZCUXl4aFFVRmhMRU5CUVVNN1VVRkRNME1zU1VGQlNTeERRVUZETEZOQlFWTXNSMEZCUnl4VFFVRlRMRU5CUVVNN1NVRkRMMElzUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxFOUJRVTg3VVVGRFNDeHpSRUZCVlN4RFFVTk9MR2RGUVVGdlFpeEZRVUZGTEVWQlEzUkNMR1ZCUVdVc1IwRkJSeXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NSVUZCUlN4VFFVRlRMRVZCUVVVc1EwRkJReXhEUVVGRExFVkJRM0JFTEVOQlFVTXNRMEZEU2l4RFFVRkRPMUZCUTBZc1QwRkJUeXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMGxCUTJoRExFTkJRVU03UTBGRFNqczdPenM3T3pzN096czdPenM3T3pzN08wRkRNVTVFTEd0RVFVRnJSRHRCUVVWU08wRkJXV2hDTzBGQlEydENPMEZCUlRWRE96dEhRVVZITzBGQlEwa3NUVUZCVFN4clFrRkJhMEk3U1VGSE0wSTdVVUZEU1N4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVkQlFVY3NTVUZCU1N4SFFVRkhMRVZCUjJwRExFTkJRVU03U1VGRFVpeERRVUZETzBsQlJVUXNhVUpCUVdsQ0xFTkJRMklzVTBGQmFVSXNSVUZEYWtJc1kwRkJlVU03VVVGRmVrTXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeERRVUZETEVkQlFVY3NRMEZCUXl4VFFVRlRMRVZCUVVVc1kwRkJZeXhEUVVGRExFTkJRVU03U1VGRE9VUXNRMEZCUXp0SlFVVkVMR0ZCUVdFc1EwRkJReXhUUVVGcFFpeEZRVUZGTEZkQlFXMUNPMUZCUTJoRUxFbEJRVWtzU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExFZEJRVWNzUTBGQlF5eFRRVUZUTEVOQlFVTXNSVUZCUlR0WlFVTXpReXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1IwRkJSeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRPMU5CUXpGRU8yRkJRVTA3V1VGRFNDeDNSRUZCV1N4RFFVTlNMR2RGUVVGdlFpeEZRVUZGTEVWQlEzUkNMRzFDUVVGdFFpeFRRVUZUTEdsR1FVRnBSaXhEUVVOb1NDeERRVUZETzFOQlEwdzdTVUZEVEN4RFFVRkRPMGxCUlVRN096dFBRVWRITzBsQlEwZ3NUVUZCVFN4RFFVRkRMRzlDUVVGdlFpeERRVUZETEcxQ1FVRjNRenRSUVVOb1JTeFBRVUZQTzFGQlExQXNiVUpCUVcxQ0xFTkJRVU1zYTBKQlFXdENMRU5CUVVNc2FVSkJRV2xDTEVOQlEzQkVMR3RGUVVGeFFpeEZRVU55UWl4RFFVRkRMRmRCUVcxQ0xFVkJRVVVzUlVGQlJUdFpRVU53UWl4elJFRkJjMFE3V1VGRGRFUXNUVUZCVFN4WFFVRlhMRWRCUVVjc1NVRkJTU3h4UkVGQlZ5eERRVU12UWl4SlFVRkpMRWxCUVVrc1JVRkJSU3hEUVVGRExFOUJRVThzUlVGQlJTeERRVU4yUWl4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRE8xbEJRMW9zYzBSQlFWVXNRMEZEVGl4blJVRkJiMElzUlVGQlJTeEZRVU4wUWl4clJVRkJjVUlzUjBGQlJ5eEpRVUZKTEVkQlFVY3NWMEZCVnl4RlFVTXhReXhEUVVGRExFTkJRMG9zUTBGQlF6dFpRVU5HTEcxQ1FVRnRRaXhEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNN1VVRkRjRVFzUTBGQlF5eERRVU5LTEVOQlFVTTdVVUZGUml4VFFVRlRPMUZCUTFRc2JVSkJRVzFDTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zYVVKQlFXbENMRU5CUTNCRUxHOUZRVUYxUWl4RlFVTjJRaXhEUVVGRExHRkJRWEZDTEVWQlFVVXNSVUZCUlR0WlFVTjBRaXh6UkVGQlZTeERRVUZETEdkRlFVRnZRaXhGUVVGRkxFVkJRVVVzYjBWQlFYVkNMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03V1VGREwwUXNUVUZCVFN4TlFVRk5MRWRCUVd0Q0xFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNZVUZCWVN4RFFVRkRMRU5CUVVNN1dVRkRlRVFzYlVKQlFXMUNMRU5CUVVNc1VVRkJVU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzFGQlEzcERMRU5CUVVNc1EwRkRTaXhEUVVGRE8xRkJSVVlzWjBKQlFXZENPMUZCUTJoQ0xHMUNRVUZ0UWl4RFFVRkRMR3RDUVVGclFpeERRVUZETEdsQ1FVRnBRaXhEUVVOd1JDd3lSVUZCT0VJc1JVRkRPVUlzUTBGQlF5eFhRVUZ0UWl4RlFVRkZMRVZCUVVVN1dVRkRjRUlzYzBSQlFWVXNRMEZEVGl4blJVRkJiMElzUlVGQlJTeEZRVU4wUWl3eVJVRkJPRUlzUlVGRE9VSXNRMEZCUXl4RFFVTktMRU5CUVVNN1dVRkRSaXhOUVVGTkxGbEJRVmtzUjBGRFpDeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRE8xbEJRelZDTEcxQ1FVRnRRaXhEUVVGRExHTkJRV01zUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXp0UlFVTnlSQ3hEUVVGRExFTkJRMG9zUTBGQlF6dFJRVVZHTEhOQ1FVRnpRanRSUVVOMFFpeHRRa0ZCYlVJc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4cFFrRkJhVUlzUTBGRGNFUXNhVVpCUVc5RExFVkJRM0JETEVOQlFVTXNVMEZCYVVJc1JVRkJSU3hGUVVGRk8xbEJRMnhDTEhORVFVRlZMRU5CUTA0c1owVkJRVzlDTEVWQlFVVXNSVUZEZEVJc2FVWkJRVzlETEVWQlEzQkRMRU5CUVVNc1EwRkRTaXhEUVVGRE8xbEJRMFlzVFVGQlRTeHBRa0ZCYVVJc1IwRkRia0lzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenRaUVVNeFFpeHRRa0ZCYlVJc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eERRVUZETzFGQlF5OUVMRU5CUVVNc1EwRkRTaXhEUVVGRE8xRkJSVVlzWlVGQlpUdFJRVU5tTEcxQ1FVRnRRaXhEUVVGRExHdENRVUZyUWl4RFFVRkRMR2xDUVVGcFFpeERRVU53UkN3d1JVRkJOa0lzUlVGRE4wSXNRMEZCUXl4clFrRkJNRUlzUlVGQlJTeEZRVUZGTzFsQlF6TkNMSE5FUVVGVkxFTkJRMDRzWjBWQlFXOUNMRVZCUVVVc1JVRkRkRUlzTUVWQlFUWkNMRVZCUXpkQ0xFTkJRVU1zUTBGRFNpeERRVUZETzFsQlEwWXNUVUZCVFN4WFFVRlhMRWRCUTJJc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhEUVVGRE8xbEJRMjVETEhORVFVRlZMRU5CUTA0c1owVkJRVzlDTEVWQlFVVXNSVUZEZEVJc1owSkJRV2RDTEVkQlFVY3NWMEZCVnl4RFFVRkRMRXRCUVVzc1JVRkRjRU1zUTBGQlF5eERRVU5LTEVOQlFVTTdXVUZEUml4dFFrRkJiVUlzUTBGQlF5eGhRVUZoTEVOQlFVTXNWMEZCVnl4RFFVRkRPMUZCUTJ4RUxFTkJRVU1zUTBGRFNpeERRVUZETzFGQlJVWXNVMEZCVXp0UlFVTlVMRzFDUVVGdFFpeERRVUZETEd0Q1FVRnJRaXhEUVVGRExHbENRVUZwUWl4RFFVTndSQ3h2UlVGQmRVSXNSVUZEZGtJc1EwRkJReXhoUVVGeFFpeEZRVUZGTEVWQlFVVTdXVUZEZEVJc2MwUkJRWE5FTzFsQlEzUkVMSE5FUVVGVkxFTkJRVU1zWjBWQlFXOUNMRVZCUVVVc1JVRkJSU3h2UlVGQmRVSXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVNdlJDeE5RVUZOTEUxQlFVMHNSMEZCYTBJc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUXp0WlFVTjRSQ3h0UWtGQmJVSXNRMEZCUXl4alFVRmpMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03VVVGREwwTXNRMEZCUXl4RFFVTktMRU5CUVVNN1VVRkZSaXhSUVVGUk8xRkJRMUlzYlVKQlFXMUNMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNhVUpCUVdsQ0xFTkJRM0JFTEcxRlFVRnpRaXhGUVVOMFFpeERRVUZETEZsQlFXOUNMRVZCUVVVc1JVRkJSVHRaUVVOeVFpeHpSRUZCYzBRN1dVRkRkRVFzYzBSQlFWVXNRMEZCUXl4blJVRkJiMElzUlVGQlJTeEZRVUZGTEcxRlFVRnpRaXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzFsQlF6bEVMRTFCUVUwc1MwRkJTeXhIUVVGcFFpeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRE8xbEJRM0pFTEcxQ1FVRnRRaXhEUVVGRExHRkJRV0VzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0UlFVTTNReXhEUVVGRExFTkJRMG9zUTBGQlF6dFJRVVZHTEdkQ1FVRm5RanRSUVVOb1FpeHRRa0ZCYlVJc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4cFFrRkJhVUlzUTBGRGNFUXNNa1ZCUVRoQ0xFVkJRemxDTEVOQlFVTXNiVUpCUVRKQ0xFVkJRVVVzUlVGQlJUdFpRVU0xUWl4elJFRkJjMFE3V1VGRGRFUXNjMFJCUVZVc1EwRkRUaXhuUlVGQmIwSXNSVUZCUlN4RlFVTjBRaXd5UlVGQk9FSXNSVUZET1VJc1EwRkJReXhEUVVOS0xFTkJRVU03V1VGRFJpeE5RVUZOTEZsQlFWa3NSMEZEWkN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRU5CUVVNN1dVRkRjRU1zYlVKQlFXMUNMRU5CUVVNc1kwRkJZeXhEUVVGRExGbEJRVmtzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXp0UlFVTXZSQ3hEUVVGRExFTkJRMG9zUTBGQlF6dFJRVVZHTEZWQlFWVTdVVUZEVml4dFFrRkJiVUlzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhwUWtGQmFVSXNRMEZEY0VRc2NVVkJRWGRDTEVWQlEzaENMRU5CUVVNc1kwRkJjMElzUlVGQlJTeEZRVUZGTzFsQlEzWkNMREJFUVVGakxFTkJRMVlzWjBWQlFXOUNMRVZCUVVVc1JVRkRkRUlzY1VKQlFYRkNMR05CUVdNc1JVRkJSU3hEUVVONFF5eERRVUZETzFGQlEwNHNRMEZCUXl4RFFVTktMRU5CUVVNN1VVRkZSaXh4UWtGQmNVSTdVVUZEY2tJc2JVSkJRVzFDTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zYVVKQlFXbENMRU5CUTNCRUxHZEdRVUZ0UXl4RlFVTnVReXhEUVVGRExIVkNRVUVyUWl4RlFVRkZMRVZCUVVVN1dVRkRhRU1zYzBSQlFWVXNRMEZEVGl4blJVRkJiMElzUlVGQlJTeEZRVU4wUWl4blJrRkJiVU1zUlVGRGJrTXNRMEZCUXl4RFFVTktMRU5CUVVNN1dVRkRSaXhOUVVGTkxHZENRVUZuUWl4SFFVRTBRaXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVU40UkN4MVFrRkJkVUlzUTBGRE1VSXNRMEZCUXp0WlFVTkdMRzFDUVVGdFFpeERRVUZETEhkQ1FVRjNRaXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRU5CUVVNN1VVRkRia1VzUTBGQlF5eERRVU5LTEVOQlFVTTdTVUZEVGl4RFFVRkRPME5CUTBvN096czdPenM3T3pzN096czdPenM3T3p0QlEyNU5SQ3hyUkVGQmEwUTdRVUZGVWp0QlFVVkhPMEZCUTJFN1FVRlRNVVE3TzBkQlJVYzdRVUZEU1N4TlFVRk5MRzFDUVVGdFFqdEpRVTgxUWp0UlFVNUJMR3RDUVVGaExFZEJRVWNzUTBGQlF5eERRVUZETzFGQlQyUXNTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhKUVVGSkxGZEJRVmNzUlVGQlJTeERRVUZETzFGQlEyaERMRWxCUVVrc1EwRkJReXhQUVVGUExFZEJRVWNzU1VGQlNTeFhRVUZYTEVWQlFVVXNRMEZCUXp0UlFVTnFReXhKUVVGSkxFTkJRVU1zYTBKQlFXdENMRWRCUVVjc1NVRkJTU3h0UlVGQmEwSXNSVUZCUlN4RFFVRkRPMUZCUTI1RUxIZEdRVUYxUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wbEJRMnhFTEVOQlFVTTdTVUZGUkRzN096dFBRVWxITzBsQlEwZ3NUMEZCVHl4RFFVRkRMR0ZCUVhGQ08xRkJRM3BDTEhORVFVRlZMRU5CUVVNc1owVkJRVzlDTEVWQlFVVXNSVUZCUlN4aFFVRmhMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGNrUXNTVUZCU1R0WlFVTkJMRWxCUVVrc1EwRkJReXhUUVVGVExFZEJRVWNzU1VGQlNTeFRRVUZUTEVOQlFVTXNZVUZCWVN4RFFVRkRMRU5CUVVNN1dVRkRPVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRWRCUVVjc1EwRkJReXhMUVVGTExFVkJRVVVzUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03V1VGRE5VUXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhQUVVGUExFZEJRVWNzUjBGQlJ5eEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1JVRkJSU3hEUVVGRE8xbEJRM0JFTEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1QwRkJUeXhIUVVGSExFTkJRVU1zUzBGQlN5eEZRVUZGTEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzFsQlF6bEVMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zVTBGQlV5eEhRVUZITEVOQlFVTXNTMEZCU3l4RlFVRkZMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMWxCUTJ4RkxFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNaVUZCWlN4SFFVRkhMRU5CUVVNc1MwRkJTeXhGUVVGRkxFVkJRVVVzUTBGRGRrTXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMWxCUTNSRExFOUJRVThzU1VGQlNTeERRVUZETzFOQlEyWTdVVUZCUXl4UFFVRlBMRXRCUVVzc1JVRkJSVHRaUVVOYUxIZEVRVUZaTEVOQlFVTXNTMEZCU3l4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRE8xbEJRek5DTEU5QlFVOHNTMEZCU3l4RFFVRkRPMU5CUTJoQ08wbEJRMHdzUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxIRkNRVUZ4UWl4RFFVRkRMRXRCUVcxQ08xRkJRM0pETEN0Q1FVRXJRanRSUVVNdlFpeEpRVUZKTEVOQlFVTXNTMEZCU3l4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUlVGQlJUdFpRVU4yUWl4UFFVRlBPMU5CUTFZN1VVRkZSQ3huUkVGQlowUTdVVUZEYUVRc1MwRkJTeXhEUVVGRExFbEJRVWs3WVVGRFRDeEpRVUZKTEVWQlFVVTdZVUZEVGl4SlFVRkpMRU5CUVVNc1EwRkJReXhoUVVGelFpeEZRVUZGTEVWQlFVVTdXVUZETjBJc2MwSkJRWE5DTzFsQlEzUkNMRTFCUVUwc2EwSkJRV3RDTEVkQlFVY3NTVUZCU1N4WlFVRlpMRU5CUTNaRExHMUNRVUZ0UWl4RlFVTnVRanRuUWtGRFNTeEpRVUZKTEVWQlFVVXNZVUZCWVR0aFFVTjBRaXhEUVVOS0xFTkJRVU03V1VGRlJpeDFSRUZCZFVRN1dVRkRka1FzU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eERRVUZETzFGQlF6ZERMRU5CUVVNc1EwRkJRenRoUVVORUxFdEJRVXNzUTBGQlF5eERRVUZETEV0QlFWa3NSVUZCUlN4RlFVRkZPMWxCUTNCQ0xIZEVRVUZaTEVOQlExSXNaMFZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNkVVJCUVhWRUxFdEJRVXNzUlVGQlJTeERRVU5xUlN4RFFVRkRPMUZCUTA0c1EwRkJReXhEUVVGRExFTkJRVU03U1VGRFdDeERRVUZETzBsQlJVUTdPenRQUVVkSE8wbEJRMGdzWlVGQlpTeERRVUZETEV0QlFXMUNPMUZCUXk5Q0xEWkVRVUUyUkR0UlFVTTNSQ3hKUVVGSkxFdEJRVXNzUTBGQlF5eEpRVUZKTEVsQlFVa3NTMEZCU3l4RFFVRkRMRWxCUVVrc1dVRkJXU3hKUVVGSkxFVkJRVVU3V1VGRE1VTXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMWxCUTJ4RExFOUJRVTg3VTBGRFZqdFJRVVZFTEUxQlFVMHNUMEZCVHl4SFFVRXJRaXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRSUVVOdVJTeHpSRUZCVlN4RFFVTk9MR2RGUVVGdlFpeEZRVUZGTEVWQlEzUkNMR2RDUVVGblFqdFpRVU5hTEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1UwRkJVeXhGUVVGRkxFTkJRVU1zUTBGQlF5eEZRVU40UkN4RFFVRkRMRU5CUTBvc1EwRkJRenRSUVVWR0xHbEZRVUZwUlR0UlFVTnFSU3hKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1lVRkJZU3hEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVWQlFVVXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wbEJRM0JGTEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNDdzJSRUZCTmtRN1NVRkROMFFzV1VGQldTeERRVUZETEV0QlFWazdVVUZEY2tJc2MwUkJRVlVzUTBGRFRpeG5SVUZCYjBJc1JVRkJSU3hGUVVOMFFpeHJSRUZCYTBRc1JVRkRiRVFzUTBGQlF5eERRVU5LTEVOQlFVTTdVVUZEUml4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExHRkJRV0VzUTBGQlF5eEpRVUZKTEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRMnBFTEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNDeGhRVUZoTzFGQlExUXNkMFJCUVZrc1EwRkJReXhuUlVGQmIwSXNSVUZCUlN4RlFVRkZMR2xDUVVGcFFpeERRVUZETEVOQlFVTTdTVUZETlVRc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMR0ZCUVdFc1EwRkJReXhMUVVGcFFqdFJRVU16UWl4elJFRkJWU3hEUVVOT0xHZEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xIVkVRVUYxUkR0WlFVTnVSQ3hKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNN1dVRkRNVUlzUzBGQlN6dFpRVU5NTEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUTI1Q0xFTkJRVU03VVVGRFJpeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMR0ZCUVdFc1EwRkJReXhKUVVGSkxGZEJRVmNzUTBGQlF5eFBRVUZQTEVWQlFVVXNSVUZCUlN4UlFVRlJMRVZCUVVVc1MwRkJTeXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzBsQlF6bEZMRU5CUVVNN1NVRkZSQ3h0UWtGQmJVSTdVVUZEWml4TlFVRk5MRTlCUVU4c1IwRkJSeXhKUVVGSkxEaEVRVUZuUXl4RlFVRkZMRU5CUVVNN1VVRkRka1FzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETEVOQlFVTTdTVUZETTBNc1EwRkJRenRKUVVWRUxHRkJRV0VzUTBGQlF5eFZRVUZyUWp0UlFVTTFRaXhOUVVGTkxFOUJRVThzUjBGQlJ5eEpRVUZKTERCRVFVRTBRaXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzFGQlF6ZEVMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4UFFVRlBMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRek5ETEVOQlFVTTdTVUZGUkN4bFFVRmxPMUZCUTFnc1RVRkJUU3hQUVVGUExFZEJRVWNzU1VGQlNTdzBSRUZCT0VJc1JVRkJSU3hEUVVGRE8xRkJRM0pFTEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFBRVUZQTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpORExFTkJRVU03U1VGRlJDeGxRVUZsTEVOQlFVTXNTMEZCWjBNc1JVRkJSU3hYUVVFMlF6dFJRVU16Uml4TlFVRk5MRTlCUVU4c1IwRkJSeXhKUVVGSkxEUkVRVUU0UWl4RFFVRkRMRXRCUVVzc1JVRkJSU3hYUVVGWExFTkJRVU1zUTBGQlF6dFJRVU4yUlN4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVNc1EwRkJRenRKUVVNelF5eERRVUZETzBsQlJVUXNaMEpCUVdkQ0xFTkJRVU1zVFVGQmFVTXNSVUZCUlN4WFFVRTRRenRSUVVNNVJpeE5RVUZOTEU5QlFVOHNSMEZCUnl4SlFVRkpMRFpFUVVFclFpeERRVUZETEUxQlFVMHNSVUZCUlN4WFFVRlhMRU5CUVVNc1EwRkJRenRSUVVONlJTeEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVDBGQlR5eEZRVUZGTEVOQlFVTXNRMEZCUXp0SlFVTXpReXhEUVVGRE8wbEJSVVFzTkVKQlFUUkNPMUZCUTNoQ0xFMUJRVTBzVDBGQlR5eEhRVUZITEVsQlFVa3NlVVZCUVRKRExFVkJRVVVzUTBGQlF6dFJRVU5zUlN4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVNc1EwRkJRenRKUVVNelF5eERRVUZETzBsQlJVUXNNa0pCUVRKQ08xRkJRM1pDTEUxQlFVMHNUMEZCVHl4SFFVRkhMRWxCUVVrc2QwVkJRVEJETEVWQlFVVXNRMEZCUXp0UlFVTnFSU3hKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU1zUTBGQlF6dEpRVU16UXl4RFFVRkRPMGxCUlVRN096dFBRVWRITzBsQlEwZ3NaMEpCUVdkQ0xFTkJRVU1zVTBGQk1FSTdVVUZEZGtNc2MwUkJRVlVzUTBGQlF5eG5SVUZCYjBJc1JVRkJSU3hGUVVGRkxIVkNRVUYxUWl4RFFVRkRMRU5CUVVNN1VVRkROVVFzU1VGRFNTeEpRVUZKTEVOQlFVTXNVMEZCVXp0WlFVTmtMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zVlVGQlZTeExRVUZMTEVsQlFVa3NRMEZCUXl4aFFVRmhMRVZCUTJ4RU8xbEJRMFVzTUVWQlFUQkZPMWxCUXpGRkxFMUJRVTBzV1VGQldTeEhRVUZITEVsQlFVa3NOa1JCUVN0Q0xFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTTdXVUZGY0VVc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRExFTkJRVU03VTBGREwwTTdTVUZEVEN4RFFVRkRPMGxCUlVRN08wOUJSVWM3U1VGRFNDeExRVUZMT3p0UlFVTkVMRlZCUVVrc1EwRkJReXhUUVVGVExEQkRRVUZGTEV0QlFVc3NSVUZCUlN4RFFVRkRPMGxCUXpWQ0xFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3h0UjBGQmJVYzdTVUZEYmtjc1VVRkJVU3hEUVVGRExHRkJRVEpETEVsQlFVY3NRMEZCUXp0SlFVVjRSRHM3TzA5QlIwYzdTVUZEU0N4dFIwRkJiVWM3U1VGRGJrY3NZMEZCWXl4RFFVRkRMRzFDUVVGMVJDeEpRVUZITEVOQlFVTTdTVUZGTVVVN096dFBRVWRITzBsQlEwZ3NiVWRCUVcxSE8wbEJRMjVITEcxQ1FVRnRRaXhEUVVGRExFOUJRV2RFTEVsQlFVY3NRMEZCUXp0SlFVVjRSVHM3VDBGRlJ6dEpRVU5JTEcxSFFVRnRSenRKUVVOdVJ5eGpRVUZqTEVOQlFVTXNXVUZCYVVNc1NVRkJSeXhEUVVGRE8wbEJSWEJFT3pzN1QwRkhSenRKUVVOSUxHMUhRVUZ0Unp0SlFVTnVSeXhqUVVGakxFTkJRVU1zWVVGQk1rTXNTVUZCUnl4RFFVRkRPMGxCUlRsRU96czdUMEZIUnp0SlFVTklMRzFIUVVGdFJ6dEpRVU51Unl4aFFVRmhMRU5CUVVNc1dVRkJlVU1zU1VGQlJ5eERRVUZETzBsQlJUTkVPenM3VDBGSFJ6dEpRVU5JTEcxSFFVRnRSenRKUVVOdVJ5eDNRa0ZCZDBJc1EwRkJReXh0UWtGQk1rUXNTVUZCUnl4RFFVRkRPMGxCUlhoR096czdUMEZIUnp0SlFVTklMRzFIUVVGdFJ6dEpRVU51Unl4aFFVRmhMRU5CUVVNc1YwRkJPRU1zU1VGQlJ5eERRVUZETzBOQlEyNUZPenM3T3pzN096czdPenM3T3pzN096czdPMEZEYmxGRUxHdEVRVUZyUkR0QlFVVlNPMEZCUlRCQ08wRkJRMnBDTzBGQlEwUTdRVUZGTTBNc1RVRkJUU3hsUVVGbE8wbEJNRUo0UWl4WlFVRlpMSE5DUVVFNFF6dFJRWFJDYkVRc2FVSkJRVmtzUjBGQmEwSXNTVUZCU1N4RFFVRkRPMUZCVVc1RExHbENRVUZaTEVkQlFXbENMRWxCUVVrc1EwRkJRenRSUVVOc1F5eHRRa0ZCWXl4SFFVRlhMRU5CUVVNc1EwRkJRenRSUVVNelFpeHZRa0ZCWlN4SFFVRlhMRU5CUVVNc1EwRkJRenRSUVVzMVFpeGhRVUZSTEVkQlFWY3NTVUZCU1N4RFFVRkRPMUZCUTNoQ0xHTkJRVk1zUjBGQlZ5eEpRVUZKTEVOQlFVTTdVVUZQTjBJc1NVRkJTU3hEUVVGRExGTkJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVTTdVVUZEZEVJc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4SFFVRkhMSE5DUVVGelFpeERRVUZETzFGQlF5OURMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNSMEZCUnl4SlFVRkpMRFJGUVVGdFFpeERRVU01UXl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNkVUpCUVhWQ0xFTkJRMmhFTEVOQlFVTTdVVUZEUml4SlFVRkpMRU5CUVVNc1kwRkJZeXhIUVVGSExFbEJRVWtzVjBGQlZ5eEZRVUZGTEVOQlFVTTdVVUZEZUVNc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4SFFVRkhMRWxCUVVrc1YwRkJWeXhGUVVGRkxFTkJRVU03VVVGRE1VTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhKUVVGSkxGZEJRVmNzUlVGQlJTeERRVUZETzBsQlEzSkRMRU5CUVVNN1NVRkZUU3hUUVVGVE8xRkJRMW9zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRVZCUVVVN1dVRkZha0lzU1VGQlJ5eERRVUZETEZOQlFWTXNRMEZCUXl4RlFVRkZMRVZCUVVNN1owSkJRMklzZDBSQlFWa3NRMEZCUXl4blJVRkJiMElzUlVGQlJTeEZRVUZGTEcxRFFVRnRReXhEUVVGRExFTkJRVU03WjBKQlF6RkZMRTlCUVU4N1lVRkRWanRaUVVWRUxGTkJRVk1zUTBGQlF5eEZRVUZGTzJkQ1FVTlNMR2xGUVVGcFJUdHBRa0ZEYUVVc1kwRkJZeXhEUVVGRExHTkJRV01zUlVGQlJTeEZRVUZGTEdkQ1FVRm5RaXhGUVVGRkxFVkJRVVVzUlVGQlJTeERRVUZETzJsQ1FVTjRSQ3hKUVVGSkxFTkJRVU1zUTBGQlF5eFBRVUZyUWl4RlFVRkZMRVZCUVVVN1owSkJRM3BDTEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0WlFVTnlReXhEUVVGRExFTkJRVU1zUTBGQlF6dFRRVU5XTzJGQlFVMDdXVUZEU0N4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETzFOQlEzaENPMGxCUTB3c1EwRkJRenRKUVVWRUxHZENRVUZuUWp0UlFVTmFMSE5FUVVGVkxFTkJRVU1zWjBWQlFXOUNMRVZCUVVVc1JVRkJSU3hyUWtGQmEwSXNRMEZCUXl4RFFVRkRPMUZCUTNaRUxFbEJRVWtzUTBGQlF5eFRRVUZUTEVkQlFVY3NTVUZCU1N4RFFVRkRPMUZCUTNSQ0xFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNZVUZCWVN4RFFVRkRMRWxCUVVrc1MwRkJTeXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOdVJTeERRVUZETzBsQlJVUXNUVUZCVFR0UlFVTkdMRWxCUVVrc1NVRkJTU3hEUVVGRExFVkJRVVVzUlVGQlJUdFpRVUZGTEU5QlFVODdVMEZCUlR0UlFVTjRRaXhOUVVGTkxFMUJRVTBzUjBGQlJ5eFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8xRkJRMmhFTEVsQlFVa3NRMEZCUXl4RlFVRkZMRWRCUVVjc1RVRkJUU3hEUVVGRExGVkJRVlVzUTBGQlF5eFJRVUZSTEVWQlFVVTdXVUZEYkVNc1dVRkJXU3hGUVVGRkxFbEJRVWs3VTBGRGNrSXNRMEZCUXl4RFFVRkRPMUZCUlVnc2MwSkJRWE5DTzFGQlEzUkNMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zVlVGQlZTeERRVUZETEVkQlFVY3NSVUZCUlN4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzBsQlEzcERMRU5CUVVNN1NVRkZSQ3hYUVVGWE8xRkJSVkFzY1VKQlFYRkNPMUZCUTNKQ0xFMUJRVTBzYTBKQlFXdENMRWRCUTNoQ096czdPenM3T3pzN096czdPMU5CWVVNc1EwRkJRenRSUVVWR0xFMUJRVTBzYjBKQlFXOUNMRWRCUXpGQ096czdPenM3T3pzN096czdVMEZaUXl4RFFVRkRPMUZCUlVZc2MwSkJRWE5DTzFGQlEzUkNMRTFCUVUwc1dVRkJXU3hIUVVGSExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNXVUZCV1N4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVTTdVVUZEYWtVc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eFpRVUZaTEVOQlFVTXNXVUZCV1N4RlFVRkZMR3RDUVVGclFpeERRVUZETEVOQlFVTTdVVUZEZGtRc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eGhRVUZoTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNN1VVRkZjRU1zZDBKQlFYZENPMUZCUTNoQ0xFMUJRVTBzWTBGQll5eEhRVUZITEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1dVRkJXU3hEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVNN1VVRkRja1VzU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4WlFVRlpMRU5CUVVNc1kwRkJZeXhGUVVGRkxHOUNRVUZ2UWl4RFFVRkRMRU5CUVVNN1VVRkRNMFFzU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4aFFVRmhMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU03VVVGRmRFTXNjVUpCUVhGQ08xRkJRM0pDTEUxQlFVMHNZVUZCWVN4SFFVRkhMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zWVVGQllTeEZRVUZGTEVOQlFVTTdVVUZET1VNc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eFpRVUZaTEVOQlFVTXNZVUZCWVN4RlFVRkZMRmxCUVZrc1EwRkJReXhEUVVGRE8xRkJRMnhFTEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1dVRkJXU3hEUVVGRExHRkJRV0VzUlVGQlJTeGpRVUZqTEVOQlFVTXNRMEZCUXp0UlFVTndSQ3hKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEZkQlFWY3NRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJRenRSUVVOdVF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMRlZCUVZVc1EwRkJReXhoUVVGaExFTkJRVU1zUTBGQlF6dFJRVVZzUXl4M1EwRkJkME03VVVGRGVFTXNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeEhRVUZITEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc2FVSkJRV2xDTEVOQlF6ZERMR0ZCUVdFc1JVRkRZaXhaUVVGWkxFTkJRMllzUTBGQlF6dFJRVU5HTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUjBGQlJ5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMR2xDUVVGcFFpeERRVU0zUXl4aFFVRmhMRVZCUTJJc1dVRkJXU3hEUVVObUxFTkJRVU03U1VGRFRpeERRVUZETzBsQlJVUXNhMEpCUVd0Q08xRkJSV1FzU1VGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4WlFVRlpMRVZCUVVNN1dVRkRiRUlzSzBOQlFTdERPMWxCUXk5RExESkVRVUV5UkR0WlFVTXpSQ3hKUVVGSkxFTkJRVU1zV1VGQldTeEhRVUZITEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1lVRkJZU3hGUVVGRkxFTkJRVU03V1VGRE5VTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhYUVVGWExFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4VlFVRlZMRVZCUVVVc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETzFsQlJUTkVMSE5FUVVGelJEdFpRVU4wUkN4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExHRkJRV0VzUTBGRGFrSXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhWUVVGVkxFVkJRMnhDTEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1kwRkJZeXhGUVVOMFFpeEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMR0ZCUVdFc1EwRkRlRUlzUTBGQlF6dFpRVU5HTEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1lVRkJZU3hEUVVOcVFpeEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMRlZCUVZVc1JVRkRiRUlzU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4alFVRmpMRVZCUTNSQ0xFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNZVUZCWVN4RFFVTjRRaXhEUVVGRE8xbEJRMFlzU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4aFFVRmhMRU5CUTJwQ0xFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNWVUZCVlN4RlFVTnNRaXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEd0Q1FVRnJRaXhGUVVNeFFpeEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMRTFCUVUwc1EwRkRha0lzUTBGQlF6dFpRVU5HTEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1lVRkJZU3hEUVVOcVFpeEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMRlZCUVZVc1JVRkRiRUlzU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4clFrRkJhMElzUlVGRE1VSXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhOUVVGTkxFTkJRMnBDTEVOQlFVTTdVMEZEVER0UlFVVkVMRWxCUVVrc1YwRkJWeXhIUVVGSExFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhYUVVGWExFTkJRVU1zWlVGQlpTeEZRVUZGTEVOQlFVTXNWMEZCVnl4RFFVRkRPMUZCUTJ4R0xFbEJRVWtzVlVGQlZTeEhRVUZITEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eFhRVUZYTEVOQlFVTXNaVUZCWlN4RlFVRkZMRU5CUVVNc1ZVRkJWU3hEUVVGRE8xRkJSV2hHTEVsQlFVY3NTVUZCU1N4RFFVRkRMR1ZCUVdVc1NVRkJTU3hYUVVGWExFbEJRVWtzU1VGQlNTeERRVUZETEdOQlFXTXNTVUZCU1N4VlFVRlZMRVZCUVVNN1dVRkRlRVVzZFVSQlFYVkVPMWxCUTNaRUxFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNWVUZCVlN4RFFVTmtMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zVlVGQlZTeEZRVU5zUWl4RFFVRkRMRVZCUTBRc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eEpRVUZKTEVWQlExb3NWVUZCVlN4RlFVTldMRmRCUVZjc1JVRkRXQ3hEUVVGRExFVkJRMFFzU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4SlFVRkpMRVZCUTFvc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eGhRVUZoTEVWQlEzSkNMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4WFFVRlhMRU5CUVVNc1pVRkJaU3hGUVVGRkxFTkJRM1JFTEVOQlFVTTdVMEZEVER0aFFVRk5PMWxCUTBnc2FVUkJRV2xFTzFsQlEycEVMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zWVVGQllTeERRVU5xUWl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExGVkJRVlVzUlVGRGJFSXNRMEZCUXl4RlFVTkVMRU5CUVVNc1JVRkRSQ3hEUVVGRExFVkJRMFFzVlVGQlZTeEZRVU5XTEZkQlFWY3NSVUZEV0N4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExFbEJRVWtzUlVGRFdpeEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMR0ZCUVdFc1JVRkRja0lzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExGZEJRVmNzUTBGQlF5eGxRVUZsTEVWQlFVVXNRMEZEZEVRc1EwRkJRenRUUVVOTU8xRkJSVVFzYVVOQlFXbERPMUZCUTJwRExFbEJRVWtzUTBGQlF5eGxRVUZsTEVkQlFVY3NWMEZCVnl4RFFVRkRPMUZCUTI1RExFbEJRVWtzUTBGQlF5eGpRVUZqTEVkQlFVY3NWVUZCVlN4RFFVRkRPMGxCUTNKRExFTkJRVU03U1VGRlJDeFhRVUZYTzFGQlExQXNOa1JCUVRaRU8xRkJRemRFTzFsQlEwa3NNRVpCUVRCR08xbEJRekZHTEVsQlFVa3NRMEZCUXl4alFVRmpMRWRCUVVjc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eFpRVUZaTEVWQlFVVXNRMEZCUXp0WlFVTTNReXd5UWtGQk1rSTdXVUZETTBJc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eFZRVUZWTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhaUVVGWkxFVkJRVVVzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkRPMWxCUXpsRUxHdEZRVUZyUlR0WlFVTnNSU3hKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEhWQ1FVRjFRaXhEUVVGRExFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhEUVVGRE8xbEJSWFpFTEN0R1FVRXJSanRaUVVNdlJpeHJRa0ZCYTBJN1dVRkRiRUlzU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4VlFVRlZMRU5CUTJRc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eFpRVUZaTEVWQlEzQkNMRWxCUVVrc1dVRkJXU3hEUVVGRE8yZENRVU5pTEVOQlFVTXNSMEZCUnl4RlFVRkhMRWRCUVVjN1owSkJRMVFzUjBGQlJ5eEZRVUZITEVkQlFVYzdaMEpCUTFZc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF5eEhRVUZITzJkQ1FVTldMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU1zUjBGQlJ6dG5Ra0ZEVkN4SFFVRkhMRVZCUVVjc1IwRkJSenRuUWtGRFZDeEhRVUZITEVWQlFVVXNRMEZCUXl4SFFVRkhPMkZCUTJJc1EwRkJReXhGUVVOR0xFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNWMEZCVnl4RFFVTjBRaXhEUVVGRE8xbEJSVVlzTkVkQlFUUkhPMWxCUXpWSExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNiVUpCUVcxQ0xFTkJRM1pDTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUlVGRGNrSXNRMEZCUXl4RFFVRkRMRkZCUVZFc1JVRkRWaXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEV0QlFVc3NRMEZCUXl4UlFVRlJMRVZCUTNSQ0xFdEJRVXNzUTBGQlF5eGhRVUZoTEVWQlEyNUNMRU5CUVVNc1EwRkJReXhWUVVGVkxFVkJRMW9zUTBGQlF5eERRVUZETEZWQlFWVXNRMEZEWml4RFFVRkRPMU5CUTB3N1VVRkZSQ3hyUlVGQmEwVTdVVUZEYkVVN1dVRkRTU3hKUVVGSkxFTkJRVU1zWTBGQll5eEhRVUZITEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1dVRkJXU3hGUVVGRkxFTkJRVU03V1VGRE4wTXNjVU5CUVhGRE8xbEJRM0pETEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1ZVRkJWU3hEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNXVUZCV1N4RlFVRkZMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF6dFpRVU01UkN4eFJVRkJjVVU3V1VGRGNrVXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNRMEZCUXp0WlFVVjJSQ3huUlVGQlowVTdXVUZEYUVVc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eFZRVUZWTEVOQlEyUXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhaUVVGWkxFVkJRM0JDTEVsQlFVa3NXVUZCV1N4RFFVRkRPMmRDUVVOaUxFZEJRVWNzUlVGQlJTeEhRVUZITzJkQ1FVTlNMRWRCUVVjc1JVRkJSU3hIUVVGSE8yZENRVU5TTEVkQlFVY3NSVUZCUlN4SFFVRkhPMmRDUVVOU0xFZEJRVWNzUlVGQlJTeEhRVUZITzJkQ1FVTlNMRWRCUVVjc1JVRkJSU3hIUVVGSE8yZENRVU5TTEVkQlFVY3NSVUZCUlN4SFFVRkhPMkZCUTFnc1EwRkJReXhGUVVOR0xFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNWMEZCVnl4RFFVTjBRaXhEUVVGRE8xbEJSVVlzYzBoQlFYTklPMWxCUTNSSUxFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNiVUpCUVcxQ0xFTkJRM1pDTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUlVGRGNrSXNRMEZCUXl4RFFVRkRMRkZCUVZFc1JVRkRWaXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEV0QlFVc3NRMEZCUXl4UlFVRlJMRVZCUTNSQ0xFdEJRVXNzUTBGQlF5eGhRVUZoTEVWQlEyNUNMRU5CUVVNc1EwRkJReXhWUVVGVkxFVkJRMW9zUTBGQlF5eERRVUZETEZWQlFWVXNRMEZEWml4RFFVRkRPMU5CUTB3N1NVRkRUQ3hEUVVGRE8wbEJSVVFzYTBKQlFXdENMRU5CUVVNc1QwRkJhMEk3VVVGRGFrTXNjMFJCUVZVc1EwRkJReXhuUlVGQmIwSXNSVUZCUlN4RlFVRkZMRzlDUVVGdlFpeERRVUZETEVOQlFVTTdVVUZGZWtRc1NVRkJTU3hEUVVGRExGTkJRVk1zUjBGQlJ5eFBRVUZQTEVOQlFVTTdVVUZEZWtJc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhMUVVGTExFVkJRVVVzUjBGQlJ5eEZRVUZGTzFsQlEzaERMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNSVUZCUlN4RFFVRkRPMUZCUXpWQ0xFTkJRVU1zUTBGQlF5eERRVUZETzFGQlJVZ3NhVUpCUVdsQ08xRkJRMnBDTEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJRenRSUVVOa0xFbEJRVWtzUTBGQlF5eFhRVUZYTEVWQlFVVXNRMEZCUXp0UlFVTnVRaXhKUVVGSkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEVOQlFVTTdVVUZGYmtJc1QwRkJUeXhEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEZGQlFWRXNSVUZCUlN4RlFVRkZPMWxCUTNKRUxFbEJRVWtzUTBGQlF5eFZRVUZWTEVkQlFVY3NVVUZCVVN4RFFVRkRPMWxCUlROQ0xIRkdRVUZ4Ump0WlFVTnlSaXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEdsQ1FVRnBRaXhEUVVGRE8yZENRVU0zUWl4VFFVRlRMRVZCUVVVc1NVRkJTU3haUVVGWkxFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRE8yRkJRM1pFTEVOQlFVTXNRMEZCUXp0WlFVVklMRFpGUVVFMlJUdFpRVU0zUlN4SlFVRkhMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zYlVKQlFXMUNMRVZCUVVVN1owSkJRMjVETEV0QlFVc3NTVUZCU1N4VFFVRlRMRWxCUVVrc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eHRRa0ZCYlVJc1JVRkJSVHR2UWtGRGRFUXNTVUZCUnl4VFFVRlRMRWxCUVVrc1JVRkJSU3hGUVVGRE8zZENRVU5tTEU5QlFVOHNRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0eFFrRkRja003YVVKQlEwbzdZVUZEU2p0WlFVVkVMSEZFUVVGeFJEdFpRVU55UkN4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRjRVVzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZGU0N4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNZVUZCWVN4RFFVRkRMRWxCUVVrc1MwRkJTeXhEUVVGRExHdENRVUZyUWl4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOMlJTeERRVUZETzBsQlJVUXNZMEZCWXp0UlFVTldMRWxCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzU1VGQlNTeEpRVUZKTEVsQlFVa3NTVUZCU1N4RFFVRkRMRk5CUVZNc1NVRkJTU3hKUVVGSkxFVkJRVVU3V1VGRGFFUXNUMEZCVHp0VFFVTldPMUZCUlVRc1RVRkJUU3haUVVGWkxFZEJRVWNzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4VFFVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRE8xRkJRM0JFTEUxQlFVMHNWMEZCVnl4SFFVRkhMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNN1VVRkRia1FzVFVGQlRTeGhRVUZoTEVkQlFVY3NTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhUUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETzFGQlEzUkVMRTFCUVUwc1dVRkJXU3hIUVVGSExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU03VVVGQlFTeERRVUZETzFGQlJYUkVMRGhHUVVFNFJqdFJRVU01Uml4clFrRkJhMEk3VVVGRGJFSXNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeERRVUZETEhWQ1FVRjFRaXhEUVVGRExHdENRVUZyUWl4RFFVRkRMRWRCUVVjc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF6dFpRVU12UlN4blEwRkJaME03V1VGRGFFTXNXVUZCV1N4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxGbEJRVmtzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4WlFVRlpMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVWNzV1VGQldTeERRVUZETEVWQlFVVXNRMEZCUXp0WlFVTndSU3haUVVGWkxFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNXVUZCV1N4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxGbEJRVmtzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUnl4WlFVRlpMRU5CUVVNc1JVRkJSU3hEUVVGRE8xbEJRM0JGTEZsQlFWa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3haUVVGWkxFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNXVUZCV1N4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxGbEJRVmtzUTBGQlF5eEZRVUZGTEVOQlFVTTdXVUZEY0VVc1dVRkJXU3hEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEZsQlFWa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3haUVVGWkxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNXVUZCV1N4RFFVRkRMRVZCUVVVc1EwRkJRenRaUVVOd1JTeHBRMEZCYVVNN1dVRkRha01zVjBGQlZ5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRmRCUVZjc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeFhRVUZYTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVjc1YwRkJWeXhEUVVGRExFVkJRVVVzUTBGQlF6dFpRVU5vUlN4WFFVRlhMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzVjBGQlZ5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRmRCUVZjc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJ5eFhRVUZYTEVOQlFVTXNSVUZCUlN4RFFVRkRPMWxCUTJoRkxGZEJRVmNzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4WFFVRlhMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzVjBGQlZ5eERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRmRCUVZjc1EwRkJReXhGUVVGRkxFTkJRVU03V1VGRGFFVXNWMEZCVnl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxGZEJRVmNzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4WFFVRlhMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzVjBGQlZ5eERRVUZETEVWQlFVVXNRMEZCUXp0WlFVTm9SU3hwUTBGQmFVTTdXVUZEYWtNc1lVRkJZU3hEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEdGQlFXRXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hoUVVGaExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVY3NZVUZCWVN4RFFVRkRMRVZCUVVVc1EwRkJRenRaUVVONFJTeGhRVUZoTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1lVRkJZU3hEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEdGQlFXRXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSeXhoUVVGaExFTkJRVU1zUlVGQlJTeERRVUZETzFsQlEzaEZMR0ZCUVdFc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeGhRVUZoTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1lVRkJZU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEdGQlFXRXNRMEZCUXl4RlFVRkZMRU5CUVVNN1dVRkRlRVVzWVVGQllTeERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMR0ZCUVdFc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeGhRVUZoTEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1lVRkJZU3hEUVVGRExFVkJRVVVzUTBGQlF6dFpRVU40UlN4clEwRkJhME03V1VGRGJFTXNXVUZCV1N4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxGbEJRVmtzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4WlFVRlpMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVWNzV1VGQldTeERRVUZETEVWQlFVVXNRMEZCUXp0WlFVTndSU3haUVVGWkxFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNXVUZCV1N4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxGbEJRVmtzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUnl4WlFVRlpMRU5CUVVNc1JVRkJSU3hEUVVGRE8xbEJRM0JGTEZsQlFWa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3haUVVGWkxFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNXVUZCV1N4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxGbEJRVmtzUTBGQlF5eEZRVUZGTEVOQlFVTTdXVUZEY0VVc1dVRkJXU3hEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEZsQlFWa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3haUVVGWkxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNXVUZCV1N4RFFVRkRMRVZCUVVVc1EwRkJRenRUUVVOMlJTeERRVUZETEVOQlFVTTdTVUZEVUN4RFFVRkRPMGxCUlVRc1UwRkJVeXhEUVVGRExFbEJRWGxDTEVWQlFVVXNTMEZCWXp0UlFVTXZReXhKUVVGSkxFTkJRVU1zV1VGQldTeEhRVUZITEV0QlFVc3NRMEZCUXl4aFFVRmhMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzFGQlEzcEVMRWxCUVVrc1NVRkJTU3hEUVVGRExGbEJRVmtzUlVGQlJUdFpRVU51UWl4SlFVRkpMRU5CUVVNc1YwRkJWeXhGUVVGRkxFTkJRVU03V1VGRGJrSXNTVUZCUnl4SlFVRkpMRU5CUVVNc1VVRkJVU3hKUVVGSkxFbEJRVWtzU1VGQlNTeEpRVUZKTEVOQlFVTXNVMEZCVXl4SlFVRkpMRWxCUVVrc1JVRkJSVHRuUWtGRGFFUXNUMEZCVHp0aFFVTldPMWxCUlVRc1NVRkJTU3hEUVVGRExHTkJRV01zUlVGQlJTeERRVUZETzFsQlEzUkNMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNSVUZCUlN4RFFVRkRPMWxCUXpGQ0xFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXp0VFFVTnFRanRSUVVWRUxFbEJRVWtzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFMUJRVTBzUTBGQlF5eGhRVUZoTEVOQlFVTXNORVZCUVhWQ0xFTkJRVU1zUlVGQlJUdFpRVU55UlN4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExGbEJRVmtzUTBGQlF5eFBRVUZQTEVOQlF5OUNMRU5CUVVNc1RVRkJjVUlzUlVGQlJTeExRVUZoTEVWQlFVVXNTMEZCYzBJc1JVRkJSU3hGUVVGRk8yZENRVU0zUkN4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNXVUZCV1N4RFFVTnFReXhOUVVGTkxFVkJRMDRzUzBGQlN5eEZRVU5NTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUTJ4Q0xFTkJRVU03V1VGRFRpeERRVUZETEVWQlEwUXNTVUZCU1N4RFFVTlFMRU5CUVVNN1UwRkRURHRSUVVWRUxFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNjVUpCUVhGQ0xFTkJRMmhETEVOQlFVTXNTVUZCZVVJc1JVRkJSU3hMUVVGakxFVkJRVVVzUlVGQlJTeERRVU14UXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZEYkVNc1EwRkJRenRSUVVWR0xFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNZVUZCWVN4RFFVRkRMRWxCUVVrc05FUkJRVmtzUTBGQlF5eEZRVUZGTEVsQlFVa3NSVUZCUlN4TFFVRkxMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRGJFVXNRMEZCUXp0SlFVVlBMRmRCUVZjN1VVRkRaaXhKUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEZsQlFWa3NSVUZCUlR0WlFVTnVRaXhQUVVGUE8xTkJRMVk3VVVGRFJDeExRVUZMTEUxQlFVMHNTVUZCU1N4SlFVRkpMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zUzBGQlN5eEZRVUZGTzFsQlEzaERMRWxCUVVrc1NVRkJTU3hEUVVGRExFZEJRVWNzUzBGQlN5eE5RVUZOTEVWQlFVVTdaMEpCUTNKQ0xFbEJRVWtzUTBGQlF5eFJRVUZSTEVkQlFVY3NTVUZCU1N4RFFVRkRPMkZCUTNoQ08ybENRVU5KTEVsQlFVY3NTVUZCU1N4RFFVRkRMRWRCUVVjc1MwRkJTeXhQUVVGUExFVkJRVVU3WjBKQlF6RkNMRWxCUVVrc1EwRkJReXhUUVVGVExFZEJRVWNzU1VGQlNTeERRVUZETzJGQlEzcENPMU5CUTBvN1NVRkRUQ3hEUVVGRE8wbEJSVThzVFVGQlRUdFJRVU5XTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hGUVVGRk8xbEJRMVlzVDBGQlR6dFRRVU5XTzFGQlJVUXNkVVJCUVhWRU8xRkJRM1pFTEUxQlFVMHNUMEZCVHl4SFFVRkhMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zVjBGQlZ5eERRVUZETEZOQlFWTXNRMEZCUXp0UlFVTnlSQ3hKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEdWQlFXVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExGZEJRVmNzUlVGQlJTeFBRVUZQTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNN1VVRkZiRVVzZVVOQlFYbERPMUZCUTNwRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzVDBGQlR5eERRVUZETEdkQ1FVRm5RaXhGUVVGRkxFOUJRVThzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhEUVVGRE8xRkJSVFZGTERoRVFVRTRSRHRSUVVNNVJDeEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMRlZCUVZVc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEZOQlFWTXNRMEZCUXl4cFFrRkJhVUlzUlVGQlJTeERRVUZETEVOQlFVTXNWVUZCVlN4RlFVRkZMRU5CUVVNc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF6dEpRVU4yUml4RFFVRkRPMGxCUlVRc1RVRkJUU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRWxCUVcxQ08xRkJRM3BETEVsQlFVa3NVVUZCVVN4RFFVRkRMRkZCUVZFc1MwRkJTeXhSUVVGUkxFVkJRVVU3V1VGRGFFTXNkVVJCUVZjc1EwRkJReXhKUVVGSkxFVkJRVVVzYjBSQlFXOUVMRU5CUVVNc1EwRkJRenRUUVVNelJUdFJRVVZFTEVsQlFVa3NVMEZCVXl4RFFVRkRMRVZCUVVVc1JVRkJSVHRaUVVOa0xFOUJRVThzVTBGQlV5eERRVUZETEVWQlFVVXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0VFFVTm9SRHRoUVVGTk8xbEJRMGdzVDBGQlR5eEpRVUZKTEU5QlFVOHNRMEZCVlN4SFFVRkhMRVZCUVVVN1owSkJRemRDTEU5QlFVOHNTMEZCU3l4RFFVRkRPMWxCUTJwQ0xFTkJRVU1zUTBGQlF5eERRVUZETzFOQlEwNDdTVUZEVEN4RFFVRkRPME5CUTBvN096czdPenM3T3pzN08wRkRPV0ZFTEdWQlFXVXNXVUZCV1N3MlFrRkJOa0k3UVVGRGVFUTdRVUZEUVRzN096czdPMU5EUmtFN1UwRkRRVHM3VTBGRlFUdFRRVU5CTzFOQlEwRTdVMEZEUVR0VFFVTkJPMU5CUTBFN1UwRkRRVHRUUVVOQk8xTkJRMEU3VTBGRFFUdFRRVU5CTzFOQlEwRTdVMEZEUVRzN1UwRkZRVHRUUVVOQk96dFRRVVZCTzFOQlEwRTdVMEZEUVRzN096czdWVU4wUWtFN1ZVRkRRVHRWUVVOQk8xVkJRMEU3VlVGRFFTeDVRMEZCZVVNc2QwTkJRWGRETzFWQlEycEdPMVZCUTBFN1ZVRkRRVHM3T3pzN1ZVTlFRVHM3T3pzN1ZVTkJRVHRWUVVOQk8xVkJRMEU3VlVGRFFTeDFSRUZCZFVRc2FVSkJRV2xDTzFWQlEzaEZPMVZCUTBFc1owUkJRV2RFTEdGQlFXRTdWVUZETjBRN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRMDVCTEd0RVFVRnJSRHRCUVVVMlFqdEJRVU55UWp0QlFXRnFRenRCUVVNd1FqdEJRVU5CTzBGQlEwazdRVUZEUVR0QlFVTktPMEZCUTJNN1FVRkZSRHRCUVVWTk8wRkJTeTlDTzBGQlEzTkRPMEZCUTNCRE8wRkJRemhGTzBGQlEzaERPMEZCUTNoQ08wRkJRM2RDTzBGQlExSTdRVUZEUmp0QlFVVmpPMEZCUTFZN1FVRkRUVHRCUVVrelFqdEJRVU0yUWp0QlFVTTNReUlzSW5OdmRYSmpaWE1pT2xzaWQyVmljR0ZqYXpvdkwwQmxjR2xqWjJGdFpYTXRjSE12YkdsaUxYQnBlR1ZzYzNSeVpXRnRhVzVuWm5KdmJuUmxibVF0ZFdVMUxqUXZMaTl6Y21NdlFVWkxMMEZHUzBOdmJuUnliMnhzWlhJdWRITWlMQ0ozWldKd1lXTnJPaTh2UUdWd2FXTm5ZVzFsY3kxd2N5OXNhV0l0Y0dsNFpXeHpkSEpsWVcxcGJtZG1jbTl1ZEdWdVpDMTFaVFV1TkM4dUwzTnlZeTlEYjI1bWFXY3ZRMjl1Wm1sbkxuUnpJaXdpZDJWaWNHRmphem92TDBCbGNHbGpaMkZ0WlhNdGNITXZiR2xpTFhCcGVHVnNjM1J5WldGdGFXNW5abkp2Ym5SbGJtUXRkV1UxTGpRdkxpOXpjbU12UTI5dVptbG5MMU5sZEhScGJtZENZWE5sTG5Seklpd2lkMlZpY0dGamF6b3ZMMEJsY0dsaloyRnRaWE10Y0hNdmJHbGlMWEJwZUdWc2MzUnlaV0Z0YVc1blpuSnZiblJsYm1RdGRXVTFMalF2TGk5emNtTXZRMjl1Wm1sbkwxTmxkSFJwYm1kR2JHRm5MblJ6SWl3aWQyVmljR0ZqYXpvdkwwQmxjR2xqWjJGdFpYTXRjSE12YkdsaUxYQnBlR1ZzYzNSeVpXRnRhVzVuWm5KdmJuUmxibVF0ZFdVMUxqUXZMaTl6Y21NdlEyOXVabWxuTDFObGRIUnBibWRPZFcxaVpYSXVkSE1pTENKM1pXSndZV05yT2k4dlFHVndhV05uWVcxbGN5MXdjeTlzYVdJdGNHbDRaV3h6ZEhKbFlXMXBibWRtY205dWRHVnVaQzExWlRVdU5DOHVMM055WXk5RGIyNW1hV2N2VTJWMGRHbHVaMDl3ZEdsdmJpNTBjeUlzSW5kbFluQmhZMnM2THk5QVpYQnBZMmRoYldWekxYQnpMMnhwWWkxd2FYaGxiSE4wY21WaGJXbHVaMlp5YjI1MFpXNWtMWFZsTlM0MEx5NHZjM0pqTDBOdmJtWnBaeTlUWlhSMGFXNW5WR1Y0ZEM1MGN5SXNJbmRsWW5CaFkyczZMeTlBWlhCcFkyZGhiV1Z6TFhCekwyeHBZaTF3YVhobGJITjBjbVZoYldsdVoyWnliMjUwWlc1a0xYVmxOUzQwTHk0dmMzSmpMMFJoZEdGRGFHRnVibVZzTDBSaGRHRkRhR0Z1Ym1Wc1EyOXVkSEp2Ykd4bGNpNTBjeUlzSW5kbFluQmhZMnM2THk5QVpYQnBZMmRoYldWekxYQnpMMnhwWWkxd2FYaGxiSE4wY21WaGJXbHVaMlp5YjI1MFpXNWtMWFZsTlM0MEx5NHZjM0pqTDBSaGRHRkRhR0Z1Ym1Wc0wwUmhkR0ZEYUdGdWJtVnNUR0YwWlc1amVWUmxjM1JEYjI1MGNtOXNiR1Z5TG5Seklpd2lkMlZpY0dGamF6b3ZMMEJsY0dsaloyRnRaWE10Y0hNdmJHbGlMWEJwZUdWc2MzUnlaV0Z0YVc1blpuSnZiblJsYm1RdGRXVTFMalF2TGk5emNtTXZSR0YwWVVOb1lXNXVaV3d2UkdGMFlVTm9ZVzV1Wld4TVlYUmxibU41VkdWemRGSmxjM1ZzZEhNdWRITWlMQ0ozWldKd1lXTnJPaTh2UUdWd2FXTm5ZVzFsY3kxd2N5OXNhV0l0Y0dsNFpXeHpkSEpsWVcxcGJtZG1jbTl1ZEdWdVpDMTFaVFV1TkM4dUwzTnlZeTlFWVhSaFEyaGhibTVsYkM5RVlYUmhRMmhoYm01bGJGTmxibVJsY2k1MGN5SXNJbmRsWW5CaFkyczZMeTlBWlhCcFkyZGhiV1Z6TFhCekwyeHBZaTF3YVhobGJITjBjbVZoYldsdVoyWnliMjUwWlc1a0xYVmxOUzQwTHk0dmMzSmpMMFJoZEdGRGFHRnVibVZzTDBsdWFYUnBZV3hUWlhSMGFXNW5jeTUwY3lJc0luZGxZbkJoWTJzNkx5OUFaWEJwWTJkaGJXVnpMWEJ6TDJ4cFlpMXdhWGhsYkhOMGNtVmhiV2x1WjJaeWIyNTBaVzVrTFhWbE5TNDBMeTR2YzNKakwwUmhkR0ZEYUdGdWJtVnNMMHhoZEdWdVkzbFVaWE4wVW1WemRXeDBjeTUwY3lJc0luZGxZbkJoWTJzNkx5OUFaWEJwWTJkaGJXVnpMWEJ6TDJ4cFlpMXdhWGhsYkhOMGNtVmhiV2x1WjJaeWIyNTBaVzVrTFhWbE5TNDBMeTR2YzNKakwwWnlaV1Y2WlVaeVlXMWxMMFp5WldWNlpVWnlZVzFsTG5Seklpd2lkMlZpY0dGamF6b3ZMMEJsY0dsaloyRnRaWE10Y0hNdmJHbGlMWEJwZUdWc2MzUnlaV0Z0YVc1blpuSnZiblJsYm1RdGRXVTFMalF2TGk5emNtTXZSbkpsWlhwbFJuSmhiV1V2Um5KbFpYcGxSbkpoYldWRGIyNTBjbTlzYkdWeUxuUnpJaXdpZDJWaWNHRmphem92TDBCbGNHbGpaMkZ0WlhNdGNITXZiR2xpTFhCcGVHVnNjM1J5WldGdGFXNW5abkp2Ym5SbGJtUXRkV1UxTGpRdkxpOXpjbU12U1c1d2RYUnpMMFpoYTJWVWIzVmphRU52Ym5SeWIyeHNaWEl1ZEhNaUxDSjNaV0p3WVdOck9pOHZRR1Z3YVdObllXMWxjeTF3Y3k5c2FXSXRjR2w0Wld4emRISmxZVzFwYm1kbWNtOXVkR1Z1WkMxMVpUVXVOQzh1TDNOeVl5OUpibkIxZEhNdlIyRnRaWEJoWkVOdmJuUnliMnhzWlhJdWRITWlMQ0ozWldKd1lXTnJPaTh2UUdWd2FXTm5ZVzFsY3kxd2N5OXNhV0l0Y0dsNFpXeHpkSEpsWVcxcGJtZG1jbTl1ZEdWdVpDMTFaVFV1TkM4dUwzTnlZeTlKYm5CMWRITXZTRzkyWlhKcGJtZE5iM1Z6WlVWMlpXNTBjeTUwY3lJc0luZGxZbkJoWTJzNkx5OUFaWEJwWTJkaGJXVnpMWEJ6TDJ4cFlpMXdhWGhsYkhOMGNtVmhiV2x1WjJaeWIyNTBaVzVrTFhWbE5TNDBMeTR2YzNKakwwbHVjSFYwY3k5SmJuQjFkRU5zWVhOelpYTkdZV04wYjNKNUxuUnpJaXdpZDJWaWNHRmphem92TDBCbGNHbGpaMkZ0WlhNdGNITXZiR2xpTFhCcGVHVnNjM1J5WldGdGFXNW5abkp2Ym5SbGJtUXRkV1UxTGpRdkxpOXpjbU12U1c1d2RYUnpMMHRsZVdKdllYSmtRMjl1ZEhKdmJHeGxjaTUwY3lJc0luZGxZbkJoWTJzNkx5OUFaWEJwWTJkaGJXVnpMWEJ6TDJ4cFlpMXdhWGhsYkhOMGNtVmhiV2x1WjJaeWIyNTBaVzVrTFhWbE5TNDBMeTR2YzNKakwwbHVjSFYwY3k5TWIyTnJaV1JOYjNWelpVVjJaVzUwY3k1MGN5SXNJbmRsWW5CaFkyczZMeTlBWlhCcFkyZGhiV1Z6TFhCekwyeHBZaTF3YVhobGJITjBjbVZoYldsdVoyWnliMjUwWlc1a0xYVmxOUzQwTHk0dmMzSmpMMGx1Y0hWMGN5OU5iM1Z6WlVKMWRIUnZibk11ZEhNaUxDSjNaV0p3WVdOck9pOHZRR1Z3YVdObllXMWxjeTF3Y3k5c2FXSXRjR2w0Wld4emRISmxZVzFwYm1kbWNtOXVkR1Z1WkMxMVpUVXVOQzh1TDNOeVl5OUpibkIxZEhNdlRXOTFjMlZEYjI1MGNtOXNiR1Z5TG5Seklpd2lkMlZpY0dGamF6b3ZMMEJsY0dsaloyRnRaWE10Y0hNdmJHbGlMWEJwZUdWc2MzUnlaV0Z0YVc1blpuSnZiblJsYm1RdGRXVTFMalF2TGk5emNtTXZTVzV3ZFhSekwxTndaV05wWVd4TFpYbERiMlJsY3k1MGN5SXNJbmRsWW5CaFkyczZMeTlBWlhCcFkyZGhiV1Z6TFhCekwyeHBZaTF3YVhobGJITjBjbVZoYldsdVoyWnliMjUwWlc1a0xYVmxOUzQwTHk0dmMzSmpMMGx1Y0hWMGN5OVViM1ZqYUVOdmJuUnliMnhzWlhJdWRITWlMQ0ozWldKd1lXTnJPaTh2UUdWd2FXTm5ZVzFsY3kxd2N5OXNhV0l0Y0dsNFpXeHpkSEpsWVcxcGJtZG1jbTl1ZEdWdVpDMTFaVFV1TkM4dUwzTnlZeTlKYm5CMWRITXZXRkpIWVcxbGNHRmtRMjl1ZEhKdmJHeGxjaTUwY3lJc0luZGxZbkJoWTJzNkx5OUFaWEJwWTJkaGJXVnpMWEJ6TDJ4cFlpMXdhWGhsYkhOMGNtVmhiV2x1WjJaeWIyNTBaVzVrTFhWbE5TNDBMeTR2YzNKakwweHZaMmRsY2k5TWIyZG5aWEl1ZEhNaUxDSjNaV0p3WVdOck9pOHZRR1Z3YVdObllXMWxjeTF3Y3k5c2FXSXRjR2w0Wld4emRISmxZVzFwYm1kbWNtOXVkR1Z1WkMxMVpUVXVOQzh1TDNOeVl5OVFaV1Z5UTI5dWJtVmpkR2x2YmtOdmJuUnliMnhzWlhJdlFXZG5jbVZuWVhSbFpGTjBZWFJ6TG5Seklpd2lkMlZpY0dGamF6b3ZMMEJsY0dsaloyRnRaWE10Y0hNdmJHbGlMWEJwZUdWc2MzUnlaV0Z0YVc1blpuSnZiblJsYm1RdGRXVTFMalF2TGk5emNtTXZVR1ZsY2tOdmJtNWxZM1JwYjI1RGIyNTBjbTlzYkdWeUwwTmhibVJwWkdGMFpWQmhhWEpUZEdGMGN5NTBjeUlzSW5kbFluQmhZMnM2THk5QVpYQnBZMmRoYldWekxYQnpMMnhwWWkxd2FYaGxiSE4wY21WaGJXbHVaMlp5YjI1MFpXNWtMWFZsTlM0MEx5NHZjM0pqTDFCbFpYSkRiMjV1WldOMGFXOXVRMjl1ZEhKdmJHeGxjaTlEWVc1a2FXUmhkR1ZUZEdGMExuUnpJaXdpZDJWaWNHRmphem92TDBCbGNHbGpaMkZ0WlhNdGNITXZiR2xpTFhCcGVHVnNjM1J5WldGdGFXNW5abkp2Ym5SbGJtUXRkV1UxTGpRdkxpOXpjbU12VUdWbGNrTnZibTVsWTNScGIyNURiMjUwY205c2JHVnlMMFJoZEdGRGFHRnVibVZzVTNSaGRITXVkSE1pTENKM1pXSndZV05yT2k4dlFHVndhV05uWVcxbGN5MXdjeTlzYVdJdGNHbDRaV3h6ZEhKbFlXMXBibWRtY205dWRHVnVaQzExWlRVdU5DOHVMM055WXk5UVpXVnlRMjl1Ym1WamRHbHZia052Ym5SeWIyeHNaWEl2U1c1aWIzVnVaRkpVVUZOMFlYUnpMblJ6SWl3aWQyVmljR0ZqYXpvdkwwQmxjR2xqWjJGdFpYTXRjSE12YkdsaUxYQnBlR1ZzYzNSeVpXRnRhVzVuWm5KdmJuUmxibVF0ZFdVMUxqUXZMaTl6Y21NdlVHVmxja052Ym01bFkzUnBiMjVEYjI1MGNtOXNiR1Z5TDA5MWRFSnZkVzVrVWxSUVUzUmhkSE11ZEhNaUxDSjNaV0p3WVdOck9pOHZRR1Z3YVdObllXMWxjeTF3Y3k5c2FXSXRjR2w0Wld4emRISmxZVzFwYm1kbWNtOXVkR1Z1WkMxMVpUVXVOQzh1TDNOeVl5OVFaV1Z5UTI5dWJtVmpkR2x2YmtOdmJuUnliMnhzWlhJdlVHVmxja052Ym01bFkzUnBiMjVEYjI1MGNtOXNiR1Z5TG5Seklpd2lkMlZpY0dGamF6b3ZMMEJsY0dsaloyRnRaWE10Y0hNdmJHbGlMWEJwZUdWc2MzUnlaV0Z0YVc1blpuSnZiblJsYm1RdGRXVTFMalF2TGk5emNtTXZVR1ZsY2tOdmJtNWxZM1JwYjI1RGIyNTBjbTlzYkdWeUwxTmxjM05wYjI1VGRHRjBjeTUwY3lJc0luZGxZbkJoWTJzNkx5OUFaWEJwWTJkaGJXVnpMWEJ6TDJ4cFlpMXdhWGhsYkhOMGNtVmhiV2x1WjJaeWIyNTBaVzVrTFhWbE5TNDBMeTR2YzNKakwxQmxaWEpEYjI1dVpXTjBhVzl1UTI5dWRISnZiR3hsY2k5VGRISmxZVzFUZEdGMGN5NTBjeUlzSW5kbFluQmhZMnM2THk5QVpYQnBZMmRoYldWekxYQnpMMnhwWWkxd2FYaGxiSE4wY21WaGJXbHVaMlp5YjI1MFpXNWtMWFZsTlM0MEx5NHZjM0pqTDFCcGVHVnNVM1J5WldGdGFXNW5MMUJwZUdWc1UzUnlaV0Z0YVc1bkxuUnpJaXdpZDJWaWNHRmphem92TDBCbGNHbGpaMkZ0WlhNdGNITXZiR2xpTFhCcGVHVnNjM1J5WldGdGFXNW5abkp2Ym5SbGJtUXRkV1UxTGpRdkxpOXpjbU12VlVrdlQyNVRZM0psWlc1TFpYbGliMkZ5WkM1MGN5SXNJbmRsWW5CaFkyczZMeTlBWlhCcFkyZGhiV1Z6TFhCekwyeHBZaTF3YVhobGJITjBjbVZoYldsdVoyWnliMjUwWlc1a0xYVmxOUzQwTHk0dmMzSmpMMVZsU1c1emRHRnVZMlZOWlhOellXZGxMMUpsYzNCdmJuTmxRMjl1ZEhKdmJHeGxjaTUwY3lJc0luZGxZbkJoWTJzNkx5OUFaWEJwWTJkaGJXVnpMWEJ6TDJ4cFlpMXdhWGhsYkhOMGNtVmhiV2x1WjJaeWIyNTBaVzVrTFhWbE5TNDBMeTR2YzNKakwxVmxTVzV6ZEdGdVkyVk5aWE56WVdkbEwxTmxibVJOWlhOellXZGxRMjl1ZEhKdmJHeGxjaTUwY3lJc0luZGxZbkJoWTJzNkx5OUFaWEJwWTJkaGJXVnpMWEJ6TDJ4cFlpMXdhWGhsYkhOMGNtVmhiV2x1WjJaeWIyNTBaVzVrTFhWbE5TNDBMeTR2YzNKakwxVmxTVzV6ZEdGdVkyVk5aWE56WVdkbEwxTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5TG5Seklpd2lkMlZpY0dGamF6b3ZMMEJsY0dsaloyRnRaWE10Y0hNdmJHbGlMWEJwZUdWc2MzUnlaV0Z0YVc1blpuSnZiblJsYm1RdGRXVTFMalF2TGk5emNtTXZWV1ZKYm5OMFlXNWpaVTFsYzNOaFoyVXZWRzlUZEhKbFlXMWxjazFsYzNOaFoyVnpRMjl1ZEhKdmJHeGxjaTUwY3lJc0luZGxZbkJoWTJzNkx5OUFaWEJwWTJkaGJXVnpMWEJ6TDJ4cFlpMXdhWGhsYkhOMGNtVmhiV2x1WjJaeWIyNTBaVzVrTFhWbE5TNDBMeTR2YzNKakwxVjBhV3d2UTI5dmNtUnBibUYwWlVOdmJuWmxjblJsY2k1MGN5SXNJbmRsWW5CaFkyczZMeTlBWlhCcFkyZGhiV1Z6TFhCekwyeHBZaTF3YVhobGJITjBjbVZoYldsdVoyWnliMjUwWlc1a0xYVmxOUzQwTHk0dmMzSmpMMVYwYVd3dlJYWmxiblJGYldsMGRHVnlMblJ6SWl3aWQyVmljR0ZqYXpvdkwwQmxjR2xqWjJGdFpYTXRjSE12YkdsaUxYQnBlR1ZzYzNSeVpXRnRhVzVuWm5KdmJuUmxibVF0ZFdVMUxqUXZMaTl6Y21NdlZYUnBiQzlGZG1WdWRFeHBjM1JsYm1WeVZISmhZMnRsY2k1MGN5SXNJbmRsWW5CaFkyczZMeTlBWlhCcFkyZGhiV1Z6TFhCekwyeHBZaTF3YVhobGJITjBjbVZoYldsdVoyWnliMjUwWlc1a0xYVmxOUzQwTHk0dmMzSmpMMVYwYVd3dlJtbHNaVlYwYVd3dWRITWlMQ0ozWldKd1lXTnJPaTh2UUdWd2FXTm5ZVzFsY3kxd2N5OXNhV0l0Y0dsNFpXeHpkSEpsWVcxcGJtZG1jbTl1ZEdWdVpDMTFaVFV1TkM4dUwzTnlZeTlWZEdsc0wxSlVRMVYwYVd4ekxuUnpJaXdpZDJWaWNHRmphem92TDBCbGNHbGpaMkZ0WlhNdGNITXZiR2xpTFhCcGVHVnNjM1J5WldGdGFXNW5abkp2Ym5SbGJtUXRkV1UxTGpRdkxpOXpjbU12Vm1sa1pXOVFiR0Y1WlhJdlUzUnlaV0Z0UTI5dWRISnZiR3hsY2k1MGN5SXNJbmRsWW5CaFkyczZMeTlBWlhCcFkyZGhiV1Z6TFhCekwyeHBZaTF3YVhobGJITjBjbVZoYldsdVoyWnliMjUwWlc1a0xYVmxOUzQwTHk0dmMzSmpMMVpwWkdWdlVHeGhlV1Z5TDFacFpHVnZVR3hoZVdWeUxuUnpJaXdpZDJWaWNHRmphem92TDBCbGNHbGpaMkZ0WlhNdGNITXZiR2xpTFhCcGVHVnNjM1J5WldGdGFXNW5abkp2Ym5SbGJtUXRkV1UxTGpRdkxpOXpjbU12VjJWaVVuUmpVR3hoZVdWeUwxZGxZbEowWTFCc1lYbGxja052Ym5SeWIyeHNaWEl1ZEhNaUxDSjNaV0p3WVdOck9pOHZRR1Z3YVdObllXMWxjeTF3Y3k5c2FXSXRjR2w0Wld4emRISmxZVzFwYm1kbWNtOXVkR1Z1WkMxMVpUVXVOQzh1TDNOeVl5OVhaV0pUYjJOclpYUnpMMDFsYzNOaFoyVlNaV05sYVhabExuUnpJaXdpZDJWaWNHRmphem92TDBCbGNHbGpaMkZ0WlhNdGNITXZiR2xpTFhCcGVHVnNjM1J5WldGdGFXNW5abkp2Ym5SbGJtUXRkV1UxTGpRdkxpOXpjbU12VjJWaVUyOWphMlYwY3k5TlpYTnpZV2RsVTJWdVpDNTBjeUlzSW5kbFluQmhZMnM2THk5QVpYQnBZMmRoYldWekxYQnpMMnhwWWkxd2FYaGxiSE4wY21WaGJXbHVaMlp5YjI1MFpXNWtMWFZsTlM0MEx5NHZjM0pqTDFkbFlsTnZZMnRsZEhNdlUybG5ibUZzYkdsdVoxQnliM1J2WTI5c0xuUnpJaXdpZDJWaWNHRmphem92TDBCbGNHbGpaMkZ0WlhNdGNITXZiR2xpTFhCcGVHVnNjM1J5WldGdGFXNW5abkp2Ym5SbGJtUXRkV1UxTGpRdkxpOXpjbU12VjJWaVUyOWphMlYwY3k5WFpXSlRiMk5yWlhSRGIyNTBjbTlzYkdWeUxuUnpJaXdpZDJWaWNHRmphem92TDBCbGNHbGpaMkZ0WlhNdGNITXZiR2xpTFhCcGVHVnNjM1J5WldGdGFXNW5abkp2Ym5SbGJtUXRkV1UxTGpRdkxpOXpjbU12VjJWaVdGSXZWMlZpV0ZKRGIyNTBjbTlzYkdWeUxuUnpJaXdpZDJWaWNHRmphem92TDBCbGNHbGpaMkZ0WlhNdGNITXZiR2xpTFhCcGVHVnNjM1J5WldGdGFXNW5abkp2Ym5SbGJtUXRkV1UxTGpRdlpYaDBaWEp1WVd3Z2JXOWtkV3hsSUZ3aWMyUndYQ0lpTENKM1pXSndZV05yT2k4dlFHVndhV05uWVcxbGN5MXdjeTlzYVdJdGNHbDRaV3h6ZEhKbFlXMXBibWRtY205dWRHVnVaQzExWlRVdU5DOTNaV0p3WVdOckwySnZiM1J6ZEhKaGNDSXNJbmRsWW5CaFkyczZMeTlBWlhCcFkyZGhiV1Z6TFhCekwyeHBZaTF3YVhobGJITjBjbVZoYldsdVoyWnliMjUwWlc1a0xYVmxOUzQwTDNkbFluQmhZMnN2Y25WdWRHbHRaUzlrWldacGJtVWdjSEp2Y0dWeWRIa2daMlYwZEdWeWN5SXNJbmRsWW5CaFkyczZMeTlBWlhCcFkyZGhiV1Z6TFhCekwyeHBZaTF3YVhobGJITjBjbVZoYldsdVoyWnliMjUwWlc1a0xYVmxOUzQwTDNkbFluQmhZMnN2Y25WdWRHbHRaUzlvWVhOUGQyNVFjbTl3WlhKMGVTQnphRzl5ZEdoaGJtUWlMQ0ozWldKd1lXTnJPaTh2UUdWd2FXTm5ZVzFsY3kxd2N5OXNhV0l0Y0dsNFpXeHpkSEpsWVcxcGJtZG1jbTl1ZEdWdVpDMTFaVFV1TkM5M1pXSndZV05yTDNKMWJuUnBiV1V2YldGclpTQnVZVzFsYzNCaFkyVWdiMkpxWldOMElpd2lkMlZpY0dGamF6b3ZMMEJsY0dsaloyRnRaWE10Y0hNdmJHbGlMWEJwZUdWc2MzUnlaV0Z0YVc1blpuSnZiblJsYm1RdGRXVTFMalF2TGk5emNtTXZjR2w0Wld4emRISmxZVzFwYm1kbWNtOXVkR1Z1WkM1MGN5SmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2THlCRGIzQjVjbWxuYUhRZ1JYQnBZeUJIWVcxbGN5d2dTVzVqTGlCQmJHd2dVbWxuYUhSeklGSmxjMlZ5ZG1Wa0xseHVYRzVwYlhCdmNuUWdleUJEYjI1bWFXY3NJRVpzWVdkekxDQk9kVzFsY21salVHRnlZVzFsZEdWeWN5QjlJR1p5YjIwZ0p5NHVMME52Ym1acFp5OURiMjVtYVdjbk8xeHVhVzF3YjNKMElIc2dURzluWjJWeUlIMGdabkp2YlNBbkxpNHZURzluWjJWeUwweHZaMmRsY2ljN1hHNXBiWEJ2Y25RZ2V5QlFhWGhsYkZOMGNtVmhiV2x1WnlCOUlHWnliMjBnSnk0dUwxQnBlR1ZzVTNSeVpXRnRhVzVuTDFCcGVHVnNVM1J5WldGdGFXNW5KenRjYm1sdGNHOXlkQ0I3WEc0Z0lDQWdRV1pyVkdsdFpXUlBkWFJGZG1WdWRDeGNiaUFnSUNCQlptdFhZWEp1YVc1blFXTjBhWFpoZEdWRmRtVnVkQ3hjYmlBZ0lDQkJabXRYWVhKdWFXNW5SR1ZoWTNScGRtRjBaVVYyWlc1MExGeHVJQ0FnSUVGbWExZGhjbTVwYm1kVmNHUmhkR1ZGZG1WdWRGeHVmU0JtY205dElDY3VMaTlWZEdsc0wwVjJaVzUwUlcxcGRIUmxjaWM3WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJCUmt0RGIyNTBjbTlzYkdWeUlIdGNiaUFnSUNBdkx5QjBhVzFsSUc5MWRDQnNiMmRwWXlCa1pYUmhhV3h6WEc0Z0lDQWdZV04wYVhabElEMGdabUZzYzJVN1hHNGdJQ0FnWTI5MWJuUmtiM2R1UVdOMGFYWmxJRDBnWm1Gc2MyVTdYRzRnSUNBZ2QyRnlibFJwYldWeU9pQlNaWFIxY201VWVYQmxQSFI1Y0dWdlppQnpaWFJVYVcxbGIzVjBQaUE5SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0JqYjNWdWRFUnZkMjRnUFNBd08xeHVJQ0FnSUdOdmRXNTBSRzkzYmxScGJXVnlPaUJTWlhSMWNtNVVlWEJsUEhSNWNHVnZaaUJ6WlhSSmJuUmxjblpoYkQ0Z1BTQjFibVJsWm1sdVpXUTdYRzRnSUNBZ1kyOXVabWxuT2lCRGIyNW1hV2M3WEc0Z0lDQWdjR2w0Wld4VGRISmxZVzFwYm1jNklGQnBlR1ZzVTNSeVpXRnRhVzVuTzF4dUlDQWdJRzl1UkdsemJXbHpjMEZtYXpvZ0tDa2dQVDRnZG05cFpEdGNibHh1SUNBZ0lHOXVRVVpMVkdsdFpXUlBkWFJEWVd4c1ltRmphem9nS0NrZ1BUNGdkbTlwWkR0Y2JseHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtGeHVJQ0FnSUNBZ0lDQmpiMjVtYVdjNklFTnZibVpwWnl4Y2JpQWdJQ0FnSUNBZ2NHbDRaV3hUZEhKbFlXMXBibWM2SUZCcGVHVnNVM1J5WldGdGFXNW5MRnh1SUNBZ0lDQWdJQ0J2YmtScGMyMXBjM05CWm1zNklDZ3BJRDArSUhadmFXUmNiaUFnSUNBcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1amIyNW1hV2NnUFNCamIyNW1hV2M3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjR2w0Wld4VGRISmxZVzFwYm1jZ1BTQndhWGhsYkZOMGNtVmhiV2x1Wnp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV2YmtScGMyMXBjM05CWm1zZ1BTQnZia1JwYzIxcGMzTkJabXM3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViMjVCUmt0VWFXMWxaRTkxZEVOaGJHeGlZV05ySUQwZ0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjBGR1N5QjBhVzFsWkNCdmRYUXNJR1JwWkNCNWIzVWdkMkZ1ZENCMGJ5QnZkbVZ5Y21sa1pTQjBhR2x6SUdOaGJHeGlZV05yUHlkY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1ZHaGxJRzFsZEdodlpITWdkR2hoZENCdlkyTjFjaUIzYUdWdUlHRnVJR0ZtYXlCbGRtVnVkQ0JzYVhOMFpXNWxjaUJwY3lCamJHbGphMlZrWEc0Z0lDQWdJQ292WEc0Z0lDQWdiMjVCWm10RGJHbGpheWdwSUh0Y2JpQWdJQ0FnSUNBZ1kyeGxZWEpKYm5SbGNuWmhiQ2gwYUdsekxtTnZkVzUwUkc5M2JsUnBiV1Z5S1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWhZM1JwZG1VZ2ZId2dkR2hwY3k1amIzVnVkR1J2ZDI1QlkzUnBkbVVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMzUmhjblJCWm10WFlYSnVhVzVuVkdsdFpYSW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y0dsNFpXeFRkSEpsWVcxcGJtY3VaR2x6Y0dGMFkyaEZkbVZ1ZENoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdVpYY2dRV1pyVjJGeWJtbHVaMFJsWVdOMGFYWmhkR1ZGZG1WdWRDZ3BYRzRnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVM1JoY25RZ2RHaGxJSGRoY201cGJtY2dkR2x0WlhJZ2FXWWdZU0IwYVcxbGIzVjBJR2x6SUhObGRDQm5jbVZoZEdWeUlIUm9ZWFFnTUNCelpXTnZibVJ6WEc0Z0lDQWdJQ292WEc0Z0lDQWdjM1JoY25SQlptdFhZWEp1YVc1blZHbHRaWElvS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTI5dVptbG5MbWRsZEU1MWJXVnlhV05UWlhSMGFXNW5WbUZzZFdVb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RuVnRaWEpwWTFCaGNtRnRaWFJsY25NdVFVWkxWR2x0Wlc5MWRGTmxZM05jYmlBZ0lDQWdJQ0FnSUNBZ0lDa2dQaUF3SUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTnZibVpwWnk1cGMwWnNZV2RGYm1GaWJHVmtLRVpzWVdkekxrRkdTMFJsZEdWamRHbHZiaWxjYmlBZ0lDQWdJQ0FnS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtRmpkR2wyWlNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1GamRHbDJaU0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbVZ6WlhSQlptdFhZWEp1YVc1blZHbHRaWElvS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVGRHOXdJSFJvWlNCaFptc2dkMkZ5Ym1sdVp5QjBhVzFsY2x4dUlDQWdJQ0FxTDF4dUlDQWdJSE4wYjNCQlptdFhZWEp1YVc1blZHbHRaWElvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WVdOMGFYWmxJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyOTFiblJrYjNkdVFXTjBhWFpsSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUdOc1pXRnlWR2x0Wlc5MWRDaDBhR2x6TG5kaGNtNVVhVzFsY2lrN1hHNGdJQ0FnSUNBZ0lHTnNaV0Z5U1c1MFpYSjJZV3dvZEdocGN5NWpiM1Z1ZEVSdmQyNVVhVzFsY2lrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1VHRjFjMlVnZEdobElIUnBiV1Z5SUhkb2FXTm9JSGRvWlc0Z1pXeGhjSE5sWkNCM2FXeHNJSGRoY200Z2RHaGxJSFZ6WlhJZ2RHaGxlU0JoY21VZ2FXNWhZM1JwZG1VdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0dGMWMyVkJabXRYWVhKdWFXNW5WR2x0WlhJb0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVlXTjBhWFpsSUQwZ1ptRnNjMlU3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nU1dZZ2RHaGxJSFZ6WlhJZ2FXNTBaWEpoWTNSeklIUm9aVzRnY21WelpYUWdkR2hsSUhkaGNtNXBibWNnZEdsdFpYSXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NtVnpaWFJCWm10WFlYSnVhVzVuVkdsdFpYSW9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1GamRHbDJaU0FtSmlCMGFHbHpMbU52Ym1acFp5NXBjMFpzWVdkRmJtRmliR1ZrS0Vac1lXZHpMa0ZHUzBSbGRHVmpkR2x2YmlrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOc1pXRnlWR2x0Wlc5MWRDaDBhR2x6TG5kaGNtNVVhVzFsY2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuZGhjbTVVYVcxbGNpQTlJSE5sZEZScGJXVnZkWFFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS0NrZ1BUNGdkR2hwY3k1aFkzUnBkbUYwWlVGbWEwVjJaVzUwS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqYjI1bWFXY3VaMlYwVG5WdFpYSnBZMU5sZEhScGJtZFdZV3gxWlNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdUblZ0WlhKcFkxQmhjbUZ0WlhSbGNuTXVRVVpMVkdsdFpXOTFkRk5sWTNOY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcElDb2dNVEF3TUZ4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZOb2IzY2dkR2hsSUVGR1N5QnZkbVZ5YkdGNUlHRnVaQ0JpWldkcGJpQjBhR1VnWTI5MWJuUkViM2R1WEc0Z0lDQWdJQ292WEc0Z0lDQWdZV04wYVhaaGRHVkJabXRGZG1WdWRDZ3BJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1VHRjFjMlVnZEdobElIUnBiV1Z5SUhkb2FXeGxJSFJvWlNCMWMyVnlJR2x6SUd4dmIydHBibWNnWVhRZ2RHaGxJR2x1WVdOMGFYWnBkSGtnZDJGeWJtbHVaeUJ2ZG1WeWJHRjVYRzRnSUNBZ0lDQWdJSFJvYVhNdWNHRjFjMlZCWm10WFlYSnVhVzVuVkdsdFpYSW9LVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QnBibk4wWVc1MGFXRjBaU0JoSUc1bGR5QnZkbVZ5YkdGNVhHNGdJQ0FnSUNBZ0lIUm9hWE11Y0dsNFpXeFRkSEpsWVcxcGJtY3VaR2x6Y0dGMFkyaEZkbVZ1ZENoY2JpQWdJQ0FnSUNBZ0lDQWdJRzVsZHlCQlptdFhZWEp1YVc1blFXTjBhWFpoZEdWRmRtVnVkQ2g3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5MWJuUkViM2R1T2lCMGFHbHpMbU52ZFc1MFJHOTNiaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYVhOdGFYTnpRV1pyT2lCMGFHbHpMbTl1UkdsemJXbHpjMEZtYTF4dUlDQWdJQ0FnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnS1R0Y2JseHVJQ0FnSUNBZ0lDQXZMeUIxY0dSaGRHVWdiM1Z5SUdOdmRXNTBSRzkzYmlCMGFXMWxjaUJoYm1RZ2IzWmxjbXhoZVNCamIyNTBaVzUwYzF4dUlDQWdJQ0FnSUNCMGFHbHpMbU52ZFc1MFJHOTNiaUE5SUhSb2FYTXVZMjl1Wm1sbkxtZGxkRTUxYldWeWFXTlRaWFIwYVc1blZtRnNkV1VvWEc0Z0lDQWdJQ0FnSUNBZ0lDQk9kVzFsY21salVHRnlZVzFsZEdWeWN5NUJSa3REYjNWdWRHUnZkMjVUWldOelhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyOTFiblJrYjNkdVFXTjBhWFpsSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXdhWGhsYkZOMGNtVmhiV2x1Wnk1a2FYTndZWFJqYUVWMlpXNTBLRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JtVjNJRUZtYTFkaGNtNXBibWRWY0dSaGRHVkZkbVZ1ZENoN0lHTnZkVzUwUkc5M2Jqb2dkR2hwY3k1amIzVnVkRVJ2ZDI0Z2ZTbGNiaUFnSUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QnBaaUIzWlNCaGNtVWdhVzRnYkc5amEyVmtJRzF2ZFhObElHVjRhWFFnY0c5cGJuUmxjbXh2WTJ0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxtTnZibVpwWnk1cGMwWnNZV2RGYm1GaWJHVmtLRVpzWVdkekxraHZkbVZ5YVc1blRXOTFjMlZOYjJSbEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdiV2x1YjNJZ2FHRmpheUIwYnlCaGJHeGxkbWxoZEdVZ2FXOXpJRzV2ZENCemRYQndiM0owYVc1bklIQnZhVzUwWlhKc2IyTnJYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aRzlqZFcxbGJuUXVaWGhwZEZCdmFXNTBaWEpNYjJOcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaRzlqZFcxbGJuUXVaWGhwZEZCdmFXNTBaWEpNYjJOcktDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0F2THlCeVpYTmxkQ0J2ZFhJZ1kyOTFiblJFYjNkdUlHbHVkR1Z5ZG1Gc0lHRmpZMjl5WkdsdVoyeDVYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyOTFiblJFYjNkdVZHbHRaWElnUFNCelpYUkpiblJsY25aaGJDZ29LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTnZkVzUwUkc5M2JpMHRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVkyOTFiblJFYjNkdUlEMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QlVhR1VnZFhObGNpQm1ZV2xzWldRZ2RHOGdZMnhwWTJzZ2MyOGdhR2xrWlNCMGFHVWdiM1psY214aGVTQmhibVFnWkdselkyOXVibVZqZENCMGFHVnRMbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNHbDRaV3hUZEhKbFlXMXBibWN1WkdsemNHRjBZMmhGZG1WdWRDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1WM0lFRm1hMVJwYldWa1QzVjBSWFpsYm5Rb0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dmJrRkdTMVJwYldWa1QzVjBRMkZzYkdKaFkyc29LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVURzluS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5XVzkxSUdoaGRtVWdZbVZsYmlCa2FYTmpiMjV1WldOMFpXUWdaSFZsSUhSdklHbHVZV04wYVhacGRIa25YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklITjNhWFJqYUNCdlptWWdkR2hsSUdGbWF5Qm1aV0YwZFhKbElHRnpJSE4wY21WaGJTQm9ZWE1nWTJ4dmMyVmtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1emRHOXdRV1pyVjJGeWJtbHVaMVJwYldWeUtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjR2w0Wld4VGRISmxZVzFwYm1jdVpHbHpjR0YwWTJoRmRtVnVkQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtVjNJRUZtYTFkaGNtNXBibWRWY0dSaGRHVkZkbVZ1ZENoN0lHTnZkVzUwUkc5M2Jqb2dkR2hwY3k1amIzVnVkRVJ2ZDI0Z2ZTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlMQ0F4TURBd0tUdGNiaUFnSUNCOVhHNTlYRzRpTENJdkx5QkRiM0I1Y21sbmFIUWdSWEJwWXlCSFlXMWxjeXdnU1c1akxpQkJiR3dnVW1sbmFIUnpJRkpsYzJWeWRtVmtMbHh1WEc1cGJYQnZjblFnZXlCTWIyZG5aWElnZlNCbWNtOXRJQ2N1TGk5TWIyZG5aWEl2VEc5bloyVnlKenRjYm1sdGNHOXlkQ0I3SUZObGRIUnBibWRHYkdGbklIMGdabkp2YlNBbkxpOVRaWFIwYVc1blJteGhaeWM3WEc1cGJYQnZjblFnZXlCVFpYUjBhVzVuVG5WdFltVnlJSDBnWm5KdmJTQW5MaTlUWlhSMGFXNW5UblZ0WW1WeUp6dGNibWx0Y0c5eWRDQjdJRk5sZEhScGJtZFVaWGgwSUgwZ1puSnZiU0FuTGk5VFpYUjBhVzVuVkdWNGRDYzdYRzVwYlhCdmNuUWdleUJUWlhSMGFXNW5UM0IwYVc5dUlIMGdabkp2YlNBbkxpOVRaWFIwYVc1blQzQjBhVzl1Snp0Y2JtbHRjRzl5ZENCN0lFVjJaVzUwUlcxcGRIUmxjaXdnVTJWMGRHbHVaM05EYUdGdVoyVmtSWFpsYm5RZ2ZTQm1jbTl0SUNjdUxpOVZkR2xzTDBWMlpXNTBSVzFwZEhSbGNpYzdYRzVwYlhCdmNuUWdleUJUWlhSMGFXNW5RbUZ6WlNCOUlHWnliMjBnSnk0dlUyVjBkR2x1WjBKaGMyVW5PMXh1WEc0dktpcGNiaUFxSUVFZ1kyOXNiR1ZqZEdsdmJpQnZaaUJtYkdGbmN5QjBhR0YwSUdOaGJpQmlaU0IwYjJkbmJHVmtJR0Z1WkNCaGNtVWdZMjl5WlNCMGJ5QmhiR3dnVUdsNFpXd2dVM1J5WldGdGFXNW5JR1Y0Y0dWeWFXVnVZMlZ6TGx4dUlDb2dWR2hsYzJVZ1lYSmxJSFZ6WldRZ2FXNGdkR2hsSUdCRGIyNW1hV2N1Um14aFozTmdJRzFoY0M1Y2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklFWnNZV2R6SUh0Y2JpQWdJQ0J6ZEdGMGFXTWdRWFYwYjBOdmJtNWxZM1FnUFNBblFYVjBiME52Ym01bFkzUW5JR0Z6SUdOdmJuTjBPMXh1SUNBZ0lITjBZWFJwWXlCQmRYUnZVR3hoZVZacFpHVnZJRDBnSjBGMWRHOVFiR0Y1Vm1sa1pXOG5JR0Z6SUdOdmJuTjBPMXh1SUNBZ0lITjBZWFJwWXlCQlJrdEVaWFJsWTNScGIyNGdQU0FuVkdsdFpXOTFkRWxtU1dSc1pTY2dZWE1nWTI5dWMzUTdYRzRnSUNBZ2MzUmhkR2xqSUVKeWIzZHpaWEpUWlc1a1QyWm1aWElnUFNBblQyWm1aWEpVYjFKbFkyVnBkbVVuSUdGeklHTnZibk4wTzF4dUlDQWdJSE4wWVhScFl5QkliM1psY21sdVowMXZkWE5sVFc5a1pTQTlJQ2RJYjNabGNtbHVaMDF2ZFhObEp5QmhjeUJqYjI1emREdGNiaUFnSUNCemRHRjBhV01nUm05eVkyVk5iMjV2UVhWa2FXOGdQU0FuUm05eVkyVk5iMjV2UVhWa2FXOG5JR0Z6SUdOdmJuTjBPMXh1SUNBZ0lITjBZWFJwWXlCR2IzSmpaVlJWVWs0Z1BTQW5SbTl5WTJWVVZWSk9KeUJoY3lCamIyNXpkRHRjYmlBZ0lDQnpkR0YwYVdNZ1JtRnJaVTF2ZFhObFYybDBhRlJ2ZFdOb1pYTWdQU0FuUm1GclpVMXZkWE5sVjJsMGFGUnZkV05vWlhNbklHRnpJR052Ym5OME8xeHVJQ0FnSUhOMFlYUnBZeUJKYzFGMVlXeHBkSGxEYjI1MGNtOXNiR1Z5SUQwZ0owTnZiblJ5YjJ4elVYVmhiR2wwZVNjZ1lYTWdZMjl1YzNRN1hHNGdJQ0FnYzNSaGRHbGpJRTFoZEdOb1ZtbGxkM0J2Y25SU1pYTnZiSFYwYVc5dUlEMGdKMDFoZEdOb1ZtbGxkM0J2Y25SU1pYTW5JR0Z6SUdOdmJuTjBPMXh1SUNBZ0lITjBZWFJwWXlCVGRHRnlkRlpwWkdWdlRYVjBaV1FnUFNBblUzUmhjblJXYVdSbGIwMTFkR1ZrSnlCaGN5QmpiMjV6ZER0Y2JpQWdJQ0J6ZEdGMGFXTWdVM1Z3Y0hKbGMzTkNjbTkzYzJWeVMyVjVjeUE5SUNkVGRYQndjbVZ6YzBKeWIzZHpaWEpMWlhsekp5QmhjeUJqYjI1emREdGNiaUFnSUNCemRHRjBhV01nVlhObFRXbGpJRDBnSjFWelpVMXBZeWNnWVhNZ1kyOXVjM1E3WEc0Z0lDQWdjM1JoZEdsaklFdGxlV0p2WVhKa1NXNXdkWFFnUFNBblMyVjVZbTloY21SSmJuQjFkQ2NnWVhNZ1kyOXVjM1E3WEc0Z0lDQWdjM1JoZEdsaklFMXZkWE5sU1c1d2RYUWdQU0FuVFc5MWMyVkpibkIxZENjZ1lYTWdZMjl1YzNRN1hHNGdJQ0FnYzNSaGRHbGpJRlJ2ZFdOb1NXNXdkWFFnUFNBblZHOTFZMmhKYm5CMWRDY2dZWE1nWTI5dWMzUTdYRzRnSUNBZ2MzUmhkR2xqSUVkaGJXVndZV1JKYm5CMWRDQTlJQ2RIWVcxbGNHRmtTVzV3ZFhRbklHRnpJR052Ym5OME8xeHVJQ0FnSUhOMFlYUnBZeUJZVWtOdmJuUnliMnhzWlhKSmJuQjFkQ0E5SUNkWVVrTnZiblJ5YjJ4c1pYSkpibkIxZENjZ1lYTWdZMjl1YzNRN1hHNGdJQ0FnYzNSaGRHbGpJRmRoYVhSR2IzSlRkSEpsWVcxbGNpQTlJQ2RYWVdsMFJtOXlVM1J5WldGdFpYSW5JR0Z6SUdOdmJuTjBPMXh1SUNBZ0lITjBZWFJwWXlCSWFXUmxWVWtnUFNBblNHbGtaVlZKSnlCaGN5QmpiMjV6ZER0Y2JuMWNibHh1Wlhod2IzSjBJSFI1Y0dVZ1JteGhaM05MWlhseklEMGdSWGhqYkhWa1pUeHJaWGx2WmlCMGVYQmxiMllnUm14aFozTXNJQ2R3Y205MGIzUjVjR1VuUGp0Y2JtVjRjRzl5ZENCMGVYQmxJRVpzWVdkelNXUnpJRDBnZEhsd1pXOW1JRVpzWVdkelcwWnNZV2R6UzJWNWMxMDdYRzVjYm1OdmJuTjBJR2x6Um14aFowbGtJRDBnS0dsa09pQnpkSEpwYm1jcE9pQnBaQ0JwY3lCR2JHRm5jMGxrY3lBOVBseHVJQ0FnSUU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVVNWhiV1Z6S0Vac1lXZHpLUzV6YjIxbEtGeHVJQ0FnSUNBZ0lDQW9ibUZ0WlRvZ1JteGhaM05MWlhsektTQTlQaUJHYkdGbmMxdHVZVzFsWFNBOVBUMGdhV1JjYmlBZ0lDQXBPMXh1WEc0dktpcGNiaUFxSUVFZ1kyOXNiR1ZqZEdsdmJpQnZaaUJ1ZFcxbGNtbGpJSEJoY21GdFpYUmxjbk1nZEdoaGRDQmhjbVVnWTI5eVpTQjBieUJoYkd3Z1VHbDRaV3dnVTNSeVpXRnRhVzVuSUdWNGNHVnlhV1Z1WTJWekxseHVJQ3BjYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUU1MWJXVnlhV05RWVhKaGJXVjBaWEp6SUh0Y2JpQWdJQ0J6ZEdGMGFXTWdRVVpMVkdsdFpXOTFkRk5sWTNNZ1BTQW5RVVpMVkdsdFpXOTFkQ2NnWVhNZ1kyOXVjM1E3WEc0Z0lDQWdjM1JoZEdsaklFRkdTME52ZFc1MFpHOTNibE5sWTNNZ1BTQW5RVVpMUTI5MWJuUmtiM2R1SnlCaGN5QmpiMjV6ZER0Y2JpQWdJQ0J6ZEdGMGFXTWdUV2x1VVZBZ1BTQW5UV2x1VVZBbklHRnpJR052Ym5OME8xeHVJQ0FnSUhOMFlYUnBZeUJOWVhoUlVDQTlJQ2ROWVhoUlVDY2dZWE1nWTI5dWMzUTdYRzRnSUNBZ2MzUmhkR2xqSUZkbFlsSlVRMFpRVXlBOUlDZFhaV0pTVkVOR1VGTW5JR0Z6SUdOdmJuTjBPMXh1SUNBZ0lITjBZWFJwWXlCWFpXSlNWRU5OYVc1Q2FYUnlZWFJsSUQwZ0oxZGxZbEpVUTAxcGJrSnBkSEpoZEdVbklHRnpJR052Ym5OME8xeHVJQ0FnSUhOMFlYUnBZeUJYWldKU1ZFTk5ZWGhDYVhSeVlYUmxJRDBnSjFkbFlsSlVRMDFoZUVKcGRISmhkR1VuSUdGeklHTnZibk4wTzF4dUlDQWdJSE4wWVhScFl5Qk5ZWGhTWldOdmJtNWxZM1JCZEhSbGJYQjBjeUE5SUNkTllYaFNaV052Ym01bFkzUkJkSFJsYlhCMGN5Y2dZWE1nWTI5dWMzUTdYRzRnSUNBZ2MzUmhkR2xqSUZOMGNtVmhiV1Z5UVhWMGIwcHZhVzVKYm5SbGNuWmhiQ0E5SUNkVGRISmxZVzFsY2tGMWRHOUtiMmx1U1c1MFpYSjJZV3duSUdGeklHTnZibk4wTzF4dWZWeHVYRzVsZUhCdmNuUWdkSGx3WlNCT2RXMWxjbWxqVUdGeVlXMWxkR1Z5YzB0bGVYTWdQU0JGZUdOc2RXUmxQRnh1SUNBZ0lHdGxlVzltSUhSNWNHVnZaaUJPZFcxbGNtbGpVR0Z5WVcxbGRHVnljeXhjYmlBZ0lDQW5jSEp2ZEc5MGVYQmxKMXh1UGp0Y2JtVjRjRzl5ZENCMGVYQmxJRTUxYldWeWFXTlFZWEpoYldWMFpYSnpTV1J6SUQxY2JpQWdJQ0IwZVhCbGIyWWdUblZ0WlhKcFkxQmhjbUZ0WlhSbGNuTmJUblZ0WlhKcFkxQmhjbUZ0WlhSbGNuTkxaWGx6WFR0Y2JseHVZMjl1YzNRZ2FYTk9kVzFsY21salNXUWdQU0FvYVdRNklITjBjbWx1WnlrNklHbGtJR2x6SUU1MWJXVnlhV05RWVhKaGJXVjBaWEp6U1dSeklEMCtYRzRnSUNBZ1QySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVUbUZ0WlhNb1RuVnRaWEpwWTFCaGNtRnRaWFJsY25NcExuTnZiV1VvWEc0Z0lDQWdJQ0FnSUNodVlXMWxPaUJPZFcxbGNtbGpVR0Z5WVcxbGRHVnljMHRsZVhNcElEMCtJRTUxYldWeWFXTlFZWEpoYldWMFpYSnpXMjVoYldWZElEMDlQU0JwWkZ4dUlDQWdJQ2s3WEc1Y2JpOHFLbHh1SUNvZ1FTQmpiMnhzWldOMGFXOXVJRzltSUhSbGVIUjFZV3dnY0dGeVlXMWxkR1Z5Y3lCMGFHRjBJR0Z5WlNCamIzSmxJSFJ2SUdGc2JDQlFhWGhsYkNCVGRISmxZVzFwYm1jZ1pYaHdaWEpwWlc1alpYTXVYRzRnS2x4dUlDb3ZYRzVsZUhCdmNuUWdZMnhoYzNNZ1ZHVjRkRkJoY21GdFpYUmxjbk1nZTF4dUlDQWdJSE4wWVhScFl5QlRhV2R1WVd4c2FXNW5VMlZ5ZG1WeVZYSnNJRDBnSjNOekp5QmhjeUJqYjI1emREdGNibjFjYmx4dVpYaHdiM0owSUhSNWNHVWdWR1Y0ZEZCaGNtRnRaWFJsY25OTFpYbHpJRDBnUlhoamJIVmtaVHhjYmlBZ0lDQnJaWGx2WmlCMGVYQmxiMllnVkdWNGRGQmhjbUZ0WlhSbGNuTXNYRzRnSUNBZ0ozQnliM1J2ZEhsd1pTZGNiajQ3WEc1bGVIQnZjblFnZEhsd1pTQlVaWGgwVUdGeVlXMWxkR1Z5YzBsa2N5QTlJSFI1Y0dWdlppQlVaWGgwVUdGeVlXMWxkR1Z5YzF0VVpYaDBVR0Z5WVcxbGRHVnljMHRsZVhOZE8xeHVYRzVqYjI1emRDQnBjMVJsZUhSSlpDQTlJQ2hwWkRvZ2MzUnlhVzVuS1RvZ2FXUWdhWE1nVkdWNGRGQmhjbUZ0WlhSbGNuTkpaSE1nUFQ1Y2JpQWdJQ0JQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsT1lXMWxjeWhVWlhoMFVHRnlZVzFsZEdWeWN5a3VjMjl0WlNoY2JpQWdJQ0FnSUNBZ0tHNWhiV1U2SUZSbGVIUlFZWEpoYldWMFpYSnpTMlY1Y3lrZ1BUNGdWR1Y0ZEZCaGNtRnRaWFJsY25OYmJtRnRaVjBnUFQwOUlHbGtYRzRnSUNBZ0tUdGNibHh1THlvcVhHNGdLaUJCSUdOdmJHeGxZM1JwYjI0Z2IyWWdaVzUxYlNCaVlYTmxaQ0J3WVhKaGJXVjBaWEp6SUhSb1lYUWdZWEpsSUdOdmNtVWdkRzhnWVd4c0lGQnBlR1ZzSUZOMGNtVmhiV2x1WnlCbGVIQmxjbWxsYm1ObGN5NWNiaUFxWEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCUGNIUnBiMjVRWVhKaGJXVjBaWEp6SUh0Y2JpQWdJQ0J6ZEdGMGFXTWdVSEpsWm1WeWNtVmtRMjlrWldNZ1BTQW5VSEpsWm1WeWNtVmtRMjlrWldNbklHRnpJR052Ym5OME8xeHVJQ0FnSUhOMFlYUnBZeUJUZEhKbFlXMWxja2xrSUQwZ0oxTjBjbVZoYldWeVNXUW5JR0Z6SUdOdmJuTjBPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ2RIbHdaU0JQY0hScGIyNVFZWEpoYldWMFpYSnpTMlY1Y3lBOUlFVjRZMngxWkdVOFhHNGdJQ0FnYTJWNWIyWWdkSGx3Wlc5bUlFOXdkR2x2YmxCaGNtRnRaWFJsY25Nc1hHNGdJQ0FnSjNCeWIzUnZkSGx3WlNkY2JqNDdYRzVsZUhCdmNuUWdkSGx3WlNCUGNIUnBiMjVRWVhKaGJXVjBaWEp6U1dSeklEMGdkSGx3Wlc5bUlFOXdkR2x2YmxCaGNtRnRaWFJsY25OYlQzQjBhVzl1VUdGeVlXMWxkR1Z5YzB0bGVYTmRPMXh1WEc1amIyNXpkQ0JwYzA5d2RHbHZia2xrSUQwZ0tHbGtPaUJ6ZEhKcGJtY3BPaUJwWkNCcGN5QlBjSFJwYjI1UVlYSmhiV1YwWlhKelNXUnpJRDArWEc0Z0lDQWdUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1VG1GdFpYTW9UM0IwYVc5dVVHRnlZVzFsZEdWeWN5a3VjMjl0WlNoY2JpQWdJQ0FnSUNBZ0tHNWhiV1U2SUU5d2RHbHZibEJoY21GdFpYUmxjbk5MWlhsektTQTlQaUJQY0hScGIyNVFZWEpoYldWMFpYSnpXMjVoYldWZElEMDlQU0JwWkZ4dUlDQWdJQ2s3WEc1Y2JpOHFLbHh1SUNvZ1ZYUnBiR2wwZVNCMGVYQmxjeUJtYjNJZ2FXNW1aWEp5YVc1bklHUmhkR0VnZEhsd1pTQmlZWE5sWkNCdmJpQnpaWFIwYVc1bklFbEVYRzRnS2k5Y2JtVjRjRzl5ZENCMGVYQmxJRTl3ZEdsdmJrbGtjeUE5WEc0Z0lDQWdmQ0JHYkdGbmMwbGtjMXh1SUNBZ0lId2dUblZ0WlhKcFkxQmhjbUZ0WlhSbGNuTkpaSE5jYmlBZ0lDQjhJRlJsZUhSUVlYSmhiV1YwWlhKelNXUnpYRzRnSUNBZ2ZDQlBjSFJwYjI1UVlYSmhiV1YwWlhKelNXUnpPMXh1Wlhod2IzSjBJSFI1Y0dVZ1QzQjBhVzl1UzJWNWN6eFVQaUE5SUZRZ1pYaDBaVzVrY3lCR2JHRm5jMGxrYzF4dUlDQWdJRDhnWW05dmJHVmhibHh1SUNBZ0lEb2dWQ0JsZUhSbGJtUnpJRTUxYldWeWFXTlFZWEpoYldWMFpYSnpTV1J6WEc0Z0lDQWdQeUJ1ZFcxaVpYSmNiaUFnSUNBNklGUWdaWGgwWlc1a2N5QlVaWGgwVUdGeVlXMWxkR1Z5YzBsa2MxeHVJQ0FnSUQ4Z2MzUnlhVzVuWEc0Z0lDQWdPaUJVSUdWNGRHVnVaSE1nVDNCMGFXOXVVR0Z5WVcxbGRHVnljMGxrYzF4dUlDQWdJRDhnYzNSeWFXNW5YRzRnSUNBZ09pQnVaWFpsY2p0Y2JseHVaWGh3YjNKMElIUjVjR1VnUVd4c1UyVjBkR2x1WjNNZ1BTQjdYRzRnSUNBZ1cwc2dhVzRnVDNCMGFXOXVTV1J6WFRvZ1QzQjBhVzl1UzJWNWN6eExQanRjYm4wN1hHNWNibVY0Y0c5eWRDQnBiblJsY21aaFkyVWdRMjl1Wm1sblVHRnlZVzF6SUh0Y2JpQWdJQ0F2S2lvZ1NXNXBkR2xoYkNCUWFYaGxiQ0JUZEhKbFlXMXBibWNnYzJWMGRHbHVaM01nS2k5Y2JpQWdJQ0JwYm1sMGFXRnNVMlYwZEdsdVozTS9PaUJRWVhKMGFXRnNQRUZzYkZObGRIUnBibWR6UGp0Y2JpQWdJQ0F2S2lvZ1NXWWdkWE5sVlhKc1VHRnlZVzF6SUdseklITmxkQ0IwY25WbExDQjNhV3hzSUhKbFlXUWdhVzVwZEdsaGJDQjJZV3gxWlhNZ1puSnZiU0JWVWt3Z2NHRnlZVzFsZEdWeWN5QmhibVFnY0dWeWMybHpkQ0JqYUdGdVoyVmtJSE5sZEhScGJtZHpJR2x1ZEc4Z1ZWSk1JQ292WEc0Z0lDQWdkWE5sVlhKc1VHRnlZVzF6UHpvZ1ltOXZiR1ZoYmp0Y2JuMWNibVY0Y0c5eWRDQmpiR0Z6Y3lCRGIyNW1hV2NnZTF4dUlDQWdJQzhxSUVFZ2JXRndJRzltSUdac1lXZHpJSFJvWVhRZ1kyRnVJR0psSUhSdloyZHNaV1FnTFNCdmNIUnBiMjV6SUhSb1lYUWdZMkZ1SUdKbElITmxkQ0JwYmlCMGFHVWdZWEJ3YkdsallYUnBiMjRnTFNCbExtY3VJRlZ6WlNCTmFXTS9JQ292WEc0Z0lDQWdjSEpwZG1GMFpTQm1iR0ZuY3lBOUlHNWxkeUJOWVhBOFJteGhaM05KWkhNc0lGTmxkSFJwYm1kR2JHRm5QaWdwTzF4dVhHNGdJQ0FnTHlvZ1FTQnRZWEFnYjJZZ2JuVnRaWEpwWTJGc0lITmxkSFJwYm1keklDMGdiM0IwYVc5dWN5QjBhR0YwSUdOaGJpQmlaU0JwYmlCMGFHVWdZWEJ3YkdsallYUnBiMjRnTFNCbExtY3VJRTFwYmtKcGRISmhkR1VnS2k5Y2JpQWdJQ0J3Y21sMllYUmxJRzUxYldWeWFXTlFZWEpoYldWMFpYSnpJRDBnYm1WM0lFMWhjRHhPZFcxbGNtbGpVR0Z5WVcxbGRHVnljMGxrY3l3Z1UyVjBkR2x1WjA1MWJXSmxjajRvS1R0Y2JseHVJQ0FnSUM4cUlFRWdiV0Z3SUc5bUlIUmxlSFFnYzJWMGRHbHVaM01nTFNCbExtY3VJSE5wWjI1aGJHeHBibWNnYzJWeWRtVnlJSFZ5YkNBcUwxeHVJQ0FnSUhCeWFYWmhkR1VnZEdWNGRGQmhjbUZ0WlhSbGNuTWdQU0J1WlhjZ1RXRndQRlJsZUhSUVlYSmhiV1YwWlhKelNXUnpMQ0JUWlhSMGFXNW5WR1Y0ZEQ0b0tUdGNibHh1SUNBZ0lDOHFJRUVnYldGd0lHOW1JR1Z1ZFcwZ1ltRnpaV1FnYzJWMGRHbHVaM01nTFNCbExtY3VJSEJ5WldabGNuSmxaQ0JqYjJSbFl5QXFMMXh1SUNBZ0lIQnlhWFpoZEdVZ2IzQjBhVzl1VUdGeVlXMWxkR1Z5Y3lBOUlHNWxkeUJOWVhBOFQzQjBhVzl1VUdGeVlXMWxkR1Z5YzBsa2N5d2dVMlYwZEdsdVowOXdkR2x2Ymo0b0tUdGNibHh1SUNBZ0lIQnlhWFpoZEdVZ1gzVnpaVlZ5YkZCaGNtRnRjem9nWW05dmJHVmhianRjYmx4dUlDQWdJQzh2SUMwdExTMHRMUzB0TFMwdExTQlRaWFIwYVc1bmN5QXRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9ZMjl1Wm1sbk9pQkRiMjVtYVdkUVlYSmhiWE1nUFNCN2ZTa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjdJR2x1YVhScFlXeFRaWFIwYVc1bmN5d2dkWE5sVlhKc1VHRnlZVzF6SUgwZ1BTQmpiMjVtYVdjN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNWelpWVnliRkJoY21GdGN5QTlJQ0VoZFhObFZYSnNVR0Z5WVcxek8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5CdmNIVnNZWFJsUkdWbVlYVnNkRk5sZEhScGJtZHpLSFJvYVhNdVgzVnpaVlZ5YkZCaGNtRnRjeXdnYVc1cGRHbGhiRk5sZEhScGJtZHpLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJVY25WbElHbG1JSEpsWVdScGJtY2dZMjl1Wm1sbmRYSmhkR2x2YmlCcGJtbDBhV0ZzSUhaaGJIVmxjeUJtY205dElGVlNUQ0J3WVhKaGJXVjBaWEp6TENCaGJtUmNiaUFnSUNBZ0tpQndaWEp6YVhOMGFXNW5JR05vWVc1blpYTWdhVzRnVlZKTUlIZG9aVzRnWTJoaGJtZGxaQzVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ1oyVjBJSFZ6WlZWeWJGQmhjbUZ0Y3lncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNWelpWVnliRkJoY21GdGN6dGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlFiM0IxYkdGMFpTQjBhR1VnWkdWbVlYVnNkQ0J6WlhSMGFXNW5jeUJtYjNJZ1lTQlFhWGhsYkNCVGRISmxZVzFwYm1jZ1lYQndiR2xqWVhScGIyNWNiaUFnSUNBZ0tpOWNiaUFnSUNCd2NtbDJZWFJsSUhCdmNIVnNZWFJsUkdWbVlYVnNkRk5sZEhScGJtZHpLSFZ6WlZWeWJGQmhjbUZ0Y3pvZ1ltOXZiR1ZoYml3Z2MyVjBkR2x1WjNNNklGQmhjblJwWVd3OFFXeHNVMlYwZEdsdVozTStLVG9nZG05cFpDQjdYRzRnSUNBZ0lDQWdJQzhxS2x4dUlDQWdJQ0FnSUNBZ0tpQlVaWGgwSUZCaGNtRnRaWFJsY25OY2JpQWdJQ0FnSUNBZ0lDb3ZYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NTBaWGgwVUdGeVlXMWxkR1Z5Y3k1elpYUW9YRzRnSUNBZ0lDQWdJQ0FnSUNCVVpYaDBVR0Z5WVcxbGRHVnljeTVUYVdkdVlXeHNhVzVuVTJWeWRtVnlWWEpzTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdibVYzSUZObGRIUnBibWRVWlhoMEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGUmxlSFJRWVhKaGJXVjBaWEp6TGxOcFoyNWhiR3hwYm1kVFpYSjJaWEpWY213c1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0oxTnBaMjVoYkd4cGJtY2dkWEpzSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblZYSnNJRzltSUhSb1pTQnphV2R1WVd4c2FXNW5JSE5sY25abGNpY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlYwZEdsdVozTWdKaVlnYzJWMGRHbHVaM011YUdGelQzZHVVSEp2Y0dWeWRIa29WR1Y0ZEZCaGNtRnRaWFJsY25NdVUybG5ibUZzYkdsdVoxTmxjblpsY2xWeWJDa2dQeUJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVjBkR2x1WjNOYlZHVjRkRkJoY21GdFpYUmxjbk11VTJsbmJtRnNiR2x1WjFObGNuWmxjbFZ5YkYwZ09seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FvYkc5allYUnBiMjR1Y0hKdmRHOWpiMndnUFQwOUlDZG9kSFJ3Y3pvbklEOGdKM2R6Y3pvdkx5Y2dPaUFuZDNNNkx5OG5LU0FyWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IzYVc1a2IzY3ViRzlqWVhScGIyNHVhRzl6ZEc1aGJXVWdLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnWm05eUlISmxZV1JoWW1sc2FYUjVMQ0IzWlNCdmJXbDBJSFJvWlNCd2IzSjBJR2xtSUdsMEozTWdPREJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2gzYVc1a2IzY3ViRzlqWVhScGIyNHVjRzl5ZENBOVBUMGdKemd3SnlCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QybHVaRzkzTG14dlkyRjBhVzl1TG5CdmNuUWdQVDA5SUNjblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQeUFuSjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEb2dZRG9rZTNkcGJtUnZkeTVzYjJOaGRHbHZiaTV3YjNKMGZXQXBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFZ6WlZWeWJGQmhjbUZ0YzF4dUlDQWdJQ0FnSUNBZ0lDQWdLVnh1SUNBZ0lDQWdJQ0FwTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11YjNCMGFXOXVVR0Z5WVcxbGRHVnljeTV6WlhRb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JQY0hScGIyNVFZWEpoYldWMFpYSnpMbE4wY21WaGJXVnlTV1FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnVaWGNnVTJWMGRHbHVaMDl3ZEdsdmJpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlBjSFJwYjI1UVlYSmhiV1YwWlhKekxsTjBjbVZoYldWeVNXUXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMU4wY21WaGJXVnlJRWxFSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblZHaGxJRWxFSUc5bUlIUm9aU0J6ZEhKbFlXMWxjaUIwYnlCemRISmxZVzB1Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpYUjBhVzVuY3lBbUppQnpaWFIwYVc1bmN5NW9ZWE5QZDI1UWNtOXdaWEowZVNoUGNIUnBiMjVRWVhKaGJXVjBaWEp6TGxOMGNtVmhiV1Z5U1dRcElEOWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWMGRHbHVaM05iVDNCMGFXOXVVR0Z5WVcxbGRHVnljeTVUZEhKbFlXMWxja2xrWFNBNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2NuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZ0ZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIVnpaVlZ5YkZCaGNtRnRjMXh1SUNBZ0lDQWdJQ0FnSUNBZ0tWeHVJQ0FnSUNBZ0lDQXBPMXh1WEc0Z0lDQWdJQ0FnSUM4cUtseHVJQ0FnSUNBZ0lDQWdLaUJGYm5WdElGQmhjbUZ0WlhSbGNuTmNiaUFnSUNBZ0lDQWdJQ292WEc0Z0lDQWdJQ0FnSUhSb2FYTXViM0IwYVc5dVVHRnlZVzFsZEdWeWN5NXpaWFFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQlBjSFJwYjI1UVlYSmhiV1YwWlhKekxsQnlaV1psY25KbFpFTnZaR1ZqTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdibVYzSUZObGRIUnBibWRQY0hScGIyNG9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdUM0IwYVc5dVVHRnlZVzFsZEdWeWN5NVFjbVZtWlhKeVpXUkRiMlJsWXl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblVISmxabVZ5Y21Wa0lFTnZaR1ZqSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblZHaGxJSEJ5WldabGNuSmxaQ0JqYjJSbFl5QjBieUJpWlNCMWMyVmtJR1IxY21sdVp5QmpiMlJsWXlCdVpXZHZkR2xoZEdsdmJpY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMGd5TmpRZ2JHVjJaV3d0WVhONWJXMWxkSEo1TFdGc2JHOTNaV1E5TVR0d1lXTnJaWFJwZW1GMGFXOXVMVzF2WkdVOU1UdHdjbTltYVd4bExXeGxkbVZzTFdsa1BUUXlaVEF4Wmljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVjBkR2x1WjNNZ0ppWWdjMlYwZEdsdVozTXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb1QzQjBhVzl1VUdGeVlXMWxkR1Z5Y3k1UWNtVm1aWEp5WldSRGIyUmxZeWtnUDF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmJjMlYwZEdsdVozTmJUM0IwYVc5dVVHRnlZVzFsZEdWeWN5NVFjbVZtWlhKeVpXUkRiMlJsWTExZElEcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS0daMWJtTjBhVzl1SUNncE9pQkJjbkpoZVR4emRISnBibWMrSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR0p5YjNkelpYSlRkWEJ3YjNKMFpXUkRiMlJsWTNNNklFRnljbUY1UEhOMGNtbHVaejRnUFNCYlhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRlJ5ZVNCblpYUWdkR2hsSUdsdVptOGdibVZsWkdWa0lHWnliMjBnZEdobElGSlVRMUowY0ZKbFkyVnBkbVZ5TGlCVWFHbHpJR2x6SUc5dWJIa2dZWFpoYVd4aFlteGxJRzl1SUdOb2NtOXRaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGU1ZFTlNkSEJTWldObGFYWmxjaTVuWlhSRFlYQmhZbWxzYVhScFpYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtOTNjMlZ5VTNWd2NHOXlkR1ZrUTI5a1pXTnpMbkIxYzJnb0owOXViSGtnWVhaaGFXeGhZbXhsSUc5dUlFTm9jbTl0WlNjcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmljbTkzYzJWeVUzVndjRzl5ZEdWa1EyOWtaV056TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J0WVhSamFHVnlJRDBnTHloV1VGeGNaSHhJTWpaY1hHUjhRVll4S1M0cUx6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdOdlpHVmpjeUE5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1VsUkRVblJ3VW1WalpXbDJaWEl1WjJWMFEyRndZV0pwYkdsMGFXVnpLQ2QyYVdSbGJ5Y3BMbU52WkdWamN6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZaR1ZqY3k1bWIzSkZZV05vS0NoamIyUmxZeWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElITjBjaUE5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052WkdWakxtMXBiV1ZVZVhCbExuTndiR2wwS0Njdkp5bGJNVjBnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuSUNjZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb1kyOWtaV011YzJSd1JtMTBjRXhwYm1VZ2ZId2dKeWNwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUcxaGRHTm9JRDBnYldGMFkyaGxjaTVsZUdWaktITjBjaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzFoZEdOb0lDRTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnliM2R6WlhKVGRYQndiM0owWldSRGIyUmxZM011Y0hWemFDaHpkSElwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHSnliM2R6WlhKVGRYQndiM0owWldSRGIyUmxZM003WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFhObFZYSnNVR0Z5WVcxelhHNGdJQ0FnSUNBZ0lDQWdJQ0FwWEc0Z0lDQWdJQ0FnSUNrN1hIUmNibHh1SUNBZ0lDQWdJQ0F2S2lwY2JpQWdJQ0FnSUNBZ0lDb2dRbTl2YkdWaGJpQndZWEpoYldWMFpYSnpYRzRnSUNBZ0lDQWdJQ0FxTDF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11Wm14aFozTXVjMlYwS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdSbXhoWjNNdVFYVjBiME52Ym01bFkzUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCdVpYY2dVMlYwZEdsdVowWnNZV2NvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUm14aFozTXVRWFYwYjBOdmJtNWxZM1FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjBGMWRHOGdZMjl1Ym1WamRDQjBieUJ6ZEhKbFlXMG5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RYYUdWMGFHVnlJSGRsSUhOb2IzVnNaQ0JoZEhSbGJYQjBJSFJ2SUdGMWRHOGdZMjl1Ym1WamRDQjBieUIwYUdVZ2MybG5ibUZzYkdsdVp5QnpaWEoyWlhJZ2IzSWdjMmh2ZHlCaElHTnNhV05ySUhSdklITjBZWEowSUhCeWIyMXdkQzRuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGRIUnBibWR6SUNZbUlITmxkSFJwYm1kekxtaGhjMDkzYmxCeWIzQmxjblI1S0Vac1lXZHpMa0YxZEc5RGIyNXVaV04wS1NBL1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sZEhScGJtZHpXMFpzWVdkekxrRjFkRzlEYjI1dVpXTjBYU0E2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWelpWVnliRkJoY21GdGMxeHVJQ0FnSUNBZ0lDQWdJQ0FnS1Z4dUlDQWdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVpteGhaM011YzJWMEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnUm14aFozTXVRWFYwYjFCc1lYbFdhV1JsYnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzVsZHlCVFpYUjBhVzVuUm14aFp5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkdiR0ZuY3k1QmRYUnZVR3hoZVZacFpHVnZMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RCZFhSdklIQnNZWGtnZG1sa1pXOG5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RYYUdWdUlIWnBaR1Z2SUdseklISmxZV1I1SUdGMWRHOXRZWFJwWTJGc2JIa2djM1JoY25RZ2NHeGhlV2x1WnlCcGRDQmhjeUJ2Y0hCdmMyVmtJSFJ2SUhOb2IzZHBibWNnWVNCd2JHRjVJR0oxZEhSdmJpNG5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sZEhScGJtZHpJQ1ltSUhObGRIUnBibWR6TG1oaGMwOTNibEJ5YjNCbGNuUjVLRVpzWVdkekxrRjFkRzlRYkdGNVZtbGtaVzhwSUQ5Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlYwZEdsdVozTmJSbXhoWjNNdVFYVjBiMUJzWVhsV2FXUmxiMTBnT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBjblZsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWelpWVnliRkJoY21GdGMxeHVJQ0FnSUNBZ0lDQWdJQ0FnS1Z4dUlDQWdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVpteGhaM011YzJWMEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnUm14aFozTXVRbkp2ZDNObGNsTmxibVJQWm1abGNpeGNiaUFnSUNBZ0lDQWdJQ0FnSUc1bGR5QlRaWFIwYVc1blJteGhaeWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JHYkdGbmN5NUNjbTkzYzJWeVUyVnVaRTltWm1WeUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZENjbTkzYzJWeUlITmxibVFnYjJabVpYSW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RDY205M2MyVnlJSGRwYkd3Z2FXNXBkR2xoZEdVZ2RHaGxJRmRsWWxKVVF5Qm9ZVzVrYzJoaGEyVWdZbmtnYzJWdVpHbHVaeUIwYUdVZ2IyWm1aWElnZEc4Z2RHaGxJSE4wY21WaGJXVnlKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WlhSMGFXNW5jeUFtSmlCelpYUjBhVzVuY3k1b1lYTlBkMjVRY205d1pYSjBlU2hHYkdGbmN5NUNjbTkzYzJWeVUyVnVaRTltWm1WeUtTQS9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGRIUnBibWR6VzBac1lXZHpMa0p5YjNkelpYSlRaVzVrVDJabVpYSmRJRHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFhObFZYSnNVR0Z5WVcxelhHNGdJQ0FnSUNBZ0lDQWdJQ0FwWEc0Z0lDQWdJQ0FnSUNrN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1bWJHRm5jeTV6WlhRb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JHYkdGbmN5NVZjMlZOYVdNc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1WlhjZ1UyVjBkR2x1WjBac1lXY29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdSbXhoWjNNdVZYTmxUV2xqTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkVmMyVWdiV2xqY205d2FHOXVaU2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjAxaGEyVWdZbkp2ZDNObGNpQnlaWEYxWlhOMElHMXBZM0p2Y0dodmJtVWdZV05qWlhOeklHRnVaQ0J2Y0dWdUlHRnVJR2x1Y0hWMElHRjFaR2x2SUhSeVlXTnJMaWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWMGRHbHVaM01nSmlZZ2MyVjBkR2x1WjNNdWFHRnpUM2R1VUhKdmNHVnlkSGtvUm14aFozTXVWWE5sVFdsaktTQS9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGRIUnBibWR6VzBac1lXZHpMbFZ6WlUxcFkxMGdPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxYzJWVmNteFFZWEpoYlhOY2JpQWdJQ0FnSUNBZ0lDQWdJQ2xjYmlBZ0lDQWdJQ0FnS1R0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG1ac1lXZHpMbk5sZENoY2JpQWdJQ0FnSUNBZ0lDQWdJRVpzWVdkekxsTjBZWEowVm1sa1pXOU5kWFJsWkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzVsZHlCVFpYUjBhVzVuUm14aFp5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkdiR0ZuY3k1VGRHRnlkRlpwWkdWdlRYVjBaV1FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjFOMFlYSjBJSFpwWkdWdklHMTFkR1ZrSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblZtbGtaVzhnZDJsc2JDQnpkR0Z5ZENCdGRYUmxaQ0JwWmlCMGNuVmxMaWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWMGRHbHVaM01nSmlZZ2MyVjBkR2x1WjNNdWFHRnpUM2R1VUhKdmNHVnlkSGtvUm14aFozTXVVM1JoY25SV2FXUmxiMDExZEdWa0tTQS9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGRIUnBibWR6VzBac1lXZHpMbE4wWVhKMFZtbGtaVzlOZFhSbFpGMGdPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxYzJWVmNteFFZWEpoYlhOY2JpQWdJQ0FnSUNBZ0lDQWdJQ2xjYmlBZ0lDQWdJQ0FnS1R0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG1ac1lXZHpMbk5sZENoY2JpQWdJQ0FnSUNBZ0lDQWdJRVpzWVdkekxsTjFjSEJ5WlhOelFuSnZkM05sY2t0bGVYTXNYRzRnSUNBZ0lDQWdJQ0FnSUNCdVpYY2dVMlYwZEdsdVowWnNZV2NvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUm14aFozTXVVM1Z3Y0hKbGMzTkNjbTkzYzJWeVMyVjVjeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuVTNWd2NISmxjM01nWW5KdmQzTmxjaUJyWlhsekp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5VM1Z3Y0hKbGMzTWdZMlZ5ZEdGcGJpQmljbTkzYzJWeUlHdGxlWE1nZEdoaGRDQjNaU0IxYzJVZ2FXNGdWVVVzSUdadmNpQmxlR0Z0Y0d4bElFWTFJSFJ2SUhOb2IzY2djMmhoWkdWeUlHTnZiWEJzWlhocGRIa2dhVzV6ZEdWaFpDQnZaaUJ5WldaeVpYTm9JSFJvWlNCd1lXZGxMaWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWMGRHbHVaM01nSmlZZ2MyVjBkR2x1WjNNdWFHRnpUM2R1VUhKdmNHVnlkSGtvUm14aFozTXVVM1Z3Y0hKbGMzTkNjbTkzYzJWeVMyVjVjeWtnUDF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpaWFIwYVc1bmMxdEdiR0ZuY3k1VGRYQndjbVZ6YzBKeWIzZHpaWEpMWlhselhTQTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSeWRXVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkWE5sVlhKc1VHRnlZVzF6WEc0Z0lDQWdJQ0FnSUNBZ0lDQXBYRzRnSUNBZ0lDQWdJQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVtYkdGbmN5NXpaWFFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQkdiR0ZuY3k1SmMxRjFZV3hwZEhsRGIyNTBjbTlzYkdWeUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYm1WM0lGTmxkSFJwYm1kR2JHRm5LRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRVpzWVdkekxrbHpVWFZoYkdsMGVVTnZiblJ5YjJ4c1pYSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMGx6SUhGMVlXeHBkSGtnWTI5dWRISnZiR3hsY2o4bkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZFVjblZsSUdsbUlIUm9hWE1nY0dWbGNpQmpiMjUwY205c2N5QnpkSEpsWVcwZ2NYVmhiR2wwZVNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVjBkR2x1WjNNZ0ppWWdjMlYwZEdsdVozTXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb1JteGhaM011U1hOUmRXRnNhWFI1UTI5dWRISnZiR3hsY2lrZ1AxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WlhSMGFXNW5jMXRHYkdGbmN5NUpjMUYxWVd4cGRIbERiMjUwY205c2JHVnlYU0E2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnlkV1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFhObFZYSnNVR0Z5WVcxelhHNGdJQ0FnSUNBZ0lDQWdJQ0FwWEc0Z0lDQWdJQ0FnSUNrN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1bWJHRm5jeTV6WlhRb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JHYkdGbmN5NUdiM0pqWlUxdmJtOUJkV1JwYnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzVsZHlCVFpYUjBhVzVuUm14aFp5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkdiR0ZuY3k1R2IzSmpaVTF2Ym05QmRXUnBieXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuUm05eVkyVWdiVzl1YnlCaGRXUnBieWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjBadmNtTmxJR0p5YjNkelpYSWdkRzhnY21WeGRXVnpkQ0J0YjI1dklHRjFaR2x2SUdsdUlIUm9aU0JUUkZBbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxkSFJwYm1keklDWW1JSE5sZEhScGJtZHpMbWhoYzA5M2JsQnliM0JsY25SNUtFWnNZV2R6TGtadmNtTmxUVzl1YjBGMVpHbHZLU0EvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxkSFJwYm1kelcwWnNZV2R6TGtadmNtTmxUVzl1YjBGMVpHbHZYU0E2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWelpWVnliRkJoY21GdGMxeHVJQ0FnSUNBZ0lDQWdJQ0FnS1Z4dUlDQWdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVpteGhaM011YzJWMEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnUm14aFozTXVSbTl5WTJWVVZWSk9MRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JtVjNJRk5sZEhScGJtZEdiR0ZuS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVac1lXZHpMa1p2Y21ObFZGVlNUaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuUm05eVkyVWdWRlZTVGljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0owOXViSGtnWjJWdVpYSmhkR1VnVkZWU1RpOVNaV3hoZVdWa0lFbERSU0JqWVc1a2FXUmhkR1Z6TGljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVjBkR2x1WjNNZ0ppWWdjMlYwZEdsdVozTXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb1JteGhaM011Um05eVkyVlVWVkpPS1NBL1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sZEhScGJtZHpXMFpzWVdkekxrWnZjbU5sVkZWU1RsMGdPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxYzJWVmNteFFZWEpoYlhOY2JpQWdJQ0FnSUNBZ0lDQWdJQ2xjYmlBZ0lDQWdJQ0FnS1R0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG1ac1lXZHpMbk5sZENoY2JpQWdJQ0FnSUNBZ0lDQWdJRVpzWVdkekxrRkdTMFJsZEdWamRHbHZiaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHNWxkeUJUWlhSMGFXNW5SbXhoWnloY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCR2JHRm5jeTVCUmt0RVpYUmxZM1JwYjI0c1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0owRkdTeUJwWmlCcFpHeGxKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuVkdsdFpXOTFkQ0IwYUdVZ1pYaHdaWEpwWlc1alpTQnBaaUIxYzJWeUlHbHpJRUZHU3lCbWIzSWdZU0J3WlhKcGIyUXVKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WlhSMGFXNW5jeUFtSmlCelpYUjBhVzVuY3k1b1lYTlBkMjVRY205d1pYSjBlU2hHYkdGbmN5NUJSa3RFWlhSbFkzUnBiMjRwSUQ5Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlYwZEdsdVozTmJSbXhoWjNNdVFVWkxSR1YwWldOMGFXOXVYU0E2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWelpWVnliRkJoY21GdGMxeHVJQ0FnSUNBZ0lDQWdJQ0FnS1Z4dUlDQWdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVpteGhaM011YzJWMEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnUm14aFozTXVUV0YwWTJoV2FXVjNjRzl5ZEZKbGMyOXNkWFJwYjI0c1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1WlhjZ1UyVjBkR2x1WjBac1lXY29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdSbXhoWjNNdVRXRjBZMmhXYVdWM2NHOXlkRkpsYzI5c2RYUnBiMjRzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjAxaGRHTm9JSFpwWlhkd2IzSjBJSEpsYzI5c2RYUnBiMjRuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkUWFYaGxiQ0JUZEhKbFlXMXBibWNnZDJsc2JDQmlaU0JwYm5OMGNuVmpkR1ZrSUhSdklHUjVibUZ0YVdOaGJHeDVJSEpsYzJsNlpTQjBhR1VnZG1sa1pXOGdjM1J5WldGdElIUnZJRzFoZEdOb0lIUm9aU0J6YVhwbElHOW1JSFJvWlNCMmFXUmxieUJsYkdWdFpXNTBMaWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWMGRHbHVaM01nSmlZZ2MyVjBkR2x1WjNNdWFHRnpUM2R1VUhKdmNHVnlkSGtvUm14aFozTXVUV0YwWTJoV2FXVjNjRzl5ZEZKbGMyOXNkWFJwYjI0cElEOWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWMGRHbHVaM05iUm14aFozTXVUV0YwWTJoV2FXVjNjRzl5ZEZKbGMyOXNkWFJwYjI1ZElEcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkWE5sVlhKc1VHRnlZVzF6WEc0Z0lDQWdJQ0FnSUNBZ0lDQXBYRzRnSUNBZ0lDQWdJQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVtYkdGbmN5NXpaWFFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQkdiR0ZuY3k1SWIzWmxjbWx1WjAxdmRYTmxUVzlrWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzVsZHlCVFpYUjBhVzVuUm14aFp5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkdiR0ZuY3k1SWIzWmxjbWx1WjAxdmRYTmxUVzlrWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblEyOXVkSEp2YkNCVFkyaGxiV1U2SUV4dlkydGxaQ0JOYjNWelpTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMFZwZEdobGNpQnNiMk5yWldRZ2JXOTFjMlVzSUhkb1pYSmxJSFJvWlNCd2IybHVkR1Z5SUdseklHTnZibk4xYldWa0lHSjVJSFJvWlNCMmFXUmxieUJoYm1RZ2JHOWphMlZrSUhSdklHbDBMQ0J2Y2lCb2IzWmxjbWx1WnlCdGIzVnpaU3dnZDJobGNtVWdkR2hsSUcxdmRYTmxJR2x6SUc1dmRDQmpiMjV6ZFcxbFpDNG5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sZEhScGJtZHpJQ1ltSUhObGRIUnBibWR6TG1oaGMwOTNibEJ5YjNCbGNuUjVLRVpzWVdkekxraHZkbVZ5YVc1blRXOTFjMlZOYjJSbEtTQS9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGRIUnBibWR6VzBac1lXZHpMa2h2ZG1WeWFXNW5UVzkxYzJWTmIyUmxYU0E2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWelpWVnliRkJoY21GdGN5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9hWE5JYjNabGNtbHVaMDF2ZFhObE9pQmliMjlzWldGdUxDQnpaWFIwYVc1bk9pQlRaWFIwYVc1blFtRnpaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WlhSMGFXNW5MbXhoWW1Wc0lEMGdZRU52Ym5SeWIyd2dVMk5vWlcxbE9pQWtlMmx6U0c5MlpYSnBibWROYjNWelpTQS9JQ2RJYjNabGNtbHVaeWNnT2lBblRHOWphMlZrSjMwZ1RXOTFjMlZnTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ2xjYmlBZ0lDQWdJQ0FnS1R0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG1ac1lXZHpMbk5sZENoY2JpQWdJQ0FnSUNBZ0lDQWdJRVpzWVdkekxrWmhhMlZOYjNWelpWZHBkR2hVYjNWamFHVnpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JtVjNJRk5sZEhScGJtZEdiR0ZuS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVac1lXZHpMa1poYTJWTmIzVnpaVmRwZEdoVWIzVmphR1Z6TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkR1lXdGxJRzF2ZFhObElIZHBkR2dnZEc5MVkyaGxjeWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjBFZ2MybHVaMnhsSUdacGJtZGxjaUIwYjNWamFDQnBjeUJqYjI1MlpYSjBaV1FnYVc1MGJ5QmhJRzF2ZFhObElHVjJaVzUwTGlCVWFHbHpJR0ZzYkc5M2N5QmhJRzV2YmkxMGIzVmphQ0JoY0hCc2FXTmhkR2x2YmlCMGJ5QmlaU0JqYjI1MGNtOXNiR1ZrSUhCaGNuUnBZV3hzZVNCMmFXRWdZU0IwYjNWamFDQmtaWFpwWTJVdUp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpaWFIwYVc1bmN5QW1KaUJ6WlhSMGFXNW5jeTVvWVhOUGQyNVFjbTl3WlhKMGVTaEdiR0ZuY3k1R1lXdGxUVzkxYzJWWGFYUm9WRzkxWTJobGN5a2dQMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpYUjBhVzVuYzF0R2JHRm5jeTVHWVd0bFRXOTFjMlZYYVhSb1ZHOTFZMmhsYzEwZ09seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtWVd4elpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFjMlZWY214UVlYSmhiWE5jYmlBZ0lDQWdJQ0FnSUNBZ0lDbGNiaUFnSUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbVpzWVdkekxuTmxkQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lFWnNZV2R6TGt0bGVXSnZZWEprU1c1d2RYUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCdVpYY2dVMlYwZEdsdVowWnNZV2NvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUm14aFozTXVTMlY1WW05aGNtUkpibkIxZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblMyVjVZbTloY21RZ2FXNXdkWFFuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkSlppQmxibUZpYkdWa0xDQnpaVzVrSUd0bGVXSnZZWEprSUdWMlpXNTBjeUIwYnlCemRISmxZVzFsY2ljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVjBkR2x1WjNNZ0ppWWdjMlYwZEdsdVozTXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb1JteGhaM011UzJWNVltOWhjbVJKYm5CMWRDa2dQMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpYUjBhVzVuYzF0R2JHRm5jeTVMWlhsaWIyRnlaRWx1Y0hWMFhTQTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSeWRXVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkWE5sVlhKc1VHRnlZVzF6WEc0Z0lDQWdJQ0FnSUNBZ0lDQXBYRzRnSUNBZ0lDQWdJQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVtYkdGbmN5NXpaWFFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQkdiR0ZuY3k1TmIzVnpaVWx1Y0hWMExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYm1WM0lGTmxkSFJwYm1kR2JHRm5LRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRVpzWVdkekxrMXZkWE5sU1c1d2RYUXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMDF2ZFhObElHbHVjSFYwSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblNXWWdaVzVoWW14bFpDd2djMlZ1WkNCdGIzVnpaU0JsZG1WdWRITWdkRzhnYzNSeVpXRnRaWEluTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGRIUnBibWR6SUNZbUlITmxkSFJwYm1kekxtaGhjMDkzYmxCeWIzQmxjblI1S0Vac1lXZHpMazF2ZFhObFNXNXdkWFFwSUQ5Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlYwZEdsdVozTmJSbXhoWjNNdVRXOTFjMlZKYm5CMWRGMGdPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGNuVmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFZ6WlZWeWJGQmhjbUZ0YzF4dUlDQWdJQ0FnSUNBZ0lDQWdLVnh1SUNBZ0lDQWdJQ0FwTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11Wm14aFozTXVjMlYwS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdSbXhoWjNNdVZHOTFZMmhKYm5CMWRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUc1bGR5QlRaWFIwYVc1blJteGhaeWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JHYkdGbmN5NVViM1ZqYUVsdWNIVjBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RVYjNWamFDQnBibkIxZENjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0owbG1JR1Z1WVdKc1pXUXNJSE5sYm1RZ2RHOTFZMmdnWlhabGJuUnpJSFJ2SUhOMGNtVmhiV1Z5Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpYUjBhVzVuY3lBbUppQnpaWFIwYVc1bmN5NW9ZWE5QZDI1UWNtOXdaWEowZVNoR2JHRm5jeTVVYjNWamFFbHVjSFYwS1NBL1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sZEhScGJtZHpXMFpzWVdkekxsUnZkV05vU1c1d2RYUmRJRHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxYzJWVmNteFFZWEpoYlhOY2JpQWdJQ0FnSUNBZ0lDQWdJQ2xjYmlBZ0lDQWdJQ0FnS1R0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG1ac1lXZHpMbk5sZENoY2JpQWdJQ0FnSUNBZ0lDQWdJRVpzWVdkekxrZGhiV1Z3WVdSSmJuQjFkQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHNWxkeUJUWlhSMGFXNW5SbXhoWnloY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCR2JHRm5jeTVIWVcxbGNHRmtTVzV3ZFhRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0owZGhiV1Z3WVdRZ2FXNXdkWFFuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkSlppQmxibUZpYkdWa0xDQnpaVzVrSUdkaGJXVndZV1FnWlhabGJuUnpJSFJ2SUhOMGNtVmhiV1Z5Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpYUjBhVzVuY3lBbUppQnpaWFIwYVc1bmN5NW9ZWE5QZDI1UWNtOXdaWEowZVNoR2JHRm5jeTVIWVcxbGNHRmtTVzV3ZFhRcElEOWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWMGRHbHVaM05iUm14aFozTXVSMkZ0WlhCaFpFbHVjSFYwWFNBNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RYTmxWWEpzVUdGeVlXMXpYRzRnSUNBZ0lDQWdJQ0FnSUNBcFhHNGdJQ0FnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NW1iR0ZuY3k1elpYUW9YRzRnSUNBZ0lDQWdJQ0FnSUNCR2JHRm5jeTVZVWtOdmJuUnliMnhzWlhKSmJuQjFkQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHNWxkeUJUWlhSMGFXNW5SbXhoWnloY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCR2JHRm5jeTVZVWtOdmJuUnliMnhzWlhKSmJuQjFkQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuV0ZJZ1kyOXVkSEp2Ykd4bGNpQnBibkIxZENjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0owbG1JR1Z1WVdKc1pXUXNJSE5sYm1RZ1dGSWdZMjl1ZEhKdmJHeGxjaUJsZG1WdWRITWdkRzhnYzNSeVpXRnRaWEluTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGRIUnBibWR6SUNZbUlITmxkSFJwYm1kekxtaGhjMDkzYmxCeWIzQmxjblI1S0Vac1lXZHpMbGhTUTI5dWRISnZiR3hsY2tsdWNIVjBLU0EvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxkSFJwYm1kelcwWnNZV2R6TGxoU1EyOXVkSEp2Ykd4bGNrbHVjSFYwWFNBNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RYTmxWWEpzVUdGeVlXMXpYRzRnSUNBZ0lDQWdJQ0FnSUNBcFhHNGdJQ0FnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NW1iR0ZuY3k1elpYUW9YRzRnSUNBZ0lDQWdJQ0FnSUNCR2JHRm5jeTVYWVdsMFJtOXlVM1J5WldGdFpYSXNYRzRnSUNBZ0lDQWdJQ0FnSUNCdVpYY2dVMlYwZEdsdVowWnNZV2NvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUm14aFozTXVWMkZwZEVadmNsTjBjbVZoYldWeUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZFhZV2wwSUdadmNpQnpkSEpsWVcxbGNpY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMWRwYkd3Z1kyOXVkR2x1ZFdVZ2RISjVhVzVuSUhSdklHTnZibTVsWTNRZ2RHOGdkR2hsSUdacGNuTjBJSE4wY21WaGJXVnlJR0YyWVdsc1lXSnNaUzRuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGRIUnBibWR6SUNZbUlITmxkSFJwYm1kekxtaGhjMDkzYmxCeWIzQmxjblI1S0Vac1lXZHpMbGRoYVhSR2IzSlRkSEpsWVcxbGNpa2dQMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpYUjBhVzVuYzF0R2JHRm5jeTVYWVdsMFJtOXlVM1J5WldGdFpYSmRJRHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxYzJWVmNteFFZWEpoYlhOY2JpQWdJQ0FnSUNBZ0lDQWdJQ2xjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lIUm9hWE11Wm14aFozTXVjMlYwS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdSbXhoWjNNdVNHbGtaVlZKTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdibVYzSUZObGRIUnBibWRHYkdGbktGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFWnNZV2R6TGtocFpHVlZTU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuU0dsa1pTQjBhR1VnVlVrZ2IzWmxjbXhoZVNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0oxZHBiR3dnYUdsa1pTQmhiR3dnVlVrZ2IzWmxjbXhoZVNCa1pYUmhhV3h6Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpYUjBhVzVuY3lBbUppQnpaWFIwYVc1bmN5NW9ZWE5QZDI1UWNtOXdaWEowZVNoR2JHRm5jeTVJYVdSbFZVa3BJRDljYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVjBkR2x1WjNOYlJteGhaM011U0dsa1pWVkpYU0E2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWelpWVnliRkJoY21GdGMxeHVJQ0FnSUNBZ0lDQWdJQ0FnS1Z4dUlDQWdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQWdJQzhxS2x4dUlDQWdJQ0FnSUNBZ0tpQk9kVzFsY21saklIQmhjbUZ0WlhSbGNuTmNiaUFnSUNBZ0lDQWdJQ292WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV1ZFcxbGNtbGpVR0Z5WVcxbGRHVnljeTV6WlhRb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JPZFcxbGNtbGpVR0Z5WVcxbGRHVnljeTVCUmt0VWFXMWxiM1YwVTJWamN5eGNiaUFnSUNBZ0lDQWdJQ0FnSUc1bGR5QlRaWFIwYVc1blRuVnRZbVZ5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUU1MWJXVnlhV05RWVhKaGJXVjBaWEp6TGtGR1MxUnBiV1Z2ZFhSVFpXTnpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RCUmtzZ2RHbHRaVzkxZENjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0oxUm9aU0IwYVcxbElDaHBiaUJ6WldOdmJtUnpLU0JwZENCMFlXdGxjeUJtYjNJZ2RHaGxJR0Z3Y0d4cFkyRjBhVzl1SUhSdklIUnBiV1VnYjNWMElHbG1JRUZHU3lCMGFXMWxiM1YwSUdseklHVnVZV0pzWldRdUp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXdJQzhxYldsdUtpOHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiblZzYkNBdkttMWhlQ292TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGRIUnBibWR6SUNZbUlITmxkSFJwYm1kekxtaGhjMDkzYmxCeWIzQmxjblI1S0U1MWJXVnlhV05RWVhKaGJXVjBaWEp6TGtGR1MxUnBiV1Z2ZFhSVFpXTnpLU0EvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxkSFJwYm1kelcwNTFiV1Z5YVdOUVlYSmhiV1YwWlhKekxrRkdTMVJwYldWdmRYUlRaV056WFNBNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJREV5TUN3Z0x5cDJZV3gxWlNvdlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RYTmxWWEpzVUdGeVlXMXpYRzRnSUNBZ0lDQWdJQ0FnSUNBcFhHNGdJQ0FnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NXVkVzFsY21salVHRnlZVzFsZEdWeWN5NXpaWFFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQk9kVzFsY21salVHRnlZVzFsZEdWeWN5NUJSa3REYjNWdWRHUnZkMjVUWldOekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYm1WM0lGTmxkSFJwYm1kT2RXMWlaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVG5WdFpYSnBZMUJoY21GdFpYUmxjbk11UVVaTFEyOTFiblJrYjNkdVUyVmpjeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuUVVaTElHTnZkVzUwWkc5M2JpY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMVJvWlNCMGFXMWxJQ2hwYmlCelpXTnZibVJ6S1NCbWIzSWdZU0IxYzJWeUlIUnZJSEpsYzNCdmJtUWdZbVZtYjNKbElIUm9aU0J6ZEhKbFlXMGdhWE1nWlc1a1pXUWdZV1owWlhJZ1lXNGdRVVpMSUhScGJXVnZkWFF1Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBeE1DQXZLbTFwYmlvdkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNTFiR3dnTHlwdFlYZ3FMeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F4TUNBdktuWmhiSFZsS2k4c1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RYTmxWWEpzVUdGeVlXMXpYRzRnSUNBZ0lDQWdJQ0FnSUNBcFhHNGdJQ0FnSUNBZ0lDbGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxtNTFiV1Z5YVdOUVlYSmhiV1YwWlhKekxuTmxkQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lFNTFiV1Z5YVdOUVlYSmhiV1YwWlhKekxrMWhlRkpsWTI5dWJtVmpkRUYwZEdWdGNIUnpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JtVjNJRk5sZEhScGJtZE9kVzFpWlhJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RuVnRaWEpwWTFCaGNtRnRaWFJsY25NdVRXRjRVbVZqYjI1dVpXTjBRWFIwWlcxd2RITXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMDFoZUNCU1pXTnZibTVsWTNSekp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5UV0Y0YVcxMWJTQnVkVzFpWlhJZ2IyWWdjbVZqYjI1dVpXTjBjeUIwYUdVZ1lYQndiR2xqWVhScGIyNGdkMmxzYkNCaGRIUmxiWEIwSUhkb1pXNGdZU0J6ZEhKbFlXMWxjaUJrYVhOamIyNXVaV04wY3k0bkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEQWdMeXB0YVc0cUx5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTVPVGtnTHlwdFlYZ3FMeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WlhSMGFXNW5jeUFtSmlCelpYUjBhVzVuY3k1b1lYTlBkMjVRY205d1pYSjBlU2hPZFcxbGNtbGpVR0Z5WVcxbGRHVnljeTVOWVhoU1pXTnZibTVsWTNSQmRIUmxiWEIwY3lrZ1AxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WlhSMGFXNW5jMXRPZFcxbGNtbGpVR0Z5WVcxbGRHVnljeTVOWVhoU1pXTnZibTVsWTNSQmRIUmxiWEIwYzEwZ09seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F6TENBdktuWmhiSFZsS2k5Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWMyVlZjbXhRWVhKaGJYTmNiaUFnSUNBZ0lDQWdJQ0FnSUNsY2JpQWdJQ0FnSUNBZ0tUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxtNTFiV1Z5YVdOUVlYSmhiV1YwWlhKekxuTmxkQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lFNTFiV1Z5YVdOUVlYSmhiV1YwWlhKekxrMXBibEZRTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdibVYzSUZObGRIUnBibWRPZFcxaVpYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdUblZ0WlhKcFkxQmhjbUZ0WlhSbGNuTXVUV2x1VVZBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0owMXBiaUJSVUNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0oxUm9aU0JzYjNkbGNpQmliM1Z1WkNCbWIzSWdkR2hsSUhGMVlXNTBhWHBoZEdsdmJpQndZWEpoYldWMFpYSWdLRkZRS1NCdlppQjBhR1VnWlc1amIyUmxjaTRnTUNBOUlFSmxjM1FnY1hWaGJHbDBlU3dnTlRFZ1BTQjNiM0p6ZENCeGRXRnNhWFI1TGljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ01DQXZLbTFwYmlvdkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEVXhJQzhxYldGNEtpOHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlYwZEdsdVozTWdKaVlnYzJWMGRHbHVaM011YUdGelQzZHVVSEp2Y0dWeWRIa29UblZ0WlhKcFkxQmhjbUZ0WlhSbGNuTXVUV2x1VVZBcElEOWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWMGRHbHVaM05iVG5WdFpYSnBZMUJoY21GdFpYUmxjbk11VFdsdVVWQmRJRHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ01Dd2dMeXAyWVd4MVpTb3ZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkWE5sVlhKc1VHRnlZVzF6WEc0Z0lDQWdJQ0FnSUNBZ0lDQXBYRzRnSUNBZ0lDQWdJQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV1ZFcxbGNtbGpVR0Z5WVcxbGRHVnljeTV6WlhRb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JPZFcxbGNtbGpVR0Z5WVcxbGRHVnljeTVOWVhoUlVDeGNiaUFnSUNBZ0lDQWdJQ0FnSUc1bGR5QlRaWFIwYVc1blRuVnRZbVZ5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUU1MWJXVnlhV05RWVhKaGJXVjBaWEp6TGsxaGVGRlFMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2ROWVhnZ1VWQW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RVYUdVZ2RYQndaWElnWW05MWJtUWdabTl5SUhSb1pTQnhkV0Z1ZEdsNllYUnBiMjRnY0dGeVlXMWxkR1Z5SUNoUlVDa2diMllnZEdobElHVnVZMjlrWlhJdUlEQWdQU0JDWlhOMElIRjFZV3hwZEhrc0lEVXhJRDBnZDI5eWMzUWdjWFZoYkdsMGVTNG5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJREFnTHlwdGFXNHFMeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0ExTVNBdkttMWhlQ292TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGRIUnBibWR6SUNZbUlITmxkSFJwYm1kekxtaGhjMDkzYmxCeWIzQmxjblI1S0U1MWJXVnlhV05RWVhKaGJXVjBaWEp6TGsxaGVGRlFLU0EvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxkSFJwYm1kelcwNTFiV1Z5YVdOUVlYSmhiV1YwWlhKekxrMWhlRkZRWFNBNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRFV4TENBdktuWmhiSFZsS2k5Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWMyVlZjbXhRWVhKaGJYTmNiaUFnSUNBZ0lDQWdJQ0FnSUNsY2JpQWdJQ0FnSUNBZ0tUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxtNTFiV1Z5YVdOUVlYSmhiV1YwWlhKekxuTmxkQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lFNTFiV1Z5YVdOUVlYSmhiV1YwWlhKekxsZGxZbEpVUTBaUVV5eGNiaUFnSUNBZ0lDQWdJQ0FnSUc1bGR5QlRaWFIwYVc1blRuVnRZbVZ5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUU1MWJXVnlhV05RWVhKaGJXVjBaWEp6TGxkbFlsSlVRMFpRVXl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblRXRjRJRVpRVXljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0oxUm9aU0J0WVhocGJYVnRJRVpRVXlCMGFHRjBJRmRsWWxKVVF5QjNhV3hzSUhSeWVTQjBieUIwY21GdWMyMXBkQ0JtY21GdFpYTWdZWFF1Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBeElDOHFiV2x1S2k4c1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ09UazVJQzhxYldGNEtpOHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlYwZEdsdVozTWdKaVlnYzJWMGRHbHVaM011YUdGelQzZHVVSEp2Y0dWeWRIa29UblZ0WlhKcFkxQmhjbUZ0WlhSbGNuTXVWMlZpVWxSRFJsQlRLU0EvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxkSFJwYm1kelcwNTFiV1Z5YVdOUVlYSmhiV1YwWlhKekxsZGxZbEpVUTBaUVUxMGdPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBMk1Dd2dMeXAyWVd4MVpTb3ZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkWE5sVlhKc1VHRnlZVzF6WEc0Z0lDQWdJQ0FnSUNBZ0lDQXBYRzRnSUNBZ0lDQWdJQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV1ZFcxbGNtbGpVR0Z5WVcxbGRHVnljeTV6WlhRb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JPZFcxbGNtbGpVR0Z5WVcxbGRHVnljeTVYWldKU1ZFTk5hVzVDYVhSeVlYUmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JtVjNJRk5sZEhScGJtZE9kVzFpWlhJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RuVnRaWEpwWTFCaGNtRnRaWFJsY25NdVYyVmlVbFJEVFdsdVFtbDBjbUYwWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblRXbHVJRUpwZEhKaGRHVWdLR3RpY0hNcEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5WR2hsSUcxcGJtbHRkVzBnWW1sMGNtRjBaU0IwYUdGMElGZGxZbEpVUXlCemFHOTFiR1FnZFhObExpY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNQ0F2S20xcGJpb3ZMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRFV3TURBd01DQXZLbTFoZUNvdkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxkSFJwYm1keklDWW1JSE5sZEhScGJtZHpMbWhoYzA5M2JsQnliM0JsY25SNUtFNTFiV1Z5YVdOUVlYSmhiV1YwWlhKekxsZGxZbEpVUTAxcGJrSnBkSEpoZEdVcElEOWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWMGRHbHVaM05iVG5WdFpYSnBZMUJoY21GdFpYUmxjbk11VjJWaVVsUkRUV2x1UW1sMGNtRjBaVjBnT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXdMQ0F2S25aaGJIVmxLaTljYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxYzJWVmNteFFZWEpoYlhOY2JpQWdJQ0FnSUNBZ0lDQWdJQ2xjYmlBZ0lDQWdJQ0FnS1R0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG01MWJXVnlhV05RWVhKaGJXVjBaWEp6TG5ObGRDaGNiaUFnSUNBZ0lDQWdJQ0FnSUU1MWJXVnlhV05RWVhKaGJXVjBaWEp6TGxkbFlsSlVRMDFoZUVKcGRISmhkR1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnVaWGNnVTJWMGRHbHVaMDUxYldKbGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk9kVzFsY21salVHRnlZVzFsZEdWeWN5NVhaV0pTVkVOTllYaENhWFJ5WVhSbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZE5ZWGdnUW1sMGNtRjBaU0FvYTJKd2N5a25MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RVYUdVZ2JXRjRhVzExYlNCaWFYUnlZWFJsSUhSb1lYUWdWMlZpVWxSRElITm9iM1ZzWkNCMWMyVXVKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F3SUM4cWJXbHVLaThzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTlRBd01EQXdJQzhxYldGNEtpOHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlYwZEdsdVozTWdKaVlnYzJWMGRHbHVaM011YUdGelQzZHVVSEp2Y0dWeWRIa29UblZ0WlhKcFkxQmhjbUZ0WlhSbGNuTXVWMlZpVWxSRFRXRjRRbWwwY21GMFpTa2dQMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpYUjBhVzVuYzF0T2RXMWxjbWxqVUdGeVlXMWxkR1Z5Y3k1WFpXSlNWRU5OWVhoQ2FYUnlZWFJsWFNBNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJREFzSUM4cWRtRnNkV1VxTDF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWelpWVnliRkJoY21GdGMxeHVJQ0FnSUNBZ0lDQWdJQ0FnS1Z4dUlDQWdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdWJuVnRaWEpwWTFCaGNtRnRaWFJsY25NdWMyVjBLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1RuVnRaWEpwWTFCaGNtRnRaWFJsY25NdVUzUnlaV0Z0WlhKQmRYUnZTbTlwYmtsdWRHVnlkbUZzTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdibVYzSUZObGRIUnBibWRPZFcxaVpYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdUblZ0WlhKcFkxQmhjbUZ0WlhSbGNuTXVVM1J5WldGdFpYSkJkWFJ2U205cGJrbHVkR1Z5ZG1Gc0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZFRkSEpsWVcxbGNpQkJkWFJ2SUVwdmFXNGdTVzUwWlhKMllXd2dLRzF6S1Njc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0owUmxiR0Y1SUdKbGRIZGxaVzRnY21WMGNtbGxjeUIzYUdWdUlIZGhhWFJwYm1jZ1ptOXlJR0Z1SUdGMllXbHNZV0pzWlNCemRISmxZVzFsY2k0bkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEVXdNQ0F2S20xcGJpb3ZMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRGt3TURBd01DQXZLbTFoZUNvdkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxkSFJwYm1keklDWW1JSE5sZEhScGJtZHpMbWhoYzA5M2JsQnliM0JsY25SNUtFNTFiV1Z5YVdOUVlYSmhiV1YwWlhKekxsTjBjbVZoYldWeVFYVjBiMHB2YVc1SmJuUmxjblpoYkNrZ1AxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WlhSMGFXNW5jMXRPZFcxbGNtbGpVR0Z5WVcxbGRHVnljeTVUZEhKbFlXMWxja0YxZEc5S2IybHVTVzUwWlhKMllXeGRJRHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ016QXdNQ3dnTHlwMllXeDFaU292WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFhObFZYSnNVR0Z5WVcxelhHNGdJQ0FnSUNBZ0lDQWdJQ0FwWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FXUmtJR0VnWTJGc2JHSmhZMnNnZEc4Z1ptbHlaU0IzYUdWdUlIUm9aU0J1ZFcxbGNtbGpJSE5sZEhScGJtY2dhWE1nZEc5bloyeGxaQzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdhV1FnVkdobElHbGtJRzltSUhSb1pTQm1iR0ZuTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0J2YmtOb1lXNW5aV1JNYVhOMFpXNWxjaUJVYUdVZ1kyRnNiR0poWTJzZ2RHOGdabWx5WlNCM2FHVnVJSFJvWlNCdWRXMWxjbWxqSUhaaGJIVmxJR05vWVc1blpYTXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1gyRmtaRTl1VG5WdFpYSnBZMU5sZEhScGJtZERhR0Z1WjJWa1RHbHpkR1Z1WlhJb1hHNGdJQ0FnSUNBZ0lHbGtPaUJPZFcxbGNtbGpVR0Z5WVcxbGRHVnljMGxrY3l4Y2JpQWdJQ0FnSUNBZ2IyNURhR0Z1WjJWa1RHbHpkR1Z1WlhJNklDaHVaWGRXWVd4MVpUb2diblZ0WW1WeUtTQTlQaUIyYjJsa1hHNGdJQ0FnS1RvZ2RtOXBaQ0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG01MWJXVnlhV05RWVhKaGJXVjBaWEp6TG1oaGN5aHBaQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJuVnRaWEpwWTFCaGNtRnRaWFJsY25OY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdVoyVjBLR2xrS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1aFpHUlBia05vWVc1blpXUk1hWE4wWlc1bGNpaHZia05vWVc1blpXUk1hWE4wWlc1bGNpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQmZZV1JrVDI1UGNIUnBiMjVUWlhSMGFXNW5RMmhoYm1kbFpFeHBjM1JsYm1WeUtGeHVJQ0FnSUNBZ0lDQnBaRG9nVDNCMGFXOXVVR0Z5WVcxbGRHVnljMGxrY3l4Y2JpQWdJQ0FnSUNBZ2IyNURhR0Z1WjJWa1RHbHpkR1Z1WlhJNklDaHVaWGRXWVd4MVpUb2djM1J5YVc1bktTQTlQaUIyYjJsa1hHNGdJQ0FnS1RvZ2RtOXBaQ0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG05d2RHbHZibEJoY21GdFpYUmxjbk11YUdGektHbGtLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dmNIUnBiMjVRWVhKaGJXVjBaWEp6WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG1kbGRDaHBaQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1WVdSa1QyNURhR0Z1WjJWa1RHbHpkR1Z1WlhJb2IyNURhR0Z1WjJWa1RHbHpkR1Z1WlhJcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRSEJoY21GdElHbGtJRlJvWlNCcFpDQnZaaUIwYUdVZ2JuVnRaWEpwWXlCelpYUjBhVzVuSUhkbElHRnlaU0JwYm5SbGNtVnpkR1ZrSUdsdUlHZGxkSFJwYm1jZ1lTQjJZV3gxWlNCbWIzSXVYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdWR2hsSUc1MWJXVnlhV01nZG1Gc2RXVWdjM1J2Y21Wa0lHbHVJSFJvWlNCd1lYSmhiV1YwWlhJZ2QybDBhQ0IwYUdVZ2NHRnpjMlZrSUdsa0xseHVJQ0FnSUNBcUwxeHVJQ0FnSUdkbGRFNTFiV1Z5YVdOVFpYUjBhVzVuVm1Gc2RXVW9hV1E2SUU1MWJXVnlhV05RWVhKaGJXVjBaWEp6U1dSektUb2diblZ0WW1WeUlIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXViblZ0WlhKcFkxQmhjbUZ0WlhSbGNuTXVhR0Z6S0dsa0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXViblZ0WlhKcFkxQmhjbUZ0WlhSbGNuTXVaMlYwS0dsa0tTNXVkVzFpWlhJN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZRlJvWlhKbElHbHpJRzV2SUc1MWJXVnlhV01nYzJWMGRHbHVaeUIzYVhSb0lIUm9aU0JwWkNCdlppQWtlMmxrZldBcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRSEJoY21GdElHbGtJRlJvWlNCcFpDQnZaaUIwYUdVZ2RHVjRkQ0J6WlhSMGFXNW5JSGRsSUdGeVpTQnBiblJsY21WemRHVmtJR2x1SUdkbGRIUnBibWNnWVNCMllXeDFaU0JtYjNJdVhHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ1ZHaGxJSFJsZUhRZ2RtRnNkV1VnYzNSdmNtVmtJR2x1SUhSb1pTQndZWEpoYldWMFpYSWdkMmwwYUNCMGFHVWdjR0Z6YzJWa0lHbGtMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHZGxkRlJsZUhSVFpYUjBhVzVuVm1Gc2RXVW9hV1E2SUZSbGVIUlFZWEpoYldWMFpYSnpTV1J6S1RvZ2MzUnlhVzVuSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWRHVjRkRkJoY21GdFpYUmxjbk11YUdGektHbGtLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZEdWNGRGQmhjbUZ0WlhSbGNuTXVaMlYwS0dsa0tTNTJZV3gxWlNCaGN5QnpkSEpwYm1jN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZRlJvWlhKbElHbHpJRzV2SUc1MWJXVnlhV01nYzJWMGRHbHVaeUIzYVhSb0lIUm9aU0JwWkNCdlppQWtlMmxrZldBcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVMlYwSUc1MWJXSmxjaUJwYmlCMGFHVWdjMlYwZEdsdVp5NWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2FXUWdWR2hsSUdsa0lHOW1JSFJvWlNCdWRXMWxjbWxqSUhObGRIUnBibWNnZDJVZ1lYSmxJR2x1ZEdWeVpYTjBaV1FnYVc0dVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhaaGJIVmxJRlJvWlNCdWRXMWxjbWxqSUhaaGJIVmxJSFJ2SUhObGRDNWNiaUFnSUNBZ0tpOWNiaUFnSUNCelpYUk9kVzFsY21salUyVjBkR2x1WnlocFpEb2dUblZ0WlhKcFkxQmhjbUZ0WlhSbGNuTkpaSE1zSUhaaGJIVmxPaUJ1ZFcxaVpYSXBPaUIyYjJsa0lIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXViblZ0WlhKcFkxQmhjbUZ0WlhSbGNuTXVhR0Z6S0dsa0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV1ZFcxbGNtbGpVR0Z5WVcxbGRHVnljeTVuWlhRb2FXUXBMbTUxYldKbGNpQTlJSFpoYkhWbE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLR0JVYUdWeVpTQnBjeUJ1YnlCdWRXMWxjbWxqSUhObGRIUnBibWNnZDJsMGFDQjBhR1VnYVdRZ2IyWWdKSHRwWkgxZ0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUZrWkNCaElHTmhiR3hpWVdOcklIUnZJR1pwY21VZ2QyaGxiaUIwYUdVZ1pteGhaeUJwY3lCMGIyZG5iR1ZrTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0JwWkNCVWFHVWdhV1FnYjJZZ2RHaGxJR1pzWVdjdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUc5dVEyaGhibWRsVEdsemRHVnVaWElnVkdobElHTmhiR3hpWVdOcklIUnZJR1pwY21VZ2QyaGxiaUIwYUdVZ2RtRnNkV1VnWTJoaGJtZGxjeTVjYmlBZ0lDQWdLaTljYmlBZ0lDQmZZV1JrVDI1VFpYUjBhVzVuUTJoaGJtZGxaRXhwYzNSbGJtVnlLRnh1SUNBZ0lDQWdJQ0JwWkRvZ1JteGhaM05KWkhNc1hHNGdJQ0FnSUNBZ0lHOXVRMmhoYm1kbFRHbHpkR1Z1WlhJNklDaHVaWGRHYkdGblZtRnNkV1U2SUdKdmIyeGxZVzRwSUQwK0lIWnZhV1JjYmlBZ0lDQXBPaUIyYjJsa0lIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVabXhoWjNNdWFHRnpLR2xrS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NW1iR0ZuY3k1blpYUW9hV1FwTG05dVEyaGhibWRsSUQwZ2IyNURhR0Z1WjJWTWFYTjBaVzVsY2p0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFRmtaQ0JoSUdOaGJHeGlZV05ySUhSdklHWnBjbVVnZDJobGJpQjBhR1VnZEdWNGRDQnBjeUJqYUdGdVoyVmtMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnBaQ0JVYUdVZ2FXUWdiMllnZEdobElHWnNZV2N1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJRzl1UTJoaGJtZGxUR2x6ZEdWdVpYSWdWR2hsSUdOaGJHeGlZV05ySUhSdklHWnBjbVVnZDJobGJpQjBhR1VnZG1Gc2RXVWdZMmhoYm1kbGN5NWNiaUFnSUNBZ0tpOWNiaUFnSUNCZllXUmtUMjVVWlhoMFUyVjBkR2x1WjBOb1lXNW5aV1JNYVhOMFpXNWxjaWhjYmlBZ0lDQWdJQ0FnYVdRNklGUmxlSFJRWVhKaGJXVjBaWEp6U1dSekxGeHVJQ0FnSUNBZ0lDQnZia05vWVc1blpVeHBjM1JsYm1WeU9pQW9ibVYzVkdWNGRGWmhiSFZsT2lCemRISnBibWNwSUQwK0lIWnZhV1JjYmlBZ0lDQXBPaUIyYjJsa0lIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVkR1Y0ZEZCaGNtRnRaWFJsY25NdWFHRnpLR2xrS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTBaWGgwVUdGeVlXMWxkR1Z5Y3k1blpYUW9hV1FwTG05dVEyaGhibWRsSUQwZ2IyNURhR0Z1WjJWTWFYTjBaVzVsY2p0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFZGxkQ0IwYUdVZ2IzQjBhVzl1SUhkb2FXTm9JR2hoY3lCMGFHVWdaMmwyWlc0Z2FXUXVYRzRnSUNBZ0lDb2dRSEJoY21GdElHbGtJRlJvWlNCcFpDQnZaaUIwYUdVZ2IzQjBhVzl1TGx4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUZSb1pTQlRaWFIwYVc1blQzQjBhVzl1SUc5aWFtVmpkQ0J0WVhSamFHbHVaeUJwWkZ4dUlDQWdJQ0FxTDF4dUlDQWdJR2RsZEZObGRIUnBibWRQY0hScGIyNG9hV1E2SUU5d2RHbHZibEJoY21GdFpYUmxjbk5KWkhNcE9pQlRaWFIwYVc1blQzQjBhVzl1SUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXViM0IwYVc5dVVHRnlZVzFsZEdWeWN5NW5aWFFvYVdRcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFZGxkQ0IwYUdVZ2RtRnNkV1VnYjJZZ2RHaGxJR052Ym1acFozVnlZWFJwYjI0Z1pteGhaeUIzYUdsamFDQm9ZWE1nZEdobElHZHBkbVZ1SUdsa0xseHVJQ0FnSUNBcUlFQndZWEpoYlNCcFpDQlVhR1VnZFc1cGNYVmxJR2xrSUdadmNpQjBhR1VnWm14aFp5NWNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QlVjblZsSUdsbUlIUm9aU0JtYkdGbklHbHpJR1Z1WVdKc1pXUXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2FYTkdiR0ZuUlc1aFlteGxaQ2hwWkRvZ1JteGhaM05KWkhNcE9pQmliMjlzWldGdUlIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Wm14aFozTXVaMlYwS0dsa0tTNW1iR0ZuSUdGeklHSnZiMnhsWVc0N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVjBJR1pzWVdjZ2RHOGdZbVVnWlc1aFlteGxaQzlrYVhOaFlteGxaQzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdhV1FnVkdobElHbGtJRzltSUhSb1pTQm1iR0ZuSUhSdklIUnZaMmRzWlM1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnWm14aFowVnVZV0pzWldRZ1ZISjFaU0JwWmlCMGFHVWdabXhoWnlCemFHOTFiR1FnWW1VZ1pXNWhZbXhsWkM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6WlhSR2JHRm5SVzVoWW14bFpDaHBaRG9nUm14aFozTkpaSE1zSUdac1lXZEZibUZpYkdWa09pQmliMjlzWldGdUtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaGRHaHBjeTVtYkdGbmN5NW9ZWE1vYVdRcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1VjJGeWJtbHVaeWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHQkRZVzV1YjNRZ2RHOW5aMnhsSUdac1lXY2dZMkZzYkdWa0lDUjdhV1I5SUMwZ2FYUWdaRzlsY3lCdWIzUWdaWGhwYzNRZ2FXNGdkR2hsSUVOdmJtWnBaeTVtYkdGbmN5QnRZWEF1WUZ4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Wm14aFozTXVaMlYwS0dsa0tTNW1iR0ZuSUQwZ1pteGhaMFZ1WVdKc1pXUTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJUWlhRZ2RHaGxJSFJsZUhRZ2MyVjBkR2x1Wnk1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnYVdRZ1ZHaGxJR2xrSUc5bUlIUm9aU0J6WlhSMGFXNW5YRzRnSUNBZ0lDb2dRSEJoY21GdElITmxkSFJwYm1kV1lXeDFaU0JVYUdVZ2RtRnNkV1VnZEc4Z2MyVjBJR2x1SUhSb1pTQnpaWFIwYVc1bkxseHVJQ0FnSUNBcUwxeHVJQ0FnSUhObGRGUmxlSFJUWlhSMGFXNW5LR2xrT2lCVVpYaDBVR0Z5WVcxbGRHVnljMGxrY3l3Z2MyVjBkR2x1WjFaaGJIVmxPaUJ6ZEhKcGJtY3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TG5SbGVIUlFZWEpoYldWMFpYSnpMbWhoY3locFpDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1WFlYSnVhVzVuS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZRU5oYm01dmRDQnpaWFFnZEdWNGRDQnpaWFIwYVc1bklHTmhiR3hsWkNBa2UybGtmU0F0SUdsMElHUnZaWE1nYm05MElHVjRhWE4wSUdsdUlIUm9aU0JEYjI1bWFXY3VkR1Y0ZEZCaGNtRnRaWFJsY25NZ2JXRndMbUJjYmlBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblJsZUhSUVlYSmhiV1YwWlhKekxtZGxkQ2hwWkNrdWRHVjRkQ0E5SUhObGRIUnBibWRXWVd4MVpUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sZENCMGFHVWdiM0IwYVc5dUlITmxkSFJwYm1jZ2JHbHpkQ0J2WmlCdmNIUnBiMjV6TGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0JwWkNCVWFHVWdhV1FnYjJZZ2RHaGxJSE5sZEhScGJtZGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2MyVjBkR2x1WjA5d2RHbHZibk1nVkdobElIWmhiSFZsY3lCMGFHVWdjMlYwZEdsdVp5QmpiM1ZzWkNCMFlXdGxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MyVjBUM0IwYVc5dVUyVjBkR2x1WjA5d2RHbHZibk1vWEc0Z0lDQWdJQ0FnSUdsa09pQlBjSFJwYjI1UVlYSmhiV1YwWlhKelNXUnpMRnh1SUNBZ0lDQWdJQ0J6WlhSMGFXNW5UM0IwYVc5dWN6b2dRWEp5WVhrOGMzUnlhVzVuUGx4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdWIzQjBhVzl1VUdGeVlXMWxkR1Z5Y3k1b1lYTW9hV1FwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVWMkZ5Ym1sdVp5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdCRFlXNXViM1FnYzJWMElIUmxlSFFnYzJWMGRHbHVaeUJqWVd4c1pXUWdKSHRwWkgwZ0xTQnBkQ0JrYjJWeklHNXZkQ0JsZUdsemRDQnBiaUIwYUdVZ1EyOXVabWxuTG05d2RHbHZibEJoY21GdFpYUmxjbk1nYldGd0xtQmNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtOXdkR2x2YmxCaGNtRnRaWFJsY25NdVoyVjBLR2xrS1M1dmNIUnBiMjV6SUQwZ2MyVjBkR2x1WjA5d2RHbHZibk03WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVFpYUWdiM0IwYVc5dUlHVnVkVzBnYzJWMGRHbHVaM01nYzJWc1pXTjBaV1FnYjNCMGFXOXVMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnBaQ0JVYUdVZ2FXUWdiMllnZEdobElITmxkSFJwYm1kY2JpQWdJQ0FnS2lCQWNHRnlZVzBnYzJWMGRHbHVaMDl3ZEdsdmJuTWdWR2hsSUhaaGJIVmxJSFJ2SUhObGJHVmpkQ0J2ZFhRZ2IyWWdZV3hzSUhSb1pTQnZjSFJwYjI1elhHNGdJQ0FnSUNvdlhHNGdJQ0FnYzJWMFQzQjBhVzl1VTJWMGRHbHVaMVpoYkhWbEtHbGtPaUJQY0hScGIyNVFZWEpoYldWMFpYSnpTV1J6TENCelpYUjBhVzVuVm1Gc2RXVTZJSE4wY21sdVp5a2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11YjNCMGFXOXVVR0Z5WVcxbGRHVnljeTVvWVhNb2FXUXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVYyRnlibWx1WnloY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1UjJWMFUzUmhZMnRVY21GalpTZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0JEWVc1dWIzUWdjMlYwSUhSbGVIUWdjMlYwZEdsdVp5QmpZV3hzWldRZ0pIdHBaSDBnTFNCcGRDQmtiMlZ6SUc1dmRDQmxlR2x6ZENCcGJpQjBhR1VnUTI5dVptbG5MbVZ1ZFcxUVlYSmhiV1YwWlhKeklHMWhjQzVnWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYjNCMGFXOXVVMlYwZEdsdVp5QTlJSFJvYVhNdWIzQjBhVzl1VUdGeVlXMWxkR1Z5Y3k1blpYUW9hV1FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1pYaHBjM1JwYm1kUGNIUnBiMjV6SUQwZ2IzQjBhVzl1VTJWMGRHbHVaeTV2Y0hScGIyNXpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZsZUdsemRHbHVaMDl3ZEdsdmJuTXVhVzVqYkhWa1pYTW9jMlYwZEdsdVoxWmhiSFZsS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVjRhWE4wYVc1blQzQjBhVzl1Y3k1d2RYTm9LSE5sZEhScGJtZFdZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IzQjBhVzl1VTJWMGRHbHVaeTV2Y0hScGIyNXpJRDBnWlhocGMzUnBibWRQY0hScGIyNXpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYjNCMGFXOXVVMlYwZEdsdVp5NXpaV3hsWTNSbFpDQTlJSE5sZEhScGJtZFdZV3gxWlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTmxkQ0IwYUdVZ2JHRmlaV3dnWm05eUlIUm9aU0JtYkdGbkxseHVJQ0FnSUNBcUlFQndZWEpoYlNCcFpDQlVhR1VnYVdRZ2IyWWdkR2hsSUdac1lXY3VYRzRnSUNBZ0lDb2dRSEJoY21GdElHeGhZbVZzSUZSb1pTQnVaWGNnYkdGaVpXd2dkRzhnZFhObElHWnZjaUIwYUdVZ1pteGhaeTVjYmlBZ0lDQWdLaTljYmlBZ0lDQnpaWFJHYkdGblRHRmlaV3dvYVdRNklFWnNZV2R6U1dSekxDQnNZV0psYkRvZ2MzUnlhVzVuS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NW1iR0ZuY3k1b1lYTW9hV1FwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVWMkZ5Ym1sdVp5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdCRFlXNXViM1FnYzJWMElHeGhZbVZzSUdadmNpQm1iR0ZuSUdOaGJHeGxaQ0FrZTJsa2ZTQXRJR2wwSUdSdlpYTWdibTkwSUdWNGFYTjBJR2x1SUhSb1pTQkRiMjVtYVdjdVpteGhaM01nYldGd0xtQmNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtWnNZV2R6TG1kbGRDaHBaQ2t1YkdGaVpXd2dQU0JzWVdKbGJEdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0F2S2lwY2JpQWdJQ0FnSUNBZ0lDb2dVMlYwSUdFZ2MzVmljMlYwSUc5bUlHRnNiQ0J6WlhSMGFXNW5jeUJwYmlCdmJtVWdablZ1WTNScGIyNGdZMkZzYkM1Y2JpQWdJQ0FnSUNBZ0lDcGNiaUFnSUNBZ0lDQWdJQ29nUUhCaGNtRnRJSE5sZEhScGJtZHpJRUVnS0hCaGNuUnBZV3dwSUd4cGMzUWdiMllnYzJWMGRHbHVaM01nZEc4Z2MyVjBYRzRnSUNBZ0lDQWdJQ0FxTDF4dUlDQWdJQ0FnSUNCelpYUlRaWFIwYVc1bmN5aHpaWFIwYVc1bmN6b2dVR0Z5ZEdsaGJEeEJiR3hUWlhSMGFXNW5jejRwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb1kyOXVjM1FnYTJWNUlHOW1JRTlpYW1WamRDNXJaWGx6S0hObGRIUnBibWR6S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hwYzBac1lXZEpaQ2hyWlhrcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlYwUm14aFowVnVZV0pzWldRb2EyVjVMQ0J6WlhSMGFXNW5jMXRyWlhsZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR2x6VG5WdFpYSnBZMGxrS0d0bGVTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6WlhST2RXMWxjbWxqVTJWMGRHbHVaeWhyWlhrc0lITmxkSFJwYm1kelcydGxlVjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2FYTlVaWGgwU1dRb2EyVjVLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRGUmxlSFJUWlhSMGFXNW5LR3RsZVN3Z2MyVjBkR2x1WjNOYmEyVjVYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNocGMwOXdkR2x2Ymtsa0tHdGxlU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpYUlBjSFJwYjI1VFpYUjBhVzVuVm1Gc2RXVW9hMlY1TENCelpYUjBhVzVuYzF0clpYbGRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVkbGRDQmhiR3dnYzJWMGRHbHVaM05jYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUJCYkd3Z2MyVjBkR2x1WnlCMllXeDFaWE1nWVhNZ1lXNGdiMkpxWldOMElIZHBkR2dnYzJWMGRHbHVaeUJwWkhNZ1lYTWdhMlY1YzF4dUlDQWdJQ0FxTDF4dUlDQWdJR2RsZEZObGRIUnBibWR6S0NrNklGQmhjblJwWVd3OFFXeHNVMlYwZEdsdVozTStJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjMlYwZEdsdVozTTZJRkJoY25ScFlXdzhRV3hzVTJWMGRHbHVaM00rSUQwZ2UzMDdYRzRnSUNBZ0lDQWdJR1p2Y2lBb1kyOXVjM1FnVzJ0bGVTd2dkbUZzZFdWZElHOW1JSFJvYVhNdVpteGhaM011Wlc1MGNtbGxjeWdwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6WlhSMGFXNW5jMXRyWlhsZElEMGdkbUZzZFdVdVpteGhaenRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbWIzSWdLR052Ym5OMElGdHJaWGtzSUhaaGJIVmxYU0J2WmlCMGFHbHpMbTUxYldWeWFXTlFZWEpoYldWMFpYSnpMbVZ1ZEhKcFpYTW9LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjMlYwZEdsdVozTmJhMlY1WFNBOUlIWmhiSFZsTG01MWJXSmxjanRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbWIzSWdLR052Ym5OMElGdHJaWGtzSUhaaGJIVmxYU0J2WmlCMGFHbHpMblJsZUhSUVlYSmhiV1YwWlhKekxtVnVkSEpwWlhNb0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVjBkR2x1WjNOYmEyVjVYU0E5SUhaaGJIVmxMblJsZUhRN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdabTl5SUNoamIyNXpkQ0JiYTJWNUxDQjJZV3gxWlYwZ2IyWWdkR2hwY3k1dmNIUnBiMjVRWVhKaGJXVjBaWEp6TG1WdWRISnBaWE1vS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWMGRHbHVaM05iYTJWNVhTQTlJSFpoYkhWbExuTmxiR1ZqZEdWa08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnpaWFIwYVc1bmN6dGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkhaWFFnWVd4c0lFWnNZV2NnYzJWMGRHbHVaM01nWVhNZ1lXNGdZWEp5WVhrdVhHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ1FXeHNJRk5sZEhScGJtZEdiR0ZuSUc5aWFtVmpkSE5jYmlBZ0lDQWdLaTljYmlBZ0lDQm5aWFJHYkdGbmN5Z3BPaUJCY25KaGVUeFRaWFIwYVc1blJteGhaejRnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnUVhKeVlYa3Vabkp2YlNoMGFHbHpMbVpzWVdkekxuWmhiSFZsY3lncEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkhaWFFnWVd4c0lGUmxlSFFnYzJWMGRHbHVaM01nWVhNZ1lXNGdZWEp5WVhrdVhHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ1FXeHNJRk5sZEhScGJtZFVaWGgwSUc5aWFtVmpkSE5jYmlBZ0lDQWdLaTljYmlBZ0lDQm5aWFJVWlhoMFUyVjBkR2x1WjNNb0tUb2dRWEp5WVhrOFUyVjBkR2x1WjFSbGVIUStJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRUZ5Y21GNUxtWnliMjBvZEdocGN5NTBaWGgwVUdGeVlXMWxkR1Z5Y3k1MllXeDFaWE1vS1NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1IyVjBJR0ZzYkNCT2RXMWlaWElnYzJWMGRHbHVaM01nWVhNZ1lXNGdZWEp5WVhrdVhHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ1FXeHNJRk5sZEhScGJtZE9kVzFpWlhJZ2IySnFaV04wYzF4dUlDQWdJQ0FxTDF4dUlDQWdJR2RsZEU1MWJXVnlhV05UWlhSMGFXNW5jeWdwT2lCQmNuSmhlVHhUWlhSMGFXNW5UblZ0WW1WeVBpQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQkJjbkpoZVM1bWNtOXRLSFJvYVhNdWJuVnRaWEpwWTFCaGNtRnRaWFJsY25NdWRtRnNkV1Z6S0NrcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFZGxkQ0JoYkd3Z1QzQjBhVzl1SUhObGRIUnBibWR6SUdGeklHRnVJR0Z5Y21GNUxseHVJQ0FnSUNBcUlFQnlaWFIxY201eklFRnNiQ0JUWlhSMGFXNW5UM0IwYVc5dUlHOWlhbVZqZEhOY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JuWlhSUGNIUnBiMjVUWlhSMGFXNW5jeWdwT2lCQmNuSmhlVHhUWlhSMGFXNW5UM0IwYVc5dVBpQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQkJjbkpoZVM1bWNtOXRLSFJvYVhNdWIzQjBhVzl1VUdGeVlXMWxkR1Z5Y3k1MllXeDFaWE1vS1NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1JXMXBkQ0JsZG1WdWRITWdkMmhsYmlCelpYUjBhVzVuY3lCamFHRnVaMlV1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJR1YyWlc1MFJXMXBkSFJsY2x4dUlDQWdJQ0FxTDF4dUlDQWdJRjl5WldkcGMzUmxjazl1UTJoaGJtZGxSWFpsYm5SektHVjJaVzUwUlcxcGRIUmxjam9nUlhabGJuUkZiV2wwZEdWeUtTQjdYRzRnSUNBZ0lDQWdJR1p2Y2lBb1kyOXVjM1FnYTJWNUlHOW1JSFJvYVhNdVpteGhaM011YTJWNWN5Z3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCbWJHRm5JRDBnZEdocGN5NW1iR0ZuY3k1blpYUW9hMlY1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobWJHRm5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm14aFp5NXZia05vWVc1blpVVnRhWFFnUFNBb2JtVjNWbUZzZFdVNklHSnZiMnhsWVc0cElEMCtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWMlpXNTBSVzFwZEhSbGNpNWthWE53WVhSamFFVjJaVzUwS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1WM0lGTmxkSFJwYm1kelEyaGhibWRsWkVWMlpXNTBLSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFpEb2dabXhoWnk1cFpDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQW5abXhoWnljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHNWxkMVpoYkhWbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJoY21kbGREb2dabXhoWjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JtYjNJZ0tHTnZibk4wSUd0bGVTQnZaaUIwYUdsekxtNTFiV1Z5YVdOUVlYSmhiV1YwWlhKekxtdGxlWE1vS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdiblZ0WW1WeUlEMGdkR2hwY3k1dWRXMWxjbWxqVUdGeVlXMWxkR1Z5Y3k1blpYUW9hMlY1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNodWRXMWlaWElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdWRXMWlaWEl1YjI1RGFHRnVaMlZGYldsMElEMGdLRzVsZDFaaGJIVmxPaUJ1ZFcxaVpYSXBJRDArWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVjJaVzUwUlcxcGRIUmxjaTVrYVhOd1lYUmphRVYyWlc1MEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtVjNJRk5sZEhScGJtZHpRMmhoYm1kbFpFVjJaVzUwS0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaRG9nYm5WdFltVnlMbWxrTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNkdWRXMWlaWEluTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCdVpYZFdZV3gxWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBZWEpuWlhRNklHNTFiV0psY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JtYjNJZ0tHTnZibk4wSUd0bGVTQnZaaUIwYUdsekxuUmxlSFJRWVhKaGJXVjBaWEp6TG10bGVYTW9LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2RHVjRkQ0E5SUhSb2FYTXVkR1Y0ZEZCaGNtRnRaWFJsY25NdVoyVjBLR3RsZVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHVjRkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSbGVIUXViMjVEYUdGdVoyVkZiV2wwSUQwZ0tHNWxkMVpoYkhWbE9pQnpkSEpwYm1jcElEMCtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWMlpXNTBSVzFwZEhSbGNpNWthWE53WVhSamFFVjJaVzUwS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1WM0lGTmxkSFJwYm1kelEyaGhibWRsWkVWMlpXNTBLSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFpEb2dkR1Y0ZEM1cFpDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQW5kR1Y0ZENjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHNWxkMVpoYkhWbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJoY21kbGREb2dkR1Y0ZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JtYjNJZ0tHTnZibk4wSUd0bGVTQnZaaUIwYUdsekxtOXdkR2x2YmxCaGNtRnRaWFJsY25NdWEyVjVjeWdwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnZjSFJwYjI0Z1BTQjBhR2x6TG05d2RHbHZibEJoY21GdFpYUmxjbk11WjJWMEtHdGxlU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYjNCMGFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjNCMGFXOXVMbTl1UTJoaGJtZGxSVzFwZENBOUlDaHVaWGRXWVd4MVpUb2djM1J5YVc1bktTQTlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGRtVnVkRVZ0YVhSMFpYSXVaR2x6Y0dGMFkyaEZkbVZ1ZENoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1bGR5QlRaWFIwYVc1bmMwTm9ZVzVuWldSRmRtVnVkQ2g3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXUTZJRzl3ZEdsdmJpNXBaQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFuYjNCMGFXOXVKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nYm1WM1ZtRnNkV1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHRnlaMlYwT2lCdmNIUnBiMjVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNTlYRzVjYmk4cUtseHVJQ29nVkdobElHVnVkVzBnWVhOemIyTnBZWFJsWkNCM2FYUm9JSFJvWlNCdGIzVnpaU0JpWldsdVp5QnNiMk5yWldRZ2IzSWdhRzkyWlhKcGJtZGNiaUFxTDF4dVpYaHdiM0owSUdWdWRXMGdRMjl1ZEhKdmJGTmphR1Z0WlZSNWNHVWdlMXh1SUNBZ0lFeHZZMnRsWkUxdmRYTmxJRDBnTUN4Y2JpQWdJQ0JJYjNabGNtbHVaMDF2ZFhObElEMGdNVnh1ZlZ4dUlpd2lMeThnUTI5d2VYSnBaMmgwSUVWd2FXTWdSMkZ0WlhNc0lFbHVZeTRnUVd4c0lGSnBaMmgwY3lCU1pYTmxjblpsWkM1Y2JseHVMeW9xWEc0Z0tpQkNZWE5sSUdOc1lYTnpJR1p2Y2lCaElITmxkSFJwYm1jZ2RHaGhkQ0JvWVhNZ1lTQjBaWGgwSUd4aFltVnNJR0Z1WkNCaGJpQmhjbUpwZEhKaGNua2djMlYwZEdsdVp5QjJZV3gxWlNCcGRDQnpkRzl5WlhNdVhHNGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5QlRaWFIwYVc1blFtRnpaU0I3WEc0Z0lDQWdhV1E2SUhOMGNtbHVaenRjYmlBZ0lDQmtaWE5qY21sd2RHbHZiam9nYzNSeWFXNW5PMXh1SUNBZ0lGOXNZV0psYkRvZ2MzUnlhVzVuTzF4dUlDQWdJRjkyWVd4MVpUb2dkVzVyYm05M2JqdGNiaUFnSUNCdmJrTm9ZVzVuWlRvZ0tHTm9ZVzVuWldSV1lXeDFaVG9nZFc1cmJtOTNiaXdnYzJWMGRHbHVaem9nVTJWMGRHbHVaMEpoYzJVcElEMCtJSFp2YVdRN1hHNGdJQ0FnYjI1RGFHRnVaMlZGYldsME9pQW9ZMmhoYm1kbFpGWmhiSFZsT2lCMWJtdHViM2R1S1NBOVBpQjJiMmxrTzF4dVhHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb1hHNGdJQ0FnSUNBZ0lHbGtPaUJ6ZEhKcGJtY3NYRzRnSUNBZ0lDQWdJR3hoWW1Wc09pQnpkSEpwYm1jc1hHNGdJQ0FnSUNBZ0lHUmxjMk55YVhCMGFXOXVPaUJ6ZEhKcGJtY3NYRzRnSUNBZ0lDQWdJR1JsWm1GMWJIUlRaWFIwYVc1blZtRnNkV1U2SUhWdWEyNXZkMjRzWEc1Y2RGeDBMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRibVY0ZEMxc2FXNWxJRUIwZVhCbGMyTnlhWEIwTFdWemJHbHVkQzl1YnkxbGJYQjBlUzFtZFc1amRHbHZibHh1WEhSY2RHUmxabUYxYkhSUGJrTm9ZVzVuWlV4cGMzUmxibVZ5T2lBb1kyaGhibWRsWkZaaGJIVmxPaUIxYm10dWIzZHVMQ0J6WlhSMGFXNW5PaUJUWlhSMGFXNW5RbUZ6WlNrZ1BUNGdkbTlwWkNBOUlDZ3BJRDArSUhzZ0x5b2dSRzhnYm05MGFHbHVaeXdnZEc4Z1ltVWdiM1psY25KcFpHUmxiaTRnS2k4Z2ZWeHVJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG05dVEyaGhibWRsSUQwZ1pHVm1ZWFZzZEU5dVEyaGhibWRsVEdsemRHVnVaWEk3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV2YmtOb1lXNW5aVVZ0YVhRZ1BTQW9LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2S2lCRWJ5QnViM1JvYVc1bkxDQjBieUJpWlNCdmRtVnljbWxrWkdWdUxpQXFMMXh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbWxrSUQwZ2FXUTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpHVnpZM0pwY0hScGIyNGdQU0JrWlhOamNtbHdkR2x2Ymp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVzWVdKbGJDQTlJR3hoWW1Wc08xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5aaGJIVmxJRDBnWkdWbVlYVnNkRk5sZEhScGJtZFdZV3gxWlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVFpYUWdkR2hsSUd4aFltVnNJSFJsZUhRZ1ptOXlJSFJvWlNCelpYUjBhVzVuTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0JzWVdKbGJDQnpaWFIwYVc1bklHeGhZbVZzTGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5QnpaWFFnYkdGaVpXd29hVzVNWVdKbGJEb2djM1J5YVc1bktTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyeGhZbVZzSUQwZ2FXNU1ZV0psYkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV2YmtOb1lXNW5aVVZ0YVhRb2RHaHBjeTVmZG1Gc2RXVXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJRlJvWlNCc1lXSmxiQ0IwWlhoMElHWnZjaUIwYUdVZ2MyVjBkR2x1Wnk1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdaMlYwSUd4aFltVnNLQ2s2SUhOMGNtbHVaeUI3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXNZV0psYkR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUZSb1pTQnpaWFIwYVc1bkozTWdkbUZzZFdVdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJR2RsZENCMllXeDFaU2dwT2lCMWJtdHViM2R1SUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM1poYkhWbE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGVndaR0YwWlNCMGFHVWdjMlYwZEdsdVp5ZHpJSE4wYjNKbFpDQjJZV3gxWlM1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnYVc1V1lXeDFaU0JVYUdVZ2JtVjNJSFpoYkhWbElHWnZjaUIwYUdVZ2MyVjBkR2x1Wnk1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdjMlYwSUhaaGJIVmxLR2x1Vm1Gc2RXVTZJSFZ1YTI1dmQyNHBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZkbUZzZFdVZ1BTQnBibFpoYkhWbE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG05dVEyaGhibWRsS0hSb2FYTXVYM1poYkhWbExDQjBhR2x6S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV2YmtOb1lXNW5aVVZ0YVhRb2RHaHBjeTVmZG1Gc2RXVXBPMXh1SUNBZ0lIMWNibjFjYmlJc0lpOHZJRU52Y0hseWFXZG9kQ0JGY0dsaklFZGhiV1Z6TENCSmJtTXVJRUZzYkNCU2FXZG9kSE1nVW1WelpYSjJaV1F1WEc1Y2JtbHRjRzl5ZENCMGVYQmxJSHNnUm14aFozTkpaSE1nZlNCbWNtOXRJQ2N1TDBOdmJtWnBaeWM3WEc1cGJYQnZjblFnZXlCVFpYUjBhVzVuUW1GelpTQjlJR1p5YjIwZ0p5NHZVMlYwZEdsdVowSmhjMlVuTzF4dVhHNHZLaXBjYmlBcUlFRWdZbTl2YkdWaGJpQm1iR0ZuSUhObGRIUnBibWNnYjJKcVpXTjBJSGRwZEdnZ1lTQjBaWGgwSUd4aFltVnNMbHh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nVTJWMGRHbHVaMFpzWVdjOFhHNGdJQ0FnUTNWemRHOXRTV1J6SUdWNGRHVnVaSE1nYzNSeWFXNW5JRDBnUm14aFozTkpaSE5jYmo0Z1pYaDBaVzVrY3lCVFpYUjBhVzVuUW1GelpTQjdYRzRnSUNBZ2FXUTZJRVpzWVdkelNXUnpJSHdnUTNWemRHOXRTV1J6TzF4dUlDQWdJRzl1UTJoaGJtZGxSVzFwZERvZ0tHTm9ZVzVuWldSV1lXeDFaVG9nWW05dmJHVmhiaWtnUFQ0Z2RtOXBaRHRjYmlBZ0lDQjFjMlZWY214UVlYSmhiWE02SUdKdmIyeGxZVzQ3WEc1Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2loY2JpQWdJQ0FnSUNBZ2FXUTZJRVpzWVdkelNXUnpJSHdnUTNWemRHOXRTV1J6TEZ4dUlDQWdJQ0FnSUNCc1lXSmxiRG9nYzNSeWFXNW5MRnh1SUNBZ0lDQWdJQ0JrWlhOamNtbHdkR2x2YmpvZ2MzUnlhVzVuTEZ4dUlDQWdJQ0FnSUNCa1pXWmhkV3gwUm14aFoxWmhiSFZsT2lCaWIyOXNaV0Z1TEZ4dUlDQWdJQ0FnSUNCMWMyVlZjbXhRWVhKaGJYTTZJR0p2YjJ4bFlXNHNYRzVjZEZ4MEx5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElFQjBlWEJsYzJOeWFYQjBMV1Z6YkdsdWRDOXVieTFsYlhCMGVTMW1kVzVqZEdsdmJseHVYSFJjZEdSbFptRjFiSFJQYmtOb1lXNW5aVXhwYzNSbGJtVnlPaUFvWTJoaGJtZGxaRlpoYkhWbE9pQjFibXR1YjNkdUxDQnpaWFIwYVc1bk9pQlRaWFIwYVc1blFtRnpaU2tnUFQ0Z2RtOXBaQ0E5SUNncElEMCtJSHNnTHlvZ1JHOGdibTkwYUdsdVp5d2dkRzhnWW1VZ2IzWmxjbkpwWkdSbGJpNGdLaThnZlZ4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNCemRYQmxjaWhwWkN3Z2JHRmlaV3dzSUdSbGMyTnlhWEIwYVc5dUxDQmtaV1poZFd4MFJteGhaMVpoYkhWbExDQmtaV1poZFd4MFQyNURhR0Z1WjJWTWFYTjBaVzVsY2lrN1hHNWNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2RYSnNVR0Z5WVcxeklEMGdibVYzSUZWU1RGTmxZWEpqYUZCaGNtRnRjeWgzYVc1a2IzY3ViRzlqWVhScGIyNHVjMlZoY21Ob0tUdGNiaUFnSUNBZ0lDQWdhV1lnS0NGMWMyVlZjbXhRWVhKaGJYTWdmSHdnSVhWeWJGQmhjbUZ0Y3k1b1lYTW9kR2hwY3k1cFpDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Wm14aFp5QTlJR1JsWm1GMWJIUkdiR0ZuVm1Gc2RXVTdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QndZWEp6WlNCbWJHRm5JR1p5YjIwZ2RYSnNJSEJoY21GdFpYUmxjbk5jYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhWeWJGQmhjbUZ0Um14aFp5QTlJSFJvYVhNdVoyVjBWWEpzVUdGeVlXMUdiR0ZuS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtWnNZV2NnUFNCMWNteFFZWEpoYlVac1lXYzdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZEdocGN5NTFjMlZWY214UVlYSmhiWE1nUFNCMWMyVlZjbXhRWVhKaGJYTTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVR0Z5YzJVZ2RHaGxJR1pzWVdjZ2RtRnNkV1VnWm5KdmJTQjBhR1VnZFhKc0lIQmhjbUZ0WlhSbGNuTXVYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdWSEoxWlNCcFppQjBhR1VnZFhKc0lIQmhjbUZ0WlhSbGNuTWdZMjl1ZEdGcGJuTWdMejlwWkN3Z1luVjBJRVpoYkhObElHbG1JQzgvYVdROVptRnNjMlZjYmlBZ0lDQWdLaTljYmlBZ0lDQm5aWFJWY214UVlYSmhiVVpzWVdjb0tUb2dZbTl2YkdWaGJpQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElIVnliRkJoY21GdGN5QTlJRzVsZHlCVlVreFRaV0Z5WTJoUVlYSmhiWE1vZDJsdVpHOTNMbXh2WTJGMGFXOXVMbk5sWVhKamFDazdYRzRnSUNBZ0lDQWdJR2xtSUNoMWNteFFZWEpoYlhNdWFHRnpLSFJvYVhNdWFXUXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFhKc1VHRnlZVzF6TG1kbGRDaDBhR2x6TG1sa0tTQTlQVDBnSjJaaGJITmxKeUI4ZkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWeWJGQmhjbUZ0Y3k1blpYUW9kR2hwY3k1cFpDa2dQVDA5SUNkR1lXeHpaU2RjYmlBZ0lDQWdJQ0FnSUNBZ0lDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlFaWEp6YVhOMElIUm9aU0J6WlhSMGFXNW5JSFpoYkhWbElHbHVJRlZTVEM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdkWEJrWVhSbFZWSk1VR0Z5WVcxektDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTUxYzJWVmNteFFZWEpoYlhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklITmxkQ0IxY213Z2NHRnlZVzF6WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCMWNteFFZWEpoYlhNZ1BTQnVaWGNnVlZKTVUyVmhjbU5vVUdGeVlXMXpLSGRwYm1SdmR5NXNiMk5oZEdsdmJpNXpaV0Z5WTJncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11Wm14aFp5QTlQVDBnZEhKMVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFZ5YkZCaGNtRnRjeTV6WlhRb2RHaHBjeTVwWkN3Z0ozUnlkV1VuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkWEpzVUdGeVlXMXpMbk5sZENoMGFHbHpMbWxrTENBblptRnNjMlVuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIZHBibVJ2ZHk1b2FYTjBiM0o1TG5KbGNHeGhZMlZUZEdGMFpTaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWNteFFZWEpoYlhNdWRHOVRkSEpwYm1jb0tTQWhQVDBnSnlkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQeUJnSkh0c2IyTmhkR2x2Ymk1d1lYUm9ibUZ0WlgwL0pIdDFjbXhRWVhKaGJYTjlZRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBNklHQWtlMnh2WTJGMGFXOXVMbkJoZEdodVlXMWxmV0JjYmlBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJGYm1GaWJHVnpJSFJvYVhNZ1pteGhaeTVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ1pXNWhZbXhsS0NrNklIWnZhV1FnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbVpzWVdjZ1BTQjBjblZsTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnVkdobElITmxkSFJwYm1jbmN5QjJZV3gxWlM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdaMlYwSUdac1lXY29LVG9nWW05dmJHVmhiaUI3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFoSVhSb2FYTXVkbUZzZFdVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1ZYQmtZWFJsSUhSb1pTQnpaWFIwYVc1bkozTWdjM1J2Y21Wa0lIWmhiSFZsTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0JwYmxaaGJIVmxJRlJvWlNCdVpYY2dkbUZzZFdVZ1ptOXlJSFJvWlNCelpYUjBhVzVuTGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5QnpaWFFnWm14aFp5aHBibFpoYkhWbE9pQmliMjlzWldGdUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRtRnNkV1VnUFNCcGJsWmhiSFZsTzF4dUlDQWdJSDFjYm4xY2JpSXNJaTh2SUVOdmNIbHlhV2RvZENCRmNHbGpJRWRoYldWekxDQkpibU11SUVGc2JDQlNhV2RvZEhNZ1VtVnpaWEoyWldRdVhHNWNibWx0Y0c5eWRDQjBlWEJsSUhzZ1RuVnRaWEpwWTFCaGNtRnRaWFJsY25OSlpITWdmU0JtY205dElDY3VMME52Ym1acFp5YzdYRzVwYlhCdmNuUWdleUJUWlhSMGFXNW5RbUZ6WlNCOUlHWnliMjBnSnk0dlUyVjBkR2x1WjBKaGMyVW5PMXh1WEc0dktpcGNiaUFxSUVFZ2JuVnRZbVZ5SUhObGRIUnBibWNnYjJKcVpXTjBJSGRwZEdnZ1lTQjBaWGgwSUd4aFltVnNMaUJOYVc0Z1lXNWtJRzFoZUNCc2FXMXBkQ0IwYUdVZ2NtRnVaMlVnYjJZZ1lXeHNiM2RsWkNCMllXeDFaWE11WEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCVFpYUjBhVzVuVG5WdFltVnlQRnh1SUNBZ0lFTjFjM1J2YlVsa2N5QmxlSFJsYm1SeklITjBjbWx1WnlBOUlFNTFiV1Z5YVdOUVlYSmhiV1YwWlhKelNXUnpYRzQrSUdWNGRHVnVaSE1nVTJWMGRHbHVaMEpoYzJVZ2UxeHVJQ0FnSUY5dGFXNDZJRzUxYldKbGNpQjhJRzUxYkd3N1hHNGdJQ0FnWDIxaGVEb2diblZ0WW1WeUlId2diblZzYkR0Y2JseHVJQ0FnSUdsa09pQk9kVzFsY21salVHRnlZVzFsZEdWeWMwbGtjeUI4SUVOMWMzUnZiVWxrY3p0Y2JpQWdJQ0J2YmtOb1lXNW5aVVZ0YVhRNklDaGphR0Z1WjJWa1ZtRnNkV1U2SUc1MWJXSmxjaWtnUFQ0Z2RtOXBaRHRjYmlBZ0lDQjFjMlZWY214UVlYSmhiWE02SUdKdmIyeGxZVzQ3WEc1Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2loY2JpQWdJQ0FnSUNBZ2FXUTZJRTUxYldWeWFXTlFZWEpoYldWMFpYSnpTV1J6SUh3Z1EzVnpkRzl0U1dSekxGeHVJQ0FnSUNBZ0lDQnNZV0psYkRvZ2MzUnlhVzVuTEZ4dUlDQWdJQ0FnSUNCa1pYTmpjbWx3ZEdsdmJqb2djM1J5YVc1bkxGeHVJQ0FnSUNBZ0lDQnRhVzQ2SUc1MWJXSmxjaUI4SUc1MWJHd3NYRzRnSUNBZ0lDQWdJRzFoZURvZ2JuVnRZbVZ5SUh3Z2JuVnNiQ3hjYmlBZ0lDQWdJQ0FnWkdWbVlYVnNkRTUxYldKbGNqb2diblZ0WW1WeUxGeHVJQ0FnSUNBZ0lDQjFjMlZWY214UVlYSmhiWE02SUdKdmIyeGxZVzRzWEc1Y2RGeDBMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRibVY0ZEMxc2FXNWxJRUIwZVhCbGMyTnlhWEIwTFdWemJHbHVkQzl1YnkxbGJYQjBlUzFtZFc1amRHbHZibHh1WEhSY2RHUmxabUYxYkhSUGJrTm9ZVzVuWlV4cGMzUmxibVZ5T2lBb1kyaGhibWRsWkZaaGJIVmxPaUIxYm10dWIzZHVMQ0J6WlhSMGFXNW5PaUJUWlhSMGFXNW5RbUZ6WlNrZ1BUNGdkbTlwWkNBOUlDZ3BJRDArSUhzZ0x5b2dSRzhnYm05MGFHbHVaeXdnZEc4Z1ltVWdiM1psY25KcFpHUmxiaTRnS2k4Z2ZWeHVJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ0lDQnpkWEJsY2locFpDd2diR0ZpWld3c0lHUmxjMk55YVhCMGFXOXVMQ0JrWldaaGRXeDBUblZ0WW1WeUxDQmtaV1poZFd4MFQyNURhR0Z1WjJWTWFYTjBaVzVsY2lrN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmJXbHVJRDBnYldsdU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5dFlYZ2dQU0J0WVhnN1hHNWNiaUFnSUNBZ0lDQWdMeThnWVhSMFpXMXdkQ0IwYnlCeVpXRmtJSFJvWlNCdWRXMWlaWElnWm5KdmJTQjBhR1VnZFhKc0lIQmhjbUZ0YzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0IxY214UVlYSmhiWE1nUFNCdVpYY2dWVkpNVTJWaGNtTm9VR0Z5WVcxektIZHBibVJ2ZHk1c2IyTmhkR2x2Ymk1elpXRnlZMmdwTzF4dUlDQWdJQ0FnSUNCcFppQW9JWFZ6WlZWeWJGQmhjbUZ0Y3lCOGZDQWhkWEpzVUdGeVlXMXpMbWhoY3loMGFHbHpMbWxrS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXVkVzFpWlhJZ1BTQmtaV1poZFd4MFRuVnRZbVZ5TzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2NHRnljMlZrVm1Gc2RXVWdQU0JPZFcxaVpYSXVjR0Z5YzJWR2JHOWhkQ2gxY214UVlYSmhiWE11WjJWMEtIUm9hWE11YVdRcEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViblZ0WW1WeUlEMGdUblZ0WW1WeUxtbHpUbUZPS0hCaGNuTmxaRlpoYkhWbEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEOGdaR1ZtWVhWc2RFNTFiV0psY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURvZ2NHRnljMlZrVm1Gc2RXVTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZEdocGN5NTFjMlZWY214UVlYSmhiWE1nUFNCMWMyVlZjbXhRWVhKaGJYTTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVR1Z5YzJsemRDQjBhR1VnYzJWMGRHbHVaeUIyWVd4MVpTQnBiaUJWVWt3dVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJSFZ3WkdGMFpWVlNURkJoY21GdGN5Z3BPaUIyYjJsa0lIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVkWE5sVlhKc1VHRnlZVzF6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCelpYUWdkWEpzSUhCaGNtRnRjeUJzYVd0bElEOXBaRDF1ZFcxaVpYSmNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSFZ5YkZCaGNtRnRjeUE5SUc1bGR5QlZVa3hUWldGeVkyaFFZWEpoYlhNb2QybHVaRzkzTG14dlkyRjBhVzl1TG5ObFlYSmphQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjFjbXhRWVhKaGJYTXVjMlYwS0hSb2FYTXVhV1FzSUhSb2FYTXViblZ0WW1WeUxuUnZVM1J5YVc1bktDa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2QybHVaRzkzTG1ocGMzUnZjbmt1Y21Wd2JHRmpaVk4wWVhSbEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIdDlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2NuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWeWJGQmhjbUZ0Y3k1MGIxTjBjbWx1WnlncElDRTlQU0FuSjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQS9JR0FrZTJ4dlkyRjBhVzl1TG5CaGRHaHVZVzFsZlQ4a2UzVnliRkJoY21GdGMzMWdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURvZ1lDUjdiRzlqWVhScGIyNHVjR0YwYUc1aGJXVjlZRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sZENCMGFHVWdiblZ0WW1WeUlIWmhiSFZsSUNoM2FXeHNJR0psSUdOc1lXMXdaV1FnZDJsMGFHbHVJSEpoYm1kbEtTNWNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nYzJWMElHNTFiV0psY2lodVpYZE9kVzFpWlhJNklHNTFiV0psY2lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5aaGJIVmxJRDBnZEdocGN5NWpiR0Z0Y0NodVpYZE9kVzFpWlhJcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQnlaWFIxY201eklGUm9aU0J1ZFcxaVpYSWdjM1J2Y21Wa0xseHVJQ0FnSUNBcUwxeHVJQ0FnSUhCMVlteHBZeUJuWlhRZ2JuVnRZbVZ5S0NrNklHNTFiV0psY2lCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMblpoYkhWbElHRnpJRzUxYldKbGNqdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkRiR0Z0Y0hNZ1lTQnVkVzFpWlhJZ1ltVjBkMlZsYmlCMGFHVWdiV2x1SUdGdVpDQnRZWGdnZG1Gc2RXVnpJQ2hwYm1Oc2RYTnBkbVVwTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0JwYms1MWJXSmxjaUJVYUdVZ2JuVnRZbVZ5SUhSdklHTnNZVzF3TGx4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUZSb1pTQmpiR0Z0Y0dWa0lHNTFiV0psY2k1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdZMnhoYlhBb2FXNU9kVzFpWlhJNklHNTFiV0psY2lrNklHNTFiV0psY2lCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOXRhVzRnUFQwZ2JuVnNiQ0FtSmlCMGFHbHpMbDl0WVhnZ1BUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR2x1VG5WdFltVnlPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hSb2FYTXVYMjFwYmlBOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdUV0YwYUM1dGFXNG9kR2hwY3k1ZmJXRjRMQ0JwYms1MWJXSmxjaWs3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RHaHBjeTVmYldGNElEMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJOWVhSb0xtMWhlQ2gwYUdsekxsOXRhVzRzSUdsdVRuVnRZbVZ5S1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQk5ZWFJvTG0xaGVDaE5ZWFJvTG0xcGJpaDBhR2x6TGw5dFlYZ3NJR2x1VG5WdFltVnlLU3dnZEdocGN5NWZiV2x1S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGSmxkSFZ5Ym5NZ2RHaGxJRzFwYm1sdGRXMGdkbUZzZFdWY2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCVWFHVWdiV2x1YVcxMWJTQjJZV3gxWlZ4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5Qm5aWFFnYldsdUtDazZJRzUxYldKbGNpQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dGFXNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVbVYwZFhKdWN5QjBhR1VnYldGNGFXMTFiU0IyWVd4MVpWeHVJQ0FnSUNBcUlFQnlaWFIxY201eklGUm9aU0J0WVhocGJYVnRJSFpoYkhWbFhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJR2RsZENCdFlYZ29LVG9nYm5WdFltVnlJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMWhlRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJCWkdRZ1lTQmphR0Z1WjJVZ2JHbHpkR1Z1WlhJZ2RHOGdkR2hsSUc1MWJXSmxjaUJ2WW1wbFkzUXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUdGa1pFOXVRMmhoYm1kbFpFeHBjM1JsYm1WeUtHOXVRMmhoYm1kbFpFWjFibU02SUNodVpYZE9kVzFpWlhJNklHNTFiV0psY2lrZ1BUNGdkbTlwWkNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG05dVEyaGhibWRsSUQwZ2IyNURhR0Z1WjJWa1JuVnVZenRjYmlBZ0lDQjlYRzU5WEc0aUxDSXZMeUJEYjNCNWNtbG5hSFFnUlhCcFl5QkhZVzFsY3l3Z1NXNWpMaUJCYkd3Z1VtbG5hSFJ6SUZKbGMyVnlkbVZrTGx4dVhHNXBiWEJ2Y25RZ2RIbHdaU0I3SUU5d2RHbHZibEJoY21GdFpYUmxjbk5KWkhNZ2ZTQm1jbTl0SUNjdUwwTnZibVpwWnljN1hHNXBiWEJ2Y25RZ2V5QlRaWFIwYVc1blFtRnpaU0I5SUdaeWIyMGdKeTR2VTJWMGRHbHVaMEpoYzJVbk8xeHVYRzR2S2lwY2JpQXFJRUZ1SUU5d2RHbHZiaUJ6WlhSMGFXNW5JRzlpYW1WamRDQjNhWFJvSUdFZ2RHVjRkQ0JzWVdKbGJDNGdRV3hzYjNkeklIbHZkU0IwYnlCemNHVmphV1o1SUdGdUlHRnljbUY1SUc5bUlHOXdkR2x2Ym5NZ1lXNWtJSE5sYkdWamRDQnZibVVnYjJZZ2RHaGxiUzVjYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUZObGRIUnBibWRQY0hScGIyNDhYRzRnSUNBZ1EzVnpkRzl0U1dSeklHVjRkR1Z1WkhNZ2MzUnlhVzVuSUQwZ1QzQjBhVzl1VUdGeVlXMWxkR1Z5YzBsa2MxeHVQaUJsZUhSbGJtUnpJRk5sZEhScGJtZENZWE5sSUh0Y2JpQWdJQ0JwWkRvZ1QzQjBhVzl1VUdGeVlXMWxkR1Z5YzBsa2N5QjhJRU4xYzNSdmJVbGtjenRjYmlBZ0lDQnZia05vWVc1blpVVnRhWFE2SUNoamFHRnVaMlZrVm1Gc2RXVTZJSE4wY21sdVp5a2dQVDRnZG05cFpEdGNiaUFnSUNCZmIzQjBhVzl1Y3pvZ1FYSnlZWGs4YzNSeWFXNW5QanRjYmlBZ0lDQjFjMlZWY214UVlYSmhiWE02SUdKdmIyeGxZVzQ3WEc1Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2loY2JpQWdJQ0FnSUNBZ2FXUTZJRTl3ZEdsdmJsQmhjbUZ0WlhSbGNuTkpaSE1nZkNCRGRYTjBiMjFKWkhNc1hHNGdJQ0FnSUNBZ0lHeGhZbVZzT2lCemRISnBibWNzWEc0Z0lDQWdJQ0FnSUdSbGMyTnlhWEIwYVc5dU9pQnpkSEpwYm1jc1hHNGdJQ0FnSUNBZ0lHUmxabUYxYkhSVVpYaDBWbUZzZFdVNklITjBjbWx1Wnl4Y2JpQWdJQ0FnSUNBZ2IzQjBhVzl1Y3pvZ1FYSnlZWGs4YzNSeWFXNW5QaXhjYmlBZ0lDQWdJQ0FnZFhObFZYSnNVR0Z5WVcxek9pQmliMjlzWldGdUxGeHVYSFJjZEM4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFc1bGVIUXRiR2x1WlNCQWRIbHdaWE5qY21sd2RDMWxjMnhwYm5RdmJtOHRaVzF3ZEhrdFpuVnVZM1JwYjI1Y2JseDBYSFJrWldaaGRXeDBUMjVEYUdGdVoyVk1hWE4wWlc1bGNqb2dLR05vWVc1blpXUldZV3gxWlRvZ2RXNXJibTkzYml3Z2MyVjBkR2x1WnpvZ1UyVjBkR2x1WjBKaGMyVXBJRDArSUhadmFXUWdQU0FvS1NBOVBpQjdJQzhxSUVSdklHNXZkR2hwYm1jc0lIUnZJR0psSUc5MlpYSnlhV1JrWlc0dUlDb3ZJSDFjYmlBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnYzNWd1pYSW9hV1FzSUd4aFltVnNMQ0JrWlhOamNtbHdkR2x2Yml3Z1pHVm1ZWFZzZEZSbGVIUldZV3gxWlN3Z1pHVm1ZWFZzZEU5dVEyaGhibWRsVEdsemRHVnVaWElwTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11YjNCMGFXOXVjeUE5SUc5d2RHbHZibk03WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFZ5YkZCaGNtRnRjeUE5SUc1bGR5QlZVa3hUWldGeVkyaFFZWEpoYlhNb2QybHVaRzkzTG14dlkyRjBhVzl1TG5ObFlYSmphQ2s3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSE4wY21sdVoxUnZUV0YwWTJnNklITjBjbWx1WnlBOVhHNGdJQ0FnSUNBZ0lDQWdJQ0IxYzJWVmNteFFZWEpoYlhNZ0ppWWdkWEpzVUdGeVlXMXpMbWhoY3loMGFHbHpMbWxrS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQ4Z2RHaHBjeTVuWlhSVmNteFFZWEpoYlZSbGVIUW9LVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRG9nWkdWbVlYVnNkRlJsZUhSV1lXeDFaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaV3hsWTNSbFpDQTlJSE4wY21sdVoxUnZUV0YwWTJnN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZFhObFZYSnNVR0Z5WVcxeklEMGdkWE5sVlhKc1VHRnlZVzF6TzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZCaGNuTmxJSFJvWlNCMFpYaDBJSFpoYkhWbElHWnliMjBnZEdobElIVnliQ0J3WVhKaGJXVjBaWEp6TGx4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUZSb1pTQjBaWGgwSUhaaGJIVmxJSEJoY25ObFpDQm1jbTl0SUhSb1pTQjFjbXdnYVdZZ2RHaGxJSFZ5YkNCd1lYSmhiV1YwWlhKeklHTnZiblJoYVc1eklDOC9hV1E5ZG1Gc2RXVXNJR0oxZENCbGJYQjBlU0J6ZEhKcGJtY2dhV1lnYW5WemRDQXZQMmxrSUc5eUlHNXZJSFZ5YkNCd1lYSmhiU0JtYjNWdVpDNWNiaUFnSUNBZ0tpOWNiaUFnSUNCblpYUlZjbXhRWVhKaGJWUmxlSFFvS1RvZ2MzUnlhVzVuSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZFhKc1VHRnlZVzF6SUQwZ2JtVjNJRlZTVEZObFlYSmphRkJoY21GdGN5aDNhVzVrYjNjdWJHOWpZWFJwYjI0dWMyVmhjbU5vS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFZ5YkZCaGNtRnRjeTVvWVhNb2RHaHBjeTVwWkNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIxY214UVlYSmhiWE11WjJWMEtIUm9hWE11YVdRcElEOC9JQ2NuTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBbkp6dGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlFaWEp6YVhOMElIUm9aU0J6WlhSMGFXNW5JSFpoYkhWbElHbHVJRlZTVEM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdkWEJrWVhSbFZWSk1VR0Z5WVcxektDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTUxYzJWVmNteFFZWEpoYlhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklITmxkQ0IxY213Z2NHRnlZVzF6WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCMWNteFFZWEpoYlhNZ1BTQnVaWGNnVlZKTVUyVmhjbU5vVUdGeVlXMXpLSGRwYm1SdmR5NXNiMk5oZEdsdmJpNXpaV0Z5WTJncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZFhKc1VHRnlZVzF6TG5ObGRDaDBhR2x6TG1sa0xDQjBhR2x6TG5ObGJHVmpkR1ZrS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSGRwYm1SdmR5NW9hWE4wYjNKNUxuSmxjR3hoWTJWVGRHRjBaU2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3ZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbkp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFjbXhRWVhKaGJYTXVkRzlUZEhKcGJtY29LU0FoUFQwZ0p5ZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUHlCZ0pIdHNiMk5oZEdsdmJpNXdZWFJvYm1GdFpYMC9KSHQxY214UVlYSmhiWE45WUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTZJR0FrZTJ4dlkyRjBhVzl1TG5CaGRHaHVZVzFsZldCY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQlpHUWdZU0JqYUdGdVoyVWdiR2x6ZEdWdVpYSWdkRzhnZEdobElITmxiR1ZqZENCbGJHVnRaVzUwTGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5QmhaR1JQYmtOb1lXNW5aV1JNYVhOMFpXNWxjaWh2YmtOb1lXNW5aV1JHZFc1ak9pQW9ibVYzVm1Gc2RXVTZJSE4wY21sdVp5a2dQVDRnZG05cFpDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtOXVRMmhoYm1kbElEMGdiMjVEYUdGdVoyVmtSblZ1WXp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCQmJHd2dZWFpoYVd4aFlteGxJRzl3ZEdsdmJuTWdZWE1nWVc0Z1lYSnlZWGxjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ1oyVjBJRzl3ZEdsdmJuTW9LVG9nUVhKeVlYazhjM1J5YVc1blBpQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dmNIUnBiMjV6TzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZObGRDQnZjSFJwYjI1elhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhaaGJIVmxjeUJCY25KaGVTQnZaaUJ2Y0hScGIyNXpYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUhObGRDQnZjSFJwYjI1ektIWmhiSFZsY3pvZ1FYSnlZWGs4YzNSeWFXNW5QaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl2Y0hScGIyNXpJRDBnZG1Gc2RXVnpPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtOXVRMmhoYm1kbFJXMXBkQ2gwYUdsekxuTmxiR1ZqZEdWa0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QlRaV3hsWTNSbFpDQnZjSFJwYjI0Z1lYTWdZU0J6ZEhKcGJtZGNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nWjJWMElITmxiR1ZqZEdWa0tDazZJSE4wY21sdVp5QjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5aaGJIVmxJR0Z6SUhOMGNtbHVaenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJUWlhRZ2MyVnNaV04wWldRZ2IzQjBhVzl1SUdsbUlHbDBJRzFoZEdOb1pYTWdiMjVsSUc5bUlIUm9aU0JoZG1GcGJHRmliR1VnYjNCMGFXOXVjMXh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjJZV3gxWlNCVFpXeGxZM1JsWkNCdmNIUnBiMjVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ2MyVjBJSE5sYkdWamRHVmtLSFpoYkhWbE9pQnpkSEpwYm1jcElIdGNiaUFnSUNBZ0lDQWdMeThnUVNCMWMyVnlJRzFoZVNCdWIzUWdjM0JsWTJsbWVTQjBhR1VnWm5Wc2JDQndiM056YVdKc1pTQjJZV3gxWlNCemJ5QjNaU0JwYm5OMFpXRmtJSFZ6WlNCMGFHVWdZMnh2YzJWemRDQnRZWFJqYUM1Y2JpQWdJQ0FnSUNBZ0x5OGdaV2NnUDNoNGVEMUlNalkwSUhkdmRXeGtJSE5sYkdWamRDQW5TREkyTkNCc1pYWmxiQzFoYzNsdGJXVjBjbmt0WVd4c2IzZGxaRDB4TzNCaFkydGxkR2w2WVhScGIyNHRiVzlrWlQweE8zQnliMlpwYkdVdGJHVjJaV3d0YVdROU5ESXdNREZtSjF4dUlDQWdJQ0FnSUNCc1pYUWdabWxzZEdWeVpXUk1hWE4wSUQwZ2RHaHBjeTV2Y0hScGIyNXpMbVpwYkhSbGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNodmNIUnBiMjQ2SUhOMGNtbHVaeWtnUFQ0Z2IzQjBhVzl1TG1sdVpHVjRUMllvZG1Gc2RXVXBJQ0U5UFNBdE1WeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb1ptbHNkR1Z5WldSTWFYTjBMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUyWVd4MVpTQTlJR1pwYkhSbGNtVmtUR2x6ZEZzd1hUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlNCY2JseHVJQ0FnSUNBZ0lDQXZMeUJCSUhWelpYSWdhR0Z6SUhOd1pXTnBabWxsWkNCaElHTnZaR1ZqSUhkcGRHZ2dZU0JtYlhSd0lITjBjbWx1WnlCaWRYUWdkR2hwY3lCamIyUmxZeUFySUdadGRIQWdiR2x1WlNCcGMyNG5kQ0JoZG1GcGJHRmliR1V1WEc0Z0lDQWdJQ0FnSUM4dklHbHVJSFJvWVhRZ1kyRnpaU3dnYW5WemRDQjFjMlVnZEdobElHTnZaR1ZqWEc0Z0lDQWdJQ0FnSUdacGJIUmxjbVZrVEdsemRDQTlJSFJvYVhNdWIzQjBhVzl1Y3k1bWFXeDBaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9iM0IwYVc5dU9pQnpkSEpwYm1jcElEMCtJRzl3ZEdsdmJpNXBibVJsZUU5bUtIWmhiSFZsTG5Od2JHbDBLQ2NnSnlsYk1GMHBJQ0U5UFNBdE1WeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb1ptbHNkR1Z5WldSTWFYTjBMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUyWVd4MVpTQTlJR1pwYkhSbGNtVmtUR2x6ZEZzd1hUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYm4xY2JpSXNJaTh2SUVOdmNIbHlhV2RvZENCRmNHbGpJRWRoYldWekxDQkpibU11SUVGc2JDQlNhV2RvZEhNZ1VtVnpaWEoyWldRdVhHNWNibWx0Y0c5eWRDQjBlWEJsSUhzZ1ZHVjRkRkJoY21GdFpYUmxjbk5KWkhNZ2ZTQm1jbTl0SUNjdUwwTnZibVpwWnljN1hHNXBiWEJ2Y25RZ2V5QlRaWFIwYVc1blFtRnpaU0I5SUdaeWIyMGdKeTR2VTJWMGRHbHVaMEpoYzJVbk8xeHVYRzR2S2lwY2JpQXFJRUVnZEdWNGRDQnpaWFIwYVc1bklHOWlhbVZqZENCM2FYUm9JR0VnZEdWNGRDQnNZV0psYkM1Y2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklGTmxkSFJwYm1kVVpYaDBQRnh1SUNBZ0lFTjFjM1J2YlVsa2N5QmxlSFJsYm1SeklITjBjbWx1WnlBOUlGUmxlSFJRWVhKaGJXVjBaWEp6U1dSelhHNCtJR1Y0ZEdWdVpITWdVMlYwZEdsdVowSmhjMlVnZTF4dUlDQWdJR2xrT2lCVVpYaDBVR0Z5WVcxbGRHVnljMGxrY3lCOElFTjFjM1J2YlVsa2N6dGNiaUFnSUNCdmJrTm9ZVzVuWlVWdGFYUTZJQ2hqYUdGdVoyVmtWbUZzZFdVNklITjBjbWx1WnlrZ1BUNGdkbTlwWkR0Y2JpQWdJQ0IxYzJWVmNteFFZWEpoYlhNNklHSnZiMnhsWVc0N1hHNWNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaGNiaUFnSUNBZ0lDQWdhV1E2SUZSbGVIUlFZWEpoYldWMFpYSnpTV1J6SUh3Z1EzVnpkRzl0U1dSekxGeHVJQ0FnSUNBZ0lDQnNZV0psYkRvZ2MzUnlhVzVuTEZ4dUlDQWdJQ0FnSUNCa1pYTmpjbWx3ZEdsdmJqb2djM1J5YVc1bkxGeHVJQ0FnSUNBZ0lDQmtaV1poZFd4MFZHVjRkRlpoYkhWbE9pQnpkSEpwYm1jc1hHNGdJQ0FnSUNBZ0lIVnpaVlZ5YkZCaGNtRnRjem9nWW05dmJHVmhiaXhjYmx4MFhIUXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXVaWGgwTFd4cGJtVWdRSFI1Y0dWelkzSnBjSFF0WlhOc2FXNTBMMjV2TFdWdGNIUjVMV1oxYm1OMGFXOXVYRzVjZEZ4MFpHVm1ZWFZzZEU5dVEyaGhibWRsVEdsemRHVnVaWEk2SUNoamFHRnVaMlZrVm1Gc2RXVTZJSFZ1YTI1dmQyNHNJSE5sZEhScGJtYzZJRk5sZEhScGJtZENZWE5sS1NBOVBpQjJiMmxrSUQwZ0tDa2dQVDRnZXlBdktpQkVieUJ1YjNSb2FXNW5MQ0IwYnlCaVpTQnZkbVZ5Y21sa1pHVnVMaUFxTHlCOVhHNGdJQ0FnS1NCN1hHNGdJQ0FnSUNBZ0lITjFjR1Z5S0dsa0xDQnNZV0psYkN3Z1pHVnpZM0pwY0hScGIyNHNJR1JsWm1GMWJIUlVaWGgwVm1Gc2RXVXNJR1JsWm1GMWJIUlBia05vWVc1blpVeHBjM1JsYm1WeUtUdGNibHh1SUNBZ0lDQWdJQ0JqYjI1emRDQjFjbXhRWVhKaGJYTWdQU0J1WlhjZ1ZWSk1VMlZoY21Ob1VHRnlZVzF6S0hkcGJtUnZkeTVzYjJOaGRHbHZiaTV6WldGeVkyZ3BPMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYVnpaVlZ5YkZCaGNtRnRjeUI4ZkNBaGRYSnNVR0Z5WVcxekxtaGhjeWgwYUdsekxtbGtLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MFpYaDBJRDBnWkdWbVlYVnNkRlJsZUhSV1lXeDFaVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJSEJoY25ObElHWnNZV2NnWm5KdmJTQjFjbXdnY0dGeVlXMWxkR1Z5YzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2RYSnNVR0Z5WVcxR2JHRm5JRDBnZEdocGN5NW5aWFJWY214UVlYSmhiVlJsZUhRb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkR1Y0ZENBOUlIVnliRkJoY21GdFJteGhaenRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMGFHbHpMblZ6WlZWeWJGQmhjbUZ0Y3lBOUlIVnpaVlZ5YkZCaGNtRnRjenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJRWVhKelpTQjBhR1VnZEdWNGRDQjJZV3gxWlNCbWNtOXRJSFJvWlNCMWNtd2djR0Z5WVcxbGRHVnljeTVjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUJVYUdVZ2RHVjRkQ0IyWVd4MVpTQndZWEp6WldRZ1puSnZiU0IwYUdVZ2RYSnNJR2xtSUhSb1pTQjFjbXdnY0dGeVlXMWxkR1Z5Y3lCamIyNTBZV2x1Y3lBdlAybGtQWFpoYkhWbExDQmlkWFFnWlcxd2RIa2djM1J5YVc1bklHbG1JR3AxYzNRZ0x6OXBaQ0J2Y2lCdWJ5QjFjbXdnY0dGeVlXMGdabTkxYm1RdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWjJWMFZYSnNVR0Z5WVcxVVpYaDBLQ2s2SUhOMGNtbHVaeUI3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFZ5YkZCaGNtRnRjeUE5SUc1bGR5QlZVa3hUWldGeVkyaFFZWEpoYlhNb2QybHVaRzkzTG14dlkyRjBhVzl1TG5ObFlYSmphQ2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaDFjbXhRWVhKaGJYTXVhR0Z6S0hSb2FYTXVhV1FwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkWEpzVUdGeVlXMXpMbWRsZENoMGFHbHpMbWxrS1NBL1B5QW5KenRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnSnljN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1VHVnljMmx6ZENCMGFHVWdjMlYwZEdsdVp5QjJZV3gxWlNCcGJpQlZVa3d1WEc0Z0lDQWdJQ292WEc0Z0lDQWdjSFZpYkdsaklIVndaR0YwWlZWU1RGQmhjbUZ0Y3lncElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVkWE5sVlhKc1VHRnlZVzF6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCelpYUWdkWEpzSUhCaGNtRnRjMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnZFhKc1VHRnlZVzF6SUQwZ2JtVjNJRlZTVEZObFlYSmphRkJoY21GdGN5aDNhVzVrYjNjdWJHOWpZWFJwYjI0dWMyVmhjbU5vS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFZ5YkZCaGNtRnRjeTV6WlhRb2RHaHBjeTVwWkN3Z2RHaHBjeTUwWlhoMEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhkcGJtUnZkeTVvYVhOMGIzSjVMbkpsY0d4aFkyVlRkR0YwWlNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5KeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxY214UVlYSmhiWE11ZEc5VGRISnBibWNvS1NBaFBUMGdKeWRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1B5QmdKSHRzYjJOaGRHbHZiaTV3WVhSb2JtRnRaWDAvSkh0MWNteFFZWEpoYlhOOVlGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUdBa2UyeHZZMkYwYVc5dUxuQmhkR2h1WVcxbGZXQmNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlGUm9aU0J6WlhSMGFXNW5KM01nZG1Gc2RXVXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUdkbGRDQjBaWGgwS0NrNklITjBjbWx1WnlCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMblpoYkhWbElHRnpJSE4wY21sdVp6dGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlZjR1JoZEdVZ2RHaGxJSE5sZEhScGJtY25jeUJ6ZEc5eVpXUWdkbUZzZFdVdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUdsdVZtRnNkV1VnVkdobElHNWxkeUIyWVd4MVpTQm1iM0lnZEdobElITmxkSFJwYm1jdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJSE5sZENCMFpYaDBLR2x1Vm1Gc2RXVTZJSE4wY21sdVp5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuWmhiSFZsSUQwZ2FXNVdZV3gxWlR0Y2JpQWdJQ0I5WEc1OVhHNGlMQ0l2THlCRGIzQjVjbWxuYUhRZ1JYQnBZeUJIWVcxbGN5d2dTVzVqTGlCQmJHd2dVbWxuYUhSeklGSmxjMlZ5ZG1Wa0xseHVYRzVwYlhCdmNuUWdleUJNYjJkblpYSWdmU0JtY205dElDY3VMaTlNYjJkblpYSXZURzluWjJWeUp6dGNibHh1THlvcVhHNGdLaUJJWVc1a2JHVnpJSFJvWlNCVFpXNWthVzVuSUdGdVpDQlNaV05sYVhacGJtY2diMllnYldWemMyRm5aWE1nZEc4Z2RHaGxJRlZGSUVsdWMzUmhibU5sSUhacFlTQjBhR1VnUkdGMFlTQkRhR0Z1Ym1Wc1hHNGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5QkVZWFJoUTJoaGJtNWxiRU52Ym5SeWIyeHNaWElnZTF4dUlDQWdJR1JoZEdGRGFHRnVibVZzT2lCU1ZFTkVZWFJoUTJoaGJtNWxiRHRjYmlBZ0lDQndaV1Z5UTI5dWJtVmpkR2x2YmpvZ1VsUkRVR1ZsY2tOdmJtNWxZM1JwYjI0N1hHNGdJQ0FnWkdGMFlXTm9ZVzV1Wld4UGNIUnBiMjV6T2lCU1ZFTkVZWFJoUTJoaGJtNWxiRWx1YVhRN1hHNGdJQ0FnYkdGaVpXdzZJSE4wY21sdVp6dGNiaUFnSUNCcGMxSmxZMlZwZG1sdVowWnlaV1Y2WlVaeVlXMWxJRDBnWm1Gc2MyVTdYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJ5WlhSMWNtNGdkR2hsSUdOMWNuSmxiblFnYzNSaGRHVWdiMllnWVNCa1lYUmhZMmhoYm01bGJDQmpiMjUwY205c2JHVnlJR2x1YzNSaGJtTmxYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdkR2hsSUdOMWNuSmxiblFnUkdGMFlVTm9ZVzV1Wld4RGIyNTBjbTlzYkdWeUlHbHVjM1JoYm1ObFhHNGdJQ0FnSUNvdlhHNGdJQ0FnWjJWMFJHRjBZVU5vWVc1dVpXeEpibk4wWVc1alpTZ3BPaUJFWVhSaFEyaGhibTVsYkVOdmJuUnliMnhzWlhJZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJVYnlCRGNtVmhkR1VnWVc1a0lGTmxkQ0IxY0NCaElFUmhkR0VnUTJoaGJtNWxiRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQndaV1Z5UTI5dWJtVmpkR2x2YmlBdElGUm9aU0JTVkVNZ1VHVmxjaUJEYjI1dVpXTjBhVzl1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJR3hoWW1Wc0lDMGdUR0ZpWld3Z2IyWWdkR2hsSUVSaGRHRWdRMmhoYm01bGJGeHVJQ0FnSUNBcUlFQndZWEpoYlNCa1lYUmhZMmhoYm01bGJFOXdkR2x2Ym5NZ0xTQlBjSFJwYjI1aGJDQlNWRU1nUkdGMFlVTm9ZVzV1Wld3Z2IzQjBhVzl1YzF4dUlDQWdJQ0FxTDF4dUlDQWdJR055WldGMFpVUmhkR0ZEYUdGdWJtVnNLRnh1SUNBZ0lDQWdJQ0J3WldWeVEyOXVibVZqZEdsdmJqb2dVbFJEVUdWbGNrTnZibTVsWTNScGIyNHNYRzRnSUNBZ0lDQWdJR3hoWW1Wc09pQnpkSEpwYm1jc1hHNGdJQ0FnSUNBZ0lHUmhkR0ZqYUdGdWJtVnNUM0IwYVc5dWN6ODZJRkpVUTBSaGRHRkRhR0Z1Ym1Wc1NXNXBkRnh1SUNBZ0lDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuQmxaWEpEYjI1dVpXTjBhVzl1SUQwZ2NHVmxja052Ym01bFkzUnBiMjQ3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViR0ZpWld3Z1BTQnNZV0psYkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVrWVhSaFkyaGhibTVsYkU5d2RHbHZibk1nUFNCa1lYUmhZMmhoYm01bGJFOXdkR2x2Ym5NN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hrWVhSaFkyaGhibTVsYkU5d2RHbHZibk1nUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1a1lYUmhZMmhoYm01bGJFOXdkR2x2Ym5NZ1BTQjdmU0JoY3lCU1ZFTkVZWFJoUTJoaGJtNWxiRWx1YVhRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtUmhkR0ZqYUdGdWJtVnNUM0IwYVc5dWN5NXZjbVJsY21Wa0lEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVpHRjBZVU5vWVc1dVpXd2dQU0IwYUdsekxuQmxaWEpEYjI1dVpXTjBhVzl1TG1OeVpXRjBaVVJoZEdGRGFHRnVibVZzS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1c1lXSmxiQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WkdGMFlXTm9ZVzV1Wld4UGNIUnBiMjV6WEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzJWMGRYQkVZWFJoUTJoaGJtNWxiQ2dwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSE5sZEhWd1JHRjBZVU5vWVc1dVpXd29LU0I3WEc0Z0lDQWdJQ0FnSUM4dlYyVWdWMkZ1ZENCaGJpQkJjbkpoZVNCQ2RXWm1aWElnYm05MElHRWdZbXh2WWx4dUlDQWdJQ0FnSUNCMGFHbHpMbVJoZEdGRGFHRnVibVZzTG1KcGJtRnllVlI1Y0dVZ1BTQW5ZWEp5WVhsaWRXWm1aWEluTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbVJoZEdGRGFHRnVibVZzTG05dWIzQmxiaUE5SUNobGRqb2dSWFpsYm5RcElEMCtJSFJvYVhNdWFHRnVaR3hsVDI1UGNHVnVLR1YyS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVrWVhSaFEyaGhibTVsYkM1dmJtTnNiM05sSUQwZ0tHVjJPaUJGZG1WdWRDa2dQVDRnZEdocGN5NW9ZVzVrYkdWUGJrTnNiM05sS0dWMktUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1a1lYUmhRMmhoYm01bGJDNXZibTFsYzNOaFoyVWdQU0FvWlhZNklFMWxjM05oWjJWRmRtVnVkQ2tnUFQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFHRnVaR3hsVDI1TlpYTnpZV2RsS0dWMktUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1a1lYUmhRMmhoYm01bGJDNXZibVZ5Y205eUlEMGdLR1YyT2lCTlpYTnpZV2RsUlhabGJuUXBJRDArSUhSb2FYTXVhR0Z1Wkd4bFQyNUZjbkp2Y2lobGRpazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dTR0Z1Wkd4bGN5QjNhR1Z1SUhSb1pTQkVZWFJoSUVOb1lXNXVaV3dnYVhNZ2IzQmxibVZrWEc0Z0lDQWdJQ292WEc0Z0lDQWdhR0Z1Wkd4bFQyNVBjR1Z1S0dWMk9pQkZkbVZ1ZENrZ2UxeHVJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRnh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGtkbGRGTjBZV05yVkhKaFkyVW9LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHQkVZWFJoSUVOb1lXNXVaV3dnS0NSN2RHaHBjeTVzWVdKbGJIMHBJRzl3Wlc1bFpDNWdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ04xeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtOXVUM0JsYmloMGFHbHpMbVJoZEdGRGFHRnVibVZzUHk1c1lXSmxiQ3dnWlhZcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFaGhibVJzWlhNZ2QyaGxiaUIwYUdVZ1JHRjBZU0JEYUdGdWJtVnNJR2x6SUdOc2IzTmxaRnh1SUNBZ0lDQXFMMXh1SUNBZ0lHaGhibVJzWlU5dVEyeHZjMlVvWlhZNklFVjJaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lFeHZaMmRsY2k1TWIyY29YRzRnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1UjJWMFUzUmhZMnRVY21GalpTZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1lFUmhkR0VnUTJoaGJtNWxiQ0FvSkh0MGFHbHpMbXhoWW1Wc2ZTa2dZMnh2YzJWa0xtQXNYRzRnSUNBZ0lDQWdJQ0FnSUNBM1hHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWIyNURiRzl6WlNoMGFHbHpMbVJoZEdGRGFHRnVibVZzUHk1c1lXSmxiQ3dnWlhZcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFaGhibVJzWlhNZ2QyaGxiaUJoSUcxbGMzTmhaMlVnYVhNZ2NtVmpaV2wyWldSY2JpQWdJQ0FnS2lCQWNHRnlZVzBnWlhabGJuUWdMU0JOWlhOellXZGxJRVYyWlc1MFhHNGdJQ0FnSUNvdlhHNGdJQ0FnYUdGdVpHeGxUMjVOWlhOellXZGxLR1YyWlc1ME9pQk5aWE56WVdkbFJYWmxiblFwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdTR2xuYUdWeUlHeHZaeUJzWlhabGJDQjBieUJ3Y21WMlpXNTBJR3h2WnlCemNHRnRJSGRwZEdnZ2JXVnpjMkZuWlhNZ2NtVmpaV2wyWldSY2JpQWdJQ0FnSUNBZ1RHOW5aMlZ5TGt4dlp5aGNiaUFnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNCZ1JHRjBZU0JEYUdGdWJtVnNJQ2drZTNSb2FYTXViR0ZpWld4OUtTQnRaWE56WVdkbE9pQWtlMlYyWlc1MGZXQXNYRzRnSUNBZ0lDQWdJQ0FnSUNBNFhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dTR0Z1Wkd4bGN5QjNhR1Z1SUdGdUlHVnljbTl5SUdseklIUm9jbTkzYmx4dUlDQWdJQ0FxSUVCd1lYSmhiU0JsZG1WdWRDQXRJRVZ5Y205eUlFVjJaVzUwWEc0Z0lDQWdJQ292WEc0Z0lDQWdhR0Z1Wkd4bFQyNUZjbkp2Y2lobGRtVnVkRG9nVFdWemMyRm5aVVYyWlc1MEtTQjdYRzRnSUNBZ0lDQWdJRXh2WjJkbGNpNU1iMmNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZRVJoZEdFZ1EyaGhibTVsYkNBb0pIdDBhR2x6TG14aFltVnNmU2tnWlhKeWIzSTZJQ1I3WlhabGJuUjlZQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lEZGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXZia1Z5Y205eUtIUm9hWE11WkdGMFlVTm9ZVzV1Wld3L0xteGhZbVZzTENCbGRtVnVkQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVDNabGNuSnBaR1VnZEc4Z2NtVm5hWE4wWlhJZ2IyNVBjR1Z1SUdoaGJtUnNaWEpjYmlBZ0lDQWdLaUJBY0dGeVlXMGdiR0ZpWld3Z1JHRjBZU0JqYUdGdWJtVnNJR3hoWW1Wc0lDaGNJbVJoZEdGamFHRnVibVZzWENJc0lGd2ljMlZ1WkMxa1lYUmhZMmhoYm01bGJGd2lMQ0JjSW5KbFkzWXRaR0YwWVdOb1lXNXVaV3hjSWlsY2JpQWdJQ0FnS2lCQWNHRnlZVzBnWlhZZ1pYWmxiblJjYmlBZ0lDQWdLaTljYmlBZ0lDQXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXVaWGgwTFd4cGJtVWdRSFI1Y0dWelkzSnBjSFF0WlhOc2FXNTBMMjV2TFhWdWRYTmxaQzEyWVhKelhHNGdJQ0FnYjI1UGNHVnVLR3hoWW1Wc09pQnpkSEpwYm1jc0lHVjJPaUJGZG1WdWRDa2dlMXh1SUNBZ0lDQWdJQ0F2THlCbGJYQjBlU0JrWldaaGRXeDBJR2x0Y0d4bGJXVnVkR0YwYVc5dVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1QzWmxjbkpwWkdVZ2RHOGdjbVZuYVhOMFpYSWdiMjVEYkc5elpTQm9ZVzVrYkdWeVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUd4aFltVnNJRVJoZEdFZ1kyaGhibTVsYkNCc1lXSmxiQ0FvWENKa1lYUmhZMmhoYm01bGJGd2lMQ0JjSW5ObGJtUXRaR0YwWVdOb1lXNXVaV3hjSWl3Z1hDSnlaV04yTFdSaGRHRmphR0Z1Ym1Wc1hDSXBYRzRnSUNBZ0lDb2dRSEJoY21GdElHVjJJR1YyWlc1MFhHNGdJQ0FnSUNvdlhHNGdJQ0FnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUVCMGVYQmxjMk55YVhCMExXVnpiR2x1ZEM5dWJ5MTFiblZ6WldRdGRtRnljMXh1SUNBZ0lHOXVRMnh2YzJVb2JHRmlaV3c2SUhOMGNtbHVaeXdnWlhZNklFVjJaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lDOHZJR1Z0Y0hSNUlHUmxabUYxYkhRZ2FXMXdiR1Z0Wlc1MFlYUnBiMjVjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJQZG1WeWNtbGtaU0IwYnlCeVpXZHBjM1JsY2lCdmJrVnljbTl5SUdoaGJtUnNaWEpjYmlBZ0lDQWdLaUJBY0dGeVlXMGdiR0ZpWld3Z1JHRjBZU0JqYUdGdWJtVnNJR3hoWW1Wc0lDaGNJbVJoZEdGamFHRnVibVZzWENJc0lGd2ljMlZ1WkMxa1lYUmhZMmhoYm01bGJGd2lMQ0JjSW5KbFkzWXRaR0YwWVdOb1lXNXVaV3hjSWlsY2JpQWdJQ0FnS2lCQWNHRnlZVzBnWlhZZ1pYWmxiblJjYmlBZ0lDQWdLaTljYmlBZ0lDQXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXVaWGgwTFd4cGJtVWdRSFI1Y0dWelkzSnBjSFF0WlhOc2FXNTBMMjV2TFhWdWRYTmxaQzEyWVhKelhHNGdJQ0FnYjI1RmNuSnZjaWhzWVdKbGJEb2djM1J5YVc1bkxDQmxkam9nUlhabGJuUXBJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1pXMXdkSGtnWkdWbVlYVnNkQ0JwYlhCc1pXMWxiblJoZEdsdmJseHVJQ0FnSUgxY2JuMWNiaUlzSWk4dklFTnZjSGx5YVdkb2RDQkZjR2xqSUVkaGJXVnpMQ0JKYm1NdUlFRnNiQ0JTYVdkb2RITWdVbVZ6WlhKMlpXUXVYRzVjYm1sdGNHOXlkQ0I3SUV4dloyZGxjaUI5SUdaeWIyMGdKeTR1TDB4dloyZGxjaTlNYjJkblpYSW5PMXh1YVcxd2IzSjBJSHRjYmlBZ0lDQkVZWFJoUTJoaGJtNWxiRXhoZEdWdVkzbFVaWE4wVW1WamIzSmtMRnh1SUNBZ0lFUmhkR0ZEYUdGdWJtVnNUR0YwWlc1amVWUmxjM1JTWlhGMVpYTjBMRnh1SUNBZ0lFUmhkR0ZEYUdGdWJtVnNUR0YwWlc1amVWUmxjM1JTWlhOd2IyNXpaU3hjYmlBZ0lDQkVZWFJoUTJoaGJtNWxiRXhoZEdWdVkzbFVaWE4wVW1WemRXeDBMRnh1SUNBZ0lFUmhkR0ZEYUdGdWJtVnNUR0YwWlc1amVWUmxjM1JUWlhFc1hHNGdJQ0FnUkdGMFlVTm9ZVzV1Wld4TVlYUmxibU41VkdWemRGUnBiV1Z6ZEdGdGNGeHVmU0JtY205dElGd2lMaTlFWVhSaFEyaGhibTVsYkV4aGRHVnVZM2xVWlhOMFVtVnpkV3gwYzF3aU8xeHVYRzVsZUhCdmNuUWdkSGx3WlNCRVlYUmhRMmhoYm01bGJFeGhkR1Z1WTNsVVpYTjBRMjl1Wm1sbklEMGdlMXh1SUNBZ0lDOHZJSFJsYzNRZ1pIVnlZWFJwYjI0Z2FXNGdiV2xzYkdselpXTnZibVJ6WEc0Z0lDQWdaSFZ5WVhScGIyNDZJRzUxYldKbGNqdGNiaUFnSUNBdkwzSmxjWFZsYzNSeklIQmxjaUJ6WldOdmJtUmNiaUFnSUNCeWNITTZJRzUxYldKbGNqdGNiaUFnSUNBdkwzSmxjWFZsYzNRZ1ptbHNiR1Z5SUhOcGVtVmNiaUFnSUNCeVpYRjFaWE4wVTJsNlpUb2diblZ0WW1WeU8xeHVJQ0FnSUM4dmNtVnpjRzl1YzJVZ1ptbHNiR1Z5SUhOcGVtVmNiaUFnSUNCeVpYTndiMjV6WlZOcGVtVTZJRzUxYldKbGNqdGNibjFjYmx4dVpYaHdiM0owSUhSNWNHVWdSR0YwWVVOb1lXNXVaV3hNWVhSbGJtTjVWR1Z6ZEZOcGJtc2dQU0FvY21WeGRXVnpkRG9nUkdGMFlVTm9ZVzV1Wld4TVlYUmxibU41VkdWemRGSmxjWFZsYzNRcElEMCtJSFp2YVdRN1hHNWxlSEJ2Y25RZ2RIbHdaU0JFWVhSaFEyaGhibTVsYkV4aGRHVnVZM2xVWlhOMFVtVnpkV3gwUTJGc2JHSmhZMnNnUFNBb2NtVnpkV3gwT2lCRVlYUmhRMmhoYm01bGJFeGhkR1Z1WTNsVVpYTjBVbVZ6ZFd4MEtTQTlQaUIyYjJsa08xeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1JHRjBZVU5vWVc1dVpXeE1ZWFJsYm1ONVZHVnpkRU52Ym5SeWIyeHNaWElnZTF4dUlDQWdJSE4wWVhKMFZHbHRaVG9nUkdGMFlVTm9ZVzV1Wld4TVlYUmxibU41VkdWemRGUnBiV1Z6ZEdGdGNEdGNiaUFnSUNCemFXNXJPaUJFWVhSaFEyaGhibTVsYkV4aGRHVnVZM2xVWlhOMFUybHVhenRjYmlBZ0lDQmpZV3hzWW1GamF6b2dSR0YwWVVOb1lXNXVaV3hNWVhSbGJtTjVWR1Z6ZEZKbGMzVnNkRU5oYkd4aVlXTnJPMXh1SUNBZ0lISmxZMjl5WkhNNklFMWhjRHhFWVhSaFEyaGhibTVsYkV4aGRHVnVZM2xVWlhOMFUyVnhMQ0JFWVhSaFEyaGhibTVsYkV4aGRHVnVZM2xVWlhOMFVtVmpiM0prUGp0Y2JpQWdJQ0J6WlhFNklFUmhkR0ZEYUdGdWJtVnNUR0YwWlc1amVWUmxjM1JUWlhFN1hHNGdJQ0FnYVc1MFpYSjJZV3c2SUU1dlpHVktVeTVVYVcxbGNqdGNibHh1SUNBZ0lHTnZibk4wY25WamRHOXlLSE5wYm1zNklFUmhkR0ZEYUdGdWJtVnNUR0YwWlc1amVWUmxjM1JUYVc1ckxDQmpZV3hzWW1GamF6b2dSR0YwWVVOb1lXNXVaV3hNWVhSbGJtTjVWR1Z6ZEZKbGMzVnNkRU5oYkd4aVlXTnJLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMmx1YXlBOUlITnBibXM3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMkZzYkdKaFkyc2dQU0JqWVd4c1ltRmphenRjYmlBZ0lDQWdJQ0FnZEdocGN5NXlaV052Y21SeklEMGdibVYzSUUxaGNDZ3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxjU0E5SURBN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYzNSaGNuUW9ZMjl1Wm1sbk9pQkVZWFJoUTJoaGJtNWxiRXhoZEdWdVkzbFVaWE4wUTI5dVptbG5LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1selVuVnVibWx1WnlncEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZEdocGN5NXpkR0Z5ZEZScGJXVWdQU0JFWVhSbExtNXZkeWdwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbkpsWTI5eVpITXVZMnhsWVhJb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1cGJuUmxjblpoYkNBOUlITmxkRWx1ZEdWeWRtRnNLQ2dvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9SR0YwWlM1dWIzY29LU0F0SUhSb2FYTXVjM1JoY25SVWFXMWxJRDQ5SUdOdmJtWnBaeTVrZFhKaGRHbHZiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjM1J2Y0NncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTmxibVJTWlhGMVpYTjBLR052Ym1acFp5NXlaWEYxWlhOMFUybDZaU3dnWTI5dVptbG5MbkpsYzNCdmJuTmxVMmw2WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcExtSnBibVFvZEdocGN5a3NJRTFoZEdndVpteHZiM0lvTVRBd01DOWpiMjVtYVdjdWNuQnpLU2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhOMGIzQW9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1sdWRHVnlkbUZzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYkdWaGNrbHVkR1Z5ZG1Gc0tIUm9hWE11YVc1MFpYSjJZV3dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1cGJuUmxjblpoYkNBOUlIVnVaR1ZtYVc1bFpEdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZMkZzYkdKaFkyc29kR2hwY3k1d2NtOWtkV05sVW1WemRXeDBLQ2twTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnY0hKdlpIVmpaVkpsYzNWc2RDZ3BPaUJFWVhSaFEyaGhibTVsYkV4aGRHVnVZM2xVWlhOMFVtVnpkV3gwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnY21WemRXeDBVbVZqYjNKa2N5QTlJRzVsZHlCTllYQW9kR2hwY3k1eVpXTnZjbVJ6S1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsWTI5eVpITTZJSEpsYzNWc2RGSmxZMjl5WkhNc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaFEyaGhibTVsYkZKMGREb2dUV0YwYUM1alpXbHNLRUZ5Y21GNUxtWnliMjBvZEdocGN5NXlaV052Y21SekxuWmhiSFZsY3lncEtTNXlaV1IxWTJVb0tHRmpZeXdnYm1WNGRDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJoWTJNZ0t5QW9ibVY0ZEM1d2JHRjVaWEpTWldObGFYWmxaRlJwYldWemRHRnRjQ0F0SUc1bGVIUXVjR3hoZVdWeVUyVnVkRlJwYldWemRHRnRjQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMQ0F3S1NBdklIUm9hWE11Y21WamIzSmtjeTV6YVhwbEtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhCc1lYbGxjbFJ2VTNSeVpXRnRaWEpVYVcxbE9pQk5ZWFJvTG1ObGFXd29RWEp5WVhrdVpuSnZiU2gwYUdsekxuSmxZMjl5WkhNdWRtRnNkV1Z6S0NrcExuSmxaSFZqWlNnb1lXTmpMQ0J1WlhoMEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR0ZqWXlBcklDaHVaWGgwTG5OMGNtVmhiV1Z5VW1WalpXbDJaV1JVYVcxbGMzUmhiWEFnTFNCdVpYaDBMbkJzWVhsbGNsTmxiblJVYVcxbGMzUmhiWEFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU3dnTUNrZ0x5QjBhR2x6TG5KbFkyOXlaSE11YzJsNlpTa3NYRzRnSUNBZ0lDQWdJQ0FnSUNCemRISmxZVzFsY2xSdlVHeGhlV1Z5VkdsdFpUb2dUV0YwYUM1alpXbHNLRUZ5Y21GNUxtWnliMjBvZEdocGN5NXlaV052Y21SekxuWmhiSFZsY3lncEtTNXlaV1IxWTJVb0tHRmpZeXdnYm1WNGRDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJoWTJNZ0t5QW9ibVY0ZEM1d2JHRjVaWEpTWldObGFYWmxaRlJwYldWemRHRnRjQ0F0SUc1bGVIUXVjM1J5WldGdFpYSlRaVzUwVkdsdFpYTjBZVzF3S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBzSURBcElDOGdkR2hwY3k1eVpXTnZjbVJ6TG5OcGVtVXBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pYaHdiM0owVEdGMFpXNWplVUZ6UTFOV09pQW9LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR056ZGlBOUlGd2lWR2x0WlhOMFlXMXdPMUpVVkR0UWJHRjVaWEpVYjFOMGNtVmhiV1Z5TzFOMGNtVmhiV1Z5Vkc5UWJHRjVaWEk3WEZ4dVhDSTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MFVtVmpiM0prY3k1bWIzSkZZV05vS0NoeVpXTnZjbVFwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTNOMklDczlJSEpsWTI5eVpDNXdiR0Y1WlhKVFpXNTBWR2x0WlhOMFlXMXdJQ3NnWENJN1hDSTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOemRpQXJQU0FvY21WamIzSmtMbkJzWVhsbGNsSmxZMlZwZG1Wa1ZHbHRaWE4wWVcxd0lDMGdjbVZqYjNKa0xuQnNZWGxsY2xObGJuUlVhVzFsYzNSaGJYQXBJQ3NnWENJN1hDSTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOemRpQXJQU0FvY21WamIzSmtMbk4wY21WaGJXVnlVbVZqWldsMlpXUlVhVzFsYzNSaGJYQWdMU0J5WldOdmNtUXVjR3hoZVdWeVUyVnVkRlJwYldWemRHRnRjQ2tnS3lCY0lqdGNJanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kzTjJJQ3M5SUNoeVpXTnZjbVF1Y0d4aGVXVnlVbVZqWldsMlpXUlVhVzFsYzNSaGJYQWdMU0J5WldOdmNtUXVjM1J5WldGdFpYSlRaVzUwVkdsdFpYTjBZVzF3S1NBcklGd2lPMXdpTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpjM1lnS3owZ1hDSmNYRzVjSWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCamMzWTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCcGMxSjFibTVwYm1jb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQWhJWFJvYVhNdWFXNTBaWEoyWVd3N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WalpXbDJaU2h5WlhOd2IyNXpaVG9nUkdGMFlVTm9ZVzV1Wld4TVlYUmxibU41VkdWemRGSmxjM0J2Ym5ObEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaGRHaHBjeTVwYzFKMWJtNXBibWNvS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hjbVZ6Y0c5dWMyVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1RmNuSnZjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGd2lWVzVrWldacGJtVmtJSEpsYzNCdmJuTmxJR1p5YjIwZ2MyVnlkbVZ5WENKY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdiR1YwSUhKbFkyOXlaQ0E5SUhSb2FYTXVjbVZqYjNKa2N5NW5aWFFvY21WemNHOXVjMlV1VTJWeEtUdGNiaUFnSUNBZ0lDQWdhV1lnS0hKbFkyOXlaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZqYjNKa0xuVndaR0YwWlNoeVpYTndiMjV6WlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCelpXNWtVbVZ4ZFdWemRDaHlaWEYxWlhOMFUybDZaVG9nYm5WdFltVnlMQ0J5WlhOd2IyNXpaVk5wZW1VNklHNTFiV0psY2lrZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnY21WeGRXVnpkQ0E5SUhSb2FYTXVZM0psWVhSbFVtVnhkV1Z6ZENoeVpYRjFaWE4wVTJsNlpTd2djbVZ6Y0c5dWMyVlRhWHBsS1R0Y2JpQWdJQ0FnSUNBZ2JHVjBJSEpsWTI5eVpDQTlJRzVsZHlCRVlYUmhRMmhoYm01bGJFeGhkR1Z1WTNsVVpYTjBVbVZqYjNKa0tISmxjWFZsYzNRcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5KbFkyOXlaSE11YzJWMEtISmxZMjl5WkM1elpYRXNJSEpsWTI5eVpDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMybHVheWh5WlhGMVpYTjBLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmpjbVZoZEdWU1pYRjFaWE4wS0hKbGNYVmxjM1JUYVhwbE9pQnVkVzFpWlhJc0lISmxjM0J2Ym5ObFUybDZaVG9nYm5WdFltVnlLVG9nUkdGMFlVTm9ZVzV1Wld4TVlYUmxibU41VkdWemRGSmxjWFZsYzNRZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnVTJWeE9pQjBhR2x6TG5ObGNTc3JMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1JtbHNiRkpsYzNCdmJuTmxVMmw2WlRvZ2NtVnpjRzl1YzJWVGFYcGxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1JtbHNiR1Z5T2lCeVpYRjFaWE4wVTJsNlpTQS9JRndpUVZ3aUxuSmxjR1ZoZENoeVpYRjFaWE4wVTJsNlpTa2dPaUJjSWx3aVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNibjFjYmlJc0lpOHZJRU52Y0hseWFXZG9kQ0JGY0dsaklFZGhiV1Z6TENCSmJtTXVJRUZzYkNCU2FXZG9kSE1nVW1WelpYSjJaV1F1WEc1Y2JpOHFLbHh1SUNvZ1JHRjBZU0JEYUdGdWJtVnNJRXhoZEdWdVkza2dWR1Z6ZENCMGVYQmxjMXh1SUNvdlhHNWNibHh1THlvcVhHNGdLaUJWYm1sNElHVndiMk5vWEc0Z0tpOWNibVY0Y0c5eWRDQjBlWEJsSUVSaGRHRkRhR0Z1Ym1Wc1RHRjBaVzVqZVZSbGMzUlVhVzFsYzNSaGJYQWdQU0J1ZFcxaVpYSTdYRzVjYmk4cUtseHVJQ29nVTJWeGRXVnVZMlVnYm5WdFltVnlJSEpsY0hKbGMyVnVkR1ZrSUdKNUlIVnVjMmxuYm1Wa0lHbHVkRnh1SUNvdlhHNWxlSEJ2Y25RZ2RIbHdaU0JFWVhSaFEyaGhibTVsYkV4aGRHVnVZM2xVWlhOMFUyVnhJRDBnYm5WdFltVnlPMXh1WEc0dktpcGNiaUFxSUZKbGNYVmxjM1FnYzJWdWRDQjBieUJUZEhKbFlXMWxjbHh1SUNvdlhHNWxlSEJ2Y25RZ2RIbHdaU0JFWVhSaFEyaGhibTVsYkV4aGRHVnVZM2xVWlhOMFVtVnhkV1Z6ZENBOUlIdGNiaUFnSUNCVFpYRTZJRVJoZEdGRGFHRnVibVZzVEdGMFpXNWplVlJsYzNSVFpYRTdYRzRnSUNBZ1JtbHNiRkpsYzNCdmJuTmxVMmw2WlRvZ2JuVnRZbVZ5TzF4dUlDQWdJRVpwYkd4bGNqb2djM1J5YVc1bk8xeHVmVnh1WEc0dktpcGNiaUFxSUZKbGMzQnZibk5sSUdaeWIyMGdkR2hsSUZOMGNtVmhiV1Z5WEc0Z0tpOWNibVY0Y0c5eWRDQjBlWEJsSUVSaGRHRkRhR0Z1Ym1Wc1RHRjBaVzVqZVZSbGMzUlNaWE53YjI1elpTQTlJSHRjYmlBZ0lDQlRaWEU2SUVSaGRHRkRhR0Z1Ym1Wc1RHRjBaVzVqZVZSbGMzUlRaWEU3WEc0Z0lDQWdSbWxzYkdWeU9pQnpkSEpwYm1jN1hHNGdJQ0FnVW1WalpXbDJaV1JVYVcxbGMzUmhiWEE2SUVSaGRHRkRhR0Z1Ym1Wc1RHRjBaVzVqZVZSbGMzUlVhVzFsYzNSaGJYQTdYRzRnSUNBZ1UyVnVkRlJwYldWemRHRnRjRG9nUkdGMFlVTm9ZVzV1Wld4TVlYUmxibU41VkdWemRGUnBiV1Z6ZEdGdGNEdGNibjFjYmx4dVpYaHdiM0owSUhSNWNHVWdSR0YwWVVOb1lXNXVaV3hNWVhSbGJtTjVWR1Z6ZEZKbGMzVnNkQ0E5SUh0Y2JpQWdJQ0J5WldOdmNtUnpPaUJOWVhBOFJHRjBZVU5vWVc1dVpXeE1ZWFJsYm1ONVZHVnpkRk5sY1N3Z1JHRjBZVU5vWVc1dVpXeE1ZWFJsYm1ONVZHVnpkRkpsWTI5eVpENWNiaUFnSUNCa1lYUmhRMmhoYm01bGJGSjBkRG9nYm5WdFltVnlMRnh1SUNBZ0lIQnNZWGxsY2xSdlUzUnlaV0Z0WlhKVWFXMWxPaUJ1ZFcxaVpYSXNYRzRnSUNBZ2MzUnlaV0Z0WlhKVWIxQnNZWGxsY2xScGJXVTZJRzUxYldKbGNpeGNiaUFnSUNCbGVIQnZjblJNWVhSbGJtTjVRWE5EVTFZNklDZ3BJRDArSUhOMGNtbHVaMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nUkdGMFlVTm9ZVzV1Wld4TVlYUmxibU41VkdWemRGSmxZMjl5WkNCN1hHNGdJQ0FnYzJWeE9pQkVZWFJoUTJoaGJtNWxiRXhoZEdWdVkzbFVaWE4wVTJWeE8xeHVJQ0FnSUhCc1lYbGxjbE5sYm5SVWFXMWxjM1JoYlhBNklFUmhkR0ZEYUdGdWJtVnNUR0YwWlc1amVWUmxjM1JVYVcxbGMzUmhiWEE3WEc0Z0lDQWdjR3hoZVdWeVVtVmpaV2wyWldSVWFXMWxjM1JoYlhBNklFUmhkR0ZEYUdGdWJtVnNUR0YwWlc1amVWUmxjM1JVYVcxbGMzUmhiWEE3WEc0Z0lDQWdjM1J5WldGdFpYSlNaV05sYVhabFpGUnBiV1Z6ZEdGdGNEb2dSR0YwWVVOb1lXNXVaV3hNWVhSbGJtTjVWR1Z6ZEZScGJXVnpkR0Z0Y0R0Y2JpQWdJQ0J6ZEhKbFlXMWxjbE5sYm5SVWFXMWxjM1JoYlhBNklFUmhkR0ZEYUdGdWJtVnNUR0YwWlc1amVWUmxjM1JVYVcxbGMzUmhiWEE3WEc0Z0lDQWdjbVZ4ZFdWemRFWnBiR3hsY2xOcGVtVTZJRzUxYldKbGNqdGNiaUFnSUNCeVpYTndiMjV6WlVacGJHeGxjbE5wZW1VNklHNTFiV0psY2p0Y2JseHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtISmxjWFZsYzNRNklFUmhkR0ZEYUdGdWJtVnNUR0YwWlc1amVWUmxjM1JTWlhGMVpYTjBLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlZ4SUQwZ2NtVnhkV1Z6ZEM1VFpYRTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNHeGhlV1Z5VTJWdWRGUnBiV1Z6ZEdGdGNDQTlJRVJoZEdVdWJtOTNLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbVZ4ZFdWemRFWnBiR3hsY2xOcGVtVWdQU0J5WlhGMVpYTjBMa1pwYkd4bGNpQS9JSEpsY1hWbGMzUXVSbWxzYkdWeUxteGxibWQwYUNBNklEQTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RYQmtZWFJsS0hKbGMzQnZibk5sT2lCRVlYUmhRMmhoYm01bGJFeGhkR1Z1WTNsVVpYTjBVbVZ6Y0c5dWMyVXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXdiR0Y1WlhKU1pXTmxhWFpsWkZScGJXVnpkR0Z0Y0NBOUlFUmhkR1V1Ym05M0tDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMzUnlaV0Z0WlhKU1pXTmxhWFpsWkZScGJXVnpkR0Z0Y0NBOUlISmxjM0J2Ym5ObExsSmxZMlZwZG1Wa1ZHbHRaWE4wWVcxd08xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMGNtVmhiV1Z5VTJWdWRGUnBiV1Z6ZEdGdGNDQTlJSEpsYzNCdmJuTmxMbE5sYm5SVWFXMWxjM1JoYlhBN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y21WemNHOXVjMlZHYVd4c1pYSlRhWHBsSUQwZ2NtVnpjRzl1YzJVdVJtbHNiR1Z5SUQ4Z2NtVnpjRzl1YzJVdVJtbHNiR1Z5TG14bGJtZDBhQ0E2SURBN1hHNGdJQ0FnZlZ4dVhHNTlYRzRpTENJdkx5QkRiM0I1Y21sbmFIUWdSWEJwWXlCSFlXMWxjeXdnU1c1akxpQkJiR3dnVW1sbmFIUnpJRkpsYzJWeWRtVmtMbHh1WEc1cGJYQnZjblFnZXlCTWIyZG5aWElnZlNCbWNtOXRJQ2N1TGk5TWIyZG5aWEl2VEc5bloyVnlKenRjYm1sdGNHOXlkQ0I3SUVSaGRHRkRhR0Z1Ym1Wc1EyOXVkSEp2Ykd4bGNpQjlJR1p5YjIwZ0p5NHZSR0YwWVVOb1lXNXVaV3hEYjI1MGNtOXNiR1Z5Snp0Y2JseHVMeW9xWEc0Z0tpQkJJR05zWVhOeklHWnZjaUJ6Wlc1a2FXNW5JR1JoZEdFZ1kyaGhibTVsYkNCdFpYTnpZV2RsYzF4dUlDb3ZYRzVsZUhCdmNuUWdZMnhoYzNNZ1JHRjBZVU5vWVc1dVpXeFRaVzVrWlhJZ2UxeHVJQ0FnSUdSaGRHRkRhR0Z1Ym1Wc1VISnZkbWxrWlhJNklFUmhkR0ZEYUdGdWJtVnNRMjl1ZEhKdmJHeGxjanRjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0JrWVhSaFEyaGhibTVsYkZCeWIzWnBaR1Z5SUMwZ1JHRjBZU0JqYUdGdWJtVnNJRzlpYW1WamRDQjBlWEJsWEc0Z0lDQWdJQ292WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvWkdGMFlVTm9ZVzV1Wld4UWNtOTJhV1JsY2pvZ1JHRjBZVU5vWVc1dVpXeERiMjUwY205c2JHVnlLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaR0YwWVVOb1lXNXVaV3hRY205MmFXUmxjaUE5SUdSaGRHRkRhR0Z1Ym1Wc1VISnZkbWxrWlhJN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWTJGdVUyVnVaQ2dwT2lCaWIyOXNaV0Z1SUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpHRjBZVU5vWVc1dVpXeFFjbTkyYVdSbGNpNW5aWFJFWVhSaFEyaGhibTVsYkVsdWMzUmhibU5sS0NrdVpHRjBZVU5vWVc1dVpXd2dJVDA5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFc1a1pXWnBibVZrSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtUmhkR0ZEYUdGdWJtVnNVSEp2ZG1sa1pYSXVaMlYwUkdGMFlVTm9ZVzV1Wld4SmJuTjBZVzVqWlNncExtUmhkR0ZEYUdGdWJtVnNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMbkpsWVdSNVUzUmhkR1VnUFQwZ0oyOXdaVzRuWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVnVaQ0JFWVhSaElHOTJaWElnZEdobElFUmhkR0VnWTJoaGJtNWxiQ0IwYnlCMGFHVWdWVVVnU1c1emRHRnVZMlZjYmlBZ0lDQWdLaUJBY0dGeVlXMGdaR0YwWVNBdElFMWxjM05oWjJVZ1JHRjBZU0JCY25KaGVTQkNkV1ptWlhKY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6Wlc1a1JHRjBZU2hrWVhSaE9pQkJjbkpoZVVKMVptWmxjaWtnZTF4dUlDQWdJQ0FnSUNBdkx5QnlaWE5sZENCMGFHVWdZV1pySUdsdVlXTjBhWFpwZEhsY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWkdGMFlVTm9ZVzV1Wld4SmJuTjBZVzVqWlNBOVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtUmhkR0ZEYUdGdWJtVnNVSEp2ZG1sa1pYSXVaMlYwUkdGMFlVTm9ZVzV1Wld4SmJuTjBZVzVqWlNncE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoa1lYUmhRMmhoYm01bGJFbHVjM1JoYm1ObExtUmhkR0ZEYUdGdWJtVnNMbkpsWVdSNVUzUmhkR1VnUFQwZ0oyOXdaVzRuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaFEyaGhibTVsYkVsdWMzUmhibU5sTG1SaGRHRkRhR0Z1Ym1Wc0xuTmxibVFvWkdGMFlTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWUUxbGMzTmhaMlVnVTJWdWREb2dKSHR1WlhjZ1ZXbHVkRGhCY25KaGVTaGtZWFJoS1gxZ0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEWmNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuSmxjMlYwUVdaclYyRnlibWx1WjFScGJXVnlUMjVFWVhSaFUyVnVaQ2dwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxrVnljbTl5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZRTFsYzNOaFoyVWdSbUZwYkdWa09pQWtlMjVsZHlCVmFXNTBPRUZ5Y21GNUtHUmhkR0VwZldCY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQmJpQnZkbVZ5Y21sa1pTQnRaWFJvYjJRZ1ptOXlJSEpsYzJWMGRHbHVaeUIwYUdVZ1FXWnJJSGRoY201cGJtY2dkR2x0WlhJZ2QyaGxiaUJrWVhSaElHbHpJSE5sYm5RZ2IzWmxjaUIwYUdVZ1pHRjBZU0JqYUdGdWJtVnNYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NtVnpaWFJCWm10WFlYSnVhVzVuVkdsdFpYSlBia1JoZEdGVFpXNWtLQ2tnZTF4dUlDQWdJQ0FnSUNBdkx5QkNZWE5sSUVaMWJtTjBhVzl1WVd4cGRIazZJRVJ2SUU1dmRHaHBibWRjYmlBZ0lDQjlYRzU5WEc0aUxDSXZMeUJEYjNCNWNtbG5hSFFnUlhCcFl5QkhZVzFsY3l3Z1NXNWpMaUJCYkd3Z1VtbG5hSFJ6SUZKbGMyVnlkbVZrTGx4dVhHNHZLaXBjYmlBcUlFeGhkR1Z1WTNrZ1ZHVnpkQ0JTWlhOMWJIUnpJRVJoZEdGY2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklFbHVhWFJwWVd4VFpYUjBhVzVuY3lCN1hHNGdJQ0FnVUdsNFpXeFRkSEpsWVcxcGJtZFRaWFIwYVc1bmN6b2dVR2w0Wld4VGRISmxZVzFwYm1kVFpYUjBhVzVuY3p0Y2JpQWdJQ0JGYm1OdlpHVnlVMlYwZEdsdVozTTZJRVZ1WTI5a1pYSlRaWFIwYVc1bmN6dGNiaUFnSUNCWFpXSlNWRU5UWlhSMGFXNW5jem9nVjJWaVVsUkRVMlYwZEdsdVozTTdYRzVjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWdwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVRYVhobGJGTjBjbVZoYldsdVoxTmxkSFJwYm1keklEMGdibVYzSUZCcGVHVnNVM1J5WldGdGFXNW5VMlYwZEdsdVozTW9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NUZibU52WkdWeVUyVjBkR2x1WjNNZ1BTQnVaWGNnUlc1amIyUmxjbE5sZEhScGJtZHpLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVWMlZpVWxSRFUyVjBkR2x1WjNNZ1BTQnVaWGNnVjJWaVVsUkRVMlYwZEdsdVozTW9LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJEYUdWamEzTWdabTl5SUdOdmJYQmhkR2xpYVd4cGRIa2dkMmwwYUNCMGFHVWdSbEJUSUdGdVpDQk5ZWGhHVUZNZ2MzUmhkSE1nWW1WMGQyVmxiaUEwTGpJM0lHRnVaQ0ExWEc0Z0lDQWdJQ292WEc0Z0lDQWdkV1ZEYjIxd1lYUnBZbXhsS0NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NVhaV0pTVkVOVFpYUjBhVzVuY3k1TllYaEdVRk1nSVQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1WFpXSlNWRU5UWlhSMGFXNW5jeTVHVUZNZ1BTQjBhR2x6TGxkbFlsSlVRMU5sZEhScGJtZHpMazFoZUVaUVV6dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibjFjYmx4dUx5b3FYRzRnS2lCQklHTnNZWE56SUdadmNpQm9ZVzVrYkdsdVp5QlFhWGhsYkNCVGRISmxZVzFwYm1jZ1pHVjBZV2xzYzF4dUlDb3ZYRzVsZUhCdmNuUWdZMnhoYzNNZ1VHbDRaV3hUZEhKbFlXMXBibWRUWlhSMGFXNW5jeUI3WEc0Z0lDQWdRV3hzYjNkUWFYaGxiRk4wY21WaGJXbHVaME52YlcxaGJtUnpQem9nWW05dmJHVmhianRjYmlBZ0lDQkVhWE5oWW14bFRHRjBaVzVqZVZSbGMzUS9PaUJpYjI5c1pXRnVPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFRWdZMnhoYzNNZ1ptOXlJR2hoYm1Sc2FXNW5JR1Z1WTI5a1pYSWdjM1JoZEhOY2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklFVnVZMjlrWlhKVFpYUjBhVzVuY3lCN1hHNGdJQ0FnVkdGeVoyVjBRbWwwY21GMFpUODZJRzUxYldKbGNqdGNiaUFnSUNCTllYaENhWFJ5WVhSbFB6b2diblZ0WW1WeU8xeHVJQ0FnSUUxcGJsRlFQem9nYm5WdFltVnlPMXh1SUNBZ0lFMWhlRkZRUHpvZ2JuVnRZbVZ5TzF4dUlDQWdJRkpoZEdWRGIyNTBjbTlzUHpvZ0owTkNVaWNnZkNBblZrSlNKeUI4SUNkRGIyNXpkRkZRSnp0Y2JpQWdJQ0JHYVd4c1pYSkVZWFJoUHpvZ1ltOXZiR1ZoYmp0Y2JpQWdJQ0JOZFd4MGFWQmhjM00vT2lBblJFbFRRVUpNUlVRbklId2dKMUZWUVZKVVJWSW5JSHdnSjBaVlRFd25PMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFRWdZMnhoYzNNZ1ptOXlJR2hoYm1Sc2FXNW5JSGRsWWlCeWRHTWdjM1JoZEhOY2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklGZGxZbEpVUTFObGRIUnBibWR6SUh0Y2JpQWdJQ0JFWldkeVlXUmhkR2x2YmxCeVpXWS9PaUFuUWtGTVFVNURSVVFuSUh3Z0owMUJTVTVVUVVsT1gwWlNRVTFGVWtGVVJTY2dmQ0FuVFVGSlRsUkJTVTVmVWtWVFQweFZWRWxQVGljN1hHNGdJQ0FnVFdsdVFtbDBjbUYwWlQ4NklHNTFiV0psY2p0Y2JpQWdJQ0JOWVhoQ2FYUnlZWFJsUHpvZ2JuVnRZbVZ5TzF4dUlDQWdJRXh2ZDFGUVB6b2diblZ0WW1WeU8xeHVJQ0FnSUVocFoyaFJVRDg2SUc1MWJXSmxjanRjYmlBZ0lDQXZMeUJWUlRRdU1qY2dZMjl0Y0dGMGFXSnNaVnh1SUNBZ0lFMWhlRVpRVXo4NklHNTFiV0psY2p0Y2JpQWdJQ0F2THlCVlJUVWdZMjl0Y0dGMGFXSnNaVnh1SUNBZ0lFWlFVejg2SUc1MWJXSmxjanRjYm4xY2JpSXNJaTh2SUVOdmNIbHlhV2RvZENCRmNHbGpJRWRoYldWekxDQkpibU11SUVGc2JDQlNhV2RvZEhNZ1VtVnpaWEoyWldRdVhHNWNibWx0Y0c5eWRDQjdJRXh2WjJkbGNpQjlJR1p5YjIwZ0p5NHVMMHh2WjJkbGNpOU1iMmRuWlhJbk8xeHVMeW9xWEc0Z0tpQk1ZWFJsYm1ONUlGUmxjM1FnVW1WemRXeDBjeUJFWVhSaFhHNGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5Qk1ZWFJsYm1ONVZHVnpkRkpsYzNWc2RITWdlMXh1SUNBZ0lDOHZSbWxsYkdSeklGTmxkQ0JtY205dElIUm9aU0JzWVhSbGJtTjVJSEJoZVd4dllXUWdjbVZuWVhKa2JHVnpjeUJ2WmlCMlpYSnphVzl1WEc0Z0lDQWdVbVZqWldsd2RGUnBiV1ZOY3pvZ2JuVnRZbVZ5SUQwZ2JuVnNiRHRjYmlBZ0lDQlVjbUZ1YzIxcGMzTnBiMjVVYVcxbFRYTTZJRzUxYldKbGNpQTlJRzUxYkd3N1hHNWNiaUFnSUNBdkwwWnBaV3hrY3lCVFpYUWdabkp2YlNCMGFHVWdiR0YwWlc1amVTQndZWGxzYjJGa0lHWnliMjBnTkM0eU55NHlYRzRnSUNBZ1VISmxRMkZ3ZEhWeVpWUnBiV1ZOY3pvZ2JuVnRZbVZ5SUQwZ2JuVnNiRHRjYmlBZ0lDQlFiM04wUTJGd2RIVnlaVlJwYldWTmN6b2diblZ0WW1WeUlEMGdiblZzYkR0Y2JpQWdJQ0JRY21WRmJtTnZaR1ZVYVcxbFRYTTZJRzUxYldKbGNpQTlJRzUxYkd3N1hHNGdJQ0FnVUc5emRFVnVZMjlrWlZScGJXVk5jem9nYm5WdFltVnlJRDBnYm5Wc2JEdGNibHh1SUNBZ0lDOHZSbWxsYkdSeklGTmxkQ0JtY205dElIUm9aU0JzWVhSbGJtTjVJSEJoZVd4dllXUWdabkp2YlNBMUxqQmNiaUFnSUNCRmJtTnZaR1ZOY3pvZ2JuVnRZbVZ5SUQwZ2JuVnNiRHRjYmlBZ0lDQkRZWEIwZFhKbFZHOVRaVzVrVFhNNklHNTFiV0psY2lBOUlHNTFiR3c3WEc1Y2JpQWdJQ0F2TDBacFpXeGtjeUJUWlhRZ2QyaGxiaUJ3Y205alpYTnpaV1JjYmlBZ0lDQjBaWE4wVTNSaGNuUlVhVzFsVFhNZ1BTQXdPMXh1SUNBZ0lHSnliM2R6WlhKU1pXTmxhWEIwVkdsdFpVMXpJRDBnTUR0Y2JseHVJQ0FnSUM4dlJtbGxiR1J6SUhObGRDQm1jbTl0SUdOaGJHTjFiR0YwYVc5dWMxeHVJQ0FnSUd4aGRHVnVZM2xGZUdOc2RXUnBibWRFWldOdlpHVWdQU0F3TzF4dUlDQWdJSFJsYzNSRWRYSmhkR2x2YmlBOUlEQTdYRzRnSUNBZ0x5OTFaVXhoZEdWdVkzazZJRzUxYldKbGNpQTlJREE3WEc0Z0lDQWdibVYwZDI5eWEweGhkR1Z1WTNrZ1BTQXdPMXh1SUNBZ0lHSnliM2R6WlhKVFpXNWtUR0YwWlc1amVTQTlJREE3WEc0Z0lDQWdabkpoYldWRWFYTndiR0Y1UkdWc2RHRlVhVzFsVFhNZ1BTQXdPMXh1SUNBZ0lHVnVaRlJ2Ulc1a1RHRjBaVzVqZVNBOUlEQTdYRzRnSUNBZ0x5OTFaVkJwZUdWc1UzUnlaV0Z0VEdGMFpXNWplVG9nYm5WdFltVnlJRDBnTUR0Y2JpQWdJQ0JsYm1OdlpHVk1ZWFJsYm1ONUlEMGdNRHRjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZObGRITWdkR2hsSUVSbGJIUmhJRlJwYldVZ1RXbHNiR2x6WldOdmJtUnpYRzRnSUNBZ0lDb2dRSEJoY21GdElFUmxiSFJoVkdsdFpVMXpJQzBnUkdWc2RHRWdWR2x0WlNCTmFXeHNhWE5sWTI5dVpITmNiaUFnSUNBZ0tpOWNiaUFnSUNCelpYUkdjbUZ0WlVScGMzQnNZWGxFWld4MFlWUnBiV1VvUkdWc2RHRlVhVzFsVFhNNklHNTFiV0psY2lrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NW1jbUZ0WlVScGMzQnNZWGxFWld4MFlWUnBiV1ZOY3lBOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1aeVlXMWxSR2x6Y0d4aGVVUmxiSFJoVkdsdFpVMXpJRDBnVFdGMGFDNXliM1Z1WkNoRVpXeDBZVlJwYldWTmN5azdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJRY205alpYTnpJSFJvWlNCbGJtTnZaR1Z5SUhScGJXVnpJR0Z1WkNCelpYUWdkR2hsYlZ4dUlDQWdJQ0FxTDF4dUlDQWdJSEJ5YjJObGMzTkdhV1ZzWkhNb0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVJXNWpiMlJsVFhNZ1BUMGdiblZzYkNBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnS0hSb2FYTXVVSEpsUlc1amIyUmxWR2x0WlUxeklDRTlJRzUxYkd3Z2ZId2dkR2hwY3k1UWIzTjBSVzVqYjJSbFZHbHRaVTF6SUNFOUlHNTFiR3dwWEc0Z0lDQWdJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa3h2WnloY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1UjJWMFUzUmhZMnRVY21GalpTZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0JUWlhSMGFXNW5JRVZ1WTI5a1pTQk5jeUJjWEc0Z0pIdDBhR2x6TGxCdmMzUkZibU52WkdWVWFXMWxUWE45SUZ4Y2JpQWtlM1JvYVhNdVVISmxSVzVqYjJSbFZHbHRaVTF6ZldBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ05seHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVJXNWpiMlJsVFhNZ1BTQjBhR2x6TGxCdmMzUkZibU52WkdWVWFXMWxUWE1nTFNCMGFHbHpMbEJ5WlVWdVkyOWtaVlJwYldWTmN6dGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVRMkZ3ZEhWeVpWUnZVMlZ1WkUxeklEMDlJRzUxYkd3Z0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUNoMGFHbHpMbEJ5WlVOaGNIUjFjbVZVYVcxbFRYTWdJVDBnYm5Wc2JDQjhmQ0IwYUdsekxsQnZjM1JEWVhCMGRYSmxWR2x0WlUxeklDRTlJRzUxYkd3cFhHNGdJQ0FnSUNBZ0lDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGt4dlp5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdCVFpYUjBhVzVuSUVOaGNIUjFjbVZVYjFObGJtUk5jeUJOY3lCY1hHNGdKSHQwYUdsekxsQnZjM1JEWVhCMGRYSmxWR2x0WlUxemZTQmNYRzRnSkh0MGFHbHpMbEJ5WlVOaGNIUjFjbVZVYVcxbFRYTjlZQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0EyWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVEWVhCMGRYSmxWRzlUWlc1a1RYTWdQVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVVHOXpkRU5oY0hSMWNtVlVhVzFsVFhNZ0xTQjBhR2x6TGxCeVpVTmhjSFIxY21WVWFXMWxUWE03WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1OVhHNGlMQ0l2THlCRGIzQjVjbWxuYUhRZ1JYQnBZeUJIWVcxbGN5d2dTVzVqTGlCQmJHd2dVbWxuYUhSeklGSmxjMlZ5ZG1Wa0xseHVYRzR2S2lwY2JpQXFJRUVnWTJ4aGMzTWdabTl5SUcxaGJtRm5hVzVuSUhSb1pTQm1jbVZsZW1VZ1puSmhiV1VnYjJKcVpXTjBYRzRnS2k5Y2JtVjRjRzl5ZENCamJHRnpjeUJHY21WbGVtVkdjbUZ0WlNCN1hHNGdJQ0FnY0hKdmRHVmpkR1ZrSUhKdmIzUkVhWFk2SUVoVVRVeEZiR1Z0Wlc1ME8xeHVJQ0FnSUhCeWIzUmxZM1JsWkNCeWIyOTBSV3hsYldWdWREb2dTRlJOVEVScGRrVnNaVzFsYm5RN1hHNGdJQ0FnYVcxaFoyVkZiR1Z0Wlc1ME9pQklWRTFNU1cxaFoyVkZiR1Z0Wlc1ME8xeHVJQ0FnSUdaeVpXVjZaVVp5WVcxbFNHVnBaMmgwSUQwZ01EdGNiaUFnSUNCbWNtVmxlbVZHY21GdFpWZHBaSFJvSUQwZ01EdGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRU52Ym5OMGNuVmpkQ0JoSUdaeVpXVjZaU0JtY21GdFpWeHVJQ0FnSUNBcUlFQndZWEpoYlNCeWIyOTBSR2wySUhSb1pTQmthWFlnZEdoaGRDQmhJR1p5WldWNlpTQm1jbUZ0WlNCbGJHVnRaVzUwSUhkcGJHd2dZbVVnYVc1cVpXTjBaV1FnYVc1MGIxeHVJQ0FnSUNBcUwxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtISnZiM1JFYVhZNklFaFVUVXhGYkdWdFpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbTl2ZEVScGRpQTlJSEp2YjNSRWFYWTdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1kzSmxZWFJsSUhSb1pTQnZkbVZ5YkdGNVhHNGdJQ0FnSUNBZ0lIUm9hWE11Y205dmRFVnNaVzFsYm5RZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0Nka2FYWW5LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXliMjkwUld4bGJXVnVkQzVwWkNBOUlDZG1jbVZsZW1WR2NtRnRaU2M3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbTl2ZEVWc1pXMWxiblF1YzNSNWJHVXVaR2x6Y0d4aGVTQTlJQ2R1YjI1bEp6dGNiaUFnSUNBZ0lDQWdkR2hwY3k1eWIyOTBSV3hsYldWdWRDNXpkSGxzWlM1d2IybHVkR1Z5UlhabGJuUnpJRDBnSjI1dmJtVW5PMXh1SUNBZ0lDQWdJQ0IwYUdsekxuSnZiM1JGYkdWdFpXNTBMbk4wZVd4bExuQnZjMmwwYVc5dUlEMGdKMkZpYzI5c2RYUmxKenRjYmlBZ0lDQWdJQ0FnZEdocGN5NXliMjkwUld4bGJXVnVkQzV6ZEhsc1pTNTZTVzVrWlhnZ1BTQW5NakFuTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJR055WldGMFpTQjBhR1VnYVcxaFoyVWdjR3hoWTJVZ2FHOXNaR1Z5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhVzFoWjJWRmJHVnRaVzUwSUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duYVcxbkp5azdYRzRnSUNBZ0lDQWdJSFJvYVhNdWFXMWhaMlZGYkdWdFpXNTBMbk4wZVd4bExuQnZjMmwwYVc5dUlEMGdKMkZpYzI5c2RYUmxKenRjYmx4dUlDQWdJQ0FnSUNBdkx5QmhjSEJsYm1RZ2RHaGxJR2x0WVdkbElHbHVkRzhnZEdobElISnZiM1FnWld4bGJXVnVkQ0JoYm1RZ1lYQndaVzVrSUhSb1pTQmxiR1Z0Wlc1MElIUnZJSFJvWlNCeWIyOTBJR1JwZGx4dUlDQWdJQ0FnSUNCMGFHbHpMbkp2YjNSRmJHVnRaVzUwTG1Gd2NHVnVaRU5vYVd4a0tIUm9hWE11YVcxaFoyVkZiR1Z0Wlc1MEtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1eWIyOTBSR2wyTG1Gd2NHVnVaRU5vYVd4a0tIUm9hWE11Y205dmRFVnNaVzFsYm5RcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTmxkQ0IwYUdVZ1puSmxaWHBsSUdaeVlXMWxJR1ZzWlcxbGJuUWdabTl5SUhOb2IzZHBibWRjYmlBZ0lDQWdLaTljYmlBZ0lDQnpaWFJGYkdWdFpXNTBSbTl5VTJodmR5Z3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXliMjkwUld4bGJXVnVkQzV6ZEhsc1pTNWthWE53YkdGNUlEMGdKMkpzYjJOckp6dGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaWFFnZEdobElHWnlaV1Y2WlNCbWNtRnRaU0JsYkdWdFpXNTBJR1p2Y2lCb2FXUnBibWRjYmlBZ0lDQWdLaTljYmlBZ0lDQnpaWFJGYkdWdFpXNTBSbTl5U0dsa1pTZ3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXliMjkwUld4bGJXVnVkQzV6ZEhsc1pTNWthWE53YkdGNUlEMGdKMjV2Ym1Vbk8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGVndaR0YwWlNCMGFHVWdabkpsWlhwbElHWnlZVzFsY3lCcGJXRm5aU0J6YjNWeVkyVmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2FuQmxaeUF0SUhSb1pTQm1jbVZsZW1VZ1puSmhiV1VnYVcxaFoyVWdZWE1nWVNCaWVYUmxJR0Z5Y21GNUlHUmhkR0ZjYmlBZ0lDQWdLaTljYmlBZ0lDQjFjR1JoZEdWSmJXRm5aVVZzWlcxbGJuUlRiM1Z5WTJVb2FuQmxaem9nVldsdWREaEJjbkpoZVNrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCaVlYTmxOalFnUFNCaWRHOWhLRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FuQmxaeTV5WldSMVkyVW9LR1JoZEdFc0lHSjVkR1VwSUQwK0lHUmhkR0VnS3lCVGRISnBibWN1Wm5KdmJVTm9ZWEpEYjJSbEtHSjVkR1VwTENBbkp5bGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXBiV0ZuWlVWc1pXMWxiblF1YzNKaklEMGdKMlJoZEdFNmFXMWhaMlV2YW5CbFp6dGlZWE5sTmpRc0p5QXJJR0poYzJVMk5EdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaWFFnZEdobElHUnBiV1Z1YzJsdmJuTWdabTl5SUhSb1pTQm1jbVZsZW1VZ1puSmhiV1VnWm5KdmJTQjBhR1VnWld4bGJXVnVkQ0JoYm1RZ2NtVnphWHBsSUdsMFhHNGdJQ0FnSUNvdlhHNGdJQ0FnYzJWMFJHbHRaVzV6YVc5dWMwWnliMjFGYkdWdFpXNTBRVzVrVW1WemFYcGxLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbVp5WldWNlpVWnlZVzFsU0dWcFoyaDBJRDBnZEdocGN5NXBiV0ZuWlVWc1pXMWxiblF1Ym1GMGRYSmhiRWhsYVdkb2REdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bWNtVmxlbVZHY21GdFpWZHBaSFJvSUQwZ2RHaHBjeTVwYldGblpVVnNaVzFsYm5RdWJtRjBkWEpoYkZkcFpIUm9PMXh1SUNBZ0lDQWdJQ0IwYUdsekxuSmxjMmw2WlNncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGSmxjMmw2WlNCaElHWnlaV1Y2WlNCbWNtRnRaU0JsYkdWdFpXNTBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NtVnphWHBsS0NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NW1jbVZsZW1WR2NtRnRaVmRwWkhSb0lDRTlQU0F3SUNZbUlIUm9hWE11Wm5KbFpYcGxSbkpoYldWSVpXbG5hSFFnSVQwOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JrYVhOd2JHRjVWMmxrZEdnZ1BTQXdPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR1JwYzNCc1lYbElaV2xuYUhRZ1BTQXdPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR1JwYzNCc1lYbFViM0FnUFNBd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHUnBjM0JzWVhsTVpXWjBJRDBnTUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIQmhjbVZ1ZEVGemNHVmpkRkpoZEdsdklEMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5KdmIzUkVhWFl1WTJ4cFpXNTBWMmxrZEdnZ0x5QjBhR2x6TG5KdmIzUkVhWFl1WTJ4cFpXNTBTR1ZwWjJoME8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdkbWxrWlc5QmMzQmxZM1JTWVhScGJ5QTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bWNtVmxlbVZHY21GdFpWZHBaSFJvSUM4Z2RHaHBjeTVtY21WbGVtVkdjbUZ0WlVobGFXZG9kRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h3WVhKbGJuUkJjM0JsWTNSU1lYUnBieUE4SUhacFpHVnZRWE53WldOMFVtRjBhVzhwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2FYTndiR0Y1VjJsa2RHZ2dQU0IwYUdsekxuSnZiM1JFYVhZdVkyeHBaVzUwVjJsa2RHZzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR2x6Y0d4aGVVaGxhV2RvZENBOUlFMWhkR2d1Wm14dmIzSW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjbTl2ZEVScGRpNWpiR2xsYm5SWGFXUjBhQ0F2SUhacFpHVnZRWE53WldOMFVtRjBhVzljYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdScGMzQnNZWGxVYjNBZ1BTQk5ZWFJvTG1ac2IyOXlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb2RHaHBjeTV5YjI5MFJHbDJMbU5zYVdWdWRFaGxhV2RvZENBdElHUnBjM0JzWVhsSVpXbG5hSFFwSUNvZ01DNDFYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYVhOd2JHRjVUR1ZtZENBOUlEQTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdScGMzQnNZWGxYYVdSMGFDQTlJRTFoZEdndVpteHZiM0lvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y205dmRFUnBkaTVqYkdsbGJuUklaV2xuYUhRZ0tpQjJhV1JsYjBGemNHVmpkRkpoZEdsdlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmthWE53YkdGNVNHVnBaMmgwSUQwZ2RHaHBjeTV5YjI5MFJHbDJMbU5zYVdWdWRFaGxhV2RvZER0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2FYTndiR0Y1Vkc5d0lEMGdNRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYVhOd2JHRjVUR1ZtZENBOUlFMWhkR2d1Wm14dmIzSW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNoMGFHbHpMbkp2YjNSRWFYWXVZMnhwWlc1MFYybGtkR2dnTFNCa2FYTndiR0Y1VjJsa2RHZ3BJQ29nTUM0MVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNtOXZkRVZzWlcxbGJuUXVjM1I1YkdVdWQybGtkR2dnUFNCMGFHbHpMbkp2YjNSRWFYWXViMlptYzJWMFYybGtkR2dnS3lBbmNIZ25PMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV5YjI5MFJXeGxiV1Z1ZEM1emRIbHNaUzVvWldsbmFIUWdQU0IwYUdsekxuSnZiM1JFYVhZdWIyWm1jMlYwU0dWcFoyaDBJQ3NnSjNCNEp6dGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjbTl2ZEVWc1pXMWxiblF1YzNSNWJHVXViR1ZtZENBOUlEQWdLeUFuY0hnbk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXliMjkwUld4bGJXVnVkQzV6ZEhsc1pTNTBiM0FnUFNBd0lDc2dKM0I0Snp0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXBiV0ZuWlVWc1pXMWxiblF1YzNSNWJHVXVkMmxrZEdnZ1BTQmthWE53YkdGNVYybGtkR2dnS3lBbmNIZ25PMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVwYldGblpVVnNaVzFsYm5RdWMzUjViR1V1YUdWcFoyaDBJRDBnWkdsemNHeGhlVWhsYVdkb2RDQXJJQ2R3ZUNjN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtbHRZV2RsUld4bGJXVnVkQzV6ZEhsc1pTNXNaV1owSUQwZ1pHbHpjR3hoZVV4bFpuUWdLeUFuY0hnbk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXBiV0ZuWlVWc1pXMWxiblF1YzNSNWJHVXVkRzl3SUQwZ1pHbHpjR3hoZVZSdmNDQXJJQ2R3ZUNjN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNTlYRzRpTENJdkx5QkRiM0I1Y21sbmFIUWdSWEJwWXlCSFlXMWxjeXdnU1c1akxpQkJiR3dnVW1sbmFIUnpJRkpsYzJWeWRtVmtMbHh1WEc1cGJYQnZjblFnZXlCTWIyZG5aWElnZlNCbWNtOXRJQ2N1TGk5TWIyZG5aWEl2VEc5bloyVnlKenRjYm1sdGNHOXlkQ0I3SUVaeVpXVjZaVVp5WVcxbElIMGdabkp2YlNBbkxpOUdjbVZsZW1WR2NtRnRaU2M3WEc1Y2JpOHFLbHh1SUNvZ1FTQmpiR0Z6Y3lCbWIzSWdZMjl1ZEhKdmJHeHBibWNnWm5KbFpYcGxJR1p5WVcxbElHWjFibU4wYVc5dVlXeHBkSGxjYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUVaeVpXVjZaVVp5WVcxbFEyOXVkSEp2Ykd4bGNpQjdYRzRnSUNBZ1puSmxaWHBsUm5KaGJXVTZJRVp5WldWNlpVWnlZVzFsTzF4dUlDQWdJSEpsWTJWcGRtbHVaeUE5SUdaaGJITmxPMXh1SUNBZ0lITnBlbVVnUFNBd08xeHVJQ0FnSUdwd1pXYzZJRlZwYm5RNFFYSnlZWGtnUFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnZG1Gc2FXUWdQU0JtWVd4elpUdGNiaUFnSUNCbWNtVmxlbVZHY21GdFpVUmxiR0Y1SUQwZ05UQTdYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJEYjI1emRISjFZM1FnWVNCbWNtVmxlbVVnWm5KaGJXVWdZMjl1ZEhKdmJHeGxjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnliMjkwUkdsMklDMGdkR2hsSUdScGRpQjBhR0YwSUdFZ1puSmxaWHBsSUdaeVlXMWxJR1ZzWlcxbGJuUWdkMmxzYkNCaVpTQnBibXBsWTNSbFpDQnBiblJ2WEc0Z0lDQWdJQ292WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvY205dmRFUnBkam9nU0ZSTlRFVnNaVzFsYm5RcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bWNtVmxlbVZHY21GdFpTQTlJRzVsZHlCR2NtVmxlbVZHY21GdFpTaHliMjkwUkdsMktUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRhRzkzSUhSb1pTQm1jbVZsZW1VZ1puSmhiV1VnYVdZZ2FYUWdhWE1nZG1Gc2FXUmNiaUFnSUNBZ0tpOWNiaUFnSUNCemFHOTNSbkpsWlhwbFJuSmhiV1VvS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuWmhiR2xrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtWnlaV1Y2WlVaeVlXMWxMbk5sZEVWc1pXMWxiblJHYjNKVGFHOTNLQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSWFXUmxJSFJvWlNCbWNtVmxlbVVnWm5KaGJXVWdZVzVrSUhObGRDQjBhR1VnZG1Gc2FXUnBkSGtnZEc4Z1ptRnNjMlZjYmlBZ0lDQWdLaTljYmlBZ0lDQm9hV1JsUm5KbFpYcGxSbkpoYldVb0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRtRnNhV1FnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NW1jbVZsZW1WR2NtRnRaUzV6WlhSRmJHVnRaVzUwUm05eVNHbGtaU2dwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZWd1pHRjBaU0IwYUdVZ1puSmxaWHBsSUdaeVlXMWxjeUJwYldGblpTQnpiM1Z5WTJVZ1lXNWtJR3h2WVdRZ2FYUmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2FuQmxaeUF0SUhSb1pTQm1jbVZsZW1VZ1puSmhiV1VnYVcxaFoyVWdZWE1nWVNCaWVYUmxJR0Z5Y21GNUlHUmhkR0ZjYmlBZ0lDQWdLaUJBY0dGeVlXMGdiMjVNYjJGa1EyRnNiRUpoWTJzZ0xTQmhJR05oYkd3Z1ltRmpheUJtYjNJZ2JXRnVZV2RwYm1jZ2FXWWdkR2hsSUhCc1lYa2diM1psY214aGVTQnVaV1ZrY3lCMGJ5QmlaU0J6YUc5M2JpQnZjaUJ1YjNSY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IxY0dSaGRHVkdjbVZsZW1WR2NtRnRaVUZ1WkZOb2IzY29hbkJsWnpvZ1ZXbHVkRGhCY25KaGVTd2diMjVNYjJGa1EyRnNiRUpoWTJzNklDZ3BJRDArSUhadmFXUXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NW1jbVZsZW1WR2NtRnRaUzUxY0dSaGRHVkpiV0ZuWlVWc1pXMWxiblJUYjNWeVkyVW9hbkJsWnlrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Wm5KbFpYcGxSbkpoYldVdWFXMWhaMlZGYkdWdFpXNTBMbTl1Ykc5aFpDQTlJQ2dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVabkpsWlhwbFJuSmhiV1V1YzJWMFJHbHRaVzV6YVc5dWMwWnliMjFGYkdWdFpXNTBRVzVrVW1WemFYcGxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZia3h2WVdSRFlXeHNRbUZqYXlncE8xeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRkJ5YjJObGMzTWdkR2hsSUc1bGR5Qm1jbVZsZW1VZ1puSmhiV1VnYVcxaFoyVWdZVzVrSUhWd1pHRjBaU0JwZEZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0IyYVdWM0lDMGdkR2hsSUdaeVpXVjZaU0JtY21GdFpTQnBiV0ZuWlNCaGN5QmhJR0o1ZEdVZ1lYSnlZWGtnWkdGMFlWeHVJQ0FnSUNBcUlFQndZWEpoYlNCdmJreHZZV1JEWVd4c1FtRmpheUF0SUdFZ1kyRnNiQ0JpWVdOcklHWnZjaUJ0WVc1aFoybHVaeUJwWmlCMGFHVWdjR3hoZVNCdmRtVnliR0Y1SUc1bFpXUnpJSFJ2SUdKbElITm9iM2R1SUc5eUlHNXZkRnh1SUNBZ0lDQXFMMXh1SUNBZ0lIQnliMk5sYzNOR2NtVmxlbVZHY21GdFpVMWxjM05oWjJVb2RtbGxkem9nVldsdWREaEJjbkpoZVN3Z2IyNU1iMkZrUTJGc2JFSmhZMnM2SUNncElEMCtJSFp2YVdRcElIdGNiaUFnSUNBZ0lDQWdMeThnVW1WelpYUWdabkpsWlhwbElHWnlZVzFsSUdsbUlIZGxJR2R2ZENCaElHWnlaV1Y2WlNCbWNtRnRaU0J0WlhOellXZGxJR0Z1WkNCM1pTQmhjbVVnYm05MElGd2ljbVZqWldsMmFXNW5YQ0lnZVdWMExseHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVjbVZqWldsMmFXNW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5KbFkyVnBkbWx1WnlBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5aaGJHbGtJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5wZW1VZ1BTQXdPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVxY0dWbklEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdSWGgwY21GamRDQjBiM1JoYkNCemFYcGxJRzltSUdaeVpXVjZaU0JtY21GdFpTQW9ZV055YjNOeklHRnNiQ0JqYUhWdWEzTXBYRzRnSUNBZ0lDQWdJSFJvYVhNdWMybDZaU0E5SUc1bGR5QkVZWFJoVm1sbGR5aDJhV1YzTG5Oc2FXTmxLREVzSURVcExtSjFabVpsY2lrdVoyVjBTVzUwTXpJb01Dd2dkSEoxWlNrN1hHNWNiaUFnSUNBZ0lDQWdMeThnUjJWMElIUm9aU0JxY0dWbklIQmhjblFnYjJZZ2RHaGxJSEJoZVd4dllXUmNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2FuQmxaMEo1ZEdWeklEMGdkbWxsZHk1emJHbGpaU2d4SUNzZ05DazdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1FYQndaVzVrSUhSdklHVjRhWE4wYVc1bklHcHdaV2NnZEdoaGRDQm9iMnhrY3lCMGFHVWdabkpsWlhwbElHWnlZVzFsWEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1wd1pXY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdwd1pXY2dQU0J1WlhjZ1ZXbHVkRGhCY25KaGVTaDBhR2x6TG1wd1pXY3ViR1Z1WjNSb0lDc2dhbkJsWjBKNWRHVnpMbXhsYm1kMGFDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcWNHVm5Mbk5sZENoMGFHbHpMbXB3Wldjc0lEQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FuQmxaeTV6WlhRb2FuQmxaMEo1ZEdWekxDQjBhR2x6TG1wd1pXY3ViR1Z1WjNSb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVhbkJsWnlBOUlHcHdaV2M3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0x5OGdUbThnWlhocGMzUnBibWNnWm5KbFpYcGxJR1p5WVcxbElHcHdaV2NzSUcxaGEyVWdiMjVsWEc0Z0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVxY0dWbklEMGdhbkJsWjBKNWRHVnpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV5WldObGFYWnBibWNnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGt4dlp5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdCeVpXTmxhWFpsWkNCbWFYSnpkQ0JqYUhWdWF5QnZaaUJtY21WbGVtVWdabkpoYldVNklDUjdkR2hwY3k1cWNHVm5MbXhsYm1kMGFIMHZKSHQwYUdsekxuTnBlbVY5WUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBMlhHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdMeThnUm1sdWFYTm9aV1FnY21WalpXbDJhVzVuSUdaeVpXVjZaU0JtY21GdFpTd2dkMlVnWTJGdUlITm9iM2NnYVhRZ2JtOTNYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbXB3WldjdWJHVnVaM1JvSUQwOVBTQjBhR2x6TG5OcGVtVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y21WalpXbDJhVzVuSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5aaGJHbGtJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVNYjJjb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGtkbGRGTjBZV05yVkhKaFkyVW9LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JnY21WalpXbDJaV1FnWTI5dGNHeGxkR1VnWm5KbFpYcGxJR1p5WVcxbElDUjdkR2hwY3k1emFYcGxmV0FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTmx4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZFhCa1lYUmxSbkpsWlhwbFJuSmhiV1ZCYm1SVGFHOTNLSFJvYVhNdWFuQmxaeXdnYjI1TWIyRmtRMkZzYkVKaFkyc3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUM4dklGZGxJSEpsWTJWcGRtVmtJRzF2Y21VZ1pHRjBZU0IwYUdGdUlIUm9aU0JtY21WbGVtVWdabkpoYldVZ2NHRjViRzloWkNCdFpYTnpZV2RsSUdsdVpHbGpZWFJsSUNoMGFHbHpJR2x6SUdGdUlHVnljbTl5S1Z4dUlDQWdJQ0FnSUNCbGJITmxJR2xtSUNoMGFHbHpMbXB3WldjdWJHVnVaM1JvSUQ0Z2RHaHBjeTV6YVhwbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1UlhKeWIzSW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZ2NtVmpaV2wyWldRZ1ltbG5aMlZ5SUdaeVpXVjZaU0JtY21GdFpTQjBhR0Z1SUdGa2RtVnlkR2x6WldRNklDUjdkR2hwY3k1cWNHVm5MbXhsYm1kMGFIMHZKSHQwYUdsekxuTnBlbVY5WUZ4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YW5CbFp5QTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y21WalpXbDJhVzVuSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1OVhHNGlMQ0l2THlCRGIzQjVjbWxuYUhRZ1JYQnBZeUJIWVcxbGN5d2dTVzVqTGlCQmJHd2dVbWxuYUhSeklGSmxjMlZ5ZG1Wa0xseHVYRzVwYlhCdmNuUWdleUJEYjI5eVpHbHVZWFJsUTI5dWRtVnlkR1Z5SUgwZ1puSnZiU0FuTGk0dlZYUnBiQzlEYjI5eVpHbHVZWFJsUTI5dWRtVnlkR1Z5Snp0Y2JtbHRjRzl5ZENCN0lGTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5SUgwZ1puSnZiU0FuTGk0dlZXVkpibk4wWVc1alpVMWxjM05oWjJVdlUzUnlaV0Z0VFdWemMyRm5aVU52Ym5SeWIyeHNaWEluTzF4dWFXMXdiM0owSUhzZ1ZtbGtaVzlRYkdGNVpYSWdmU0JtY205dElDY3VMaTlXYVdSbGIxQnNZWGxsY2k5V2FXUmxiMUJzWVhsbGNpYzdYRzVwYlhCdmNuUWdleUJKVkc5MVkyaERiMjUwY205c2JHVnlJSDBnWm5KdmJTQW5MaTlKVkc5MVkyaERiMjUwY205c2JHVnlKenRjYm1sdGNHOXlkQ0I3SUUxdmRYTmxRblYwZEc5dUlIMGdabkp2YlNBbkxpOU5iM1Z6WlVKMWRIUnZibk1uTzF4dWFXMXdiM0owSUhzZ1JYWmxiblJNYVhOMFpXNWxjbFJ5WVdOclpYSWdmU0JtY205dElDY3VMaTlWZEdsc0wwVjJaVzUwVEdsemRHVnVaWEpVY21GamEyVnlKenRjYmx4dUx5b3FYRzRnS2lCQmJHeHZkM01nWm05eUlIUm9aU0IxYzJGblpTQnZaaUJtWVd0bElIUnZkV05vSUdWMlpXNTBjeUJoYm1RZ2FXMXdiR1Z0Wlc1MGN5QkpWRzkxWTJoRGIyNTBjbTlzYkdWeVhHNGdLaUJBY0dGeVlXMGdaR0YwWVVOb1lXNXVaV3hEYjI1MGNtOXNiR1Z5SUMwZ1ZHaGxJR052Ym5SeWIyeHNaWElnWm05eUlIUm9aU0JFWVhSaElHTm9ZVzV1Wld4Y2JpQXFJRUJ3WVhKaGJTQjJhV1JsYjBWc1pXMWxiblJRWVhKbGJuUWdMU0JVYUdVZ2RtbGtaVzhnY0d4aGVXVnlJRVJQVFNCbGJHVnRaVzUwWEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCR1lXdGxWRzkxWTJoRGIyNTBjbTlzYkdWeUlHbHRjR3hsYldWdWRITWdTVlJ2ZFdOb1EyOXVkSEp2Ykd4bGNpQjdYRzRnSUNBZ1ptRnJaVlJ2ZFdOb1JtbHVaMlZ5T2lCR1lXdGxWRzkxWTJoR2FXNW5aWEk3WEc0Z0lDQWdkRzlUZEhKbFlXMWxjazFsYzNOaFoyVnpVSEp2ZG1sa1pYSTZJRk4wY21WaGJVMWxjM05oWjJWRGIyNTBjbTlzYkdWeU8xeHVJQ0FnSUhacFpHVnZSV3hsYldWdWRGQnliM1pwWkdWeU9pQldhV1JsYjFCc1lYbGxjanRjYmlBZ0lDQmpiMjl5WkdsdVlYUmxRMjl1ZG1WeWRHVnlPaUJEYjI5eVpHbHVZWFJsUTI5dWRtVnlkR1Z5TzF4dUlDQWdJSFpwWkdWdlJXeGxiV1Z1ZEZCaGNtVnVkRU5zYVdWdWRGSmxZM1E2SUVSUFRWSmxZM1E3WEc1Y2JpQWdJQ0F2THlCVmRHbHNhWFI1SUdadmNpQnJaV1Z3YVc1bklIUnlZV05ySUc5bUlHVjJaVzUwSUdoaGJtUnNaWEp6SUdGdVpDQjFibkpsWjJsemRHVnlhVzVuSUhSb1pXMWNiaUFnSUNCd2NtbDJZWFJsSUhSdmRXTm9SWFpsYm5STWFYTjBaVzVsY2xSeVlXTnJaWElnUFNCdVpYY2dSWFpsYm5STWFYTjBaVzVsY2xSeVlXTnJaWElvS1R0Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndZWEpoYlNCMGIxTjBjbVZoYldWeVRXVnpjMkZuWlhOUWNtOTJhV1JsY2lBdElGTjBjbVZoYlNCdFpYTnpZV2RsSUdsdWMzUmhibU5sWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSFpwWkdWdlJXeGxiV1Z1ZEZCeWIzWnBaR1Z5SUMwZ1ZtbGtaVzhnWld4bGJXVnVkQ0JwYm5OMFlXNWpaVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmpiMjl5WkdsdVlYUmxRMjl1ZG1WeWRHVnlJQzBnUVNCamIyOXlaR2x1WVhSbElHTnZiblpsY25SbGNpQnBibk4wWVc1alpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtGeHVJQ0FnSUNBZ0lDQjBiMU4wY21WaGJXVnlUV1Z6YzJGblpYTlFjbTkyYVdSbGNqb2dVM1J5WldGdFRXVnpjMkZuWlVOdmJuUnliMnhzWlhJc1hHNGdJQ0FnSUNBZ0lIWnBaR1Z2Uld4bGJXVnVkRkJ5YjNacFpHVnlPaUJXYVdSbGIxQnNZWGxsY2l4Y2JpQWdJQ0FnSUNBZ1kyOXZjbVJwYm1GMFpVTnZiblpsY25SbGNqb2dRMjl2Y21ScGJtRjBaVU52Ym5abGNuUmxjbHh1SUNBZ0lDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuUnZVM1J5WldGdFpYSk5aWE56WVdkbGMxQnliM1pwWkdWeUlEMGdkRzlUZEhKbFlXMWxjazFsYzNOaFoyVnpVSEp2ZG1sa1pYSTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRtbGtaVzlGYkdWdFpXNTBVSEp2ZG1sa1pYSWdQU0IyYVdSbGIwVnNaVzFsYm5SUWNtOTJhV1JsY2p0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVqYjI5eVpHbHVZWFJsUTI5dWRtVnlkR1Z5SUQwZ1kyOXZjbVJwYm1GMFpVTnZiblpsY25SbGNqdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2IyNTBiM1ZqYUhOMFlYSjBJRDBnS0dWMk9pQlViM1ZqYUVWMlpXNTBLU0E5UGlCMGFHbHpMbTl1Vkc5MVkyaFRkR0Z5ZENobGRpazdYRzRnSUNBZ0lDQWdJR052Ym5OMElHOXVkRzkxWTJobGJtUWdQU0FvWlhZNklGUnZkV05vUlhabGJuUXBJRDArSUhSb2FYTXViMjVVYjNWamFFVnVaQ2hsZGlrN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUc5dWRHOTFZMmh0YjNabElEMGdLR1YyT2lCVWIzVmphRVYyWlc1MEtTQTlQaUIwYUdsekxtOXVWRzkxWTJoTmIzWmxLR1YyS1R0Y2JpQWdJQ0FnSUNBZ1pHOWpkVzFsYm5RdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnbmRHOTFZMmh6ZEdGeWRDY3NJRzl1ZEc5MVkyaHpkR0Z5ZEN3Z2V5QndZWE56YVhabE9pQm1ZV3h6WlNCOUtUdGNiaUFnSUNBZ0lDQWdaRzlqZFcxbGJuUXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25kRzkxWTJobGJtUW5MQ0J2Ym5SdmRXTm9aVzVrTENCN0lIQmhjM05wZG1VNklHWmhiSE5sSUgwcE8xeHVJQ0FnSUNBZ0lDQmtiMk4xYldWdWRDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZDBiM1ZqYUcxdmRtVW5MQ0J2Ym5SdmRXTm9iVzkyWlN3Z2V5QndZWE56YVhabE9pQm1ZV3h6WlNCOUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MGIzVmphRVYyWlc1MFRHbHpkR1Z1WlhKVWNtRmphMlZ5TG1Ga1pGVnVjbVZuYVhOMFpYSkRZV3hzWW1GamF5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNncElEMCtJR1J2WTNWdFpXNTBMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvSjNSdmRXTm9jM1JoY25RbkxDQnZiblJ2ZFdOb2MzUmhjblFwWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZEc5MVkyaEZkbVZ1ZEV4cGMzUmxibVZ5VkhKaFkydGxjaTVoWkdSVmJuSmxaMmx6ZEdWeVEyRnNiR0poWTJzb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvS1NBOVBpQmtiMk4xYldWdWRDNXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLQ2QwYjNWamFHVnVaQ2NzSUc5dWRHOTFZMmhsYm1RcFhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRHOTFZMmhGZG1WdWRFeHBjM1JsYm1WeVZISmhZMnRsY2k1aFpHUlZibkpsWjJsemRHVnlRMkZzYkdKaFkyc29YRzRnSUNBZ0lDQWdJQ0FnSUNBb0tTQTlQaUJrYjJOMWJXVnVkQzV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0NkMGIzVmphRzF2ZG1VbkxDQnZiblJ2ZFdOb2JXOTJaU2xjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVmJuSmxaMmx6ZEdWeUlHRnNiQ0IwYjNWamFDQmxkbVZ1ZEhOY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IxYm5KbFoybHpkR1Z5Vkc5MVkyaEZkbVZ1ZEhNb0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRHOTFZMmhGZG1WdWRFeHBjM1JsYm1WeVZISmhZMnRsY2k1MWJuSmxaMmx6ZEdWeVFXeHNLQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVTJWMGN5QjBhR1VnZG1sa1pXOGdSV3hsYldWdWRDQlFZWEpsYm5RZ1EyeHBaVzUwSUZKbFkzUWdiblZ0WW1WeWN5Qm1iM0lnZEdocGN5QmpiR0Z6YzF4dUlDQWdJQ0FxSUVCd1lYSmhiU0IyYVdSbGIwVnNaVzFsYm5SUVlYSmxiblJEYkdsbGJuUlNaV04wSUMwZ1lTQm9kRzFzSUVWc1pXMWxiblJRWVhKbGJuUkRiR2xsYm5SU1pXTjBJRzlpYW1WamRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUhObGRGWnBaR1Z2Uld4bGJXVnVkRkJoY21WdWRFTnNhV1Z1ZEZKbFkzUW9kbWxrWlc5RmJHVnRaVzUwVUdGeVpXNTBRMnhwWlc1MFVtVmpkRG9nUkU5TlVtVmpkQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMblpwWkdWdlJXeGxiV1Z1ZEZCaGNtVnVkRU5zYVdWdWRGSmxZM1FnUFNCMmFXUmxiMFZzWlcxbGJuUlFZWEpsYm5SRGJHbGxiblJTWldOME8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGZG9aVzRnWVNCMGIzVmphQ0JsZG1WdWRDQmlaV2RwYm5OY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZEc5MVkyZ2dMU0IwYUdVZ1lXTjBhWFpoZEdsdVp5QjBiM1ZqYUNCbGRtVnVkRnh1SUNBZ0lDQXFMMXh1SUNBZ0lHOXVWRzkxWTJoVGRHRnlkQ2gwYjNWamFEb2dWRzkxWTJoRmRtVnVkQ2s2SUhadmFXUWdlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11ZG1sa1pXOUZiR1Z0Wlc1MFVISnZkbWxrWlhJdWFYTldhV1JsYjFKbFlXUjVLQ2tnZkh3Z2RHOTFZMmd1ZEdGeVoyVjBJQ0U5UFNCMGFHbHpMblpwWkdWdlJXeGxiV1Z1ZEZCeWIzWnBaR1Z5TG1kbGRGWnBaR1Z2Uld4bGJXVnVkQ2dwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11Wm1GclpWUnZkV05vUm1sdVoyVnlJRDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdacGNuTjBYM1J2ZFdOb0lEMGdkRzkxWTJndVkyaGhibWRsWkZSdmRXTm9aWE5iTUYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtWmhhMlZVYjNWamFFWnBibWRsY2lBOUlHNWxkeUJHWVd0bFZHOTFZMmhHYVc1blpYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabWx5YzNSZmRHOTFZMmd1YVdSbGJuUnBabWxsY2l4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWFYSnpkRjkwYjNWamFDNWpiR2xsYm5SWUlDMGdkR2hwY3k1MmFXUmxiMFZzWlcxbGJuUlFZWEpsYm5SRGJHbGxiblJTWldOMExteGxablFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1seWMzUmZkRzkxWTJndVkyeHBaVzUwV1NBdElIUm9hWE11ZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwUTJ4cFpXNTBVbVZqZEM1MGIzQmNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSFpwWkdWdlJXeGxiV1Z1ZEZCaGNtVnVkQ0E5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTJhV1JsYjBWc1pXMWxiblJRY205MmFXUmxjaTVuWlhSV2FXUmxiMUJoY21WdWRFVnNaVzFsYm5Rb0tTQmhjeUJJVkUxTVJHbDJSV3hsYldWdWREdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJRzF2ZFhObFJYWmxiblFnUFNCdVpYY2dUVzkxYzJWRmRtVnVkQ2duYlc5MWMyVmxiblJsY2ljc0lHWnBjbk4wWDNSdmRXTm9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWnBaR1Z2Uld4bGJXVnVkRkJoY21WdWRDNWthWE53WVhSamFFVjJaVzUwS0cxdmRYTmxSWFpsYm5RcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JqYjI5eVpDQTlJSFJvYVhNdVkyOXZjbVJwYm1GMFpVTnZiblpsY25SbGNpNXViM0p0WVd4cGVtVkJibVJSZFdGdWRHbDZaVlZ1YzJsbmJtVmtLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVptRnJaVlJ2ZFdOb1JtbHVaMlZ5TG5nc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVtWVd0bFZHOTFZMmhHYVc1blpYSXVlVnh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSFJ2VTNSeVpXRnRaWEpJWVc1a2JHVnljeUE5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTBiMU4wY21WaGJXVnlUV1Z6YzJGblpYTlFjbTkyYVdSbGNpNTBiMU4wY21WaGJXVnlTR0Z1Wkd4bGNuTTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGIxTjBjbVZoYldWeVNHRnVaR3hsY25NdVoyVjBLQ2ROYjNWelpVUnZkMjRuS1NoYlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RXOTFjMlZDZFhSMGIyNHViV0ZwYmtKMWRIUnZiaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI5eVpDNTRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052YjNKa0xubGNiaUFnSUNBZ0lDQWdJQ0FnSUYwcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJ2ZFdOb0xuQnlaWFpsYm5SRVpXWmhkV3gwS0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1YyaGxiaUJoSUhSdmRXTm9JR1YyWlc1MElHVnVaSE5jYmlBZ0lDQWdLaUJBY0dGeVlXMGdkRzkxWTJoRmRtVnVkQ0F0SUhSb1pTQmhZM1JwZG1GMGFXNW5JSFJ2ZFdOb0lHVjJaVzUwWEc0Z0lDQWdJQ292WEc0Z0lDQWdiMjVVYjNWamFFVnVaQ2gwYjNWamFFVjJaVzUwT2lCVWIzVmphRVYyWlc1MEtUb2dkbTlwWkNCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NTJhV1JsYjBWc1pXMWxiblJRY205MmFXUmxjaTVwYzFacFpHVnZVbVZoWkhrb0tTQjhmQ0IwYUdsekxtWmhhMlZVYjNWamFFWnBibWRsY2lBOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkbWxrWlc5RmJHVnRaVzUwVUdGeVpXNTBJRDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZG1sa1pXOUZiR1Z0Wlc1MFVISnZkbWxrWlhJdVoyVjBWbWxrWlc5UVlYSmxiblJGYkdWdFpXNTBLQ2s3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFJ2VTNSeVpXRnRaWEpJWVc1a2JHVnljeUE5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5SdlUzUnlaV0Z0WlhKTlpYTnpZV2RsYzFCeWIzWnBaR1Z5TG5SdlUzUnlaV0Z0WlhKSVlXNWtiR1Z5Y3p0Y2JseHVJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQjBJRDBnTURzZ2RDQThJSFJ2ZFdOb1JYWmxiblF1WTJoaGJtZGxaRlJ2ZFdOb1pYTXViR1Z1WjNSb095QjBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIUnZkV05vSUQwZ2RHOTFZMmhGZG1WdWRDNWphR0Z1WjJWa1ZHOTFZMmhsYzF0MFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBiM1ZqYUM1cFpHVnVkR2xtYVdWeUlEMDlQU0IwYUdsekxtWmhhMlZVYjNWamFFWnBibWRsY2k1cFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIZ2dQVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGIzVmphQzVqYkdsbGJuUllJQzBnZEdocGN5NTJhV1JsYjBWc1pXMWxiblJRWVhKbGJuUkRiR2xsYm5SU1pXTjBMbXhsWm5RN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnZVNBOUlIUnZkV05vTG1Oc2FXVnVkRmtnTFNCMGFHbHpMblpwWkdWdlJXeGxiV1Z1ZEZCaGNtVnVkRU5zYVdWdWRGSmxZM1F1ZEc5d08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdOdmIzSmtJRDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqYjI5eVpHbHVZWFJsUTI5dWRtVnlkR1Z5TG01dmNtMWhiR2w2WlVGdVpGRjFZVzUwYVhwbFZXNXphV2R1WldRb2VDd2dlU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEc5VGRISmxZVzFsY2toaGJtUnNaWEp6TG1kbGRDZ25UVzkxYzJWVmNDY3BLRnRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RXOTFjMlZDZFhSMGIyNHViV0ZwYmtKMWRIUnZiaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXZjbVF1ZUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl2Y21RdWVWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGMHBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdiVzkxYzJWRmRtVnVkQ0E5SUc1bGR5Qk5iM1Z6WlVWMlpXNTBLQ2R0YjNWelpXeGxZWFpsSnl3Z2RHOTFZMmdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhacFpHVnZSV3hsYldWdWRGQmhjbVZ1ZEM1a2FYTndZWFJqYUVWMlpXNTBLRzF2ZFhObFJYWmxiblFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVabUZyWlZSdmRXTm9SbWx1WjJWeUlEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IwYjNWamFFVjJaVzUwTG5CeVpYWmxiblJFWldaaGRXeDBLQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVDI0Z1lTQk5iM1psSUhSdmRXTm9JR1YyWlc1MFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhSdmRXTm9SWFpsYm5RZ0xTQjBhR1VnWVdOMGFYWmhkR2x1WnlCMGIzVmphQ0JsZG1WdWRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUc5dVZHOTFZMmhOYjNabEtIUnZkV05vUlhabGJuUTZJRlJ2ZFdOb1JYWmxiblFwT2lCMmIybGtJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TG5acFpHVnZSV3hsYldWdWRGQnliM1pwWkdWeUxtbHpWbWxrWlc5U1pXRmtlU2dwSUh4OElIUm9hWE11Wm1GclpWUnZkV05vUm1sdVoyVnlJRDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCMGIxTjBjbVZoYldWeVNHRnVaR3hsY25NZ1BWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTBiMU4wY21WaGJXVnlUV1Z6YzJGblpYTlFjbTkyYVdSbGNpNTBiMU4wY21WaGJXVnlTR0Z1Wkd4bGNuTTdYRzVjYmlBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnZENBOUlEQTdJSFFnUENCMGIzVmphRVYyWlc1MExuUnZkV05vWlhNdWJHVnVaM1JvT3lCMEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhSdmRXTm9JRDBnZEc5MVkyaEZkbVZ1ZEM1MGIzVmphR1Z6VzNSZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUnZkV05vTG1sa1pXNTBhV1pwWlhJZ1BUMDlJSFJvYVhNdVptRnJaVlJ2ZFdOb1JtbHVaMlZ5TG1sa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2VDQTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSdmRXTm9MbU5zYVdWdWRGZ2dMU0IwYUdsekxuWnBaR1Z2Uld4bGJXVnVkRkJoY21WdWRFTnNhV1Z1ZEZKbFkzUXViR1ZtZER0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0I1SUQwZ2RHOTFZMmd1WTJ4cFpXNTBXU0F0SUhSb2FYTXVkbWxrWlc5RmJHVnRaVzUwVUdGeVpXNTBRMnhwWlc1MFVtVmpkQzUwYjNBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWTI5dmNtUWdQVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU52YjNKa2FXNWhkR1ZEYjI1MlpYSjBaWEl1Ym05eWJXRnNhWHBsUVc1a1VYVmhiblJwZW1WVmJuTnBaMjVsWkNoNExDQjVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmtaV3gwWVNBOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyOXZjbVJwYm1GMFpVTnZiblpsY25SbGNpNXViM0p0WVd4cGVtVkJibVJSZFdGdWRHbDZaVk5wWjI1bFpDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZ2dMU0IwYUdsekxtWmhhMlZVYjNWamFFWnBibWRsY2k1NExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VTQXRJSFJvYVhNdVptRnJaVlJ2ZFdOb1JtbHVaMlZ5TG5sY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYjFOMGNtVmhiV1Z5U0dGdVpHeGxjbk11WjJWMEtDZE5iM1Z6WlUxdmRtVW5LU2hiWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiM0prTG5nc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052YjNKa0xua3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbGJIUmhMbmdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxiSFJoTG5sY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1aaGEyVlViM1ZqYUVacGJtZGxjaTU0SUQwZ2VEdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1aaGEyVlViM1ZqYUVacGJtZGxjaTU1SUQwZ2VUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMGIzVmphRVYyWlc1MExuQnlaWFpsYm5SRVpXWmhkV3gwS0NrN1hHNGdJQ0FnZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRlJvWlNCcGJuUmxjbVpoWTJVZ1ptOXlJR1pwYm1kbGNpQndiM05wZEdsdmJpQnRZWEJ3YVc1blhHNGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5QkdZV3RsVkc5MVkyaEdhVzVuWlhJZ2UxeHVJQ0FnSUdsa09pQnVkVzFpWlhJN1hHNGdJQ0FnZURvZ2JuVnRZbVZ5TzF4dUlDQWdJSGs2SUc1MWJXSmxjanRjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0JwWkNBdElIUm9aU0JpZFhSMGIyNGdhV1JjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlQ0F0SUhSb1pTQjRJR0Y0YVhNZ2RtRnNkV1ZjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlU0F0SUhSb1pTQjVJR0Y0YVhNZ2RtRnNkV1ZjYmlBZ0lDQWdLaTljYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhwWkRvZ2JuVnRZbVZ5TENCNE9pQnVkVzFpWlhJc0lIazZJRzUxYldKbGNpa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtbGtJRDBnYVdRN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZUNBOUlIZzdYRzRnSUNBZ0lDQWdJSFJvYVhNdWVTQTlJSGs3WEc0Z0lDQWdmVnh1ZlZ4dUlpd2lMeThnUTI5d2VYSnBaMmgwSUVWd2FXTWdSMkZ0WlhNc0lFbHVZeTRnUVd4c0lGSnBaMmgwY3lCU1pYTmxjblpsWkM1Y2JseHVhVzF3YjNKMElIc2dURzluWjJWeUlIMGdabkp2YlNBbkxpNHZURzluWjJWeUwweHZaMmRsY2ljN1hHNXBiWEJ2Y25RZ2V5QlRkSEpsWVcxTlpYTnpZV2RsUTI5dWRISnZiR3hsY2lCOUlHWnliMjBnSnk0dUwxVmxTVzV6ZEdGdVkyVk5aWE56WVdkbEwxTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5Snp0Y2JtbHRjRzl5ZENCN0lFVjJaVzUwVEdsemRHVnVaWEpVY21GamEyVnlJSDBnWm5KdmJTQW5MaTR2VlhScGJDOUZkbVZ1ZEV4cGMzUmxibVZ5VkhKaFkydGxjaWM3WEc1cGJYQnZjblFnZXlCRGIyNTBjbTlzYkdWeUlIMGdabkp2YlNBbkxpOUhZVzFsY0dGa1ZIbHdaWE1uTzF4dVhHNHZLaXBjYmlBcUlGUm9aU0JqYkdGemN5QjBhR0YwSUdoaGJtUnNaWE1nZEdobElHWjFibU4wYVc5dVlXeHBkSGtnYjJZZ1oyRnRaWEJoWkhNZ1lXNWtJR052Ym5SeWIyeHNaWEp6WEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCSFlXMWxVR0ZrUTI5dWRISnZiR3hsY2lCN1hHNGdJQ0FnWTI5dWRISnZiR3hsY25NNklFRnljbUY1UEVOdmJuUnliMnhzWlhJK08xeHVJQ0FnSUhKbGNYVmxjM1JCYm1sdFlYUnBiMjVHY21GdFpUb2dLR05oYkd4aVlXTnJPaUJHY21GdFpWSmxjWFZsYzNSRFlXeHNZbUZqYXlrZ1BUNGdiblZ0WW1WeU8xeHVJQ0FnSUhSdlUzUnlaV0Z0WlhKTlpYTnpZV2RsYzFCeWIzWnBaR1Z5T2lCVGRISmxZVzFOWlhOellXZGxRMjl1ZEhKdmJHeGxjanRjYmx4dUlDQWdJQzh2SUZWMGFXeHBkSGtnWm05eUlHdGxaWEJwYm1jZ2RISmhZMnNnYjJZZ1pYWmxiblFnYUdGdVpHeGxjbk1nWVc1a0lIVnVjbVZuYVhOMFpYSnBibWNnZEdobGJWeHVJQ0FnSUhCeWFYWmhkR1VnWjJGdFpWQmhaRVYyWlc1MFRHbHpkR1Z1WlhKVWNtRmphMlZ5SUQwZ2JtVjNJRVYyWlc1MFRHbHpkR1Z1WlhKVWNtRmphMlZ5S0NrN1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2RHOVRkSEpsWVcxbGNrMWxjM05oWjJWelVISnZkbWxrWlhJZ0xTQlRkSEpsWVcwZ2JXVnpjMkZuWlNCcGJuTjBZVzVqWlZ4dUlDQWdJQ0FxTDF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0hSdlUzUnlaV0Z0WlhKTlpYTnpZV2RsYzFCeWIzWnBaR1Z5T2lCVGRISmxZVzFOWlhOellXZGxRMjl1ZEhKdmJHeGxjaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMblJ2VTNSeVpXRnRaWEpOWlhOellXZGxjMUJ5YjNacFpHVnlJRDBnZEc5VGRISmxZVzFsY2sxbGMzTmhaMlZ6VUhKdmRtbGtaWEk3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV5WlhGMVpYTjBRVzVwYldGMGFXOXVSbkpoYldVZ1BTQW9YRzRnSUNBZ0lDQWdJQ0FnSUNCM2FXNWtiM2N1Ylc5NlVtVnhkV1Z6ZEVGdWFXMWhkR2x2YmtaeVlXMWxJSHg4WEc0Z0lDQWdJQ0FnSUNBZ0lDQjNhVzVrYjNjdWQyVmlhMmwwVW1WeGRXVnpkRUZ1YVcxaGRHbHZia1p5WVcxbElIeDhYRzRnSUNBZ0lDQWdJQ0FnSUNCM2FXNWtiM2N1Y21WeGRXVnpkRUZ1YVcxaGRHbHZia1p5WVcxbFhHNGdJQ0FnSUNBZ0lDa3VZbWx1WkNoM2FXNWtiM2NwTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JpY205M2MyVnlWMmx1Wkc5M0lEMGdkMmx1Wkc5M0lHRnpJRmRwYm1SdmR6dGNibHh1SUNBZ0lDQWdJQ0JqYjI1emRDQnZia0psWm05eVpWVnViRzloWkNBOUlDaGxkam9nUlhabGJuUXBJRDArWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXZia0psWm05eVpWVnViRzloWkNobGRpazdYRzRnSUNBZ0lDQWdJSGRwYm1SdmR5NWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZGlaV1p2Y21WMWJteHZZV1FuTENCdmJrSmxabTl5WlZWdWJHOWhaQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLQ2RIWVcxbGNHRmtSWFpsYm5RbklHbHVJR0p5YjNkelpYSlhhVzVrYjNjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJRzl1UjJGdFpWQmhaRU52Ym01bFkzUmxaQ0E5SUNobGRqb2dSMkZ0WlhCaFpFVjJaVzUwS1NBOVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WjJGdFpWQmhaRU52Ym01bFkzUklZVzVrYkdWeUtHVjJLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUc5dVIyRnRaVkJoWkVScGMyTnZibTVsWTNSbFpDQTlJQ2hsZGpvZ1IyRnRaWEJoWkVWMlpXNTBLU0E5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaMkZ0WlZCaFpFUnBjMk52Ym01bFkzUklZVzVrYkdWeUtHVjJLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIZHBibVJ2ZHk1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkbllXMWxjR0ZrWTI5dWJtVmpkR1ZrSnl3Z2IyNUhZVzFsVUdGa1EyOXVibVZqZEdWa0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhkcGJtUnZkeTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2RuWVcxbGNHRmtaR2x6WTI5dWJtVmpkR1ZrSnl3Z2IyNUhZVzFsVUdGa1JHbHpZMjl1Ym1WamRHVmtLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WjJGdFpWQmhaRVYyWlc1MFRHbHpkR1Z1WlhKVWNtRmphMlZ5TG1Ga1pGVnVjbVZuYVhOMFpYSkRZV3hzWW1GamF5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9LU0E5UGlCM2FXNWtiM2N1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnbloyRnRaWEJoWkdOdmJtNWxZM1JsWkNjc0lHOXVSMkZ0WlZCaFpFTnZibTVsWTNSbFpDbGNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtZGhiV1ZRWVdSRmRtVnVkRXhwYzNSbGJtVnlWSEpoWTJ0bGNpNWhaR1JWYm5KbFoybHpkR1Z5UTJGc2JHSmhZMnNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS0NrZ1BUNGdkMmx1Wkc5M0xuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9KMmRoYldWd1lXUmthWE5qYjI1dVpXTjBaV1FuTENCdmJrZGhiV1ZRWVdSRWFYTmpiMjV1WldOMFpXUXBYRzRnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLQ2RYWldKTGFYUkhZVzFsY0dGa1JYWmxiblFuSUdsdUlHSnliM2R6WlhKWGFXNWtiM2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHOXVWMlZpYTJsMFIyRnRaVkJoWkVOdmJtNWxZM1JsWkNBOUlDaGxkam9nUjJGdFpYQmhaRVYyWlc1MEtTQTlQaUIwYUdsekxtZGhiV1ZRWVdSRGIyNXVaV04wU0dGdVpHeGxjaWhsZGlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnZibGRsWW10cGRFZGhiV1ZRWVdSRWFYTmpiMjV1WldOMFpXUWdQU0FvWlhZNklFZGhiV1Z3WVdSRmRtVnVkQ2tnUFQ0Z2RHaHBjeTVuWVcxbFVHRmtSR2x6WTI5dWJtVmpkRWhoYm1Sc1pYSW9aWFlwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkMmx1Wkc5M0xtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0ozZGxZbXRwZEdkaGJXVndZV1JqYjI1dVpXTjBaV1FuTENCdmJsZGxZbXRwZEVkaGJXVlFZV1JEYjI1dVpXTjBaV1FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkMmx1Wkc5M0xtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0ozZGxZbXRwZEdkaGJXVndZV1JrYVhOamIyNXVaV04wWldRbkxDQnZibGRsWW10cGRFZGhiV1ZRWVdSRWFYTmpiMjV1WldOMFpXUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVuWVcxbFVHRmtSWFpsYm5STWFYTjBaVzVsY2xSeVlXTnJaWEl1WVdSa1ZXNXlaV2RwYzNSbGNrTmhiR3hpWVdOcktGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZ3BJRDArSUhkcGJtUnZkeTV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0NkM1pXSnJhWFJuWVcxbGNHRmtZMjl1Ym1WamRHVmtKeXdnYjI1WFpXSnJhWFJIWVcxbFVHRmtRMjl1Ym1WamRHVmtLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaMkZ0WlZCaFpFVjJaVzUwVEdsemRHVnVaWEpVY21GamEyVnlMbUZrWkZWdWNtVm5hWE4wWlhKRFlXeHNZbUZqYXloY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb0tTQTlQaUIzYVc1a2IzY3VjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWduZDJWaWEybDBaMkZ0WlhCaFpHUnBjMk52Ym01bFkzUmxaQ2NzSUc5dVYyVmlhMmwwUjJGdFpWQmhaRVJwYzJOdmJtNWxZM1JsWkNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2RHaHBjeTVqYjI1MGNtOXNiR1Z5Y3lBOUlGdGRPMXh1SUNBZ0lDQWdJQ0JwWmlBb2JtRjJhV2RoZEc5eUxtZGxkRWRoYldWd1lXUnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0dOdmJuTjBJR2RoYldWd1lXUWdiMllnYm1GMmFXZGhkRzl5TG1kbGRFZGhiV1Z3WVdSektDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1oyRnRaWEJoWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtZGhiV1ZRWVdSRGIyNXVaV04wU0dGdVpHeGxjaWh1WlhjZ1IyRnRaWEJoWkVWMlpXNTBLQ2RuWVcxbGNHRmtZMjl1Ym1WamRHVmtKeXdnZXlCbllXMWxjR0ZrSUgwcEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlZibkpsWjJsemRHVnljeUJoYkd3Z1pYWmxiblFnYUdGdVpHeGxjbk5jYmlBZ0lDQWdLaTljYmlBZ0lDQjFibkpsWjJsemRHVnlSMkZ0WlZCaFpFVjJaVzUwY3lncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bllXMWxVR0ZrUlhabGJuUk1hWE4wWlc1bGNsUnlZV05yWlhJdWRXNXlaV2RwYzNSbGNrRnNiQ2dwTzF4dUlDQWdJQ0FnSUNCbWIzSW9ZMjl1YzNRZ1kyOXVkSEp2Ykd4bGNpQnZaaUIwYUdsekxtTnZiblJ5YjJ4c1pYSnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaWhqYjI1MGNtOXNiR1Z5TG1sa0lDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTl1UjJGdFpYQmhaRVJwYzJOdmJtNWxZM1JsWkNoamIyNTBjbTlzYkdWeUxtbGtLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IwYUdsekxtTnZiblJ5YjJ4c1pYSnpJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YjI1SFlXMWxjR0ZrUTI5dWJtVmpkR1ZrSUQwZ0tDa2dQVDRnZXlBdktpQXFMeUI5TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbTl1UjJGdFpYQmhaRVJwYzJOdmJtNWxZM1JsWkNBOUlDZ3BJRDArSUhzZ0x5b2dLaThnZlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCRGIyNXVaV04wY3lCMGFHVWdaMkZ0WlhCaFpDQm9ZVzVrYkdWeVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUdkaGJXVlFZV1JGZG1WdWRDQXRJSFJvWlNCaFkzUnBkbUYwYVc1bklHZGhiV1Z3WVdRZ1pYWmxiblJjYmlBZ0lDQWdLaTljYmlBZ0lDQm5ZVzFsVUdGa1EyOXVibVZqZEVoaGJtUnNaWElvWjJGdFpWQmhaRVYyWlc1ME9pQkhZVzFsY0dGa1JYWmxiblFwSUh0Y2JpQWdJQ0FnSUNBZ1RHOW5aMlZ5TGt4dlp5aE1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTENBblIyRnRaWEJoWkNCamIyNXVaV04wSUdoaGJtUnNaWEluTENBMktUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1oyRnRaWEJoWkNBOUlHZGhiV1ZRWVdSRmRtVnVkQzVuWVcxbGNHRmtPMXh1WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFJsYlhBNklFTnZiblJ5YjJ4c1pYSWdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpkWEp5Wlc1MFUzUmhkR1U2SUdkaGJXVndZV1FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQndjbVYyVTNSaGRHVTZJR2RoYldWd1lXUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCcFpEb2dkVzVrWldacGJtVmtYRzRnSUNBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVqYjI1MGNtOXNiR1Z5Y3k1d2RYTm9LSFJsYlhBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJuUnliMnhzWlhKelcyZGhiV1Z3WVdRdWFXNWtaWGhkTG1OMWNuSmxiblJUZEdGMFpTQTlJR2RoYldWd1lXUTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyOXVkSEp2Ykd4bGNuTmJaMkZ0WlhCaFpDNXBibVJsZUYwdWNISmxkbE4wWVhSbElEMGdaMkZ0WlhCaFpEdGNiaUFnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5aMkZ0WlhCaFpEb2dKeUFySUdkaGJXVndZV1F1YVdRZ0t5QW5JR052Ym01bFkzUmxaQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQTJYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUhkcGJtUnZkeTV5WlhGMVpYTjBRVzVwYldGMGFXOXVSbkpoYldVb0tDa2dQVDRnZEdocGN5NTFjR1JoZEdWVGRHRjBkWE1vS1NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YjI1SFlXMWxjR0ZrUTI5dWJtVmpkR1ZrS0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1JHbHpZMjl1Ym1WamRITWdkR2hsSUdkaGJXVndZV1FnYUdGdVpHeGxjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQm5ZVzFsVUdGa1JYWmxiblFnTFNCMGFHVWdZV04wYVhaaGRHbHVaeUJuWVcxbGNHRmtJR1YyWlc1MFhHNGdJQ0FnSUNvdlhHNGdJQ0FnWjJGdFpWQmhaRVJwYzJOdmJtNWxZM1JJWVc1a2JHVnlLR2RoYldWUVlXUkZkbVZ1ZERvZ1IyRnRaWEJoWkVWMlpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUV4dloyZGxjaTVNYjJjb1RHOW5aMlZ5TGtkbGRGTjBZV05yVkhKaFkyVW9LU3dnSjBkaGJXVndZV1FnWkdselkyOXVibVZqZENCb1lXNWtiR1Z5Snl3Z05pazdYRzRnSUNBZ0lDQWdJRXh2WjJkbGNpNU1iMmNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdKMmRoYldWd1lXUTZJQ2NnS3lCbllXMWxVR0ZrUlhabGJuUXVaMkZ0WlhCaFpDNXBaQ0FySUNjZ1pHbHpZMjl1Ym1WamRHVmtKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lEWmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdaR1ZzWlhSbFpFTnZiblJ5YjJ4c1pYSWdQU0IwYUdsekxtTnZiblJ5YjJ4c1pYSnpXMmRoYldWUVlXUkZkbVZ1ZEM1bllXMWxjR0ZrTG1sdVpHVjRYVHRjYmlBZ0lDQWdJQ0FnWkdWc1pYUmxJSFJvYVhNdVkyOXVkSEp2Ykd4bGNuTmJaMkZ0WlZCaFpFVjJaVzUwTG1kaGJXVndZV1F1YVc1a1pYaGRPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTnZiblJ5YjJ4c1pYSnpJRDBnZEdocGN5NWpiMjUwY205c2JHVnljeTVtYVd4MFpYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNBb1kyOXVkSEp2Ykd4bGNpa2dQVDRnWTI5dWRISnZiR3hsY2lBaFBUMGdkVzVrWldacGJtVmtYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViMjVIWVcxbGNHRmtSR2x6WTI5dWJtVmpkR1ZrS0dSbGJHVjBaV1JEYjI1MGNtOXNiR1Z5TG1sa0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRZMkZ1SUdadmNpQmpiMjV1WldOMFpXUWdaMkZ0WlhCaFpITmNiaUFnSUNBZ0tpOWNiaUFnSUNCelkyRnVSMkZ0WlZCaFpITW9LU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR2RoYldWd1lXUnpJRDBnYm1GMmFXZGhkRzl5TG1kbGRFZGhiV1Z3WVdSelhHNGdJQ0FnSUNBZ0lDQWdJQ0EvSUc1aGRtbG5ZWFJ2Y2k1blpYUkhZVzFsY0dGa2N5Z3BYRzRnSUNBZ0lDQWdJQ0FnSUNBNklHNWhkbWxuWVhSdmNpNTNaV0pyYVhSSFpYUkhZVzFsY0dGa2MxeHVJQ0FnSUNBZ0lDQWdJQ0FnUHlCdVlYWnBaMkYwYjNJdWQyVmlhMmwwUjJWMFIyRnRaWEJoWkhNb0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnT2lCYlhUdGNiaUFnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0JuWVcxbGNHRmtjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHZGhiV1Z3WVdSelcybGRJQ1ltSUdkaGJXVndZV1J6VzJsZExtbHVaR1Y0SUdsdUlIUm9hWE11WTI5dWRISnZiR3hsY25NcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJuUnliMnhzWlhKelcyZGhiV1Z3WVdSelcybGRMbWx1WkdWNFhTNWpkWEp5Wlc1MFUzUmhkR1VnUFNCbllXMWxjR0ZrYzF0cFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGVndaR0YwWlhNZ2RHaGxJSE4wWVhSMWN5QnZaaUIwYUdVZ1oyRnRaWEJoWkNCaGJtUWdjMlZ1WkhNZ2RHaGxJR2x1Y0hWMGMxeHVJQ0FnSUNBcUwxeHVJQ0FnSUhWd1pHRjBaVk4wWVhSMWN5Z3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpZMkZ1UjJGdFpWQmhaSE1vS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZEc5VGRISmxZVzFsY2toaGJtUnNaWEp6SUQxY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRHOVRkSEpsWVcxbGNrMWxjM05oWjJWelVISnZkbWxrWlhJdWRHOVRkSEpsWVcxbGNraGhibVJzWlhKek8xeHVYRzRnSUNBZ0lDQWdJQzh2SUVsMFpYSmhkR1VnYjNabGNpQnRkV3gwYVhCc1pTQmpiMjUwY205c2JHVnljeUJwYmlCMGFHVWdZMkZ6WlNCMGFHVWdiWFZzZEdsd2JHVWdaMkZ0WlhCaFpITWdZWEpsSUdOdmJtNWxZM1JsWkZ4dUlDQWdJQ0FnSUNCbWIzSWdLR052Ym5OMElHTnZiblJ5YjJ4c1pYSWdiMllnZEdocGN5NWpiMjUwY205c2JHVnljeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnU1dZZ2QyVWdhR0YyWlc0bmRDQnlaV05sYVhabFpDQmhiaUJwWkNBb2NHOXpjMmxpYkdVZ2FXWWdkWE5wYm1jZ1lXNGdiMnhrWlhJZ2RtVnljMmx2YmlCdlppQlZSU2tzSUhKbGRIVnliaUIwYnlCdmNtbG5hVzVoYkNCbWRXNWpkR2x2Ym1Gc2FYUjVYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JqYjI1MGNtOXNiR1Z5U1c1a1pYZ2dQU0FvWTI5dWRISnZiR3hsY2k1cFpDQTlQVDBnZFc1a1pXWnBibVZrS1NBL0lIUm9hWE11WTI5dWRISnZiR3hsY25NdWFXNWtaWGhQWmloamIyNTBjbTlzYkdWeUtTQTZJR052Ym5SeWIyeHNaWEl1YVdRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmpkWEp5Wlc1MFUzUmhkR1VnUFNCamIyNTBjbTlzYkdWeUxtTjFjbkpsYm5SVGRHRjBaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dZMjl1ZEhKdmJHeGxjaTVqZFhKeVpXNTBVM1JoZEdVdVluVjBkRzl1Y3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHTjFjbkpsYm5SQ2RYUjBiMjRnUFNCamIyNTBjbTlzYkdWeUxtTjFjbkpsYm5SVGRHRjBaUzVpZFhSMGIyNXpXMmxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSEJ5WlhacGIzVnpRblYwZEc5dUlEMGdZMjl1ZEhKdmJHeGxjaTV3Y21WMlUzUmhkR1V1WW5WMGRHOXVjMXRwWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZM1Z5Y21WdWRFSjFkSFJ2Ymk1d2NtVnpjMlZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUhCeVpYTnpYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBJRDA5SUdkaGJXVndZV1JNWVhsdmRYUXVUR1ZtZEZSeWFXZG5aWElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JWUlhNZ2JHVm1kQ0JoYm1Gc2IyY2dhR0Z6SUdFZ1luVjBkRzl1SUdsdVpHVjRJRzltSURWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSdlUzUnlaV0Z0WlhKSVlXNWtiR1Z5Y3k1blpYUW9KMGRoYldWd1lXUkJibUZzYjJjbktTaGJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRISnZiR3hsY2tsdVpHVjRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZM1Z5Y21WdWRFSjFkSFJ2Ymk1MllXeDFaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9hU0E5UFNCbllXMWxjR0ZrVEdGNWIzVjBMbEpwWjJoMFZISnBaMmRsY2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZWRmN5QnlhV2RvZENCaGJtRnNiMmNnYUdGeklHRWdZblYwZEc5dUlHbHVaR1Y0SUc5bUlEWmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnZVM1J5WldGdFpYSklZVzVrYkdWeWN5NW5aWFFvSjBkaGJXVndZV1JCYm1Gc2IyY25LU2hiWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkSEp2Ykd4bGNrbHVaR1Y0TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEWXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTNWeWNtVnVkRUoxZEhSdmJpNTJZV3gxWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBiMU4wY21WaGJXVnlTR0Z1Wkd4bGNuTXVaMlYwS0NkSFlXMWxjR0ZrUW5WMGRHOXVVSEpsYzNObFpDY3BLRnRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNTBjbTlzYkdWeVNXNWtaWGdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y21WMmFXOTFjMEoxZEhSdmJpNXdjbVZ6YzJWa0lEOGdNU0E2SURCY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUYwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNnaFkzVnljbVZ1ZEVKMWRIUnZiaTV3Y21WemMyVmtJQ1ltSUhCeVpYWnBiM1Z6UW5WMGRHOXVMbkJ5WlhOelpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdjbVZzWldGelpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FTQTlQU0JuWVcxbGNHRmtUR0Y1YjNWMExreGxablJVY21sbloyVnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdWVVZ6SUd4bFpuUWdZVzVoYkc5bklHaGhjeUJoSUdKMWRIUnZiaUJwYm1SbGVDQnZaaUExWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYjFOMGNtVmhiV1Z5U0dGdVpHeGxjbk11WjJWMEtDZEhZVzFsY0dGa1FXNWhiRzluSnlrb1cxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5SeWIyeHNaWEpKYm1SbGVDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0ExTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHa2dQVDBnWjJGdFpYQmhaRXhoZVc5MWRDNVNhV2RvZEZSeWFXZG5aWElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JWUlhNZ2NtbG5hSFFnWVc1aGJHOW5JR2hoY3lCaElHSjFkSFJ2YmlCcGJtUmxlQ0J2WmlBMlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGIxTjBjbVZoYldWeVNHRnVaR3hsY25NdVoyVjBLQ2RIWVcxbGNHRmtRVzVoYkc5bkp5a29XMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuUnliMnhzWlhKSmJtUmxlQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBMkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJREJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHOVRkSEpsWVcxbGNraGhibVJzWlhKekxtZGxkQ2duUjJGdFpYQmhaRUoxZEhSdmJsSmxiR1ZoYzJWa0p5a29XMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuUnliMnhzWlhKSmJtUmxlQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJREJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1NYUmxjbUYwWlNCdmRtVnlJR2RoYldWd1lXUWdZWGhsY3lBb2QyVWdkMmxzYkNCcGJtTnlaVzFsYm5RZ2FXNGdiRzkwY3lCdlppQXlJR0Z6SUhSb1pYSmxJR2x6SURJZ1lYaGxjeUJ3WlhJZ2MzUnBZMnNwWEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJR04xY25KbGJuUlRkR0YwWlM1aGVHVnpMbXhsYm1kMGFEc2dhU0FyUFNBeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnU0c5eWFYcHZiblJoYkNCaGVHVnpJR0Z5WlNCbGRtVnVJRzUxYldKbGNtVmtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2VDQTlJSEJoY25ObFJteHZZWFFvWTNWeWNtVnVkRk4wWVhSbExtRjRaWE5iYVYwdWRHOUdhWGhsWkNnMEtTazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCV1pYSjBhV05oYkNCaGVHVnpJR0Z5WlNCdlpHUWdiblZ0WW1WeVpXUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJvZEhSd2N6b3ZMM2N6WXk1bmFYUm9kV0l1YVc4dloyRnRaWEJoWkM4amNtVnRZWEJ3YVc1bklFZGhiV1Z3WVdRZ1luSnZkM05sY2lCemFXUmxJSE4wWVc1a1lYSmtJRzFoY0hCcGJtY2dhR0Z6SUhCdmMybDBhWFpsSUdSdmQyNHNJRzVsWjJGMGFYWmxJSFZ3TGlCVWFHbHpJR2x6SUdSdmQyNXlhV2RvZENCa2FYTm5kWE4wYVc1bkxpQlRieUIzWlNCbWFYZ2dhWFF1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdlU0E5SUMxd1lYSnpaVVpzYjJGMEtHTjFjbkpsYm5SVGRHRjBaUzVoZUdWelcya2dLeUF4WFM1MGIwWnBlR1ZrS0RRcEtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUZWRkozTWdZVzVoYkc5bklHRjRaWE1nWm05c2JHOTNJSFJvWlNCellXMWxJRzl5WkdWeUlHRnpJSFJvWlNCaWNtOTNjMlZ5Y3l3Z1luVjBJSE4wWVhKMElHRjBJR2x1WkdWNElERWdjMjhnZDJVZ2QybHNiQ0J2Wm1aelpYUWdZWE1nYzNWamFGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnZVM1J5WldGdFpYSklZVzVrYkdWeWN5NW5aWFFvSjBkaGJXVndZV1JCYm1Gc2IyY25LU2hiWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJ5YjJ4c1pYSkpibVJsZUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhU0FySURFc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JkS1RzZ0x5OGdTRzl5YVhwdmJuUmhiQ0JoZUdWekxDQnZibXg1SUc5bVpuTmxkQ0JpZVNBeFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHOVRkSEpsWVcxbGNraGhibVJzWlhKekxtZGxkQ2duUjJGdFpYQmhaRUZ1WVd4dlp5Y3BLRnRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkSEp2Ykd4bGNrbHVaR1Y0TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBJQ3NnTWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjBwT3lBdkx5QldaWEowYVdOaGJDQmhlR1Z6TENCdlptWnpaWFFnWW5rZ2RIZHZJQ2d4SUhSdklHMWhkR05vSUZWRmN5QmhlR1Z6SUdOdmJuWmxiblJwYjI0Z1lXNWtJSFJvWlc0Z1lXNXZkR2hsY2lBeElHWnZjaUIwYUdVZ2RtVnlkR2xqWVd3Z1lYaGxjeWxjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZMjl1ZEhKdmJHeGxjbk5iWTI5dWRISnZiR3hsY2tsdVpHVjRYUzV3Y21WMlUzUmhkR1VnUFNCamRYSnlaVzUwVTNSaGRHVTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WTI5dWRISnZiR3hsY25NdWJHVnVaM1JvSUQ0Z01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV5WlhGMVpYTjBRVzVwYldGMGFXOXVSbkpoYldVb0tDa2dQVDRnZEdocGN5NTFjR1JoZEdWVGRHRjBkWE1vS1NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCdmJrZGhiV1Z3WVdSU1pYTndiMjV6WlZKbFkyVnBkbVZrS0dkaGJXVndZV1JKWkRvZ2JuVnRZbVZ5S1NCN1hHNGdJQ0FnSUNBZ0lHWnZjaWhqYjI1emRDQmpiMjUwY205c2JHVnlJRzltSUhSb2FYTXVZMjl1ZEhKdmJHeGxjbk1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtS0dOdmJuUnliMnhzWlhJdWFXUWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJ5YjJ4c1pYSXVhV1FnUFNCbllXMWxjR0ZrU1dRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJGZG1WdWRDQjBieUJ6Wlc1a0lIUm9aU0JuWVcxbGNHRmtZMjl1Ym1WamRHVmtJRzFsYzNOaFoyVWdkRzhnZEdobElHRndjR3hwWTJGMGFXOXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2IyNUhZVzFsY0dGa1EyOXVibVZqZEdWa0tDa2dlMXh1SUNBZ0lDQWdJQ0F2THlCRVpXWmhkV3gwSUVaMWJtTjBhVzl1WVd4cGRIazZJRVJ2SUU1dmRHaHBibWRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJGZG1WdWRDQjBieUJ6Wlc1a0lIUm9aU0JuWVcxbGNHRmtaR2x6WTI5dWJtVmpkR1ZrSUcxbGMzTmhaMlVnZEc4Z2RHaGxJR0Z3Y0d4cFkyRjBhVzl1WEc0Z0lDQWdJQ292WEc0Z0lDQWdMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRibVY0ZEMxc2FXNWxJRUIwZVhCbGMyTnlhWEIwTFdWemJHbHVkQzl1YnkxMWJuVnpaV1F0ZG1GeWMxeHVJQ0FnSUc5dVIyRnRaWEJoWkVScGMyTnZibTVsWTNSbFpDaGpiMjUwY205c2JHVnlTV1I0T2lCdWRXMWlaWElwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdSR1ZtWVhWc2RDQkdkVzVqZEdsdmJtRnNhWFI1T2lCRWJ5Qk9iM1JvYVc1blhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYjI1Q1pXWnZjbVZWYm14dllXUW9aWFk2SUVWMlpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUM4dklGZG9aVzRnWVNCMWMyVnlJRzVoZG1sbllYUmxjeUJoZDJGNUlHWnliMjBnZEdobElIQmhaMlVzSUhkbElHNWxaV1FnZEc4Z2FXNW1iM0p0SUZWRklHOW1JR0ZzYkNCMGFHVWdaR2x6WTI5dWJtVmpkR2x1WjF4dUlDQWdJQ0FnSUNBdkx5QmpiMjUwY205c2JHVnljMXh1SUNBZ0lDQWdJQ0JtYjNJb1kyOXVjM1FnWTI5dWRISnZiR3hsY2lCdlppQjBhR2x6TG1OdmJuUnliMnhzWlhKektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTl1UjJGdFpYQmhaRVJwYzJOdmJtNWxZM1JsWkNoamIyNTBjbTlzYkdWeUxtbGtLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYm4xY2JseHVYRzVjYmk4cUtseHVJQ29nUVdSa2FYUnBiMjVoYkNCMGVYQmxjeUJtYjNJZ1YybHVaRzkzSUdGdVpDQk9ZWFpwWjJGMGIzSmNiaUFxTDF4dVpHVmpiR0Z5WlNCbmJHOWlZV3dnZTF4dUlDQWdJR2x1ZEdWeVptRmpaU0JYYVc1a2IzY2dlMXh1SUNBZ0lDQWdJQ0J0YjNwU1pYRjFaWE4wUVc1cGJXRjBhVzl1Um5KaGJXVW9ZMkZzYkdKaFkyczZJRVp5WVcxbFVtVnhkV1Z6ZEVOaGJHeGlZV05yS1RvZ2JuVnRZbVZ5TzF4dUlDQWdJQ0FnSUNCM1pXSnJhWFJTWlhGMVpYTjBRVzVwYldGMGFXOXVSbkpoYldVb1kyRnNiR0poWTJzNklFWnlZVzFsVW1WeGRXVnpkRU5oYkd4aVlXTnJLVG9nYm5WdFltVnlPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbHVkR1Z5Wm1GalpTQk9ZWFpwWjJGMGIzSWdlMXh1SUNBZ0lDQWdJQ0IzWldKcmFYUkhaWFJIWVcxbGNHRmtjeWdwT2lCSFlXMWxjR0ZrVzEwN1hHNGdJQ0FnZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRWRoYldWd1lXUWdiR0Y1YjNWMElHTnZaR1Z6SUdWdWRXMWNiaUFxTDF4dVpYaHdiM0owSUdWdWRXMGdaMkZ0WlhCaFpFeGhlVzkxZENCN1hHNGdJQ0FnVW1sbmFIUkRiSFZ6ZEdWeVFtOTBkRzl0UW5WMGRHOXVJRDBnTUN4Y2JpQWdJQ0JTYVdkb2RFTnNkWE4wWlhKU2FXZG9kRUoxZEhSdmJpQTlJREVzWEc0Z0lDQWdVbWxuYUhSRGJIVnpkR1Z5VEdWbWRFSjFkSFJ2YmlBOUlESXNYRzRnSUNBZ1VtbG5hSFJEYkhWemRHVnlWRzl3UW5WMGRHOXVJRDBnTXl4Y2JpQWdJQ0JNWldaMFUyaHZkV3hrWlhJZ1BTQTBMRnh1SUNBZ0lGSnBaMmgwVTJodmRXeGtaWElnUFNBMUxGeHVJQ0FnSUV4bFpuUlVjbWxuWjJWeUlEMGdOaXhjYmlBZ0lDQlNhV2RvZEZSeWFXZG5aWElnUFNBM0xGeHVJQ0FnSUZObGJHVmpkRTl5UW1GamF5QTlJRGdzWEc0Z0lDQWdVM1JoY25SUGNrWnZjbmRoY21RZ1BTQTVMRnh1SUNBZ0lFeGxablJCYm1Gc2IyZFFjbVZ6Y3lBOUlERXdMRnh1SUNBZ0lGSnBaMmgwUVc1aGJHOW5VSEpsYzNNZ1BTQXhNU3hjYmlBZ0lDQk1aV1owUTJ4MWMzUmxjbFJ2Y0VKMWRIUnZiaUE5SURFeUxGeHVJQ0FnSUV4bFpuUkRiSFZ6ZEdWeVFtOTBkRzl0UW5WMGRHOXVJRDBnTVRNc1hHNGdJQ0FnVEdWbWRFTnNkWE4wWlhKTVpXWjBRblYwZEc5dUlEMGdNVFFzWEc0Z0lDQWdUR1ZtZEVOc2RYTjBaWEpTYVdkb2RFSjFkSFJ2YmlBOUlERTFMRnh1SUNBZ0lFTmxiblJ5WlVKMWRIUnZiaUE5SURFMkxGeHVJQ0FnSUM4dklFRjRaWE5jYmlBZ0lDQk1aV1owVTNScFkydEliM0pwZW05dWRHRnNJRDBnTUN4Y2JpQWdJQ0JNWldaMFUzUnBZMnRXWlhKMGFXTmhiQ0E5SURFc1hHNGdJQ0FnVW1sbmFIUlRkR2xqYTBodmNtbDZiMjUwWVd3Z1BTQXlMRnh1SUNBZ0lGSnBaMmgwVTNScFkydFdaWEowYVdOaGJDQTlJRE5jYm4xY2JpSXNJaTh2SUVOdmNIbHlhV2RvZENCRmNHbGpJRWRoYldWekxDQkpibU11SUVGc2JDQlNhV2RvZEhNZ1VtVnpaWEoyWldRdVhHNWNibWx0Y0c5eWRDQjdJRTF2ZFhObFEyOXVkSEp2Ykd4bGNpQjlJR1p5YjIwZ0p5NHZUVzkxYzJWRGIyNTBjbTlzYkdWeUp6dGNibWx0Y0c5eWRDQjdJRXh2WjJkbGNpQjlJR1p5YjIwZ0p5NHVMMHh2WjJkbGNpOU1iMmRuWlhJbk8xeHVhVzF3YjNKMElIc2dTVTF2ZFhObFJYWmxiblJ6SUgwZ1puSnZiU0FuTGk5SlRXOTFjMlZGZG1WdWRITW5PMXh1WEc0dktpcGNiaUFxSUZacFpHVnZJRkJzWVhsbGNpQnRiM1Z6WlNCSWIzWmxjaUJvWVc1a2JHVnlYRzRnS2k5Y2JtVjRjRzl5ZENCamJHRnpjeUJJYjNabGNtbHVaMDF2ZFhObFJYWmxiblJ6SUdsdGNHeGxiV1Z1ZEhNZ1NVMXZkWE5sUlhabGJuUnpJSHRjYmlBZ0lDQnRiM1Z6WlVOdmJuUnliMnhzWlhJNklFMXZkWE5sUTI5dWRISnZiR3hsY2p0Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndZWEpoYlNCdGIzVnpaVU52Ym5SeWIyeHNaWElnTFNCTmIzVnpaU0JEYjI1MGNtOXNiR1Z5SUdsdWMzUmhibU5sWEc0Z0lDQWdJQ292WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvYlc5MWMyVkRiMjUwY205c2JHVnlPaUJOYjNWelpVTnZiblJ5YjJ4c1pYSXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXRiM1Z6WlVOdmJuUnliMnhzWlhJZ1BTQnRiM1Z6WlVOdmJuUnliMnhzWlhJN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1ZXNXlaV2RwYzNSbGNpQmxkbVZ1ZENCb1lXNWtiR1Z5YzF4dUlDQWdJQ0FxTDF4dUlDQWdJSFZ1Y21WbmFYTjBaWEpOYjNWelpVVjJaVzUwY3lncE9pQjJiMmxrSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdaVzF3ZEhrZ1ptOXlJRWh2ZG1WeWFXNW5UVzkxYzJWRmRtVnVkSE1nYVcxd2JHVnRaVzUwWVhScGIyNWNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQklZVzVrYkdVZ2RHaGxJRzF2ZFhObElHMXZkbVVnWlhabGJuUXNJSE5sYm1SeklIUm9aU0J0YjNWelpTQmtZWFJoSUhSdklIUm9aU0JWUlNCSmJuTjBZVzVqWlZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0J0YjNWelpVVjJaVzUwSUMwZ1RXOTFjMlVnUlhabGJuUmNiaUFnSUNBZ0tpOWNiaUFnSUNCMWNHUmhkR1ZOYjNWelpVMXZkbVZRYjNOcGRHbHZiaWh0YjNWelpVVjJaVzUwT2lCTmIzVnpaVVYyWlc1MEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaGRHaHBjeTV0YjNWelpVTnZiblJ5YjJ4c1pYSXVkbWxrWlc5RmJHVnRaVzUwVUhKdmRtbGtaWEl1YVhOV2FXUmxiMUpsWVdSNUtDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc0lDZE5iM1Z6WlUxdmRtVW5MQ0EyS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWTI5dmNtUWdQVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV0YjNWelpVTnZiblJ5YjJ4c1pYSXVZMjl2Y21ScGJtRjBaVU52Ym5abGNuUmxjaTV1YjNKdFlXeHBlbVZCYm1SUmRXRnVkR2w2WlZWdWMybG5ibVZrS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxdmRYTmxSWFpsYm5RdWIyWm1jMlYwV0N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdGIzVnpaVVYyWlc1MExtOW1abk5sZEZsY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR1JsYkhSaElEMWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViVzkxYzJWRGIyNTBjbTlzYkdWeUxtTnZiM0prYVc1aGRHVkRiMjUyWlhKMFpYSXVibTl5YldGc2FYcGxRVzVrVVhWaGJuUnBlbVZUYVdkdVpXUW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiVzkxYzJWRmRtVnVkQzV0YjNabGJXVnVkRmdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYlc5MWMyVkZkbVZ1ZEM1dGIzWmxiV1Z1ZEZsY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFJ2VTNSeVpXRnRaWEpJWVc1a2JHVnljeUE5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG0xdmRYTmxRMjl1ZEhKdmJHeGxjaTUwYjFOMGNtVmhiV1Z5VFdWemMyRm5aWE5RY205MmFXUmxjaTUwYjFOMGNtVmhiV1Z5U0dGdVpHeGxjbk03WEc0Z0lDQWdJQ0FnSUhSdlUzUnlaV0Z0WlhKSVlXNWtiR1Z5Y3k1blpYUW9KMDF2ZFhObFRXOTJaU2NwS0Z0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052YjNKa0xuZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyOXlaQzU1TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdaR1ZzZEdFdWVDeGNiaUFnSUNBZ0lDQWdJQ0FnSUdSbGJIUmhMbmxjYmlBZ0lDQWdJQ0FnWFNrN1hHNGdJQ0FnSUNBZ0lHMXZkWE5sUlhabGJuUXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQklZVzVrYkdVZ2RHaGxJRzF2ZFhObElFUnZkMjRnWlhabGJuUXNJSE5sYm1SeklIUm9aU0J0YjNWelpTQmtZWFJoSUhSdklIUm9aU0JWUlNCSmJuTjBZVzVqWlZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0J0YjNWelpVVjJaVzUwSUMwZ1RXOTFjMlVnUlhabGJuUmNiaUFnSUNBZ0tpOWNiaUFnSUNCb1lXNWtiR1ZOYjNWelpVUnZkMjRvYlc5MWMyVkZkbVZ1ZERvZ1RXOTFjMlZGZG1WdWRDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11Ylc5MWMyVkRiMjUwY205c2JHVnlMblpwWkdWdlJXeGxiV1Z1ZEZCeWIzWnBaR1Z5TG1selZtbGtaVzlTWldGa2VTZ3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExDQW5iMjVOYjNWelpTQkViM2R1Snl3Z05pazdYRzRnSUNBZ0lDQWdJR052Ym5OMElHTnZiM0prSUQxY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJXOTFjMlZEYjI1MGNtOXNiR1Z5TG1OdmIzSmthVzVoZEdWRGIyNTJaWEowWlhJdWJtOXliV0ZzYVhwbFFXNWtVWFZoYm5ScGVtVlZibk5wWjI1bFpDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRiM1Z6WlVWMlpXNTBMbTltWm5ObGRGZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiVzkxYzJWRmRtVnVkQzV2Wm1aelpYUlpYRzRnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCMGIxTjBjbVZoYldWeVNHRnVaR3hsY25NZ1BWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXRiM1Z6WlVOdmJuUnliMnhzWlhJdWRHOVRkSEpsWVcxbGNrMWxjM05oWjJWelVISnZkbWxrWlhJdWRHOVRkSEpsWVcxbGNraGhibVJzWlhKek8xeHVJQ0FnSUNBZ0lDQjBiMU4wY21WaGJXVnlTR0Z1Wkd4bGNuTXVaMlYwS0NkTmIzVnpaVVJ2ZDI0bktTaGJYRzRnSUNBZ0lDQWdJQ0FnSUNCdGIzVnpaVVYyWlc1MExtSjFkSFJ2Yml4Y2JpQWdJQ0FnSUNBZ0lDQWdJR052YjNKa0xuZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyOXlaQzU1WEc0Z0lDQWdJQ0FnSUYwcE8xeHVJQ0FnSUNBZ0lDQnRiM1Z6WlVWMlpXNTBMbkJ5WlhabGJuUkVaV1poZFd4MEtDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dTR0Z1Wkd4bElIUm9aU0J0YjNWelpTQlZjQ0JsZG1WdWRDd2djMlZ1WkhNZ2RHaGxJRzF2ZFhObElHUmhkR0VnZEc4Z2RHaGxJRlZGSUVsdWMzUmhibU5sWEc0Z0lDQWdJQ29nUUhCaGNtRnRJRzF2ZFhObFJYWmxiblFnTFNCTmIzVnpaU0JGZG1WdWRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUdoaGJtUnNaVTF2ZFhObFZYQW9iVzkxYzJWRmRtVnVkRG9nVFc5MWMyVkZkbVZ1ZENrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXViVzkxYzJWRGIyNTBjbTlzYkdWeUxuWnBaR1Z2Uld4bGJXVnVkRkJ5YjNacFpHVnlMbWx6Vm1sa1pXOVNaV0ZrZVNncEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1RHOW5aMlZ5TGt4dlp5aE1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTENBbmIyNU5iM1Z6WlNCVmNDY3NJRFlwTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JqYjI5eVpDQTlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTF2ZFhObFEyOXVkSEp2Ykd4bGNpNWpiMjl5WkdsdVlYUmxRMjl1ZG1WeWRHVnlMbTV2Y20xaGJHbDZaVUZ1WkZGMVlXNTBhWHBsVlc1emFXZHVaV1FvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYlc5MWMyVkZkbVZ1ZEM1dlptWnpaWFJZTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxdmRYTmxSWFpsYm5RdWIyWm1jMlYwV1Z4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkRzlUZEhKbFlXMWxja2hoYm1Sc1pYSnpJRDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Ylc5MWMyVkRiMjUwY205c2JHVnlMblJ2VTNSeVpXRnRaWEpOWlhOellXZGxjMUJ5YjNacFpHVnlMblJ2VTNSeVpXRnRaWEpJWVc1a2JHVnljenRjYmlBZ0lDQWdJQ0FnZEc5VGRISmxZVzFsY2toaGJtUnNaWEp6TG1kbGRDZ25UVzkxYzJWVmNDY3BLRnRjYmlBZ0lDQWdJQ0FnSUNBZ0lHMXZkWE5sUlhabGJuUXVZblYwZEc5dUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dmNtUXVlQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZiM0prTG5sY2JpQWdJQ0FnSUNBZ1hTazdYRzRnSUNBZ0lDQWdJRzF2ZFhObFJYWmxiblF1Y0hKbGRtVnVkRVJsWm1GMWJIUW9LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJEYjI1emRXMWxjeUIwYUdVZ2JXOTFjMlVnWTI5dWRHVjRkQ0JsZG1WdWRDNGdWR2hsSUZWRklHbHVjM1JoYm1ObElHaGhjeUJ1YnlCbGNYVnBkbUZzWlc1MElHRnVaQ0JrYjJWemJpZDBJRzVsWldRZ2RHOGdZbVVnYVc1bWIzSnRaV1F1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJRzF2ZFhObFJYWmxiblFnTFNCTmIzVnpaU0JGZG1WdWRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUdoaGJtUnNaVU52Ym5SbGVIUk5aVzUxS0cxdmRYTmxSWFpsYm5RNklFMXZkWE5sUlhabGJuUXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TG0xdmRYTmxRMjl1ZEhKdmJHeGxjaTUyYVdSbGIwVnNaVzFsYm5SUWNtOTJhV1JsY2k1cGMxWnBaR1Z2VW1WaFpIa29LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJRzF2ZFhObFJYWmxiblF1Y0hKbGRtVnVkRVJsWm1GMWJIUW9LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJJWVc1a2JHVWdkR2hsSUcxdmRYTmxJSGRvWldWc0lHVjJaVzUwTENCelpXNWtjeUIwYUdVZ2JXOTFjMlVnZDJobFpXd2daR0YwWVNCMGJ5QjBhR1VnVlVVZ1NXNXpkR0Z1WTJWY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZDJobFpXeEZkbVZ1ZENBdElFMXZkWE5sSUVWMlpXNTBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2FHRnVaR3hsVFc5MWMyVlhhR1ZsYkNoM2FHVmxiRVYyWlc1ME9pQlhhR1ZsYkVWMlpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1dGIzVnpaVU52Ym5SeWIyeHNaWEl1ZG1sa1pXOUZiR1Z0Wlc1MFVISnZkbWxrWlhJdWFYTldhV1JsYjFKbFlXUjVLQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JqYjI1emRDQmpiMjl5WkNBOVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtMXZkWE5sUTI5dWRISnZiR3hsY2k1amIyOXlaR2x1WVhSbFEyOXVkbVZ5ZEdWeUxtNXZjbTFoYkdsNlpVRnVaRkYxWVc1MGFYcGxWVzV6YVdkdVpXUW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkMmhsWld4RmRtVnVkQzV2Wm1aelpYUllMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGRvWldWc1JYWmxiblF1YjJabWMyVjBXVnh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2RHOVRkSEpsWVcxbGNraGhibVJzWlhKeklEMWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViVzkxYzJWRGIyNTBjbTlzYkdWeUxuUnZVM1J5WldGdFpYSk5aWE56WVdkbGMxQnliM1pwWkdWeUxuUnZVM1J5WldGdFpYSklZVzVrYkdWeWN6dGNiaUFnSUNBZ0lDQWdkRzlUZEhKbFlXMWxja2hoYm1Sc1pYSnpMbWRsZENnblRXOTFjMlZYYUdWbGJDY3BLRnRjYmlBZ0lDQWdJQ0FnSUNBZ0lIZG9aV1ZzUlhabGJuUXVkMmhsWld4RVpXeDBZU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZiM0prTG5nc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI5eVpDNTVYRzRnSUNBZ0lDQWdJRjBwTzF4dUlDQWdJQ0FnSUNCM2FHVmxiRVYyWlc1MExuQnlaWFpsYm5SRVpXWmhkV3gwS0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1NHRnVaR3hsSUhSb1pTQnRiM1Z6WlNCa2IzVmliR1VnWTJ4cFkyc2daWFpsYm5Rc0lITmxibVJ6SUhSb1pTQnRiM1Z6WlNCa1lYUmhJSFJ2SUhSb1pTQlZSU0JKYm5OMFlXNWpaVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnRiM1Z6WlVWMlpXNTBJQzBnVFc5MWMyVWdSWFpsYm5SY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JvWVc1a2JHVk5iM1Z6WlVSdmRXSnNaU2h0YjNWelpVVjJaVzUwT2lCTmIzVnpaVVYyWlc1MEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaGRHaHBjeTV0YjNWelpVTnZiblJ5YjJ4c1pYSXVkbWxrWlc5RmJHVnRaVzUwVUhKdmRtbGtaWEl1YVhOV2FXUmxiMUpsWVdSNUtDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCamIyOXlaQ0E5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG0xdmRYTmxRMjl1ZEhKdmJHeGxjaTVqYjI5eVpHbHVZWFJsUTI5dWRtVnlkR1Z5TG01dmNtMWhiR2w2WlVGdVpGRjFZVzUwYVhwbFZXNXphV2R1WldRb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXOTFjMlZGZG1WdWRDNXZabVp6WlhSWUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMXZkWE5sUlhabGJuUXViMlptYzJWMFdWeHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZEc5VGRISmxZVzFsY2toaGJtUnNaWEp6SUQxY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJXOTFjMlZEYjI1MGNtOXNiR1Z5TG5SdlUzUnlaV0Z0WlhKTlpYTnpZV2RsYzFCeWIzWnBaR1Z5TG5SdlUzUnlaV0Z0WlhKSVlXNWtiR1Z5Y3p0Y2JpQWdJQ0FnSUNBZ2RHOVRkSEpsWVcxbGNraGhibVJzWlhKekxtZGxkQ2duVFc5MWMyVkViM1ZpYkdVbktTaGJYRzRnSUNBZ0lDQWdJQ0FnSUNCdGIzVnpaVVYyWlc1MExtSjFkSFJ2Yml4Y2JpQWdJQ0FnSUNBZ0lDQWdJR052YjNKa0xuZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyOXlaQzU1WEc0Z0lDQWdJQ0FnSUYwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFaGhibVJzWlNCMGFHVWdjSEpsYzNNZ2JXOTFjMlVnWW5WMGRHOXVjeUJsZG1WdWRDd2djMlZ1WkhNZ2RHaGxJRzF2ZFhObElHUmhkR0VnZEc4Z2RHaGxJRlZGSUVsdWMzUmhibU5sWEc0Z0lDQWdJQ29nUUhCaGNtRnRJRzF2ZFhObFJYWmxiblFnTFNCTmIzVnpaU0JGZG1WdWRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUdoaGJtUnNaVkJ5WlhOelRXOTFjMlZDZFhSMGIyNXpLRzF2ZFhObFJYWmxiblE2SUUxdmRYTmxSWFpsYm5RcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbTF2ZFhObFEyOXVkSEp2Ykd4bGNpNTJhV1JsYjBWc1pXMWxiblJRY205MmFXUmxjaTVwYzFacFpHVnZVbVZoWkhrb0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lFeHZaMmRsY2k1TWIyY29URzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N3Z0oyOXVUVzkxYzJVZ2NISmxjM01uTENBMktUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dGIzVnpaVU52Ym5SeWIyeHNaWEl1Y0hKbGMzTk5iM1Z6WlVKMWRIUnZibk1vWEc0Z0lDQWdJQ0FnSUNBZ0lDQnRiM1Z6WlVWMlpXNTBMbUoxZEhSdmJuTXNYRzRnSUNBZ0lDQWdJQ0FnSUNCdGIzVnpaVVYyWlc1MExtOW1abk5sZEZnc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0YjNWelpVVjJaVzUwTG05bVpuTmxkRmxjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSVlXNWtiR1VnZEdobElISmxiR1ZoYzJVZ2JXOTFjMlVnWW5WMGRHOXVjeUJsZG1WdWRDd2djMlZ1WkhNZ2RHaGxJRzF2ZFhObElHUmhkR0VnZEc4Z2RHaGxJRlZGSUVsdWMzUmhibU5sWEc0Z0lDQWdJQ29nUUhCaGNtRnRJRzF2ZFhObFJYWmxiblFnTFNCTmIzVnpaU0JGZG1WdWRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUdoaGJtUnNaVkpsYkdWaGMyVk5iM1Z6WlVKMWRIUnZibk1vYlc5MWMyVkZkbVZ1ZERvZ1RXOTFjMlZGZG1WdWRDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11Ylc5MWMyVkRiMjUwY205c2JHVnlMblpwWkdWdlJXeGxiV1Z1ZEZCeWIzWnBaR1Z5TG1selZtbGtaVzlTWldGa2VTZ3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExDQW5iMjVOYjNWelpTQnlaV3hsWVhObEp5d2dOaWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViVzkxYzJWRGIyNTBjbTlzYkdWeUxuSmxiR1ZoYzJWTmIzVnpaVUoxZEhSdmJuTW9YRzRnSUNBZ0lDQWdJQ0FnSUNCdGIzVnpaVVYyWlc1MExtSjFkSFJ2Ym5Nc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0YjNWelpVVjJaVzUwTG05bVpuTmxkRmdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnRiM1Z6WlVWMlpXNTBMbTltWm5ObGRGbGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzU5WEc0aUxDSXZMeUJEYjNCNWNtbG5hSFFnUlhCcFl5QkhZVzFsY3l3Z1NXNWpMaUJCYkd3Z1VtbG5hSFJ6SUZKbGMyVnlkbVZrTGx4dVhHNXBiWEJ2Y25RZ2V5QkdZV3RsVkc5MVkyaERiMjUwY205c2JHVnlJSDBnWm5KdmJTQW5MaTlHWVd0bFZHOTFZMmhEYjI1MGNtOXNiR1Z5Snp0Y2JtbHRjRzl5ZENCN0lFdGxlV0p2WVhKa1EyOXVkSEp2Ykd4bGNpQjlJR1p5YjIwZ0p5NHZTMlY1WW05aGNtUkRiMjUwY205c2JHVnlKenRjYm1sdGNHOXlkQ0I3SUUxdmRYTmxRMjl1ZEhKdmJHeGxjaUI5SUdaeWIyMGdKeTR2VFc5MWMyVkRiMjUwY205c2JHVnlKenRjYm1sdGNHOXlkQ0I3SUZSdmRXTm9RMjl1ZEhKdmJHeGxjaUI5SUdaeWIyMGdKeTR2Vkc5MVkyaERiMjUwY205c2JHVnlKenRjYm1sdGNHOXlkQ0I3SUVkaGJXVlFZV1JEYjI1MGNtOXNiR1Z5SUgwZ1puSnZiU0FuTGk5SFlXMWxjR0ZrUTI5dWRISnZiR3hsY2ljN1hHNXBiWEJ2Y25RZ2V5QkRiMjVtYVdjc0lFTnZiblJ5YjJ4VFkyaGxiV1ZVZVhCbElIMGdabkp2YlNBbkxpNHZRMjl1Wm1sbkwwTnZibVpwWnljN1hHNXBiWEJ2Y25RZ2V5Qk1iMmRuWlhJZ2ZTQm1jbTl0SUNjdUxpOU1iMmRuWlhJdlRHOW5aMlZ5Snp0Y2JtbHRjRzl5ZENCN0lFTnZiM0prYVc1aGRHVkRiMjUyWlhKMFpYSWdmU0JtY205dElDY3VMaTlWZEdsc0wwTnZiM0prYVc1aGRHVkRiMjUyWlhKMFpYSW5PMXh1YVcxd2IzSjBJSHNnVTNSeVpXRnRUV1Z6YzJGblpVTnZiblJ5YjJ4c1pYSWdmU0JtY205dElDY3VMaTlWWlVsdWMzUmhibU5sVFdWemMyRm5aUzlUZEhKbFlXMU5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpYzdYRzVwYlhCdmNuUWdleUJXYVdSbGIxQnNZWGxsY2lCOUlHWnliMjBnSnk0dUwxWnBaR1Z2VUd4aGVXVnlMMVpwWkdWdlVHeGhlV1Z5Snp0Y2JseHVMeW9xWEc0Z0tpQkRiR0Z6Y3lCbWIzSWdiV0ZyYVc1bklHRnVaQ0J6WlhSMGFXNW5JSFZ3SUdsdWNIVjBJR05zWVhOeklIUjVjR1Z6WEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCSmJuQjFkRU5zWVhOelpYTkdZV04wYjNKNUlIdGNiaUFnSUNCMGIxTjBjbVZoYldWeVRXVnpjMkZuWlhOUWNtOTJhV1JsY2pvZ1UzUnlaV0Z0VFdWemMyRm5aVU52Ym5SeWIyeHNaWEk3WEc0Z0lDQWdkbWxrWlc5RmJHVnRaVzUwVUhKdmRtbGtaWEk2SUZacFpHVnZVR3hoZVdWeU8xeHVJQ0FnSUdOdmIzSmthVzVoZEdWRGIyNTJaWEowWlhJNklFTnZiM0prYVc1aGRHVkRiMjUyWlhKMFpYSTdYRzRnSUNBZ1lXTjBhWFpsUzJWNWN6b2dRV04wYVhabFMyVjVjeUE5SUc1bGR5QkJZM1JwZG1WTFpYbHpLQ2s3WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZEc5VGRISmxZVzFsY2sxbGMzTmhaMlZ6VUhKdmRtbGtaWElnTFNCVGRISmxZVzBnYldWemMyRm5aU0JwYm5OMFlXNWpaVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjJhV1JsYjBWc1pXMWxiblJRY205MmFXUmxjaUF0SUZacFpHVnZJRkJzWVhsbGNpQnBibk4wWVc1alpWeHVJQ0FnSUNBcUlFQndZWEpoYlNCamIyOXlaR2x1WVhSbFEyOXVkbVZ5ZEdWeUlDMGdRU0JqYjI5eVpHbHVZWFJsUTI5dWRtVnlkR1Z5SUdsdWMzUmhibU5sWEc0Z0lDQWdJQ292WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvWEc0Z0lDQWdJQ0FnSUhSdlUzUnlaV0Z0WlhKTlpYTnpZV2RsYzFCeWIzWnBaR1Z5T2lCVGRISmxZVzFOWlhOellXZGxRMjl1ZEhKdmJHeGxjaXhjYmlBZ0lDQWdJQ0FnZG1sa1pXOUZiR1Z0Wlc1MFVISnZkbWxrWlhJNklGWnBaR1Z2VUd4aGVXVnlMRnh1SUNBZ0lDQWdJQ0JqYjI5eVpHbHVZWFJsUTI5dWRtVnlkR1Z5T2lCRGIyOXlaR2x1WVhSbFEyOXVkbVZ5ZEdWeVhHNGdJQ0FnS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZEc5VGRISmxZVzFsY2sxbGMzTmhaMlZ6VUhKdmRtbGtaWElnUFNCMGIxTjBjbVZoYldWeVRXVnpjMkZuWlhOUWNtOTJhV1JsY2p0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUyYVdSbGIwVnNaVzFsYm5SUWNtOTJhV1JsY2lBOUlIWnBaR1Z2Uld4bGJXVnVkRkJ5YjNacFpHVnlPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTnZiM0prYVc1aGRHVkRiMjUyWlhKMFpYSWdQU0JqYjI5eVpHbHVZWFJsUTI5dWRtVnlkR1Z5TzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZKbFoybHpkR1Z5Y3lCaWNtOTNjMlZ5SUd0bGVTQmxkbVZ1ZEhNdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY21WbmFYTjBaWEpMWlhsQ2IyRnlaQ2hqYjI1bWFXYzZJRU52Ym1acFp5a2dlMXh1SUNBZ0lDQWdJQ0JNYjJkblpYSXVURzluS0V4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NJQ2RTWldkcGMzUmxjaUJMWlhsaWIyRnlaQ0JGZG1WdWRITW5MQ0EzS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYTJWNVltOWhjbVJEYjI1MGNtOXNiR1Z5SUQwZ2JtVjNJRXRsZVdKdllYSmtRMjl1ZEhKdmJHeGxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZEc5VGRISmxZVzFsY2sxbGMzTmhaMlZ6VUhKdmRtbGtaWElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjVtYVdjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtRmpkR2wyWlV0bGVYTmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnYTJWNVltOWhjbVJEYjI1MGNtOXNiR1Z5TG5KbFoybHpkR1Z5UzJWNVFtOWhjbVJGZG1WdWRITW9LVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR3RsZVdKdllYSmtRMjl1ZEhKdmJHeGxjanRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJ5WldkcGMzUmxjaUJ0YjNWelpTQmxkbVZ1ZEhNZ1ltRnpaV1FnYjI0Z1lTQmpiMjUwY205c0lIUjVjR1ZjYmlBZ0lDQWdLaUJBY0dGeVlXMGdZMjl1ZEhKdmJGTmphR1Z0WlNBdElHbG1JSFJvWlNCdGIzVnpaU0JwY3lCbGFYUm9aWElnYUc5MlpYSnBibWNnYjNJZ2JHOWphMlZrWEc0Z0lDQWdJQ292WEc0Z0lDQWdjbVZuYVhOMFpYSk5iM1Z6WlNoamIyNTBjbTlzVTJOb1pXMWxPaUJEYjI1MGNtOXNVMk5vWlcxbFZIbHdaU2tnZTF4dUlDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzSUNkU1pXZHBjM1JsY2lCTmIzVnpaU0JGZG1WdWRITW5MQ0EzS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYlc5MWMyVkRiMjUwY205c2JHVnlJRDBnYm1WM0lFMXZkWE5sUTI5dWRISnZiR3hsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRHOVRkSEpsWVcxbGNrMWxjM05oWjJWelVISnZkbWxrWlhJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuWnBaR1Z2Uld4bGJXVnVkRkJ5YjNacFpHVnlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqYjI5eVpHbHVZWFJsUTI5dWRtVnlkR1Z5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1aFkzUnBkbVZMWlhselhHNGdJQ0FnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJQ0FnYzNkcGRHTm9JQ2hqYjI1MGNtOXNVMk5vWlcxbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRU52Ym5SeWIyeFRZMmhsYldWVWVYQmxMa3h2WTJ0bFpFMXZkWE5sT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxdmRYTmxRMjl1ZEhKdmJHeGxjaTV5WldkcGMzUmxja3h2WTJ0bFpFMXZkWE5sUlhabGJuUnpLRzF2ZFhObFEyOXVkSEp2Ykd4bGNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElFTnZiblJ5YjJ4VFkyaGxiV1ZVZVhCbExraHZkbVZ5YVc1blRXOTFjMlU2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYlc5MWMyVkRiMjUwY205c2JHVnlMbkpsWjJsemRHVnlTRzkyWlhKcGJtZE5iM1Z6WlVWMlpXNTBjeWh0YjNWelpVTnZiblJ5YjJ4c1pYSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdWbVlYVnNkRHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVTVzVtYnloY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKM1Z1YTI1dmQyNGdRMjl1ZEhKdmJDQlRZMmhsYldVZ1ZIbHdaU0JFWldaaGRXeDBhVzVuSUhSdklFeHZZMnRsWkNCTmIzVnpaU0JGZG1WdWRITW5YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0YjNWelpVTnZiblJ5YjJ4c1pYSXVjbVZuYVhOMFpYSk1iMk5yWldSTmIzVnpaVVYyWlc1MGN5aHRiM1Z6WlVOdmJuUnliMnhzWlhJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHMXZkWE5sUTI5dWRISnZiR3hsY2p0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCeVpXZHBjM1JsY2lCMGIzVmphQ0JsZG1WdWRITmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1ptRnJaVTF2ZFhObFZHOTFZMmdnTFNCMGFHVWdabUZyWldRZ2JXOTFjMlVnZEc5MVkyZ2daWFpsYm5SY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J5WldkcGMzUmxjbFJ2ZFdOb0tGeHVJQ0FnSUNBZ0lDQm1ZV3RsVFc5MWMyVlViM1ZqYURvZ1ltOXZiR1ZoYml4Y2JpQWdJQ0FnSUNBZ2RtbGtaVzlGYkdWdFpXNTBVR0Z5Wlc1MFEyeHBaVzUwVW1WamREb2dSRTlOVW1WamRGeHVJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc0lDZFNaV2RwYzNSbGNtbHVaeUJVYjNWamFDY3NJRFlwTzF4dUlDQWdJQ0FnSUNCcFppQW9abUZyWlUxdmRYTmxWRzkxWTJncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR1poYTJWVWIzVmphRU52Ym5SeWIyeHNaWElnUFNCdVpYY2dSbUZyWlZSdmRXTm9RMjl1ZEhKdmJHeGxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuUnZVM1J5WldGdFpYSk5aWE56WVdkbGMxQnliM1pwWkdWeUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZG1sa1pXOUZiR1Z0Wlc1MFVISnZkbWxrWlhJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqYjI5eVpHbHVZWFJsUTI5dWRtVnlkR1Z5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1ptRnJaVlJ2ZFdOb1EyOXVkSEp2Ykd4bGNpNXpaWFJXYVdSbGIwVnNaVzFsYm5SUVlYSmxiblJEYkdsbGJuUlNaV04wS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhacFpHVnZSV3hsYldWdWRGQmhjbVZ1ZEVOc2FXVnVkRkpsWTNSY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnJaVlJ2ZFdOb1EyOXVkSEp2Ykd4bGNqdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1ZHOTFZMmhEYjI1MGNtOXNiR1Z5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkRzlUZEhKbFlXMWxjazFsYzNOaFoyVnpVSEp2ZG1sa1pYSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MmFXUmxiMFZzWlcxbGJuUlFjbTkyYVdSbGNpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OdmIzSmthVzVoZEdWRGIyNTJaWEowWlhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCeVpXZHBjM1JsY25NZ1lTQm5ZVzFsY0dGa1hHNGdJQ0FnSUNvdlhHNGdJQ0FnY21WbmFYTjBaWEpIWVcxbFVHRmtLQ2tnZTF4dUlDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzSUNkU1pXZHBjM1JsY2lCSFlXMWxJRkJoWkNjc0lEY3BPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQm5ZVzFsVUdGa1EyOXVkSEp2Ykd4bGNpQTlJRzVsZHlCSFlXMWxVR0ZrUTI5dWRISnZiR3hsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRHOVRkSEpsWVcxbGNrMWxjM05oWjJWelVISnZkbWxrWlhKY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHZGhiV1ZRWVdSRGIyNTBjbTlzYkdWeU8xeHVJQ0FnSUgxY2JuMWNibHh1THlvcVhHNGdLaUJCSUdOc1lYTnpJSFJvWVhRZ2EyVmxjSE1nZEhKaFkyc2diMllnWTNWeWNtVnVkQ0JoWTNScGRtVWdhMlY1YzF4dUlDb3ZYRzVsZUhCdmNuUWdZMnhoYzNNZ1FXTjBhWFpsUzJWNWN5QjdYRzRnSUNBZ1lXTjBhWFpsUzJWNWN6b2dRWEp5WVhrOGJuVnRZbVZ5UGlBOUlGdGRPMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbUZqZEdsMlpVdGxlWE1nUFNCYlhUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkhaWFFnZEdobElHTjFjbkpsYm5RZ1lYSnlZWGtnYjJZZ1lXTjBhWFpsSUd0bGVYTmNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QXRJR0Z1SUdGeWNtRjVJRzltSUdGamRHbDJaU0JyWlhselhHNGdJQ0FnSUNvdlhHNGdJQ0FnWjJWMFFXTjBhWFpsUzJWNWN5Z3BPaUJ1ZFcxaVpYSmJYU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtRmpkR2wyWlV0bGVYTTdYRzRnSUNBZ2ZWeHVmVnh1SWl3aUx5OGdRMjl3ZVhKcFoyaDBJRVZ3YVdNZ1IyRnRaWE1zSUVsdVl5NGdRV3hzSUZKcFoyaDBjeUJTWlhObGNuWmxaQzVjYmx4dWFXMXdiM0owSUhzZ1UzQmxZMmxoYkV0bGVVTnZaR1Z6SUgwZ1puSnZiU0FuTGk5VGNHVmphV0ZzUzJWNVEyOWtaWE1uTzF4dWFXMXdiM0owSUhzZ1RHOW5aMlZ5SUgwZ1puSnZiU0FuTGk0dlRHOW5aMlZ5TDB4dloyZGxjaWM3WEc1cGJYQnZjblFnZXlCQlkzUnBkbVZMWlhseklIMGdabkp2YlNBbkxpOUpibkIxZEVOc1lYTnpaWE5HWVdOMGIzSjVKenRjYm1sdGNHOXlkQ0I3SUZOMGNtVmhiVTFsYzNOaFoyVkRiMjUwY205c2JHVnlJSDBnWm5KdmJTQW5MaTR2VldWSmJuTjBZVzVqWlUxbGMzTmhaMlV2VTNSeVpXRnRUV1Z6YzJGblpVTnZiblJ5YjJ4c1pYSW5PMXh1YVcxd2IzSjBJSHNnUTI5dVptbG5MQ0JHYkdGbmN5QjlJR1p5YjIwZ0p5NHVMME52Ym1acFp5OURiMjVtYVdjbk8xeHVhVzF3YjNKMElIc2dSWFpsYm5STWFYTjBaVzVsY2xSeVlXTnJaWElnZlNCbWNtOXRJQ2N1TGk5VmRHbHNMMFYyWlc1MFRHbHpkR1Z1WlhKVWNtRmphMlZ5Snp0Y2JseHVhVzUwWlhKbVlXTmxJRWxEYjJSbFZHOUxaWGxEYjJSbElIdGNiaUFnSUNCYmEyVjVPaUJ6ZEhKcGJtZGRPaUJ1ZFcxaVpYSTdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1NHRnVaR3hsY3lCMGFHVWdTMlY1WW05aGNtUWdTVzV3ZFhSeklHWnZjaUIwYUdVZ1pHOWpkVzFsYm5SY2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklFdGxlV0p2WVhKa1EyOXVkSEp2Ykd4bGNpQjdYRzRnSUNBZ2RHOVRkSEpsWVcxbGNrMWxjM05oWjJWelVISnZkbWxrWlhJNklGTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5TzF4dUlDQWdJR0ZqZEdsMlpVdGxlWE5RY205MmFXUmxjam9nUVdOMGFYWmxTMlY1Y3p0Y2JpQWdJQ0JqYjI1bWFXYzZJRU52Ym1acFp6dGNibHh1SUNBZ0lDOHZJRlYwYVd4cGRIa2dabTl5SUd0bFpYQnBibWNnZEhKaFkyc2diMllnWlhabGJuUWdhR0Z1Wkd4bGNuTWdZVzVrSUhWdWNtVm5hWE4wWlhKcGJtY2dkR2hsYlZ4dUlDQWdJSEJ5YVhaaGRHVWdhMlY1WW05aGNtUkZkbVZ1ZEV4cGMzUmxibVZ5VkhKaFkydGxjaUE5SUc1bGR5QkZkbVZ1ZEV4cGMzUmxibVZ5VkhKaFkydGxjaWdwTzF4dVhHNGdJQ0FnTHlwY2JpQWdJQ0FnS2lCT1pYY2dZbkp2ZDNObGNpQkJVRWx6SUdoaGRtVWdiVzkyWldRZ1lYZGhlU0JtY205dElFdGxlV0p2WVhKa1JYWmxiblF1YTJWNVEyOWtaU0IwYnlCTFpYbGliMkZ5WkVWMlpXNTBMa052WkdVdVhHNGdJQ0FnSUNvZ1JtOXlJR1JsZEdGcGJITWdjMlZsT2lCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1dGIzcHBiR3hoTG05eVp5OWxiaTFWVXk5a2IyTnpMMWRsWWk5QlVFa3ZTMlY1WW05aGNtUkZkbVZ1ZEM5clpYbERiMlJsSTJOdmJuTjBZVzUwYzE5bWIzSmZhMlY1WTI5a1pWOTJZV3gxWlZ4dUlDQWdJQ0FxSUZkbElITjBhV3hzSUhWelpTQnZiR1FnUzJWNVltOWhjbVJGZG1WdWRDNXJaWGxEYjJSbElHbHVkR1ZuWlhKeklHbHVJSFJvWlNCVlJTQkRLeXNnYzJsa1pTd2djMjhnZDJVZ2JtVmxaQ0JoSUhkaGVTQjBieUJ0WVhBZ2RHaGxJRzVsZDF4dUlDQWdJQ0FxSUhOMGNtbHVaeTFpWVhObFpDQkxaWGxpYjJGeVpFVjJaVzUwTGtOdlpHVWdkRzhnZEdobElHOXNaQ0JwYm5SbFoyVnljeTVjYmlBZ0lDQWdLaTljYmlBZ0lDQkRiMlJsVkc5TFpYbERiMlJsT2lCSlEyOWtaVlJ2UzJWNVEyOWtaU0E5SUh0Y2JpQWdJQ0FnSUNBZ1JYTmpZWEJsT2lBeU55eGNiaUFnSUNBZ0lDQWdSR2xuYVhRd09pQTBPQ3hjYmlBZ0lDQWdJQ0FnUkdsbmFYUXhPaUEwT1N4Y2JpQWdJQ0FnSUNBZ1JHbG5hWFF5T2lBMU1DeGNiaUFnSUNBZ0lDQWdSR2xuYVhRek9pQTFNU3hjYmlBZ0lDQWdJQ0FnUkdsbmFYUTBPaUExTWl4Y2JpQWdJQ0FnSUNBZ1JHbG5hWFExT2lBMU15eGNiaUFnSUNBZ0lDQWdSR2xuYVhRMk9pQTFOQ3hjYmlBZ0lDQWdJQ0FnUkdsbmFYUTNPaUExTlN4Y2JpQWdJQ0FnSUNBZ1JHbG5hWFE0T2lBMU5peGNiaUFnSUNBZ0lDQWdSR2xuYVhRNU9pQTFOeXhjYmlBZ0lDQWdJQ0FnVFdsdWRYTTZJREUzTXl4Y2JpQWdJQ0FnSUNBZ1JYRjFZV3c2SURFNE55eGNiaUFnSUNBZ0lDQWdRbUZqYTNOd1lXTmxPaUE0TEZ4dUlDQWdJQ0FnSUNCVVlXSTZJRGtzWEc0Z0lDQWdJQ0FnSUV0bGVWRTZJRGd4TEZ4dUlDQWdJQ0FnSUNCTFpYbFhPaUE0Tnl4Y2JpQWdJQ0FnSUNBZ1MyVjVSVG9nTmprc1hHNGdJQ0FnSUNBZ0lFdGxlVkk2SURneUxGeHVJQ0FnSUNBZ0lDQkxaWGxVT2lBNE5DeGNiaUFnSUNBZ0lDQWdTMlY1V1RvZ09Ea3NYRzRnSUNBZ0lDQWdJRXRsZVZVNklEZzFMRnh1SUNBZ0lDQWdJQ0JMWlhsSk9pQTNNeXhjYmlBZ0lDQWdJQ0FnUzJWNVR6b2dOemtzWEc0Z0lDQWdJQ0FnSUV0bGVWQTZJRGd3TEZ4dUlDQWdJQ0FnSUNCQ2NtRmphMlYwVEdWbWREb2dNakU1TEZ4dUlDQWdJQ0FnSUNCQ2NtRmphMlYwVW1sbmFIUTZJREl5TVN4Y2JpQWdJQ0FnSUNBZ1JXNTBaWEk2SURFekxGeHVJQ0FnSUNBZ0lDQkRiMjUwY205c1RHVm1kRG9nTVRjc1hHNGdJQ0FnSUNBZ0lFdGxlVUU2SURZMUxGeHVJQ0FnSUNBZ0lDQkxaWGxUT2lBNE15eGNiaUFnSUNBZ0lDQWdTMlY1UkRvZ05qZ3NYRzRnSUNBZ0lDQWdJRXRsZVVZNklEY3dMRnh1SUNBZ0lDQWdJQ0JMWlhsSE9pQTNNU3hjYmlBZ0lDQWdJQ0FnUzJWNVNEb2dOeklzWEc0Z0lDQWdJQ0FnSUV0bGVVbzZJRGMwTEZ4dUlDQWdJQ0FnSUNCTFpYbExPaUEzTlN4Y2JpQWdJQ0FnSUNBZ1MyVjVURG9nTnpZc1hHNGdJQ0FnSUNBZ0lGTmxiV2xqYjJ4dmJqb2dNVGcyTEZ4dUlDQWdJQ0FnSUNCUmRXOTBaVG9nTWpJeUxGeHVJQ0FnSUNBZ0lDQkNZV05yY1hWdmRHVTZJREU1TWl4Y2JpQWdJQ0FnSUNBZ1UyaHBablJNWldaME9pQXhOaXhjYmlBZ0lDQWdJQ0FnUW1GamEzTnNZWE5vT2lBeU1qQXNYRzRnSUNBZ0lDQWdJRXRsZVZvNklEa3dMRnh1SUNBZ0lDQWdJQ0JMWlhsWU9pQTRPQ3hjYmlBZ0lDQWdJQ0FnUzJWNVF6b2dOamNzWEc0Z0lDQWdJQ0FnSUV0bGVWWTZJRGcyTEZ4dUlDQWdJQ0FnSUNCTFpYbENPaUEyTml4Y2JpQWdJQ0FnSUNBZ1MyVjVUam9nTnpnc1hHNGdJQ0FnSUNBZ0lFdGxlVTA2SURjM0xGeHVJQ0FnSUNBZ0lDQkRiMjF0WVRvZ01UZzRMRnh1SUNBZ0lDQWdJQ0JRWlhKcGIyUTZJREU1TUN4Y2JpQWdJQ0FnSUNBZ1UyeGhjMmc2SURFNU1TeGNiaUFnSUNBZ0lDQWdVMmhwWm5SU2FXZG9kRG9nTWpVekxGeHVJQ0FnSUNBZ0lDQkJiSFJNWldaME9pQXhPQ3hjYmlBZ0lDQWdJQ0FnVTNCaFkyVTZJRE15TEZ4dUlDQWdJQ0FnSUNCRFlYQnpURzlqYXpvZ01qQXNYRzRnSUNBZ0lDQWdJRVl4T2lBeE1USXNYRzRnSUNBZ0lDQWdJRVl5T2lBeE1UTXNYRzRnSUNBZ0lDQWdJRVl6T2lBeE1UUXNYRzRnSUNBZ0lDQWdJRVkwT2lBeE1UVXNYRzRnSUNBZ0lDQWdJRVkxT2lBeE1UWXNYRzRnSUNBZ0lDQWdJRVkyT2lBeE1UY3NYRzRnSUNBZ0lDQWdJRVkzT2lBeE1UZ3NYRzRnSUNBZ0lDQWdJRVk0T2lBeE1Ua3NYRzRnSUNBZ0lDQWdJRVk1T2lBeE1qQXNYRzRnSUNBZ0lDQWdJRVl4TURvZ01USXhMRnh1SUNBZ0lDQWdJQ0JHTVRFNklERXlNaXhjYmlBZ0lDQWdJQ0FnUmpFeU9pQXhNak1zWEc0Z0lDQWdJQ0FnSUZCaGRYTmxPaUF4T1N4Y2JpQWdJQ0FnSUNBZ1UyTnliMnhzVEc5amF6b2dNVFExTEZ4dUlDQWdJQ0FnSUNCT2RXMXdZV1JFYVhacFpHVTZJREV4TVN4Y2JpQWdJQ0FnSUNBZ1RuVnRjR0ZrVFhWc2RHbHdiSGs2SURFd05peGNiaUFnSUNBZ0lDQWdUblZ0Y0dGa1UzVmlkSEpoWTNRNklERXdPU3hjYmlBZ0lDQWdJQ0FnVG5WdGNHRmtRV1JrT2lBeE1EY3NYRzRnSUNBZ0lDQWdJRTUxYlhCaFpFUmxZMmx0WVd3NklERXhNQ3hjYmlBZ0lDQWdJQ0FnVG5WdGNHRmtPVG9nTVRBMUxGeHVJQ0FnSUNBZ0lDQk9kVzF3WVdRNE9pQXhNRFFzWEc0Z0lDQWdJQ0FnSUU1MWJYQmhaRGM2SURFd015eGNiaUFnSUNBZ0lDQWdUblZ0Y0dGa05qb2dNVEF5TEZ4dUlDQWdJQ0FnSUNCT2RXMXdZV1ExT2lBeE1ERXNYRzRnSUNBZ0lDQWdJRTUxYlhCaFpEUTZJREV3TUN4Y2JpQWdJQ0FnSUNBZ1RuVnRjR0ZrTXpvZ09Ua3NYRzRnSUNBZ0lDQWdJRTUxYlhCaFpESTZJRGs0TEZ4dUlDQWdJQ0FnSUNCT2RXMXdZV1F4T2lBNU55eGNiaUFnSUNBZ0lDQWdUblZ0Y0dGa01Eb2dPVFlzWEc0Z0lDQWdJQ0FnSUU1MWJVeHZZMnM2SURFME5DeGNiaUFnSUNBZ0lDQWdRMjl1ZEhKdmJGSnBaMmgwT2lBeU5UUXNYRzRnSUNBZ0lDQWdJRUZzZEZKcFoyaDBPaUF5TlRVc1hHNGdJQ0FnSUNBZ0lFaHZiV1U2SURNMkxGeHVJQ0FnSUNBZ0lDQkZibVE2SURNMUxGeHVJQ0FnSUNBZ0lDQkJjbkp2ZDFWd09pQXpPQ3hjYmlBZ0lDQWdJQ0FnUVhKeWIzZE1aV1owT2lBek55eGNiaUFnSUNBZ0lDQWdRWEp5YjNkU2FXZG9kRG9nTXprc1hHNGdJQ0FnSUNBZ0lFRnljbTkzUkc5M2Jqb2dOREFzWEc0Z0lDQWdJQ0FnSUZCaFoyVlZjRG9nTXpNc1hHNGdJQ0FnSUNBZ0lGQmhaMlZFYjNkdU9pQXpOQ3hjYmlBZ0lDQWdJQ0FnU1c1elpYSjBPaUEwTlN4Y2JpQWdJQ0FnSUNBZ1JHVnNaWFJsT2lBME5peGNiaUFnSUNBZ0lDQWdRMjl1ZEdWNGRFMWxiblU2SURrelhHNGdJQ0FnZlR0Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndZWEpoYlNCMGIxTjBjbVZoYldWeVRXVnpjMkZuWlhOUWNtOTJhV1JsY2lCVGRISmxZVzBnYldWemMyRm5aU0J3Y205MmFXUmxjaUJqYkdGemN5QnZZbXBsWTNSY2JpQWdJQ0FnS2lCQWNHRnlZVzBnWTI5dVptbG5JRlJvWlNCaGNIQnNhV05oZEdsdmJuTWdZMjl1Wm1sbmRYSmhkR2x2Ymk0Z1YyVW5jbVVnYVc1MFpYSmxjM1JsWkNCcGJpQjBhR1VnYzNWd2NISmxjM01nWW5KdmQzTmxjaUJyWlhseklHOXdkR2x2Ymx4dUlDQWdJQ0FxSUVCd1lYSmhiU0JoWTNScGRtVkxaWGx6VUhKdmRtbGtaWElnUVdOMGFYWmxJR3RsZVhNZ2NISnZkbWxrWlhJZ1kyeGhjM01nYjJKcVpXTjBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9YRzRnSUNBZ0lDQWdJSFJ2VTNSeVpXRnRaWEpOWlhOellXZGxjMUJ5YjNacFpHVnlPaUJUZEhKbFlXMU5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpeGNiaUFnSUNBZ0lDQWdZMjl1Wm1sbk9pQkRiMjVtYVdjc1hHNGdJQ0FnSUNBZ0lHRmpkR2wyWlV0bGVYTlFjbTkyYVdSbGNqb2dRV04wYVhabFMyVjVjMXh1SUNBZ0lDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuUnZVM1J5WldGdFpYSk5aWE56WVdkbGMxQnliM1pwWkdWeUlEMGdkRzlUZEhKbFlXMWxjazFsYzNOaFoyVnpVSEp2ZG1sa1pYSTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyOXVabWxuSUQwZ1kyOXVabWxuTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbUZqZEdsMlpVdGxlWE5RY205MmFXUmxjaUE5SUdGamRHbDJaVXRsZVhOUWNtOTJhV1JsY2p0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCU1pXZHBjM1JsY25NZ1pHOWpkVzFsYm5RZ2EyVjVZbTloY21RZ1pYWmxiblJ6SUhkcGRHZ2dkR2hsSUdOdmJuUnliMnhzWlhKY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J5WldkcGMzUmxja3RsZVVKdllYSmtSWFpsYm5SektDa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmpiMjF3YjNOcGRHbHZia1Z1WkVoaGJtUnNaWElnUFNBb1pYWTZJRU52YlhCdmMybDBhVzl1UlhabGJuUXBJRDArSUhSb2FYTXVhR0Z1Wkd4bFQyNURiMjF3YjNOcGRHbHZia1Z1WkNobGRpazdYRzRnSUNBZ0lDQWdJR052Ym5OMElHdGxlVVJ2ZDI1SVlXNWtiR1Z5SUQwZ0tHVjJPaUJMWlhsaWIyRnlaRVYyWlc1MEtTQTlQaUIwYUdsekxtaGhibVJzWlU5dVMyVjVSRzkzYmlobGRpazdYRzRnSUNBZ0lDQWdJR052Ym5OMElHdGxlVlZ3U0dGdVpHeGxjaUE5SUNobGRqb2dTMlY1WW05aGNtUkZkbVZ1ZENrZ1BUNGdkR2hwY3k1b1lXNWtiR1ZQYmt0bGVWVndLR1YyS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYTJWNVVISmxjM05JWVc1a2JHVnlJRDBnS0dWMk9pQkxaWGxpYjJGeVpFVjJaVzUwS1NBOVBpQjBhR2x6TG1oaGJtUnNaVTl1UzJWNVVISmxjM01vWlhZcE8xeHVYRzRnSUNBZ0lDQWdJR1J2WTNWdFpXNTBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9YQ0pqYjIxd2IzTnBkR2x2Ym1WdVpGd2lMQ0JqYjIxd2IzTnBkR2x2YmtWdVpFaGhibVJzWlhJcE8xeHVJQ0FnSUNBZ0lDQmtiMk4xYldWdWRDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtGd2lhMlY1Wkc5M2Jsd2lMQ0JyWlhsRWIzZHVTR0Z1Wkd4bGNpazdYRzRnSUNBZ0lDQWdJR1J2WTNWdFpXNTBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9YQ0pyWlhsMWNGd2lMQ0JyWlhsVmNFaGhibVJzWlhJcE8xeHVYRzRnSUNBZ0lDQWdJQzh2VkdocGN5Qm9ZWE1nWW1WbGJpQmtaWEJ5WldOaGRHVmtJR0Z6SUdGMElFcDFiaUF4TXlBeU1ESXhYRzRnSUNBZ0lDQWdJR1J2WTNWdFpXNTBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9YQ0pyWlhsd2NtVnpjMXdpTENCclpYbFFjbVZ6YzBoaGJtUnNaWElwTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11YTJWNVltOWhjbVJGZG1WdWRFeHBjM1JsYm1WeVZISmhZMnRsY2k1aFpHUlZibkpsWjJsemRHVnlRMkZzYkdKaFkyc29YRzRnSUNBZ0lDQWdJQ0FnSUNBb0tTQTlQaUJrYjJOMWJXVnVkQzV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0Z3aVkyOXRjRzl6YVhScGIyNWxibVJjSWl3Z1kyOXRjRzl6YVhScGIyNUZibVJJWVc1a2JHVnlLVnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbXRsZVdKdllYSmtSWFpsYm5STWFYTjBaVzVsY2xSeVlXTnJaWEl1WVdSa1ZXNXlaV2RwYzNSbGNrTmhiR3hpWVdOcktGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0NrZ1BUNGdaRzlqZFcxbGJuUXVjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWhjSW10bGVXUnZkMjVjSWl3Z2EyVjVSRzkzYmtoaGJtUnNaWElwWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YTJWNVltOWhjbVJGZG1WdWRFeHBjM1JsYm1WeVZISmhZMnRsY2k1aFpHUlZibkpsWjJsemRHVnlRMkZzYkdKaFkyc29YRzRnSUNBZ0lDQWdJQ0FnSUNBb0tTQTlQaUJrYjJOMWJXVnVkQzV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0Z3aWEyVjVkWEJjSWl3Z2EyVjVWWEJJWVc1a2JHVnlLVnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbXRsZVdKdllYSmtSWFpsYm5STWFYTjBaVzVsY2xSeVlXTnJaWEl1WVdSa1ZXNXlaV2RwYzNSbGNrTmhiR3hpWVdOcktGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0NrZ1BUNGdaRzlqZFcxbGJuUXVjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWhjSW10bGVYQnlaWE56WENJc0lHdGxlVkJ5WlhOelNHRnVaR3hsY2lsY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlZibkpsWjJsemRHVnljeUJrYjJOMWJXVnVkQ0JyWlhsaWIyRnlaQ0JsZG1WdWRITmNiaUFnSUNBZ0tpOWNiaUFnSUNCMWJuSmxaMmx6ZEdWeVMyVjVRbTloY21SRmRtVnVkSE1vS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YTJWNVltOWhjbVJGZG1WdWRFeHBjM1JsYm1WeVZISmhZMnRsY2k1MWJuSmxaMmx6ZEdWeVFXeHNLQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nU0dGdVpHeGxjeUJYYUdWdUlHRWdhMlY1SUdseklHUnZkMjVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdhMlY1WW05aGNtUkZkbVZ1ZENBdElFdGxlV0p2WVhKa0lHVjJaVzUwWEc0Z0lDQWdJQ292WEc0Z0lDQWdhR0Z1Wkd4bFQyNUxaWGxFYjNkdUtHdGxlV0p2WVhKa1JYWmxiblE2SUV0bGVXSnZZWEprUlhabGJuUXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdhMlY1UTI5a1pTQTlJSFJvYVhNdVoyVjBTMlY1WTI5a1pTaHJaWGxpYjJGeVpFVjJaVzUwS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0ZyWlhsRGIyUmxJSHg4SUd0bGVVTnZaR1VnUFQwOUlESXlPU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnVEc5bloyVnlMa3h2WnloY2JpQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JnYTJWNUlHUnZkMjRnSkh0clpYbERiMlJsZlN3Z2NtVndaV0YwSUQwZ0pIdHJaWGxpYjJGeVpFVjJaVzUwTG5KbGNHVmhkSDFnTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdObHh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0IwYjFOMGNtVmhiV1Z5U0dGdVpHeGxjbk1nUFZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MGIxTjBjbVZoYldWeVRXVnpjMkZuWlhOUWNtOTJhV1JsY2k1MGIxTjBjbVZoYldWeVNHRnVaR3hsY25NN1hHNGdJQ0FnSUNBZ0lIUnZVM1J5WldGdFpYSklZVzVrYkdWeWN5NW5aWFFvSjB0bGVVUnZkMjRuS1NoYlhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtZGxkRXRsZVdOdlpHVW9hMlY1WW05aGNtUkZkbVZ1ZENrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JyWlhsaWIyRnlaRVYyWlc1MExuSmxjR1ZoZENBL0lERWdPaUF3WEc0Z0lDQWdJQ0FnSUYwcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCaFkzUnBkbVZMWlhseklEMGdkR2hwY3k1aFkzUnBkbVZMWlhselVISnZkbWxrWlhJdVoyVjBRV04wYVhabFMyVjVjeWdwTzF4dUlDQWdJQ0FnSUNCaFkzUnBkbVZMWlhsekxuQjFjMmdvYTJWNVEyOWtaU2s3WEc0Z0lDQWdJQ0FnSUM4dklFSmhZMnR6Y0dGalpTQnBjeUJ1YjNRZ1kyOXVjMmxrWlhKbFpDQmhJR3RsZVhCeVpYTnpJR2x1SUVwaGRtRlRZM0pwY0hRZ1luVjBJSGRsSUc1bFpXUWdhWFJjYmlBZ0lDQWdJQ0FnTHk4Z2RHOGdZbVVnYzI4Z1kyaGhjbUZqZEdWeWN5QnRZWGtnWW1VZ1pHVnNaWFJsWkNCcGJpQmhJRlZGSUhSbGVIUWdaVzUwY25rZ1ptbGxiR1F1WEc0Z0lDQWdJQ0FnSUdsbUlDaHJaWGxEYjJSbElEMDlQU0JUY0dWamFXRnNTMlY1UTI5a1pYTXVZbUZqYTFOd1lXTmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtiMk4xYldWdWRDNWthWE53WVhSamFFVjJaVzUwS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1bGR5QkxaWGxpYjJGeVpFVjJaVzUwS0NkclpYbHdjbVZ6Y3ljc0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJoaGNrTnZaR1U2SUZOd1pXTnBZV3hMWlhsRGIyUmxjeTVpWVdOclUzQmhZMlZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTI5dVptbG5MbWx6Um14aFowVnVZV0pzWldRb1JteGhaM011VTNWd2NISmxjM05DY205M2MyVnlTMlY1Y3lrZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVhWE5MWlhsRGIyUmxRbkp2ZDNObGNrdGxlU2hyWlhsRGIyUmxLVnh1SUNBZ0lDQWdJQ0FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3RsZVdKdllYSmtSWFpsYm5RdWNISmxkbVZ1ZEVSbFptRjFiSFFvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlHaGhibVJzWlhNZ2QyaGxiaUJoSUd0bGVTQnBjeUIxY0Z4dUlDQWdJQ0FxSUVCd1lYSmhiU0JyWlhsaWIyRnlaRVYyWlc1MElDMGdTMlY1WW05aGNtUWdaWFpsYm5SY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JvWVc1a2JHVlBia3RsZVZWd0tHdGxlV0p2WVhKa1JYWmxiblE2SUV0bGVXSnZZWEprUlhabGJuUXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdhMlY1UTI5a1pTQTlJSFJvYVhNdVoyVjBTMlY1WTI5a1pTaHJaWGxpYjJGeVpFVjJaVzUwS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0ZyWlhsRGIyUmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JNYjJkblpYSXVURzluS0V4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NJR0JyWlhrZ2RYQWdKSHRyWlhsRGIyUmxmV0FzSURZcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCMGIxTjBjbVZoYldWeVNHRnVaR3hsY25NZ1BWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTBiMU4wY21WaGJXVnlUV1Z6YzJGblpYTlFjbTkyYVdSbGNpNTBiMU4wY21WaGJXVnlTR0Z1Wkd4bGNuTTdYRzRnSUNBZ0lDQWdJSFJ2VTNSeVpXRnRaWEpJWVc1a2JHVnljeTVuWlhRb0owdGxlVlZ3Snlrb1d5QnJaWGxEYjJSbElGMHBPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZMjl1Wm1sbkxtbHpSbXhoWjBWdVlXSnNaV1FvUm14aFozTXVVM1Z3Y0hKbGMzTkNjbTkzYzJWeVMyVjVjeWtnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFYTkxaWGxEYjJSbFFuSnZkM05sY2t0bGVTaHJaWGxEYjJSbEtWeHVJQ0FnSUNBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHdGxlV0p2WVhKa1JYWmxiblF1Y0hKbGRtVnVkRVJsWm1GMWJIUW9LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVoaGJtUnNaWE1nZDJobGJpQmhJR3RsZVNCcGN5QndjbVZ6YzF4dUlDQWdJQ0FxSUVCd1lYSmhiU0JyWlhsaWIyRnlaQ0F0SUV0bGVXSnZZWEprSUVWMlpXNTBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2FHRnVaR3hsVDI1TFpYbFFjbVZ6Y3loclpYbGliMkZ5WkRvZ1MyVjVZbTloY21SRmRtVnVkQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9JU2duWTJoaGNrTnZaR1VuSUdsdUlHdGxlV0p2WVhKa0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGxkaGNtNXBibWNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5TMlY1WW05aGNtUkZkbVZ1ZEM1amFHRnlRMjlrWlNCcGN5QmtaWEJ5WldOaGRHVmtJR2x1SUhSb2FYTWdZbkp2ZDNObGNpd2dZMkZ1Ym05MElITmxibVFnYTJWNUlIQnlaWE56TGlkY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JqYjI1emRDQmphR0Z5UTI5a1pTQTlJR3RsZVdKdllYSmtMbU5vWVhKRGIyUmxPMXh1SUNBZ0lDQWdJQ0JNYjJkblpYSXVURzluS0V4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NJR0JyWlhrZ2NISmxjM01nSkh0amFHRnlRMjlrWlgxZ0xDQTJLVHRjYmx4dUlDQWdJQ0FnSUNCamIyNXpkQ0IwYjFOMGNtVmhiV1Z5U0dGdVpHeGxjbk1nUFZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MGIxTjBjbVZoYldWeVRXVnpjMkZuWlhOUWNtOTJhV1JsY2k1MGIxTjBjbVZoYldWeVNHRnVaR3hsY25NN1hHNGdJQ0FnSUNBZ0lIUnZVM1J5WldGdFpYSklZVzVrYkdWeWN5NW5aWFFvSjB0bGVWQnlaWE56Snlrb1cyTm9ZWEpEYjJSbFhTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dTR0Z1Wkd4bElIZG9aVzVsZG1WeUlHTnZiWEJ2YzJsMGFXOXVJR1Z1WkhNZ0tHVm5JR05vYVc1bGMyVWdjMmx0Y0d4cFptbGxaQ2xjYmlBZ0lDQWdLaUJBY0dGeVlXMGdZMjl0Y0c5emFYUnBiMjVGZG1WdWRDQXRJSFJvWlNCamIyMXdiM05wZEdsdmJpQmxkbVZ1ZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJR2hoYm1Sc1pVOXVRMjl0Y0c5emFYUnBiMjVGYm1Rb1kyOXRjRzl6YVhScGIyNUZkbVZ1ZERvZ1EyOXRjRzl6YVhScGIyNUZkbVZ1ZENrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvWTI5dGNHOXphWFJwYjI1RmRtVnVkQzVrWVhSaElDWW1JR052YlhCdmMybDBhVzl1UlhabGJuUXVaR0YwWVM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052YlhCdmMybDBhVzl1UlhabGJuUXVaR0YwWVM1emNHeHBkQ2duSnlrdVptOXlSV0ZqYUNnb1kyaGhjaWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRlJvYVhNZ2EyVjVaRzkzYml3Z2EyVjVjSEpsYzNNc0lHdGxlWFZ3SUdac2IzY2dhWE1nY21WeGRXbHlaV1FnZEc4Z2JXbHRhV01nZEdobElIZGhlU0JqYUdGeVlXTjBaWEp6SUdGeVpTQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJ1YjNKdFlXeHNlU0IwY21sbloyVnlaV1JjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtaGhibVJzWlU5dVMyVjVSRzkzYmloY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibVYzSUV0bGVXSnZZWEprUlhabGJuUW9KMnRsZVdSdmQyNG5MQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JyWlhsRGIyUmxPaUJqYUdGeUxuUnZWWEJ3WlhKRFlYTmxLQ2t1WTJoaGNrTnZaR1ZCZENnd0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTm9ZWEpEYjJSbE9pQmphR0Z5TG1Ob1lYSkRiMlJsUVhRb01DbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YUdGdVpHeGxUMjVMWlhsUWNtVnpjeWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtVjNJRXRsZVdKdllYSmtSWFpsYm5Rb0oydGxlWEJ5WlhOekp5d2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhMlY1UTI5a1pUb2dZMmhoY2k1MGIxVndjR1Z5UTJGelpTZ3BMbU5vWVhKRGIyUmxRWFFvTUNrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamFHRnlRMjlrWlRvZ1kyaGhjaTVqYUdGeVEyOWtaVUYwS0RBcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWhoYm1Sc1pVOXVTMlY1VlhBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzVsZHlCTFpYbGliMkZ5WkVWMlpXNTBLQ2RyWlhsMWNDY3NJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3RsZVVOdlpHVTZJR05vWVhJdWRHOVZjSEJsY2tOaGMyVW9LUzVqYUdGeVEyOWtaVUYwS0RBcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyaGhja052WkdVNklHTm9ZWEl1WTJoaGNrTnZaR1ZCZENnd0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFZGxkSE1nZEdobElFdGxlV052WkdVZ2IyWWdkR2hsSUV0bGVTQndjbVZ6YzJWa1hHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUd0bGVXSnZZWEprUlhabGJuUWdMU0JMWlhrZ1ltOWhjbVFnUlhabGJuUmNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QXRJSFJvWlNCclpYa2dZMjlrWlNCdlppQjBhR1VnUzJWNVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWjJWMFMyVjVZMjlrWlNoclpYbGliMkZ5WkVWMlpXNTBPaUJMWlhsaWIyRnlaRVYyWlc1MEtTQjdYRzRnSUNBZ0lDQWdJQzh2SUVsbUlIZGxJR1J2YmlkMElHaGhkbVVnYTJWNVEyOWtaU0J3Y205d1pYSjBlU0JpWldOaGRYTmxJR0p5YjNkelpYSWdRVkJKSUdseklHUmxjSEpsWTJGMFpXUWdkR2hsYmlCMWMyVWdTMlY1WW05aGNtUkZkbVZ1ZEM1amIyUmxJR2x1YzNSbFlXUXVYRzRnSUNBZ0lDQWdJQzh2SUZObFpUb2dhSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXViVzk2YVd4c1lTNXZjbWN2Wlc0dFZWTXZaRzlqY3k5WFpXSXZRVkJKTDB0bGVXSnZZWEprUlhabGJuUXZhMlY1UTI5a1pTTmpiMjV6ZEdGdWRITmZabTl5WDJ0bGVXTnZaR1ZmZG1Gc2RXVmNiaUFnSUNBZ0lDQWdhV1lnS0NFb0oydGxlVU52WkdVbklHbHVJR3RsZVdKdllYSmtSWFpsYm5RcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkRiMjUyWlhKMElFdGxlV0p2WVhKa1JYWmxiblF1WTI5a1pTQnpkSEpwYm1jZ2FXNTBieUJwYm5SbFoyVnlMV0poYzJWa0lHdGxlU0JqYjJSbElHWnZjaUJpWVdOcmQyRnlaSE1nWTI5dGNHRjBhV0pwYkdsMGVTQnlaV0Z6YjI1ekxseHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdaWFpsYm5RZ1BTQnJaWGxpYjJGeVpFVjJaVzUwSUdGeklFdGxlV0p2WVhKa1JYWmxiblE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWlhabGJuUXVZMjlrWlNCcGJpQjBhR2x6TGtOdlpHVlViMHRsZVVOdlpHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1RGIyUmxWRzlMWlhsRGIyUmxXMlYyWlc1MExtTnZaR1ZkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVYyRnlibWx1WnloY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZRXRsZVdKdllYSmtJR052WkdVZ2IyWWdKSHRsZG1WdWRDNWpiMlJsZlNCcGN5QnViM1FnYzNWd2NHOXlkR1ZrSUdsdUlHOTFjaUJ0WVhCd2FXNW5MQ0JwWjI1dmNtbHVaeUIwYUdseklHdGxlUzVnWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQzh2SUVsbUlIZGxJRzFoWkdVZ2FYUWdhR1Z5WlNCTFpYbGliMkZ5WkVWMlpXNTBMbXRsZVVOdlpHVWdhWE1nYzNScGJHd2djM1Z3Y0c5eWRHVmtJSE52SUhkbElHTmhiaUJ6WVdabGJIa2dkWE5sSUdsMExseHVYRzRnSUNBZ0lDQWdJR2xtSUNoY2JpQWdJQ0FnSUNBZ0lDQWdJR3RsZVdKdllYSmtSWFpsYm5RdWEyVjVRMjlrWlNBOVBUMGdVM0JsWTJsaGJFdGxlVU52WkdWekxuTm9hV1owSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0JyWlhsaWIyRnlaRVYyWlc1MExtTnZaR1VnUFQwOUlDZFRhR2xtZEZKcFoyaDBKMXh1SUNBZ0lDQWdJQ0FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQlRjR1ZqYVdGc1MyVjVRMjlrWlhNdWNtbG5hSFJUYUdsbWREdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lHdGxlV0p2WVhKa1JYWmxiblF1YTJWNVEyOWtaU0E5UFQwZ1UzQmxZMmxoYkV0bGVVTnZaR1Z6TG1OdmJuUnliMndnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJR3RsZVdKdllYSmtSWFpsYm5RdVkyOWtaU0E5UFQwZ0owTnZiblJ5YjJ4U2FXZG9kQ2RjYmlBZ0lDQWdJQ0FnS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdVM0JsWTJsaGJFdGxlVU52WkdWekxuSnBaMmgwUTI5dWRISnZiRHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoY2JpQWdJQ0FnSUNBZ0lDQWdJR3RsZVdKdllYSmtSWFpsYm5RdWEyVjVRMjlrWlNBOVBUMGdVM0JsWTJsaGJFdGxlVU52WkdWekxtRnNkQ0FtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdhMlY1WW05aGNtUkZkbVZ1ZEM1amIyUmxJRDA5UFNBblFXeDBVbWxuYUhRblhHNGdJQ0FnSUNBZ0lDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZOd1pXTnBZV3hMWlhsRGIyUmxjeTV5YVdkb2RFRnNkRHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCclpYbGliMkZ5WkVWMlpXNTBMbXRsZVVOdlpHVTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJDY205M2MyVnlJR3RsZVhNZ1pHOGdibTkwSUdoaGRtVWdZU0JqYUdGeVEyOWtaU0J6YnlCM1pTQnZibXg1SUc1bFpXUWdkRzhnZEdWemRDQnJaWGxEYjJSbExseHVJQ0FnSUNBcUlFQndZWEpoYlNCclpYbERiMlJsSUMwZ2RHaGxJR0p5YjNkelpYSWdhMlY1WTI5a1pTQnVkVzFpWlhKY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JwYzB0bGVVTnZaR1ZDY205M2MyVnlTMlY1S0d0bGVVTnZaR1U2SUc1MWJXSmxjaWtnZTF4dUlDQWdJQ0FnSUNBdkx5QkdkVzVqZEdsdmJpQnJaWGx6SUc5eUlIUmhZaUJyWlhrZ1lYSmxJR052Ym5OcFpHVnlaV1FnWENKaWNtOTNjMlZ5SUd0bGVYTmNJaUIwYUdGMElIZGxJRzFoZVNCM2FYTm9JSFJ2SUhOMWNIQnlaWE56SUdKNUlIQnlaWFpsYm5ScGJtY2dkR2hsYlNCaVpXbHVaeUJ3Y205alpYTnpJR0o1SUdKeWIzZHpaWEl1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFvYTJWNVEyOWtaU0ErUFNBeE1USWdKaVlnYTJWNVEyOWtaU0E4UFNBeE1qTXBJSHg4SUd0bGVVTnZaR1VnUFQwOUlEazdYRzRnSUNBZ2ZWeHVmVnh1SWl3aUx5OGdRMjl3ZVhKcFoyaDBJRVZ3YVdNZ1IyRnRaWE1zSUVsdVl5NGdRV3hzSUZKcFoyaDBjeUJTWlhObGNuWmxaQzVjYmx4dWFXMXdiM0owSUhzZ1RXOTFjMlZEYjI1MGNtOXNiR1Z5SUgwZ1puSnZiU0FuTGk5TmIzVnpaVU52Ym5SeWIyeHNaWEluTzF4dWFXMXdiM0owSUhzZ1RHOW5aMlZ5SUgwZ1puSnZiU0FuTGk0dlRHOW5aMlZ5TDB4dloyZGxjaWM3WEc1cGJYQnZjblFnZXlCSlRXOTFjMlZGZG1WdWRITWdmU0JtY205dElDY3VMMGxOYjNWelpVVjJaVzUwY3ljN1hHNXBiWEJ2Y25RZ2V5Qk9iM0p0WVd4cGVtVmtVWFZoYm5ScGVtVmtWVzV6YVdkdVpXUkRiMjl5WkNCOUlHWnliMjBnSnk0dUwxVjBhV3d2UTI5dmNtUnBibUYwWlVOdmJuWmxjblJsY2ljN1hHNXBiWEJ2Y25RZ2V5QkJZM1JwZG1WTFpYbHpJSDBnWm5KdmJTQW5MaTlKYm5CMWRFTnNZWE56WlhOR1lXTjBiM0o1Snp0Y2JtbHRjRzl5ZENCN0lGWnBaR1Z2VUd4aGVXVnlJSDBnWm5KdmJTQW5MaTR2Vm1sa1pXOVFiR0Y1WlhJdlZtbGtaVzlRYkdGNVpYSW5PMXh1YVcxd2IzSjBJSHNnUlhabGJuUk1hWE4wWlc1bGNsUnlZV05yWlhJZ2ZTQm1jbTl0SUNjdUxpOVZkR2xzTDBWMlpXNTBUR2x6ZEdWdVpYSlVjbUZqYTJWeUp6dGNibHh1THlvcVhHNGdLaUJJWVc1a2JHVWdkR2hsSUcxdmRYTmxJR3h2WTJ0bFpDQmxkbVZ1ZEhOY2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklFeHZZMnRsWkUxdmRYTmxSWFpsYm5SeklHbHRjR3hsYldWdWRITWdTVTF2ZFhObFJYWmxiblJ6SUh0Y2JpQWdJQ0I0SUQwZ01EdGNiaUFnSUNCNUlEMGdNRHRjYmlBZ0lDQmpiMjl5WkRvZ1RtOXliV0ZzYVhwbFpGRjFZVzUwYVhwbFpGVnVjMmxuYm1Wa1EyOXZjbVE3WEc0Z0lDQWdkbWxrWlc5RmJHVnRaVzUwVUhKdmRtbGtaWEk2SUZacFpHVnZVR3hoZVdWeU8xeHVJQ0FnSUcxdmRYTmxRMjl1ZEhKdmJHeGxjam9nVFc5MWMyVkRiMjUwY205c2JHVnlPMXh1SUNBZ0lHRmpkR2wyWlV0bGVYTlFjbTkyYVdSbGNqb2dRV04wYVhabFMyVjVjenRjYmlBZ0lDQjFjR1JoZEdWTmIzVnpaVTF2ZG1WUWIzTnBkR2x2YmtWMlpXNTBJRDBnS0cxdmRYTmxSWFpsYm5RNklFMXZkWE5sUlhabGJuUXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUxY0dSaGRHVk5iM1Z6WlUxdmRtVlFiM05wZEdsdmJpaHRiM1Z6WlVWMlpXNTBLVHRjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdMeThnVlhScGJHbDBlU0JtYjNJZ2EyVmxjR2x1WnlCMGNtRmpheUJ2WmlCbGRtVnVkQ0JvWVc1a2JHVnljeUJoYm1RZ2RXNXlaV2RwYzNSbGNtbHVaeUIwYUdWdFhHNGdJQ0FnY0hKcGRtRjBaU0J0YjNWelpVVjJaVzUwVEdsemRHVnVaWEpVY21GamEyVnlJRDBnYm1WM0lFVjJaVzUwVEdsemRHVnVaWEpVY21GamEyVnlLQ2s3WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZG1sa1pXOUZiR1Z0Wlc1MFVISnZkbWxrWlhJZ0xTQldhV1JsYnlCUWJHRjVaWElnYVc1emRHRnVZMlZjYmlBZ0lDQWdLaUJBY0dGeVlXMGdiVzkxYzJWRGIyNTBjbTlzYkdWeUlDMGdUVzkxYzJVZ1kyOXVkSEp2Ykd4bGNpQnBibk4wWVc1alpWeHVJQ0FnSUNBcUlFQndZWEpoYlNCaFkzUnBkbVZMWlhselVISnZkbWxrWlhJZ0xTQkJZM1JwZG1VZ2EyVjVjeUJ3Y205MmFXUmxjaUJwYm5OMFlXNWpaVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQndiR0Y1WlhKVGRIbHNaVUYwZEhKcFluVjBaWE5RY205MmFXUmxjaUF0SUZCc1lYbGxjaUJ6ZEhsc1pTQmhkSFJ5YVdKMWRHVnpJR2x1YzNSaGJtTmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9YRzRnSUNBZ0lDQWdJSFpwWkdWdlJXeGxiV1Z1ZEZCeWIzWnBaR1Z5T2lCV2FXUmxiMUJzWVhsbGNpeGNiaUFnSUNBZ0lDQWdiVzkxYzJWRGIyNTBjbTlzYkdWeU9pQk5iM1Z6WlVOdmJuUnliMnhzWlhJc1hHNGdJQ0FnSUNBZ0lHRmpkR2wyWlV0bGVYTlFjbTkyYVdSbGNqb2dRV04wYVhabFMyVjVjMXh1SUNBZ0lDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuWnBaR1Z2Uld4bGJXVnVkRkJ5YjNacFpHVnlJRDBnZG1sa1pXOUZiR1Z0Wlc1MFVISnZkbWxrWlhJN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Ylc5MWMyVkRiMjUwY205c2JHVnlJRDBnYlc5MWMyVkRiMjUwY205c2JHVnlPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtRmpkR2wyWlV0bGVYTlFjbTkyYVdSbGNpQTlJR0ZqZEdsMlpVdGxlWE5RY205MmFXUmxjanRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkbWxrWlc5RmJHVnRaVzUwVUdGeVpXNTBJRDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZG1sa1pXOUZiR1Z0Wlc1MFVISnZkbWxrWlhJdVoyVjBWbWxrWlc5UVlYSmxiblJGYkdWdFpXNTBLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVlQ0E5SUhacFpHVnZSV3hsYldWdWRGQmhjbVZ1ZEM1blpYUkNiM1Z1WkdsdVowTnNhV1Z1ZEZKbFkzUW9LUzUzYVdSMGFDQXZJREk3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVlU0E5SUhacFpHVnZSV3hsYldWdWRGQmhjbVZ1ZEM1blpYUkNiM1Z1WkdsdVowTnNhV1Z1ZEZKbFkzUW9LUzVvWldsbmFIUWdMeUF5TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbU52YjNKa0lEMWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViVzkxYzJWRGIyNTBjbTlzYkdWeUxtTnZiM0prYVc1aGRHVkRiMjUyWlhKMFpYSXVibTl5YldGc2FYcGxRVzVrVVhWaGJuUnBlbVZWYm5OcFoyNWxaQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1NVhHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZWdWNtVm5hWE4wWlhKeklHRnNiQ0JsZG1WdWRDQm9ZVzVrYkdWeWMxeHVJQ0FnSUNBcUwxeHVJQ0FnSUhWdWNtVm5hWE4wWlhKTmIzVnpaVVYyWlc1MGN5Z3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXRiM1Z6WlVWMlpXNTBUR2x6ZEdWdVpYSlVjbUZqYTJWeUxuVnVjbVZuYVhOMFpYSkJiR3dvS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSVlXNWtiR1VnZDJobGJpQjBhR1VnYkc5amEyVmtJSE4wWVhSbElFTm9ZVzVuWldSY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JzYjJOclUzUmhkR1ZEYUdGdVoyVW9LU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFpwWkdWdlJXeGxiV1Z1ZEZCaGNtVnVkQ0E5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5acFpHVnZSV3hsYldWdWRGQnliM1pwWkdWeUxtZGxkRlpwWkdWdlVHRnlaVzUwUld4bGJXVnVkQ2dwTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0IwYjFOMGNtVmhiV1Z5U0dGdVpHeGxjbk1nUFZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dGIzVnpaVU52Ym5SeWIyeHNaWEl1ZEc5VGRISmxZVzFsY2sxbGMzTmhaMlZ6VUhKdmRtbGtaWEl1ZEc5VGRISmxZVzFsY2toaGJtUnNaWEp6TzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExuQnZhVzUwWlhKTWIyTnJSV3hsYldWdWRDQTlQVDBnZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwSUh4OFhHNGdJQ0FnSUNBZ0lDQWdJQ0JrYjJOMWJXVnVkQzV0YjNwUWIybHVkR1Z5VEc5amEwVnNaVzFsYm5RZ1BUMDlJSFpwWkdWdlJXeGxiV1Z1ZEZCaGNtVnVkRnh1SUNBZ0lDQWdJQ0FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNU1iMmNvVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTd2dKMUJ2YVc1MFpYSWdiRzlqYTJWa0p5d2dOaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtiMk4xYldWdWRDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZHRiM1Z6WlcxdmRtVW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRYQmtZWFJsVFc5MWMyVk5iM1psVUc5emFYUnBiMjVGZG1WdWRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1ZV3h6WlZ4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Ylc5MWMyVkZkbVZ1ZEV4cGMzUmxibVZ5VkhKaFkydGxjaTVoWkdSVmJuSmxaMmx6ZEdWeVEyRnNiR0poWTJzb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tDa2dQVDRnWkc5amRXMWxiblF1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMjF2ZFhObGJXOTJaU2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZFhCa1lYUmxUVzkxYzJWTmIzWmxVRzl6YVhScGIyNUZkbVZ1ZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabUZzYzJWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZFVhR1VnY0c5cGJuUmxjaUJzYjJOcklITjBZWFIxY3lCcGN5QnViM2NnZFc1c2IyTnJaV1FuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURaY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUFoWVNCdVpYY2dZWEp5YjNjZ1puVnVZM1JwYjI0Z2JYVnpkQ0J1YjNRZ1ltVWdkWE5sWkNCb1pYSmxJR0Z6SUdsMElIZHBiR3dnWW1VZ1kyOTFiblJsWkNCaGN5QmhJRzVsZHlCbWRXNWpkR2x2YmlCMGFHRjBJR05oYm01dmRDQmlaU0J5WlcxdmRtVmtYRzRnSUNBZ0lDQWdJQ0FnSUNCa2IyTjFiV1Z1ZEM1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZHRiM1Z6WlcxdmRtVW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRYQmtZWFJsVFc5MWMyVk5iM1psVUc5emFYUnBiMjVGZG1WdWRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1ZV3h6WlZ4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnU1dZZ2JXOTFjMlVnYkc5elpYTWdabTlqZFhNc0lITmxibVFnWVNCclpYa2dkWEFnWm05eUlHRnNiQ0J2WmlCMGFHVWdZM1Z5Y21WdWRHeDVJR2hsYkdRdFpHOTNiaUJyWlhselhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCVWFHbHpJR2x6SUc1bFkyVnpjMkZ5ZVNCaGN5QjNhR1Z1SUhSb1pTQnRiM1Z6WlNCc2IzTmxjeUJtYjJOMWN5d2dkR2hsSUhkcGJtUnZkM01nYzNSdmNITWdiR2x6ZEdWdWFXNW5JR1p2Y2lCbGRtVnVkSE1nWVc1a0lHRnpJSE4xWTJoY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUhSb1pTQnJaWGwxY0NCc2FYTjBaVzVsY2lCM2IyNG5kQ0JuWlhRZ1ptbHlaV1JjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JoWTNScGRtVkxaWGx6SUQwZ2RHaHBjeTVoWTNScGRtVkxaWGx6VUhKdmRtbGtaWEl1WjJWMFFXTjBhWFpsUzJWNWN5Z3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYzJWMFMyVjVjeUE5SUc1bGR5QlRaWFFvWVdOMGFYWmxTMlY1Y3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnVaWGRMWlhselNYUmxjbUZpYkdVNklFRnljbUY1UEc1MWJXSmxjajRnUFNCYlhUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVjBTMlY1Y3k1bWIzSkZZV05vS0NoelpYUkxaWGs2SUc1MWJXSmxjaWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNWxkMHRsZVhOSmRHVnlZV0pzWlZ0elpYUkxaWGxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJRzVsZDB0bGVYTkpkR1Z5WVdKc1pTNW1iM0pGWVdOb0tDaDFibWx4ZFdWTFpYbGpiMlJsS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkRzlUZEhKbFlXMWxja2hoYm1Sc1pYSnpMbWRsZENnblMyVjVWWEFuS1NoYmRXNXBjWFZsUzJWNVkyOWtaVjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJTWlhObGRDQjBhR1VnWVdOMGFYWmxJR3RsZVhNZ1ltRmpheUIwYnlCdWIzUm9hVzVuWEc0Z0lDQWdJQ0FnSUNBZ0lDQmhZM1JwZG1WTFpYbHpJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQklZVzVrYkdVZ2RHaGxJRzF2ZFhObElHMXZkbVVnWlhabGJuUXNJSE5sYm1SeklIUm9aU0J0YjNWelpTQmtZWFJoSUhSdklIUm9aU0JWUlNCSmJuTjBZVzVqWlZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0J0YjNWelpVVjJaVzUwSUMwZ1RXOTFjMlVnUlhabGJuUmNiaUFnSUNBZ0tpOWNiaUFnSUNCMWNHUmhkR1ZOYjNWelpVMXZkbVZRYjNOcGRHbHZiaWh0YjNWelpVVjJaVzUwT2lCTmIzVnpaVVYyWlc1MEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaGRHaHBjeTUyYVdSbGIwVnNaVzFsYm5SUWNtOTJhV1JsY2k1cGMxWnBaR1Z2VW1WaFpIa29LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR052Ym5OMElIUnZVM1J5WldGdFpYSklZVzVrYkdWeWN5QTlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTF2ZFhObFEyOXVkSEp2Ykd4bGNpNTBiMU4wY21WaGJXVnlUV1Z6YzJGblpYTlFjbTkyYVdSbGNpNTBiMU4wY21WaGJXVnlTR0Z1Wkd4bGNuTTdYRzRnSUNBZ0lDQWdJR052Ym5OMElITjBlV3hsVjJsa2RHZ2dQVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUyYVdSbGIwVnNaVzFsYm5SUWNtOTJhV1JsY2k1blpYUldhV1JsYjFCaGNtVnVkRVZzWlcxbGJuUW9LUzVqYkdsbGJuUlhhV1IwYUR0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYzNSNWJHVklaV2xuYUhRZ1BWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTJhV1JsYjBWc1pXMWxiblJRY205MmFXUmxjaTVuWlhSV2FXUmxiMUJoY21WdWRFVnNaVzFsYm5Rb0tTNWpiR2xsYm5SSVpXbG5hSFE3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTU0SUNzOUlHMXZkWE5sUlhabGJuUXViVzkyWlcxbGJuUllPMXh1SUNBZ0lDQWdJQ0IwYUdsekxua2dLejBnYlc5MWMyVkZkbVZ1ZEM1dGIzWmxiV1Z1ZEZrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVlQ0ErSUhOMGVXeGxWMmxrZEdncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVlQ0F0UFNCemRIbHNaVmRwWkhSb08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbmtnUGlCemRIbHNaVWhsYVdkb2RDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTU1SUMwOUlITjBlV3hsU0dWcFoyaDBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5nZ1BDQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5nZ1BTQnpkSGxzWlZkcFpIUm9JQ3NnZEdocGN5NTRPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5rZ1BDQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5rZ1BTQnpkSGxzWlVobGFXZG9kQ0F0SUhSb2FYTXVlVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WTI5dmNtUWdQVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV0YjNWelpVTnZiblJ5YjJ4c1pYSXVZMjl2Y21ScGJtRjBaVU52Ym5abGNuUmxjaTV1YjNKdFlXeHBlbVZCYm1SUmRXRnVkR2w2WlZWdWMybG5ibVZrS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVlQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxubGNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdSbGJIUmhJRDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Ylc5MWMyVkRiMjUwY205c2JHVnlMbU52YjNKa2FXNWhkR1ZEYjI1MlpYSjBaWEl1Ym05eWJXRnNhWHBsUVc1a1VYVmhiblJwZW1WVGFXZHVaV1FvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYlc5MWMyVkZkbVZ1ZEM1dGIzWmxiV1Z1ZEZnc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXOTFjMlZGZG1WdWRDNXRiM1psYldWdWRGbGNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIUnZVM1J5WldGdFpYSklZVzVrYkdWeWN5NW5aWFFvSjAxdmRYTmxUVzkyWlNjcEtGdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZMjl2Y21RdWVDeGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZMjl2Y21RdWVTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdSbGJIUmhMbmdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmtaV3gwWVM1NVhHNGdJQ0FnSUNBZ0lGMHBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWhoYm1Sc1pTQjBhR1VnYlc5MWMyVWdSRzkzYmlCbGRtVnVkQ3dnYzJWdVpITWdkR2hsSUcxdmRYTmxJR1JoZEdFZ2RHOGdkR2hsSUZWRklFbHVjM1JoYm1ObFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUcxdmRYTmxSWFpsYm5RZ0xTQk5iM1Z6WlNCRmRtVnVkRnh1SUNBZ0lDQXFMMXh1SUNBZ0lHaGhibVJzWlUxdmRYTmxSRzkzYmlodGIzVnpaVVYyWlc1ME9pQk5iM1Z6WlVWMlpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1MmFXUmxiMFZzWlcxbGJuUlFjbTkyYVdSbGNpNXBjMVpwWkdWdlVtVmhaSGtvS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZEc5VGRISmxZVzFsY2toaGJtUnNaWEp6SUQxY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJXOTFjMlZEYjI1MGNtOXNiR1Z5TG5SdlUzUnlaV0Z0WlhKTlpYTnpZV2RsYzFCeWIzWnBaR1Z5TG5SdlUzUnlaV0Z0WlhKSVlXNWtiR1Z5Y3p0Y2JpQWdJQ0FnSUNBZ2RHOVRkSEpsWVcxbGNraGhibVJzWlhKekxtZGxkQ2duVFc5MWMyVkViM2R1Snlrb1cxeHVJQ0FnSUNBZ0lDQWdJQ0FnYlc5MWMyVkZkbVZ1ZEM1aWRYUjBiMjRzWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJYWlNCMWMyVWdkR2hsSUhOMGIzSmxJSFpoYkhWbElHOW1JSFJvYVhNdVkyOXZjbVFnWVhNZ2IzQndiM05sWkNCMGJ5QjBhR1VnYlc5MWMyVkZkbVZ1ZEM1NEwza2dZWE1nZEdobElHMXZkWE5sUlhabGJuUWdiRzlqWVhScGIyNWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklIVnpaWE1nZEdobElITjVjM1JsYlNCamRYSnpiM0lnYkc5allYUnBiMjRnZDJocFkyZ2dhR0Z6YmlkMElHMXZkbVZrWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OdmIzSmtMbmdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OdmIzSmtMbmxjYmlBZ0lDQWdJQ0FnWFNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1NHRnVaR3hsSUhSb1pTQnRiM1Z6WlNCVmNDQmxkbVZ1ZEN3Z2MyVnVaSE1nZEdobElHMXZkWE5sSUdSaGRHRWdkRzhnZEdobElGVkZJRWx1YzNSaGJtTmxYRzRnSUNBZ0lDb2dRSEJoY21GdElHMXZkWE5sUlhabGJuUWdMU0JOYjNWelpTQkZkbVZ1ZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJR2hoYm1Sc1pVMXZkWE5sVlhBb2JXOTFjMlZGZG1WdWREb2dUVzkxYzJWRmRtVnVkQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdWRtbGtaVzlGYkdWdFpXNTBVSEp2ZG1sa1pYSXVhWE5XYVdSbGIxSmxZV1I1S0NrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCamIyNXpkQ0IwYjFOMGNtVmhiV1Z5U0dGdVpHeGxjbk1nUFZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dGIzVnpaVU52Ym5SeWIyeHNaWEl1ZEc5VGRISmxZVzFsY2sxbGMzTmhaMlZ6VUhKdmRtbGtaWEl1ZEc5VGRISmxZVzFsY2toaGJtUnNaWEp6TzF4dUlDQWdJQ0FnSUNCMGIxTjBjbVZoYldWeVNHRnVaR3hsY25NdVoyVjBLQ2ROYjNWelpWVndKeWtvVzF4dUlDQWdJQ0FnSUNBZ0lDQWdiVzkxYzJWRmRtVnVkQzVpZFhSMGIyNHNYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlhaU0IxYzJVZ2RHaGxJSE4wYjNKbElIWmhiSFZsSUc5bUlIUm9hWE11WTI5dmNtUWdZWE1nYjNCd2IzTmxaQ0IwYnlCMGFHVWdiVzkxYzJWRmRtVnVkQzU0TDNrZ1lYTWdkR2hsSUcxdmRYTmxSWFpsYm5RZ2JHOWpZWFJwYjI1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUhWelpYTWdkR2hsSUhONWMzUmxiU0JqZFhKemIzSWdiRzlqWVhScGIyNGdkMmhwWTJnZ2FHRnpiaWQwSUcxdmRtVmtYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU52YjNKa0xuZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU52YjNKa0xubGNiaUFnSUNBZ0lDQWdYU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nU0dGdVpHeGxJSFJvWlNCdGIzVnpaU0IzYUdWbGJDQmxkbVZ1ZEN3Z2MyVnVaSE1nZEdobElHMXZkWE5sSUhkb1pXVnNJR1JoZEdFZ2RHOGdkR2hsSUZWRklFbHVjM1JoYm1ObFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhkb1pXVnNSWFpsYm5RZ0xTQk5iM1Z6WlNCRmRtVnVkRnh1SUNBZ0lDQXFMMXh1SUNBZ0lHaGhibVJzWlUxdmRYTmxWMmhsWld3b2QyaGxaV3hGZG1WdWREb2dWMmhsWld4RmRtVnVkQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdWRtbGtaVzlGYkdWdFpXNTBVSEp2ZG1sa1pYSXVhWE5XYVdSbGIxSmxZV1I1S0NrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCamIyNXpkQ0IwYjFOMGNtVmhiV1Z5U0dGdVpHeGxjbk1nUFZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dGIzVnpaVU52Ym5SeWIyeHNaWEl1ZEc5VGRISmxZVzFsY2sxbGMzTmhaMlZ6VUhKdmRtbGtaWEl1ZEc5VGRISmxZVzFsY2toaGJtUnNaWEp6TzF4dUlDQWdJQ0FnSUNCMGIxTjBjbVZoYldWeVNHRnVaR3hsY25NdVoyVjBLQ2ROYjNWelpWZG9aV1ZzSnlrb1cxeHVJQ0FnSUNBZ0lDQWdJQ0FnZDJobFpXeEZkbVZ1ZEM1M2FHVmxiRVJsYkhSaExGeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1YyVWdkWE5sSUhSb1pTQnpkRzl5WlNCMllXeDFaU0J2WmlCMGFHbHpMbU52YjNKa0lHRnpJRzl3Y0c5elpXUWdkRzhnZEdobElHMXZkWE5sUlhabGJuUXVlQzk1SUdGeklIUm9aU0J0YjNWelpVVjJaVzUwSUd4dlkyRjBhVzl1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUIxYzJWeklIUm9aU0J6ZVhOMFpXMGdZM1Z5YzI5eUlHeHZZMkYwYVc5dUlIZG9hV05vSUdoaGMyNG5kQ0J0YjNabFpGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpiMjl5WkM1NExGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpiMjl5WkM1NVhHNGdJQ0FnSUNBZ0lGMHBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWhoYm1Sc1pTQjBhR1VnYlc5MWMyVWdaRzkxWW14bElHTnNhV05ySUdWMlpXNTBMQ0J6Wlc1a2N5QjBhR1VnYlc5MWMyVWdaR0YwWVNCMGJ5QjBhR1VnVlVVZ1NXNXpkR0Z1WTJWY2JpQWdJQ0FnS2lCQWNHRnlZVzBnYlc5MWMyVkZkbVZ1ZENBdElFMXZkWE5sSUVWMlpXNTBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2FHRnVaR3hsVFc5MWMyVkViM1ZpYkdVb2JXOTFjMlZGZG1WdWREb2dUVzkxYzJWRmRtVnVkQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdWRtbGtaVzlGYkdWdFpXNTBVSEp2ZG1sa1pYSXVhWE5XYVdSbGIxSmxZV1I1S0NrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCamIyNXpkQ0IwYjFOMGNtVmhiV1Z5U0dGdVpHeGxjbk1nUFZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dGIzVnpaVU52Ym5SeWIyeHNaWEl1ZEc5VGRISmxZVzFsY2sxbGMzTmhaMlZ6VUhKdmRtbGtaWEl1ZEc5VGRISmxZVzFsY2toaGJtUnNaWEp6TzF4dUlDQWdJQ0FnSUNCMGIxTjBjbVZoYldWeVNHRnVaR3hsY25NdVoyVjBLQ2ROYjNWelpVUnZkV0pzWlNjcEtGdGNiaUFnSUNBZ0lDQWdJQ0FnSUcxdmRYTmxSWFpsYm5RdVluVjBkRzl1TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnVjJVZ2RYTmxJSFJvWlNCemRHOXlaU0IyWVd4MVpTQnZaaUIwYUdsekxtTnZiM0prSUdGeklHOXdjRzl6WldRZ2RHOGdkR2hsSUcxdmRYTmxSWFpsYm5RdWVDOTVJR0Z6SUhSb1pTQnRiM1Z6WlVWMlpXNTBJR3h2WTJGMGFXOXVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QjFjMlZ6SUhSb1pTQnplWE4wWlcwZ1kzVnljMjl5SUd4dlkyRjBhVzl1SUhkb2FXTm9JR2hoYzI0bmRDQnRiM1psWkZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amIyOXlaQzU0TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amIyOXlaQzU1WEc0Z0lDQWdJQ0FnSUYwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFaGhibVJzWlNCMGFHVWdjSEpsYzNNZ2JXOTFjMlVnWW5WMGRHOXVjeUJsZG1WdWRDd2djMlZ1WkhNZ2RHaGxJRzF2ZFhObElHUmhkR0VnZEc4Z2RHaGxJRlZGSUVsdWMzUmhibU5sWEc0Z0lDQWdJQ29nUUhCaGNtRnRJRzF2ZFhObFJYWmxiblFnTFNCTmIzVnpaU0JGZG1WdWRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUdoaGJtUnNaVkJ5WlhOelRXOTFjMlZDZFhSMGIyNXpLRzF2ZFhObFJYWmxiblE2SUUxdmRYTmxSWFpsYm5RcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMblpwWkdWdlJXeGxiV1Z1ZEZCeWIzWnBaR1Z5TG1selZtbGtaVzlTWldGa2VTZ3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1dGIzVnpaVU52Ym5SeWIyeHNaWEl1Y0hKbGMzTk5iM1Z6WlVKMWRIUnZibk1vWEc0Z0lDQWdJQ0FnSUNBZ0lDQnRiM1Z6WlVWMlpXNTBMbUoxZEhSdmJuTXNYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbmdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5sY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQklZVzVrYkdVZ2RHaGxJSEpsYkdWaGMyVWdiVzkxYzJVZ1luVjBkRzl1Y3lCbGRtVnVkQ3dnYzJWdVpITWdkR2hsSUcxdmRYTmxJR1JoZEdFZ2RHOGdkR2hsSUZWRklFbHVjM1JoYm1ObFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUcxdmRYTmxSWFpsYm5RZ0xTQk5iM1Z6WlNCRmRtVnVkRnh1SUNBZ0lDQXFMMXh1SUNBZ0lHaGhibVJzWlZKbGJHVmhjMlZOYjNWelpVSjFkSFJ2Ym5Nb2JXOTFjMlZGZG1WdWREb2dUVzkxYzJWRmRtVnVkQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdWRtbGtaVzlGYkdWdFpXNTBVSEp2ZG1sa1pYSXVhWE5XYVdSbGIxSmxZV1I1S0NrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMGFHbHpMbTF2ZFhObFEyOXVkSEp2Ykd4bGNpNXlaV3hsWVhObFRXOTFjMlZDZFhSMGIyNXpLRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JXOTFjMlZGZG1WdWRDNWlkWFIwYjI1ekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTU1WEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRVY0ZEhKaElIUjVjR1Z6SUdadmNpQkViMk4xYldWdWRDQmhibVFnVjJobFpXeEZkbVZ1ZEZ4dUlDb3ZYRzVrWldOc1lYSmxJR2RzYjJKaGJDQjdYRzRnSUNBZ2FXNTBaWEptWVdObElFUnZZM1Z0Wlc1MElIdGNiaUFnSUNBZ0lDQWdiVzk2VUc5cGJuUmxja3h2WTJ0RmJHVnRaVzUwT2lCMWJtdHViM2R1TzF4dUlDQWdJQ0FnSUNCdGIzcEZlR2wwVUc5cGJuUmxja3h2WTJzL0tDazZJSFp2YVdRN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVc1MFpYSm1ZV05sSUZkb1pXVnNSWFpsYm5RZ2UxeHVJQ0FnSUNBZ0lDQjNhR1ZsYkVSbGJIUmhPaUJ1ZFcxaVpYSTdYRzRnSUNBZ2ZWeHVmVnh1SWl3aUx5OGdRMjl3ZVhKcFoyaDBJRVZ3YVdNZ1IyRnRaWE1zSUVsdVl5NGdRV3hzSUZKcFoyaDBjeUJTWlhObGNuWmxaQzVjYmx4dUx5b3FYRzRnS2lCTmIzVnpaU0JDZFhSMGIyNGdSR0YwWVZ4dUlDb2dlMEJzYVc1cklHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtMXZlbWxzYkdFdWIzSm5MMlZ1TFZWVEwyUnZZM012VjJWaUwwRlFTUzlOYjNWelpVVjJaVzUwTDJKMWRIUnZibjFjYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUUxdmRYTmxRblYwZEc5dUlIdGNiaUFnSUNCemRHRjBhV01nYldGcGJrSjFkSFJ2YmlBOUlEQTdJQzh2SUV4bFpuUWdZblYwZEc5dUxseHVJQ0FnSUhOMFlYUnBZeUJoZFhocGJHbGhjbmxDZFhSMGIyNGdQU0F4T3lBdkx5QlhhR1ZsYkNCaWRYUjBiMjR1WEc0Z0lDQWdjM1JoZEdsaklITmxZMjl1WkdGeWVVSjFkSFJ2YmlBOUlESTdJQzh2SUZKcFoyaDBJR0oxZEhSdmJpNWNiaUFnSUNCemRHRjBhV01nWm05MWNuUm9RblYwZEc5dUlEMGdNenNnTHk4Z1FuSnZkM05sY2lCQ1lXTnJJR0oxZEhSdmJpNWNiaUFnSUNCemRHRjBhV01nWm1sbWRHaENkWFIwYjI0Z1BTQTBPeUF2THlCQ2NtOTNjMlZ5SUVadmNuZGhjbVFnWW5WMGRHOXVMbHh1ZlZ4dVhHNHZLaXBjYmlBcUlFMXZkWE5sSUVKMWRIUnZiaUJOWVhOcklFUmhkR0ZjYmlBcUlIdEFiR2x1YXlCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1dGIzcHBiR3hoTG05eVp5OWxiaTFWVXk5a2IyTnpMMWRsWWk5QlVFa3ZUVzkxYzJWRmRtVnVkQzlpZFhSMGIyNXpmVnh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nVFc5MWMyVkNkWFIwYjI1elRXRnpheUI3WEc0Z0lDQWdjM1JoZEdsaklIQnlhVzFoY25sQ2RYUjBiMjRnUFNBeE95QXZMeUJNWldaMElHSjFkSFJ2Ymk1Y2JpQWdJQ0J6ZEdGMGFXTWdjMlZqYjI1a1lYSjVRblYwZEc5dUlEMGdNanNnTHk4Z1VtbG5hSFFnWW5WMGRHOXVMbHh1SUNBZ0lITjBZWFJwWXlCaGRYaHBiR2xoY25sQ2RYUjBiMjRnUFNBME95QXZMeUJYYUdWbGJDQmlkWFIwYjI0dVhHNGdJQ0FnYzNSaGRHbGpJR1p2ZFhKMGFFSjFkSFJ2YmlBOUlEZzdJQzh2SUVKeWIzZHpaWElnUW1GamF5QmlkWFIwYjI0dVhHNGdJQ0FnYzNSaGRHbGpJR1pwWm5Sb1FuVjBkRzl1SUQwZ01UWTdJQzh2SUVKeWIzZHpaWElnUm05eWQyRnlaQ0JpZFhSMGIyNHVYRzU5WEc0aUxDSXZMeUJEYjNCNWNtbG5hSFFnUlhCcFl5QkhZVzFsY3l3Z1NXNWpMaUJCYkd3Z1VtbG5hSFJ6SUZKbGMyVnlkbVZrTGx4dVhHNXBiWEJ2Y25RZ2V5Qk5iM1Z6WlVKMWRIUnZibk5OWVhOckxDQk5iM1Z6WlVKMWRIUnZiaUI5SUdaeWIyMGdKeTR2VFc5MWMyVkNkWFIwYjI1ekp6dGNibWx0Y0c5eWRDQjdJRXh2WjJkbGNpQjlJR1p5YjIwZ0p5NHVMMHh2WjJkbGNpOU1iMmRuWlhJbk8xeHVhVzF3YjNKMElIc2dVM1J5WldGdFRXVnpjMkZuWlVOdmJuUnliMnhzWlhJZ2ZTQm1jbTl0SUNjdUxpOVZaVWx1YzNSaGJtTmxUV1Z6YzJGblpTOVRkSEpsWVcxTlpYTnpZV2RsUTI5dWRISnZiR3hsY2ljN1hHNXBiWEJ2Y25RZ2V5QkRiMjl5WkdsdVlYUmxRMjl1ZG1WeWRHVnlJSDBnWm5KdmJTQW5MaTR2VlhScGJDOURiMjl5WkdsdVlYUmxRMjl1ZG1WeWRHVnlKenRjYm1sdGNHOXlkQ0I3SUZacFpHVnZVR3hoZVdWeUlIMGdabkp2YlNBbkxpNHZWbWxrWlc5UWJHRjVaWEl2Vm1sa1pXOVFiR0Y1WlhJbk8xeHVhVzF3YjNKMElIc2dTVTF2ZFhObFJYWmxiblJ6SUgwZ1puSnZiU0FuTGk5SlRXOTFjMlZGZG1WdWRITW5PMXh1YVcxd2IzSjBJSHNnVEc5amEyVmtUVzkxYzJWRmRtVnVkSE1nZlNCbWNtOXRJQ2N1TDB4dlkydGxaRTF2ZFhObFJYWmxiblJ6Snp0Y2JtbHRjRzl5ZENCN0lFaHZkbVZ5YVc1blRXOTFjMlZGZG1WdWRITWdmU0JtY205dElDY3VMMGh2ZG1WeWFXNW5UVzkxYzJWRmRtVnVkSE1uTzF4dWFXMXdiM0owSUhSNWNHVWdleUJCWTNScGRtVkxaWGx6SUgwZ1puSnZiU0FuTGk5SmJuQjFkRU5zWVhOelpYTkdZV04wYjNKNUp6dGNibWx0Y0c5eWRDQjdJRVYyWlc1MFRHbHpkR1Z1WlhKVWNtRmphMlZ5SUgwZ1puSnZiU0FuTGk0dlZYUnBiQzlGZG1WdWRFeHBjM1JsYm1WeVZISmhZMnRsY2ljN1hHNWNiaThxS2x4dUlDb2dTR0Z1Wkd4bGN5QjBhR1VnVFc5MWMyVWdTVzV3ZFhSeklHWnZjaUIwYUdVZ1pHOWpkVzFsYm5SY2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklFMXZkWE5sUTI5dWRISnZiR3hsY2lCN1hHNGdJQ0FnZG1sa1pXOUZiR1Z0Wlc1MFVISnZkbWxrWlhJNklGWnBaR1Z2VUd4aGVXVnlPMXh1SUNBZ0lIUnZVM1J5WldGdFpYSk5aWE56WVdkbGMxQnliM1pwWkdWeU9pQlRkSEpsWVcxTlpYTnpZV2RsUTI5dWRISnZiR3hsY2p0Y2JpQWdJQ0JqYjI5eVpHbHVZWFJsUTI5dWRtVnlkR1Z5T2lCRGIyOXlaR2x1WVhSbFEyOXVkbVZ5ZEdWeU8xeHVJQ0FnSUdGamRHbDJaVXRsZVhOUWNtOTJhV1JsY2pvZ1FXTjBhWFpsUzJWNWN6dGNibHh1SUNBZ0lDOHZJRlYwYVd4cGRIa2dabTl5SUd0bFpYQnBibWNnZEhKaFkyc2diMllnWlhabGJuUWdhR0Z1Wkd4bGNuTWdZVzVrSUhWdWNtVm5hWE4wWlhKcGJtY2dkR2hsYlZ4dUlDQWdJSEJ5YVhaaGRHVWdiVzkxYzJWRmRtVnVkRXhwYzNSbGJtVnlWSEpoWTJ0bGNpQTlJRzVsZHlCRmRtVnVkRXhwYzNSbGJtVnlWSEpoWTJ0bGNpZ3BPMXh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSFJ2VTNSeVpXRnRaWEpOWlhOellXZGxjMUJ5YjNacFpHVnlJQzBnVTNSeVpXRnRJRzFsYzNOaFoyVWdhVzV6ZEdGdVkyVmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2RtbGtaVzlGYkdWdFpXNTBVSEp2ZG1sa1pYSWdMU0JXYVdSbGJ5QlFiR0Y1WlhJZ2FXNXpkR0Z1WTJWY2JpQWdJQ0FnS2lCQWNHRnlZVzBnYm05eWJXRnNhWHBsUVc1a1VYVmhiblJwZW1VZ0xTQkJJRzV2Y20xaGJHbDZaU0JoYm1RZ2NYVmhiblJwZW1VZ2FXNXpkR0Z1WTJWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2loY2JpQWdJQ0FnSUNBZ2RHOVRkSEpsWVcxbGNrMWxjM05oWjJWelVISnZkbWxrWlhJNklGTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5TEZ4dUlDQWdJQ0FnSUNCMmFXUmxiMFZzWlcxbGJuUlFjbTkyYVdSbGNqb2dWbWxrWlc5UWJHRjVaWElzWEc0Z0lDQWdJQ0FnSUdOdmIzSmthVzVoZEdWRGIyNTJaWEowWlhJNklFTnZiM0prYVc1aGRHVkRiMjUyWlhKMFpYSXNYRzRnSUNBZ0lDQWdJR0ZqZEdsMlpVdGxlWE5RY205MmFXUmxjam9nUVdOMGFYWmxTMlY1YzF4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMblJ2VTNSeVpXRnRaWEpOWlhOellXZGxjMUJ5YjNacFpHVnlJRDBnZEc5VGRISmxZVzFsY2sxbGMzTmhaMlZ6VUhKdmRtbGtaWEk3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMjl2Y21ScGJtRjBaVU52Ym5abGNuUmxjaUE5SUdOdmIzSmthVzVoZEdWRGIyNTJaWEowWlhJN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZG1sa1pXOUZiR1Z0Wlc1MFVISnZkbWxrWlhJZ1BTQjJhV1JsYjBWc1pXMWxiblJRY205MmFXUmxjanRjYmlBZ0lDQWdJQ0FnZEdocGN5NWhZM1JwZG1WTFpYbHpVSEp2ZG1sa1pYSWdQU0JoWTNScGRtVkxaWGx6VUhKdmRtbGtaWEk3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbVZuYVhOMFpYSk5iM1Z6WlVWdWRHVnlRVzVrVEdWaGRtVkZkbVZ1ZEhNb0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkRiR1ZoY25NZ1lXeHNJSFJvWlNCamJHbGpheUJsZG1WdWRITWdiMjRnZEdobElHTjFjbkpsYm5RZ2RtbGtaVzhnWld4bGJXVnVkQ0J3WVhKbGJuUWdaR2wyWEc0Z0lDQWdJQ292WEc0Z0lDQWdkVzV5WldkcGMzUmxjazF2ZFhObFJYWmxiblJ6S0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG0xdmRYTmxSWFpsYm5STWFYTjBaVzVsY2xSeVlXTnJaWEl1ZFc1eVpXZHBjM1JsY2tGc2JDZ3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRkpsWjJsemRHVnlJR0VnYkc5amEyVmtJRzF2ZFhObElHTnNZWE56WEc0Z0lDQWdJQ29nUUhCaGNtRnRJRzF2ZFhObFEyOXVkSEp2Ykd4bGNpQXRJR0VnYlc5MWMyVWdZMjl1ZEhKdmJHeGxjaUJwYm5OMFlXNWpaVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQndiR0Y1WlhKVGRIbHNaVUYwZEhKcFluVjBaWE5RY205MmFXUmxjaUF0SUdFZ2NHeGhlV1Z5SUhOMGVXeGxJR0YwZEhKcFluVjBaWE1nYVc1emRHRnVZMlZjYmlBZ0lDQWdLaTljYmlBZ0lDQnlaV2RwYzNSbGNreHZZMnRsWkUxdmRYTmxSWFpsYm5SektHMXZkWE5sUTI5dWRISnZiR3hsY2pvZ1RXOTFjMlZEYjI1MGNtOXNiR1Z5S1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhacFpHVnZSV3hsYldWdWRGQmhjbVZ1ZENBOVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuWnBaR1Z2Uld4bGJXVnVkRkJ5YjNacFpHVnlMbWRsZEZacFpHVnZVR0Z5Wlc1MFJXeGxiV1Z1ZENncElHRnpJRWhVVFV4RWFYWkZiR1Z0Wlc1ME8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCc2IyTnJaV1JOYjNWelpVVjJaVzUwY3pvZ1NVMXZkWE5sUlhabGJuUnpJRDBnYm1WM0lFeHZZMnRsWkUxdmRYTmxSWFpsYm5SektGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTJhV1JsYjBWc1pXMWxiblJRY205MmFXUmxjaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHMXZkWE5sUTI5dWRISnZiR3hsY2l4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVlXTjBhWFpsUzJWNWMxQnliM1pwWkdWeVhHNGdJQ0FnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJQ0FnZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwTG5KbGNYVmxjM1JRYjJsdWRHVnlURzlqYXlBOVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyYVdSbGIwVnNaVzFsYm5SUVlYSmxiblF1Y21WeGRXVnpkRkJ2YVc1MFpYSk1iMk5ySUh4OFhHNGdJQ0FnSUNBZ0lDQWdJQ0IyYVdSbGIwVnNaVzFsYm5SUVlYSmxiblF1Ylc5NlVtVnhkV1Z6ZEZCdmFXNTBaWEpNYjJOck8xeHVJQ0FnSUNBZ0lDQmtiMk4xYldWdWRDNWxlR2wwVUc5cGJuUmxja3h2WTJzZ1BWeHVJQ0FnSUNBZ0lDQWdJQ0FnWkc5amRXMWxiblF1WlhocGRGQnZhVzUwWlhKTWIyTnJJSHg4SUdSdlkzVnRaVzUwTG0xdmVrVjRhWFJRYjJsdWRHVnlURzlqYXp0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJ0YVc1dmNpQm9ZV05ySUhSdklHRnNiR1YyYVdGMFpTQnBiM01nYm05MElITjFjSEJ2Y25ScGJtY2djRzlwYm5SbGNteHZZMnRjYmlBZ0lDQWdJQ0FnYVdZZ0tIWnBaR1Z2Uld4bGJXVnVkRkJoY21WdWRDNXlaWEYxWlhOMFVHOXBiblJsY2t4dlkyc3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUc5dVkyeHBZMnNnUFNBb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwTG5KbGNYVmxjM1JRYjJsdWRHVnlURzlqYXlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpwWkdWdlJXeGxiV1Z1ZEZCaGNtVnVkQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2RqYkdsamF5Y3NJRzl1WTJ4cFkyc3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV0YjNWelpVVjJaVzUwVEdsemRHVnVaWEpVY21GamEyVnlMbUZrWkZWdWNtVm5hWE4wWlhKRFlXeHNZbUZqYXloY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb0tTQTlQaUIyYVdSbGIwVnNaVzFsYm5SUVlYSmxiblF1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnblkyeHBZMnNuTENCdmJtTnNhV05yS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUd4dlkydFRkR0YwWlVOb1lXNW5aVXhwYzNSbGJtVnlJRDBnS0NrZ1BUNWNiaUFnSUNBZ0lDQWdJQ0FnSUd4dlkydGxaRTF2ZFhObFJYWmxiblJ6TG14dlkydFRkR0YwWlVOb1lXNW5aU2dwTzF4dUlDQWdJQ0FnSUNCa2IyTjFiV1Z1ZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdKM0J2YVc1MFpYSnNiMk5yWTJoaGJtZGxKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHeHZZMnRUZEdGMFpVTm9ZVzVuWlV4cGMzUmxibVZ5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdabUZzYzJWY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdaRzlqZFcxbGJuUXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNkdGIzcHdiMmx1ZEdWeWJHOWphMk5vWVc1blpTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNCc2IyTnJVM1JoZEdWRGFHRnVaMlZNYVhOMFpXNWxjaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHWmhiSE5sWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Ylc5MWMyVkZkbVZ1ZEV4cGMzUmxibVZ5VkhKaFkydGxjaTVoWkdSVmJuSmxaMmx6ZEdWeVEyRnNiR0poWTJzb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvS1NBOVBpQmtiMk4xYldWdWRDNXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2R3YjJsdWRHVnliRzlqYTJOb1lXNW5aU2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkc5amExTjBZWFJsUTJoaGJtZGxUR2x6ZEdWdVpYSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabUZzYzJWY2JpQWdJQ0FnSUNBZ0lDQWdJQ2xjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV0YjNWelpVVjJaVzUwVEdsemRHVnVaWEpVY21GamEyVnlMbUZrWkZWdWNtVm5hWE4wWlhKRFlXeHNZbUZqYXloY2JpQWdJQ0FnSUNBZ0lDQWdJQ2dwSUQwK0lHUnZZM1Z0Wlc1MExuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMjF2ZW5CdmFXNTBaWEpzYjJOclkyaGhibWRsSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2IyTnJVM1JoZEdWRGFHRnVaMlZNYVhOMFpXNWxjaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtWVd4elpWeHVJQ0FnSUNBZ0lDQWdJQ0FnS1Z4dUlDQWdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQWdJR052Ym5OMElHOXViVzkxYzJWa2IzZHVJRDBnS0cxdmRYTmxSWFpsYm5RNklFMXZkWE5sUlhabGJuUXBJRDArWEc0Z0lDQWdJQ0FnSUNBZ0lDQnNiMk5yWldSTmIzVnpaVVYyWlc1MGN5NW9ZVzVrYkdWTmIzVnpaVVJ2ZDI0b2JXOTFjMlZGZG1WdWRDazdYRzRnSUNBZ0lDQWdJR052Ym5OMElHOXViVzkxYzJWMWNDQTlJQ2h0YjNWelpVVjJaVzUwT2lCTmIzVnpaVVYyWlc1MEtTQTlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHOWphMlZrVFc5MWMyVkZkbVZ1ZEhNdWFHRnVaR3hsVFc5MWMyVlZjQ2h0YjNWelpVVjJaVzUwS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYjI1M2FHVmxiQ0E5SUNoM2FHVmxiRVYyWlc1ME9pQlhhR1ZsYkVWMlpXNTBLU0E5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdiRzlqYTJWa1RXOTFjMlZGZG1WdWRITXVhR0Z1Wkd4bFRXOTFjMlZYYUdWbGJDaDNhR1ZsYkVWMlpXNTBLVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdiMjVrWW14amJHbGpheUE5SUNodGIzVnpaVVYyWlc1ME9pQk5iM1Z6WlVWMlpXNTBLU0E5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdiRzlqYTJWa1RXOTFjMlZGZG1WdWRITXVhR0Z1Wkd4bFRXOTFjMlZFYjNWaWJHVW9iVzkxYzJWRmRtVnVkQ2s3WEc0Z0lDQWdJQ0FnSUhacFpHVnZSV3hsYldWdWRGQmhjbVZ1ZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkdGIzVnpaV1J2ZDI0bkxDQnZibTF2ZFhObFpHOTNiaWs3WEc0Z0lDQWdJQ0FnSUhacFpHVnZSV3hsYldWdWRGQmhjbVZ1ZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkdGIzVnpaWFZ3Snl3Z2IyNXRiM1Z6WlhWd0tUdGNiaUFnSUNBZ0lDQWdkbWxrWlc5RmJHVnRaVzUwVUdGeVpXNTBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KM2RvWldWc0p5d2diMjUzYUdWbGJDazdYRzRnSUNBZ0lDQWdJSFpwWkdWdlJXeGxiV1Z1ZEZCaGNtVnVkQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2RrWW14amJHbGpheWNzSUc5dVpHSnNZMnhwWTJzcE8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdWJXOTFjMlZGZG1WdWRFeHBjM1JsYm1WeVZISmhZMnRsY2k1aFpHUlZibkpsWjJsemRHVnlRMkZzYkdKaFkyc29YRzRnSUNBZ0lDQWdJQ0FnSUNBb0tTQTlQaUIyYVdSbGIwVnNaVzFsYm5SUVlYSmxiblF1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnbmJXOTFjMlZrYjNkdUp5d2diMjV0YjNWelpXUnZkMjRwWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Ylc5MWMyVkZkbVZ1ZEV4cGMzUmxibVZ5VkhKaFkydGxjaTVoWkdSVmJuSmxaMmx6ZEdWeVEyRnNiR0poWTJzb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvS1NBOVBpQjJhV1JsYjBWc1pXMWxiblJRWVhKbGJuUXVjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWduYlc5MWMyVjFjQ2NzSUc5dWJXOTFjMlYxY0NsY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dGIzVnpaVVYyWlc1MFRHbHpkR1Z1WlhKVWNtRmphMlZ5TG1Ga1pGVnVjbVZuYVhOMFpYSkRZV3hzWW1GamF5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNncElEMCtJSFpwWkdWdlJXeGxiV1Z1ZEZCaGNtVnVkQzV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0NkM2FHVmxiQ2NzSUc5dWQyaGxaV3dwWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Ylc5MWMyVkZkbVZ1ZEV4cGMzUmxibVZ5VkhKaFkydGxjaTVoWkdSVmJuSmxaMmx6ZEdWeVEyRnNiR0poWTJzb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvS1NBOVBpQjJhV1JsYjBWc1pXMWxiblJRWVhKbGJuUXVjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWduWkdKc1kyeHBZMnNuTENCdmJtUmliR05zYVdOcktWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtMXZkWE5sUlhabGJuUk1hWE4wWlc1bGNsUnlZV05yWlhJdVlXUmtWVzV5WldkcGMzUmxja05oYkd4aVlXTnJLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tDa2dQVDRnYkc5amEyVmtUVzkxYzJWRmRtVnVkSE11ZFc1eVpXZHBjM1JsY2sxdmRYTmxSWFpsYm5SektDbGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXRiM1Z6WlVWMlpXNTBUR2x6ZEdWdVpYSlVjbUZqYTJWeUxtRmtaRlZ1Y21WbmFYTjBaWEpEWVd4c1ltRmpheWdvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaRzlqZFcxbGJuUXVaWGhwZEZCdmFXNTBaWEpNYjJOcklDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLR1J2WTNWdFpXNTBMbkJ2YVc1MFpYSk1iMk5yUld4bGJXVnVkQ0E5UFQwZ2RtbGtaVzlGYkdWdFpXNTBVR0Z5Wlc1MElIeDhYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSdlkzVnRaVzUwTG0xdmVsQnZhVzUwWlhKTWIyTnJSV3hsYldWdWRDQTlQVDBnZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkc5amRXMWxiblF1WlhocGRGQnZhVzUwWlhKTWIyTnJLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZKbFoybHpkR1Z5SUdFZ2FHOTJaWEpwYm1jZ2JXOTFjMlVnWTJ4aGMzTmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2JXOTFjMlZEYjI1MGNtOXNiR1Z5SUMwZ1FTQnRiM1Z6WlNCamIyNTBjbTlzYkdWeUlHOWlhbVZqZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJSEpsWjJsemRHVnlTRzkyWlhKcGJtZE5iM1Z6WlVWMlpXNTBjeWh0YjNWelpVTnZiblJ5YjJ4c1pYSTZJRTF2ZFhObFEyOXVkSEp2Ykd4bGNpa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjJhV1JsYjBWc1pXMWxiblJRWVhKbGJuUWdQVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUyYVdSbGIwVnNaVzFsYm5SUWNtOTJhV1JsY2k1blpYUldhV1JsYjFCaGNtVnVkRVZzWlcxbGJuUW9LU0JoY3lCSVZFMU1SR2wyUld4bGJXVnVkRHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdhRzkyWlhKcGJtZE5iM1Z6WlVWMlpXNTBjeUE5SUc1bGR5QkliM1psY21sdVowMXZkWE5sUlhabGJuUnpLRzF2ZFhObFEyOXVkSEp2Ykd4bGNpazdYRzVjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdiMjV0YjNWelpXMXZkbVVnUFNBb2JXOTFjMlZGZG1WdWREb2dUVzkxYzJWRmRtVnVkQ2tnUFQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJR2h2ZG1WeWFXNW5UVzkxYzJWRmRtVnVkSE11ZFhCa1lYUmxUVzkxYzJWTmIzWmxVRzl6YVhScGIyNG9iVzkxYzJWRmRtVnVkQ2s3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRzl1Ylc5MWMyVmtiM2R1SUQwZ0tHMXZkWE5sUlhabGJuUTZJRTF2ZFhObFJYWmxiblFwSUQwK1hHNGdJQ0FnSUNBZ0lDQWdJQ0JvYjNabGNtbHVaMDF2ZFhObFJYWmxiblJ6TG1oaGJtUnNaVTF2ZFhObFJHOTNiaWh0YjNWelpVVjJaVzUwS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYjI1dGIzVnpaWFZ3SUQwZ0tHMXZkWE5sUlhabGJuUTZJRTF2ZFhObFJYWmxiblFwSUQwK1hHNGdJQ0FnSUNBZ0lDQWdJQ0JvYjNabGNtbHVaMDF2ZFhObFJYWmxiblJ6TG1oaGJtUnNaVTF2ZFhObFZYQW9iVzkxYzJWRmRtVnVkQ2s3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRzl1WTI5dWRHVjRkRzFsYm5VZ1BTQW9iVzkxYzJWRmRtVnVkRG9nVFc5MWMyVkZkbVZ1ZENrZ1BUNWNiaUFnSUNBZ0lDQWdJQ0FnSUdodmRtVnlhVzVuVFc5MWMyVkZkbVZ1ZEhNdWFHRnVaR3hsUTI5dWRHVjRkRTFsYm5Vb2JXOTFjMlZGZG1WdWRDazdYRzRnSUNBZ0lDQWdJR052Ym5OMElHOXVkMmhsWld3Z1BTQW9kMmhsWld4RmRtVnVkRG9nVjJobFpXeEZkbVZ1ZENrZ1BUNWNiaUFnSUNBZ0lDQWdJQ0FnSUdodmRtVnlhVzVuVFc5MWMyVkZkbVZ1ZEhNdWFHRnVaR3hsVFc5MWMyVlhhR1ZsYkNoM2FHVmxiRVYyWlc1MEtUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2IyNWtZbXhqYkdsamF5QTlJQ2h0YjNWelpVVjJaVzUwT2lCTmIzVnpaVVYyWlc1MEtTQTlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FHOTJaWEpwYm1kTmIzVnpaVVYyWlc1MGN5NW9ZVzVrYkdWTmIzVnpaVVJ2ZFdKc1pTaHRiM1Z6WlVWMlpXNTBLVHRjYmlBZ0lDQWdJQ0FnZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjIxdmRYTmxiVzkyWlNjc0lHOXViVzkxYzJWdGIzWmxLVHRjYmlBZ0lDQWdJQ0FnZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjIxdmRYTmxaRzkzYmljc0lHOXViVzkxYzJWa2IzZHVLVHRjYmlBZ0lDQWdJQ0FnZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjIxdmRYTmxkWEFuTENCdmJtMXZkWE5sZFhBcE8xeHVJQ0FnSUNBZ0lDQjJhV1JsYjBWc1pXMWxiblJRWVhKbGJuUXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25ZMjl1ZEdWNGRHMWxiblVuTENCdmJtTnZiblJsZUhSdFpXNTFLVHRjYmlBZ0lDQWdJQ0FnZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjNkb1pXVnNKeXdnYjI1M2FHVmxiQ2s3WEc0Z0lDQWdJQ0FnSUhacFpHVnZSV3hsYldWdWRGQmhjbVZ1ZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0Nka1lteGpiR2xqYXljc0lHOXVaR0pzWTJ4cFkyc3BPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXViVzkxYzJWRmRtVnVkRXhwYzNSbGJtVnlWSEpoWTJ0bGNpNWhaR1JWYm5KbFoybHpkR1Z5UTJGc2JHSmhZMnNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9LU0E5UGlCMmFXUmxiMFZzWlcxbGJuUlFZWEpsYm5RdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpZ25iVzkxYzJWdGIzWmxKeXdnYjI1dGIzVnpaVzF2ZG1VcFhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJXOTFjMlZGZG1WdWRFeHBjM1JsYm1WeVZISmhZMnRsY2k1aFpHUlZibkpsWjJsemRHVnlRMkZzYkdKaFkyc29YRzRnSUNBZ0lDQWdJQ0FnSUNBb0tTQTlQaUIyYVdSbGIwVnNaVzFsYm5SUVlYSmxiblF1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnbmJXOTFjMlZrYjNkdUp5d2diMjV0YjNWelpXUnZkMjRwWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Ylc5MWMyVkZkbVZ1ZEV4cGMzUmxibVZ5VkhKaFkydGxjaTVoWkdSVmJuSmxaMmx6ZEdWeVEyRnNiR0poWTJzb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvS1NBOVBpQjJhV1JsYjBWc1pXMWxiblJRWVhKbGJuUXVjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWduYlc5MWMyVjFjQ2NzSUc5dWJXOTFjMlYxY0NsY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dGIzVnpaVVYyWlc1MFRHbHpkR1Z1WlhKVWNtRmphMlZ5TG1Ga1pGVnVjbVZuYVhOMFpYSkRZV3hzWW1GamF5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNncElEMCtJSFpwWkdWdlJXeGxiV1Z1ZEZCaGNtVnVkQzV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0NkamIyNTBaWGgwYldWdWRTY3NJRzl1WTI5dWRHVjRkRzFsYm5VcFhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJXOTFjMlZGZG1WdWRFeHBjM1JsYm1WeVZISmhZMnRsY2k1aFpHUlZibkpsWjJsemRHVnlRMkZzYkdKaFkyc29YRzRnSUNBZ0lDQWdJQ0FnSUNBb0tTQTlQaUIyYVdSbGIwVnNaVzFsYm5SUVlYSmxiblF1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnbmQyaGxaV3duTENCdmJuZG9aV1ZzS1Z4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG0xdmRYTmxSWFpsYm5STWFYTjBaVzVsY2xSeVlXTnJaWEl1WVdSa1ZXNXlaV2RwYzNSbGNrTmhiR3hpWVdOcktGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0NrZ1BUNGdkbWxrWlc5RmJHVnRaVzUwVUdGeVpXNTBMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvSjJSaWJHTnNhV05ySnl3Z2IyNWtZbXhqYkdsamF5bGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXRiM1Z6WlVWMlpXNTBUR2x6ZEdWdVpYSlVjbUZqYTJWeUxtRmtaRlZ1Y21WbmFYTjBaWEpEWVd4c1ltRmpheWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDZ3BJRDArSUdodmRtVnlhVzVuVFc5MWMyVkZkbVZ1ZEhNdWRXNXlaV2RwYzNSbGNrMXZkWE5sUlhabGJuUnpLQ2xjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVFpYUWdkR2hsSUcxdmRYTmxJR1Z1ZEdWeUlHRnVaQ0J0YjNWelpTQnNaV0YyWlNCbGRtVnVkSE5jYmlBZ0lDQWdLaTljYmlBZ0lDQnlaV2RwYzNSbGNrMXZkWE5sUlc1MFpYSkJibVJNWldGMlpVVjJaVzUwY3lncElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2RtbGtaVzlGYkdWdFpXNTBVR0Z5Wlc1MElEMWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkbWxrWlc5RmJHVnRaVzUwVUhKdmRtbGtaWEl1WjJWMFZtbGtaVzlRWVhKbGJuUkZiR1Z0Wlc1MEtDa2dZWE1nU0ZSTlRFUnBka1ZzWlcxbGJuUTdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1NHRnVaR3hsSUhkb1pXNGdkR2hsSUUxdmRYTmxJR2hoY3lCbGJuUmxjbVZrSUhSb1pTQmxiR1Z0Wlc1MFhHNGdJQ0FnSUNBZ0lHTnZibk4wSUc5dWJXOTFjMlZsYm5SbGNpQTlJQ2hsZG1WdWREb2dUVzkxYzJWRmRtVnVkQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TG5acFpHVnZSV3hsYldWdWRGQnliM1pwWkdWeUxtbHpWbWxrWlc5U1pXRmtlU2dwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGt4dlp5aE1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTENBblRXOTFjMlVnUlc1MFpYSmxaQ2NzSURZcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaVzVrVFc5MWMyVkZiblJsY2lncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdjbVZ6YzAxdmRYTmxRblYwZEc5dWN5aGxkbVZ1ZEM1aWRYUjBiMjV6TENCbGRtVnVkQzU0TENCbGRtVnVkQzU1S1R0Y2JpQWdJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdJQ0F2THlCSVlXNWtiR1Z6SUhkb1pXNGdkR2hsSUcxdmRYTmxJR2hoY3lCc1pXWjBJSFJvWlNCbGJHVnRaVzUwWEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRzl1Ylc5MWMyVnNaV0YyWlNBOUlDaGxkbVZ1ZERvZ1RXOTFjMlZGZG1WdWRDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMblpwWkdWdlJXeGxiV1Z1ZEZCeWIzWnBaR1Z5TG1selZtbGtaVzlTWldGa2VTZ3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa3h2WnloTWIyZG5aWEl1UjJWMFUzUmhZMnRVY21GalpTZ3BMQ0FuVFc5MWMyVWdUR1ZtZENjc0lEWXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6Wlc1a1RXOTFjMlZNWldGMlpTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV5Wld4bFlYTmxUVzkxYzJWQ2RYUjBiMjV6S0dWMlpXNTBMbUoxZEhSdmJuTXNJR1YyWlc1MExuZ3NJR1YyWlc1MExua3BPMXh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNCMmFXUmxiMFZzWlcxbGJuUlFZWEpsYm5RdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnbmJXOTFjMlZsYm5SbGNpY3NJRzl1Ylc5MWMyVmxiblJsY2lrN1hHNGdJQ0FnSUNBZ0lIWnBaR1Z2Uld4bGJXVnVkRkJoY21WdWRDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZHRiM1Z6Wld4bFlYWmxKeXdnYjI1dGIzVnpaV3hsWVhabEtUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxtMXZkWE5sUlhabGJuUk1hWE4wWlc1bGNsUnlZV05yWlhJdVlXUmtWVzV5WldkcGMzUmxja05oYkd4aVlXTnJLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tDa2dQVDRnZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwTG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb0oyMXZkWE5sWlc1MFpYSW5MQ0J2Ym0xdmRYTmxaVzUwWlhJcFhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJXOTFjMlZGZG1WdWRFeHBjM1JsYm1WeVZISmhZMnRsY2k1aFpHUlZibkpsWjJsemRHVnlRMkZzYkdKaFkyc29YRzRnSUNBZ0lDQWdJQ0FnSUNBb0tTQTlQaUIyYVdSbGIwVnNaVzFsYm5SUVlYSmxiblF1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnbmJXOTFjMlZzWldGMlpTY3NJRzl1Ylc5MWMyVnNaV0YyWlNsY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQklZVzVrYkdVZ2QyaGxiaUJoSUcxdmRYTmxJR0oxZEhSdmJpQnBjeUJ5Wld4bFlYTmxaRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmlkWFIwYjI1eklDMGdUVzkxYzJVZ1FuVjBkRzl1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJRmdnTFNCTmIzVnpaU0J3YjJsdWRHVnlJRmdnWTI5dmNtUnBibUYwWlZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0JaSUMwZ1RXOTFjMlVnY0c5cGJuUmxjaUJaSUdOdmIzSmthVzVoZEdWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J5Wld4bFlYTmxUVzkxYzJWQ2RYUjBiMjV6S0dKMWRIUnZibk02SUc1MWJXSmxjaXdnV0RvZ2JuVnRZbVZ5TENCWk9pQnVkVzFpWlhJcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1kyOXZjbVFnUFNCMGFHbHpMbU52YjNKa2FXNWhkR1ZEYjI1MlpYSjBaWEl1Ym05eWJXRnNhWHBsUVc1a1VYVmhiblJwZW1WVmJuTnBaMjVsWkNoY2JpQWdJQ0FnSUNBZ0lDQWdJRmdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQlpYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaGlkWFIwYjI1eklDWWdUVzkxYzJWQ2RYUjBiMjV6VFdGemF5NXdjbWx0WVhKNVFuVjBkRzl1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTmxibVJOYjNWelpWVndLRTF2ZFhObFFuVjBkRzl1TG0xaGFXNUNkWFIwYjI0c0lHTnZiM0prTG5nc0lHTnZiM0prTG5rcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNoaWRYUjBiMjV6SUNZZ1RXOTFjMlZDZFhSMGIyNXpUV0Z6YXk1elpXTnZibVJoY25sQ2RYUjBiMjRwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVnVaRTF2ZFhObFZYQW9UVzkxYzJWQ2RYUjBiMjR1YzJWamIyNWtZWEo1UW5WMGRHOXVMQ0JqYjI5eVpDNTRMQ0JqYjI5eVpDNTVLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppQW9ZblYwZEc5dWN5QW1JRTF2ZFhObFFuVjBkRzl1YzAxaGMyc3VZWFY0YVd4cFlYSjVRblYwZEc5dUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sYm1STmIzVnpaVlZ3S0UxdmRYTmxRblYwZEc5dUxtRjFlR2xzYVdGeWVVSjFkSFJ2Yml3Z1kyOXZjbVF1ZUN3Z1kyOXZjbVF1ZVNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0dKMWRIUnZibk1nSmlCTmIzVnpaVUoxZEhSdmJuTk5ZWE5yTG1admRYSjBhRUoxZEhSdmJpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6Wlc1a1RXOTFjMlZWY0NoTmIzVnpaVUoxZEhSdmJpNW1iM1Z5ZEdoQ2RYUjBiMjRzSUdOdmIzSmtMbmdzSUdOdmIzSmtMbmtwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2hpZFhSMGIyNXpJQ1lnVFc5MWMyVkNkWFIwYjI1elRXRnpheTVtYVdaMGFFSjFkSFJ2YmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaVzVrVFc5MWMyVlZjQ2hOYjNWelpVSjFkSFJ2Ymk1bWFXWjBhRUoxZEhSdmJpd2dZMjl2Y21RdWVDd2dZMjl2Y21RdWVTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJJWVc1a2JHVWdkMmhsYmlCaElHMXZkWE5sSUdKMWRIUnZiaUJwY3lCd2NtVnpjMlZrWEc0Z0lDQWdJQ29nUUhCaGNtRnRJR0oxZEhSdmJuTWdMU0JOYjNWelpTQkNkWFIwYjI1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnV0NBdElFMXZkWE5sSUhCdmFXNTBaWElnV0NCamIyOXlaR2x1WVhSbFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUZrZ0xTQk5iM1Z6WlNCd2IybHVkR1Z5SUZrZ1kyOXZjbVJwYm1GMFpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhCeVpYTnpUVzkxYzJWQ2RYUjBiMjV6S0dKMWRIUnZibk02SUc1MWJXSmxjaXdnV0RvZ2JuVnRZbVZ5TENCWk9pQnVkVzFpWlhJcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMblpwWkdWdlJXeGxiV1Z1ZEZCeWIzWnBaR1Z5TG1selZtbGtaVzlTWldGa2VTZ3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1kyOXZjbVFnUFNCMGFHbHpMbU52YjNKa2FXNWhkR1ZEYjI1MlpYSjBaWEl1Ym05eWJXRnNhWHBsUVc1a1VYVmhiblJwZW1WVmJuTnBaMjVsWkNoY2JpQWdJQ0FnSUNBZ0lDQWdJRmdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQlpYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaGlkWFIwYjI1eklDWWdUVzkxYzJWQ2RYUjBiMjV6VFdGemF5NXdjbWx0WVhKNVFuVjBkRzl1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTmxibVJOYjNWelpVUnZkMjRvVFc5MWMyVkNkWFIwYjI0dWJXRnBia0oxZEhSdmJpd2dZMjl2Y21RdWVDd2dZMjl2Y21RdWVTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tHSjFkSFJ2Ym5NZ0ppQk5iM1Z6WlVKMWRIUnZibk5OWVhOckxuTmxZMjl1WkdGeWVVSjFkSFJ2YmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaVzVrVFc5MWMyVkViM2R1S0UxdmRYTmxRblYwZEc5dUxuTmxZMjl1WkdGeWVVSjFkSFJ2Yml3Z1kyOXZjbVF1ZUN3Z1kyOXZjbVF1ZVNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0dKMWRIUnZibk1nSmlCTmIzVnpaVUoxZEhSdmJuTk5ZWE5yTG1GMWVHbHNhV0Z5ZVVKMWRIUnZiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpXNWtUVzkxYzJWRWIzZHVLRTF2ZFhObFFuVjBkRzl1TG1GMWVHbHNhV0Z5ZVVKMWRIUnZiaXdnWTI5dmNtUXVlQ3dnWTI5dmNtUXVlU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLR0oxZEhSdmJuTWdKaUJOYjNWelpVSjFkSFJ2Ym5OTllYTnJMbVp2ZFhKMGFFSjFkSFJ2YmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaVzVrVFc5MWMyVkViM2R1S0UxdmRYTmxRblYwZEc5dUxtWnZkWEowYUVKMWRIUnZiaXdnWTI5dmNtUXVlQ3dnWTI5dmNtUXVlU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLR0oxZEhSdmJuTWdKaUJOYjNWelpVSjFkSFJ2Ym5OTllYTnJMbVpwWm5Sb1FuVjBkRzl1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTmxibVJOYjNWelpVUnZkMjRvVFc5MWMyVkNkWFIwYjI0dVptbG1kR2hDZFhSMGIyNHNJR052YjNKa0xuZ3NJR052YjNKa0xua3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nU0dGdVpHeGxjeUJ0YjNWelpTQmxiblJsY2x4dUlDQWdJQ0FxTDF4dUlDQWdJSE5sYm1STmIzVnpaVVZ1ZEdWeUtDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11ZG1sa1pXOUZiR1Z0Wlc1MFVISnZkbWxrWlhJdWFYTldhV1JsYjFKbFlXUjVLQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JqYjI1emRDQjBiMU4wY21WaGJXVnlTR0Z1Wkd4bGNuTWdQVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUwYjFOMGNtVmhiV1Z5VFdWemMyRm5aWE5RY205MmFXUmxjaTUwYjFOMGNtVmhiV1Z5U0dGdVpHeGxjbk03WEc0Z0lDQWdJQ0FnSUhSdlUzUnlaV0Z0WlhKSVlXNWtiR1Z5Y3k1blpYUW9KMDF2ZFhObFJXNTBaWEluS1NncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFaGhibVJzWlhNZ2JXOTFjMlVnVEdWaGRtVmNiaUFnSUNBZ0tpOWNiaUFnSUNCelpXNWtUVzkxYzJWTVpXRjJaU2dwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxuWnBaR1Z2Uld4bGJXVnVkRkJ5YjNacFpHVnlMbWx6Vm1sa1pXOVNaV0ZrZVNncEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZEc5VGRISmxZVzFsY2toaGJtUnNaWEp6SUQxY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRHOVRkSEpsWVcxbGNrMWxjM05oWjJWelVISnZkbWxrWlhJdWRHOVRkSEpsWVcxbGNraGhibVJzWlhKek8xeHVJQ0FnSUNBZ0lDQjBiMU4wY21WaGJXVnlTR0Z1Wkd4bGNuTXVaMlYwS0NkTmIzVnpaVXhsWVhabEp5a29LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJJWVc1a2JHVnpJSGRvWlc0Z1lTQnRiM1Z6WlNCaWRYUjBiMjRnYVhNZ2NISmxjM05sWkNCa2IzZHVYRzRnSUNBZ0lDb2dRSEJoY21GdElHSjFkSFJ2YmlBdElFMXZkWE5sSUVKMWRIUnZiaUJRY21WemMyVmtYRzRnSUNBZ0lDb2dRSEJoY21GdElGZ2dJQzBnVFc5MWMyVWdXQ0JEYjI5eVpHbHVZWFJsWEc0Z0lDQWdJQ29nUUhCaGNtRnRJRmtnSUMwZ1RXOTFjMlVnV1NCRGIyOXlaR2x1WVhSbFhHNGdJQ0FnSUNvdlhHNGdJQ0FnYzJWdVpFMXZkWE5sUkc5M2JpaGlkWFIwYjI0NklHNTFiV0psY2l3Z1dEb2diblZ0WW1WeUxDQlpPaUJ1ZFcxaVpYSXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TG5acFpHVnZSV3hsYldWdWRGQnliM1pwWkdWeUxtbHpWbWxrWlc5U1pXRmtlU2dwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnVEc5bloyVnlMa3h2WnloY2JpQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JnYlc5MWMyVWdZblYwZEc5dUlDUjdZblYwZEc5dWZTQmtiM2R1SUdGMElDZ2tlMWg5TENBa2UxbDlLV0FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQTJYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFJ2VTNSeVpXRnRaWEpJWVc1a2JHVnljeUE5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5SdlUzUnlaV0Z0WlhKTlpYTnpZV2RsYzFCeWIzWnBaR1Z5TG5SdlUzUnlaV0Z0WlhKSVlXNWtiR1Z5Y3p0Y2JpQWdJQ0FnSUNBZ2RHOVRkSEpsWVcxbGNraGhibVJzWlhKekxtZGxkQ2duVFc5MWMyVkViM2R1Snlrb1cySjFkSFJ2Yml3Z1dDd2dXVjBwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVoaGJtUnNaWE1nZDJobGJpQmhJRzF2ZFhObElHSjFkSFJ2YmlCcGN5QndjbVZ6YzJWa0lIVndYRzRnSUNBZ0lDb2dRSEJoY21GdElHSjFkSFJ2YmlBdElFMXZkWE5sSUVKMWRIUnZiaUJRY21WemMyVmtYRzRnSUNBZ0lDb2dRSEJoY21GdElGZ2dJQzBnVFc5MWMyVWdXQ0JEYjI5eVpHbHVZWFJsWEc0Z0lDQWdJQ29nUUhCaGNtRnRJRmtnSUMwZ1RXOTFjMlVnV1NCRGIyOXlaR2x1WVhSbFhHNGdJQ0FnSUNvdlhHNGdJQ0FnYzJWdVpFMXZkWE5sVlhBb1luVjBkRzl1T2lCdWRXMWlaWElzSUZnNklHNTFiV0psY2l3Z1dUb2diblZ0WW1WeUtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaGRHaHBjeTUyYVdSbGIwVnNaVzFsYm5SUWNtOTJhV1JsY2k1cGMxWnBaR1Z2VW1WaFpIa29LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJRXh2WjJkbGNpNU1iMmNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZRzF2ZFhObElHSjFkSFJ2YmlBa2UySjFkSFJ2Ym4wZ2RYQWdZWFFnS0NSN1dIMHNJQ1I3V1gwcFlDeGNiaUFnSUNBZ0lDQWdJQ0FnSURaY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1kyOXZjbVFnUFNCMGFHbHpMbU52YjNKa2FXNWhkR1ZEYjI1MlpYSjBaWEl1Ym05eWJXRnNhWHBsUVc1a1VYVmhiblJwZW1WVmJuTnBaMjVsWkNoY2JpQWdJQ0FnSUNBZ0lDQWdJRmdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQlpYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFJ2VTNSeVpXRnRaWEpJWVc1a2JHVnljeUE5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5SdlUzUnlaV0Z0WlhKTlpYTnpZV2RsYzFCeWIzWnBaR1Z5TG5SdlUzUnlaV0Z0WlhKSVlXNWtiR1Z5Y3p0Y2JpQWdJQ0FnSUNBZ2RHOVRkSEpsWVcxbGNraGhibVJzWlhKekxtZGxkQ2duVFc5MWMyVlZjQ2NwS0Z0aWRYUjBiMjRzSUdOdmIzSmtMbmdzSUdOdmIzSmtMbmxkS1R0Y2JpQWdJQ0I5WEc1OVhHNGlMQ0l2THlCRGIzQjVjbWxuYUhRZ1JYQnBZeUJIWVcxbGN5d2dTVzVqTGlCQmJHd2dVbWxuYUhSeklGSmxjMlZ5ZG1Wa0xseHVYRzR2S2lwY2JpQXFJRkpsWjJsemRHVnljeUIwYUdVZ1UzQmxZMmxoYkNCTFpYa2dZMjlrWlhOY2JpQXFJQ0JOZFhOMElHSmxJR3RsY0hRZ2FXNGdjM2x1WXlCM2FYUm9JRXBoZG1GVFkzSnBjSFJMWlhsRGIyUmxWRzlHUzJWNUlFTXJLeUJoY25KaGVTNWNiaUFxSUZSb1pTQnBibVJsZUNCdlppQjBhR1VnWlc1MGNua2dhVzRnZEdobElHRnljbUY1SUdseklIUm9aU0J6Y0dWamFXRnNJR3RsZVNCamIyUmxJR2RwZG1WdUlHSmxiRzkzTGx4dUlDb3ZYRzVsZUhCdmNuUWdZMnhoYzNNZ1UzQmxZMmxoYkV0bGVVTnZaR1Z6SUh0Y2JpQWdJQ0J6ZEdGMGFXTWdZbUZqYTFOd1lXTmxJRDBnT0R0Y2JpQWdJQ0J6ZEdGMGFXTWdjMmhwWm5RZ1BTQXhOanRjYmlBZ0lDQnpkR0YwYVdNZ1kyOXVkSEp2YkNBOUlERTNPMXh1SUNBZ0lITjBZWFJwWXlCaGJIUWdQU0F4T0R0Y2JpQWdJQ0J6ZEdGMGFXTWdjbWxuYUhSVGFHbG1kQ0E5SURJMU16dGNiaUFnSUNCemRHRjBhV01nY21sbmFIUkRiMjUwY205c0lEMGdNalUwTzF4dUlDQWdJSE4wWVhScFl5QnlhV2RvZEVGc2RDQTlJREkxTlR0Y2JuMWNiaUlzSWk4dklFTnZjSGx5YVdkb2RDQkZjR2xqSUVkaGJXVnpMQ0JKYm1NdUlFRnNiQ0JTYVdkb2RITWdVbVZ6WlhKMlpXUXVYRzVjYm1sdGNHOXlkQ0I3SUV4dloyZGxjaUI5SUdaeWIyMGdKeTR1TDB4dloyZGxjaTlNYjJkblpYSW5PMXh1YVcxd2IzSjBJSHNnUTI5dmNtUnBibUYwWlVOdmJuWmxjblJsY2lCOUlHWnliMjBnSnk0dUwxVjBhV3d2UTI5dmNtUnBibUYwWlVOdmJuWmxjblJsY2ljN1hHNXBiWEJ2Y25RZ2V5QlRkSEpsWVcxTlpYTnpZV2RsUTI5dWRISnZiR3hsY2lCOUlHWnliMjBnSnk0dUwxVmxTVzV6ZEdGdVkyVk5aWE56WVdkbEwxTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5Snp0Y2JtbHRjRzl5ZENCN0lGWnBaR1Z2VUd4aGVXVnlJSDBnWm5KdmJTQW5MaTR2Vm1sa1pXOVFiR0Y1WlhJdlZtbGtaVzlRYkdGNVpYSW5PMXh1YVcxd2IzSjBJSHNnU1ZSdmRXTm9RMjl1ZEhKdmJHeGxjaUI5SUdaeWIyMGdKeTR2U1ZSdmRXTm9RMjl1ZEhKdmJHeGxjaWM3WEc1cGJYQnZjblFnZXlCRmRtVnVkRXhwYzNSbGJtVnlWSEpoWTJ0bGNpQjlJR1p5YjIwZ0p5NHVMMVYwYVd3dlJYWmxiblJNYVhOMFpXNWxjbFJ5WVdOclpYSW5PMXh1THlvcVhHNGdLaUJJWVc1a2JHVnpJSFJvWlNCVWIzVmphQ0JwYm5CMWRDQkZkbVZ1ZEhOY2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklGUnZkV05vUTI5dWRISnZiR3hsY2lCcGJYQnNaVzFsYm5SeklFbFViM1ZqYUVOdmJuUnliMnhzWlhJZ2UxeHVJQ0FnSUhSdlUzUnlaV0Z0WlhKTlpYTnpZV2RsYzFCeWIzWnBaR1Z5T2lCVGRISmxZVzFOWlhOellXZGxRMjl1ZEhKdmJHeGxjanRjYmlBZ0lDQjJhV1JsYjBWc1pXMWxiblJRY205MmFXUmxjam9nVm1sa1pXOVFiR0Y1WlhJN1hHNGdJQ0FnWTI5dmNtUnBibUYwWlVOdmJuWmxjblJsY2pvZ1EyOXZjbVJwYm1GMFpVTnZiblpsY25SbGNqdGNiaUFnSUNCMmFXUmxiMFZzWlcxbGJuUlFZWEpsYm5RNklFaFVUVXhXYVdSbGIwVnNaVzFsYm5RN1hHNGdJQ0FnWm1sdVoyVnljeUE5SUZzNUxDQTRMQ0EzTENBMkxDQTFMQ0EwTENBekxDQXlMQ0F4TENBd1hUdGNiaUFnSUNCbWFXNW5aWEpKWkhNZ1BTQnVaWGNnVFdGd0tDazdYRzRnSUNBZ2JXRjRRbmwwWlZaaGJIVmxJRDBnTWpVMU8xeHVYRzRnSUNBZ0x5OGdWWFJwYkdsMGVTQm1iM0lnYTJWbGNHbHVaeUIwY21GamF5QnZaaUJsZG1WdWRDQm9ZVzVrYkdWeWN5QmhibVFnZFc1eVpXZHBjM1JsY21sdVp5QjBhR1Z0WEc0Z0lDQWdjSEpwZG1GMFpTQjBiM1ZqYUVWMlpXNTBUR2x6ZEdWdVpYSlVjbUZqYTJWeUlEMGdibVYzSUVWMlpXNTBUR2x6ZEdWdVpYSlVjbUZqYTJWeUtDazdYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJBY0dGeVlXMGdkRzlUZEhKbFlXMWxjazFsYzNOaFoyVnpVSEp2ZG1sa1pYSWdMU0JUZEhKbFlXMGdiV1Z6YzJGblpTQnBibk4wWVc1alpWeHVJQ0FnSUNBcUlFQndZWEpoYlNCMmFXUmxiMFZzWlcxbGJuUlFjbTkyYVdSbGNpQXRJRlpwWkdWdklGQnNZWGxsY2lCcGJuTjBZVzVqWlZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0JqYjI5eVpHbHVZWFJsUTI5dWRtVnlkR1Z5SUMwZ1FTQmpiMjl5WkdsdVlYUmxJR052Ym5abGNuUmxjaUJwYm5OMFlXNWpaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLRnh1SUNBZ0lDQWdJQ0IwYjFOMGNtVmhiV1Z5VFdWemMyRm5aWE5RY205MmFXUmxjam9nVTNSeVpXRnRUV1Z6YzJGblpVTnZiblJ5YjJ4c1pYSXNYRzRnSUNBZ0lDQWdJSFpwWkdWdlJXeGxiV1Z1ZEZCeWIzWnBaR1Z5T2lCV2FXUmxiMUJzWVhsbGNpeGNiaUFnSUNBZ0lDQWdZMjl2Y21ScGJtRjBaVU52Ym5abGNuUmxjam9nUTI5dmNtUnBibUYwWlVOdmJuWmxjblJsY2x4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMblJ2VTNSeVpXRnRaWEpOWlhOellXZGxjMUJ5YjNacFpHVnlJRDBnZEc5VGRISmxZVzFsY2sxbGMzTmhaMlZ6VUhKdmRtbGtaWEk3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkbWxrWlc5RmJHVnRaVzUwVUhKdmRtbGtaWElnUFNCMmFXUmxiMFZzWlcxbGJuUlFjbTkyYVdSbGNqdGNiaUFnSUNBZ0lDQWdkR2hwY3k1amIyOXlaR2x1WVhSbFEyOXVkbVZ5ZEdWeUlEMGdZMjl2Y21ScGJtRjBaVU52Ym5abGNuUmxjanRjYmlBZ0lDQWdJQ0FnZEdocGN5NTJhV1JsYjBWc1pXMWxiblJRWVhKbGJuUWdQU0IyYVdSbGIwVnNaVzFsYm5SUWNtOTJhV1JsY2k1blpYUldhV1JsYjBWc1pXMWxiblFvS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYjI1MGIzVmphSE4wWVhKMElEMGdLR1YyT2lCVWIzVmphRVYyWlc1MEtTQTlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV2YmxSdmRXTm9VM1JoY25Rb1pYWXBPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnZiblJ2ZFdOb1pXNWtJRDBnS0dWMk9pQlViM1ZqYUVWMlpXNTBLU0E5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dmJsUnZkV05vUlc1a0tHVjJLVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdiMjUwYjNWamFHMXZkbVVnUFNBb1pYWTZJRlJ2ZFdOb1JYWmxiblFwSUQwK1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtOXVWRzkxWTJoTmIzWmxLR1YyS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUyYVdSbGIwVnNaVzFsYm5SUVlYSmxiblF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduZEc5MVkyaHpkR0Z5ZENjc0lHOXVkRzkxWTJoemRHRnlkQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkbWxrWlc5RmJHVnRaVzUwVUdGeVpXNTBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KM1J2ZFdOb1pXNWtKeXdnYjI1MGIzVmphR1Z1WkNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjNSdmRXTm9iVzkyWlNjc0lHOXVkRzkxWTJodGIzWmxLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTBiM1ZqYUVWMlpXNTBUR2x6ZEdWdVpYSlVjbUZqYTJWeUxtRmtaRlZ1Y21WbmFYTjBaWEpEWVd4c1ltRmpheWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDZ3BJRDArSUhSb2FYTXVkbWxrWlc5RmJHVnRaVzUwVUdGeVpXNTBMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvSjNSdmRXTm9jM1JoY25RbkxDQnZiblJ2ZFdOb2MzUmhjblFwWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZEc5MVkyaEZkbVZ1ZEV4cGMzUmxibVZ5VkhKaFkydGxjaTVoWkdSVmJuSmxaMmx6ZEdWeVEyRnNiR0poWTJzb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvS1NBOVBpQjBhR2x6TG5acFpHVnZSV3hsYldWdWRGQmhjbVZ1ZEM1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtDZDBiM1ZqYUdWdVpDY3NJRzl1ZEc5MVkyaGxibVFwWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZEc5MVkyaEZkbVZ1ZEV4cGMzUmxibVZ5VkhKaFkydGxjaTVoWkdSVmJuSmxaMmx6ZEdWeVEyRnNiR0poWTJzb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvS1NBOVBpQjBhR2x6TG5acFpHVnZSV3hsYldWdWRGQmhjbVZ1ZEM1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtDZDBiM1ZqYUcxdmRtVW5MQ0J2Ym5SdmRXTm9iVzkyWlNsY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExDQW5WRzkxWTJnZ1JYWmxiblJ6SUZKbFoybHpkR1Z5WldRbkxDQTJLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QnBjeUIwYUdseklITjBjbWxqZEd4NUlHNWxZMlZ6YzJGeWVUOWNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2NISmxkbVZ1ZEU5dVZHOTFZMmhOYjNabElEMGdLR1YyWlc1ME9pQlViM1ZqYUVWMlpXNTBLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsZG1WdWRDNXdjbVYyWlc1MFJHVm1ZWFZzZENncE8xeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0JrYjJOMWJXVnVkQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2QwYjNWamFHMXZkbVVuTENCd2NtVjJaVzUwVDI1VWIzVmphRTF2ZG1VcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5SdmRXTm9SWFpsYm5STWFYTjBaVzVsY2xSeVlXTnJaWEl1WVdSa1ZXNXlaV2RwYzNSbGNrTmhiR3hpWVdOcktGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0NrZ1BUNGdaRzlqZFcxbGJuUXVjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWduZEc5MVkyaHRiM1psSnl3Z2NISmxkbVZ1ZEU5dVZHOTFZMmhOYjNabEtWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRlZ1Y21WbmFYTjBaWElnWVd4c0lIUnZkV05vSUdWMlpXNTBjMXh1SUNBZ0lDQXFMMXh1SUNBZ0lIVnVjbVZuYVhOMFpYSlViM1ZqYUVWMlpXNTBjeWdwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUwYjNWamFFVjJaVzUwVEdsemRHVnVaWEpVY21GamEyVnlMblZ1Y21WbmFYTjBaWEpCYkd3b0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlNaVzFsYldKbGNpQmhJSFJ2ZFdOb0lHTnZiVzFoYm1SY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZEc5MVkyZ2dMU0IwYUdVZ2RHOTFZMmdnWTI5dGJXRnVaRnh1SUNBZ0lDQXFMMXh1SUNBZ0lISmxiV1Z0WW1WeVZHOTFZMmdvZEc5MVkyZzZJRlJ2ZFdOb0tTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHWnBibWRsY2lBOUlIUm9hWE11Wm1sdVoyVnljeTV3YjNBb0tUdGNiaUFnSUNBZ0lDQWdhV1lnS0dacGJtZGxjaUE5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjJWNGFHRjFjM1JsWkNCMGIzVmphQ0JwWkdWdWRHbG1hV1Z5Y3ljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ05seHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjBhR2x6TG1acGJtZGxja2xrY3k1elpYUW9kRzkxWTJndWFXUmxiblJwWm1sbGNpd2dabWx1WjJWeUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkdiM0puWlhSeklHRWdkRzkxWTJnZ1kyOXRiV0Z1WkZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0IwYjNWamFDQXRJSFJvWlNCMGIzVmphQ0JqYjIxdFlXNWtYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1ptOXlaMlYwVkc5MVkyZ29kRzkxWTJnNklGUnZkV05vS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Wm1sdVoyVnljeTV3ZFhOb0tIUm9hWE11Wm1sdVoyVnlTV1J6TG1kbGRDaDBiM1ZqYUM1cFpHVnVkR2xtYVdWeUtTazdYRzRnSUNBZ0lDQWdJQzh2SUZOdmNuUWdZWEp5WVhrZ1ltRmpheUJwYm5SdklHUmxjMk5sYm1ScGJtY2diM0prWlhJdUlGUm9hWE1nYldWaGJuTWdhV1lnWm1sdVoyVnlJQ2N4SnlCM1pYSmxJSFJ2SUd4cFpuUWdZV1owWlhJZ1ptbHVaMlZ5SUNjd0p5d2dkMlVnZDI5MWJHUWdaVzV6ZFhKbElIUm9ZWFFnTUNCM2FXeHNJR0psSUhSb1pTQm1hWEp6ZENCcGJtUmxlQ0IwYnlCd2IzQmNiaUFnSUNBZ0lDQWdkR2hwY3k1bWFXNW5aWEp6TG5OdmNuUW9ablZ1WTNScGIyNGdLR0VzSUdJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJpSUMwZ1lUdGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVabWx1WjJWeVNXUnpMbVJsYkdWMFpTaDBiM1ZqYUM1cFpHVnVkR2xtYVdWeUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlhhR1Z1SUdFZ2RHOTFZMmdnWlhabGJuUWdjM1JoY25SelhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhSdmRXTm9SWFpsYm5RZ0xTQjBhR1VnZEc5MVkyZ2daWFpsYm5RZ1ltVnBibWNnYVc1MFpYSmpaWEIwWldSY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J2YmxSdmRXTm9VM1JoY25Rb2RHOTFZMmhGZG1WdWREb2dWRzkxWTJoRmRtVnVkQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdWRtbGtaVzlGYkdWdFpXNTBVSEp2ZG1sa1pYSXVhWE5XYVdSbGIxSmxZV1I1S0NrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbWIzSWdLR3hsZENCMElEMGdNRHNnZENBOElIUnZkV05vUlhabGJuUXVZMmhoYm1kbFpGUnZkV05vWlhNdWJHVnVaM1JvT3lCMEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y21WdFpXMWlaWEpVYjNWamFDaDBiM1ZqYUVWMlpXNTBMbU5vWVc1blpXUlViM1ZqYUdWelczUmRLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzSUNkMGIzVmphQ0J6ZEdGeWRDY3NJRFlwTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WlcxcGRGUnZkV05vUkdGMFlTZ25WRzkxWTJoVGRHRnlkQ2NzSUhSdmRXTm9SWFpsYm5RdVkyaGhibWRsWkZSdmRXTm9aWE1wTzF4dUlDQWdJQ0FnSUNCMGIzVmphRVYyWlc1MExuQnlaWFpsYm5SRVpXWmhkV3gwS0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1YyaGxiaUJoSUhSdmRXTm9JR1YyWlc1MElHVnVaSE5jYmlBZ0lDQWdLaUJBY0dGeVlXMGdkRzkxWTJoRmRtVnVkQ0F0SUhSb1pTQjBiM1ZqYUNCbGRtVnVkQ0JpWldsdVp5QnBiblJsY21ObGNIUmxaRnh1SUNBZ0lDQXFMMXh1SUNBZ0lHOXVWRzkxWTJoRmJtUW9kRzkxWTJoRmRtVnVkRG9nVkc5MVkyaEZkbVZ1ZENrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVkbWxrWlc5RmJHVnRaVzUwVUhKdmRtbGtaWEl1YVhOV2FXUmxiMUpsWVdSNUtDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc0lDZDBiM1ZqYUNCbGJtUW5MQ0EyS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVsYldsMFZHOTFZMmhFWVhSaEtDZFViM1ZqYUVWdVpDY3NJSFJ2ZFdOb1JYWmxiblF1WTJoaGJtZGxaRlJ2ZFdOb1pYTXBPMXh1SUNBZ0lDQWdJQ0F2THlCU1pTMWplV05zWlNCMWJtbHhkV1VnYVdSbGJuUnBabWxsY25NZ2NISmxkbWx2ZFhOc2VTQmhjM05wWjI1bFpDQjBieUJsWVdOb0lIUnZkV05vTGx4dUlDQWdJQ0FnSUNCbWIzSWdLR3hsZENCMElEMGdNRHNnZENBOElIUnZkV05vUlhabGJuUXVZMmhoYm1kbFpGUnZkV05vWlhNdWJHVnVaM1JvT3lCMEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Wm05eVoyVjBWRzkxWTJnb2RHOTFZMmhGZG1WdWRDNWphR0Z1WjJWa1ZHOTFZMmhsYzF0MFhTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZEc5MVkyaEZkbVZ1ZEM1d2NtVjJaVzUwUkdWbVlYVnNkQ2dwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUhkb1pXNGdZU0J0YjNacGJtY2dkRzkxWTJnZ1pYWmxiblFnYjJOamRYSnpYRzRnSUNBZ0lDb2dRSEJoY21GdElIUnZkV05vUlhabGJuUWdMU0IwYUdVZ2RHOTFZMmdnWlhabGJuUWdZbVZwYm1jZ2FXNTBaWEpqWlhCMFpXUmNiaUFnSUNBZ0tpOWNiaUFnSUNCdmJsUnZkV05vVFc5MlpTaDBiM1ZqYUVWMlpXNTBPaUJVYjNWamFFVjJaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NTJhV1JsYjBWc1pXMWxiblJRY205MmFXUmxjaTVwYzFacFpHVnZVbVZoWkhrb0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lFeHZaMmRsY2k1TWIyY29URzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N3Z0ozUnZkV05vSUcxdmRtVW5MQ0EyS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVsYldsMFZHOTFZMmhFWVhSaEtDZFViM1ZqYUUxdmRtVW5MQ0IwYjNWamFFVjJaVzUwTG5SdmRXTm9aWE1wTzF4dUlDQWdJQ0FnSUNCMGIzVmphRVYyWlc1MExuQnlaWFpsYm5SRVpXWmhkV3gwS0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWlcxcGRGUnZkV05vUkdGMFlTaDBlWEJsT2lCemRISnBibWNzSUhSdmRXTm9aWE02SUZSdmRXTm9UR2x6ZENrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVkbWxrWlc5RmJHVnRaVzUwVUhKdmRtbGtaWEl1YVhOV2FXUmxiMUpsWVdSNUtDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdlptWnpaWFFnUFNCMGFHbHpMblpwWkdWdlJXeGxiV1Z1ZEZCeWIzWnBaR1Z5TG1kbGRGWnBaR1Z2VUdGeVpXNTBSV3hsYldWdWRDZ3BMbWRsZEVKdmRXNWthVzVuUTJ4cFpXNTBVbVZqZENncE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCMGIxTjBjbVZoYldWeVNHRnVaR3hsY25NZ1BWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTBiMU4wY21WaGJXVnlUV1Z6YzJGblpYTlFjbTkyYVdSbGNpNTBiMU4wY21WaGJXVnlTR0Z1Wkd4bGNuTTdYRzVjYmlBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnZENBOUlEQTdJSFFnUENCMGIzVmphR1Z6TG14bGJtZDBhRHNnZENzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J1ZFcxVWIzVmphR1Z6SUQwZ01Uc2dMeThnZEdobElHNTFiV0psY2lCdlppQjBiM1ZqYUdWeklIUnZJR0psSUhObGJuUWdkR2hwY3lCdFpYTnpZV2RsWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCMGIzVmphQ0E5SUhSdmRXTm9aWE5iZEYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQjRJRDBnZEc5MVkyZ3VZMnhwWlc1MFdDQXRJRzltWm5ObGRDNXNaV1owTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2VTQTlJSFJ2ZFdOb0xtTnNhV1Z1ZEZrZ0xTQnZabVp6WlhRdWRHOXdPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGt4dlp5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdCR0pIdDBhR2x6TG1acGJtZGxja2xrY3k1blpYUW9kRzkxWTJndWFXUmxiblJwWm1sbGNpbDlQU2drZTNoOUxDQWtlM2w5S1dBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ05seHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdZMjl2Y21RZ1BTQjBhR2x6TG1OdmIzSmthVzVoZEdWRGIyNTJaWEowWlhJdWJtOXliV0ZzYVhwbFFXNWtVWFZoYm5ScGVtVlZibk5wWjI1bFpDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGxjYmlBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCemQybDBZMmdnS0hSNWNHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZFViM1ZqYUZOMFlYSjBKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHOVRkSEpsWVcxbGNraGhibVJzWlhKekxtZGxkQ2duVkc5MVkyaFRkR0Z5ZENjcEtGdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNTFiVlJ2ZFdOb1pYTXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjl5WkM1NExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXZjbVF1ZVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVabWx1WjJWeVNXUnpMbWRsZENoMGIzVmphQzVwWkdWdWRHbG1hV1Z5S1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViV0Y0UW5sMFpWWmhiSFZsSUNvZ0tIUnZkV05vTG1admNtTmxJRDRnTUNBL0lIUnZkV05vTG1admNtTmxJRG9nTVNrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyOXlaQzVwYmxKaGJtZGxJRDhnTVNBNklEQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSjFSdmRXTm9SVzVrSnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkRzlUZEhKbFlXMWxja2hoYm1Sc1pYSnpMbWRsZENnblZHOTFZMmhGYm1RbktTaGJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVkVzFVYjNWamFHVnpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl2Y21RdWVDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiM0prTG5rc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVpwYm1kbGNrbGtjeTVuWlhRb2RHOTFZMmd1YVdSbGJuUnBabWxsY2lrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTFoZUVKNWRHVldZV3gxWlNBcUlIUnZkV05vTG1admNtTmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl2Y21RdWFXNVNZVzVuWlNBL0lERWdPaUF3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZFViM1ZqYUUxdmRtVW5PbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGIxTjBjbVZoYldWeVNHRnVaR3hsY25NdVoyVjBLQ2RVYjNWamFFMXZkbVVuS1NoYlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdWRXMVViM1ZqYUdWekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXZjbVF1ZUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmIzSmtMbmtzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtWnBibWRsY2tsa2N5NW5aWFFvZEc5MVkyZ3VhV1JsYm5ScFptbGxjaWtzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtMWhlRUo1ZEdWV1lXeDFaU0FxSUNoMGIzVmphQzVtYjNKalpTQStJREFnUHlCMGIzVmphQzVtYjNKalpTQTZJREVwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dmNtUXVhVzVTWVc1blpTQS9JREVnT2lBd1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYm4xY2JpSXNJaTh2SUVOdmNIbHlhV2RvZENCRmNHbGpJRWRoYldWekxDQkpibU11SUVGc2JDQlNhV2RvZEhNZ1VtVnpaWEoyWldRdVhHNWNibWx0Y0c5eWRDQjdJRk4wY21WaGJVMWxjM05oWjJWRGIyNTBjbTlzYkdWeUlIMGdabkp2YlNBbkxpNHZWV1ZKYm5OMFlXNWpaVTFsYzNOaFoyVXZVM1J5WldGdFRXVnpjMkZuWlVOdmJuUnliMnhzWlhJbk8xeHVhVzF3YjNKMElIc2dRMjl1ZEhKdmJHeGxjaUI5SUdaeWIyMGdKeTR2UjJGdFpYQmhaRlI1Y0dWekp6dGNibHh1THlvcVhHNGdLaUJVYUdVZ1kyeGhjM01nZEdoaGRDQm9ZVzVrYkdWeklIUm9aU0JtZFc1amRHbHZibUZzYVhSNUlHOW1JSGh5WjJGdFpYQmhaSE1nWVc1a0lHTnZiblJ5YjJ4c1pYSnpYRzRnS2k5Y2JtVjRjRzl5ZENCamJHRnpjeUJZVWtkaGJXVndZV1JEYjI1MGNtOXNiR1Z5SUh0Y2JpQWdJQ0JqYjI1MGNtOXNiR1Z5Y3pvZ1FYSnlZWGs4UTI5dWRISnZiR3hsY2o0N1hHNGdJQ0FnZEc5VGRISmxZVzFsY2sxbGMzTmhaMlZ6VUhKdmRtbGtaWEk2SUZOMGNtVmhiVTFsYzNOaFoyVkRiMjUwY205c2JHVnlPMXh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSFJ2VTNSeVpXRnRaWEpOWlhOellXZGxjMUJ5YjNacFpHVnlJQzBnVTNSeVpXRnRJRzFsYzNOaFoyVWdhVzV6ZEdGdVkyVmNiaUFnSUNBZ0tpOWNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaDBiMU4wY21WaGJXVnlUV1Z6YzJGblpYTlFjbTkyYVdSbGNqb2dVM1J5WldGdFRXVnpjMkZuWlVOdmJuUnliMnhzWlhJcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MGIxTjBjbVZoYldWeVRXVnpjMkZuWlhOUWNtOTJhV1JsY2lBOUlIUnZVM1J5WldGdFpYSk5aWE56WVdkbGMxQnliM1pwWkdWeU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJuUnliMnhzWlhKeklEMGdXMTA3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUkdWbGNDQmpiM0JwWlhNZ1lTQm5ZVzFsY0dGa0ozTWdkbUZzZFdWeklHSjVJR1pwY25OMElHTnZiblpsY25ScGJtY2dhWFFnZEc4Z1lTQktVMDlPSUc5aWFtVmpkQ0JoYm1RZ2RHaGxiaUJpWVdOcklIUnZJR0VnWjJGdFpYQmhaRnh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEJoY21GdElHZGhiV1Z3WVdRZ2RHaGxJRzl5YVdkcGJtRnNJR2RoYldWd1lXUmNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QmhJRzVsZHlCbllXMWxjR0ZrSUc5aWFtVmpkQ3dnY0c5d2RXeGhkR1ZrSUhkcGRHZ2dkR2hsSUc5eWFXZHBibUZzSUdkaGJXVndZV1J6SUhaaGJIVmxjMXh1SUNBZ0lDQXFMMXh1SUNBZ0lITjBZWFJwWXlCa1pXVndRMjl3ZVVkaGJXVndZV1FvWjJGdFpYQmhaRG9nUjJGdFpYQmhaQ2s2SUVkaGJXVndZV1FnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnU2xOUFRpNXdZWEp6WlNoY2JpQWdJQ0FnSUNBZ0lDQWdJRXBUVDA0dWMzUnlhVzVuYVdaNUtIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlkWFIwYjI1ek9pQm5ZVzFsY0dGa0xtSjFkSFJ2Ym5NdWJXRndLQ2hpS1NBOVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JLVTA5T0xuQmhjbk5sS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnU2xOUFRpNXpkSEpwYm1kcFpua29lMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCeVpYTnpaV1E2SUdJdWNISmxjM05sWkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBiM1ZqYUdWa09pQmlMblJ2ZFdOb1pXUXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJR0l1ZG1Gc2RXVmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRjRaWE02SUdkaGJXVndZV1F1WVhobGMxeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCMWNHUmhkR1ZUZEdGMGRYTW9YRzRnSUNBZ0lDQWdJSE52ZFhKalpUb2dXRkpKYm5CMWRGTnZkWEpqWlN4Y2JpQWdJQ0FnSUNBZ1puSmhiV1U2SUZoU1JuSmhiV1VzWEc0Z0lDQWdJQ0FnSUhKbFpsTndZV05sT2lCWVVsSmxabVZ5Wlc1alpWTndZV05sWEc0Z0lDQWdLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHpiM1Z5WTJVdVoyRnRaWEJoWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdaMkZ0WlhCaFpGQnZjMlVnUFNCbWNtRnRaUzVuWlhSUWIzTmxLSE52ZFhKalpTNW5jbWx3VTNCaFkyVXNJSEpsWmxOd1lXTmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doWjJGdFpYQmhaRkJ2YzJVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCemVYTjBaVzBnUFNBd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITnZkWEpqWlM1d2NtOW1hV3hsY3k1cGJtTnNkV1JsY3lnbmFIUmpMWFpwZG1VbktTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE41YzNSbGJTQTlJREU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSE52ZFhKalpTNXdjbTltYVd4bGN5NXBibU5zZFdSbGN5Z25iMk4xYkhWekxYUnZkV05vSnlrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnplWE4wWlcwZ1BTQXlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1ZFOUVUeUFvZDJsc2JHbGhiUzVpWld4amFHVnlLVG9nUVdSa0lHOTBhR1Z5SUhCeWIyWnBiR1Z6SUNoUmRXVnpkQ3dnVFdsamNtOXpiMlowSUUxcGVHVmtJRkpsWVd4cGRIa3NJR1YwWXlsY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRHOVRkSEpsWVcxbGNrMWxjM05oWjJWelVISnZkbWxrWlhJdWRHOVRkSEpsWVcxbGNraGhibVJzWlhKekxtZGxkQ2duV0ZKVGVYTjBaVzBuS1NoYlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzbHpkR1Z0WEc0Z0lDQWdJQ0FnSUNBZ0lDQmRLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnUkdWbVlYVnNkRG9nUVc1NVNHRnVaQ0FvTWlsY2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCb1lXNWtaV1J1WlhOeklEMGdNanRjYmlBZ0lDQWdJQ0FnSUNBZ0lITjNhWFJqYUNBb2MyOTFjbU5sTG1oaGJtUmxaRzVsYzNNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkc1pXWjBKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FHRnVaR1ZrYm1WemN5QTlJREE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKM0pwWjJoMEp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYUdGdVpHVmtibVZ6Y3lBOUlERTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlRaVzVrSUdOdmJuUnliMnhzWlhJZ2RISmhibk5tYjNKdFhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnRZWFJ5YVhnZ1BTQm5ZVzFsY0dGa1VHOXpaUzUwY21GdWMyWnZjbTB1YldGMGNtbDRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYldGMElEMGdXMTA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJREUyT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0WVhSYmFWMGdQU0J1WlhjZ1JteHZZWFF6TWtGeWNtRjVLRnR0WVhSeWFYaGJhVjFkS1Zzd1hUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2NISmxkSFJwWlhJdGFXZHViM0psWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5SdlUzUnlaV0Z0WlhKTlpYTnpZV2RsYzFCeWIzWnBaR1Z5TG5SdlUzUnlaV0Z0WlhKSVlXNWtiR1Z5Y3k1blpYUW9KMWhTUTI5dWRISnZiR3hsY2xSeVlXNXpabTl5YlNjcEtGdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRZWFJiTUYwc0lHMWhkRnMwWFN3Z2JXRjBXemhkTENCdFlYUmJNVEpkTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxaGRGc3hYU3dnYldGMFd6VmRMQ0J0WVhSYk9WMHNJRzFoZEZzeE0xMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV0YwV3pKZExDQnRZWFJiTmwwc0lHMWhkRnN4TUYwc0lHMWhkRnN4TkYwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXRjBXek5kTENCdFlYUmJOMTBzSUcxaGRGc3hNVjBzSUcxaGRGc3hOVjBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYUdGdVpHVmtibVZ6YzF4dUlDQWdJQ0FnSUNBZ0lDQWdYU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUVoaGJtUnNaU0JqYjI1MGNtOXNiR1Z5SUdKMWRIUnZibk1nWVc1a0lHRjRaWE5jYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtTnZiblJ5YjJ4c1pYSnpXMmhoYm1SbFpHNWxjM05kSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTnZiblJ5YjJ4c1pYSnpXMmhoYm1SbFpHNWxjM05kSUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y21WMlUzUmhkR1U2SUhWdVpHVm1hVzVsWkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZM1Z5Y21WdWRGTjBZWFJsT2lCMWJtUmxabWx1WldRc1hHNWNkRngwWEhSY2RGeDBhV1E2SUhWdVpHVm1hVzVsWkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqYjI1MGNtOXNiR1Z5YzF0b1lXNWtaV1J1WlhOelhTNXdjbVYyVTNSaGRHVWdQU0JZVWtkaGJXVndZV1JEYjI1MGNtOXNiR1Z5TG1SbFpYQkRiM0I1UjJGdFpYQmhaQ2h6YjNWeVkyVXVaMkZ0WlhCaFpDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZMjl1ZEhKdmJHeGxjbk5iYUdGdVpHVmtibVZ6YzEwdVkzVnljbVZ1ZEZOMFlYUmxJRDBnV0ZKSFlXMWxjR0ZrUTI5dWRISnZiR3hsY2k1a1pXVndRMjl3ZVVkaGJXVndZV1FvYzI5MWNtTmxMbWRoYldWd1lXUXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCamIyNTBjbTlzYkdWeUlEMGdkR2hwY3k1amIyNTBjbTlzYkdWeWMxdG9ZVzVrWldSdVpYTnpYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdOMWNuSlRkR0YwWlNBOUlHTnZiblJ5YjJ4c1pYSXVZM1Z5Y21WdWRGTjBZWFJsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2NISmxkbE4wWVhSbElEMGdZMjl1ZEhKdmJHeGxjaTV3Y21WMlUzUmhkR1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJKZEdWeVlYUmxJRzkyWlhJZ1luVjBkRzl1YzF4dUlDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0JqZFhKeVUzUmhkR1V1WW5WMGRHOXVjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdOMWNuSkNkWFIwYjI0Z1BTQmpkWEp5VTNSaGRHVXVZblYwZEc5dWMxdHBYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQndjbVYyUW5WMGRHOXVJRDBnY0hKbGRsTjBZWFJsTG1KMWRIUnZibk5iYVYwN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWTNWeWNrSjFkSFJ2Ymk1d2NtVnpjMlZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUhCeVpYTnpYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnBjMUpsY0dWaGRDQTlJSEJ5WlhaQ2RYUjBiMjR1Y0hKbGMzTmxaQ0EvSURFZ09pQXdPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblJ2VTNSeVpXRnRaWEpOWlhOellXZGxjMUJ5YjNacFpHVnlMblJ2VTNSeVpXRnRaWEpJWVc1a2JHVnljeTVuWlhRb0oxaFNRblYwZEc5dVVISmxjM05sWkNjcEtGdG9ZVzVrWldSdVpYTnpMQ0JwTENCcGMxSmxjR1ZoZEYwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9jSEpsZGtKMWRIUnZiaTV3Y21WemMyVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZEc5VGRISmxZVzFsY2sxbGMzTmhaMlZ6VUhKdmRtbGtaWEl1ZEc5VGRISmxZVzFsY2toaGJtUnNaWEp6TG1kbGRDZ25XRkpDZFhSMGIyNVNaV3hsWVhObFpDY3BLRnRvWVc1a1pXUnVaWE56TENCcExDQXdYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR04xY25KQ2RYUjBiMjR1ZEc5MVkyaGxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUIwYjNWamFHVmtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnBjMUpsY0dWaGRDQTlJSEJ5WlhaQ2RYUjBiMjR1ZEc5MVkyaGxaQ0EvSURFZ09pQXdPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblJ2VTNSeVpXRnRaWEpOWlhOellXZGxjMUJ5YjNacFpHVnlMblJ2VTNSeVpXRnRaWEpJWVc1a2JHVnljeTVuWlhRb0oxaFNRblYwZEc5dVZHOTFZMmhsWkNjcEtGdG9ZVzVrWldSdVpYTnpMQ0JwTENCcGMxSmxjR1ZoZEYwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaHdjbVYyUW5WMGRHOXVMblJ2ZFdOb1pXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUwYjFOMGNtVmhiV1Z5VFdWemMyRm5aWE5RY205MmFXUmxjaTUwYjFOMGNtVmhiV1Z5U0dGdVpHeGxjbk11WjJWMEtDZFlVa0oxZEhSdmJsUnZkV05vVW1Wc1pXRnpaV1FuS1NoYmFHRnVaR1ZrYm1WemN5d2dhU3dnTUYwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1NYUmxjbUYwWlNCdmRtVnlJR2RoYldWd1lXUWdZWGhsYzF4dUlDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0JqZFhKeVUzUmhkR1V1WVhobGN5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmpkWEpCZUdselZtRnNkV1VnUFNCamRYSnlVM1JoZEdVdVlYaGxjMXRwWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdjSEpsZGtGNGFYTldZV3gxWlNBOUlIQnlaWFpUZEdGMFpTNWhlR1Z6VzJsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRTl1YkhrZ2MyVnVaQ0JoZUdseklIVndaR0YwWlNCcFppQjBhR1Z5WlNCcGN5QmhJR05vWVc1blpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1LR04xY2tGNGFYTldZV3gxWlNBaFBTQndjbVYyUVhocGMxWmhiSFZsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRHOVRkSEpsWVcxbGNrMWxjM05oWjJWelVISnZkbWxrWlhJdWRHOVRkSEpsWVcxbGNraGhibVJzWlhKekxtZGxkQ2duV0ZKQmJtRnNiMmNuS1NoYmFHRnVaR1ZrYm1WemN5d2dhU3dnWTNWeVFYaHBjMVpoYkhWbFhTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU52Ym5SeWIyeHNaWEp6VzJoaGJtUmxaRzVsYzNOZExuQnlaWFpUZEdGMFpTQTlJR04xY25KVGRHRjBaVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYm4xY2JpSXNJaTh2SUVOdmNIbHlhV2RvZENCRmNHbGpJRWRoYldWekxDQkpibU11SUVGc2JDQlNhV2RvZEhNZ1VtVnpaWEoyWldRdVhHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCTWIyZG5aWElnZTF4dUlDQWdJSE4wWVhScFl5QjJaWEppYjNObFRHOW5UR1YyWld3Z1BTQTFPMXh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUTJGd2RIVnlaWE1nZEdobElITjBZV05ySUdGdVpDQnlaWFIxY201eklHbDBYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdkR2hsSUdOMWNuSmxiblFnYzNSaFkydGNiaUFnSUNBZ0tpOWNiaUFnSUNCemRHRjBhV01nUjJWMFUzUmhZMnRVY21GalpTZ3BJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdaWEp5YjNJZ1BTQnVaWGNnUlhKeWIzSW9LVHRjYmlBZ0lDQWdJQ0FnYkdWMElHWnZjbTFoZEhSbFpGTjBZV05ySUQwZ0owNXZJRk4wWVdOcklFRjJZV2xzWVdKc1pTQm1iM0lnZEdocGN5QmljbTkzYzJWeUp6dGNibHh1SUNBZ0lDQWdJQ0F2THlCbWIzSnRZWFFnZEdobElHVnljbTl5WEc0Z0lDQWdJQ0FnSUdsbUlDaGxjbkp2Y2k1emRHRmpheWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdabTl5YldGMGRHVmtVM1JoWTJzZ1BTQmxjbkp2Y2k1emRHRmpheTUwYjFOMGNtbHVaeWdwTG5KbGNHeGhZMlVvTDBWeWNtOXlMMmNzSUNjbktUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJtYjNKdFlYUjBaV1JUZEdGamF6dGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaWFFnZEdobElHeHZaeUIyWlhKaWIzTnBkSGtnYkdWMlpXeGNiaUFnSUNBZ0tpOWNiaUFnSUNCemRHRjBhV01nVTJWMFRHOW5aMlZ5Vm1WeVltOXphWFI1S0habGNtSnZjMlZNYjJkTVpYWmxiRG9nYm5WdFltVnlLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5abGNtSnZjMlZNYjJkTVpYWmxiQ0FoUFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5abGNtSnZjMlZNYjJkTVpYWmxiQ0E5SUhabGNtSnZjMlZNYjJkTVpYWmxiRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZSb1pTQnpkR0Z1WkdGeVpDQnNiMmRuYVc1bklHOTFkSEIxZEZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0J6ZEdGamF5QXRJSFJvWlNCemRHRmpheUIwY21GalpWeHVJQ0FnSUNBcUlFQndZWEpoYlNCdFpYTnpZV2RsSUMwZ2RHaGxJRzFsYzNOaFoyVWdkRzhnWW1VZ2JHOW5aMlZrWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSFpsY21KdmMybDBlU0F0SUhSb1pTQjJaWEppYjNOcGRIa2diR1YyWld4Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6ZEdGMGFXTWdURzluS0hOMFlXTnJPaUJ6ZEhKcGJtY3NJRzFsYzNOaFoyVTZJSE4wY21sdVp5d2dkbVZ5WW05emFYUjVQem9nYm5WdFltVnlLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDJaWEppYjNOcGRIa2dQaUIwYUdsekxuWmxjbUp2YzJWTWIyZE1aWFpsYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnY21WMGRYSnVVM1J5YVc1bklEMGdZRXhsZG1Wc09pQk1iMmRjWEc1TmMyYzZJQ1I3YldWemMyRm5aWDFjWEc1RFlXeHNaWEk2SUNSN2MzUmhZMnQ5WUR0Y2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29jbVYwZFhKdVUzUnlhVzVuS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVWFHVWdjM1JoYm1SaGNtUWdiRzluWjJsdVp5QnZkWFJ3ZFhSY2JpQWdJQ0FnS2lCQWNHRnlZVzBnYzNSaFkyc2dMU0IwYUdVZ2MzUmhZMnNnZEhKaFkyVmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2JXVnpjMkZuWlNBdElIUm9aU0J0WlhOellXZGxJSFJ2SUdKbElHeHZaMmRsWkZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0IyWlhKaWIzTnBkSGtnTFNCMGFHVWdkbVZ5WW05emFYUjVJR3hsZG1Wc1hHNGdJQ0FnSUNvdlhHNGdJQ0FnYzNSaGRHbGpJRWx1Wm04b2MzUmhZMnM2SUhOMGNtbHVaeXdnYldWemMyRm5aVG9nYzNSeWFXNW5MQ0IyWlhKaWIzTnBkSGsvT2lCdWRXMWlaWElwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFpsY21KdmMybDBlU0ErSUhSb2FYTXVkbVZ5WW05elpVeHZaMHhsZG1Wc0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCeVpYUjFjbTVUZEhKcGJtY2dQU0JnVEdWMlpXdzZJRWx1Wm05Y1hHNU5jMmM2SUNSN2JXVnpjMkZuWlgxZ08xeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtbHVabThvY21WMGRYSnVVM1J5YVc1bktUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlVhR1VnYzNSaGJtUmhjbVFnYkc5bloybHVaeUJ2ZFhSd2RYUmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2MzUmhZMnNnTFNCMGFHVWdjM1JoWTJzZ2RISmhZMlZjYmlBZ0lDQWdLaUJBY0dGeVlXMGdiV1Z6YzJGblpTQXRJSFJvWlNCdFpYTnpZV2RsSUhSdklHSmxJR3h2WjJkbFpGeHVJQ0FnSUNBcUwxeHVJQ0FnSUhOMFlYUnBZeUJGY25KdmNpaHpkR0ZqYXpvZ2MzUnlhVzVuTENCdFpYTnpZV2RsT2lCemRISnBibWNwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnY21WMGRYSnVVM1J5YVc1bklEMGdZRXhsZG1Wc09pQkZjbkp2Y2x4Y2JrMXpaem9nSkh0dFpYTnpZV2RsZlZ4Y2JrTmhiR3hsY2pvZ0pIdHpkR0ZqYTMxZ08xeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0hKbGRIVnlibE4wY21sdVp5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dWR2hsSUhOMFlXNWtZWEprSUd4dloyZHBibWNnYjNWMGNIVjBYRzRnSUNBZ0lDb2dRSEJoY21GdElITjBZV05ySUMwZ2RHaGxJSE4wWVdOcklIUnlZV05sWEc0Z0lDQWdJQ29nUUhCaGNtRnRJRzFsYzNOaFoyVWdMU0IwYUdVZ2JXVnpjMkZuWlNCMGJ5QmlaU0JzYjJkblpXUmNiaUFnSUNBZ0tpOWNiaUFnSUNCemRHRjBhV01nVjJGeWJtbHVaeWh6ZEdGamF6b2djM1J5YVc1bkxDQnRaWE56WVdkbE9pQnpkSEpwYm1jcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2NtVjBkWEp1VTNSeWFXNW5JRDBnWUV4bGRtVnNPaUJYWVhKdWFXNW5YRnh1UTJGc2JHVnlPaUFrZTNOMFlXTnJmVnhjYmsxelp6b2dKSHR0WlhOellXZGxmV0E3WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpaHlaWFIxY201VGRISnBibWNwTzF4dUlDQWdJSDFjYm4xY2JpSXNJaTh2SUVOdmNIbHlhV2RvZENCRmNHbGpJRWRoYldWekxDQkpibU11SUVGc2JDQlNhV2RvZEhNZ1VtVnpaWEoyWldRdVhHNWNibWx0Y0c5eWRDQjdYRzRnSUNBZ1NXNWliM1Z1WkZKVVVGTjBZWFJ6TEZ4dUlDQWdJRWx1WW05MWJtUldhV1JsYjFOMFlYUnpMRnh1SUNBZ0lFbHVZbTkxYm1SQmRXUnBiMU4wWVhSelhHNTlJR1p5YjIwZ0p5NHZTVzVpYjNWdVpGSlVVRk4wWVhSekp6dGNibWx0Y0c5eWRDQjdJRWx1WW05MWJtUlVjbUZqYTFOMFlYUnpJSDBnWm5KdmJTQW5MaTlKYm1KdmRXNWtWSEpoWTJ0VGRHRjBjeWM3WEc1cGJYQnZjblFnZXlCRVlYUmhRMmhoYm01bGJGTjBZWFJ6SUgwZ1puSnZiU0FuTGk5RVlYUmhRMmhoYm01bGJGTjBZWFJ6Snp0Y2JtbHRjRzl5ZENCN0lFTmhibVJwWkdGMFpWTjBZWFFnZlNCbWNtOXRJQ2N1TDBOaGJtUnBaR0YwWlZOMFlYUW5PMXh1YVcxd2IzSjBJSHNnUTJGdVpHbGtZWFJsVUdGcGNsTjBZWFJ6SUgwZ1puSnZiU0FuTGk5RFlXNWthV1JoZEdWUVlXbHlVM1JoZEhNbk8xeHVhVzF3YjNKMElIc2dUM1YwUW05MWJtUlNWRkJUZEdGMGN5d2dUM1YwUW05MWJtUldhV1JsYjFOMFlYUnpJSDBnWm5KdmJTQW5MaTlQZFhSQ2IzVnVaRkpVVUZOMFlYUnpKenRjYm1sdGNHOXlkQ0I3SUZObGMzTnBiMjVUZEdGMGN5QjlJR1p5YjIwZ0p5NHZVMlZ6YzJsdmJsTjBZWFJ6Snp0Y2JtbHRjRzl5ZENCN0lGTjBjbVZoYlZOMFlYUnpJSDBnWm5KdmJTQW5MaTlUZEhKbFlXMVRkR0YwY3ljN1hHNXBiWEJ2Y25RZ2V5QkRiMlJsWTFOMFlYUnpJSDBnWm5KdmJTQW5MaTlEYjJSbFkxTjBZWFJ6Snp0Y2JtbHRjRzl5ZENCN0lFeHZaMmRsY2lCOUlHWnliMjBnSnk0dUwweHZaMmRsY2k5TWIyZG5aWEluTzF4dVhHNHZLaXBjYmlBcUlGUm9aU0JCWjJkeVpXZGhkR1ZrSUZOMFlYUnpJSFJvWVhRZ2FYTWdaMlZ1WlhKaGRHVmtJR1p5YjIwZ2RHaGxJRkpVUXlCVGRHRjBjeUJTWlhCdmNuUmNiaUFxTDF4dVhHNTBlWEJsSUZKVVExTjBZWFJ6Vkhsd1pWQlRJRDBnVWxSRFUzUmhkSE5VZVhCbElId2dKM04wY21WaGJTY2dmQ0FuYldWa2FXRXRjR3hoZVc5MWRDY2dmQ0FuZEhKaFkyc25PMXh1Wlhod2IzSjBJR05zWVhOeklFRm5aM0psWjJGMFpXUlRkR0YwY3lCN1hHNGdJQ0FnYVc1aWIzVnVaRlpwWkdWdlUzUmhkSE02SUVsdVltOTFibVJXYVdSbGIxTjBZWFJ6TzF4dUlDQWdJR2x1WW05MWJtUkJkV1JwYjFOMFlYUnpPaUJKYm1KdmRXNWtRWFZrYVc5VGRHRjBjenRjYmlBZ0lDQnNZWE4wVm1sa1pXOVRkR0YwY3pvZ1NXNWliM1Z1WkZacFpHVnZVM1JoZEhNN1hHNGdJQ0FnYkdGemRFRjFaR2x2VTNSaGRITTZJRWx1WW05MWJtUkJkV1JwYjFOMFlYUnpPMXh1SUNBZ0lHTmhibVJwWkdGMFpWQmhhWEp6T2lCQmNuSmhlVHhEWVc1a2FXUmhkR1ZRWVdseVUzUmhkSE0rTzF4dUlDQWdJRVJoZEdGRGFHRnVibVZzVTNSaGRITTZJRVJoZEdGRGFHRnVibVZzVTNSaGRITTdYRzRnSUNBZ2JHOWpZV3hEWVc1a2FXUmhkR1Z6T2lCQmNuSmhlVHhEWVc1a2FXUmhkR1ZUZEdGMFBqdGNiaUFnSUNCeVpXMXZkR1ZEWVc1a2FXUmhkR1Z6T2lCQmNuSmhlVHhEWVc1a2FXUmhkR1ZUZEdGMFBqdGNiaUFnSUNCdmRYUkNiM1Z1WkZacFpHVnZVM1JoZEhNNklFOTFkRUp2ZFc1a1ZtbGtaVzlUZEdGMGN6dGNiaUFnSUNCelpYTnphVzl1VTNSaGRITTZJRk5sYzNOcGIyNVRkR0YwY3p0Y2JpQWdJQ0J6ZEhKbFlXMVRkR0YwY3pvZ1UzUnlaV0Z0VTNSaGRITTdYRzRnSUNBZ1kyOWtaV056T2lCTllYQThjM1J5YVc1bkxDQnpkSEpwYm1jK08xeHVJQ0FnSUhSeVlXNXpjRzl5ZEZOMFlYUnpPaUJTVkVOVWNtRnVjM0J2Y25SVGRHRjBjenRjYmx4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1sdVltOTFibVJXYVdSbGIxTjBZWFJ6SUQwZ2JtVjNJRWx1WW05MWJtUldhV1JsYjFOMFlYUnpLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhVzVpYjNWdVpFRjFaR2x2VTNSaGRITWdQU0J1WlhjZ1NXNWliM1Z1WkVGMVpHbHZVM1JoZEhNb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RVlYUmhRMmhoYm01bGJGTjBZWFJ6SUQwZ2JtVjNJRVJoZEdGRGFHRnVibVZzVTNSaGRITW9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXZkWFJDYjNWdVpGWnBaR1Z2VTNSaGRITWdQU0J1WlhjZ1QzVjBRbTkxYm1SV2FXUmxiMU4wWVhSektDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVnpjMmx2YmxOMFlYUnpJRDBnYm1WM0lGTmxjM05wYjI1VGRHRjBjeWdwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk4wY21WaGJWTjBZWFJ6SUQwZ2JtVjNJRk4wY21WaGJWTjBZWFJ6S0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WTI5a1pXTnpJRDBnYm1WM0lFMWhjRHh6ZEhKcGJtY3NJSE4wY21sdVp6NG9LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJIWVhSb1pYSWdZV3hzSUhSb1pTQnBibVp2Y20xaGRHbHZiaUJtY205dElIUm9aU0JTVkVNZ1VHVmxjaUJEYjI1dVpXTjBhVzl1SUZKbGNHOXlkRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnlkR05UZEdGMGMxSmxjRzl5ZENBdElGSlVReUJUZEdGMGN5QlNaWEJ2Y25SY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3Y205alpYTnpVM1JoZEhNb2NuUmpVM1JoZEhOU1pYQnZjblE2SUZKVVExTjBZWFJ6VW1Wd2IzSjBLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViRzlqWVd4RFlXNWthV1JoZEdWeklEMGdibVYzSUVGeWNtRjVQRU5oYm1ScFpHRjBaVk4wWVhRK0tDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtVnRiM1JsUTJGdVpHbGtZWFJsY3lBOUlHNWxkeUJCY25KaGVUeERZVzVrYVdSaGRHVlRkR0YwUGlncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1OaGJtUnBaR0YwWlZCaGFYSnpJRDBnYm1WM0lFRnljbUY1UEVOaGJtUnBaR0YwWlZCaGFYSlRkR0YwY3o0b0tUdGNibHh1SUNBZ0lDQWdJQ0J5ZEdOVGRHRjBjMUpsY0c5eWRDNW1iM0pGWVdOb0tDaHpkR0YwS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0IwZVhCbE9pQlNWRU5UZEdGMGMxUjVjR1ZRVXlBOUlITjBZWFF1ZEhsd1pUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2MzZHBkR05vSUNoMGVYQmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQW5ZMkZ1Wkdsa1lYUmxMWEJoYVhJbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtaGhibVJzWlVOaGJtUnBaR0YwWlZCaGFYSW9jM1JoZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSjJObGNuUnBabWxqWVhSbEp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBblkyOWtaV01uT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1oaGJtUnNaVU52WkdWaktITjBZWFFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2RrWVhSaExXTm9ZVzV1Wld3bk9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtaGhibVJzWlVSaGRHRkRhR0Z1Ym1Wc0tITjBZWFFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2RwYm1KdmRXNWtMWEowY0NjNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFHRnVaR3hsU1c1Q2IzVnVaRkpVVUNoemRHRjBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQW5iRzlqWVd3dFkyRnVaR2xrWVhSbEp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NW9ZVzVrYkdWTWIyTmhiRU5oYm1ScFpHRjBaU2h6ZEdGMEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbmJXVmthV0V0YzI5MWNtTmxKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQW5iV1ZrYVdFdGNHeGhlVzkxZENjNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSjI5MWRHSnZkVzVrTFhKMGNDYzZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0ozQmxaWEl0WTI5dWJtVmpkR2x2YmljNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSjNKbGJXOTBaUzFqWVc1a2FXUmhkR1VuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1oaGJtUnNaVkpsYlc5MFpVTmhibVJwWkdGMFpTaHpkR0YwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FuY21WdGIzUmxMV2x1WW05MWJtUXRjblJ3SnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FuY21WdGIzUmxMVzkxZEdKdmRXNWtMWEowY0NjNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFHRnVaR3hsVW1WdGIzUmxUM1YwUW05MWJtUW9jM1JoZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSjNSeVlXTnJKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVvWVc1a2JHVlVjbUZqYXloemRHRjBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQW5kSEpoYm5Od2IzSjBKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVvWVc1a2JHVlVjbUZ1YzNCdmNuUW9jM1JoZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSjNOMGNtVmhiU2M2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YUdGdVpHeGxVM1J5WldGdEtITjBZWFFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVJYSnliM0lvVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTd2dKM1Z1YUdGdVpHeGxaQ0JUZEdGMElGUjVjR1VuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExDQnpkR0YwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGQnliMk5sYzNNZ2MzUnlaV0Z0SUhOMFlYUnpJR1JoZEdFZ1puSnZiU0IzWldKeWRHTmNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQndZWEpoYlNCemRHRjBJQzBnZEdobElITjBZWFJ6SUdOdmJXbHVaeUJwYmlCbWNtOXRJSGRsWW5KMFkxeHVJQ0FnSUNBcUwxeHVJQ0FnSUdoaGJtUnNaVk4wY21WaGJTaHpkR0YwT2lCVGRISmxZVzFUZEdGMGN5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBjbVZoYlZOMFlYUnpJRDBnYzNSaGREdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlFjbTlqWlhOeklIUm9aU0JKWTJVZ1EyRnVaR2xrWVhSbElGQmhhWElnUkdGMFlWeHVJQ0FnSUNBcUlFQndZWEpoYlNCemRHRjBJQzBnZEdobElITjBZWFJ6SUdOdmJXbHVaeUJwYmlCbWNtOXRJR2xqWlNCallXNWthV1JoZEdWelhHNGdJQ0FnSUNvdlhHNGdJQ0FnYUdGdVpHeGxRMkZ1Wkdsa1lYUmxVR0ZwY2loemRHRjBPaUJEWVc1a2FXUmhkR1ZRWVdseVUzUmhkSE1wSUh0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJCWkdRZ2RHaGxJR05oYm1ScFpHRjBaU0J3WVdseUlIUnZJSFJvWlNCallXNWthV1JoZEdVZ2NHRnBjaUJoY25KaGVWeHVJQ0FnSUNBZ0lDQjBhR2x6TG1OaGJtUnBaR0YwWlZCaGFYSnpMbkIxYzJnb2MzUmhkQ2xjYmx4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZCeWIyTmxjM01nZEdobElFUmhkR0VnUTJoaGJtNWxiQ0JFWVhSaFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhOMFlYUWdMU0IwYUdVZ2MzUmhkSE1nWTI5dGFXNW5JR2x1SUdaeWIyMGdkR2hsSUdSaGRHRWdZMmhoYm01bGJGeHVJQ0FnSUNBcUwxeHVJQ0FnSUdoaGJtUnNaVVJoZEdGRGFHRnVibVZzS0hOMFlYUTZJRVJoZEdGRGFHRnVibVZzVTNSaGRITXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NUVZWFJoUTJoaGJtNWxiRk4wWVhSekxtSjVkR1Z6VW1WalpXbDJaV1FnUFNCemRHRjBMbUo1ZEdWelVtVmpaV2wyWldRN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UkdGMFlVTm9ZVzV1Wld4VGRHRjBjeTVpZVhSbGMxTmxiblFnUFNCemRHRjBMbUo1ZEdWelUyVnVkRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NUVZWFJoUTJoaGJtNWxiRk4wWVhSekxtUmhkR0ZEYUdGdWJtVnNTV1JsYm5ScFptbGxjaUE5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkR0YwTG1SaGRHRkRhR0Z1Ym1Wc1NXUmxiblJwWm1sbGNqdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RVlYUmhRMmhoYm01bGJGTjBZWFJ6TG1sa0lEMGdjM1JoZEM1cFpEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RVlYUmhRMmhoYm01bGJGTjBZWFJ6TG14aFltVnNJRDBnYzNSaGRDNXNZV0psYkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVFWVhSaFEyaGhibTVsYkZOMFlYUnpMbTFsYzNOaFoyVnpVbVZqWldsMlpXUWdQU0J6ZEdGMExtMWxjM05oWjJWelVtVmpaV2wyWldRN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UkdGMFlVTm9ZVzV1Wld4VGRHRjBjeTV0WlhOellXZGxjMU5sYm5RZ1BTQnpkR0YwTG0xbGMzTmhaMlZ6VTJWdWREdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RVlYUmhRMmhoYm01bGJGTjBZWFJ6TG5CeWIzUnZZMjlzSUQwZ2MzUmhkQzV3Y205MGIyTnZiRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NUVZWFJoUTJoaGJtNWxiRk4wWVhSekxuTjBZWFJsSUQwZ2MzUmhkQzV6ZEdGMFpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RVlYUmhRMmhoYm01bGJGTjBZWFJ6TG5ScGJXVnpkR0Z0Y0NBOUlITjBZWFF1ZEdsdFpYTjBZVzF3TzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZCeWIyTmxjM01nZEdobElFeHZZMkZzSUVsalpTQkRZVzVrYVdSaGRHVWdSR0YwWVZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0J6ZEdGMElDMGdiRzlqWVd3Z2MzUmhkSE5jYmlBZ0lDQWdLaTljYmlBZ0lDQm9ZVzVrYkdWTWIyTmhiRU5oYm1ScFpHRjBaU2h6ZEdGME9pQkRZVzVrYVdSaGRHVlRkR0YwS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUd4dlkyRnNRMkZ1Wkdsa1lYUmxJRDBnYm1WM0lFTmhibVJwWkdGMFpWTjBZWFFvS1R0Y2JpQWdJQ0FnSUNBZ2JHOWpZV3hEWVc1a2FXUmhkR1V1YkdGaVpXd2dQU0FuYkc5allXd3RZMkZ1Wkdsa1lYUmxKenRjYmlBZ0lDQWdJQ0FnYkc5allXeERZVzVrYVdSaGRHVXVZV1JrY21WemN5QTlJSE4wWVhRdVlXUmtjbVZ6Y3p0Y2JpQWdJQ0FnSUNBZ2JHOWpZV3hEWVc1a2FXUmhkR1V1Y0c5eWRDQTlJSE4wWVhRdWNHOXlkRHRjYmlBZ0lDQWdJQ0FnYkc5allXeERZVzVrYVdSaGRHVXVjSEp2ZEc5amIyd2dQU0J6ZEdGMExuQnliM1J2WTI5c08xeHVJQ0FnSUNBZ0lDQnNiMk5oYkVOaGJtUnBaR0YwWlM1allXNWthV1JoZEdWVWVYQmxJRDBnYzNSaGRDNWpZVzVrYVdSaGRHVlVlWEJsTzF4dUlDQWdJQ0FnSUNCc2IyTmhiRU5oYm1ScFpHRjBaUzVwWkNBOUlITjBZWFF1YVdRN1hHNGdJQ0FnSUNBZ0lHeHZZMkZzUTJGdVpHbGtZWFJsTG5KbGJHRjVVSEp2ZEc5amIyd2dQU0J6ZEdGMExuSmxiR0Y1VUhKdmRHOWpiMnc3WEc0Z0lDQWdJQ0FnSUd4dlkyRnNRMkZ1Wkdsa1lYUmxMblJ5WVc1emNHOXlkRWxrSUQwZ2MzUmhkQzUwY21GdWMzQnZjblJKWkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVzYjJOaGJFTmhibVJwWkdGMFpYTXVjSFZ6YUNoc2IyTmhiRU5oYm1ScFpHRjBaU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVUhKdlkyVnpjeUIwYUdVZ1VtVnRiM1JsSUVsalpTQkRZVzVrYVdSaGRHVWdSR0YwWVZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0J6ZEdGMElDMGdhV05sSUdOaGJtUnBaR0YwWlNCemRHRjBjMXh1SUNBZ0lDQXFMMXh1SUNBZ0lHaGhibVJzWlZKbGJXOTBaVU5oYm1ScFpHRjBaU2h6ZEdGME9pQkRZVzVrYVdSaGRHVlRkR0YwS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUZKbGJXOTBaVU5oYm1ScFpHRjBaU0E5SUc1bGR5QkRZVzVrYVdSaGRHVlRkR0YwS0NrN1hHNGdJQ0FnSUNBZ0lGSmxiVzkwWlVOaGJtUnBaR0YwWlM1c1lXSmxiQ0E5SUNkeVpXMXZkR1V0WTJGdVpHbGtZWFJsSnp0Y2JpQWdJQ0FnSUNBZ1VtVnRiM1JsUTJGdVpHbGtZWFJsTG1Ga1pISmxjM01nUFNCemRHRjBMbUZrWkhKbGMzTTdYRzRnSUNBZ0lDQWdJRkpsYlc5MFpVTmhibVJwWkdGMFpTNXdiM0owSUQwZ2MzUmhkQzV3YjNKME8xeHVJQ0FnSUNBZ0lDQlNaVzF2ZEdWRFlXNWthV1JoZEdVdWNISnZkRzlqYjJ3Z1BTQnpkR0YwTG5CeWIzUnZZMjlzTzF4dUlDQWdJQ0FnSUNCU1pXMXZkR1ZEWVc1a2FXUmhkR1V1YVdRZ1BTQnpkR0YwTG1sa08xeHVJQ0FnSUNBZ0lDQlNaVzF2ZEdWRFlXNWthV1JoZEdVdVkyRnVaR2xrWVhSbFZIbHdaU0E5SUhOMFlYUXVZMkZ1Wkdsa1lYUmxWSGx3WlR0Y2JpQWdJQ0FnSUNBZ1VtVnRiM1JsUTJGdVpHbGtZWFJsTG5KbGJHRjVVSEp2ZEc5amIyd2dQU0J6ZEdGMExuSmxiR0Y1VUhKdmRHOWpiMnc3WEc0Z0lDQWdJQ0FnSUZKbGJXOTBaVU5oYm1ScFpHRjBaUzUwY21GdWMzQnZjblJKWkNBOUlITjBZWFF1ZEhKaGJuTndiM0owU1dSY2JpQWdJQ0FnSUNBZ2RHaHBjeTV5WlcxdmRHVkRZVzVrYVdSaGRHVnpMbkIxYzJnb1VtVnRiM1JsUTJGdVpHbGtZWFJsS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCUWNtOWpaWE56SUhSb1pTQkpibUp2ZFc1a0lGSlVVQ0JCZFdScGJ5QmhibVFnVm1sa1pXOGdSR0YwWVZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0J6ZEdGMElDMGdhVzVpYjNWdVpDQnlkSEFnYzNSaGRITmNiaUFnSUNBZ0tpOWNiaUFnSUNCb1lXNWtiR1ZKYmtKdmRXNWtVbFJRS0hOMFlYUTZJRWx1WW05MWJtUlNWRkJUZEdGMGN5a2dlMXh1SUNBZ0lDQWdJQ0J6ZDJsMFkyZ2dLSE4wWVhRdWEybHVaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbmRtbGtaVzhuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklFNWxaV1FnZEc4Z1kyOXVkbVZ5ZENCMGJ5QjFibXR1YjNkdUlHWnBjbk4wSUhSdklISmxiVzkyWlNCaGJpQmxjbkp2Y2lCaGNtOTFibVJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCSmJtSnZkVzVrVm1sa1pXOVRkR0YwY3lCb1lYWnBibWNnZEdobElHSnBkSEpoZEdVZ2JXVnRZbVZ5SUhkb2FXTm9JR2x6YmlkMElHWnZkVzVrSUc5dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdkR2hsSUVsdVltOTFibVJTVkZCVGRHRjBjMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFXNWliM1Z1WkZacFpHVnZVM1JoZEhNZ1BTQnpkR0YwSUdGeklIVnVhMjV2ZDI0Z1lYTWdTVzVpYjNWdVpGWnBaR1Z2VTNSaGRITTdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVzWVhOMFZtbGtaVzlUZEdGMGN5QWhQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1cGJtSnZkVzVrVm1sa1pXOVRkR0YwY3k1aWFYUnlZWFJsSUQxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNnNElDcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FvZEdocGN5NXBibUp2ZFc1a1ZtbGtaVzlUZEdGMGN5NWllWFJsYzFKbFkyVnBkbVZrSUMxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXNZWE4wVm1sa1pXOVRkR0YwY3k1aWVYUmxjMUpsWTJWcGRtVmtLU2tnTDF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS0hSb2FYTXVhVzVpYjNWdVpGWnBaR1Z2VTNSaGRITXVkR2x0WlhOMFlXMXdJQzFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbXhoYzNSV2FXUmxiMU4wWVhSekxuUnBiV1Z6ZEdGdGNDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVhVzVpYjNWdVpGWnBaR1Z2VTNSaGRITXVZbWwwY21GMFpTQTlJRTFoZEdndVpteHZiM0lvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtbHVZbTkxYm1SV2FXUmxiMU4wWVhSekxtSnBkSEpoZEdWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXNZWE4wVm1sa1pXOVRkR0YwY3lBOUlIc2dMaTR1ZEdocGN5NXBibUp2ZFc1a1ZtbGtaVzlUZEdGMGN5QjlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQW5ZWFZrYVc4bk9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRTVsWldRZ2RHOGdZMjl1ZG1WeWRDQjBieUIxYm10dWIzZHVJR1pwY25OMElIUnZJSEpsYlc5MlpTQmhiaUJsY25KdmNpQmhjbTkxYm1SY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QkpibUp2ZFc1a1FYVmthVzlUZEdGMGN5Qm9ZWFpwYm1jZ2RHaGxJR0pwZEhKaGRHVWdiV1Z0WW1WeUlIZG9hV05vSUdsemJpZDBJR1p2ZFc1a0lHOXVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnZEdobElFbHVZbTkxYm1SU1ZGQlRkR0YwYzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVhVzVpYjNWdVpFRjFaR2x2VTNSaGRITWdQU0J6ZEdGMElHRnpJSFZ1YTI1dmQyNGdZWE1nU1c1aWIzVnVaRUYxWkdsdlUzUmhkSE03WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1c1lYTjBRWFZrYVc5VGRHRjBjeUFoUFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXBibUp2ZFc1a1FYVmthVzlUZEdGMGN5NWlhWFJ5WVhSbElEMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZzRJQ3BjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb2RHaHBjeTVwYm1KdmRXNWtRWFZrYVc5VGRHRjBjeTVpZVhSbGMxSmxZMlZwZG1Wa0lDMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVzWVhOMFFYVmthVzlUZEdGMGN5NWllWFJsYzFKbFkyVnBkbVZrS1NrZ0wxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tIUm9hWE11YVc1aWIzVnVaRUYxWkdsdlUzUmhkSE11ZEdsdFpYTjBZVzF3SUMxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG14aGMzUkJkV1JwYjFOMFlYUnpMblJwYldWemRHRnRjQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YVc1aWIzVnVaRUYxWkdsdlUzUmhkSE11WW1sMGNtRjBaU0E5SUUxaGRHZ3VabXh2YjNJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWx1WW05MWJtUkJkV1JwYjFOMFlYUnpMbUpwZEhKaGRHVmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVzWVhOMFFYVmthVzlUZEdGMGN5QTlJSHNnTGk0dWRHaHBjeTVwYm1KdmRXNWtRWFZrYVc5VGRHRjBjeUI5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZERwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzSUNkTGFXNWtJR2x6SUc1dmRDQm9ZVzVrYkdWa0p5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlFjbTlqWlhOeklIUm9aU0J2ZFhSaWIzVnVaQ0JTVkZBZ1FYVmthVzhnWVc1a0lGWnBaR1Z2SUVSaGRHRmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2MzUmhkQ0F0SUhKbGJXOTBaU0J2ZFhSaWIzVnVaQ0J6ZEdGMGMxeHVJQ0FnSUNBcUwxeHVJQ0FnSUdoaGJtUnNaVkpsYlc5MFpVOTFkRUp2ZFc1a0tITjBZWFE2SUU5MWRFSnZkVzVrVWxSUVUzUmhkSE1wSUh0Y2JpQWdJQ0FnSUNBZ2MzZHBkR05vSUNoemRHRjBMbXRwYm1RcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKM1pwWkdWdkp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG05MWRFSnZkVzVrVm1sa1pXOVRkR0YwY3k1aWVYUmxjMU5sYm5RZ1BTQnpkR0YwTG1KNWRHVnpVMlZ1ZER0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTkxZEVKdmRXNWtWbWxrWlc5VGRHRjBjeTVwWkNBOUlITjBZWFF1YVdRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV2ZFhSQ2IzVnVaRlpwWkdWdlUzUmhkSE11Ykc5allXeEpaQ0E5SUhOMFlYUXViRzlqWVd4SlpEdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG05MWRFSnZkVzVrVm1sa1pXOVRkR0YwY3k1d1lXTnJaWFJ6VTJWdWRDQTlJSE4wWVhRdWNHRmphMlYwYzFObGJuUTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dmRYUkNiM1Z1WkZacFpHVnZVM1JoZEhNdWNtVnRiM1JsVkdsdFpYTjBZVzF3SUQwZ2MzUmhkQzV5WlcxdmRHVlVhVzFsYzNSaGJYQTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dmRYUkNiM1Z1WkZacFpHVnZVM1JoZEhNdWRHbHRaWE4wWVcxd0lEMGdjM1JoZEM1MGFXMWxjM1JoYlhBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkaGRXUnBieWM2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmxabUYxYkhRNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCUWNtOWpaWE56SUhSb1pTQkpibUp2ZFc1a0lGWnBaR1Z2SUZSeVlXTnJJRVJoZEdGY2JpQWdJQ0FnS2lCQWNHRnlZVzBnYzNSaGRDQXRJSFpwWkdWdklIUnlZV05ySUhOMFlYUnpYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2FHRnVaR3hsVkhKaFkyc29jM1JoZERvZ1NXNWliM1Z1WkZSeVlXTnJVM1JoZEhNcElIdGNiaUFnSUNBZ0lDQWdMeThnZDJVZ2IyNXNlU0IzWVc1MElIUnZJR1Y0ZEhKaFkzUWdjM1JoZEhNZ1puSnZiU0IwYUdVZ2RtbGtaVzhnZEhKaFkydGNiaUFnSUNBZ0lDQWdhV1lnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdjM1JoZEM1MGVYQmxJRDA5UFNBbmRISmhZMnNuSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FvYzNSaGRDNTBjbUZqYTBsa1pXNTBhV1pwWlhJZ1BUMDlJQ2QyYVdSbGIxOXNZV0psYkNjZ2ZId2djM1JoZEM1cmFXNWtJRDA5UFNBbmRtbGtaVzhuS1Z4dUlDQWdJQ0FnSUNBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVhVzVpYjNWdVpGWnBaR1Z2VTNSaGRITXVabkpoYldWelJISnZjSEJsWkNBOUlITjBZWFF1Wm5KaGJXVnpSSEp2Y0hCbFpEdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVhVzVpYjNWdVpGWnBaR1Z2VTNSaGRITXVabkpoYldWelVtVmpaV2wyWldRZ1BTQnpkR0YwTG1aeVlXMWxjMUpsWTJWcGRtVmtPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVwYm1KdmRXNWtWbWxrWlc5VGRHRjBjeTVtY21GdFpVaGxhV2RvZENBOUlITjBZWFF1Wm5KaGJXVklaV2xuYUhRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtbHVZbTkxYm1SV2FXUmxiMU4wWVhSekxtWnlZVzFsVjJsa2RHZ2dQU0J6ZEdGMExtWnlZVzFsVjJsa2RHZzdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQm9ZVzVrYkdWVWNtRnVjM0J2Y25Rb2MzUmhkRG9nVWxSRFZISmhibk53YjNKMFUzUmhkSE1wZTF4dUlDQWdJQ0FnSUNCMGFHbHpMblJ5WVc1emNHOXlkRk4wWVhSeklEMGdjM1JoZER0Y2JpQWdJQ0I5WEc1Y2JseHVJQ0FnSUdoaGJtUnNaVU52WkdWaktITjBZWFE2SUVOdlpHVmpVM1JoZEhNcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1kyOWtaV05KWkNBOUlITjBZWFF1YVdRN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdOdlpHVmpWSGx3WlNBOUlHQWtlM04wWVhRdWJXbHRaVlI1Y0dWY2JpQWdJQ0FnSUNBZ0lDQWdJQzV5WlhCc1lXTmxLQ2QyYVdSbGJ5OG5MQ0FuSnlsY2JpQWdJQ0FnSUNBZ0lDQWdJQzV5WlhCc1lXTmxLQ2RoZFdScGJ5OG5MQ0FuSnlsOUpIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOMFlYUXVjMlJ3Um0xMGNFeHBibVVnUHlCZ0lDUjdjM1JoZEM1elpIQkdiWFJ3VEdsdVpYMWdJRG9nSnlkY2JpQWdJQ0FnSUNBZ2ZXQTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyOWtaV056TG5ObGRDaGpiMlJsWTBsa0xDQmpiMlJsWTFSNWNHVXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHaGhibVJzWlZObGMzTnBiMjVUZEdGMGFYTjBhV056S0Z4dUlDQWdJQ0FnSUNCMmFXUmxiMU4wWVhKMFZHbHRaVG9nYm5WdFltVnlMRnh1SUNBZ0lDQWdJQ0JwYm5CMWRFTnZiblJ5YjJ4c1pYSTZJR0p2YjJ4bFlXNGdmQ0J1ZFd4c0xGeHVJQ0FnSUNBZ0lDQjJhV1JsYjBWdVkyOWtaWEpCZG1kUlVEb2diblZ0WW1WeVhHNGdJQ0FnS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdSbGJIUmhWR2x0WlNBOUlFUmhkR1V1Ym05M0tDa2dMU0IyYVdSbGIxTjBZWEowVkdsdFpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1elpYTnphVzl1VTNSaGRITXVjblZ1VkdsdFpTQTlJRzVsZHlCRVlYUmxLR1JsYkhSaFZHbHRaU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDNTBiMGxUVDFOMGNtbHVaeWdwWEc0Z0lDQWdJQ0FnSUNBZ0lDQXVjM1ZpYzNSeUtERXhMQ0E0S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdMblJ2VTNSeWFXNW5LQ2s3WEc1Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWTI5dWRISnZiSE5UZEhKbFlXMUpibkIxZENBOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwYm5CMWRFTnZiblJ5YjJ4c1pYSWdQVDA5SUc1MWJHeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQS9JQ2RPYjNRZ2MyVnVkQ0I1WlhRblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ09pQnBibkIxZEVOdmJuUnliMnhzWlhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBL0lDZDBjblZsSjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURvZ0oyWmhiSE5sSnp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6WlhOemFXOXVVM1JoZEhNdVkyOXVkSEp2YkhOVGRISmxZVzFKYm5CMWRDQTlJR052Ym5SeWIyeHpVM1J5WldGdFNXNXdkWFE3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6WlhOemFXOXVVM1JoZEhNdWRtbGtaVzlGYm1OdlpHVnlRWFpuVVZBZ1BTQjJhV1JsYjBWdVkyOWtaWEpCZG1kUlVEdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkRhR1ZqYXlCcFppQmhJSFpoYkhWbElHTnZiV2x1WnlCcGJpQm1jbTl0SUc5MWNpQnpkR0YwY3lCcGN5QmhZM1IxWVd4c2VTQmhJRzUxYldKbGNseHVJQ0FnSUNBcUlFQndZWEpoYlNCMllXeDFaU0F0SUhSb1pTQnVkVzFpWlhJZ2RHOGdZbVVnWTJobFkydGxaRnh1SUNBZ0lDQXFMMXh1SUNBZ0lHbHpUblZ0WW1WeUtIWmhiSFZsT2lCMWJtdHViM2R1S1RvZ1ltOXZiR1ZoYmlCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGVYQmxiMllnZG1Gc2RXVWdQVDA5SUNkdWRXMWlaWEluSUNZbUlHbHpSbWx1YVhSbEtIWmhiSFZsS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSVpXeHdaWElnWm5WdVkzUnBiMjRnZEc4Z2NtVjBkWEp1SUhSb1pTQmhZM1JwZG1VZ1kyRnVaR2xrWVhSbElIQmhhWEpjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUJVYUdVZ1kyRnVaR2xrWVhSbElIQmhhWElnZEdoaGRDQnBjeUJqZFhKeVpXNTBiSGtnY21WalpXbDJhVzVuSUdSaGRHRmNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nWjJWMFFXTjBhWFpsUTJGdVpHbGtZWFJsVUdGcGNpZ3BPaUJEWVc1a2FXUmhkR1ZRWVdseVUzUmhkSE1nZkNCdWRXeHNJSHRjYmlBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUM4dklFTm9aV05ySUdsbUlIUm9aU0JTVkVOVWNtRnVjM0J2Y25RZ2MzUmhkQ0JwY3lCdWIzUWdkVzVrWldacGJtVmtYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMblJ5WVc1emNHOXlkRk4wWVhSektYdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGSmxkSFZ5YmlCMGFHVWdZMkZ1Wkdsa1lYUmxJSEJoYVhJZ2RHaGhkQ0J0WVhSamFHVnpJSFJvWlNCMGNtRnVjM0J2Y25RZ1kyRnVaR2xrWVhSbElIQmhhWElnYVdSY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1OaGJtUnBaR0YwWlZCaGFYSnpMbVpwYm1Rb0tHTmhibVJwWkdGMFpWQmhhWElwSUQwK0lHTmhibVJwWkdGMFpWQmhhWEl1YVdRZ1BUMDlJSFJvYVhNdWRISmhibk53YjNKMFUzUmhkSE11YzJWc1pXTjBaV1JEWVc1a2FXUmhkR1ZRWVdseVNXUXNJRzUxYkd3cE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0F2THlCR1lXeHNJR0poWTJzZ2RHOGdkR2hsSUhObGJHVmpkR1ZrSUdOaGJtUnBaR0YwWlNCd1lXbHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1OaGJtUnBaR0YwWlZCaGFYSnpMbVpwYm1Rb0tHTmhibVJwWkdGMFpWQmhhWElwSUQwK0lHTmhibVJwWkdGMFpWQmhhWEl1YzJWc1pXTjBaV1FzSUc1MWJHd3BPMXh1SUNBZ0lIMGdJRnh1ZlZ4dUlpd2lMeThnUTI5d2VYSnBaMmgwSUVWd2FXTWdSMkZ0WlhNc0lFbHVZeTRnUVd4c0lGSnBaMmgwY3lCU1pYTmxjblpsWkM1Y2JseHVMeW9xWEc0Z0tpQkpRMFVnUTJGdVpHbGtZWFJsSUZCaGFYSWdVM1JoZEhNZ1kyOXNiR1ZqZEdWa0lHWnliMjBnZEdobElGSlVReUJUZEdGMGN5QlNaWEJ2Y25SY2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklFTmhibVJwWkdGMFpWQmhhWEpUZEdGMGN5QjdYRzRnSUNBZ1lubDBaWE5TWldObGFYWmxaRG9nYm5WdFltVnlPMXh1SUNBZ0lHSjVkR1Z6VTJWdWREb2diblZ0WW1WeU8xeHVJQ0FnSUdOMWNuSmxiblJTYjNWdVpGUnlhWEJVYVcxbE9pQnVkVzFpWlhJN1hHNGdJQ0FnYVdRNklITjBjbWx1Wnp0Y2JpQWdJQ0JzWVhOMFVHRmphMlYwVW1WalpXbDJaV1JVYVcxbGMzUmhiWEE2SUc1MWJXSmxjanRjYmlBZ0lDQnNZWE4wVUdGamEyVjBVMlZ1ZEZScGJXVnpkR0Z0Y0RvZ2JuVnRZbVZ5TzF4dUlDQWdJR3h2WTJGc1EyRnVaR2xrWVhSbFNXUTZJSE4wY21sdVp6dGNiaUFnSUNCdWIyMXBibUYwWldRNklHSnZiMnhsWVc0N1hHNGdJQ0FnY0hKcGIzSnBkSGs2SUc1MWJXSmxjanRjYmlBZ0lDQnlaV0ZrWVdKc1pUb2dZbTl2YkdWaGJqdGNiaUFnSUNCeVpXMXZkR1ZEWVc1a2FXUmhkR1ZKWkRvZ2MzUnlhVzVuTzF4dUlDQWdJSE5sYkdWamRHVmtPaUJpYjI5c1pXRnVPMXh1SUNBZ0lITjBZWFJsT2lCemRISnBibWM3WEc0Z0lDQWdkR2x0WlhOMFlXMXdPaUJ1ZFcxaVpYSTdYRzRnSUNBZ2RISmhibk53YjNKMFNXUTZJSE4wY21sdVp6dGNiaUFnSUNCMGVYQmxPaUJ6ZEhKcGJtYzdYRzRnSUNBZ2QzSnBkR0ZpYkdVNklHSnZiMnhsWVc0N0lDQmNibjFjYmlJc0lpOHZJRU52Y0hseWFXZG9kQ0JGY0dsaklFZGhiV1Z6TENCSmJtTXVJRUZzYkNCU2FXZG9kSE1nVW1WelpYSjJaV1F1WEc1Y2JpOHFLbHh1SUNvZ1NVTkZJRU5oYm1ScFpHRjBaU0JUZEdGMElHTnZiR3hsWTNSbFpDQm1jbTl0SUhSb1pTQlNWRU1nVTNSaGRITWdVbVZ3YjNKMFhHNGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5QkRZVzVrYVdSaGRHVlRkR0YwSUh0Y2JpQWdJQ0JoWkdSeVpYTnpPaUJ6ZEhKcGJtYzdYRzRnSUNBZ1kyRnVaR2xrWVhSbFZIbHdaVG9nYzNSeWFXNW5PMXh1SUNBZ0lHbGtPaUJ6ZEhKcGJtYzdYRzRnSUNBZ2JHRmlaV3c2SUhOMGNtbHVaenNnSUNBZ1hHNGdJQ0FnY0c5eWREb2diblZ0WW1WeU8xeHVJQ0FnSUhCeWIzUnZZMjlzT2lBbmRHTndKeUI4SUNkMVpIQW5PMXh1SUNBZ0lISmxiR0Y1VUhKdmRHOWpiMnc2SUNkMFkzQW5JSHdnSjNWa2NDY2dmQ0FuZEd4ekp6dGNiaUFnSUNCMGNtRnVjM0J2Y25SSlpEb2djM1J5YVc1bk8xeHVmVnh1SWl3aUx5OGdRMjl3ZVhKcFoyaDBJRVZ3YVdNZ1IyRnRaWE1zSUVsdVl5NGdRV3hzSUZKcFoyaDBjeUJTWlhObGNuWmxaQzVjYmx4dUx5b3FYRzRnS2lCRVlYUmhJRU5vWVc1dVpXd2dVM1JoZEhNZ1kyOXNiR1ZqZEdWa0lHWnliMjBnZEdobElGSlVReUJUZEdGMGN5QlNaWEJ2Y25SY2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklFUmhkR0ZEYUdGdWJtVnNVM1JoZEhNZ2UxeHVJQ0FnSUdKNWRHVnpVbVZqWldsMlpXUTZJRzUxYldKbGNqdGNiaUFnSUNCaWVYUmxjMU5sYm5RNklHNTFiV0psY2p0Y2JpQWdJQ0JrWVhSaFEyaGhibTVsYkVsa1pXNTBhV1pwWlhJNklHNTFiV0psY2p0Y2JpQWdJQ0JwWkRvZ2MzUnlhVzVuTzF4dUlDQWdJR3hoWW1Wc09pQnpkSEpwYm1jN1hHNGdJQ0FnYldWemMyRm5aWE5TWldObGFYWmxaRG9nYm5WdFltVnlPMXh1SUNBZ0lHMWxjM05oWjJWelUyVnVkRG9nYm5WdFltVnlPMXh1SUNBZ0lIQnliM1J2WTI5c09pQnpkSEpwYm1jN1hHNGdJQ0FnYzNSaGRHVTZJSE4wY21sdVp6dGNiaUFnSUNCMGFXMWxjM1JoYlhBNklHNTFiV0psY2p0Y2JuMWNiaUlzSWk4dklFTnZjSGx5YVdkb2RDQkZjR2xqSUVkaGJXVnpMQ0JKYm1NdUlFRnNiQ0JTYVdkb2RITWdVbVZ6WlhKMlpXUXVYRzVjYmk4cUtseHVJQ29nU1c1aWIzVnVaQ0JCZFdScGJ5QlRkR0YwY3lCamIyeHNaV04wWldRZ1puSnZiU0IwYUdVZ1VsUkRJRk4wWVhSeklGSmxjRzl5ZEZ4dUlDb3ZYRzVsZUhCdmNuUWdZMnhoYzNNZ1NXNWliM1Z1WkVGMVpHbHZVM1JoZEhNZ2UxeHVJQ0FnSUdGMVpHbHZUR1YyWld3NklHNTFiV0psY2p0Y2JpQWdJQ0JpZVhSbGMxSmxZMlZwZG1Wa09pQnVkVzFpWlhJN1hHNGdJQ0FnWTI5a1pXTkpaRG9nYzNSeWFXNW5PMXh1SUNBZ0lHTnZibU5sWVd4bFpGTmhiWEJzWlhNNklHNTFiV0psY2p0Y2JpQWdJQ0JqYjI1alpXRnNiV1Z1ZEVWMlpXNTBjem9nYm5WdFltVnlPMXh1SUNBZ0lHWmxZMUJoWTJ0bGRITkVhWE5qWVhKa1pXUTZJRzUxYldKbGNqdGNiaUFnSUNCbVpXTlFZV05yWlhSelVtVmpaV2wyWldRNklHNTFiV0psY2p0Y2JpQWdJQ0JvWldGa1pYSkNlWFJsYzFKbFkyVnBkbVZrT2lCdWRXMWlaWEk3WEc0Z0lDQWdhV1E2SUhOMGNtbHVaenRjYmlBZ0lDQnBibk5sY25SbFpGTmhiWEJzWlhOR2IzSkVaV05sYkdWeVlYUnBiMjQ2SUc1MWJXSmxjanRjYmlBZ0lDQnFhWFIwWlhJNklHNTFiV0psY2p0Y2JpQWdJQ0JxYVhSMFpYSkNkV1ptWlhKRVpXeGhlVG9nYm5WdFltVnlPMXh1SUNBZ0lHcHBkSFJsY2tKMVptWmxja1Z0YVhSMFpXUkRiM1Z1ZERvZ2JuVnRZbVZ5TzF4dUlDQWdJR3BwZEhSbGNrSjFabVpsY2sxcGJtbHRkVzFFWld4aGVUb2diblZ0WW1WeU8xeHVJQ0FnSUdwcGRIUmxja0oxWm1abGNsUmhjbWRsZEVSbGJHRjVPaUJ1ZFcxaVpYSTdYRzRnSUNBZ2EybHVaRG9nYzNSeWFXNW5PMXh1SUNBZ0lHeGhjM1JRWVdOclpYUlNaV05sYVhabFpGUnBiV1Z6ZEdGdGNEb2diblZ0WW1WeU8xeHVJQ0FnSUcxbFpHbGhWSGx3WlRvZ2MzUnlhVzVuTzF4dUlDQWdJRzFwWkRvZ2MzUnlhVzVuTzF4dUlDQWdJSEJoWTJ0bGRITkVhWE5qWVhKa1pXUTZJRzUxYldKbGNqdGNiaUFnSUNCd1lXTnJaWFJ6VEc5emREb2diblZ0WW1WeU8xeHVJQ0FnSUhCaFkydGxkSE5TWldObGFYWmxaRG9nYm5WdFltVnlPMXh1SUNBZ0lISmxiVzkyWldSVFlXMXdiR1Z6Um05eVFXTmpaV3hsY21GMGFXOXVPaUJ1ZFcxaVpYSTdYRzRnSUNBZ2MybHNaVzUwUTI5dVkyVmhiR1ZrVTJGdGNHeGxjem9nYm5WdFltVnlPMXh1SUNBZ0lITnpjbU02SUc1MWJXSmxjanRjYmlBZ0lDQjBhVzFsYzNSaGJYQTZJRzUxYldKbGNqdGNiaUFnSUNCMGIzUmhiRUYxWkdsdlJXNWxjbWQ1T2lCdWRXMWlaWEk3WEc0Z0lDQWdkRzkwWVd4VFlXMXdiR1Z6UkhWeVlYUnBiMjQ2SUc1MWJXSmxjanRjYmlBZ0lDQjBiM1JoYkZOaGJYQnNaWE5TWldObGFYWmxaRG9nYm5WdFltVnlPMXh1SUNBZ0lIUnlZV05yU1dSbGJuUnBabWxsY2pvZ2MzUnlhVzVuTzF4dUlDQWdJSFJ5WVc1emNHOXlkRWxrT2lCemRISnBibWM3WEc0Z0lDQWdkSGx3WlRvZ2MzUnlhVzVuTzF4dVhHNGdJQ0FnTHlvZ1lXUmthWFJwYjI1aGJDd2dZM1Z6ZEc5dElITjBZWFJ6SUNvdlhHNGdJQ0FnWW1sMGNtRjBaVG9nYm5WdFltVnlPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFbHVZbTkxYm1RZ1ZtbGtaVzhnVTNSaGRITWdZMjlzYkdWamRHVmtJR1p5YjIwZ2RHaGxJRkpVUXlCVGRHRjBjeUJTWlhCdmNuUmNiaUFxTDF4dVpYaHdiM0owSUdOc1lYTnpJRWx1WW05MWJtUldhV1JsYjFOMFlYUnpJSHRjYmlBZ0lDQmllWFJsYzFKbFkyVnBkbVZrT2lCdWRXMWlaWEk3WEc0Z0lDQWdZMjlrWldOSlpEb2djM1J5YVc1bk8xeHVJQ0FnSUdacGNrTnZkVzUwT2lCdWRXMWlaWEk3WEc0Z0lDQWdabkpoYldWSVpXbG5hSFE2SUc1MWJXSmxjanRjYmlBZ0lDQm1jbUZ0WlZkcFpIUm9PaUJ1ZFcxaVpYSTdYRzRnSUNBZ1puSmhiV1Z6UVhOelpXMWliR1ZrUm5KdmJVMTFiSFJwY0d4bFVHRmphMlYwY3pvZ2JuVnRZbVZ5TzF4dUlDQWdJR1p5WVcxbGMwUmxZMjlrWldRNklHNTFiV0psY2p0Y2JpQWdJQ0JtY21GdFpYTkVjbTl3Y0dWa09pQnVkVzFpWlhJN1hHNGdJQ0FnWm5KaGJXVnpVR1Z5VTJWamIyNWtPaUJ1ZFcxaVpYSTdYRzRnSUNBZ1puSmhiV1Z6VW1WalpXbDJaV1E2SUc1MWJXSmxjanRjYmlBZ0lDQm1jbVZsZW1WRGIzVnVkRG9nYm5WdFltVnlPMXh1SUNBZ0lHZHZiMmRVYVcxcGJtZEdjbUZ0WlVsdVptODZJSE4wY21sdVp6dGNiaUFnSUNCb1pXRmtaWEpDZVhSbGMxSmxZMlZwZG1Wa09pQnVkVzFpWlhJN1hHNGdJQ0FnYVdRNklITjBjbWx1Wnp0Y2JpQWdJQ0JxYVhSMFpYSTZJRzUxYldKbGNqdGNiaUFnSUNCcWFYUjBaWEpDZFdabVpYSkVaV3hoZVRvZ2JuVnRZbVZ5TzF4dUlDQWdJR3BwZEhSbGNrSjFabVpsY2tWdGFYUjBaV1JEYjNWdWREb2diblZ0WW1WeU8xeHVJQ0FnSUd0bGVVWnlZVzFsYzBSbFkyOWtaV1E2SUc1MWJXSmxjanRjYmlBZ0lDQnJhVzVrT2lCemRISnBibWM3WEc0Z0lDQWdiR0Z6ZEZCaFkydGxkRkpsWTJWcGRtVmtWR2x0WlhOMFlXMXdPaUJ1ZFcxaVpYSTdYRzRnSUNBZ2JXVmthV0ZVZVhCbE9pQnpkSEpwYm1jN1hHNGdJQ0FnYldsa09pQnpkSEpwYm1jN1hHNGdJQ0FnYm1GamEwTnZkVzUwT2lCdWRXMWlaWEk3WEc0Z0lDQWdjR0ZqYTJWMGMweHZjM1E2SUc1MWJXSmxjanRjYmlBZ0lDQndZV05yWlhSelVtVmpaV2wyWldRNklHNTFiV0psY2p0Y2JpQWdJQ0J3WVhWelpVTnZkVzUwT2lCdWRXMWlaWEk3WEc0Z0lDQWdjR3hwUTI5MWJuUTZJRzUxYldKbGNqdGNiaUFnSUNCemMzSmpPaUJ1ZFcxaVpYSTdYRzRnSUNBZ2RHbHRaWE4wWVcxd09pQnVkVzFpWlhJN1hHNGdJQ0FnZEc5MFlXeEJjM05sYldKc2VWUnBiV1U2SUc1MWJXSmxjanRjYmlBZ0lDQjBiM1JoYkVSbFkyOWtaVlJwYldVNklHNTFiV0psY2p0Y2JpQWdJQ0IwYjNSaGJFWnlaV1Y2WlhORWRYSmhkR2x2YmpvZ2JuVnRZbVZ5TzF4dUlDQWdJSFJ2ZEdGc1NXNTBaWEpHY21GdFpVUmxiR0Y1T2lCdWRXMWlaWEk3WEc0Z0lDQWdkRzkwWVd4UVlYVnpaWE5FZFhKaGRHbHZiam9nYm5WdFltVnlPMXh1SUNBZ0lIUnZkR0ZzVUhKdlkyVnpjMmx1WjBSbGJHRjVPaUJ1ZFcxaVpYSTdYRzRnSUNBZ2RHOTBZV3hUY1hWaGNtVmtTVzUwWlhKR2NtRnRaVVJsYkdGNU9pQnVkVzFpWlhJN1hHNGdJQ0FnZEhKaFkydEpaR1Z1ZEdsbWFXVnlPaUJ6ZEhKcGJtYzdYRzRnSUNBZ2RISmhibk53YjNKMFNXUTZJSE4wY21sdVp6dGNiaUFnSUNCMGVYQmxPaUJ6ZEhKcGJtYzdYRzVjYmlBZ0lDQXZLaUJoWkdScGRHbHZibUZzTENCamRYTjBiMjBnYzNSaGRITWdLaTljYmlBZ0lDQmlhWFJ5WVhSbE9pQnVkVzFpWlhJN1hHNTlYRzVjYmk4cUtseHVJQ29nU1c1aWIzVnVaQ0JUZEdGMGN5QmpiMnhzWldOMFpXUWdabkp2YlNCMGFHVWdVbFJESUZOMFlYUnpJRkpsY0c5eWRGeHVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdTVzVpYjNWdVpGSlVVRk4wWVhSeklIdGNiaUFnSUNBdktpQmpiMjF0YjI0Z2MzUmhkSE1nS2k5Y2JpQWdJQ0JpZVhSbGMxSmxZMlZwZG1Wa09pQnVkVzFpWlhJN1hHNGdJQ0FnWTI5a1pXTkpaRG9nYzNSeWFXNW5PMXh1SUNBZ0lHaGxZV1JsY2tKNWRHVnpVbVZqWldsMlpXUTZJRzUxYldKbGNqdGNiaUFnSUNCcFpEb2djM1J5YVc1bk8xeHVJQ0FnSUdwcGRIUmxjam9nYm5WdFltVnlPMXh1SUNBZ0lHcHBkSFJsY2tKMVptWmxja1JsYkdGNU9pQnVkVzFpWlhJN1hHNGdJQ0FnYW1sMGRHVnlRblZtWm1WeVJXMXBkSFJsWkVOdmRXNTBPaUJ1ZFcxaVpYSTdYRzRnSUNBZ2EybHVaRG9nYzNSeWFXNW5PMXh1SUNBZ0lHeGhjM1JRWVdOclpYUlNaV05sYVhabFpGUnBiV1Z6ZEdGdGNEb2diblZ0WW1WeU8xeHVJQ0FnSUcxbFpHbGhWSGx3WlRvZ2MzUnlhVzVuTzF4dUlDQWdJRzFwWkRvZ2MzUnlhVzVuTzF4dUlDQWdJSEJoWTJ0bGRITk1iM04wT2lCdWRXMWlaWEk3WEc0Z0lDQWdjR0ZqYTJWMGMxSmxZMlZwZG1Wa09pQnVkVzFpWlhJN1hHNGdJQ0FnYzNOeVl6b2diblZ0WW1WeU8xeHVJQ0FnSUhScGJXVnpkR0Z0Y0RvZ2JuVnRZbVZ5TzF4dUlDQWdJSFJ5WVdOclNXUmxiblJwWm1sbGNqb2djM1J5YVc1bk8xeHVJQ0FnSUhSeVlXNXpjRzl5ZEVsa09pQnpkSEpwYm1jN1hHNGdJQ0FnZEhsd1pUb2djM1J5YVc1bk8xeHVYRzRnSUNBZ0x5b2dZWFZrYVc4Z2MzQmxZMmxtYVdNZ2MzUmhkSE1nS2k5Y2JpQWdJQ0JoZFdScGIweGxkbVZzT2lCdWRXMWlaWEk3WEc0Z0lDQWdZMjl1WTJWaGJHVmtVMkZ0Y0d4bGN6b2diblZ0WW1WeU8xeHVJQ0FnSUdOdmJtTmxZV3h0Wlc1MFJYWmxiblJ6T2lCdWRXMWlaWEk3WEc0Z0lDQWdabVZqVUdGamEyVjBjMFJwYzJOaGNtUmxaRG9nYm5WdFltVnlPMXh1SUNBZ0lHWmxZMUJoWTJ0bGRITlNaV05sYVhabFpEb2diblZ0WW1WeU8xeHVJQ0FnSUdsdWMyVnlkR1ZrVTJGdGNHeGxjMFp2Y2tSbFkyVnNaWEpoZEdsdmJqb2diblZ0WW1WeU8xeHVJQ0FnSUdwcGRIUmxja0oxWm1abGNrMXBibWx0ZFcxRVpXeGhlVG9nYm5WdFltVnlPMXh1SUNBZ0lHcHBkSFJsY2tKMVptWmxjbFJoY21kbGRFUmxiR0Y1T2lCdWRXMWlaWEk3WEc0Z0lDQWdjR0ZqYTJWMGMwUnBjMk5oY21SbFpEb2diblZ0WW1WeU8xeHVJQ0FnSUhKbGJXOTJaV1JUWVcxd2JHVnpSbTl5UVdOalpXeGxjbUYwYVc5dU9pQnVkVzFpWlhJN1hHNGdJQ0FnYzJsc1pXNTBRMjl1WTJWaGJHVmtVMkZ0Y0d4bGN6b2diblZ0WW1WeU8xeHVJQ0FnSUhSdmRHRnNRWFZrYVc5RmJtVnlaM2s2SUc1MWJXSmxjanRjYmlBZ0lDQjBiM1JoYkZOaGJYQnNaWE5FZFhKaGRHbHZiam9nYm5WdFltVnlPMXh1SUNBZ0lIUnZkR0ZzVTJGdGNHeGxjMUpsWTJWcGRtVmtPaUJ1ZFcxaVpYSTdYRzVjYmlBZ0lDQXZLaUIyYVdSbGJ5QnpjR1ZqYVdacFl5QnpkR0YwY3lBcUwxeHVJQ0FnSUdacGNrTnZkVzUwT2lCdWRXMWlaWEk3WEc0Z0lDQWdabkpoYldWSVpXbG5hSFE2SUc1MWJXSmxjanRjYmlBZ0lDQm1jbUZ0WlZkcFpIUm9PaUJ1ZFcxaVpYSTdYRzRnSUNBZ1puSmhiV1Z6UVhOelpXMWliR1ZrUm5KdmJVMTFiSFJwY0d4bFVHRmphMlYwY3pvZ2JuVnRZbVZ5TzF4dUlDQWdJR1p5WVcxbGMwUmxZMjlrWldRNklHNTFiV0psY2p0Y2JpQWdJQ0JtY21GdFpYTkVjbTl3Y0dWa09pQnVkVzFpWlhJN1hHNGdJQ0FnWm5KaGJXVnpVR1Z5VTJWamIyNWtPaUJ1ZFcxaVpYSTdYRzRnSUNBZ1puSmhiV1Z6VW1WalpXbDJaV1E2SUc1MWJXSmxjanRjYmlBZ0lDQm1jbVZsZW1WRGIzVnVkRG9nYm5WdFltVnlPMXh1SUNBZ0lHZHZiMmRVYVcxcGJtZEdjbUZ0WlVsdVptODZJSE4wY21sdVp6dGNiaUFnSUNCclpYbEdjbUZ0WlhORVpXTnZaR1ZrT2lCdWRXMWlaWEk3WEc0Z0lDQWdibUZqYTBOdmRXNTBPaUJ1ZFcxaVpYSTdYRzRnSUNBZ2NHRjFjMlZEYjNWdWREb2diblZ0WW1WeU8xeHVJQ0FnSUhCc2FVTnZkVzUwT2lCdWRXMWlaWEk3WEc0Z0lDQWdkRzkwWVd4QmMzTmxiV0pzZVZScGJXVTZJRzUxYldKbGNqdGNiaUFnSUNCMGIzUmhiRVJsWTI5a1pWUnBiV1U2SUc1MWJXSmxjanRjYmlBZ0lDQjBiM1JoYkVaeVpXVjZaWE5FZFhKaGRHbHZiam9nYm5WdFltVnlPMXh1SUNBZ0lIUnZkR0ZzU1c1MFpYSkdjbUZ0WlVSbGJHRjVPaUJ1ZFcxaVpYSTdYRzRnSUNBZ2RHOTBZV3hRWVhWelpYTkVkWEpoZEdsdmJqb2diblZ0WW1WeU8xeHVJQ0FnSUhSdmRHRnNVSEp2WTJWemMybHVaMFJsYkdGNU9pQnVkVzFpWlhJN1hHNGdJQ0FnZEc5MFlXeFRjWFZoY21Wa1NXNTBaWEpHY21GdFpVUmxiR0Y1T2lCdWRXMWlaWEk3WEc1OVhHNGlMQ0l2THlCRGIzQjVjbWxuYUhRZ1JYQnBZeUJIWVcxbGN5d2dTVzVqTGlCQmJHd2dVbWxuYUhSeklGSmxjMlZ5ZG1Wa0xseHVYRzR2S2lwY2JpQXFJRTkxZEdKdmRXNWtJRlpwWkdWdklGTjBZWFJ6SUdOdmJHeGxZM1JsWkNCbWNtOXRJSFJvWlNCU1ZFTWdVM1JoZEhNZ1VtVndiM0owWEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCUGRYUkNiM1Z1WkZacFpHVnZVM1JoZEhNZ2UxeHVJQ0FnSUdKNWRHVnpVMlZ1ZERvZ2JuVnRZbVZ5TzF4dUlDQWdJR2xrT2lCemRISnBibWM3WEc0Z0lDQWdiRzlqWVd4SlpEb2djM1J5YVc1bk8xeHVJQ0FnSUhCaFkydGxkSE5UWlc1ME9pQnVkVzFpWlhJN1hHNGdJQ0FnY21WdGIzUmxWR2x0WlhOMFlXMXdPaUJ1ZFcxaVpYSTdYRzRnSUNBZ2RHbHRaWE4wWVcxd09pQnVkVzFpWlhJN1hHNTlYRzVjYmk4cUtseHVJQ29nVDNWMFltOTFibVFnVTNSaGRITWdZMjlzYkdWamRHVmtJR1p5YjIwZ2RHaGxJRkpVUXlCVGRHRjBjeUJTWlhCdmNuUmNiaUFxTDF4dVpYaHdiM0owSUdOc1lYTnpJRTkxZEVKdmRXNWtVbFJRVTNSaGRITWdlMXh1SUNBZ0lHdHBibVE2SUhOMGNtbHVaenRjYmlBZ0lDQmllWFJsYzFObGJuUTZJRzUxYldKbGNqdGNiaUFnSUNCcFpEb2djM1J5YVc1bk8xeHVJQ0FnSUd4dlkyRnNTV1E2SUhOMGNtbHVaenRjYmlBZ0lDQndZV05yWlhSelUyVnVkRG9nYm5WdFltVnlPMXh1SUNBZ0lISmxiVzkwWlZScGJXVnpkR0Z0Y0RvZ2JuVnRZbVZ5TzF4dUlDQWdJSFJwYldWemRHRnRjRG9nYm5WdFltVnlPMXh1ZlZ4dUlpd2lMeThnUTI5d2VYSnBaMmgwSUVWd2FXTWdSMkZ0WlhNc0lFbHVZeTRnUVd4c0lGSnBaMmgwY3lCU1pYTmxjblpsWkM1Y2JseHVhVzF3YjNKMElIc2dURzluWjJWeUlIMGdabkp2YlNBbkxpNHZURzluWjJWeUwweHZaMmRsY2ljN1hHNXBiWEJ2Y25RZ2V5QkRiMjVtYVdjc0lFOXdkR2x2YmxCaGNtRnRaWFJsY25Nc0lFWnNZV2R6SUgwZ1puSnZiU0FuTGk0dlEyOXVabWxuTDBOdmJtWnBaeWM3WEc1cGJYQnZjblFnZXlCQloyZHlaV2RoZEdWa1UzUmhkSE1nZlNCbWNtOXRJQ2N1TDBGblozSmxaMkYwWldSVGRHRjBjeWM3WEc1cGJYQnZjblFnZXlCd1lYSnpaVkowY0ZCaGNtRnRaWFJsY25Nc0lITndiR2wwVTJWamRHbHZibk1nZlNCbWNtOXRJQ2R6WkhBbk8xeHVhVzF3YjNKMElIc2dVbFJEVlhScGJITWdmU0JtY205dElDY3VMaTlWZEdsc0wxSlVRMVYwYVd4ekp6dGNibHh1THlvcVhHNGdLaUJJWVc1a2JHVnpJSFJvWlNCUVpXVnlJRU52Ym01bFkzUnBiMjVjYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUZCbFpYSkRiMjV1WldOMGFXOXVRMjl1ZEhKdmJHeGxjaUI3WEc0Z0lDQWdjR1ZsY2tOdmJtNWxZM1JwYjI0NklGSlVRMUJsWlhKRGIyNXVaV04wYVc5dU8xeHVJQ0FnSUdGblozSmxaMkYwWldSVGRHRjBjem9nUVdkbmNtVm5ZWFJsWkZOMFlYUnpPMXh1SUNBZ0lHTnZibVpwWnpvZ1EyOXVabWxuTzF4dUlDQWdJSEJ5WldabGNuSmxaRU52WkdWak9pQnpkSEpwYm1jN1hHNGdJQ0FnZFhCa1lYUmxRMjlrWldOVFpXeGxZM1JwYjI0NklHSnZiMnhsWVc0N1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkRjbVZoZEdVZ1lTQnVaWGNnVWxSRElGQmxaWElnUTI5dWJtVmpkR2x2YmlCamJHbGxiblJjYmlBZ0lDQWdLaUJBY0dGeVlXMGdiM0IwYVc5dWN5QXRJRkJsWlhJZ1kyOXVibVZqZEdsdmJpQlBjSFJwYjI1elhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUdOdmJtWnBaeUF0SUZSb1pTQmpiMjVtYVdjZ1ptOXlJRzkxY2lCUVV5QmxlSEJsY21sbGJtTmxMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLRnh1SUNBZ0lDQWdJQ0J2Y0hScGIyNXpPaUJTVkVORGIyNW1hV2QxY21GMGFXOXVMRnh1SUNBZ0lDQWdJQ0JqYjI1bWFXYzZJRU52Ym1acFp5eGNiaUFnSUNBZ0lDQWdjSEpsWm1WeWNtVmtRMjlrWldNNklITjBjbWx1WjF4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbU52Ym1acFp5QTlJR052Ym1acFp6dGNiaUFnSUNBZ0lDQWdkR2hwY3k1amNtVmhkR1ZRWldWeVEyOXVibVZqZEdsdmJpaHZjSFJwYjI1ekxDQndjbVZtWlhKeVpXUkRiMlJsWXlrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWTNKbFlYUmxVR1ZsY2tOdmJtNWxZM1JwYjI0b2IzQjBhVzl1Y3pvZ1VsUkRRMjl1Wm1sbmRYSmhkR2x2Yml3Z2NISmxabVZ5Y21Wa1EyOWtaV002SUhOMGNtbHVaeWtnZTF4dUlDQWdJQ0FnSUNBdkx5QlRaWFFnZEdobElFbERSU0IwY21GdWMzQnZjblFnZEc4Z2NtVnNZWGtnYVdZZ1ZGVlNUaUJsYm1GaWJHVmtYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbU52Ym1acFp5NXBjMFpzWVdkRmJtRmliR1ZrS0Vac1lXZHpMa1p2Y21ObFZGVlNUaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzl3ZEdsdmJuTXVhV05sVkhKaGJuTndiM0owVUc5c2FXTjVJRDBnSjNKbGJHRjVKenRjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1TWIyY29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblJtOXlZMmx1WnlCVVZWSk9JSFZ6WVdkbElHSjVJSE5sZEhScGJtY2dTVU5GSUZSeVlXNXpjRzl5ZENCUWIyeHBZM2tnYVc0Z2NHVmxjaUJqYjI1dVpXTjBhVzl1SUdOdmJtWnBaeTRuWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdZblZwYkdRZ1lTQnVaWGNnY0dWbGNpQmpiMjV1WldOMGFXOXVJSGRwZEdnZ2RHaGxJRzl3ZEdsdmJuTmNiaUFnSUNBZ0lDQWdkR2hwY3k1d1pXVnlRMjl1Ym1WamRHbHZiaUE5SUc1bGR5QlNWRU5RWldWeVEyOXVibVZqZEdsdmJpaHZjSFJwYjI1ektUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1d1pXVnlRMjl1Ym1WamRHbHZiaTV2Ym5OcFoyNWhiR2x1WjNOMFlYUmxZMmhoYm1kbElEMGdLR1YyT2lCRmRtVnVkQ2tnUFQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFHRnVaR3hsVTJsbmJtRnNVM1JoZEdWRGFHRnVaMlVvWlhZcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5CbFpYSkRiMjV1WldOMGFXOXVMbTl1YVdObFkyOXVibVZqZEdsdmJuTjBZWFJsWTJoaGJtZGxJRDBnS0dWMk9pQkZkbVZ1ZENrZ1BUNWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVhR0Z1Wkd4bFNXTmxRMjl1Ym1WamRHbHZibE4wWVhSbFEyaGhibWRsS0dWMktUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1d1pXVnlRMjl1Ym1WamRHbHZiaTV2Ym1salpXZGhkR2hsY21sdVozTjBZWFJsWTJoaGJtZGxJRDBnS0dWMk9pQkZkbVZ1ZENrZ1BUNWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVhR0Z1Wkd4bFNXTmxSMkYwYUdWeWFXNW5VM1JoZEdWRGFHRnVaMlVvWlhZcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5CbFpYSkRiMjV1WldOMGFXOXVMbTl1ZEhKaFkyc2dQU0FvWlhZNklGSlVRMVJ5WVdOclJYWmxiblFwSUQwK1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtaGhibVJzWlU5dVZISmhZMnNvWlhZcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5CbFpYSkRiMjV1WldOMGFXOXVMbTl1YVdObFkyRnVaR2xrWVhSbElEMGdLR1YyT2lCU1ZFTlFaV1Z5UTI5dWJtVmpkR2x2YmtsalpVVjJaVzUwS1NBOVBseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NW9ZVzVrYkdWSlkyVkRZVzVrYVdSaGRHVW9aWFlwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbkJsWlhKRGIyNXVaV04wYVc5dUxtOXVaR0YwWVdOb1lXNXVaV3dnUFNBb1pYWTZJRkpVUTBSaGRHRkRhR0Z1Ym1Wc1JYWmxiblFwSUQwK1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtaGhibVJzWlVSaGRHRkRhR0Z1Ym1Wc0tHVjJLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWhaMmR5WldkaGRHVmtVM1JoZEhNZ1BTQnVaWGNnUVdkbmNtVm5ZWFJsWkZOMFlYUnpLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjSEpsWm1WeWNtVmtRMjlrWldNZ1BTQndjbVZtWlhKeVpXUkRiMlJsWXp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUxY0dSaGRHVkRiMlJsWTFObGJHVmpkR2x2YmlBOUlIUnlkV1U3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUTNKbFlYUmxJR0Z1SUc5bVptVnlJR1p2Y2lCMGFHVWdWMlZpSUZKVVF5Qm9ZVzVrYzJoaGEyVWdZVzVrSUhObGJtUWdkR2hsSUc5bVptVnlJSFJ2SUhSb1pTQnphV2R1WVd4cGJtY2djMlZ5ZG1WeUlIWnBZU0IzWldKemIyTnJaWFJjYmlBZ0lDQWdLaUJBY0dGeVlXMGdiMlptWlhKUGNIUnBiMjV6SUMwZ1VsUkRJRTltWm1WeUlFOXdkR2x2Ym5OY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JoYzNsdVl5QmpjbVZoZEdWUFptWmxjaWh2Wm1abGNrOXdkR2x2Ym5NNklGSlVRMDltWm1WeVQzQjBhVzl1Y3l3Z1kyOXVabWxuT2lCRGIyNW1hV2NwSUh0Y2JpQWdJQ0FnSUNBZ1RHOW5aMlZ5TGt4dlp5aE1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTENBblEzSmxZWFJsSUU5bVptVnlKeXdnTmlrN1hHNWNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2FYTk1iMk5oYkdodmMzUkRiMjV1WldOMGFXOXVJRDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHeHZZMkYwYVc5dUxtaHZjM1J1WVcxbElEMDlQU0FuYkc5allXeG9iM04wSnlCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnYkc5allYUnBiMjR1YUc5emRHNWhiV1VnUFQwOUlDY3hNamN1TUM0d0xqRW5PMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnBjMGgwZEhCelEyOXVibVZqZEdsdmJpQTlJR3h2WTJGMGFXOXVMbkJ5YjNSdlkyOXNJRDA5UFNBbmFIUjBjSE02Snp0Y2JpQWdJQ0FnSUNBZ2JHVjBJSFZ6WlUxcFl5QTlJR052Ym1acFp5NXBjMFpzWVdkRmJtRmliR1ZrS0Vac1lXZHpMbFZ6WlUxcFl5azdYRzRnSUNBZ0lDQWdJR2xtSUNoMWMyVk5hV01nSmlZZ0lTaHBjMHh2WTJGc2FHOXpkRU52Ym01bFkzUnBiMjRnZkh3Z2FYTklkSFJ3YzBOdmJtNWxZM1JwYjI0cEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMWMyVk5hV01nUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1RmNuSnZjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZE5hV055YjNCb2IyNWxJR0ZqWTJWemN5QnBiaUIwYUdVZ1luSnZkM05sY2lCM2FXeHNJRzV2ZENCM2IzSnJJR2xtSUhsdmRTQmhjbVVnYm05MElHOXVJRWhVVkZCVElHOXlJR3h2WTJGc2FHOXpkQzRnUkdsellXSnNhVzVuSUcxcFl5QmhZMk5sYzNNdUoxeHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUZjbkp2Y2loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1UjJWMFUzUmhZMnRVY21GalpTZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRndpUm05eUlIUmxjM1JwYm1jZ2VXOTFJR05oYmlCbGJtRmliR1VnU0ZSVVVDQnRhV055YjNCb2IyNWxJR0ZqWTJWemN5QkRhSEp2YldVZ1lua2dkbWx6YVhScGJtY2dZMmh5YjIxbE9pOHZabXhoWjNNdklHRnVaQ0JsYm1GaWJHbHVaeUFuZFc1ellXWmxiSGt0ZEhKbFlYUXRhVzV6WldOMWNtVXRiM0pwWjJsdUxXRnpMWE5sWTNWeVpTZGNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlYwZFhCVWNtRnVjMk5sYVhabGNuTkJjM2x1WXloMWMyVk5hV01wTG1acGJtRnNiSGtvS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3WldWeVEyOXVibVZqZEdsdmJseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEOHVZM0psWVhSbFQyWm1aWElvYjJabVpYSlBjSFJwYjI1ektWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDNTBhR1Z1S0NodlptWmxjam9nVWxSRFUyVnpjMmx2YmtSbGMyTnlhWEIwYVc5dVNXNXBkQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTm9iM2RVWlhoMFQzWmxjbXhoZVVOdmJtNWxZM1JwYm1jb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjJabVpYSXVjMlJ3SUQwZ2RHaHBjeTV0ZFc1blpWTkVVQ2h2Wm1abGNpNXpaSEFzSUhWelpVMXBZeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y0dWbGNrTnZibTVsWTNScGIyNC9Mbk5sZEV4dlkyRnNSR1Z6WTNKcGNIUnBiMjRvYjJabVpYSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTl1VTJWdVpGZGxZbEpVUTA5bVptVnlLRzltWm1WeUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzVqWVhSamFDZ29LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyaHZkMVJsZUhSUGRtVnliR0Y1VTJWMGRYQkdZV2xzZFhKbEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWVhONWJtTWdjbVZqWldsMlpVOW1abVZ5S0c5bVptVnlPaUJTVkVOVFpYTnphVzl1UkdWelkzSnBjSFJwYjI1SmJtbDBMQ0JqYjI1bWFXYzZJRU52Ym1acFp5a2dlMXh1WEc0Z0lDQWdJQ0FnSUV4dloyZGxjaTVNYjJjb1RHOW5aMlZ5TGtkbGRGTjBZV05yVkhKaFkyVW9LU3dnSjFKbFkyVnBkbVVnVDJabVpYSW5MQ0EyS1R0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG5CbFpYSkRiMjV1WldOMGFXOXVQeTV6WlhSU1pXMXZkR1ZFWlhOamNtbHdkR2x2YmlodlptWmxjaWt1ZEdobGJpZ29LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnBjMHh2WTJGc2FHOXpkRU52Ym01bFkzUnBiMjRnUFZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4dlkyRjBhVzl1TG1odmMzUnVZVzFsSUQwOVBTQW5iRzlqWVd4b2IzTjBKeUI4ZkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4dlkyRjBhVzl1TG1odmMzUnVZVzFsSUQwOVBTQW5NVEkzTGpBdU1DNHhKenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdselNIUjBjSE5EYjI1dVpXTjBhVzl1SUQwZ2JHOWpZWFJwYjI0dWNISnZkRzlqYjJ3Z1BUMDlJQ2RvZEhSd2N6b25PMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSFZ6WlUxcFl5QTlJR052Ym1acFp5NXBjMFpzWVdkRmJtRmliR1ZrS0Vac1lXZHpMbFZ6WlUxcFl5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kWE5sVFdsaklDWW1JQ0VvYVhOTWIyTmhiR2h2YzNSRGIyNXVaV04wYVc5dUlIeDhJR2x6U0hSMGNITkRiMjV1WldOMGFXOXVLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWelpVMXBZeUE5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUZjbkp2Y2loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMDFwWTNKdmNHaHZibVVnWVdOalpYTnpJR2x1SUhSb1pTQmljbTkzYzJWeUlIZHBiR3dnYm05MElIZHZjbXNnYVdZZ2VXOTFJR0Z5WlNCdWIzUWdiMjRnU0ZSVVVGTWdiM0lnYkc5allXeG9iM04wTGlCRWFYTmhZbXhwYm1jZ2JXbGpJR0ZqWTJWemN5NG5YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSWEp5YjNJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRndpUm05eUlIUmxjM1JwYm1jZ2VXOTFJR05oYmlCbGJtRmliR1VnU0ZSVVVDQnRhV055YjNCb2IyNWxJR0ZqWTJWemN5QkRhSEp2YldVZ1lua2dkbWx6YVhScGJtY2dZMmh5YjIxbE9pOHZabXhoWjNNdklHRnVaQ0JsYm1GaWJHbHVaeUFuZFc1ellXWmxiSGt0ZEhKbFlYUXRhVzV6WldOMWNtVXRiM0pwWjJsdUxXRnpMWE5sWTNWeVpTZGNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRUZrWkNCdmRYSWdiR2x6ZENCdlppQndjbVZtWlhKeVpXUWdZMjlrWldOekxDQnBiaUJ2Y21SbGNpQnZaaUJ3Y21WbVpYSmxibU5sWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJtWnBaeTV6WlhSUGNIUnBiMjVUWlhSMGFXNW5UM0IwYVc5dWN5aFBjSFJwYjI1UVlYSmhiV1YwWlhKekxsQnlaV1psY25KbFpFTnZaR1ZqTENCMGFHbHpMbVoxZW5wNVNXNTBaWEp6WldOMFZVVkJibVJDY205M2MyVnlRMjlrWldOektHOW1abVZ5S1NrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlYwZFhCVWNtRnVjMk5sYVhabGNuTkJjM2x1WXloMWMyVk5hV01wTG1acGJtRnNiSGtvS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNHVmxja052Ym01bFkzUnBiMjVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1B5NWpjbVZoZEdWQmJuTjNaWElvS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVkR2hsYmlnb1FXNXpkMlZ5T2lCU1ZFTlRaWE56YVc5dVJHVnpZM0pwY0hScGIyNUpibWwwS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkJibk4zWlhJdWMyUndJRDBnZEdocGN5NXRkVzVuWlZORVVDaEJibk4zWlhJdWMyUndMQ0IxYzJWTmFXTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Y0dWbGNrTnZibTVsWTNScGIyNC9Mbk5sZEV4dlkyRnNSR1Z6WTNKcGNIUnBiMjRvUVc1emQyVnlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG5Sb1pXNG9LQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV2YmxObGJtUlhaV0pTVkVOQmJuTjNaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3WldWeVEyOXVibVZqZEdsdmJqOHVZM1Z5Y21WdWRFeHZZMkZzUkdWelkzSnBjSFJwYjI1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDNWpZWFJqYUNnb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSWEp5YjNJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5ZM0psWVhSbFFXNXpkMlZ5S0NrZ1ptRnBiR1ZrSjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dVhHNWNkQzhxS2x4dUlDQWdJQ0FxSUZObGRDQjBhR1VnVW1WdGIzUmxJRVJsYzJOeWFYQjBiM0lnWm5KdmJTQjBhR1VnYzJsbmJtRnNhVzVuSUhObGNuWmxjaUIwYnlCMGFHVWdVbFJESUZCbFpYSWdRMjl1Ym1WamRHbHZibHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmhibk4zWlhJZ0xTQlNWRU1nVTJWemMybHZiaUJFWlhOamNtbHdkRzl5SUdaeWIyMGdkR2hsSUZOcFoyNWhiR2x1WnlCVFpYSjJaWEpjYmlBZ0lDQWdLaTljYmlBZ0lDQnlaV05sYVhabFFXNXpkMlZ5S0dGdWMzZGxjam9nVWxSRFUyVnpjMmx2YmtSbGMyTnlhWEIwYVc5dVNXNXBkQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbkJsWlhKRGIyNXVaV04wYVc5dVB5NXpaWFJTWlcxdmRHVkVaWE5qY21sd2RHbHZiaWhoYm5OM1pYSXBPMXh1WEc0Z0lDQWdJQ0FnSUM4dklFRmtaQ0J2ZFhJZ2JHbHpkQ0J2WmlCd2NtVm1aWEp5WldRZ1kyOWtaV056TENCcGJpQnZjbVJsY2lCdlppQndjbVZtWlhKbGJtTmxYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyOXVabWxuTG5ObGRFOXdkR2x2YmxObGRIUnBibWRQY0hScGIyNXpLRTl3ZEdsdmJsQmhjbUZ0WlhSbGNuTXVVSEpsWm1WeWNtVmtRMjlrWldNc0lIUm9hWE11Wm5WNmVubEpiblJsY25ObFkzUlZSVUZ1WkVKeWIzZHpaWEpEYjJSbFkzTW9ZVzV6ZDJWeUtTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSMlZ1WlhKaGRHVWdRV2RuY21WbllYUmxaQ0JUZEdGMGN5QmhibVFnZEdobGJpQm1hWEpsSUdFZ2IyNVdhV1JsYnlCVGRHRjBjeUJsZG1WdWRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUdkbGJtVnlZWFJsVTNSaGRITW9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjR1ZsY2tOdmJtNWxZM1JwYjI0L0xtZGxkRk4wWVhSektHNTFiR3dwTG5Sb1pXNG9LRk4wWVhSelJHRjBZVG9nVWxSRFUzUmhkSE5TWlhCdmNuUXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVlXZG5jbVZuWVhSbFpGTjBZWFJ6TG5CeWIyTmxjM05UZEdGMGN5aFRkR0YwYzBSaGRHRXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV2YmxacFpHVnZVM1JoZEhNb2RHaHBjeTVoWjJkeVpXZGhkR1ZrVTNSaGRITXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJWY0dSaGRHVWdkR2hsSUhCeVpXWmxjbkpsWkNCamIyUmxZeUJ6Wld4bFkzUnBiMjRnWW1GelpXUWdiMjRnZDJoaGRDQjNZWE1nWVdOMGRXRnNiSGtnYm1WbmIzUnBZWFJsWkZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVkWEJrWVhSbFEyOWtaV05UWld4bFkzUnBiMjRnSmlZZ0lTRjBhR2x6TG1GblozSmxaMkYwWldSVGRHRjBjeTVwYm1KdmRXNWtWbWxrWlc5VGRHRjBjeTVqYjJSbFkwbGtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpiMjVtYVdjdWMyVjBUM0IwYVc5dVUyVjBkR2x1WjFaaGJIVmxLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCUGNIUnBiMjVRWVhKaGJXVjBaWEp6TGxCeVpXWmxjbkpsWkVOdlpHVmpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbUZuWjNKbFoyRjBaV1JUZEdGMGN5NWpiMlJsWTNNdVoyVjBLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1aFoyZHlaV2RoZEdWa1UzUmhkSE11YVc1aWIzVnVaRlpwWkdWdlUzUmhkSE11WTI5a1pXTkpaRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRMnh2YzJVZ1ZHaGxJRkJsWlhJZ1EyOXVibVZqZEdsdmJseHVJQ0FnSUNBcUwxeHVJQ0FnSUdOc2IzTmxLQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1d1pXVnlRMjl1Ym1WamRHbHZiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1d1pXVnlRMjl1Ym1WamRHbHZiaTVqYkc5elpTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3WldWeVEyOXVibVZqZEdsdmJpQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQk5iMlJwWm5rZ2RHaGxJRk5sYzNOcGIyNGdSR1Z6WTNKcGNIUnZjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnpaSEFnTFNCVFpYTnphVzl1SUVSbGMyTnlhWEIwYjNJZ1lYTWdZU0J6ZEhKcGJtZGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2RYTmxUV2xqSUMwZ1NYTWdkR2hsSUcxcFkzSnZjR2h2Ym1VZ2FXNGdkWE5sWEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nUVNCdGIyUnBabWxsWkNCVFpYTnphVzl1SUVSbGMyTnlhWEIwYjNKY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J0ZFc1blpWTkVVQ2h6WkhBNklITjBjbWx1Wnl3Z2RYTmxUV2xqT2lCaWIyOXNaV0Z1S1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J0ZFc1blpXUlRSRkFnUFNCelpIQXVjbVZ3YkdGalpTaGNiaUFnSUNBZ0lDQWdJQ0FnSUM4b1lUMW1iWFJ3T2x4Y1pDc2dMaXBzWlhabGJDMWhjM2x0YldWMGNua3RZV3hzYjNkbFpEMHVLaWxjWEhKY1hHNHZaMjBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5KREU3ZUMxbmIyOW5iR1V0YzNSaGNuUXRZbWwwY21GMFpUMHhNREF3TUR0NExXZHZiMmRzWlMxdFlYZ3RZbWwwY21GMFpUMHhNREF3TURCY1hISmNYRzRuWEc0Z0lDQWdJQ0FnSUNrN1hHNWNiaUFnSUNBZ0lDQWdMeThnYzJWMElHMWhlQ0JpYVhSeVlYUmxJSFJ2SUdocFoyaGxjM1FnWW1sMGNtRjBaU0JQY0hWeklITjFjSEJ2Y25SelhHNGdJQ0FnSUNBZ0lHeGxkQ0JoZFdScGIxTkVVQ0E5SUNkdFlYaGhkbVZ5WVdkbFltbDBjbUYwWlQwMU1UQXdNREE3Snp0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvZFhObFRXbGpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJ6WlhRZ2RHaGxJRzFoZUNCallYQjBkWEpsSUhKaGRHVWdkRzhnTkRocmFIb2dLSE52SUhkbElHTmhiaUJ6Wlc1a0lHaHBaMmdnY1hWaGJHbDBlU0JoZFdScGJ5Qm1jbTl0SUcxcFl5bGNiaUFnSUNBZ0lDQWdJQ0FnSUdGMVpHbHZVMFJRSUNzOUlDZHpjSEp2Y0MxdFlYaGpZWEIwZFhKbGNtRjBaVDAwT0RBd01Ec25PMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdSbTl5WTJVZ2JXOXVieUJ2Y2lCemRHVnlaVzhnWW1GelpXUWdiMjRnZDJobGRHaGxjaUEvWm05eVkyVk5iMjV2SUhkaGN5QndZWE56WldRZ2IzSWdibTkwWEc0Z0lDQWdJQ0FnSUdGMVpHbHZVMFJRSUNzOUlIUm9hWE11WTI5dVptbG5MbWx6Um14aFowVnVZV0pzWldRb1JteGhaM011Um05eVkyVk5iMjV2UVhWa2FXOHBYRzRnSUNBZ0lDQWdJQ0FnSUNBL0lDZHpkR1Z5Wlc4OU1Ec25YRzRnSUNBZ0lDQWdJQ0FnSUNBNklDZHpkR1Z5Wlc4OU1Uc25PMXh1WEc0Z0lDQWdJQ0FnSUM4dklHVnVZV0pzWlNCcGJpMWlZVzVrSUdadmNuZGhjbVFnWlhKeWIzSWdZMjl5Y21WamRHbHZiaUJtYjNJZ2IzQjFjeUJoZFdScGIxeHVJQ0FnSUNBZ0lDQmhkV1JwYjFORVVDQXJQU0FuZFhObGFXNWlZVzVrWm1WalBURW5PMXh1WEc0Z0lDQWdJQ0FnSUM4dklGZGxJSFZ6WlNCMGFHVWdiR2x1WlNBbmRYTmxhVzVpWVc1a1ptVmpQVEVuSUNoM2FHbGphQ0JQY0hWeklIVnpaWE1wSUhSdklITmxkQ0J2ZFhJZ1QzQjFjeUJ6Y0dWamFXWnBZeUJoZFdScGJ5QndZWEpoYldWMFpYSnpMbHh1SUNBZ0lDQWdJQ0J0ZFc1blpXUlRSRkFnUFNCdGRXNW5aV1JUUkZBdWNtVndiR0ZqWlNnbmRYTmxhVzVpWVc1a1ptVmpQVEVuTENCaGRXUnBiMU5FVUNrN1hHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHMTFibWRsWkZORVVEdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlhhR1Z1SUdFZ1NXTmxJRU5oYm1ScFpHRjBaU0JwY3lCeVpXTmxhWFpsWkNCaFpHUWdkRzhnZEdobElGSlVReUJRWldWeUlFTnZibTVsWTNScGIyNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2FXTmxRMkZ1Wkdsa1lYUmxJQzBnVWxSRElFbGpaU0JEWVc1a2FXUmhkR1VnWm5KdmJTQjBhR1VnVTJsbmJtRnNhVzVuSUZObGNuWmxjbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHaGhibVJzWlU5dVNXTmxLR2xqWlVOaGJtUnBaR0YwWlRvZ1VsUkRTV05sUTJGdVpHbGtZWFJsS1NCN1hHNGdJQ0FnSUNBZ0lFeHZaMmRsY2k1TWIyY29URzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N3Z0ozQmxaWEpqYjI1dVpXTjBhVzl1SUdoaGJtUnNaVTl1U1dObEp5d2dOaWs3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdMeThnYVdZZ1ptOXlZMmx1WnlCVVZWSk9MQ0J5WldwbFkzUWdZVzU1SUdOaGJtUnBaR0YwWlhNZ2JtOTBJSEpsYkdGNVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtTnZibVpwWnk1cGMwWnNZV2RGYm1GaWJHVmtLRVpzWVdkekxrWnZjbU5sVkZWU1Rpa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR05vWldOcklHbG1JRzV2SUhKbGJHRjVJR0ZrWkhKbGMzTWdhWE1nWm05MWJtUXNJR2xtSUhOdkxDQjNaU0JoY21VZ1lYTnpkVzFwYm1jZ2FYUWdiV1ZoYm5NZ2JtOGdWRlZTVGlCelpYSjJaWEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hwWTJWRFlXNWthV1JoZEdVdVkyRnVaR2xrWVhSbExtbHVaR1Y0VDJZb0ozSmxiR0Y1SnlrZ1BDQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa2x1Wm04b1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0JFY205d2NHbHVaeUJqWVc1a2FXUmhkR1VnWW1WallYVnpaU0JwZENCM1lYTWdibTkwSUZSVlVrNGdjbVZzWVhrdUlId2dWSGx3WlQwZ0pIdHBZMlZEWVc1a2FXUmhkR1V1ZEhsd1pYMGdmQ0JRY205MGIyTnZiRDBnSkh0cFkyVkRZVzVrYVdSaGRHVXVjSEp2ZEc5amIyeDlJSHdnUVdSa2NtVnpjejBrZTJsalpVTmhibVJwWkdGMFpTNWhaR1J5WlhOemZTQjhJRkJ2Y25ROUpIdHBZMlZEWVc1a2FXUmhkR1V1Y0c5eWRIMGdmR0FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEWmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdWNHVmxja052Ym01bFkzUnBiMjQvTG1Ga1pFbGpaVU5oYm1ScFpHRjBaU2hwWTJWRFlXNWthV1JoZEdVcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGZG9aVzRnZEdobElGSlVReUJRWldWeUlFTnZibTVsWTNScGIyNGdVMmxuYm1Gc2FXNW5JSE5sY25abGNpQnpkR0YwWlNCRGFHRnVaMlZ6WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSE4wWVhSbElDMGdVMmxuYm1Gc2FXNW5JRk5sY25abGNpQlRkR0YwWlNCRGFHRnVaMlVnUlhabGJuUmNiaUFnSUNBZ0tpOWNiaUFnSUNCb1lXNWtiR1ZUYVdkdVlXeFRkR0YwWlVOb1lXNW5aU2h6ZEdGMFpUb2dSWFpsYm5RcElIdGNiaUFnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5jMmxuYm1Gc2FXNW5JSE4wWVhSbElHTm9ZVzVuWlRvZ0p5QXJJSE4wWVhSbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnTmx4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFaGhibVJzWlNCM2FHVnVJSFJvWlNCSlkyVWdRMjl1Ym1WamRHbHZiaUJUZEdGMFpTQkRhR0Z1WjJWelhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhOMFlYUmxJQzBnU1dObElFTnZibTVsWTNScGIyNGdVM1JoZEdWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JvWVc1a2JHVkpZMlZEYjI1dVpXTjBhVzl1VTNSaGRHVkRhR0Z1WjJVb2MzUmhkR1U2SUVWMlpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUV4dloyZGxjaTVNYjJjb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSjJsalpTQmpiMjV1WldOMGFXOXVJSE4wWVhSbElHTm9ZVzVuWlRvZ0p5QXJJSE4wWVhSbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnTmx4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG05dVNXTmxRMjl1Ym1WamRHbHZibE4wWVhSbFEyaGhibWRsS0hOMFlYUmxLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJJWVc1a2JHVWdkMmhsYmlCMGFHVWdTV05sSUVkaGRHaGxjbWx1WnlCVGRHRjBaU0JEYUdGdVoyVnpYRzRnSUNBZ0lDb2dRSEJoY21GdElITjBZWFJsSUMwZ1NXTmxJRWRoZEdobGNtbHVaeUJUZEdGMFpTQkRhR0Z1WjJWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JvWVc1a2JHVkpZMlZIWVhSb1pYSnBibWRUZEdGMFpVTm9ZVzVuWlNoemRHRjBaVG9nUlhabGJuUXBJSHRjYmlBZ0lDQWdJQ0FnVEc5bloyVnlMa3h2WnloY2JpQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuYVdObElHZGhkR2hsY21sdVp5QnpkR0YwWlNCamFHRnVaMlU2SUNjZ0t5QktVMDlPTG5OMGNtbHVaMmxtZVNoemRHRjBaU2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQTJYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUVdOMGFYWmhkR1Z6SUhSb1pTQnZibFJ5WVdOcklHMWxkR2h2WkZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0JsZG1WdWRDQXRJRlJvWlNCM1pXSlNkR01nZEhKaFkyc2daWFpsYm5SY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JvWVc1a2JHVlBibFJ5WVdOcktHVjJaVzUwT2lCU1ZFTlVjbUZqYTBWMlpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViMjVVY21GamF5aGxkbVZ1ZENrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FXTjBhWFpoZEdWeklIUm9aU0J2YmxCbFpYSkpZMlZEWVc1a2FXUmhkR1ZjYmlBZ0lDQWdLaUJBY0dGeVlXMGdaWFpsYm5RZ0xTQlVhR1VnY0dWbGNpQnBZMlVnWTJGdVpHbGtZWFJsWEc0Z0lDQWdJQ292WEc0Z0lDQWdhR0Z1Wkd4bFNXTmxRMkZ1Wkdsa1lYUmxLR1YyWlc1ME9pQlNWRU5RWldWeVEyOXVibVZqZEdsdmJrbGpaVVYyWlc1MEtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWIyNVFaV1Z5U1dObFEyRnVaR2xrWVhSbEtHVjJaVzUwS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQlkzUnBkbUYwWlhNZ2RHaGxJRzl1UkdGMFlVTm9ZVzV1Wld4Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnWlhabGJuUWdMU0JVYUdVZ2NHVmxjaWR6SUdSaGRHRWdZMmhoYm01bGJGeHVJQ0FnSUNBcUwxeHVJQ0FnSUdoaGJtUnNaVVJoZEdGRGFHRnVibVZzS0dWMlpXNTBPaUJTVkVORVlYUmhRMmhoYm01bGJFVjJaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YjI1RVlYUmhRMmhoYm01bGJDaGxkbVZ1ZENrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FXNGdiM1psY25KcFpHVWdiV1YwYUc5a0lHWnZjaUJ2YmxSeVlXTnJJR1p2Y2lCMWMyVWdiM1YwYzJsa1pTQnZaaUIwYUdVZ1VHVmxja052Ym01bFkzUnBiMjVEYjI1MGNtOXNiR1Z5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSFJ5WVdOclJYWmxiblFnTFNCVWFHVWdkMlZpVW5SaklIUnlZV05ySUdWMlpXNTBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElFQjBlWEJsYzJOeWFYQjBMV1Z6YkdsdWRDOXVieTExYm5WelpXUXRkbUZ5YzF4dUlDQWdJRzl1VkhKaFkyc29kSEpoWTJ0RmRtVnVkRG9nVWxSRFZISmhZMnRGZG1WdWRDa2dlMXh1SUNBZ0lDQWdJQ0F2THlCRVpXWmhkV3gwSUVaMWJtTjBhVzl1WVd4cGRIazZJRVJ2SUU1dmRHaHBibWRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJCYmlCdmRtVnljbWxrWlNCdFpYUm9iMlFnWm05eUlHOXVTV05sUTI5dWJtVmpkR2x2YmxOMFlYUmxRMmhoYm1kbElHWnZjaUIxYzJVZ2IzVjBjMmxrWlNCdlppQjBhR1VnVUdWbGNrTnZibTVsWTNScGIyNURiMjUwY205c2JHVnlYRzRnSUNBZ0lDb2dRSEJoY21GdElHVjJaVzUwSUMwZ1ZHaGxJSGRsWWxKMFl5QnBZMlZqYjI1dVpXTjBhVzl1YzNSaGRHVmphR0Z1WjJVZ1pYWmxiblJjYmlBZ0lDQWdLaTljYmlBZ0lDQXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXVaWGgwTFd4cGJtVWdRSFI1Y0dWelkzSnBjSFF0WlhOc2FXNTBMMjV2TFhWdWRYTmxaQzEyWVhKelhHNGdJQ0FnYjI1SlkyVkRiMjV1WldOMGFXOXVVM1JoZEdWRGFHRnVaMlVvWlhabGJuUTZJRVYyWlc1MEtTQjdYRzRnSUNBZ0lDQWdJQzh2SUVSbFptRjFiSFFnUm5WdVkzUnBiMjVoYkdsMGVUb2dSRzhnVG05MGFHbHVaMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUZ1SUc5MlpYSnlhV1JsSUcxbGRHaHZaQ0JtYjNJZ2IyNVFaV1Z5U1dObFEyRnVaR2xrWVhSbElHWnZjaUIxYzJVZ2IzVjBjMmxrWlNCdlppQjBhR1VnVUdWbGNrTnZibTVsWTNScGIyNURiMjUwY205c2JHVnlYRzRnSUNBZ0lDb2dRSEJoY21GdElIQmxaWEpEYjI1dVpXTjBhVzl1U1dObFJYWmxiblFnTFNCVWFHVWdjR1ZsY2lCcFkyVWdZMkZ1Wkdsa1lYUmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElFQjBlWEJsYzJOeWFYQjBMV1Z6YkdsdWRDOXVieTExYm5WelpXUXRkbUZ5YzF4dUlDQWdJRzl1VUdWbGNrbGpaVU5oYm1ScFpHRjBaU2h3WldWeVEyOXVibVZqZEdsdmJrbGpaVVYyWlc1ME9pQlNWRU5RWldWeVEyOXVibVZqZEdsdmJrbGpaVVYyWlc1MEtTQjdYRzRnSUNBZ0lDQWdJQzh2SUVSbFptRjFiSFFnUm5WdVkzUnBiMjVoYkdsMGVUb2dSRzhnVG05MGFHbHVaMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUZ1SUc5MlpYSnlhV1JsSUcxbGRHaHZaQ0JtYjNJZ2IyNUVZWFJoUTJoaGJtNWxiQ0JtYjNJZ2RYTmxJRzkxZEhOcFpHVWdiMllnZEdobElGQmxaWEpEYjI1dVpXTjBhVzl1UTI5dWRISnZiR3hsY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0JrWVhSaFkyaGhibTVsYkVWMlpXNTBJQzBnVkdobElIQmxaWEluY3lCa1lYUmhJR05vWVc1dVpXeGNiaUFnSUNBZ0tpOWNiaUFnSUNBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxdVpYaDBMV3hwYm1VZ1FIUjVjR1Z6WTNKcGNIUXRaWE5zYVc1MEwyNXZMWFZ1ZFhObFpDMTJZWEp6WEc0Z0lDQWdiMjVFWVhSaFEyaGhibTVsYkNoa1lYUmhZMmhoYm01bGJFVjJaVzUwT2lCU1ZFTkVZWFJoUTJoaGJtNWxiRVYyWlc1MEtTQjdYRzRnSUNBZ0lDQWdJQzh2SUVSbFptRjFiSFFnUm5WdVkzUnBiMjVoYkdsMGVUb2dSRzhnVG05MGFHbHVaMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRVpwYm1RZ2RHaGxJR2x1ZEdWeWMyVmpkR2x2YmlCaVpYUjNaV1Z1SUZWRklHRnVaQ0JpY205M2MyVnlJR052WkdWamN5d2dkMmwwYUNCbWRYcDZlU0J0WVhSamFHbHVaeUJwWmlCemIyMWxJSEJoY21GdFpYUmxjbk1nWVhKbElHMXBjMjFoZEdOb1pXUXVYRzRnSUNBZ0lDb2dRSEJoY21GdElITmtjQ0JVYUdVZ2NtVnRiM1JsSUhOa2NGeHVJQ0FnSUNBcUlFQnlaWFIxY201eklGUm9aU0JwYm5SbGNuTmxZM1JwYjI0Z1ltVjBkMlZsYmlCaWNtOTNjMlZ5SUhOMWNIQnZjblJsWkNCamIyUmxZM01nWVc1a0lIVmxJSE4xY0hCdmNuUmxaQ0JqYjJSbFkzTXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1puVjZlbmxKYm5SbGNuTmxZM1JWUlVGdVpFSnliM2R6WlhKRGIyUmxZM01vYzJSd09pQlNWRU5UWlhOemFXOXVSR1Z6WTNKcGNIUnBiMjVKYm1sMEtTQTZJSE4wY21sdVoxdGRJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1YyVWdkMkZ1ZENCMGJ5QmlkV2xzWkNCaGJpQmhjbkpoZVNCdlppQmhiR3dnYzNWd2NHOXlkR1ZrSUdOdlpHVmpjeUJ2YmlCaWIzUm9JSE5wWkdWelhHNGdJQ0FnSUNBZ0lHTnZibk4wSUdGc2JGTjFjSEJ2Y25SbFpFTnZaR1ZqY3pvZ1FYSnlZWGs4YzNSeWFXNW5QaUE5SUc1bGR5QkJjbkpoZVR4emRISnBibWMrS0NrN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdGc2JGVkZRMjlrWldOek9pQnpkSEpwYm1kYlhTQTlJSFJvYVhNdWNHRnljMlZCZG1GcGJHRmliR1ZEYjJSbFkzTW9jMlJ3S1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWVd4c1FuSnZkM05sY2tOdlpHVmpjem9nYzNSeWFXNW5XMTBnUFNCMGFHbHpMbU52Ym1acFp5NW5aWFJUWlhSMGFXNW5UM0IwYVc5dUtFOXdkR2x2YmxCaGNtRnRaWFJsY25NdVVISmxabVZ5Y21Wa1EyOWtaV01wTG05d2RHbHZibk03WEc0Z0lDQWdJQ0FnSUdadmNpaGpiMjV6ZENCMVpVTnZaR1ZqSUc5bUlHRnNiRlZGUTI5a1pXTnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJEYUdWamF5QnBaaUJpY205M2MyVnlJR052WkdWamN5QmthWEpsWTNSc2VTQnRZWFJqYUdWeklGVkZJR052WkdWaklDaDNhWFJvSUhCaGNtRnRaWFJsY25NZ1lXNWtJR1YyWlhKNWRHaHBibWNwWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaWhoYkd4Q2NtOTNjMlZ5UTI5a1pXTnpMbWx1WTJ4MVpHVnpLSFZsUTI5a1pXTXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVd4c1UzVndjRzl5ZEdWa1EyOWtaV056TG5CMWMyZ29kV1ZEYjJSbFl5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdsdWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCUGRHaGxjbmRwYzJVZ1kyaGxZMnNnYVdZZ1luSnZkM05sY2lCamIyUmxZeUJoZENCc1pXRnpkQ0JqYjI1MFlXbHVjeUJoSUcxaGRHTm9JR1p2Y2lCMGFHVWdWVVVnWTI5a1pXTWdibUZ0WlNBb2QybDBhRzkxZENCd1lYSmhiV1YwWlhKektTNWNiaUFnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIVmxRMjlrWldOT1lXMWxRVzVrVUdGeVlXMXpPaUJ6ZEhKcGJtZGJYU0E5SUhWbFEyOWtaV011YzNCc2FYUW9YQ0lnWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhWbFEyOWtaV05PWVcxbElEMGdkV1ZEYjJSbFkwNWhiV1ZCYm1SUVlYSmhiWE5iTUYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR052Ym5OMElHSnliM2R6WlhKRGIyUmxZeUJ2WmlCaGJHeENjbTkzYzJWeVEyOWtaV056S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtS0dKeWIzZHpaWEpEYjJSbFl5NXBibU5zZFdSbGN5aDFaVU52WkdWalRtRnRaU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklGZGxJSEJoYzNNZ1luSnZkM05sY2lCamIyUmxZeUJvWlhKbElHRnpJSFJvWlhrZ2IzQjBhVzl1SUdOdmJuUmhhVzRnWlhoMGNtRWdjR0Z5WVcxbGRHVnljeTVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0ZzYkZOMWNIQnZjblJsWkVOdlpHVmpjeTV3ZFhOb0tHSnliM2R6WlhKRGIyUmxZeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWVd4c1UzVndjRzl5ZEdWa1EyOWtaV056TzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZObGRIVndJSFJ5WVdOcmN5QnZiaUIwYUdVZ1VsUkRJRkJsWlhJZ1EyOXVibVZqZEdsdmJseHVJQ0FnSUNBcUlFQndZWEpoYlNCMWMyVk5hV01nTFNCcGN5QnRhV01nYVc0Z2RYTmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1lYTjVibU1nYzJWMGRYQlVjbUZ1YzJObGFYWmxjbk5CYzNsdVl5aDFjMlZOYVdNNklHSnZiMnhsWVc0cElIdGNibHh1SUNBZ0lDQWdJQ0F2THlCVFpYUjFjQ0JoSUhSeVlXNXpZMlZwZG1WeUlHWnZjaUJ5WldObGFYWnBibWNnZG1sa1pXOGdLR2xtSUhkbElHNWxaV1FnZEc4cFhHNGdJQ0FnSUNBZ0lHeGxkQ0JvWVhOV2FXUmxiMUpsWTJWcGRtVnlJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJR1p2Y2lBb1kyOXVjM1FnZEhKaGJuTmpaV2wyWlhJZ2IyWWdkR2hwY3k1d1pXVnlRMjl1Ym1WamRHbHZiajh1WjJWMFZISmhibk5qWldsMlpYSnpLQ2tnUHo4Z1cxMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwY21GdWMyTmxhWFpsY2lBbUppQjBjbUZ1YzJObGFYWmxjaTV5WldObGFYWmxjaUFtSmlCMGNtRnVjMk5sYVhabGNpNXlaV05sYVhabGNpNTBjbUZqYXlBbUppQjBjbUZ1YzJObGFYWmxjaTV5WldObGFYWmxjaTUwY21GamF5NXJhVzVrSUQwOVBTQW5kbWxrWlc4bktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhR0Z6Vm1sa1pXOVNaV05sYVhabGNpQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZb0lXaGhjMVpwWkdWdlVtVmpaV2wyWlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjR1ZsY2tOdmJtNWxZM1JwYjI0L0xtRmtaRlJ5WVc1elkyVnBkbVZ5S0NkMmFXUmxieWNzSUhzZ1pHbHlaV04wYVc5dU9pQW5jbVZqZG05dWJIa25JSDBwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdhV1lnS0ZKVVExSjBjRkpsWTJWcGRtVnlMbWRsZEVOaGNHRmlhV3hwZEdsbGN5QW1KaUIwYUdsekxuQnlaV1psY25KbFpFTnZaR1ZqSUNFOUlDY25LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0dOdmJuTjBJSFJ5WVc1elkyVnBkbVZ5SUc5bUlIUm9hWE11Y0dWbGNrTnZibTVsWTNScGIyNC9MbWRsZEZSeVlXNXpZMlZwZG1WeWN5Z3BJRDgvSUZ0ZEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBjbUZ1YzJObGFYWmxjaUFtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBjbUZ1YzJObGFYWmxjaTV5WldObGFYWmxjaUFtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBjbUZ1YzJObGFYWmxjaTV5WldObGFYWmxjaTUwY21GamF5QW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGNtRnVjMk5sYVhabGNpNXlaV05sYVhabGNpNTBjbUZqYXk1cmFXNWtJRDA5UFNBbmRtbGtaVzhuSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ5WVc1elkyVnBkbVZ5TG5ObGRFTnZaR1ZqVUhKbFptVnlaVzVqWlhOY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1IyVjBJRzkxY2lCd2NtVm1aWEp5WldRZ1kyOWtaV01nWm5KdmJTQjBhR1VnWTI5a1pXTnpJRzl3ZEdsdmJuTWdaSEp2Y0NCa2IzZHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSEJ5WldabGNuSmxaRkpVVUVOdlpHVmpJRDBnZEdocGN5NXdjbVZtWlhKeVpXUkRiMlJsWXk1emNHeHBkQ2duSUNjcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQndjbVZtWlhKeVpXUlNWRU5TZEhCRGIyUmxZME5oY0dGaWFXeHBkSGs2SUZKVVExSjBjRU52WkdWalEyRndZV0pwYkdsMGVTQTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFwYldWVWVYQmxPaUFuZG1sa1pXOHZKeUFySUhCeVpXWmxjbkpsWkZKVVVFTnZaR1ZqV3pCZElDOHFJRTVoYldVZ0tpOHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiRzlqYTFKaGRHVTZJRGt3TURBd0xDQXZLaUJCYkd3Z1kzVnljbVZ1ZENCMmFXUmxieUJtYjNKdFlYUnpJR2x1SUdKeWIzZHpaWEp6SUdoaGRtVWdPVEJyYUhvZ1kyeHZZMnNnY21GMFpTQXFMMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlJ3Um0xMGNFeHBibVU2SUhCeVpXWmxjbkpsWkZKVVVFTnZaR1ZqV3pGZElEOGdjSEpsWm1WeWNtVmtVbFJRUTI5a1pXTmJNVjBnT2lBbkoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnVUc5d2RXeGhkR1VnWVNCc2FYTjBJRzltSUdOdlpHVmpjeUIzWlNCM2FXeHNJSE4xY0hCdmNuUWdkMmwwYUNCdmRYSWdjSEpsWm1WeWNtVmtJRzl1WlNCcGJpQjBhR1VnWm1seWMzUWdjRzl6YVhScGIyNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdiM1Z5VTNWd2NHOXlkR1ZrUTI5a1pXTnpPaUJCY25KaGVUeFNWRU5TZEhCRGIyUmxZME5oY0dGaWFXeHBkSGsrSUQwZ1czQnlaV1psY25KbFpGSlVRMUowY0VOdlpHVmpRMkZ3WVdKcGJHbDBlVjA3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnUjI4Z2RHaHliM1ZuYUNCaGJHd2dZMjlrWldOeklIUm9aU0JpY205M2MyVnlJSE4xY0hCdmNuUnpJR0Z1WkNCaFpHUWdkR2hsYlNCMGJ5QjBhR1VnYkdsemRDQW9hVzRnWVc1NUlHOXlaR1Z5S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlNWRU5TZEhCU1pXTmxhWFpsY2k1blpYUkRZWEJoWW1sc2FYUnBaWE1vSjNacFpHVnZKeWt1WTI5a1pXTnpMbVp2Y2tWaFkyZ29LR0p5YjNkelpYSlRkWEJ3YjNKMFpXUkRiMlJsWXlBNklGSlVRMUowY0VOdlpHVmpRMkZ3WVdKcGJHbDBlU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdSRzl1SjNRZ1lXUmtJRzkxY2lCd2NtVm1aWEp5WldRZ1kyOWtaV01nWVdkaGFXNHNJR0oxZENCaFpHUWdaWFpsY25sMGFHbHVaeUJsYkhObFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppaGljbTkzYzJWeVUzVndjRzl5ZEdWa1EyOWtaV011YldsdFpWUjVjR1VnSVQwZ2NISmxabVZ5Y21Wa1VsUkRVblJ3UTI5a1pXTkRZWEJoWW1sc2FYUjVMbTFwYldWVWVYQmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IzVnlVM1Z3Y0c5eWRHVmtRMjlrWldOekxuQjFjMmdvWW5KdmQzTmxjbE4xY0hCdmNuUmxaRU52WkdWaktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnYVdZb1luSnZkM05sY2xOMWNIQnZjblJsWkVOdlpHVmpQeTV6WkhCR2JYUndUR2x1WlNBaFBTQndjbVZtWlhKeVpXUlNWRU5TZEhCRGIyUmxZME5oY0dGaWFXeHBkSGsvTG5Oa2NFWnRkSEJNYVc1bEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjNWeVUzVndjRzl5ZEdWa1EyOWtaV056TG5CMWMyZ29Zbkp2ZDNObGNsTjFjSEJ2Y25SbFpFTnZaR1ZqS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoamIyNXpkQ0JqYjJSbFl5QnZaaUJ2ZFhKVGRYQndiM0owWldSRGIyUmxZM01wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGpiMlJsWXo4dWMyUndSbTEwY0V4cGJtVWdQVDA5SUhWdVpHVm1hVzVsWkNCOGZDQmpiMlJsWXk1elpIQkdiWFJ3VEdsdVpTQTlQVDBnSnljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCWFpTQmpZVzRuZENCa2VXNWhiV2xqWVd4c2VTQmhaR1FnYldWdFltVnljeUIwYnlCMGFHVWdZMjlrWldNc0lITnZJR2x1YzNSbFlXUWdjbVZ0YjNabElIUm9aU0JtYVdWc1pDQnBaaUJwZENkeklHVnRjSFI1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVnNaWFJsSUdOdlpHVmpMbk5rY0VadGRIQk1hVzVsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RISmhibk5qWldsMlpYSXVjMlYwUTI5a1pXTlFjbVZtWlhKbGJtTmxjeWh2ZFhKVGRYQndiM0owWldSRGIyUmxZM01wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHeGxkQ0JvWVhOQmRXUnBiMUpsWTJWcGRtVnlJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJR1p2Y2lBb1kyOXVjM1FnZEhKaGJuTmpaV2wyWlhJZ2IyWWdkR2hwY3k1d1pXVnlRMjl1Ym1WamRHbHZiajh1WjJWMFZISmhibk5qWldsMlpYSnpLQ2tnUHo4Z1cxMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwY21GdWMyTmxhWFpsY2lBbUppQjBjbUZ1YzJObGFYWmxjaTV5WldObGFYWmxjaUFtSmlCMGNtRnVjMk5sYVhabGNpNXlaV05sYVhabGNpNTBjbUZqYXlBbUppQjBjbUZ1YzJObGFYWmxjaTV5WldObGFYWmxjaTUwY21GamF5NXJhVzVrSUQwOVBTQW5ZWFZrYVc4bktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhR0Z6UVhWa2FXOVNaV05sYVhabGNpQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBdkx5QlRaWFIxY0NCaElIUnlZVzV6WTJWcGRtVnlJR1p2Y2lCelpXNWthVzVuSUcxcFl5QmhkV1JwYnlCMGJ5QlZSU0JoYm1RZ2NtVmpaV2wyYVc1bklHRjFaR2x2SUdaeWIyMGdWVVZjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjFjMlZOYVdNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUtDRm9ZWE5CZFdScGIxSmxZMlZwZG1WeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1d1pXVnlRMjl1Ym1WamRHbHZiajh1WVdSa1ZISmhibk5qWldsMlpYSW9KMkYxWkdsdkp5d2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2FYSmxZM1JwYjI0NklDZHlaV04yYjI1c2VTZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklITmxkQ0IwYUdVZ1lYVmthVzhnYjNCMGFXOXVjeUJpWVhObFpDQnZiaUJ0YVdNZ2RYTmhaMlZjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdGMVpHbHZUM0IwYVc5dWN5QTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoZFhSdlIyRnBia052Ym5SeWIydzZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTm9ZVzV1Wld4RGIzVnVkRG9nTVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbFkyaHZRMkZ1WTJWc2JHRjBhVzl1T2lCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWVhSbGJtTjVPaUF3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1dmFYTmxVM1Z3Y0hKbGMzTnBiMjQ2SUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5oYlhCc1pWSmhkR1U2SURRNE1EQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5oYlhCc1pWTnBlbVU2SURFMkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWnZiSFZ0WlRvZ01TNHdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklITmxkQ0IwYUdVZ2JXVmthV0VnYzJWdVpDQnZjSFJwYjI1elhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnRaV1JwWVZObGJtUlBjSFJwYjI1ek9pQk5aV1JwWVZOMGNtVmhiVU52Ym5OMGNtRnBiblJ6SUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWnBaR1Z2T2lCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoZFdScGJ6b2dZWFZrYVc5UGNIUnBiMjV6WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJPYjNSbElIVnphVzVuSUcxcFl5QnZiaUJoYm1SeWIybGtJR05vY205dFpTQnlaWEYxYVhKbGN5QlRVMHdnYjNJZ1kyaHliMjFsT2k4dlpteGhaM012SUZ3aWRXNXpZV1psYkhrdGRISmxZWFF0YVc1elpXTjFjbVV0YjNKcFoybHVMV0Z6TFhObFkzVnlaVndpWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCemRISmxZVzBnUFNCaGQyRnBkQ0J1WVhacFoyRjBiM0l1YldWa2FXRkVaWFpwWTJWekxtZGxkRlZ6WlhKTlpXUnBZU2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0WldScFlWTmxibVJQY0hScGIyNXpYRzRnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITjBjbVZoYlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hvWVhOQmRXUnBiMUpsWTJWcGRtVnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvWTI5dWMzUWdkSEpoYm5OalpXbDJaWElnYjJZZ2RHaHBjeTV3WldWeVEyOXVibVZqZEdsdmJqOHVaMlYwVkhKaGJuTmpaV2wyWlhKektDa2dQejhnVzEwcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hTVkVOVmRHbHNjeTVqWVc1VWNtRnVjMk5sYVhabGNsSmxZMlZwZG1WQmRXUnBieWgwY21GdWMyTmxhWFpsY2lrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tHTnZibk4wSUhSeVlXTnJJRzltSUhOMGNtVmhiUzVuWlhSVWNtRmphM01vS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kSEpoWTJzdWEybHVaQ0FtSmlCMGNtRmpheTVyYVc1a0lEMDlJQ2RoZFdScGJ5Y3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSeVlXNXpZMlZwZG1WeUxuTmxibVJsY2k1eVpYQnNZV05sVkhKaFkyc29kSEpoWTJzcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSEpoYm5OalpXbDJaWEl1WkdseVpXTjBhVzl1SUQwZ0ozTmxibVJ5WldOMkp6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb1kyOXVjM1FnZEhKaFkyc2diMllnYzNSeVpXRnRMbWRsZEZSeVlXTnJjeWdwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kSEpoWTJzdWEybHVaQ0FtSmlCMGNtRmpheTVyYVc1a0lEMDlJQ2RoZFdScGJ5Y3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJsWlhKRGIyNXVaV04wYVc5dVB5NWhaR1JVY21GdWMyTmxhWFpsY2loMGNtRmpheXdnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYVhKbFkzUnBiMjQ2SUNkelpXNWtjbVZqZGlkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZb0lXaGhjMEYxWkdsdlVtVmpaV2wyWlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdaV1Z5UTI5dWJtVmpkR2x2Ymo4dVlXUmtWSEpoYm5OalpXbDJaWElvSjJGMVpHbHZKeXdnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdseVpXTjBhVzl1T2lBbmNtVmpkbTl1YkhrblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVGdVpDQnZkbVZ5Y21sa1pTQmxkbVZ1ZENCbWIzSWdkMmhsYmlCMGFHVWdkbWxrWlc4Z2MzUmhkSE1nWVhKbElHWnBjbVZrWEc0Z0lDQWdJQ29nUUhCaGNtRnRJR1YyWlc1MElDMGdRV2RuY21WbllYUmxaQ0JUZEdGMGMxeHVJQ0FnSUNBcUwxeHVJQ0FnSUM4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFc1bGVIUXRiR2x1WlNCQWRIbHdaWE5qY21sd2RDMWxjMnhwYm5RdmJtOHRkVzUxYzJWa0xYWmhjbk5jYmlBZ0lDQnZibFpwWkdWdlUzUmhkSE1vWlhabGJuUTZJRUZuWjNKbFoyRjBaV1JUZEdGMGN5a2dlMXh1SUNBZ0lDQWdJQ0F2THlCRVpXWmhkV3gwSUVaMWJtTjBhVzl1WVd4cGRIazZJRVJ2SUU1dmRHaHBibWRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJGZG1WdWRDQjBieUJ6Wlc1a0lIUm9aU0JTVkVNZ2IyWm1aWElnZEc4Z2RHaGxJRk5wWjI1aGJHbHVaeUJ6WlhKMlpYSmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2IyWm1aWElnTFNCU1ZFTWdUMlptWlhKY2JpQWdJQ0FnS2k5Y2JpQWdJQ0F2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnUUhSNWNHVnpZM0pwY0hRdFpYTnNhVzUwTDI1dkxYVnVkWE5sWkMxMllYSnpYRzRnSUNBZ2IyNVRaVzVrVjJWaVVsUkRUMlptWlhJb2IyWm1aWEk2SUZKVVExTmxjM05wYjI1RVpYTmpjbWx3ZEdsdmJrbHVhWFFwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdSR1ZtWVhWc2RDQkdkVzVqZEdsdmJtRnNhWFI1T2lCRWJ5Qk9iM1JvYVc1blhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1JYWmxiblFnZEc4Z2MyVnVaQ0IwYUdVZ1VsUkRJRUZ1YzNkbGNpQjBieUIwYUdVZ1UybG5ibUZzYVc1bklITmxjblpsY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0JoYm5OM1pYSWdMU0JTVkVNZ1FXNXpkMlZ5WEc0Z0lDQWdJQ292WEc0Z0lDQWdMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRibVY0ZEMxc2FXNWxJRUIwZVhCbGMyTnlhWEIwTFdWemJHbHVkQzl1YnkxMWJuVnpaV1F0ZG1GeWMxeHVJQ0FnSUc5dVUyVnVaRmRsWWxKVVEwRnVjM2RsY2loaGJuTjNaWEk2SUZKVVExTmxjM05wYjI1RVpYTmpjbWx3ZEdsdmJrbHVhWFFwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdSR1ZtWVhWc2RDQkdkVzVqZEdsdmJtRnNhWFI1T2lCRWJ5Qk9iM1JvYVc1blhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FXNGdiM1psY25KcFpHVWdabTl5SUhOb2IzZHBibWNnZEdobElGQmxaWElnWTI5dWJtVmpkR2x2YmlCamIyNXVaV04wYVc1bklFOTJaWEpzWVhsY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6YUc5M1ZHVjRkRTkyWlhKc1lYbERiMjV1WldOMGFXNW5LQ2tnZTF4dUlDQWdJQ0FnSUNBdkx5QkVaV1poZFd4MElFWjFibU4wYVc5dVlXeHBkSGs2SUVSdklFNXZkR2hwYm1kY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQmJpQnZkbVZ5Y21sa1pTQm1iM0lnYzJodmQybHVaeUIwYUdVZ1VHVmxjaUJqYjI1dVpXTjBhVzl1SUVaaGFXeGxaQ0J2ZG1WeWJHRjVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MyaHZkMVJsZUhSUGRtVnliR0Y1VTJWMGRYQkdZV2xzZFhKbEtDa2dlMXh1SUNBZ0lDQWdJQ0F2THlCRVpXWmhkV3gwSUVaMWJtTjBhVzl1WVd4cGRIazZJRVJ2SUU1dmRHaHBibWRjYmlBZ0lDQjlYRzVjYmlBZ0lDQndZWEp6WlVGMllXbHNZV0pzWlVOdlpHVmpjeWhjYmlBZ0lDQWdJQ0FnY25SalUyVnpjMmx2YmtSbGMyTnlhWEIwYVc5dU9pQlNWRU5UWlhOemFXOXVSR1Z6WTNKcGNIUnBiMjVKYm1sMFhHNGdJQ0FnS1RvZ1FYSnlZWGs4YzNSeWFXNW5QaUI3WEc0Z0lDQWdJQ0FnSUM4dklFNXZJSEJ2YVc1MElHbHVJSFZ3WkdGMGFXNW5JSFJvWlNCaGRtRnBiR0ZpYkdVZ1kyOWtaV056SUdsbUlHOXVJRVpHWEc0Z0lDQWdJQ0FnSUdsbUlDZ2hVbFJEVW5Sd1VtVmpaV2wyWlhJdVoyVjBRMkZ3WVdKcGJHbDBhV1Z6S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGc25UMjVzZVNCaGRtRnBiR0ZpYkdVZ2IyNGdRMmh5YjIxbEoxMDdYRzVjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkV1ZUZFhCd2IzSjBaV1JEYjJSbFkzTTZJRUZ5Y21GNVBITjBjbWx1Wno0Z1BTQmJYVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjMlZqZEdsdmJuTWdQU0J6Y0d4cGRGTmxZM1JwYjI1ektISjBZMU5sYzNOcGIyNUVaWE5qY21sd2RHbHZiaTV6WkhBcE8xeHVJQ0FnSUNBZ0lDQXZMeUJrYVhOallYSmtJSFJvWlNCelpYTnphVzl1SUdsdVptOXliV0YwYVc5dUlHRnpJSGRsSUc5dWJIa2dkMkZ1ZENCdFpXUnBZU0J5Wld4aGRHVmtJR2x1Wm05Y2JpQWdJQ0FnSUNBZ2MyVmpkR2x2Ym5NdWMyaHBablFvS1R0Y2JpQWdJQ0FnSUNBZ2MyVmpkR2x2Ym5NdVptOXlSV0ZqYUNnb2JXVmthV0ZUWldOMGFXOXVLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQjdJR052WkdWamN5QjlJRDBnY0dGeWMyVlNkSEJRWVhKaGJXVjBaWEp6S0cxbFpHbGhVMlZqZEdsdmJpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkdhV3gwWlhJZ2IyNXNlU0JtYjNJZ1ZsQllJQzhnU0RJMldDQXZJRUZXTVZ4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2JXRjBZMmhsY2lBOUlDOG9WbEJjWEdSOFNESTJYRnhrZkVGV01Ta3VLaTg3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMlJsWTNNdVptOXlSV0ZqYUNnb1l5a2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSE4wY2lBOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR011Ym1GdFpTQXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNjZ0p5QXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUU5aWFtVmpkQzVyWlhsektHTXVjR0Z5WVcxbGRHVnljeUI4ZkNCN2ZTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDNXRZWEFvS0hBcElEMCtJSEFnS3lBblBTY2dLeUJqTG5CaGNtRnRaWFJsY25OYmNGMHBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVhbTlwYmlnbk95Y3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHMWhkR05vSUQwZ2JXRjBZMmhsY2k1bGVHVmpLSE4wY2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzFoZEdOb0lDRTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGpMbTVoYldVZ1BUMGdKMVpRT1NjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRlZGSUdGdWMzZGxjbk1nWkc5dUozUWdjM0JsWTJsbWVTQndjbTltYVd4bElHSjFkQ0IzWlNCcmJtOTNJSGRsSUhkaGJuUWdjSEp2Wm1sc1pTQXdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpMbkJoY21GdFpYUmxjbk1nUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKM0J5YjJacGJHVXRhV1FuT2lBbk1DZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1kyOWtaV05UZEhJNklITjBjbWx1WnlBOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCakxtNWhiV1VnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSnlBbklDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFOWlhbVZqZEM1clpYbHpLR011Y0dGeVlXMWxkR1Z5Y3lCOGZDQjdmU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdWJXRndLQ2h3S1NBOVBpQndJQ3NnSnowbklDc2dZeTV3WVhKaGJXVjBaWEp6VzNCZEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzVxYjJsdUtDYzdKeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIVmxVM1Z3Y0c5eWRHVmtRMjlrWldOekxuQjFjMmdvWTI5a1pXTlRkSElwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkV1ZUZFhCd2IzSjBaV1JEYjJSbFkzTTdYRzRnSUNBZ2ZWeHVmVnh1SWl3aUx5OGdRMjl3ZVhKcFoyaDBJRVZ3YVdNZ1IyRnRaWE1zSUVsdVl5NGdRV3hzSUZKcFoyaDBjeUJTWlhObGNuWmxaQzVjYmx4dUx5b3FYRzRnS2lCVFpYTnphVzl1SUhOMFlYUnBjM1JwWTNOY2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklGTmxjM05wYjI1VGRHRjBjeUI3WEc0Z0lDQWdjblZ1VkdsdFpUb2djM1J5YVc1bk8xeHVJQ0FnSUdOdmJuUnliMnh6VTNSeVpXRnRTVzV3ZFhRNklITjBjbWx1Wnp0Y2JpQWdJQ0IyYVdSbGIwVnVZMjlrWlhKQmRtZFJVRG9nYm5WdFltVnlPMXh1ZlZ4dUlpd2lMeThnUTI5d2VYSnBaMmgwSUVWd2FXTWdSMkZ0WlhNc0lFbHVZeTRnUVd4c0lGSnBaMmgwY3lCU1pYTmxjblpsWkM1Y2JseHVMeW9xWEc0Z0tpQkRiR0Z6Y3lCMGJ5Qm9iMnhrSUhSb1pTQnpkSEpsWVcwZ2MzUmhkSE1nWkdGMFlTQmpiMjFwYm1jZ2FXNGdabkp2YlNCM1pXSlNkR05jYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUZOMGNtVmhiVk4wWVhSeklIdGNiaUFnSUNCcFpEb2djM1J5YVc1bk8xeHVJQ0FnSUhOMGNtVmhiVWxrWlc1MGFXWnBaWEk2SUhOMGNtbHVaenRjYmlBZ0lDQjBhVzFsYzNSaGJYQTZJRzUxYldKbGNqdGNiaUFnSUNCMGNtRmphMGxrY3pvZ2MzUnlhVzVuVzEwN1hHNTlYRzRpTENJdkx5QkRiM0I1Y21sbmFIUWdSWEJwWXlCSFlXMWxjeXdnU1c1akxpQkJiR3dnVW1sbmFIUnpJRkpsYzJWeWRtVmtMbHh1WEc1cGJYQnZjblFnZXlCRGIyNW1hV2NzSUU5d2RHbHZibEJoY21GdFpYUmxjbk1nZlNCbWNtOXRJQ2N1TGk5RGIyNW1hV2N2UTI5dVptbG5KenRjYm1sdGNHOXlkQ0I3SUV4aGRHVnVZM2xVWlhOMFVtVnpkV3gwY3lCOUlHWnliMjBnSnk0dUwwUmhkR0ZEYUdGdWJtVnNMMHhoZEdWdVkzbFVaWE4wVW1WemRXeDBjeWM3WEc1cGJYQnZjblFnZXlCQloyZHlaV2RoZEdWa1UzUmhkSE1nZlNCbWNtOXRJQ2N1TGk5UVpXVnlRMjl1Ym1WamRHbHZia052Ym5SeWIyeHNaWEl2UVdkbmNtVm5ZWFJsWkZOMFlYUnpKenRjYm1sdGNHOXlkQ0I3SUZkbFlsSjBZMUJzWVhsbGNrTnZiblJ5YjJ4c1pYSWdmU0JtY205dElDY3VMaTlYWldKU2RHTlFiR0Y1WlhJdlYyVmlVblJqVUd4aGVXVnlRMjl1ZEhKdmJHeGxjaWM3WEc1cGJYQnZjblFnZXlCR2JHRm5jeXdnVG5WdFpYSnBZMUJoY21GdFpYUmxjbk1nZlNCbWNtOXRJQ2N1TGk5RGIyNW1hV2N2UTI5dVptbG5KenRjYm1sdGNHOXlkQ0I3SUV4dloyZGxjaUI5SUdaeWIyMGdKeTR1TDB4dloyZGxjaTlNYjJkblpYSW5PMXh1YVcxd2IzSjBJSHNnU1c1cGRHbGhiRk5sZEhScGJtZHpJSDBnWm5KdmJTQW5MaTR2UkdGMFlVTm9ZVzV1Wld3dlNXNXBkR2xoYkZObGRIUnBibWR6Snp0Y2JtbHRjRzl5ZENCN0lFOXVVMk55WldWdVMyVjVZbTloY21RZ2ZTQm1jbTl0SUNjdUxpOVZTUzlQYmxOamNtVmxia3RsZVdKdllYSmtKenRjYm1sdGNHOXlkQ0I3WEc0Z0lDQWdSWFpsYm5SRmJXbDBkR1Z5TEZ4dUlDQWdJRWx1YVhScFlXeFRaWFIwYVc1bmMwVjJaVzUwTEZ4dUlDQWdJRXhoZEdWdVkzbFVaWE4wVW1WemRXeDBSWFpsYm5Rc1hHNGdJQ0FnVUdsNFpXeFRkSEpsWVcxcGJtZEZkbVZ1ZEN4Y2JpQWdJQ0JUZEdGMGMxSmxZMlZwZG1Wa1JYWmxiblFzWEc0Z0lDQWdVM1J5WldGdFRHOWhaR2x1WjBWMlpXNTBMRnh1SUNBZ0lGTjBjbVZoYlZCeVpVTnZibTVsWTNSRmRtVnVkQ3hjYmlBZ0lDQlRkSEpsWVcxU1pXTnZibTVsWTNSRmRtVnVkQ3hjYmlBZ0lDQlRkSEpsWVcxUWNtVkVhWE5qYjI1dVpXTjBSWFpsYm5Rc1hHNGdJQ0FnVm1sa1pXOUZibU52WkdWeVFYWm5VVkJGZG1WdWRDeGNiaUFnSUNCV2FXUmxiMGx1YVhScFlXeHBlbVZrUlhabGJuUXNYRzRnSUNBZ1YyVmlVblJqUVhWMGIwTnZibTVsWTNSRmRtVnVkQ3hjYmlBZ0lDQlhaV0pTZEdORGIyNXVaV04wWldSRmRtVnVkQ3hjYmlBZ0lDQlhaV0pTZEdORGIyNXVaV04wYVc1blJYWmxiblFzWEc0Z0lDQWdWMlZpVW5SalJHbHpZMjl1Ym1WamRHVmtSWFpsYm5Rc1hHNGdJQ0FnVjJWaVVuUmpSbUZwYkdWa1JYWmxiblFzWEc0Z0lDQWdWMlZpVW5SalUyUndSWFpsYm5Rc1hHNGdJQ0FnUkdGMFlVTm9ZVzV1Wld4TVlYUmxibU41VkdWemRGSmxjM0J2Ym5ObFJYWmxiblFzWEc0Z0lDQWdSR0YwWVVOb1lXNXVaV3hNWVhSbGJtTjVWR1Z6ZEZKbGMzVnNkRVYyWlc1MExGeHVJQ0FnSUZCc1lYbGxja052ZFc1MFJYWmxiblFzWEc0Z0lDQWdWMlZpVW5SalZFTlFVbVZzWVhsRVpYUmxZM1JsWkVWMlpXNTBYRzU5SUdaeWIyMGdKeTR1TDFWMGFXd3ZSWFpsYm5SRmJXbDBkR1Z5Snp0Y2JtbHRjRzl5ZENCN0lFMWxjM05oWjJWUGJsTmpjbVZsYmt0bGVXSnZZWEprSUgwZ1puSnZiU0FuTGk0dlYyVmlVMjlqYTJWMGN5OU5aWE56WVdkbFVtVmpaV2wyWlNjN1hHNXBiWEJ2Y25RZ2V5QlhaV0pZVWtOdmJuUnliMnhzWlhJZ2ZTQm1jbTl0SUNjdUxpOVhaV0pZVWk5WFpXSllVa052Ym5SeWIyeHNaWEluTzF4dWFXMXdiM0owSUhzZ1RXVnpjMkZuWlVScGNtVmpkR2x2YmlCOUlHWnliMjBnSnk0dUwxVmxTVzV6ZEdGdVkyVk5aWE56WVdkbEwxTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5Snp0Y2JtbHRjRzl5ZENCN1hHNGdJQ0FnUkdGMFlVTm9ZVzV1Wld4TVlYUmxibU41VkdWemRFTnZibVpwWnl4Y2JpQWdJQ0JFWVhSaFEyaGhibTVsYkV4aGRHVnVZM2xVWlhOMFEyOXVkSEp2Ykd4bGNseHVmU0JtY205dElGd2lMaTR2UkdGMFlVTm9ZVzV1Wld3dlJHRjBZVU5vWVc1dVpXeE1ZWFJsYm1ONVZHVnpkRU52Ym5SeWIyeHNaWEpjSWp0Y2JtbHRjRzl5ZENCN1hHNGdJQ0FnUkdGMFlVTm9ZVzV1Wld4TVlYUmxibU41VkdWemRGSmxjM0J2Ym5ObExGeHVJQ0FnSUVSaGRHRkRhR0Z1Ym1Wc1RHRjBaVzVqZVZSbGMzUlNaWE4xYkhSY2JuMGdabkp2YlNCY0lpNHVMMFJoZEdGRGFHRnVibVZzTDBSaGRHRkRhR0Z1Ym1Wc1RHRjBaVzVqZVZSbGMzUlNaWE4xYkhSelhDSTdYRzVwYlhCdmNuUWdleUJTVkVOVmRHbHNjeUI5SUdaeWIyMGdKeTR1TDFWMGFXd3ZVbFJEVlhScGJITW5PMXh1WEc1Y2JtVjRjRzl5ZENCcGJuUmxjbVpoWTJVZ1VHbDRaV3hUZEhKbFlXMXBibWRQZG1WeWNtbGtaWE1nZTF4dUlDQWdJQzhxS2lCVWFHVWdSRTlOSUdWc2JXVnVkQ0IzYUdWeVpTQlFhWGhsYkNCVGRISmxZVzFwYm1jZ2RtbGtaVzhnWVc1a0lIVnpaWElnYVc1d2RYUWdaWFpsYm5RZ2FHRnVaR3hsY25NZ1lYSmxJR0YwZEdGamFHVmtJSFJ2TGx4dUlDQWdJQ0FxSUZsdmRTQmpZVzRnWjJsMlpTQmhiaUJsZUdsemRHbHVaeUJFVDAwZ1pXeGxiV1Z1ZENCb1pYSmxMaUJKWmlCdWIzUWdaMmwyWlc0c0lIUm9aU0JzYVdKeVlYSjVJSGRwYkd3Z1kzSmxZWFJsSUdFZ2JtVjNJR1JwZGlCbGJHVnRaVzUwWEc0Z0lDQWdJQ29nZEdoaGRDQnBjeUJ1YjNRZ1lYUjBZV05vWldRZ1lXNTVkMmhsY21VdUlFbHVJSFJvYVhNZ1kyRnpaU0I1YjNVZ1kyRnVJR3hoZEdWeUlHZGxkQ0JoWTJObGMzTWdkRzhnZEdocGN5QnVaWGNnWld4bGJXVnVkQ0JoYm1SY2JpQWdJQ0FnS2lCaGRIUmhZMmdnYVhRZ2RHOGdlVzkxY2lCM1pXSWdjR0ZuWlM0Z0tpOWNiaUFnSUNCMmFXUmxiMFZzWlcxbGJuUlFZWEpsYm5RL09pQklWRTFNUld4bGJXVnVkRHRjYm4xY2JseHVMeW9xWEc0Z0tpQlVhR1VnYTJWNUlHTnNZWE56SUdadmNpQjBhR1VnWW5KdmQzTmxjaUJ6YVdSbElHOW1JR0VnVUdsNFpXd2dVM1J5WldGdGFXNW5JR0Z3Y0d4cFkyRjBhVzl1TENCcGRDQnBibU5zZFdSbGN6cGNiaUFxSUZkbFlsSlVReUJvWVc1a2JHbHVaeXdnV0ZJZ2MzVndjRzl5ZEN3Z2FXNXdkWFFnYUdGdVpHeHBibWNzSUdGdVpDQmxiV2wwZEdWeWN5Qm1iM0lnYkdsbVpYUnBiV1VnWVc1a0lITjBZWFJsSUdOb1lXNW5aU0JsZG1WdWRITXVYRzRnS2lCVmMyVnljeUJoY21VZ1pXNWpiM1Z5WVdkbFpDQjBieUIxYzJVZ2RHaHBjeUJqYkdGemN5QmhjeUJwY3l3Z2RHaHliM1ZuYUNCamIyMXdiM05wZEdsdmJpd2diM0lnWlhoMFpXNWtJR2wwTGlCSmJpQmhibmtnWTJGelpTd2dYRzRnS2lCMGFHbHpJSGRwYkd3Z2JHbHJaV3g1SUdKbElIUm9aU0JqYjNKbElHOW1JSGx2ZFhJZ1VHbDRaV3dnVTNSeVpXRnRhVzVuSUdWNGNHVnlhV1Z1WTJVZ2FXNGdkR1Z5YlhNZ2IyWWdablZ1WTNScGIyNWhiR2wwZVM1Y2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklGQnBlR1ZzVTNSeVpXRnRhVzVuSUh0Y2JpQWdJQ0J3Y205MFpXTjBaV1FnWDNkbFlsSjBZME52Ym5SeWIyeHNaWEk2SUZkbFlsSjBZMUJzWVhsbGNrTnZiblJ5YjJ4c1pYSTdYRzRnSUNBZ2NISnZkR1ZqZEdWa0lGOTNaV0pZY2tOdmJuUnliMnhzWlhJNklGZGxZbGhTUTI5dWRISnZiR3hsY2p0Y2JpQWdJQ0J3Y205MFpXTjBaV1FnWDJSaGRHRkRhR0Z1Ym1Wc1RHRjBaVzVqZVZSbGMzUkRiMjUwY205c2JHVnlPaUJFWVhSaFEyaGhibTVsYkV4aGRHVnVZM2xVWlhOMFEyOXVkSEp2Ykd4bGNqdGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRU52Ym1acFozVnlZWFJwYjI0Z2IySnFaV04wTGlCWmIzVWdZMkZ1SUhKbFlXUWdiM0lnYlc5a2FXWjVJR052Ym1acFp5QjBhSEp2ZFdkb0lIUm9hWE1nYjJKcVpXTjBMaUJYYUdWdVpYWmxjbHh1SUNBZ0lDQXFJSFJvWlNCamIyNW1hV2QxY21GMGFXOXVJR2x6SUdOb1lXNW5aV1FzSUhSb1pTQnNhV0p5WVhKNUlIZHBiR3dnWlcxcGRDQmhJR0J6WlhSMGFXNW5jME5vWVc1blpXUmdJR1YyWlc1MExseHVJQ0FnSUNBcUwxeHVJQ0FnSUhCMVlteHBZeUJqYjI1bWFXYzZJRU52Ym1acFp6dGNibHh1SUNBZ0lIQnlhWFpoZEdVZ1gzWnBaR1Z2Uld4bGJXVnVkRkJoY21WdWREb2dTRlJOVEVWc1pXMWxiblE3WEc1Y2JpQWdJQ0J3Y21sMllYUmxJR0ZzYkc5M1EyOXVjMjlzWlVOdmJXMWhibVJ6SUQwZ1ptRnNjMlU3WEc1Y2JpQWdJQ0J3Y21sMllYUmxJRzl1VTJOeVpXVnVTMlY1WW05aGNtUklaV3h3WlhJNklFOXVVMk55WldWdVMyVjVZbTloY21RN1hHNWNiaUFnSUNCd2NtbDJZWFJsSUY5MmFXUmxiMU4wWVhKMFZHbHRaVG9nYm5WdFltVnlPMXh1SUNBZ0lIQnlhWFpoZEdVZ1gybHVjSFYwUTI5dWRISnZiR3hsY2pvZ1ltOXZiR1ZoYmp0Y2JseHVJQ0FnSUhCeWFYWmhkR1VnWDJWMlpXNTBSVzFwZEhSbGNqb2dSWFpsYm5SRmJXbDBkR1Z5TzF4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUdOdmJtWnBaeUF0SUVFZ2JtVjNiSGtnYVc1emRHRnVkR2xoZEdWa0lHTnZibVpwWnlCdlltcGxZM1JjYmlBZ0lDQWdLaUJBY0dGeVlXMGdiM1psY25KcFpHVnpJQzBnVUdGeVlXMWxkR1Z5Y3lCMGJ5QnZkbVZ5Y21sa1pTQmtaV1poZFd4MElHSmxhR0YyYVc5MWNseHVJQ0FnSUNBcUlISmxkSFZ5Ym5NZ2RHaGxJR0poYzJVZ1VHbDRaV3dnYzNSeVpXRnRhVzVuSUc5aWFtVmpkRnh1SUNBZ0lDQXFMMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLR052Ym1acFp6b2dRMjl1Wm1sbkxDQnZkbVZ5Y21sa1pYTS9PaUJRYVhobGJGTjBjbVZoYldsdVowOTJaWEp5YVdSbGN5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTnZibVpwWnlBOUlHTnZibVpwWnp0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvYjNabGNuSnBaR1Z6UHk1MmFXUmxiMFZzWlcxbGJuUlFZWEpsYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM1pwWkdWdlJXeGxiV1Z1ZEZCaGNtVnVkQ0E5SUc5MlpYSnlhV1JsY3k1MmFXUmxiMFZzWlcxbGJuUlFZWEpsYm5RN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0IwYUdsekxsOWxkbVZ1ZEVWdGFYUjBaWElnUFNCdVpYY2dSWFpsYm5SRmJXbDBkR1Z5S0NrN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1amIyNW1hV2QxY21WVFpYUjBhVzVuY3lncE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUhObGRIVndJRmRsWWxKVVExeHVJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRGZGxZbEowWTFCc1lYbGxja052Ym5SeWIyeHNaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQnVaWGNnVjJWaVVuUmpVR3hoZVdWeVEyOXVkSEp2Ykd4bGNpaDBhR2x6TG1OdmJtWnBaeXdnZEdocGN5bGNiaUFnSUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QlBibk5qY21WbGJpQnJaWGxpYjJGeVpGeHVJQ0FnSUNBZ0lDQjBhR2x6TG05dVUyTnlaV1Z1UzJWNVltOWhjbVJJWld4d1pYSWdQU0J1WlhjZ1QyNVRZM0psWlc1TFpYbGliMkZ5WkNoY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRtbGtaVzlGYkdWdFpXNTBVR0Z5Wlc1MFhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWIyNVRZM0psWlc1TFpYbGliMkZ5WkVobGJIQmxjaTUxYm5GMVlXNTBhWHBsUVc1a1JHVnViM0p0WVd4cGVtVlZibk5wWjI1bFpDQTlJQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lIZzZJRzUxYldKbGNpeGNiaUFnSUNBZ0lDQWdJQ0FnSUhrNklHNTFiV0psY2x4dUlDQWdJQ0FnSUNBcElEMCtYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDkzWldKU2RHTkRiMjUwY205c2JHVnlMbkpsY1hWbGMzUlZibkYxWVc1MGFYcGxaRUZ1WkVSbGJtOXliV0ZzYVhwbFZXNXphV2R1WldRb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjVYRzRnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5aFkzUnBkbUYwWlU5dVUyTnlaV1Z1UzJWNVltOWhjbVFnUFNBb1kyOXRiV0Z1WkRvZ1RXVnpjMkZuWlU5dVUyTnlaV1Z1UzJWNVltOWhjbVFwSUQwK1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtOXVVMk55WldWdVMyVjVZbTloY21SSVpXeHdaWEl1YzJodmQwOXVVMk55WldWdVMyVjVZbTloY21Rb1kyOXRiV0Z1WkNrN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmQyVmlXSEpEYjI1MGNtOXNiR1Z5SUQwZ2JtVjNJRmRsWWxoU1EyOXVkSEp2Ykd4bGNpaDBhR2x6TGw5M1pXSlNkR05EYjI1MGNtOXNiR1Z5S1R0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TGw5elpYUjFjRmRsWWxKMFkxUkRVRkpsYkdGNVJHVjBaV04wYVc5dUlEMGdkR2hwY3k1ZmMyVjBkWEJYWldKU2RHTlVRMUJTWld4aGVVUmxkR1ZqZEdsdmJpNWlhVzVrS0hSb2FYTXBYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1FXUmtJR1YyWlc1MElHeHBjM1JsYm1WeUlHWnZjaUIwYUdVZ2QyVmlVblJqUTI5dWJtVmpkR1ZrSUdWMlpXNTBYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyVjJaVzUwUlcxcGRIUmxjaTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLRndpZDJWaVVuUmpRMjl1Ym1WamRHVmtYQ0lzSUNoM1pXSlNkR05EYjI1dVpXTjBaV1JGZG1WdWREb2dWMlZpVW5SalEyOXVibVZqZEdWa1JYWmxiblFwSUQwK0lIdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdRbWx1WkNCMGJ5QjBhR1VnYzNSaGRITWdjbVZqWldsMlpXUWdaWFpsYm5SY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyVjJaVzUwUlcxcGRIUmxjaTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLRndpYzNSaGRITlNaV05sYVhabFpGd2lMQ0FnZEdocGN5NWZjMlYwZFhCWFpXSlNkR05VUTFCU1pXeGhlVVJsZEdWamRHbHZiaWs3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFZGxkSE1nZEdobElHVnNaVzFsYm5RZ2RHaGhkQ0JqYjI1MFlXbHVjeUIwYUdVZ2RtbGtaVzhnYzNSeVpXRnRJR1ZzWlcxbGJuUXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUdkbGRDQjJhV1JsYjBWc1pXMWxiblJRWVhKbGJuUW9LVG9nU0ZSTlRFVnNaVzFsYm5RZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVYM1pwWkdWdlJXeGxiV1Z1ZEZCaGNtVnVkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmRtbGtaVzlGYkdWdFpXNTBVR0Z5Wlc1MElEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnblpHbDJKeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5MmFXUmxiMFZzWlcxbGJuUlFZWEpsYm5RdWFXUWdQU0FuZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwSnp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVOdmJtWnBaM1Z5WlNCMGFHVWdjMlYwZEdsdVozTWdkMmwwYUNCdmJpQmphR0Z1WjJVZ2JHbHpkR1Z1WlhKeklHRnVaQ0JoYm5rZ1lXUmthWFJwYjI1aGJDQndaWElnWlhod1pYSnBaVzVqWlNCelpYUjBhVzVuY3k1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3Y21sMllYUmxJR052Ym1acFozVnlaVk5sZEhScGJtZHpLQ2s2SUhadmFXUWdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTnZibVpwWnk1ZllXUmtUMjVUWlhSMGFXNW5RMmhoYm1kbFpFeHBjM1JsYm1WeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnUm14aFozTXVTWE5SZFdGc2FYUjVRMjl1ZEhKdmJHeGxjaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDaDNZVzUwYzFGMVlXeHBkSGxEYjI1MGNtOXNiR1Z5T2lCaWIyOXNaV0Z1S1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnU1dZZ2RHaGxJSE5sZEhScGJtY2dhR0Z6SUdKbFpXNGdjMlYwSUhSdklIUnlkV1VnS0dWcGRHaGxjaUJ3Y205bmNtRnRZWFJwWTJGc2JIa2diM0lnZEdobElIVnpaWElnYUdGeklHWnNhV05yWldRZ2RHaGxJSFJ2WjJkc1pTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJoYm1RZ2QyVWdZWEpsYmlkMElHTjFjbkpsYm5Sc2VTQnhkV0ZzYVhSNUlHTnZiblJ5YjJ4c1pYSXNJSE5sYm1RZ2RHaGxJSEpsY1hWbGMzUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZGhiblJ6VVhWaGJHbDBlVU52Ym5SeWIyeHNaWElnUFQwOUlIUnlkV1VnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJWFJvYVhNdVgzZGxZbEowWTBOdmJuUnliMnhzWlhJdWFYTlJkV0ZzYVhSNVEyOXVkSEp2Ykd4bGNseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDkzWldKU2RHTkRiMjUwY205c2JHVnlMbk5sYm1SU1pYRjFaWE4wVVhWaGJHbDBlVU52Ym5SeWIyeFBkMjVsY25Ob2FYQW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVqYjI1bWFXY3VYMkZrWkU5dVUyVjBkR2x1WjBOb1lXNW5aV1JNYVhOMFpXNWxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lFWnNZV2R6TGtGR1MwUmxkR1ZqZEdsdmJpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNocGMwRkdTMFZ1WVdKc1pXUTZJR0p2YjJ4bFlXNHBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDkzWldKU2RHTkRiMjUwY205c2JHVnlMbk5sZEVGbWEwVnVZV0pzWldRb2FYTkJSa3RGYm1GaWJHVmtLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbU52Ym1acFp5NWZZV1JrVDI1VFpYUjBhVzVuUTJoaGJtZGxaRXhwYzNSbGJtVnlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1JteGhaM011VFdGMFkyaFdhV1YzY0c5eWRGSmxjMjlzZFhScGIyNHNYRzRnSUNBZ0lDQWdJQ0FnSUNBb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZkMlZpVW5SalEyOXVkSEp2Ykd4bGNpNTJhV1JsYjFCc1lYbGxjaTUxY0dSaGRHVldhV1JsYjFOMGNtVmhiVk5wZW1Vb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0tUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxtTnZibVpwWnk1ZllXUmtUMjVUWlhSMGFXNW5RMmhoYm1kbFpFeHBjM1JsYm1WeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnUm14aFozTXVTRzkyWlhKcGJtZE5iM1Z6WlUxdlpHVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBb2FYTkliM1psY21sdVowMXZkWE5sT2lCaWIyOXNaV0Z1S1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amIyNW1hV2N1YzJWMFJteGhaMHhoWW1Wc0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JHYkdGbmN5NUliM1psY21sdVowMXZkWE5sVFc5a1pTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWUVOdmJuUnliMndnVTJOb1pXMWxPaUFrZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVhOSWIzWmxjbWx1WjAxdmRYTmxJRDhnSjBodmRtVnlhVzVuSnlBNklDZE1iMk5yWldRblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnVFc5MWMyVmdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOTNaV0pTZEdORGIyNTBjbTlzYkdWeUxuTmxkRTF2ZFhObFNXNXdkWFJGYm1GaWJHVmtLSFJvYVhNdVkyOXVabWxuTG1selJteGhaMFZ1WVdKc1pXUW9SbXhoWjNNdVRXOTFjMlZKYm5CMWRDa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQXBPMXh1WEc0Z0lDQWdJQ0FnSUM4dklIVnpaWElnYVc1d2RYUmNiaUFnSUNBZ0lDQWdkR2hwY3k1amIyNW1hV2N1WDJGa1pFOXVVMlYwZEdsdVowTm9ZVzVuWldSTWFYTjBaVzVsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJRVpzWVdkekxrdGxlV0p2WVhKa1NXNXdkWFFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9hWE5GYm1GaWJHVmtPaUJpYjI5c1pXRnVLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmZDJWaVVuUmpRMjl1ZEhKdmJHeGxjaTV6WlhSTFpYbGliMkZ5WkVsdWNIVjBSVzVoWW14bFpDaHBjMFZ1WVdKc1pXUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQXBPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMjl1Wm1sbkxsOWhaR1JQYmxObGRIUnBibWREYUdGdVoyVmtUR2x6ZEdWdVpYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNCR2JHRm5jeTVOYjNWelpVbHVjSFYwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdLR2x6Ulc1aFlteGxaRG9nWW05dmJHVmhiaWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNkbFlsSjBZME52Ym5SeWIyeHNaWEl1YzJWMFRXOTFjMlZKYm5CMWRFVnVZV0pzWldRb2FYTkZibUZpYkdWa0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0tUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxtTnZibVpwWnk1ZllXUmtUMjVUWlhSMGFXNW5RMmhoYm1kbFpFeHBjM1JsYm1WeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnUm14aFozTXVSbUZyWlUxdmRYTmxWMmwwYUZSdmRXTm9aWE1zWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9YMmx6Um1GclpVMXZkWE5sUlc1aFlteGxaRG9nWW05dmJHVmhiaWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNkbFlsSjBZME52Ym5SeWIyeHNaWEl1YzJWMFZHOTFZMmhKYm5CMWRFVnVZV0pzWldRb2RHaHBjeTVqYjI1bWFXY3VhWE5HYkdGblJXNWhZbXhsWkNoR2JHRm5jeTVVYjNWamFFbHVjSFYwS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNrN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1amIyNW1hV2N1WDJGa1pFOXVVMlYwZEdsdVowTm9ZVzVuWldSTWFYTjBaVzVsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJRVpzWVdkekxsUnZkV05vU1c1d2RYUXNYRzRnSUNBZ0lDQWdJQ0FnSUNBb2FYTkZibUZpYkdWa09pQmliMjlzWldGdUtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZkMlZpVW5SalEyOXVkSEp2Ykd4bGNpNXpaWFJVYjNWamFFbHVjSFYwUlc1aFlteGxaQ2hwYzBWdVlXSnNaV1FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FwTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WTI5dVptbG5MbDloWkdSUGJsTmxkSFJwYm1kRGFHRnVaMlZrVEdsemRHVnVaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQkdiR0ZuY3k1SFlXMWxjR0ZrU1c1d2RYUXNYRzRnSUNBZ0lDQWdJQ0FnSUNBb2FYTkZibUZpYkdWa09pQmliMjlzWldGdUtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZkMlZpVW5SalEyOXVkSEp2Ykd4bGNpNXpaWFJIWVcxbFVHRmtTVzV3ZFhSRmJtRmliR1ZrS0dselJXNWhZbXhsWkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNrN1hHNWNiaUFnSUNBZ0lDQWdMeThnWlc1amIyUmxjaUJ6WlhSMGFXNW5jMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTnZibVpwWnk1ZllXUmtUMjVPZFcxbGNtbGpVMlYwZEdsdVowTm9ZVzVuWldSTWFYTjBaVzVsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJRTUxYldWeWFXTlFZWEpoYldWMFpYSnpMazFwYmxGUUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0c1bGQxWmhiSFZsT2lCdWRXMWlaWElwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1UjJWMFUzUmhZMnRVY21GalpTZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbkxTMHRMUzB0TFMwZ0lGTmxibVJwYm1jZ1RXbHVVVkFnSUMwdExTMHRMUzB0Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdOMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZkMlZpVW5SalEyOXVkSEp2Ykd4bGNpNXpaVzVrUlc1amIyUmxjazFwYmxGUUtHNWxkMVpoYkhWbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1UjJWMFUzUmhZMnRVY21GalpTZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbkxTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRGRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FwTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WTI5dVptbG5MbDloWkdSUGJrNTFiV1Z5YVdOVFpYUjBhVzVuUTJoaGJtZGxaRXhwYzNSbGJtVnlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1RuVnRaWEpwWTFCaGNtRnRaWFJsY25NdVRXRjRVVkFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9ibVYzVm1Gc2RXVTZJRzUxYldKbGNpa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVNYjJjb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2N0TFMwdExTMHRMU0FnVTJWdVpHbHVaeUJsYm1OdlpHVnlJSE5sZEhScGJtZHpJQ0F0TFMwdExTMHRMU2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzZGxZbEowWTBOdmJuUnliMnhzWlhJdWMyVnVaRVZ1WTI5a1pYSk5ZWGhSVUNodVpYZFdZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGt4dlp5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSnkwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzBuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QlhaV0pTVkVNZ2MyVjBkR2x1WjNOY2JpQWdJQ0FnSUNBZ2RHaHBjeTVqYjI1bWFXY3VYMkZrWkU5dVRuVnRaWEpwWTFObGRIUnBibWREYUdGdVoyVmtUR2x6ZEdWdVpYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNCT2RXMWxjbWxqVUdGeVlXMWxkR1Z5Y3k1WFpXSlNWRU5OYVc1Q2FYUnlZWFJsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdLRzVsZDFaaGJIVmxPaUJ1ZFcxaVpYSXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuTFMwdExTMHRMUzBnSUZObGJtUnBibWNnZDJWaUlISjBZeUJ6WlhSMGFXNW5jeUFnTFMwdExTMHRMUzBuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOTNaV0pTZEdORGIyNTBjbTlzYkdWeUxuTmxibVJYWldKU1ZFTk5hVzVDYVhSeVlYUmxLRzVsZDFaaGJIVmxJQ29nTVRBd01DQXZLaUJyWW5CeklIUnZJR0p3Y3lBcUx5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGtkbGRGTjBZV05yVkhKaFkyVW9LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0p5MHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0EzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnS1R0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJtWnBaeTVmWVdSa1QyNU9kVzFsY21salUyVjBkR2x1WjBOb1lXNW5aV1JNYVhOMFpXNWxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lFNTFiV1Z5YVdOUVlYSmhiV1YwWlhKekxsZGxZbEpVUTAxaGVFSnBkSEpoZEdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvYm1WM1ZtRnNkV1U2SUc1MWJXSmxjaWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1TWIyY29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNjdExTMHRMUzB0TFNBZ1UyVnVaR2x1WnlCM1pXSWdjblJqSUhObGRIUnBibWR6SUNBdExTMHRMUzB0TFNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRGRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM2RsWWxKMFkwTnZiblJ5YjJ4c1pYSXVjMlZ1WkZkbFlsSlVRMDFoZUVKcGRISmhkR1VvYm1WM1ZtRnNkV1VnS2lBeE1EQXdJQzhxSUd0aWNITWdkRzhnWW5CeklDb3ZLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVURzluS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5MUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyOXVabWxuTGw5aFpHUlBiazUxYldWeWFXTlRaWFIwYVc1blEyaGhibWRsWkV4cGMzUmxibVZ5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdUblZ0WlhKcFkxQmhjbUZ0WlhSbGNuTXVWMlZpVWxSRFJsQlRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tHNWxkMVpoYkhWbE9pQnVkVzFpWlhJcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVURzluS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5MUzB0TFMwdExTMGdJRk5sYm1ScGJtY2dkMlZpSUhKMFl5QnpaWFIwYVc1bmN5QWdMUzB0TFMwdExTMG5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBM1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5M1pXSlNkR05EYjI1MGNtOXNiR1Z5TG5ObGJtUlhaV0pTVkVOR2NITW9ibVYzVm1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNU1iMmNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDY3RMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNrN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1amIyNW1hV2N1WDJGa1pFOXVUM0IwYVc5dVUyVjBkR2x1WjBOb1lXNW5aV1JNYVhOMFpXNWxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lFOXdkR2x2YmxCaGNtRnRaWFJsY25NdVVISmxabVZ5Y21Wa1EyOWtaV01zWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9ibVYzVm1Gc2RXVTZJSE4wY21sdVp5a2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5M1pXSlNkR05EYjI1MGNtOXNiR1Z5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzZGxZbEowWTBOdmJuUnliMnhzWlhJdWMyVjBVSEpsWm1WeWNtVmtRMjlrWldNb2JtVjNWbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0tUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxtTnZibVpwWnk1ZmNtVm5hWE4wWlhKUGJrTm9ZVzVuWlVWMlpXNTBjeWgwYUdsekxsOWxkbVZ1ZEVWdGFYUjBaWElwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVGamRHbDJZWFJsSUhSb1pTQnZiaUJ6WTNKbFpXNGdhMlY1WW05aGNtUWdkMmhsYmlCeVpXTmxhWFpwYm1jZ2RHaGxJR052YlcxaGJtUWdabkp2YlNCMGFHVWdjM1J5WldGdFpYSmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1kyOXRiV0Z1WkNBdElIUm9aU0JyWlhsaWIyRnlaQ0JqYjIxdFlXNWtYRzRnSUNBZ0lDb3ZYRzRnSUNBZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElFQjBlWEJsYzJOeWFYQjBMV1Z6YkdsdWRDOXVieTExYm5WelpXUXRkbUZ5YzF4dUlDQWdJRjloWTNScGRtRjBaVTl1VTJOeVpXVnVTMlY1WW05aGNtUW9ZMjl0YldGdVpEb2dUV1Z6YzJGblpVOXVVMk55WldWdVMyVjVZbTloY21RcE9pQjJiMmxrSUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkTlpYUm9iMlFnYm05MElHbHRjR3hsYldWdWRHVmtMaWNwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZObGRDQjBhR1VnYVc1d2RYUWdZMjl1ZEhKdmJDQnZkMjVsY25Ob2FYQmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2FXNXdkWFJEYjI1MGNtOXNUM2R1WlhKemFHbHdJQzBnWkc5bGN5QjBhR1VnZFhObGNpQm9ZWFpsSUdsdWNIVjBJR052Ym5SeWIyd2diM2R1WlhKemFHbHdYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1gyOXVTVzV3ZFhSRGIyNTBjbTlzVDNkdVpYSnphR2x3S0dsdWNIVjBRMjl1ZEhKdmJFOTNibVZ5YzJocGNEb2dZbTl2YkdWaGJpazZJSFp2YVdRZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5cGJuQjFkRU52Ym5SeWIyeHNaWElnUFNCcGJuQjFkRU52Ym5SeWIyeFBkMjVsY25Ob2FYQTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dTVzV6ZEdGdWRHbGhkR1VnZEdobElGZGxZbEpVUTFCc1lYbGxja052Ym5SeWIyeHNaWElnYVc1MFpYSm1ZV05sSUhSdklIQnliM1pwWkdVZ1YyVmlVbFJEVUd4aGVXVnlRMjl1ZEhKdmJHeGxjaUJtZFc1amRHbHZibUZzYVhSNUlIZHBkR2hwYmlCMGFHbHpJR05zWVhOeklHRnVaQ0J6WlhRZ2RYQWdZVzU1ZEdocGJtY2dkR2hoZENCeVpYRjFhWEpsY3lCcGRGeHVJQ0FnSUNBcUlFQndZWEpoYlNCM1pXSlNkR05RYkdGNVpYSkRiMjUwY205c2JHVnlJQzBnWVNCWFpXSlNkR05RYkdGNVpYSkRiMjUwY205c2JHVnlJR052Ym5SeWIyeHNaWElnYVc1emRHRnVZMlZjYmlBZ0lDQWdLaTljYmlBZ0lDQndjbWwyWVhSbElITmxkRmRsWWxKMFkxQnNZWGxsY2tOdmJuUnliMnhzWlhJb1hHNGdJQ0FnSUNBZ0lIZGxZbEowWTFCc1lYbGxja052Ym5SeWIyeHNaWEk2SUZkbFlsSjBZMUJzWVhsbGNrTnZiblJ5YjJ4c1pYSmNiaUFnSUNBcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmQyVmlVblJqUTI5dWRISnZiR3hsY2lBOUlIZGxZbEowWTFCc1lYbGxja052Ym5SeWIyeHNaWEk3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZDJWaVVuUmpRMjl1ZEhKdmJHeGxjaTV6WlhSUWNtVm1aWEp5WldSRGIyUmxZeWhjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTI5dVptbG5MbWRsZEZObGRIUnBibWRQY0hScGIyNG9UM0IwYVc5dVVHRnlZVzFsZEdWeWN5NVFjbVZtWlhKeVpXUkRiMlJsWXlsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdWMyVnNaV04wWldSY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmQyVmlVblJqUTI5dWRISnZiR3hsY2k1eVpYTnBlbVZRYkdGNVpYSlRkSGxzWlNncE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUdOdmJtNWxZM1FnYVdZZ1lYVjBieUJqYjI1dVpXTjBJR1pzWVdjZ2FYTWdaVzVoWW14bFpGeHVJQ0FnSUNBZ0lDQjBhR2x6TG1Ob1pXTnJSbTl5UVhWMGIwTnZibTVsWTNRb0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkRiMjV1WldOMElIUnZJSE5wWjI1aGJHbHVaeUJ6WlhKMlpYSXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUdOdmJtNWxZM1FvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJWMlpXNTBSVzFwZEhSbGNpNWthWE53WVhSamFFVjJaVzUwS0c1bGR5QlRkSEpsWVcxUWNtVkRiMjV1WldOMFJYWmxiblFvS1NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNkbFlsSjBZME52Ym5SeWIyeHNaWEl1WTI5dWJtVmpkRlJ2VTJsbmJtRnNiR2x1WjFObGNuWmxjaWdwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZKbFkyOXVibVZqZEhNZ2RHOGdkR2hsSUhOcFoyNWhiR2x1WnlCelpYSjJaWEl1SUVsbUlHTnZibTVsWTNScGIyNGdhWE1nZFhBc0lHUnBjMk52Ym01bFkzUnpJR1pwY25OMFhHNGdJQ0FnSUNvZ1ltVm1iM0psSUdWemRHRmliR2x6YUdsdVp5QmhJRzVsZHlCamIyNXVaV04wYVc5dVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJSEpsWTI5dWJtVmpkQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWlhabGJuUkZiV2wwZEdWeUxtUnBjM0JoZEdOb1JYWmxiblFvYm1WM0lGTjBjbVZoYlZKbFkyOXVibVZqZEVWMlpXNTBLQ2twTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDkzWldKU2RHTkRiMjUwY205c2JHVnlMblJ5ZVZKbFkyOXVibVZqZENoY0lsSmxZMjl1Ym1WamRHbHVaeTR1TGx3aUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkVhWE5qYjI1dVpXTjBJR1p5YjIwZ2RHaGxJSE5wWjI1aGJHbHVaeUJ6WlhKMlpYSWdZVzVrSUdOc2IzTmxJRzl3Wlc0Z2NHVmxjaUJqYjI1dVpXTjBhVzl1Y3k1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdaR2x6WTI5dWJtVmpkQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWlhabGJuUkZiV2wwZEdWeUxtUnBjM0JoZEdOb1JYWmxiblFvYm1WM0lGTjBjbVZoYlZCeVpVUnBjMk52Ym01bFkzUkZkbVZ1ZENncEtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmQyVmlVblJqUTI5dWRISnZiR3hsY2k1amJHOXpaU2dwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZCc1lYa2dkR2hsSUhOMGNtVmhiUzRnUTJGdUlHSmxJR05oYkd4bFpDQnZibXg1SUdGbWRHVnlJR0VnY0dWbGNpQmpiMjV1WldOMGFXOXVJR2hoY3lCaVpXVnVJR1Z6ZEdGaWJHbHphR1ZrTGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5QndiR0Y1S0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5dmJsTjBjbVZoYlV4dllXUnBibWNvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZDJWaVVuUmpRMjl1ZEhKdmJHeGxjaTV3YkdGNVUzUnlaV0Z0S0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FYVjBieUJqYjI1dVpXTjBJR2xtSUVGMWRHOURiMjV1WldOMElHWnNZV2NnYVhNZ1pXNWhZbXhsWkZ4dUlDQWdJQ0FxTDF4dUlDQWdJSEJ5YVhaaGRHVWdZMmhsWTJ0R2IzSkJkWFJ2UTI5dWJtVmpkQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdjMlYwSUhWd0lHbG1JSFJvWlNCaGRYUnZJSEJzWVhrZ2QybHNiQ0JpWlNCMWMyVmtJRzl5SUhKbFozVnNZWElnWTJ4cFkyc2dkRzhnYzNSaGNuUmNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVZMjl1Wm1sbkxtbHpSbXhoWjBWdVlXSnNaV1FvUm14aFozTXVRWFYwYjBOdmJtNWxZM1FwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCcFppQmhkWFJ2Y0d4aGVXbHVaeUJ6YUc5M0lHRnVJR2x1Wm04Z2IzWmxjbXhoZVNCM2FHbHNaU0IzYUdsc1pTQjNZV2wwYVc1bklHWnZjaUIwYUdVZ1kyOXVibVZqZEdsdmJpQjBieUJpWldkcGJseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiMjVYWldKU2RHTkJkWFJ2UTI5dWJtVmpkQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmQyVmlVblJqUTI5dWRISnZiR3hsY2k1amIyNXVaV04wVkc5VGFXZHVZV3hzYVc1blUyVnlkbVZ5S0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNBdktpb2dYRzRnSUNBZ0lDb2dWMmxzYkNCMWJtMTFkR1VnZEdobElHMXBZM0p2Y0dodmJtVWdkSEpoWTJzZ2QyaHBZMmdnYVhNZ2MyVnVkQ0IwYnlCVmJuSmxZV3dnUlc1bmFXNWxMbHh1SUNBZ0lDQXFJRUo1SUdSbFptRjFiSFFzSUhkcGJHd2diMjVzZVNCMWJtMTFkR1VnWVc0Z1pYaHBjM1JwYm1jZ2JXbGpJSFJ5WVdOckxseHVJQ0FnSUNBcUlGeHVJQ0FnSUNBcUlFQndZWEpoYlNCbWIzSmpaVVZ1WVdKc1pTQkRZVzRnWW1VZ2RYTmxaQ0JtYjNJZ1kyRnpaWE1nZDJobGJpQjBhR2x6SUc5aWFtVmpkQ0IzWVhOdUozUWdhVzVwZEdsaGJHbDZaV1FnZDJsMGFDQmhJRzFwWXlCMGNtRmpheTVjYmlBZ0lDQWdLaUJKWmlCMGFHbHpJSEJoY21GdFpYUmxjaUJwY3lCMGNuVmxMQ0IwYUdVZ1kyOXVibVZqZEdsdmJpQjNhV3hzSUdKbElISmxjM1JoY25SbFpDQjNhWFJvSUdFZ2JXbGpjbTl3YUc5dVpTNWNiaUFnSUNBZ0tpQlhZWEp1YVc1bk9pQjBhR2x6SUhSaGEyVnpJSE52YldVZ2RHbHRaU3dnWVhNZ1lTQm1kV3hzSUhKbGJtVm5iM1JwWVhScGIyNGdZVzVrSUhKbFkyOXVibVZqZEdsdmJpQjNhV3hzSUdoaGNIQmxiaTVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ2RXNXRkWFJsVFdsamNtOXdhRzl1WlNobWIzSmpaVVZ1WVdKc1pTQTlJR1poYkhObEtTQTZJSFp2YVdRZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJKWmlCMGFHVnlaU2R6SUdGdUlHVjRhWE4wYVc1bklHMXBZeUIwY21GamF5d2dkMlVnYW5WemRDQnpaWFFnYlhWMFpXUWdjM1JoZEdWY2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVkyOXVabWxuTG1selJteGhaMFZ1WVdKc1pXUW9KMVZ6WlUxcFl5Y3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFMXBZM0p2Y0dodmJtVk5kWFJsWkNobVlXeHpaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJQzh2SUVsbUlIUm9aWEpsSjNNZ2JtOGdjSEpsTFdWNGFYTjBhVzVuSUcxcFl5QjBjbUZqYXl3Z1lXNWtJR05oYkd4bGNpQnBjeUJ2YXlCM2FYUm9JR1oxYkd3Z2NtVnpaWFFzSUhkbElHVnVZV0pzWlNCaGJtUWdjbVZ6WlhSY2JpQWdJQ0FnSUNBZ2FXWWdLR1p2Y21ObFJXNWhZbXhsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTnZibVpwWnk1elpYUkdiR0ZuUlc1aFlteGxaQ2hjSWxWelpVMXBZMXdpTENCMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y21WamIyNXVaV04wS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ0x5OGdTV1lnZDJVZ2NISmxabVZ5SUc1dmRDQjBieUJtYjNKalpTQmhJSEpsWTI5dWJtVmpkR2x2Yml3Z2FuVnpkQ0IzWVhKdUlIUm9aU0IxYzJWeUlIUm9ZWFFnZEdocGN5QnZjR1Z5WVhScGIyNGdaR2xrYmlkMElHaGhjSEJsYmx4dUlDQWdJQ0FnSUNCTWIyZG5aWEl1VjJGeWJtbHVaeWhjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5WSEo1YVc1bklIUnZJSFZ1YlhWMFpTQnRhV01zSUdKMWRDQlFhWGhsYkZOMGNtVmhiV2x1WnlCM1lYTWdhVzVwZEdsaGJHbDZaV1FnZDJsMGFDQnVieUJ0YVdOeWIzQm9iMjVsSUhSeVlXTnJMaUJEWVd4c0lIZHBkR2dnWm05eVkyVkZibUZpYkdVZ1BUMGdkSEoxWlNCMGJ5QnlaUzFqYjI1dVpXTjBJSGRwZEdnZ1lTQnRhV01nZEhKaFkyc3VKMXh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEIxWW14cFl5QnRkWFJsVFdsamNtOXdhRzl1WlNncElEb2dkbTlwWkNCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtTnZibVpwWnk1cGMwWnNZV2RGYm1GaWJHVmtLQ2RWYzJWTmFXTW5LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpYUk5hV055YjNCb2IyNWxUWFYwWldRb2RISjFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0F2THlCSlppQjBhR1Z5WlNCM1lYTnVKM1FnWVNCdGFXTWdkSEpoWTJzc0lHcDFjM1FnYkdWMElIVnpaWElnYTI1dmR5QjBhR1Z5WlNkeklHNXZkR2hwYm1jZ2RHOGdiWFYwWlZ4dUlDQWdJQ0FnSUNCTWIyZG5aWEl1U1c1bWJ5aGNiaUFnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBblZISjVhVzVuSUhSdklHMTFkR1VnYldsakxDQmlkWFFnVUdsNFpXeFRkSEpsWVcxcGJtY2dhR0Z6SUc1dklHMXBZM0p2Y0dodmJtVWdkSEpoWTJzc0lITnZJSE5sYm1ScGJtY2djMjkxYm1RZ2FYTWdZV3h5WldGa2VTQmthWE5oWW14bFpDNG5YRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjSEpwZG1GMFpTQnpaWFJOYVdOeWIzQm9iMjVsVFhWMFpXUW9iWFYwWlRvZ1ltOXZiR1ZoYmlrZ09pQjJiMmxrWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tHTnZibk4wSUhSeVlXNXpZMlZwZG1WeUlHOW1JSFJvYVhNdVgzZGxZbEowWTBOdmJuUnliMnhzWlhJL0xuQmxaWEpEYjI1dVpXTjBhVzl1UTI5dWRISnZiR3hsY2o4dWNHVmxja052Ym01bFkzUnBiMjQvTG1kbGRGUnlZVzV6WTJWcGRtVnljeWdwSUQ4L0lGdGRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvVWxSRFZYUnBiSE11WTJGdVZISmhibk5qWldsMlpYSlRaVzVrUVhWa2FXOG9kSEpoYm5OalpXbDJaWElwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RISmhibk5qWldsMlpYSXVjMlZ1WkdWeUxuUnlZV05yTG1WdVlXSnNaV1FnUFNBaGJYVjBaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRVZ0YVhRZ1lXNGdaWFpsYm5RZ2IyNGdZWFYwYnlCamIyNXVaV04wYVc1blhHNGdJQ0FnSUNvdlhHNGdJQ0FnWDI5dVYyVmlVblJqUVhWMGIwTnZibTVsWTNRb0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyVjJaVzUwUlcxcGRIUmxjaTVrYVhOd1lYUmphRVYyWlc1MEtHNWxkeUJYWldKU2RHTkJkWFJ2UTI5dWJtVmpkRVYyWlc1MEtDa3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sZENCMWNDQm1kVzVqZEdsdmJtRnNhWFI1SUhSdklHaGhjSEJsYmlCM2FHVnVJSEpsWTJWcGRtbHVaeUJoSUhkbFlsSlVReUJoYm5OM1pYSmNiaUFnSUNBZ0tpOWNiaUFnSUNCZmIyNVhaV0pTZEdOVFpIQW9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMlYyWlc1MFJXMXBkSFJsY2k1a2FYTndZWFJqYUVWMlpXNTBLRzVsZHlCWFpXSlNkR05UWkhCRmRtVnVkQ2dwS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCRmJXbDBjeUJoSUZOMGNtVmhiVXh2WVdScGJtY2daWFpsYm5SY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JmYjI1VGRISmxZVzFNYjJGa2FXNW5LQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlsZG1WdWRFVnRhWFIwWlhJdVpHbHpjR0YwWTJoRmRtVnVkQ2h1WlhjZ1UzUnlaV0Z0VEc5aFpHbHVaMFYyWlc1MEtDa3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRVYyWlc1MElHWnBjbVZrSUhkb1pXNGdkR2hsSUhacFpHVnZJR2x6SUdScGMyTnZibTVsWTNSbFpDQXRJR1Z0YVhSeklHZHBkbVZ1SUdWMlpXNTBVM1J5YVc1bklHOXlJR0Z1SUc5MlpYSnlhV1JsWEc0Z0lDQWdJQ29nYldWemMyRm5aU0JtY205dElIZGxZbEowWTBOdmJuUnliMnhzWlhJZ2FXWWdiMjVsSUdoaGN5QmlaV1Z1SUhObGRGeHVJQ0FnSUNBcUlFQndZWEpoYlNCbGRtVnVkRk4wY21sdVp5QXRJR0VnYzNSeWFXNW5JR1JsYzJOeWFXSnBibWNnZDJoNUlIUm9aU0JqYjI1dVpXTjBhVzl1SUdOc2IzTmxaRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmhiR3h2ZDBOc2FXTnJWRzlTWldOdmJtNWxZM1FnTFNCMGNuVmxJR2xtSUhkbElIZGhiblFnZEc4Z1lXeHNiM2NnZEdobElIVnpaWElnZEc4Z2NtVjBjbmtnZEdobElHTnZibTVsWTNScGIyNGdkMmwwYUNCaElHTnNhV05yWEc0Z0lDQWdJQ292WEc0Z0lDQWdYMjl1UkdselkyOXVibVZqZENobGRtVnVkRk4wY21sdVp6b2djM1J5YVc1bkxDQmhiR3h2ZDBOc2FXTnJWRzlTWldOdmJtNWxZM1E2SUdKdmIyeGxZVzRwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWlhabGJuUkZiV2wwZEdWeUxtUnBjM0JoZEdOb1JYWmxiblFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQnVaWGNnVjJWaVVuUmpSR2x6WTI5dWJtVmpkR1ZrUlhabGJuUW9lMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1YyWlc1MFUzUnlhVzVuT2lCbGRtVnVkRk4wY21sdVp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhiR3h2ZDBOc2FXTnJWRzlTWldOdmJtNWxZM1E2SUdGc2JHOTNRMnhwWTJ0VWIxSmxZMjl1Ym1WamRGeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQklZVzVrYkdWeklIZG9aVzRnVjJWaUlGSjBZeUJwY3lCamIyNXVaV04wYVc1blhHNGdJQ0FnSUNvdlhHNGdJQ0FnWDI5dVYyVmlVblJqUTI5dWJtVmpkR2x1WnlncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlpYWmxiblJGYldsMGRHVnlMbVJwYzNCaGRHTm9SWFpsYm5Rb2JtVjNJRmRsWWxKMFkwTnZibTVsWTNScGJtZEZkbVZ1ZENncEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQklZVzVrYkdWeklIZG9aVzRnVjJWaUlGSjBZeUJvWVhNZ1kyOXVibVZqZEdWa1hHNGdJQ0FnSUNvdlhHNGdJQ0FnWDI5dVYyVmlVblJqUTI5dWJtVmpkR1ZrS0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5bGRtVnVkRVZ0YVhSMFpYSXVaR2x6Y0dGMFkyaEZkbVZ1ZENodVpYY2dWMlZpVW5SalEyOXVibVZqZEdWa1JYWmxiblFvS1NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1NHRnVaR3hsY3lCM2FHVnVJRmRsWWlCU2RHTWdabUZwYkhNZ2RHOGdZMjl1Ym1WamRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUY5dmJsZGxZbEowWTBaaGFXeGxaQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWlhabGJuUkZiV2wwZEdWeUxtUnBjM0JoZEdOb1JYWmxiblFvYm1WM0lGZGxZbEowWTBaaGFXeGxaRVYyWlc1MEtDa3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWhoYm1Sc1pTQjNhR1Z1SUhSb1pTQldhV1JsYnlCb1lYTWdZbVZsYmlCSmJtbDBhV0ZzYVhwbFpGeHVJQ0FnSUNBcUwxeHVJQ0FnSUY5dmJsWnBaR1Z2U1c1cGRHbGhiR2w2WldRb0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyVjJaVzUwUlcxcGRIUmxjaTVrYVhOd1lYUmphRVYyWlc1MEtHNWxkeUJXYVdSbGIwbHVhWFJwWVd4cGVtVmtSWFpsYm5Rb0tTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzWnBaR1Z2VTNSaGNuUlVhVzFsSUQwZ1JHRjBaUzV1YjNjb0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaWFFnZFhBZ1puVnVZM1JwYjI1aGJHbDBlU0IwYnlCb1lYQndaVzRnZDJobGJpQnlaV05sYVhacGJtY2diR0YwWlc1amVTQjBaWE4wSUhKbGMzVnNkSE5jYmlBZ0lDQWdLaUJBY0dGeVlXMGdiR0YwWlc1amVTQXRJR3hoZEdWdVkza2dkR1Z6ZENCeVpYTjFiSFJ6SUc5aWFtVmpkRnh1SUNBZ0lDQXFMMXh1SUNBZ0lGOXZia3hoZEdWdVkzbFVaWE4wVW1WemRXeDBLR3hoZEdWdVkzbFVhVzFwYm1kek9pQk1ZWFJsYm1ONVZHVnpkRkpsYzNWc2RITXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZaWFpsYm5SRmJXbDBkR1Z5TG1ScGMzQmhkR05vUlhabGJuUW9YRzRnSUNBZ0lDQWdJQ0FnSUNCdVpYY2dUR0YwWlc1amVWUmxjM1JTWlhOMWJIUkZkbVZ1ZENoN0lHeGhkR1Z1WTNsVWFXMXBibWR6SUgwcFhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1gyOXVSR0YwWVVOb1lXNXVaV3hNWVhSbGJtTjVWR1Z6ZEZKbGMzQnZibk5sS0hKbGMzQnZibk5sT2lCRVlYUmhRMmhoYm01bGJFeGhkR1Z1WTNsVVpYTjBVbVZ6Y0c5dWMyVXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZaWFpsYm5SRmJXbDBkR1Z5TG1ScGMzQmhkR05vUlhabGJuUW9YRzRnSUNBZ0lDQWdJQ0FnSUNCdVpYY2dSR0YwWVVOb1lXNXVaV3hNWVhSbGJtTjVWR1Z6ZEZKbGMzQnZibk5sUlhabGJuUW9leUJ5WlhOd2IyNXpaU0I5S1Z4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTmxkQ0IxY0NCbWRXNWpkR2x2Ym1Gc2FYUjVJSFJ2SUdoaGNIQmxiaUIzYUdWdUlISmxZMlZwZG1sdVp5QjJhV1JsYnlCemRHRjBhWE4wYVdOelhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhacFpHVnZVM1JoZEhNZ0xTQjJhV1JsYnlCemRHRjBhWE4wYVdOeklHRnpJR0VnWVdkbmNtVm5ZWFJsSUhOMFlYUnpJRzlpYW1WamRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUY5dmJsWnBaR1Z2VTNSaGRITW9kbWxrWlc5VGRHRjBjem9nUVdkbmNtVm5ZWFJsWkZOMFlYUnpLU0I3WEc0Z0lDQWdJQ0FnSUM4dklFUjFjbUYwYVc5dVhHNGdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NWZkbWxrWlc5VGRHRnlkRlJwYldVZ2ZId2dkR2hwY3k1ZmRtbGtaVzlUZEdGeWRGUnBiV1VnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmZG1sa1pXOVRkR0Z5ZEZScGJXVWdQU0JFWVhSbExtNXZkeWdwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIWnBaR1Z2VTNSaGRITXVhR0Z1Wkd4bFUyVnpjMmx2YmxOMFlYUnBjM1JwWTNNb1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOTJhV1JsYjFOMFlYSjBWR2x0WlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgybHVjSFYwUTI5dWRISnZiR3hsY2l4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzZGxZbEowWTBOdmJuUnliMnhzWlhJdWRtbGtaVzlCZG1kUmNGeHVJQ0FnSUNBZ0lDQXBPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMlYyWlc1MFJXMXBkSFJsY2k1a2FYTndZWFJqYUVWMlpXNTBLRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JtVjNJRk4wWVhSelVtVmpaV2wyWldSRmRtVnVkQ2g3SUdGblozSmxaMkYwWldSVGRHRjBjem9nZG1sa1pXOVRkR0YwY3lCOUtWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sZENCMWNDQm1kVzVqZEdsdmJtRnNhWFI1SUhSdklHaGhjSEJsYmlCM2FHVnVJR05oYkdOMWJHRjBhVzVuSUhSb1pTQmhkbVZ5WVdkbElIWnBaR1Z2SUdWdVkyOWtaWElnY1hCY2JpQWdJQ0FnS2lCQWNHRnlZVzBnVVZBZ0xTQjBhR1VnY1hWaGJHbDBlU0J1ZFcxaVpYSWdiMllnZEdobElITjBjbVZoYlZ4dUlDQWdJQ0FxTDF4dUlDQWdJRjl2YmxacFpHVnZSVzVqYjJSbGNrRjJaMUZRS0ZGUU9pQnVkVzFpWlhJcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlpYWmxiblJGYldsMGRHVnlMbVJwYzNCaGRHTm9SWFpsYm5Rb1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1WlhjZ1ZtbGtaVzlGYm1OdlpHVnlRWFpuVVZCRmRtVnVkQ2g3SUdGMloxRlFPaUJSVUNCOUtWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sZENCMWNDQm1kVzVqZEdsdmJtRnNhWFI1SUhSdklHaGhjSEJsYmlCM2FHVnVJSEpsWTJWcGRtbHVaeUJoYm1RZ2FHRnVaR3hwYm1jZ2FXNXBkR2xoYkNCelpYUjBhVzVuY3lCbWIzSWdkR2hsSUZWRklHRndjRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnpaWFIwYVc1bmN5QXRJR2x1YVhScFlXd2dWVVVnWVhCd0lITmxkSFJwYm1kelhHNGdJQ0FnSUNvdlhHNGdJQ0FnWDI5dVNXNXBkR2xoYkZObGRIUnBibWR6S0hObGRIUnBibWR6T2lCSmJtbDBhV0ZzVTJWMGRHbHVaM01wSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWlhabGJuUkZiV2wwZEdWeUxtUnBjM0JoZEdOb1JYWmxiblFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQnVaWGNnU1c1cGRHbGhiRk5sZEhScGJtZHpSWFpsYm5Rb2V5QnpaWFIwYVc1bmN5QjlLVnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCcFppQW9jMlYwZEdsdVozTXVVR2w0Wld4VGRISmxZVzFwYm1kVFpYUjBhVzVuY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWhiR3h2ZDBOdmJuTnZiR1ZEYjIxdFlXNWtjeUE5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWMGRHbHVaM011VUdsNFpXeFRkSEpsWVcxcGJtZFRaWFIwYVc1bmN5NUJiR3h2ZDFCcGVHVnNVM1J5WldGdGFXNW5RMjl0YldGdVpITWdQejhnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1aGJHeHZkME52Ym5OdmJHVkRiMjF0WVc1a2N5QTlQVDBnWm1Gc2MyVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVTVzVtYnloY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKeTFCYkd4dmQxQnBlR1ZzVTNSeVpXRnRhVzVuUTI5dGJXRnVaSE05Wm1Gc2MyVXNJSE5sYm1ScGJtY2dZWEppYVhSeVlYSjVJR052Ym5OdmJHVWdZMjl0YldGdVpITWdabkp2YlNCaWNtOTNjMlZ5SUhSdklGVkZJR2x6SUdScGMyRmliR1ZrTGlkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2RYTmxWWEpzVUdGeVlXMXpJRDBnZEdocGN5NWpiMjVtYVdjdWRYTmxWWEpzVUdGeVlXMXpPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjFjbXhRWVhKaGJYTWdQU0J1WlhjZ1ZWSk1VMlZoY21Ob1VHRnlZVzF6S0hkcGJtUnZkeTVzYjJOaGRHbHZiaTV6WldGeVkyZ3BPMXh1SUNBZ0lDQWdJQ0JNYjJkblpYSXVTVzVtYnloY2JpQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JnZFhOcGJtY2dWVkpNSUhCaGNtRnRaWFJsY25NZ0pIdDFjMlZWY214UVlYSmhiWE45WUZ4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvYzJWMGRHbHVaM011Ulc1amIyUmxjbE5sZEhScGJtZHpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJtWnBaeTV6WlhST2RXMWxjbWxqVTJWMGRHbHVaeWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JPZFcxbGNtbGpVR0Z5WVcxbGRHVnljeTVOYVc1UlVDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJKWmlCaElITmxkSFJwYm1jZ2FYTWdjMlYwSUdsdUlIUm9aU0JWVWt3c0lHMWhhMlVnYzNWeVpTQjNaU0J5WlhOd1pXTjBJSFJvWVhRZ2RtRnNkV1VnWVhNZ2IzQndiM05sWkNCMGJ5QjNhR0YwSUhSb1pTQmhjSEJzYVdOaGRHbHZiaUJ6Wlc1a2N5QjFjMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2gxYzJWVmNteFFZWEpoYlhNZ0ppWWdkWEpzVUdGeVlXMXpMbWhoY3loT2RXMWxjbWxqVUdGeVlXMWxkR1Z5Y3k1TmFXNVJVQ2twSUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQS9JRTUxYldKbGNpNXdZWEp6WlVac2IyRjBLSFZ5YkZCaGNtRnRjeTVuWlhRb1RuVnRaWEpwWTFCaGNtRnRaWFJsY25NdVRXbHVVVkFwS1NCY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdPaUJ6WlhSMGFXNW5jeTVGYm1OdlpHVnlVMlYwZEdsdVozTXVUV2x1VVZCY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqYjI1bWFXY3VjMlYwVG5WdFpYSnBZMU5sZEhScGJtY29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdUblZ0WlhKcFkxQmhjbUZ0WlhSbGNuTXVUV0Y0VVZBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tIVnpaVlZ5YkZCaGNtRnRjeUFtSmlCMWNteFFZWEpoYlhNdWFHRnpLRTUxYldWeWFXTlFZWEpoYldWMFpYSnpMazFoZUZGUUtTa2dYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQ4Z1RuVnRZbVZ5TG5CaGNuTmxSbXh2WVhRb2RYSnNVR0Z5WVcxekxtZGxkQ2hPZFcxbGNtbGpVR0Z5WVcxbGRHVnljeTVOWVhoUlVDa3BJRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBNklITmxkSFJwYm1kekxrVnVZMjlrWlhKVFpYUjBhVzVuY3k1TllYaFJVRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb2MyVjBkR2x1WjNNdVYyVmlVbFJEVTJWMGRHbHVaM01wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyOXVabWxuTG5ObGRFNTFiV1Z5YVdOVFpYUjBhVzVuS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUU1MWJXVnlhV05RWVhKaGJXVjBaWEp6TGxkbFlsSlVRMDFwYmtKcGRISmhkR1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS0hWelpWVnliRkJoY21GdGN5QW1KaUIxY214UVlYSmhiWE11YUdGektFNTFiV1Z5YVdOUVlYSmhiV1YwWlhKekxsZGxZbEpVUTAxcGJrSnBkSEpoZEdVcEtTQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUHlCT2RXMWlaWEl1Y0dGeWMyVkdiRzloZENoMWNteFFZWEpoYlhNdVoyVjBLRTUxYldWeWFXTlFZWEpoYldWMFpYSnpMbGRsWWxKVVEwMXBia0pwZEhKaGRHVXBLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBNklDaHpaWFIwYVc1bmN5NVhaV0pTVkVOVFpYUjBhVzVuY3k1TmFXNUNhWFJ5WVhSbElDOGdNVEF3TUNrZ0x5b2dZbkJ6SUhSdklHdGljSE1nS2k5Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJtWnBaeTV6WlhST2RXMWxjbWxqVTJWMGRHbHVaeWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JPZFcxbGNtbGpVR0Z5WVcxbGRHVnljeTVYWldKU1ZFTk5ZWGhDYVhSeVlYUmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2gxYzJWVmNteFFZWEpoYlhNZ0ppWWdkWEpzVUdGeVlXMXpMbWhoY3loT2RXMWxjbWxqVUdGeVlXMWxkR1Z5Y3k1WFpXSlNWRU5OWVhoQ2FYUnlZWFJsS1NrZ1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDhnVG5WdFltVnlMbkJoY25ObFJteHZZWFFvZFhKc1VHRnlZVzF6TG1kbGRDaE9kVzFsY21salVHRnlZVzFsZEdWeWN5NVhaV0pTVkVOTllYaENhWFJ5WVhSbEtTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnT2lBb2MyVjBkR2x1WjNNdVYyVmlVbFJEVTJWMGRHbHVaM011VFdGNFFtbDBjbUYwWlNBdklERXdNREFwSUM4cUlHSndjeUIwYnlCclluQnpJQ292WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqYjI1bWFXY3VjMlYwVG5WdFpYSnBZMU5sZEhScGJtY29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdUblZ0WlhKcFkxQmhjbUZ0WlhSbGNuTXVWMlZpVWxSRFJsQlRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2gxYzJWVmNteFFZWEpoYlhNZ0ppWWdkWEpzVUdGeVlXMXpMbWhoY3loT2RXMWxjbWxqVUdGeVlXMWxkR1Z5Y3k1WFpXSlNWRU5HVUZNcEtTQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUHlCT2RXMWlaWEl1Y0dGeWMyVkdiRzloZENoMWNteFFZWEpoYlhNdVoyVjBLRTUxYldWeWFXTlFZWEpoYldWMFpYSnpMbGRsWWxKVVEwWlFVeWtwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEb2djMlYwZEdsdVozTXVWMlZpVWxSRFUyVjBkR2x1WjNNdVJsQlRYRzRnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVMlYwSUhWd0lHWjFibU4wYVc5dVlXeHBkSGtnZEc4Z2FHRndjR1Z1SUhkb1pXNGdjMlYwZEdsdVp5QnhkV0ZzYVhSNUlHTnZiblJ5YjJ3Z2IzZHVaWEp6YUdsd0lHOW1JR0VnYzNSeVpXRnRYRzRnSUNBZ0lDb2dRSEJoY21GdElHaGhjMUYxWVd4cGRIbFBkMjVsY25Ob2FYQWdMU0JrYjJWeklIUm9hWE1nZFhObGNpQm9ZWFpsSUhGMVlXeHBkSGtnYjNkdVpYSnphR2x3SUc5bUlIUm9aU0J6ZEhKbFlXMGdkSEoxWlNBdklHWmhiSE5sWEc0Z0lDQWdJQ292WEc0Z0lDQWdYMjl1VVhWaGJHbDBlVU52Ym5SeWIyeFBkMjVsY25Ob2FYQW9hR0Z6VVhWaGJHbDBlVTkzYm1WeWMyaHBjRG9nWW05dmJHVmhiaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbU52Ym1acFp5NXpaWFJHYkdGblJXNWhZbXhsWkNoY2JpQWdJQ0FnSUNBZ0lDQWdJRVpzWVdkekxrbHpVWFZoYkdsMGVVTnZiblJ5YjJ4c1pYSXNYRzRnSUNBZ0lDQWdJQ0FnSUNCb1lYTlJkV0ZzYVhSNVQzZHVaWEp6YUdsd1hHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1gyOXVVR3hoZVdWeVEyOTFiblFvY0d4aGVXVnlRMjkxYm5RNklHNTFiV0psY2lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5bGRtVnVkRVZ0YVhSMFpYSXVaR2x6Y0dGMFkyaEZkbVZ1ZENoY2JpQWdJQ0FnSUNBZ0lDQWdJRzVsZHlCUWJHRjVaWEpEYjNWdWRFVjJaVzUwS0hzZ1kyOTFiblE2SUhCc1lYbGxja052ZFc1MElIMHBYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnVTJWMGN5QjFjQ0IwYnlCbGJXbDBJSFJvWlNCM1pXSnlkR01nZEdOd0lISmxiR0Y1SUdSbGRHVmpkQ0JsZG1WdWRDQmNiaUFnSUNCZmMyVjBkWEJYWldKU2RHTlVRMUJTWld4aGVVUmxkR1ZqZEdsdmJpaHpkR0YwYzFKbFkyVnBkbVZrUlhabGJuUTZJRk4wWVhSelVtVmpaV2wyWldSRmRtVnVkQ2tnZTF4dUlDQWdJQ0FnSUNBdkx5QkhaWFFnZEdobElHRmpkR2wyWlNCallXNWthV1JoZEdVZ2NHRnBjbHh1SUNBZ0lDQWdJQ0JzWlhRZ1lXTjBhWFpsUTJGdVpHbGtZWFJsVUdGcGNpQTlJSE4wWVhSelVtVmpaV2wyWldSRmRtVnVkQzVrWVhSaExtRm5aM0psWjJGMFpXUlRkR0YwY3k1blpYUkJZM1JwZG1WRFlXNWthV1JoZEdWUVlXbHlLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUM4dklFTm9aV05ySUdsbUlIUm9aU0JoWTNScGRtVWdZMkZ1Wkdsa1lYUmxJSEJoYVhJZ2FYTWdibTkwSUc1MWJHeGNiaUFnSUNBZ0lDQWdhV1lnS0dGamRHbDJaVU5oYm1ScFpHRjBaVkJoYVhJZ0lUMGdiblZzYkNrZ2UxeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkhaWFFnZEdobElHeHZZMkZzSUdOaGJtUnBaR0YwWlNCaGMzTnBaMjVsWkNCMGJ5QjBhR1VnWVdOMGFYWmxJR05oYm1ScFpHRjBaU0J3WVdseVhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JHOWpZV3hEWVc1a2FXUmhkR1VnUFNCemRHRjBjMUpsWTJWcGRtVmtSWFpsYm5RdVpHRjBZUzVoWjJkeVpXZGhkR1ZrVTNSaGRITXViRzlqWVd4RFlXNWthV1JoZEdWekxtWnBibVFvS0dOaGJtUnBaR0YwWlNrZ1BUNGdZMkZ1Wkdsa1lYUmxMbWxrSUQwOUlHRmpkR2wyWlVOaGJtUnBaR0YwWlZCaGFYSXViRzlqWVd4RFlXNWthV1JoZEdWSlpDd2diblZzYkNsY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1EyaGxZMnNnYVdZZ2RHaGxJR3h2WTJGc0lHTmhibVJwWkdGMFpTQnBjeUJ1YjNRZ2JuVnNiQ3dnWTJGdVpHbGtZWFJsSUhSNWNHVWdhWE1nY21Wc1lYa2dZVzVrSUhSb1pTQnlaV3hoZVNCd2NtOTBiMk52YkNCcGN5QjBZM0JjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hzYjJOaGJFTmhibVJwWkdGMFpTQWhQU0J1ZFd4c0lDWW1JR3h2WTJGc1EyRnVaR2xrWVhSbExtTmhibVJwWkdGMFpWUjVjR1VnUFQwZ0ozSmxiR0Y1SnlBbUppQnNiMk5oYkVOaGJtUnBaR0YwWlM1eVpXeGhlVkJ5YjNSdlkyOXNJRDA5SUNkMFkzQW5LU0I3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QlRaVzVrSUhSb1pTQjNaV0lnY25SaklIUmpjQ0J5Wld4aGVTQmtaWFJsWTNSbFpDQmxkbVZ1ZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMlYyWlc1MFJXMXBkSFJsY2k1a2FYTndZWFJqYUVWMlpXNTBLRzVsZHlCWFpXSlNkR05VUTFCU1pXeGhlVVJsZEdWamRHVmtSWFpsYm5Rb0tTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCVWFHVWdZMmhsWTJzZ2FYTWdZMjl0Y0d4bGRHVmtJR0Z1WkNCMGFHVWdjM1JoZEhNZ2JHbHpkR1Z1SUdWMlpXNTBJR05oYmlCaVpTQnlaVzF2ZG1Wa1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWxkbVZ1ZEVWdGFYUjBaWEl1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2loY0luTjBZWFJ6VW1WalpXbDJaV1JjSWl3Z2RHaHBjeTVmYzJWMGRYQlhaV0pTZEdOVVExQlNaV3hoZVVSbGRHVmpkR2x2YmlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlNaWEYxWlhOMElHRWdZMjl1Ym1WamRHbHZiaUJzWVhSbGJtTjVJSFJsYzNRdVhHNGdJQ0FnSUNvZ1RrOVVSVG9nVkdobGNtVWdZWEpsSUhCc1lXNXpJSFJ2SUhKbFptRmpkRzl5SUdGc2JDQnlaWEYxWlhOMEtpQm1kVzVqZEdsdmJuTXVJRVY0Y0dWamRDQmphR0Z1WjJWeklHbG1JSGx2ZFNCMWMyVWdkR2hwY3lGY2JpQWdJQ0FnS2lCQWNtVjBkWEp1YzF4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5QnlaWEYxWlhOMFRHRjBaVzVqZVZSbGMzUW9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1ZmQyVmlVblJqUTI5dWRISnZiR3hsY2k1MmFXUmxiMUJzWVhsbGNpNXBjMVpwWkdWdlVtVmhaSGtvS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzZGxZbEowWTBOdmJuUnliMnhzWlhJdWMyVnVaRXhoZEdWdVkzbFVaWE4wS0NrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRkpsY1hWbGMzUWdZU0JrWVhSaElHTm9ZVzV1Wld3Z2JHRjBaVzVqZVNCMFpYTjBMbHh1SUNBZ0lDQXFJRTVQVkVVNklGUm9aWEpsSUdGeVpTQndiR0Z1Y3lCMGJ5QnlaV1poWTNSdmNpQmhiR3dnY21WeGRXVnpkQ29nWm5WdVkzUnBiMjV6TGlCRmVIQmxZM1FnWTJoaGJtZGxjeUJwWmlCNWIzVWdkWE5sSUhSb2FYTWhYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUhKbGNYVmxjM1JFWVhSaFEyaGhibTVsYkV4aGRHVnVZM2xVWlhOMEtHTnZibVpwWnpvZ1JHRjBZVU5vWVc1dVpXeE1ZWFJsYm1ONVZHVnpkRU52Ym1acFp5a2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11WDNkbFlsSjBZME52Ym5SeWIyeHNaWEl1ZG1sa1pXOVFiR0Y1WlhJdWFYTldhV1JsYjFKbFlXUjVLQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVYMlJoZEdGRGFHRnVibVZzVEdGMFpXNWplVlJsYzNSRGIyNTBjbTlzYkdWeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlrWVhSaFEyaGhibTVsYkV4aGRHVnVZM2xVWlhOMFEyOXVkSEp2Ykd4bGNpQTlJRzVsZHlCRVlYUmhRMmhoYm01bGJFeGhkR1Z1WTNsVVpYTjBRMjl1ZEhKdmJHeGxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOTNaV0pTZEdORGIyNTBjbTlzYkdWeUxuTmxibVJFWVhSaFEyaGhibTVsYkV4aGRHVnVZM2xVWlhOMExtSnBibVFvZEdocGN5NWZkMlZpVW5SalEyOXVkSEp2Ykd4bGNpa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLSEpsYzNWc2REb2dSR0YwWVVOb1lXNXVaV3hNWVhSbGJtTjVWR1Z6ZEZKbGMzVnNkQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWxkbVZ1ZEVWdGFYUjBaWEl1WkdsemNHRjBZMmhGZG1WdWRDaHVaWGNnUkdGMFlVTm9ZVzV1Wld4TVlYUmxibU41VkdWemRGSmxjM1ZzZEVWMlpXNTBLQ0I3SUhKbGMzVnNkQ0I5S1NsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmNJbVJoZEdGRGFHRnVibVZzVEdGMFpXNWplVlJsYzNSU1pYTndiMjV6WlZ3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDaDdaR0YwWVRvZ2UzSmxjM0J2Ym5ObGZTQjlLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyUmhkR0ZEYUdGdWJtVnNUR0YwWlc1amVWUmxjM1JEYjI1MGNtOXNiR1Z5TG5KbFkyVnBkbVVvY21WemNHOXVjMlVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ2xjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZaR0YwWVVOb1lXNXVaV3hNWVhSbGJtTjVWR1Z6ZEVOdmJuUnliMnhzWlhJdWMzUmhjblFvWTI5dVptbG5LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJTWlhGMVpYTjBJR1p2Y2lCMGFHVWdWVVVnWVhCd2JHbGpZWFJwYjI0Z2RHOGdjMmh2ZHlCR1VGTWdZMjkxYm5SbGNpNWNiaUFnSUNBZ0tpQk9UMVJGT2lCVWFHVnlaU0JoY21VZ2NHeGhibk1nZEc4Z2NtVm1ZV04wYjNJZ1lXeHNJSEpsY1hWbGMzUXFJR1oxYm1OMGFXOXVjeTRnUlhod1pXTjBJR05vWVc1blpYTWdhV1lnZVc5MUlIVnpaU0IwYUdseklWeHVJQ0FnSUNBcUlFQnlaWFIxY201elhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJSEpsY1hWbGMzUlRhRzkzUm5CektDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11WDNkbFlsSjBZME52Ym5SeWIyeHNaWEl1ZG1sa1pXOVFiR0Y1WlhJdWFYTldhV1JsYjFKbFlXUjVLQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5M1pXSlNkR05EYjI1MGNtOXNiR1Z5TG5ObGJtUlRhRzkzUm5CektDazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZKbGNYVmxjM1FnWm05eUlHRWdibVYzSUVsR2NtRnRaU0JtY205dElIUm9aU0JWUlNCaGNIQnNhV05oZEdsdmJpNWNiaUFnSUNBZ0tpQk9UMVJGT2lCVWFHVnlaU0JoY21VZ2NHeGhibk1nZEc4Z2NtVm1ZV04wYjNJZ1lXeHNJSEpsY1hWbGMzUXFJR1oxYm1OMGFXOXVjeTRnUlhod1pXTjBJR05vWVc1blpYTWdhV1lnZVc5MUlIVnpaU0IwYUdseklWeHVJQ0FnSUNBcUlFQnlaWFIxY201elhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJSEpsY1hWbGMzUkpabkpoYldVb0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaGRHaHBjeTVmZDJWaVVuUmpRMjl1ZEhKdmJHeGxjaTUyYVdSbGIxQnNZWGxsY2k1cGMxWnBaR1Z2VW1WaFpIa29LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDNkbFlsSjBZME52Ym5SeWIyeHNaWEl1YzJWdVpFbG1jbUZ0WlZKbGNYVmxjM1FvS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVMlZ1WkNCa1lYUmhJSFJ2SUZWRklHRndjR3hwWTJGMGFXOXVMaUJVYUdVZ1pHRjBZU0IzYVd4c0lHSmxJSEoxYmlCMGFISnZkV2RvSUVwVFQwNHVjM1J5YVc1bmFXWjVLQ2tnYzI4Z1pTNW5MaUJ6ZEhKcGJtZHpYRzRnSUNBZ0lDb2dZVzVrSUdGdWVTQnpaWEpwWVd4cGVtRmliR1VnY0d4aGFXNGdTbE5QVGlCdlltcGxZM1J6SUhkcGRHZ2dibThnY21WamRYSnlaVzVqWlNCallXNGdZbVVnYzJWdWRDNWNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QjBjblZsSUdsbUlITjFZMk5sWldSbFpDd2dabUZzYzJVZ2FXWWdjbVZxWldOMFpXUmNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nWlcxcGRGVkpTVzUwWlhKaFkzUnBiMjRvWkdWelkzSnBjSFJ2Y2pvZ2IySnFaV04wSUh3Z2MzUnlhVzVuS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NWZkMlZpVW5SalEyOXVkSEp2Ykd4bGNpNTJhV1JsYjFCc1lYbGxjaTVwYzFacFpHVnZVbVZoWkhrb0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM2RsWWxKMFkwTnZiblJ5YjJ4c1pYSXVaVzFwZEZWSlNXNTBaWEpoWTNScGIyNG9aR1Z6WTNKcGNIUnZjaWs3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTmxibVFnWVNCamIyMXRZVzVrSUhSdklGVkZJR0Z3Y0d4cFkyRjBhVzl1TGlCQ2JHOWphM01nUTI5dWMyOXNaVU52YlcxaGJtUWdaR1Z6WTNKcGNIUnZjbk1nZFc1c1pYTnpJRlZGWEc0Z0lDQWdJQ29nYUdGeklITnBaMjVoYkdWa0lIUm9ZWFFnYVhRZ1lXeHNiM2R6SUdOdmJuTnZiR1VnWTI5dGJXRnVaSE11WEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nZEhKMVpTQnBaaUJ6ZFdOalpXVmtaV1FzSUdaaGJITmxJR2xtSUhKbGFtVmpkR1ZrWEc0Z0lDQWdJQ292WEc0Z0lDQWdjSFZpYkdsaklHVnRhWFJEYjIxdFlXNWtLR1JsYzJOeWFYQjBiM0k2SUc5aWFtVmpkQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdVgzZGxZbEowWTBOdmJuUnliMnhzWlhJdWRtbGtaVzlRYkdGNVpYSXVhWE5XYVdSbGIxSmxZV1I1S0NrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11WVd4c2IzZERiMjV6YjJ4bFEyOXRiV0Z1WkhNZ0ppWWdKME52Ym5OdmJHVkRiMjF0WVc1a0p5QnBiaUJrWlhOamNtbHdkRzl5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmQyVmlVblJqUTI5dWRISnZiR3hsY2k1bGJXbDBRMjl0YldGdVpDaGtaWE5qY21sd2RHOXlLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVnVaQ0JoSUdOdmJuTnZiR1VnWTI5dGJXRnVaQ0IwYnlCVlJTQmhjSEJzYVdOaGRHbHZiaTRnVDI1c2VTQmhiR3h2ZDJWa0lHbG1JRlZGSUdoaGN5QnphV2R1WVd4bFpDQjBhR0YwSUdsMElHRnNiRzkzYzF4dUlDQWdJQ0FxSUdOdmJuTnZiR1VnWTI5dGJXRnVaSE11WEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nZEhKMVpTQnBaaUJ6ZFdOalpXVmtaV1FzSUdaaGJITmxJR2xtSUhKbGFtVmpkR1ZrWEc0Z0lDQWdJQ292WEc0Z0lDQWdjSFZpYkdsaklHVnRhWFJEYjI1emIyeGxRMjl0YldGdVpDaGpiMjF0WVc1a09pQnpkSEpwYm1jcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbUZzYkc5M1EyOXVjMjlzWlVOdmJXMWhibVJ6SUh4OElDRjBhR2x6TGw5M1pXSlNkR05EYjI1MGNtOXNiR1Z5TG5acFpHVnZVR3hoZVdWeUxtbHpWbWxrWlc5U1pXRmtlU2dwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmQyVmlVblJqUTI5dWRISnZiR3hsY2k1bGJXbDBRMjl1YzI5c1pVTnZiVzFoYm1Rb1kyOXRiV0Z1WkNrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUZrWkNCaElGVkZJQzArSUdKeWIzZHpaWElnY21WemNHOXVjMlVnWlhabGJuUWdiR2x6ZEdWdVpYSmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2JtRnRaU0F0SUZSb1pTQnVZVzFsSUc5bUlIUm9aU0J5WlhOd2IyNXpaU0JvWVc1a2JHVnlYRzRnSUNBZ0lDb2dRSEJoY21GdElHeHBjM1JsYm1WeUlDMGdWR2hsSUcxbGRHaHZaQ0IwYnlCaVpTQmhZM1JwZG1GMFpXUWdkMmhsYmlCaElHMWxjM05oWjJVZ2FYTWdjbVZqWldsMlpXUmNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nWVdSa1VtVnpjRzl1YzJWRmRtVnVkRXhwYzNSbGJtVnlLRnh1SUNBZ0lDQWdJQ0J1WVcxbE9pQnpkSEpwYm1jc1hHNGdJQ0FnSUNBZ0lHeHBjM1JsYm1WeU9pQW9jbVZ6Y0c5dWMyVTZJSE4wY21sdVp5a2dQVDRnZG05cFpGeHVJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5M1pXSlNkR05EYjI1MGNtOXNiR1Z5TG5KbGMzQnZibk5sUTI5dWRISnZiR3hsY2k1aFpHUlNaWE53YjI1elpVVjJaVzUwVEdsemRHVnVaWElvYm1GdFpTd2diR2x6ZEdWdVpYSXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRkpsYlc5MlpTQmhJRlZGSUMwK0lHSnliM2R6WlhJZ2NtVnpjRzl1YzJVZ1pYWmxiblFnYkdsemRHVnVaWEpjYmlBZ0lDQWdLaUJBY0dGeVlXMGdibUZ0WlNBdElGUm9aU0J1WVcxbElHOW1JSFJvWlNCeVpYTndiMjV6WlNCb1lXNWtiR1Z5WEc0Z0lDQWdJQ292WEc0Z0lDQWdjSFZpYkdsaklISmxiVzkyWlZKbGMzQnZibk5sUlhabGJuUk1hWE4wWlc1bGNpaHVZVzFsT2lCemRISnBibWNwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZDJWaVVuUmpRMjl1ZEhKdmJHeGxjaTV5WlhOd2IyNXpaVU52Ym5SeWIyeHNaWEl1Y21WdGIzWmxVbVZ6Y0c5dWMyVkZkbVZ1ZEV4cGMzUmxibVZ5S0c1aGJXVXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRVJwYzNCaGRHTm9JR0VnYm1WM0lHVjJaVzUwTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0JsSUdWMlpXNTBYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTmNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nWkdsemNHRjBZMmhGZG1WdWRDaGxPaUJRYVhobGJGTjBjbVZoYldsdVowVjJaVzUwS1RvZ1ltOXZiR1ZoYmlCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlsZG1WdWRFVnRhWFIwWlhJdVpHbHpjR0YwWTJoRmRtVnVkQ2hsS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVbVZuYVhOMFpYSWdZVzRnWlhabGJuUWdhR0Z1Wkd4bGNpNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2RIbHdaU0JsZG1WdWRDQnVZVzFsWEc0Z0lDQWdJQ29nUUhCaGNtRnRJR3hwYzNSbGJtVnlJR1YyWlc1MElHaGhibVJzWlhJZ1puVnVZM1JwYjI1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdZV1JrUlhabGJuUk1hWE4wWlc1bGNqeGNiaUFnSUNBZ0lDQWdWQ0JsZUhSbGJtUnpJRkJwZUdWc1UzUnlaV0Z0YVc1blJYWmxiblJiSjNSNWNHVW5YU3hjYmlBZ0lDQWdJQ0FnUlNCbGVIUmxibVJ6SUZCcGVHVnNVM1J5WldGdGFXNW5SWFpsYm5RZ0ppQjdJSFI1Y0dVNklGUWdmVnh1SUNBZ0lENG9kSGx3WlRvZ1ZDd2diR2x6ZEdWdVpYSTZJQ2hsT2lCRmRtVnVkQ0FtSUVVcElEMCtJSFp2YVdRcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlpYWmxiblJGYldsMGRHVnlMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9kSGx3WlN3Z2JHbHpkR1Z1WlhJcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGSmxiVzkyWlNCaGJpQmxkbVZ1ZENCb1lXNWtiR1Z5TGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0IwZVhCbElHVjJaVzUwSUc1aGJXVmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2JHbHpkR1Z1WlhJZ1pYWmxiblFnYUdGdVpHeGxjaUJtZFc1amRHbHZibHh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCeVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeVBGeHVJQ0FnSUNBZ0lDQlVJR1Y0ZEdWdVpITWdVR2w0Wld4VGRISmxZVzFwYm1kRmRtVnVkRnNuZEhsd1pTZGRMRnh1SUNBZ0lDQWdJQ0JGSUdWNGRHVnVaSE1nVUdsNFpXeFRkSEpsWVcxcGJtZEZkbVZ1ZENBbUlIc2dkSGx3WlRvZ1ZDQjlYRzRnSUNBZ1BpaDBlWEJsT2lCVUxDQnNhWE4wWlc1bGNqb2dLR1U2SUVWMlpXNTBJQ1lnUlNrZ1BUNGdkbTlwWkNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5bGRtVnVkRVZ0YVhSMFpYSXVjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWgwZVhCbExDQnNhWE4wWlc1bGNpazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSVzVoWW14bEwyUnBjMkZpYkdVZ1dGSWdiVzlrWlM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdkRzluWjJ4bFdGSW9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkMlZpV0hKRGIyNTBjbTlzYkdWeUxuaHlRMnhwWTJ0bFpDZ3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRkJoYzNNZ2FXNGdZU0JtZFc1amRHbHZiaUIwYnlCblpXNWxjbUYwWlNCaElITnBaMjVoYkd4cGJtY2djMlZ5ZG1WeUlGVlNUQzVjYmlBZ0lDQWdLaUJVYUdseklHWjFibU4wYVc5dUlHbHpJSFZ6WldaMWJDQnBaaUI1YjNVZ2JtVmxaQ0IwYnlCd2NtOW5jbUZ0YldGMGFXTmhiR3g1SUdOdmJuTjBjblZqZENCNWIzVnlJSE5wWjI1aGJHeHBibWNnYzJWeWRtVnlJRlZTVEM1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnYzJsbmJtRnNiR2x1WjFWeWJFSjFhV3hrWlhKR2RXNWpJRUVnWm5WdVkzUnBiMjRnZEdoaGRDQm5aVzVsY21GMFpYTWdZU0J6YVdkdVlXeHNhVzVuSUhObGNuWmxjaUIxY213dVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJSE5sZEZOcFoyNWhiR3hwYm1kVmNteENkV2xzWkdWeUtITnBaMjVoYkd4cGJtZFZjbXhDZFdsc1pHVnlSblZ1WXpvZ0tDazlQbk4wY21sdVp5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOTNaV0pTZEdORGIyNTBjbTlzYkdWeUxuTnBaMjVoYkd4cGJtZFZjbXhDZFdsc1pHVnlJRDBnYzJsbmJtRnNiR2x1WjFWeWJFSjFhV3hrWlhKR2RXNWpPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRkIxWW14cFl5Qm5aWFIwWlhJZ1ptOXlJSFJvWlNCM1pXSnpiMk5yWlhRZ1kyOXVkSEp2Ykd4bGNpNGdRV05qWlhOeklIUnZJSFJvYVhNZ2NISnZjR1Z5ZEhrZ1lXeHNiM2R6SUhsdmRTQjBieUJ6Wlc1a1hHNGdJQ0FnSUNvZ1kzVnpkRzl0SUhkbFluTnZZMnRsZENCdFpYTnpZV2RsY3k1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdaMlYwSUhkbFlsTnZZMnRsZEVOdmJuUnliMnhzWlhJb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5M1pXSlNkR05EYjI1MGNtOXNiR1Z5TG5kbFlsTnZZMnRsZEVOdmJuUnliMnhzWlhJN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1VIVmliR2xqSUdkbGRIUmxjaUJtYjNJZ2RHaGxJSGRsWWxoeVEyOXVkSEp2Ykd4bGNpQmpiMjUwY205c2JHVnlMaUJWYzJWa0lHWnZjaUJoYkd3Z1dGSWdabVZoZEhWeVpYTXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUdkbGRDQjNaV0pZY2tOdmJuUnliMnhzWlhJb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5M1pXSllja052Ym5SeWIyeHNaWEk3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjSFZpYkdsaklISmxaMmx6ZEdWeVRXVnpjMkZuWlVoaGJtUnNaWElvYm1GdFpUb2djM1J5YVc1bkxDQmthWEpsWTNScGIyNDZJRTFsYzNOaFoyVkVhWEpsWTNScGIyNHNJR2hoYm1Sc1pYSS9PaUFvWkdGMFlUb2dRWEp5WVhsQ2RXWm1aWElnZkNCQmNuSmhlVHh1ZFcxaVpYSWdmQ0J6ZEhKcGJtYytLU0E5UGlCMmIybGtLU0I3WEc0Z0lDQWdJQ0FnSUdsbUtHUnBjbVZqZEdsdmJpQTlQVDBnVFdWemMyRm5aVVJwY21WamRHbHZiaTVHY205dFUzUnlaV0Z0WlhJZ0ppWWdkSGx3Wlc5bUlHaGhibVJzWlhJZ1BUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVWMkZ5Ym1sdVp5aE1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTENCZ1ZXNWhZbXhsSUhSdklISmxaMmx6ZEdWeUlHRnVJSFZ1WkdWbWFXNWxaQ0JvWVc1a2JHVnlJR1p2Y2lBa2UyNWhiV1Y5WUNsY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdsbUtHUnBjbVZqZEdsdmJpQTlQVDBnVFdWemMyRm5aVVJwY21WamRHbHZiaTVVYjFOMGNtVmhiV1Z5SUNZbUlIUjVjR1Z2WmlCb1lXNWtiR1Z5SUQwOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmQyVmlVblJqUTI5dWRISnZiR3hsY2k1emRISmxZVzFOWlhOellXZGxRMjl1ZEhKdmJHeGxjaTV5WldkcGMzUmxjazFsYzNOaFoyVklZVzVrYkdWeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnBjbVZqZEdsdmJpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVZVzFsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNoa1lYUmhPaUJCY25KaGVUeHVkVzFpWlhJZ2ZDQnpkSEpwYm1jK0tTQTlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzZGxZbEowWTBOdmJuUnliMnhzWlhJdWMyVnVaRTFsYzNOaFoyVkRiMjUwY205c2JHVnlMbk5sYm1STlpYTnpZV2RsVkc5VGRISmxZVzFsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibUZ0WlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR0YwWVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5M1pXSlNkR05EYjI1MGNtOXNiR1Z5TG5OMGNtVmhiVTFsYzNOaFoyVkRiMjUwY205c2JHVnlMbkpsWjJsemRHVnlUV1Z6YzJGblpVaGhibVJzWlhJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHbHlaV04wYVc5dUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNWhiV1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS0dSaGRHRTZJRUZ5Y21GNVFuVm1abVZ5S1NBOVBpQm9ZVzVrYkdWeUtHUmhkR0VwWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjSFZpYkdsaklHZGxkQ0IwYjFOMGNtVmhiV1Z5U0dGdVpHeGxjbk1vS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDkzWldKU2RHTkRiMjUwY205c2JHVnlMbk4wY21WaGJVMWxjM05oWjJWRGIyNTBjbTlzYkdWeUxuUnZVM1J5WldGdFpYSklZVzVrYkdWeWN6dGNiaUFnSUNCOVhHNWNiaUFnSUNCd2RXSnNhV01nYVhOU1pXTnZibTVsWTNScGJtY29LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOTNaV0pTZEdORGIyNTBjbTlzYkdWeUxtbHpVbVZqYjI1dVpXTjBhVzVuTzF4dUlDQWdJSDFjYm4xY2JpSXNJaTh2SUVOdmNIbHlhV2RvZENCRmNHbGpJRWRoYldWekxDQkpibU11SUVGc2JDQlNhV2RvZEhNZ1VtVnpaWEoyWldRdVhHNWNibWx0Y0c5eWRDQjdJRlZ1Y1hWaGJuUnBlbVZrUkdWdWIzSnRZV3hwZW1Wa1ZXNXphV2R1WldSRGIyOXlaQ0I5SUdaeWIyMGdKeTR1TDFWMGFXd3ZRMjl2Y21ScGJtRjBaVU52Ym5abGNuUmxjaWM3WEc1cGJYQnZjblFnZXlCTlpYTnpZV2RsVDI1VFkzSmxaVzVMWlhsaWIyRnlaQ0I5SUdaeWIyMGdKeTR1TDFkbFlsTnZZMnRsZEhNdlRXVnpjMkZuWlZKbFkyVnBkbVVuTzF4dVhHNHZLaXBjYmlBcUlFTnNZWE56SUdadmNpQm9ZVzVrYkdsdVp5QnZiaUJ6WTNKbFpXNGdhMlY1WW05aGNtUWdkWE5oWjJWY2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklFOXVVMk55WldWdVMyVjVZbTloY21RZ2UxeHVJQ0FnSUM4dklFbG1JSFJvWlNCMWMyVnlJR1p2WTNWelpYTWdiMjRnWVNCVlJTQnBibkIxZENCM2FXUm5aWFFnZEdobGJpQjNaU0J6YUc5M0lIUm9aVzBnWVNCaWRYUjBiMjRnZEc4Z2IzQmxibHh1SUNBZ0lDOHZJSFJvWlNCdmJpMXpZM0psWlc0Z2EyVjVZbTloY21RdUlFcGhkbUZUWTNKcGNIUWdjMlZqZFhKcGRIa2diV1ZoYm5NZ2QyVWdZMkZ1SUc5dWJIa2djMmh2ZHlCMGFHVmNiaUFnSUNBdkx5QnZiaTF6WTNKbFpXNGdhMlY1WW05aGNtUWdhVzRnY21WemNHOXVjMlVnZEc4Z1lTQjFjMlZ5SUdsdWRHVnlZV04wYVc5dUxseHVJQ0FnSUdWa2FYUlVaWGgwUW5WMGRHOXVPaUJJVkUxTVFuVjBkRzl1Uld4bGJXVnVkRHRjYmx4dUlDQWdJQzh2SUVFZ2FHbGtaR1Z1SUdsdWNIVjBJSFJsZUhRZ1ltOTRJSGRvYVdOb0lHbHpJSFZ6WldRZ2IyNXNlU0JtYjNJZ1ptOWpkWE5wYm1jZ1lXNWtJRzl3Wlc1cGJtY2dkR2hsWEc0Z0lDQWdMeThnYjI0dGMyTnlaV1Z1SUd0bGVXSnZZWEprTGx4dUlDQWdJR2hwWkdSbGJrbHVjSFYwT2lCSVZFMU1TVzV3ZFhSRmJHVnRaVzUwTzF4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwSUZSb1pTQmthWFlnWld4bGJXVnVkQ0IwYUdVZ2RtbGtaVzhnY0d4aGVXVnlJR2x6SUdsdWFtVmpkR1ZrSUdsdWRHOWNiaUFnSUNBZ0tpOWNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaDJhV1JsYjBWc1pXMWxiblJRWVhKbGJuUTZJRWhVVFV4RmJHVnRaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WldScGRGUmxlSFJDZFhSMGIyNGdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1ocFpHUmxia2x1Y0hWMElEMGdiblZzYkR0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvSjI5dWRHOTFZMmh6ZEdGeWRDY2dhVzRnWkc5amRXMWxiblF1Wkc5amRXMWxiblJGYkdWdFpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OeVpXRjBaVTl1VTJOeVpXVnVTMlY1WW05aGNtUklaV3h3WlhKektIWnBaR1Z2Uld4bGJXVnVkRkJoY21WdWRDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJCYmlCdmRtVnljbWxrWlNCbWIzSWdkVzV4ZFdGdWRHbDZaVUZ1WkVSbGJtOXliV0ZzYVhwbFZXNXphV2R1WldSY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZUNCMGFHVWdlQ0JoZUdseklIQnZhVzUwWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSGtnZEdobElIa2dZWGhwY3lCd2IybHVkRnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJSFZ1Y1hWaGJuUnBlbVZCYm1SRVpXNXZjbTFoYkdsNlpWVnVjMmxuYm1Wa0lHOWlhbVZqZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMVzVsZUhRdGJHbHVaU0JBZEhsd1pYTmpjbWx3ZEMxbGMyeHBiblF2Ym04dGRXNTFjMlZrTFhaaGNuTmNiaUFnSUNCMWJuRjFZVzUwYVhwbFFXNWtSR1Z1YjNKdFlXeHBlbVZWYm5OcFoyNWxaQ2hjYmlBZ0lDQWdJQ0FnZURvZ2JuVnRZbVZ5TEZ4dUlDQWdJQ0FnSUNCNU9pQnVkVzFpWlhKY2JpQWdJQ0FwT2lCVmJuRjFZVzUwYVhwbFpFUmxibTl5YldGc2FYcGxaRlZ1YzJsbmJtVmtRMjl2Y21RZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJEY21WaGRHVnpJRzl1SUhOamNtVmxiaUJyWlhsaWIyRnlaQ0JvWld4d1pYSnpYRzRnSUNBZ0lDb2dRSEJoY21GdElIWnBaR1Z2Uld4bGJXVnVkRkJoY21WdWRDQlVhR1VnWkdsMklHVnNaVzFsYm5RZ2RHaGxJSFpwWkdWdklIQnNZWGxsY2lCcElHbHVhbVZqZEdWa0lHbHVkRzljYmlBZ0lDQWdLaTljYmlBZ0lDQmpjbVZoZEdWUGJsTmpjbVZsYmt0bGVXSnZZWEprU0dWc2NHVnljeWgyYVdSbGIwVnNaVzFsYm5SUVlYSmxiblE2SUVoVVRVeEZiR1Z0Wlc1MEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaGRHaHBjeTVvYVdSa1pXNUpibkIxZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NW9hV1JrWlc1SmJuQjFkQ0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KMmx1Y0hWMEp5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWhwWkdSbGJrbHVjSFYwTG1sa0lEMGdKMmhwWkdSbGJrbHVjSFYwSnp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFHbGtaR1Z1U1c1d2RYUXViV0Y0VEdWdVozUm9JRDBnTUR0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1UyVjBJR2x1YkdsdVpTQnpkSGxzWlNCemJ5QjBhR0YwSUhWelpYSnpJRzV2ZENCMWMybHVaeUIwYUdVZ1ZVa2diR2xpY21GeWVWeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2QybHNiQ0FnYzNScGJHd2dhR0YyWlNCMGFHbHpJR1ZzWlcxbGJuUWdaR2x6Y0d4aGVTQmpiM0p5WldOMGJIbGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVhR2xrWkdWdVNXNXdkWFF1YzNSNWJHVXVjRzl6YVhScGIyNGdQU0FuWVdKemIyeDFkR1VuTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1b2FXUmtaVzVKYm5CMWRDNXpkSGxzWlM1c1pXWjBJRDBnSnkweE1DVW5PMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVvYVdSa1pXNUpibkIxZEM1emRIbHNaUzUzYVdSMGFDQTlJQ2N3Y0hnbk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NW9hV1JrWlc1SmJuQjFkQzV6ZEhsc1pTNXZjR0ZqYVhSNUlEMGdKekFuTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyYVdSbGIwVnNaVzFsYm5SUVlYSmxiblF1WVhCd1pXNWtRMmhwYkdRb2RHaHBjeTVvYVdSa1pXNUpibkIxZENrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11WldScGRGUmxlSFJDZFhSMGIyNHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WldScGRGUmxlSFJDZFhSMGIyNGdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDZGlkWFIwYjI0bktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaV1JwZEZSbGVIUkNkWFIwYjI0dWFXUWdQU0FuWldScGRGUmxlSFJDZFhSMGIyNG5PMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVsWkdsMFZHVjRkRUoxZEhSdmJpNXBibTVsY2toVVRVd2dQU0FuWldScGRDQjBaWGgwSnp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpwWkdWdlJXeGxiV1Z1ZEZCaGNtVnVkQzVoY0hCbGJtUkRhR2xzWkNoMGFHbHpMbVZrYVhSVVpYaDBRblYwZEc5dUtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdTR2xrWlNCMGFHVWdKMlZrYVhRZ2RHVjRkQ2NnWW5WMGRHOXVMbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVsWkdsMFZHVjRkRUoxZEhSdmJpNXpkSGxzWlM1a2FYTndiR0Y1SUQwZ0oyNXZibVVuTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtVmthWFJVWlhoMFFuVjBkRzl1TG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjNSdmRXTm9aVzVrSnl3Z0tHVjJaVzUwT2lCRmRtVnVkQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRk5vYjNjZ2RHaGxJRzl1TFhOamNtVmxiaUJyWlhsaWIyRnlaQzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtaHBaR1JsYmtsdWNIVjBMbVp2WTNWektDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaWFpsYm5RdWNISmxkbVZ1ZEVSbFptRjFiSFFvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyaHZkM01nZEdobElHOXVJSE5qY21WbGJpQnJaWGxpYjJGeVpGeHVJQ0FnSUNBcUlFQndZWEpoYlNCamIyMXRZVzVrSUhSb1pTQmpiMjF0WVc1a0lISmxZMlZwZG1Wa0lIWnBZU0IwYUdVZ1pHRjBZU0JqYUdGdWJtVnNJR052Ym5SaGFXNXBibWNnYTJWNVltOWhjbVFnY0c5emFYUnBiMjV6WEc0Z0lDQWdJQ292WEc0Z0lDQWdjMmh2ZDA5dVUyTnlaV1Z1UzJWNVltOWhjbVFvWTI5dGJXRnVaRG9nVFdWemMyRm5aVTl1VTJOeVpXVnVTMlY1WW05aGNtUXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHTnZiVzFoYm1RdWMyaHZkMDl1VTJOeVpXVnVTMlY1WW05aGNtUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRk5vYjNjZ2RHaGxJQ2RsWkdsMElIUmxlSFFuSUdKMWRIUnZiaTVjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WldScGRGUmxlSFJDZFhSMGIyNHVjM1I1YkdVdVpHbHpjR3hoZVNBOUlDZGtaV1poZFd4MEp6dGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGQnNZV05sSUhSb1pTQW5aV1JwZENCMFpYaDBKeUJpZFhSMGIyNGdibVZoY2lCMGFHVWdWVVVnYVc1d2RYUWdkMmxrWjJWMExseHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdjRzl6SUQwZ2RHaHBjeTUxYm5GMVlXNTBhWHBsUVc1a1JHVnViM0p0WVd4cGVtVlZibk5wWjI1bFpDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjF0WVc1a0xuZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl0YldGdVpDNTVYRzRnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWxaR2wwVkdWNGRFSjFkSFJ2Ymk1emRIbHNaUzUwYjNBZ1BTQndiM011ZVM1MGIxTjBjbWx1WnlncElDc2dKM0I0Snp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpXUnBkRlJsZUhSQ2RYUjBiMjR1YzNSNWJHVXViR1ZtZENBOUlDaHdiM011ZUNBdElEUXdLUzUwYjFOMGNtbHVaeWdwSUNzZ0ozQjRKenRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRWhwWkdVZ2RHaGxJQ2RsWkdsMElIUmxlSFFuSUdKMWRIUnZiaTVjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WldScGRGUmxlSFJDZFhSMGIyNHVjM1I1YkdVdVpHbHpjR3hoZVNBOUlDZHViMjVsSnp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUVocFpHVWdkR2hsSUc5dUxYTmpjbVZsYmlCclpYbGliMkZ5WkM1Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFHbGtaR1Z1U1c1d2RYUXVZbXgxY2lncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVmVnh1SWl3aUx5OGdRMjl3ZVhKcFoyaDBJRVZ3YVdNZ1IyRnRaWE1zSUVsdVl5NGdRV3hzSUZKcFoyaDBjeUJTWlhObGNuWmxaQzVjYmx4dWFXMXdiM0owSUhzZ1RHOW5aMlZ5SUgwZ1puSnZiU0FuTGk0dlRHOW5aMlZ5TDB4dloyZGxjaWM3WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJTWlhOd2IyNXpaVU52Ym5SeWIyeHNaWElnZTF4dUlDQWdJSEpsYzNCdmJuTmxSWFpsYm5STWFYTjBaVzVsY25NNklFMWhjRHh6ZEhKcGJtY3NJQ2h5WlhOd2IyNXpaVG9nYzNSeWFXNW5LU0E5UGlCMmIybGtQaUE5SUc1bGR5Qk5ZWEFvS1R0Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFRmtaQ0JoSUhKbGMzQnZibk5sSUdWMlpXNTBJR3hwYzNSbGJtVnlJSFJ2SUhSb1pTQnlaWE53YjI1elpTQnRZWEJjYmlBZ0lDQWdLaUJBY0dGeVlXMGdibUZ0WlNBdElGUm9aU0J1WVcxbElHOW1JSFJvWlNCeVpYTndiMjV6WlZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0JzYVhOMFpXNWxjaUF0SUZSb1pTQnRaWFJvYjJRZ2RHOGdZbVVnWVdOMGFYWmhkR1ZrSUhkb1pXNGdkR2hsSUhKbGMzQnZibk5sSUdseklITmxiR1ZqZEdWa1hHNGdJQ0FnSUNvdlhHNGdJQ0FnWVdSa1VtVnpjRzl1YzJWRmRtVnVkRXhwYzNSbGJtVnlLRnh1SUNBZ0lDQWdJQ0J1WVcxbE9pQnpkSEpwYm1jc1hHNGdJQ0FnSUNBZ0lHeHBjM1JsYm1WeU9pQW9jbVZ6Y0c5dWMyVTZJSE4wY21sdVp5a2dQVDRnZG05cFpGeHVJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5KbGMzQnZibk5sUlhabGJuUk1hWE4wWlc1bGNuTXVjMlYwS0c1aGJXVXNJR3hwYzNSbGJtVnlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJTWlcxdmRtVWdZU0J5WlhOd2IyNXpaU0JsZG1WdWRDQnNhWE4wWlc1bGNpQjBieUIwYUdVZ2NtVnpjRzl1YzJVZ2JXRndYRzRnSUNBZ0lDb2dRSEJoY21GdElHNWhiV1VnTFNCVWFHVWdibUZ0WlNCdlppQjBhR1VnY21WemNHOXVjMlZjYmlBZ0lDQWdLaTljYmlBZ0lDQnlaVzF2ZG1WU1pYTndiMjV6WlVWMlpXNTBUR2x6ZEdWdVpYSW9ibUZ0WlRvZ2MzUnlhVzVuS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y21WemNHOXVjMlZGZG1WdWRFeHBjM1JsYm1WeWN5NWtaV3hsZEdVb2JtRnRaU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nU0dGdVpHeGxJR0VnY21WemNHOXVjMlVnZDJobGJpQnlaV05sYVhacGJtY2diMjVsSUdadmNtMGdkR2hsSUhOMGNtVmhiV1Z5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJRzFsYzNOaFoyVWdMU0JFWVhSaElISmxZMlZwZG1Wa0lHWnliMjBnZEdobElHUmhkR0VnWTJoaGJtNWxiQ0IzYVhSb0lIUm9aU0JqYjIxdFlXNWtJR2x1SUhGMVpYTjBhVzl1WEc0Z0lDQWdJQ292WEc0Z0lDQWdiMjVTWlhOd2IyNXpaU2h0WlhOellXZGxPaUJCY25KaGVVSjFabVpsY2lrZ2UxeHVJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRnh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGtkbGRGTjBZV05yVkhKaFkyVW9LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDZEVZWFJoUTJoaGJtNWxiRkpsWTJWcGRtVk5aWE56WVdkbFZIbHdaUzVTWlhOd2IyNXpaU2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQTJYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSEpsYzNCdmJuTmxjeUE5SUc1bGR5QlVaWGgwUkdWamIyUmxjaWduZFhSbUxURTJKeWt1WkdWamIyUmxLRzFsYzNOaFoyVXVjMnhwWTJVb01Ta3BPMXh1WEc0Z0lDQWdJQ0FnSUV4dloyZGxjaTVNYjJjb1RHOW5aMlZ5TGtkbGRGTjBZV05yVkhKaFkyVW9LU3dnY21WemNHOXVjMlZ6TENBMktUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1eVpYTndiMjV6WlVWMlpXNTBUR2x6ZEdWdVpYSnpMbVp2Y2tWaFkyZ29YRzRnSUNBZ0lDQWdJQ0FnSUNBb2JHbHpkR1Z1WlhJNklDaHlaWE53YjI1elpUb2djM1J5YVc1bktTQTlQaUIyYjJsa0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdsemRHVnVaWElvY21WemNHOXVjMlZ6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0I5WEc1OVhHNGlMQ0l2THlCRGIzQjVjbWxuYUhRZ1JYQnBZeUJIWVcxbGN5d2dTVzVqTGlCQmJHd2dVbWxuYUhSeklGSmxjMlZ5ZG1Wa0xseHVYRzVwYlhCdmNuUWdleUJFWVhSaFEyaGhibTVsYkZObGJtUmxjaUI5SUdaeWIyMGdKeTR1TDBSaGRHRkRhR0Z1Ym1Wc0wwUmhkR0ZEYUdGdWJtVnNVMlZ1WkdWeUp6dGNibWx0Y0c5eWRDQjdJRXh2WjJkbGNpQjlJR1p5YjIwZ0p5NHVMMHh2WjJkbGNpOU1iMmRuWlhJbk8xeHVhVzF3YjNKMElIc2dVM1J5WldGdFRXVnpjMkZuWlVOdmJuUnliMnhzWlhJZ2ZTQm1jbTl0SUNjdUwxTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5Snp0Y2JseHVaWGh3YjNKMElHTnNZWE56SUZObGJtUk5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpQjdYRzRnSUNBZ2RHOVRkSEpsWVcxbGNrMWxjM05oWjJWelRXRndVSEp2ZG1sa1pYSTZJRk4wY21WaGJVMWxjM05oWjJWRGIyNTBjbTlzYkdWeU8xeHVJQ0FnSUdSaGRHRkRhR0Z1Ym1Wc1UyVnVaR1Z5T2lCRVlYUmhRMmhoYm01bGJGTmxibVJsY2p0Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndZWEpoYlNCa1lYUmhRMmhoYm01bGJGTmxibVJsY2lBdElFUmhkR0VnWTJoaGJtNWxiQ0JwYm5OMFlXNWpaVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjBiMU4wY21WaGJXVnlUV1Z6YzJGblpYTk5ZWEJRY205MmFXUmxjaUF0SUZOMGNtVmhiU0JOWlhOellXZGxjeUJwYm5OMFlXNWpaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLRnh1SUNBZ0lDQWdJQ0JrWVhSaFEyaGhibTVsYkZObGJtUmxjam9nUkdGMFlVTm9ZVzV1Wld4VFpXNWtaWElzWEc0Z0lDQWdJQ0FnSUhSdlUzUnlaV0Z0WlhKTlpYTnpZV2RsYzAxaGNGQnliM1pwWkdWeU9pQlRkSEpsWVcxTlpYTnpZV2RsUTI5dWRISnZiR3hsY2x4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbVJoZEdGRGFHRnVibVZzVTJWdVpHVnlJRDBnWkdGMFlVTm9ZVzV1Wld4VFpXNWtaWEk3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkRzlUZEhKbFlXMWxjazFsYzNOaFoyVnpUV0Z3VUhKdmRtbGtaWElnUFNCMGIxTjBjbVZoYldWeVRXVnpjMkZuWlhOTllYQlFjbTkyYVdSbGNqdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaVzVrSUdFZ2JXVnpjMkZuWlNCMGJ5QjBhR1VnYzNSeVpXRnRaWElnZEdoeWIzVm5hQ0IwYUdVZ1pHRjBZU0JqYUdGdWJtVnNYRzRnSUNBZ0lDb2dRSEJoY21GdElHMWxjM05oWjJWVWVYQmxJQzBnZEdobElIUjVjR1VnYjJZZ2JXVnpjMkZuWlNCM1pTQmhjbVVnYzJWdVpHbHVaMXh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnRaWE56WVdkbFJHRjBZU0F0SUhSb1pTQnRaWE56WVdkbElHUmhkR0VnZDJVZ1lYSmxJSE5sYm1ScGJtY2diM1psY2lCMGFHVWdaR0YwWVNCamFHRnVibVZzWEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nTFNCdWFXeGNiaUFnSUNBZ0tpOWNiaUFnSUNCelpXNWtUV1Z6YzJGblpWUnZVM1J5WldGdFpYSW9iV1Z6YzJGblpWUjVjR1U2SUhOMGNtbHVaeXdnYldWemMyRm5aVVJoZEdFL09pQkJjbkpoZVR4dWRXMWlaWElnZkNCemRISnBibWMrS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h0WlhOellXZGxSR0YwWVNBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbFJHRjBZU0E5SUZ0ZE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkRzlUZEhKbFlXMWxjazFsYzNOaFoyVnpJRDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZEc5VGRISmxZVzFsY2sxbGMzTmhaMlZ6VFdGd1VISnZkbWxrWlhJdWRHOVRkSEpsWVcxbGNrMWxjM05oWjJWek8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdFpYTnpZV2RsUm05eWJXRjBJRDBnZEc5VGRISmxZVzFsY2sxbGMzTmhaMlZ6TG1kbGRDaHRaWE56WVdkbFZIbHdaU2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaHRaWE56WVdkbFJtOXliV0YwSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1RmNuSnZjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHQkJkSFJsYlhCMFpXUWdkRzhnYzJWdVpDQmhJRzFsYzNOaFoyVWdkRzhnZEdobElITjBjbVZoYldWeUlIZHBkR2dnYldWemMyRm5aU0IwZVhCbE9pQWtlMjFsYzNOaFoyVlVlWEJsZlN3Z1luVjBJSFJvWlNCbWNtOXVkR1Z1WkNCb1lYTnVKM1FnWW1WbGJpQmpiMjVtYVdkMWNtVmtJSFJ2SUhObGJtUWdjM1ZqYUNCaElHMWxjM05oWjJVdUlFTm9aV05ySUhsdmRTZDJaU0JoWkdSbFpDQjBhR1VnYldWemMyRm5aU0IwZVhCbElHbHVJSGx2ZFhJZ1kzQndZRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHbG1LRzFsYzNOaFoyVkdiM0p0WVhRdWMzUnlkV04wZFhKbElDWW1JRzFsYzNOaFoyVkVZWFJoSUNZbUlHMWxjM05oWjJWR2IzSnRZWFF1YzNSeWRXTjBkWEpsTG14bGJtZDBhQ0FoUFQwZ2JXVnpjMkZuWlVSaGRHRXViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1UlhKeWIzSW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZ1VISnZkbWxrWldRZ2JXVnpjMkZuWlNCa1lYUmhJR1J2WlhOdUozUWdiV0YwWTJnZ1pYaHdaV04wWldRZ2JHRjViM1YwTGlCRmVIQmxZM1JsWkNCYklDUjdiV1Z6YzJGblpVWnZjbTFoZEM1emRISjFZM1IxY21VdWJXRndLQ2hsYkdWdFpXNTBPaUJ6ZEhKcGJtY3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM2RwZEdOb0lDaGxiR1Z0Wlc1MEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkMWFXNTBPQ2M2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZDFhVzUwTVRZbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FuYVc1ME1UWW5PbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBblpteHZZWFFuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQW5aRzkxWW14bEp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdKMjUxYldKbGNpYzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkemRISnBibWNuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBbmMzUnlhVzVuSnp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTG5SdlUzUnlhVzVuS0NrZ2ZTQmRJR0oxZENCeVpXTmxhWFpsWkNCYklDUjdiV1Z6YzJGblpVUmhkR0V1YldGd0tDaGxiR1Z0Wlc1ME9pQnVkVzFpWlhJZ2ZDQnpkSEpwYm1jcElEMCtJSFI1Y0dWdlppQmxiR1Z0Wlc1MEtTNTBiMU4wY21sdVp5Z3BmU0JkWUZ4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR3hsZENCaWVYUmxUR1Z1WjNSb0lEMGdNRHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkR1Y0ZEVWdVkyOWtaWElnUFNCdVpYY2dWR1Y0ZEVWdVkyOWtaWElvS1R0Y2JpQWdJQ0FnSUNBZ0x5OGdUMjVsSUd4dmIzQWdkRzhnWTJGc1kzVnNZWFJsSUhSb1pTQnNaVzVuZEdnZ2FXNGdZbmwwWlhNZ2IyWWdZV3hzSUc5bUlIUm9aU0J3Y205MmFXUmxaQ0JrWVhSaFhHNGdJQ0FnSUNBZ0lHMWxjM05oWjJWRVlYUmhMbVp2Y2tWaFkyZ29LR1ZzWlcxbGJuUTZJRzUxYldKbGNpQjhJSE4wY21sdVp5d2dhV1I0T2lCdWRXMWlaWElwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSFI1Y0dVZ1BTQnRaWE56WVdkbFJtOXliV0YwTG5OMGNuVmpkSFZ5WlZ0cFpIaGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MzZHBkR05vSUNoMGVYQmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQW5kV2x1ZERnbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpZVhSbFRHVnVaM1JvSUNzOUlERTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQW5kV2x1ZERFMkp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5sMFpVeGxibWQwYUNBclBTQXlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKMmx1ZERFMkp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5sMFpVeGxibWQwYUNBclBTQXlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKMlpzYjJGMEp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5sMFpVeGxibWQwYUNBclBTQTBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKMlJ2ZFdKc1pTYzZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKNWRHVk1aVzVuZEdnZ0t6MGdPRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2R6ZEhKcGJtY25PbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QXlJR0o1ZEdWeklHWnZjaUJ6ZEhKcGJtY2diR1Z1WjNSb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0o1ZEdWTVpXNW5kR2dnS3owZ01qdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z01pQmllWFJsY3lCd1pYSWdZMmhoY21GamRHVnljMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWVYUmxUR1Z1WjNSb0lDczlJRElnS2lCMFpYaDBSVzVqYjJSbGNpNWxibU52WkdVb1pXeGxiV1Z1ZENCaGN5QnpkSEpwYm1jcExteGxibWQwYUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQWdJR052Ym5OMElHUmhkR0VnUFNCdVpYY2dSR0YwWVZacFpYY29ibVYzSUVGeWNtRjVRblZtWm1WeUtHSjVkR1ZNWlc1bmRHZ2dLeUF4S1NrN1hHNGdJQ0FnSUNBZ0lHUmhkR0V1YzJWMFZXbHVkRGdvTUN3Z2JXVnpjMkZuWlVadmNtMWhkQzVwWkNrN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JpZVhSbFQyWm1jMlYwSUQwZ01UdGNibHh1SUNBZ0lDQWdJQ0J0WlhOellXZGxSR0YwWVM1bWIzSkZZV05vS0NobGJHVnRaVzUwT2lCdWRXMWlaWElnZkNCemRISnBibWNzSUdsa2VEb2diblZ0WW1WeUtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCMGVYQmxJRDBnYldWemMyRm5aVVp2Y20xaGRDNXpkSEoxWTNSMWNtVmJhV1I0WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE4zYVhSamFDQW9kSGx3WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSjNWcGJuUTRKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZUzV6WlhSVmFXNTBPQ2hpZVhSbFQyWm1jMlYwTENCbGJHVnRaVzUwSUdGeklHNTFiV0psY2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0o1ZEdWUFptWnpaWFFnS3owZ01UdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZDFhVzUwTVRZbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaExuTmxkRlZwYm5ReE5paGllWFJsVDJabWMyVjBMQ0JsYkdWdFpXNTBJR0Z6SUc1MWJXSmxjaXdnZEhKMVpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKNWRHVlBabVp6WlhRZ0t6MGdNanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2RwYm5ReE5pYzZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRXVjMlYwU1c1ME1UWW9ZbmwwWlU5bVpuTmxkQ3dnWld4bGJXVnVkQ0JoY3lCdWRXMWlaWElzSUhSeWRXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWVYUmxUMlptYzJWMElDczlJREk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FuWm14dllYUW5PbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhMbk5sZEVac2IyRjBNeklvWW5sMFpVOW1abk5sZEN3Z1pXeGxiV1Z1ZENCaGN5QnVkVzFpWlhJc0lIUnlkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmllWFJsVDJabWMyVjBJQ3M5SURRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBblpHOTFZbXhsSnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR0YwWVM1elpYUkdiRzloZERZMEtHSjVkR1ZQWm1aelpYUXNJR1ZzWlcxbGJuUWdZWE1nYm5WdFltVnlMQ0IwY25WbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5sMFpVOW1abk5sZENBclBTQTRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKM04wY21sdVp5YzZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRXVjMlYwVldsdWRERTJLR0o1ZEdWUFptWnpaWFFzSUNobGJHVnRaVzUwSUdGeklITjBjbWx1WnlrdWJHVnVaM1JvTENCMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lubDBaVTltWm5ObGRDQXJQU0F5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJQ2hsYkdWdFpXNTBJR0Z6SUhOMGNtbHVaeWt1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0V1YzJWMFZXbHVkREUyS0dKNWRHVlBabVp6WlhRc0lDaGxiR1Z0Wlc1MElHRnpJSE4wY21sdVp5a3VZMmhoY2tOdlpHVkJkQ2hwS1N3Z2RISjFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpZVhSbFQyWm1jMlYwSUNzOUlESTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNnaGRHaHBjeTVrWVhSaFEyaGhibTVsYkZObGJtUmxjaTVqWVc1VFpXNWtLQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUpibVp2S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZRVJoZEdFZ1kyaGhibTVsYkNCallXNXViM1FnYzJWdVpDQjVaWFFzSUhOcmFYQndhVzVuSUhObGJtUnBibWNnYldWemMyRm5aVG9nSkh0dFpYTnpZV2RsVkhsd1pYMGdMU0FrZTI1bGR5QlZhVzUwT0VGeWNtRjVLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhMbUoxWm1abGNseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDbDlZRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WkdGMFlVTm9ZVzV1Wld4VFpXNWtaWEl1YzJWdVpFUmhkR0VvWkdGMFlTNWlkV1ptWlhJcE8xeHVJQ0FnSUgxY2JuMWNiaUlzSWk4dklFTnZjSGx5YVdkb2RDQkZjR2xqSUVkaGJXVnpMQ0JKYm1NdUlFRnNiQ0JTYVdkb2RITWdVbVZ6WlhKMlpXUXVYRzVjYm1sdGNHOXlkQ0I3SUV4dloyZGxjaUI5SUdaeWIyMGdKeTR1TDB4dloyZGxjaTlNYjJkblpYSW5PMXh1WEc1bGVIQnZjblFnWTJ4aGMzTWdWRzlUZEhKbFlXMWxjazFsYzNOaFoyVWdlMXh1SUNBZ0lHbGtPaUJ1ZFcxaVpYSTdYRzRnSUNBZ2MzUnlkV04wZFhKbFB6b2dRWEp5WVhrOGMzUnlhVzVuUGp0Y2JuMWNibHh1Wlhod2IzSjBJR05zWVhOeklGTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5SUh0Y2JpQWdJQ0IwYjFOMGNtVmhiV1Z5U0dGdVpHeGxjbk02SUUxaGNEeGNiaUFnSUNBZ0lDQWdjM1J5YVc1bkxGeHVJQ0FnSUNBZ0lDQW9iV1Z6YzJGblpVUmhkR0UvT2lCQmNuSmhlVHh1ZFcxaVpYSWdmQ0J6ZEhKcGJtYytJSHdnZFc1a1pXWnBibVZrS1NBOVBpQjJiMmxrWEc0Z0lDQWdQanRjYmlBZ0lDQm1jbTl0VTNSeVpXRnRaWEpJWVc1a2JHVnljem9nVFdGd1BGeHVJQ0FnSUNBZ0lDQnpkSEpwYm1jc1hHNGdJQ0FnSUNBZ0lDaHRaWE56WVdkbFZIbHdaVG9nYzNSeWFXNW5MQ0J0WlhOellXZGxSR0YwWVQ4NklFRnljbUY1UW5WbVptVnlJSHdnZFc1a1pXWnBibVZrS1NBOVBpQjJiMmxrWEc0Z0lDQWdQanRjYmlBZ0lDQXZMeUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGUjVjR1VnSUNBZ0lDQkdiM0p0WVhSY2JpQWdJQ0IwYjFOMGNtVmhiV1Z5VFdWemMyRm5aWE02SUUxaGNEeHpkSEpwYm1jc0lGUnZVM1J5WldGdFpYSk5aWE56WVdkbFBqdGNiaUFnSUNBdkx5QWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCSlJDQWdJQ0FnSUZSNWNHVmNiaUFnSUNCbWNtOXRVM1J5WldGdFpYSk5aWE56WVdkbGN6b2dUV0Z3UEc1MWJXSmxjaXdnYzNSeWFXNW5QanRjYmx4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5SdlUzUnlaV0Z0WlhKSVlXNWtiR1Z5Y3lBOUlHNWxkeUJOWVhBb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bWNtOXRVM1J5WldGdFpYSklZVzVrYkdWeWN5QTlJRzVsZHlCTllYQW9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTBiMU4wY21WaGJXVnlUV1Z6YzJGblpYTWdQU0J1WlhjZ1RXRndLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVabkp2YlZOMGNtVmhiV1Z5VFdWemMyRm5aWE1nUFNCdVpYY2dUV0Z3S0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1VHOXdkV3hoZEdVZ2RHaGxJRVJsWm1GMWJIUWdiV1Z6YzJGblpTQndjbTkwYjJOdmJGeHVJQ0FnSUNBcUwxeHVJQ0FnSUhCdmNIVnNZWFJsUkdWbVlYVnNkRkJ5YjNSdlkyOXNLQ2tnZTF4dUlDQWdJQ0FnSUNBdktseHVJQ0FnSUNBZ0lDQWdLaUJEYjI1MGNtOXNJRTFsYzNOaFoyVnpMaUJTWVc1blpTQTlJREF1TGpRNUxseHVJQ0FnSUNBZ0lDQWdLaTljYmlBZ0lDQWdJQ0FnZEdocGN5NTBiMU4wY21WaGJXVnlUV1Z6YzJGblpYTXVjMlYwS0NkSlJuSmhiV1ZTWlhGMVpYTjBKeXdnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1E2SURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZEhKMVkzUjFjbVU2SUZ0ZFhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuUnZVM1J5WldGdFpYSk5aWE56WVdkbGN5NXpaWFFvSjFKbGNYVmxjM1JSZFdGc2FYUjVRMjl1ZEhKdmJDY3NJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbGtPaUF4TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjM1J5ZFdOMGRYSmxPaUJiWFZ4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MGIxTjBjbVZoYldWeVRXVnpjMkZuWlhNdWMyVjBLQ2RHY0hOU1pYRjFaWE4wSnl3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdRNklESXNYRzRnSUNBZ0lDQWdJQ0FnSUNCemRISjFZM1IxY21VNklGdGRYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMblJ2VTNSeVpXRnRaWEpOWlhOellXZGxjeTV6WlhRb0owRjJaWEpoWjJWQ2FYUnlZWFJsVW1WeGRXVnpkQ2NzSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xrT2lBekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNSeWRXTjBkWEpsT2lCYlhWeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTBiMU4wY21WaGJXVnlUV1Z6YzJGblpYTXVjMlYwS0NkVGRHRnlkRk4wY21WaGJXbHVaeWNzSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xrT2lBMExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNSeWRXTjBkWEpsT2lCYlhWeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTBiMU4wY21WaGJXVnlUV1Z6YzJGblpYTXVjMlYwS0NkVGRHOXdVM1J5WldGdGFXNW5KeXdnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1E2SURVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZEhKMVkzUjFjbVU2SUZ0ZFhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuUnZVM1J5WldGdFpYSk5aWE56WVdkbGN5NXpaWFFvSjB4aGRHVnVZM2xVWlhOMEp5d2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXUTZJRFlzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkSEoxWTNSMWNtVTZJRnNuYzNSeWFXNW5KMTFjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZEc5VGRISmxZVzFsY2sxbGMzTmhaMlZ6TG5ObGRDZ25VbVZ4ZFdWemRFbHVhWFJwWVd4VFpYUjBhVzVuY3ljc0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsa09pQTNMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MzUnlkV04wZFhKbE9pQmJYVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUwYjFOMGNtVmhiV1Z5VFdWemMyRm5aWE11YzJWMEtDZFVaWE4wUldOb2J5Y3NJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbGtPaUE0TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjM1J5ZFdOMGRYSmxPaUJiWFZ4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MGIxTjBjbVZoYldWeVRXVnpjMkZuWlhNdWMyVjBLQ2RFWVhSaFEyaGhibTVsYkV4aGRHVnVZM2xVWlhOMEp5d2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXUTZJRGtzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkSEoxWTNSMWNtVTZJRnRkWEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQXZLbHh1SUNBZ0lDQWdJQ0FnS2lCSmJuQjFkQ0JOWlhOellXZGxjeTRnVW1GdVoyVWdQU0ExTUM0dU9Ea3VYRzRnSUNBZ0lDQWdJQ0FxTDF4dUlDQWdJQ0FnSUNBdkx5QkhaVzVsY21saklFbHVjSFYwSUUxbGMzTmhaMlZ6TGlCU1lXNW5aU0E5SURVd0xpNDFPUzVjYmlBZ0lDQWdJQ0FnZEdocGN5NTBiMU4wY21WaGJXVnlUV1Z6YzJGblpYTXVjMlYwS0NkVlNVbHVkR1Z5WVdOMGFXOXVKeXdnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1E2SURVd0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNSeWRXTjBkWEpsT2lCYkozTjBjbWx1WnlkZFhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuUnZVM1J5WldGdFpYSk5aWE56WVdkbGN5NXpaWFFvSjBOdmJXMWhibVFuTENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWkRvZ05URXNYRzRnSUNBZ0lDQWdJQ0FnSUNCemRISjFZM1IxY21VNklGc25jM1J5YVc1bkoxMWNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUM4dklFdGxlV0p2WVhKa0lFbHVjSFYwSUUxbGMzTmhaMlV1SUZKaGJtZGxJRDBnTmpBdUxqWTVMbHh1SUNBZ0lDQWdJQ0IwYUdsekxuUnZVM1J5WldGdFpYSk5aWE56WVdkbGN5NXpaWFFvSjB0bGVVUnZkMjRuTENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWkRvZ05qQXNYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QWdJQ0FnSUNBZ0lDQWdJR3RsZVVOdlpHVWdJR2x6VW1Wd1pXRjBYRzRnSUNBZ0lDQWdJQ0FnSUNCemRISjFZM1IxY21VNklGc25kV2x1ZERnbkxDQW5kV2x1ZERnblhWeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTBiMU4wY21WaGJXVnlUV1Z6YzJGblpYTXVjMlYwS0NkTFpYbFZjQ2NzSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xrT2lBMk1TeGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklDQWdJQ0FnSUNBZ0lDQWdhMlY1UTI5a1pWeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNSeWRXTjBkWEpsT2lCYkozVnBiblE0SjExY2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRHOVRkSEpsWVcxbGNrMWxjM05oWjJWekxuTmxkQ2duUzJWNVVISmxjM01uTENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWkRvZ05qSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QWdJQ0FnSUNBZ0lDQWdJR05vWVhKamIyUmxYRzRnSUNBZ0lDQWdJQ0FnSUNCemRISjFZM1IxY21VNklGc25kV2x1ZERFMkoxMWNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUM4dklFMXZkWE5sSUVsdWNIVjBJRTFsYzNOaFoyVnpMaUJTWVc1blpTQTlJRGN3TGk0M09TNWNiaUFnSUNBZ0lDQWdkR2hwY3k1MGIxTjBjbVZoYldWeVRXVnpjMkZuWlhNdWMyVjBLQ2ROYjNWelpVVnVkR1Z5Snl3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdRNklEY3dMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MzUnlkV04wZFhKbE9pQmJYVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUwYjFOMGNtVmhiV1Z5VFdWemMyRm5aWE11YzJWMEtDZE5iM1Z6WlV4bFlYWmxKeXdnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1E2SURjeExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNSeWRXTjBkWEpsT2lCYlhWeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTBiMU4wY21WaGJXVnlUV1Z6YzJGblpYTXVjMlYwS0NkTmIzVnpaVVJ2ZDI0bkxDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFpEb2dOeklzWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUFnSUNBZ0lDQWdJQ0FnSUNBZ1luVjBkRzl1SUNBZ0lDQjRJQ0FnSUNBZ0lDQWdlVnh1SUNBZ0lDQWdJQ0FnSUNBZ2MzUnlkV04wZFhKbE9pQmJKM1ZwYm5RNEp5d2dKM1ZwYm5ReE5pY3NJQ2QxYVc1ME1UWW5YVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUwYjFOMGNtVmhiV1Z5VFdWemMyRm5aWE11YzJWMEtDZE5iM1Z6WlZWd0p5d2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXUTZJRGN6TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnSUNBZ0lDQWdJQ0FnSUNBZ0lHSjFkSFJ2YmlBZ0lDQWdlQ0FnSUNBZ0lDQWdJSGxjYmlBZ0lDQWdJQ0FnSUNBZ0lITjBjblZqZEhWeVpUb2dXeWQxYVc1ME9DY3NJQ2QxYVc1ME1UWW5MQ0FuZFdsdWRERTJKMTFjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZEc5VGRISmxZVzFsY2sxbGMzTmhaMlZ6TG5ObGRDZ25UVzkxYzJWTmIzWmxKeXdnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1E2SURjMExGeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z0lDQWdJQ0FnSUNBZ0lDQWdJSGdnSUNBZ0lDQWdJQ0FnSUhrZ0lDQWdJQ0JrWld4MFlWZ2dJQ0FnWkdWc2RHRlpYRzRnSUNBZ0lDQWdJQ0FnSUNCemRISjFZM1IxY21VNklGc25kV2x1ZERFMkp5d2dKM1ZwYm5ReE5pY3NJQ2RwYm5ReE5pY3NJQ2RwYm5ReE5pZGRYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMblJ2VTNSeVpXRnRaWEpOWlhOellXZGxjeTV6WlhRb0owMXZkWE5sVjJobFpXd25MQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaRG9nTnpVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZzZEdFZ0lDQWdJQ0FnZUNBZ0lDQWdJQ0FnZVZ4dUlDQWdJQ0FnSUNBZ0lDQWdjM1J5ZFdOMGRYSmxPaUJiSjJsdWRERTJKeXdnSjNWcGJuUXhOaWNzSUNkMWFXNTBNVFluWFZ4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MGIxTjBjbVZoYldWeVRXVnpjMkZuWlhNdWMyVjBLQ2ROYjNWelpVUnZkV0pzWlNjc0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsa09pQTNOaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWRYUjBiMjRnSUNBZ0lIZ2dJQ0FnSUNBZ0lDQjVYRzRnSUNBZ0lDQWdJQ0FnSUNCemRISjFZM1IxY21VNklGc25kV2x1ZERnbkxDQW5kV2x1ZERFMkp5d2dKM1ZwYm5ReE5pZGRYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBdkx5QlViM1ZqYUNCSmJuQjFkQ0JOWlhOellXZGxjeTRnVW1GdVoyVWdQU0E0TUM0dU9Ea3VYRzRnSUNBZ0lDQWdJSFJvYVhNdWRHOVRkSEpsWVcxbGNrMWxjM05oWjJWekxuTmxkQ2duVkc5MVkyaFRkR0Z5ZENjc0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsa09pQTRNQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJQ0FnSUNBZ0lDQWdJRzUxYlhSdmRXTm9aWE1vTVNrZ0lDQjRJQ0FnSUNBZ0lIa2dJQ0FnSUNBZ0lHbGtlQ0FnSUNBZ1ptOXlZMlVnSUNBZ0lIWmhiR2xrWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkSEoxWTNSMWNtVTZJRnNuZFdsdWREZ25MQ0FuZFdsdWRERTJKeXdnSjNWcGJuUXhOaWNzSUNkMWFXNTBPQ2NzSUNkMWFXNTBPQ2NzSUNkMWFXNTBPQ2RkWEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5SdlUzUnlaV0Z0WlhKTlpYTnpZV2RsY3k1elpYUW9KMVJ2ZFdOb1JXNWtKeXdnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1E2SURneExGeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z0lDQWdJQ0FnSUNBZ2JuVnRkRzkxWTJobGN5Z3hLU0FnSUhnZ0lDQWdJQ0FnZVNBZ0lDQWdJQ0FnYVdSNElDQWdJQ0JtYjNKalpTQWdJQ0FnZG1Gc2FXUmNiaUFnSUNBZ0lDQWdJQ0FnSUhOMGNuVmpkSFZ5WlRvZ1d5ZDFhVzUwT0Njc0lDZDFhVzUwTVRZbkxDQW5kV2x1ZERFMkp5d2dKM1ZwYm5RNEp5d2dKM1ZwYm5RNEp5d2dKM1ZwYm5RNEoxMWNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkRzlUZEhKbFlXMWxjazFsYzNOaFoyVnpMbk5sZENnblZHOTFZMmhOYjNabEp5d2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXUTZJRGd5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnSUNBZ0lDQWdJQ0FnYm5WdGRHOTFZMmhsY3lneEtTQWdJSGdnSUNBZ0lDQWdlU0FnSUNBZ0lDQnBaSGdnSUNBZ0lDQm1iM0pqWlNBZ0lDQWdkbUZzYVdSY2JpQWdJQ0FnSUNBZ0lDQWdJSE4wY25WamRIVnlaVG9nV3lkMWFXNTBPQ2NzSUNkMWFXNTBNVFluTENBbmRXbHVkREUySnl3Z0ozVnBiblE0Snl3Z0ozVnBiblE0Snl3Z0ozVnBiblE0SjExY2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQzh2SUVkaGJXVndZV1FnU1c1d2RYUWdUV1Z6YzJGblpYTXVJRkpoYm1kbElEMGdPVEF1TGprNVhHNGdJQ0FnSUNBZ0lIUm9hWE11ZEc5VGRISmxZVzFsY2sxbGMzTmhaMlZ6TG5ObGRDZ25SMkZ0WlhCaFpFTnZibTVsWTNSbFpDY3NJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbGtPaUE1TXl4Y2JpQWdJQ0FnSUNBZ0lDQWdJSE4wY25WamRIVnlaVG9nVzExY2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRHOVRkSEpsWVcxbGNrMWxjM05oWjJWekxuTmxkQ2duUjJGdFpYQmhaRUoxZEhSdmJsQnlaWE56WldRbkxDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFpEb2dPVEFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUFnSUNBZ0lDQWdJR04wY214bGNrbGtJQ0FnWW5WMGRHOXVJQ0JwYzFKbGNHVmhkRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MzUnlkV04wZFhKbE9pQmJKM1ZwYm5RNEp5d2dKM1ZwYm5RNEp5d2dKM1ZwYm5RNEoxMWNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkRzlUZEhKbFlXMWxjazFsYzNOaFoyVnpMbk5sZENnblIyRnRaWEJoWkVKMWRIUnZibEpsYkdWaGMyVmtKeXdnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1E2SURreExGeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z0lDQWdJQ0FnSUNCamRISnNaWEpKWkNBZ0lHSjFkSFJ2YmlBZ2FYTlNaWEJsWVhRb01DbGNiaUFnSUNBZ0lDQWdJQ0FnSUhOMGNuVmpkSFZ5WlRvZ1d5ZDFhVzUwT0Njc0lDZDFhVzUwT0Njc0lDZDFhVzUwT0NkZFhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuUnZVM1J5WldGdFpYSk5aWE56WVdkbGN5NXpaWFFvSjBkaGJXVndZV1JCYm1Gc2IyY25MQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaRG9nT1RJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlBZ0lDQWdJQ0FnSUdOMGNteGxja2xrSUNBZ1luVjBkRzl1SUNCaGJtRnNiMmRXWVd4MVpWeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNSeWRXTjBkWEpsT2lCYkozVnBiblE0Snl3Z0ozVnBiblE0Snl3Z0oyUnZkV0pzWlNkZFhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuUnZVM1J5WldGdFpYSk5aWE56WVdkbGN5NXpaWFFvSjBkaGJXVndZV1JFYVhOamIyNXVaV04wWldRbkxDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFpEb2dPVFFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUFnSUNBZ0lDQWdJQ0JqZEhKc1pYSkpaRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MzUnlkV04wZFhKbE9pQmJKM1ZwYm5RNEoxMWNiaUFnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVtY205dFUzUnlaV0Z0WlhKTlpYTnpZV2RsY3k1elpYUW9NQ3dnSjFGMVlXeHBkSGxEYjI1MGNtOXNUM2R1WlhKemFHbHdKeWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVabkp2YlZOMGNtVmhiV1Z5VFdWemMyRm5aWE11YzJWMEtERXNJQ2RTWlhOd2IyNXpaU2NwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbVp5YjIxVGRISmxZVzFsY2sxbGMzTmhaMlZ6TG5ObGRDZ3lMQ0FuUTI5dGJXRnVaQ2NwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbVp5YjIxVGRISmxZVzFsY2sxbGMzTmhaMlZ6TG5ObGRDZ3pMQ0FuUm5KbFpYcGxSbkpoYldVbktUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bWNtOXRVM1J5WldGdFpYSk5aWE56WVdkbGN5NXpaWFFvTkN3Z0oxVnVabkpsWlhwbFJuSmhiV1VuS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVtY205dFUzUnlaV0Z0WlhKTlpYTnpZV2RsY3k1elpYUW9OU3dnSjFacFpHVnZSVzVqYjJSbGNrRjJaMUZRSnlrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Wm5KdmJWTjBjbVZoYldWeVRXVnpjMkZuWlhNdWMyVjBLRFlzSUNkTVlYUmxibU41VkdWemRDY3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtWnliMjFUZEhKbFlXMWxjazFsYzNOaFoyVnpMbk5sZENnM0xDQW5TVzVwZEdsaGJGTmxkSFJwYm1kekp5azdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpuSnZiVk4wY21WaGJXVnlUV1Z6YzJGblpYTXVjMlYwS0Rnc0lDZEdhV3hsUlhoMFpXNXphVzl1SnlrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Wm5KdmJWTjBjbVZoYldWeVRXVnpjMkZuWlhNdWMyVjBLRGtzSUNkR2FXeGxUV2x0WlZSNWNHVW5LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NW1jbTl0VTNSeVpXRnRaWEpOWlhOellXZGxjeTV6WlhRb01UQXNJQ2RHYVd4bFEyOXVkR1Z1ZEhNbktUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bWNtOXRVM1J5WldGdFpYSk5aWE56WVdkbGN5NXpaWFFvTVRFc0lDZFVaWE4wUldOb2J5Y3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtWnliMjFUZEhKbFlXMWxjazFsYzNOaFoyVnpMbk5sZENneE1pd2dKMGx1Y0hWMFEyOXVkSEp2YkU5M2JtVnljMmhwY0NjcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1aeWIyMVRkSEpsWVcxbGNrMWxjM05oWjJWekxuTmxkQ2d4TXl3Z0owZGhiV1Z3WVdSU1pYTndiMjV6WlNjcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1aeWIyMVRkSEpsWVcxbGNrMWxjM05oWjJWekxuTmxkQ2d4TkN3Z0owUmhkR0ZEYUdGdWJtVnNUR0YwWlc1amVWUmxjM1FuS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVtY205dFUzUnlaV0Z0WlhKTlpYTnpZV2RsY3k1elpYUW9NalUxTENBblVISnZkRzlqYjJ3bktUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlNaV2RwYzNSbGNpQmhJRzFsYzNOaFoyVWdhR0Z1Wkd4bGNseHVJQ0FnSUNBcUlFQndZWEpoYlNCdFpYTnpZV2RsUkdseVpXTjBhVzl1SUMwZ2RHaGxJR1JwY21WamRHbHZiaUJ2WmlCMGFHVWdiV1Z6YzJGblpUc2dkRzlUZEhKbFlXMWxjaUJ2Y2lCbWNtOXRVM1J5WldGdFpYSmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2JXVnpjMkZuWlZSNWNHVWdMU0IwYUdVZ2RIbHdaU0J2WmlCMGFHVWdiV1Z6YzJGblpWeHVJQ0FnSUNBcUlFQndZWEpoYlNCdFpYTnpZV2RsU0dGdVpHeGxjaUF0SUhSb1pTQm1kVzVqZEdsdmJpQnZjaUJ0WlhSb2IyUWdkRzhnWW1VZ1pYaGxZM1YwWldRZ2QyaGxiaUIwYUdseklHaGhibVJzWlhJZ2FYTWdZMkZzYkdWa1hHNGdJQ0FnSUNvdlhHNGdJQ0FnY21WbmFYTjBaWEpOWlhOellXZGxTR0Z1Wkd4bGNpaGNiaUFnSUNBZ0lDQWdiV1Z6YzJGblpVUnBjbVZqZEdsdmJqb2dUV1Z6YzJGblpVUnBjbVZqZEdsdmJpeGNiaUFnSUNBZ0lDQWdiV1Z6YzJGblpWUjVjR1U2SUhOMGNtbHVaeXhjYmlBZ0lDQWdJQ0FnYldWemMyRm5aVWhoYm1Sc1pYSTZJQ2h0WlhOellXZGxSR0YwWVQ4NklIVnVhMjV2ZDI0Z2ZDQjFibVJsWm1sdVpXUXBJRDArSUhadmFXUmNiaUFnSUNBcElIdGNiaUFnSUNBZ0lDQWdjM2RwZEdOb0lDaHRaWE56WVdkbFJHbHlaV04wYVc5dUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRTFsYzNOaFoyVkVhWEpsWTNScGIyNHVWRzlUZEhKbFlXMWxjanBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuUnZVM1J5WldGdFpYSklZVzVrYkdWeWN5NXpaWFFvYldWemMyRm5aVlI1Y0dVc0lHMWxjM05oWjJWSVlXNWtiR1Z5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnVFdWemMyRm5aVVJwY21WamRHbHZiaTVHY205dFUzUnlaV0Z0WlhJNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVtY205dFUzUnlaV0Z0WlhKSVlXNWtiR1Z5Y3k1elpYUW9iV1Z6YzJGblpWUjVjR1VzSUcxbGMzTmhaMlZJWVc1a2JHVnlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUdSbFptRjFiSFE2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa3h2WnloY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZRlZ1YTI1dmQyNGdiV1Z6YzJGblpTQmthWEpsWTNScGIyNGdKSHR0WlhOellXZGxSR2x5WldOMGFXOXVmV0JjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRlJvWlNCbGJuVnRJR1p2Y2lCdFpYTnpZV2RsSUdScGNtVmpkR2x2Ym5OY2JpQXFMMXh1Wlhod2IzSjBJR1Z1ZFcwZ1RXVnpjMkZuWlVScGNtVmpkR2x2YmlCN1hHNGdJQ0FnVkc5VGRISmxZVzFsY2lBOUlEQXNYRzRnSUNBZ1JuSnZiVk4wY21WaGJXVnlJRDBnTVZ4dWZWeHVJaXdpTHk4Z1EyOXdlWEpwWjJoMElFVndhV01nUjJGdFpYTXNJRWx1WXk0Z1FXeHNJRkpwWjJoMGN5QlNaWE5sY25abFpDNWNibHh1YVcxd2IzSjBJSHNnVTJWdVpFMWxjM05oWjJWRGIyNTBjbTlzYkdWeUlIMGdabkp2YlNBbkxpOVRaVzVrVFdWemMyRm5aVU52Ym5SeWIyeHNaWEluTzF4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nVkc5VGRISmxZVzFsY2sxbGMzTmhaMlZ6UTI5dWRISnZiR3hsY2lCN1hHNGdJQ0FnYzJWdVpFMWxjM05oWjJWRGIyNTBjbTlzYkdWeU9pQlRaVzVrVFdWemMyRm5aVU52Ym5SeWIyeHNaWEk3WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWNHRnlZVzBnYzJWdVpFMWxjM05oWjJWRGIyNTBjbTlzYkdWeUlDMGdVM1J5WldGdElHMWxjM05oWjJVZ1kyOXVkSEp2Ykd4bGNpQnBibk4wWVc1alpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtITmxibVJOWlhOellXZGxRMjl1ZEhKdmJHeGxjam9nVTJWdVpFMWxjM05oWjJWRGIyNTBjbTlzYkdWeUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVnVaRTFsYzNOaFoyVkRiMjUwY205c2JHVnlJRDBnYzJWdVpFMWxjM05oWjJWRGIyNTBjbTlzYkdWeU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTmxibVFnVW1WeGRXVnpkQ0IwYnlCVVlXdGxJRkYxWVd4cGRIa2dRMjl1ZEhKdmJDQjBieUIwYUdVZ1ZVVWdTVzV6ZEdGdVkyVmNiaUFnSUNBZ0tpOWNiaUFnSUNCVFpXNWtVbVZ4ZFdWemRGRjFZV3hwZEhsRGIyNTBjbTlzS0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5ObGJtUk5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpNXpaVzVrVFdWemMyRm5aVlJ2VTNSeVpXRnRaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5VbVZ4ZFdWemRGRjFZV3hwZEhsRGIyNTBjbTlzSjF4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTmxibVFnVFdGNElFWlFVeUJTWlhGMVpYTjBJSFJ2SUhSb1pTQlZSU0JKYm5OMFlXNWpaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lGTmxibVJOWVhoR2NITlNaWEYxWlhOMEtDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxibVJOWlhOellXZGxRMjl1ZEhKdmJHeGxjaTV6Wlc1a1RXVnpjMkZuWlZSdlUzUnlaV0Z0WlhJb0owWndjMUpsY1hWbGMzUW5LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJUWlc1a0lFRjJaWEpoWjJVZ1FtbDBjbUYwWlNCU1pYRjFaWE4wSUhSdklIUm9aU0JWUlNCSmJuTjBZVzVqWlZ4dUlDQWdJQ0FxTDF4dUlDQWdJRk5sYm1SQmRtVnlZV2RsUW1sMGNtRjBaVkpsY1hWbGMzUW9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlZ1WkUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5TG5ObGJtUk5aWE56WVdkbFZHOVRkSEpsWVcxbGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNkQmRtVnlZV2RsUW1sMGNtRjBaVkpsY1hWbGMzUW5YRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVTJWdVpDQmhJRk4wWVhKMElGTjBjbVZoYldsdVp5Qk5aWE56WVdkbElIUnZJSFJvWlNCVlJTQkpibk4wWVc1alpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUZObGJtUlRkR0Z5ZEZOMGNtVmhiV2x1WnlncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1elpXNWtUV1Z6YzJGblpVTnZiblJ5YjJ4c1pYSXVjMlZ1WkUxbGMzTmhaMlZVYjFOMGNtVmhiV1Z5S0NkVGRHRnlkRk4wY21WaGJXbHVaeWNwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZObGJtUWdZU0JUZEc5d0lGTjBjbVZoYldsdVp5Qk5aWE56WVdkbElIUnZJSFJvWlNCVlJTQkpibk4wWVc1alpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUZObGJtUlRkRzl3VTNSeVpXRnRhVzVuS0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5ObGJtUk5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpNXpaVzVrVFdWemMyRm5aVlJ2VTNSeVpXRnRaWElvSjFOMGIzQlRkSEpsWVcxcGJtY25LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJUWlc1a0lHRWdVbVZ4ZFdWemRDQkpibWwwYVdGc0lGTmxkSFJwYm1keklIUnZJSFJvWlNCVlJTQkpibk4wWVc1alpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUZObGJtUlNaWEYxWlhOMFNXNXBkR2xoYkZObGRIUnBibWR6S0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5ObGJtUk5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpNXpaVzVrVFdWemMyRm5aVlJ2VTNSeVpXRnRaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5VbVZ4ZFdWemRFbHVhWFJwWVd4VFpYUjBhVzVuY3lkY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNTlYRzRpTENJdkx5QkRiM0I1Y21sbmFIUWdSWEJwWXlCSFlXMWxjeXdnU1c1akxpQkJiR3dnVW1sbmFIUnpJRkpsYzJWeWRtVmtMbHh1WEc1cGJYQnZjblFnZXlCTWIyZG5aWElnZlNCbWNtOXRJQ2N1TGk5TWIyZG5aWEl2VEc5bloyVnlKenRjYm1sdGNHOXlkQ0I3SUZacFpHVnZVR3hoZVdWeUlIMGdabkp2YlNBbkxpNHZWbWxrWlc5UWJHRjVaWEl2Vm1sa1pXOVFiR0Y1WlhJbk8xeHVYRzR2S2lwY2JpQXFJRU52Ym5abGNuUnpJR052YjNKa2FXNWhkR1Z6SUdaeWIyMGdaV3hsYldWdWRDQnlaV3hoZEdsMlpTQmpiMjl5WkdsdVlYUmxjeUIwYnlCMllXeDFaWE1nYm05eWJXRnNhWHBsWkNCM2FYUm9hVzRnZEdobElIWmhiSFZsSUhKaGJtZGxJRzltSUdFZ2MyaHZjblFnS0dGdVpDQmlZV05ySUdGbllXbHVLVnh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nUTI5dmNtUnBibUYwWlVOdmJuWmxjblJsY2lCN1hHNGdJQ0FnZG1sa1pXOUZiR1Z0Wlc1MFVISnZkbWxrWlhJNklGWnBaR1Z2VUd4aGVXVnlPMXh1SUNBZ0lIWnBaR1Z2Uld4bGJXVnVkRkJoY21WdWREb2dTRlJOVEVWc1pXMWxiblE3WEc0Z0lDQWdkbWxrWlc5RmJHVnRaVzUwT2lCSVZFMU1WbWxrWlc5RmJHVnRaVzUwTzF4dUlDQWdJSEpoZEdsdk9pQnVkVzFpWlhJN1hHNWNiaUFnSUNCdWIzSnRZV3hwZW1WQmJtUlJkV0Z1ZEdsNlpWVnVjMmxuYm1Wa1JuVnVZem9nS0Z4dUlDQWdJQ0FnSUNCNE9pQnVkVzFpWlhJc1hHNGdJQ0FnSUNBZ0lIazZJRzUxYldKbGNseHVJQ0FnSUNrZ1BUNGdUbTl5YldGc2FYcGxaRkYxWVc1MGFYcGxaRlZ1YzJsbmJtVmtRMjl2Y21RN1hHNGdJQ0FnYm05eWJXRnNhWHBsUVc1a1VYVmhiblJwZW1WVGFXZHVaV1JHZFc1ak9pQW9YRzRnSUNBZ0lDQWdJSGc2SUc1MWJXSmxjaXhjYmlBZ0lDQWdJQ0FnZVRvZ2JuVnRZbVZ5WEc0Z0lDQWdLU0E5UGlCT2IzSnRZV3hwZW1Wa1VYVmhiblJwZW1Wa1UybG5ibVZrUTI5dmNtUTdYRzRnSUNBZ1pHVnViM0p0WVd4cGVtVkJibVJWYm5GMVlXNTBhWHBsVlc1emFXZHVaV1JHZFc1ak9pQW9YRzRnSUNBZ0lDQWdJSGc2SUc1MWJXSmxjaXhjYmlBZ0lDQWdJQ0FnZVRvZ2JuVnRZbVZ5WEc0Z0lDQWdLU0E5UGlCVmJuRjFZVzUwYVhwbFpFUmxibTl5YldGc2FYcGxaRlZ1YzJsbmJtVmtRMjl2Y21RN1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2RtbGtaVzlGYkdWdFpXNTBVSEp2ZG1sa1pYSWdMU0IwYUdVZ1pHbDJJR1ZzWlcxbGJuUWdkR2hoZENCMGFHVWdkbWxrWlc4Z2NHeGhlV1Z5SUhkcGJHd2dZbVVnYVc1cVpXTjBaV1FnYVc1MGIxeHVJQ0FnSUNBcUwxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtIWnBaR1Z2Uld4bGJXVnVkRkJ5YjNacFpHVnlPaUJXYVdSbGIxQnNZWGxsY2lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5acFpHVnZSV3hsYldWdWRGQnliM1pwWkdWeUlEMGdkbWxrWlc5RmJHVnRaVzUwVUhKdmRtbGtaWEk3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVibTl5YldGc2FYcGxRVzVrVVhWaGJuUnBlbVZWYm5OcFoyNWxaRVoxYm1NZ1BTQW9LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMDV2Y20xaGJHbDZaU0JoYm1RZ2NYVmhiblJwZW1VZ2RXNXphV2R1WldRc0lHMWxkR2h2WkNCdWIzUWdhVzF3YkdWdFpXNTBaV1F1SjF4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV1YjNKdFlXeHBlbVZCYm1SUmRXRnVkR2w2WlZOcFoyNWxaRVoxYm1NZ1BTQW9LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMDV2Y20xaGJHbDZaU0JoYm1RZ2RXNXhkV0Z1ZEdsNlpTQnphV2R1WldRc0lHMWxkR2h2WkNCdWIzUWdhVzF3YkdWdFpXNTBaV1F1SjF4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVrWlc1dmNtMWhiR2w2WlVGdVpGVnVjWFZoYm5ScGVtVlZibk5wWjI1bFpFWjFibU1nUFNBb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0owUmxibTl5YldGc2FYcGxJR0Z1WkNCMWJuRjFZVzUwYVhwbElIVnVjMmxuYm1Wa0xDQnRaWFJvYjJRZ2JtOTBJR2x0Y0d4bGJXVnVkR1ZrTGlkY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1ZHaGxJSE4xY21aaFkyVWdiV1YwYUc5a0lHWnZjaUJ6WlhSMFpYSk9iM0p0WVd4cGVtVkJibVJSZFdGdWRHbDZaVlZ1YzJsbmJtVmtYRzRnSUNBZ0lDb2dRSEJoY21GdElIZ2dMU0I0SUdGNGFYTWdjRzlwYm5SY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZVNBdElIa2dZWGhwY3lCd2IybHVkRnh1SUNBZ0lDQXFMMXh1SUNBZ0lHNXZjbTFoYkdsNlpVRnVaRkYxWVc1MGFYcGxWVzV6YVdkdVpXUW9YRzRnSUNBZ0lDQWdJSGc2SUc1MWJXSmxjaXhjYmlBZ0lDQWdJQ0FnZVRvZ2JuVnRZbVZ5WEc0Z0lDQWdLVG9nVG05eWJXRnNhWHBsWkZGMVlXNTBhWHBsWkZWdWMybG5ibVZrUTI5dmNtUWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dWIzSnRZV3hwZW1WQmJtUlJkV0Z1ZEdsNlpWVnVjMmxuYm1Wa1JuVnVZeWg0TENCNUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlVhR1VnYzNWeVptRmpaU0J0WlhSb2IyUWdabTl5SUhObGRIUmxjbFZ1Y1hWaGJuUnBlbVZCYm1SRVpXNXZjbTFoYkdsNlpWVnVjMmxuYm1Wa1hHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhnZ0xTQjRJR0Y0YVhNZ2NHOXBiblJjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlU0F0SUhrZ1lYaHBjeUJ3YjJsdWRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUhWdWNYVmhiblJwZW1WQmJtUkVaVzV2Y20xaGJHbDZaVlZ1YzJsbmJtVmtLRnh1SUNBZ0lDQWdJQ0I0T2lCdWRXMWlaWElzWEc0Z0lDQWdJQ0FnSUhrNklHNTFiV0psY2x4dUlDQWdJQ2s2SUZWdWNYVmhiblJwZW1Wa1JHVnViM0p0WVd4cGVtVmtWVzV6YVdkdVpXUkRiMjl5WkNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVJsYm05eWJXRnNhWHBsUVc1a1ZXNXhkV0Z1ZEdsNlpWVnVjMmxuYm1Wa1JuVnVZeWg0TENCNUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlVhR1VnYzNWeVptRmpaU0J0WlhSb2IyUWdabTl5SUhObGRIUmxjazV2Y20xaGJHbDZaVUZ1WkZGMVlXNTBhWHBsVTJsbmJtVmtYRzRnSUNBZ0lDb2dRSEJoY21GdElIZ2dMU0I0SUdGNGFYTWdjRzlwYm5SY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZVNBdElIa2dZWGhwY3lCd2IybHVkRnh1SUNBZ0lDQXFMMXh1SUNBZ0lHNXZjbTFoYkdsNlpVRnVaRkYxWVc1MGFYcGxVMmxuYm1Wa0tGeHVJQ0FnSUNBZ0lDQjRPaUJ1ZFcxaVpYSXNYRzRnSUNBZ0lDQWdJSGs2SUc1MWJXSmxjbHh1SUNBZ0lDazZJRTV2Y20xaGJHbDZaV1JSZFdGdWRHbDZaV1JUYVdkdVpXUkRiMjl5WkNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTV2Y20xaGJHbDZaVUZ1WkZGMVlXNTBhWHBsVTJsbmJtVmtSblZ1WXloNExDQjVLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJ6WlhRZ2RYQWdkR2hsSUU1dmNtMWhiR2w2WlNCQmJtUWdVWFZoYm5ScGVtVWdiV1YwYUc5a2N5QmlZWE5sWkNCdmJpQjBhR1VnWVhOd1pXTjBJSEpoZEdsdklHRnVaQ0IwYUdVZ2RtbGtaVzhnY0d4aGVXVnlJSEpoZEdsdlhHNGdJQ0FnSUNvdlhHNGdJQ0FnYzJWMGRYQk9iM0p0WVd4cGVtVkJibVJSZFdGdWRHbDZaU2dwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUyYVdSbGIwVnNaVzFsYm5SUVlYSmxiblFnUFZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MmFXUmxiMFZzWlcxbGJuUlFjbTkyYVdSbGNpNW5aWFJXYVdSbGIxQmhjbVZ1ZEVWc1pXMWxiblFvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUyYVdSbGIwVnNaVzFsYm5RZ1BTQjBhR2x6TG5acFpHVnZSV3hsYldWdWRGQnliM1pwWkdWeUxtZGxkRlpwWkdWdlJXeGxiV1Z1ZENncE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMblpwWkdWdlJXeGxiV1Z1ZEZCaGNtVnVkQ0FtSmlCMGFHbHpMblpwWkdWdlJXeGxiV1Z1ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdjR3hoZVdWeVYybGtkR2dnUFNCMGFHbHpMblpwWkdWdlJXeGxiV1Z1ZEZCaGNtVnVkQzVqYkdsbGJuUlhhV1IwYUNCOGZDQXhPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnY0d4aGVXVnlTR1ZwWjJoMElEMGdkR2hwY3k1MmFXUmxiMFZzWlcxbGJuUlFZWEpsYm5RdVkyeHBaVzUwU0dWcFoyaDBJSHg4SURFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQjJhV1JsYjFkcFpIUm9JRDBnZEdocGN5NTJhV1JsYjBWc1pXMWxiblF1ZG1sa1pXOVhhV1IwYUNCOGZDQXhPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnZG1sa1pXOUlaV2xuYUhRZ1BTQjBhR2x6TG5acFpHVnZSV3hsYldWdWRDNTJhV1JsYjBobGFXZG9kQ0I4ZkNBeE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdjR3hoZVdWeVFYTndaV04wVW1GMGFXOGdQU0J3YkdGNVpYSklaV2xuYUhRZ0x5QndiR0Y1WlhKWGFXUjBhRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhacFpHVnZRWE53WldOMFVtRjBhVzhnUFNCMmFXUmxiMGhsYVdkb2RDQXZJSFpwWkdWdlYybGtkR2c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY0d4aGVXVnlRWE53WldOMFVtRjBhVzhnUGlCMmFXUmxiMEZ6Y0dWamRGSmhkR2x2S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGt4dlp5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjFObGRIVndJRTV2Y20xaGJHbDZaU0JoYm1RZ1VYVmhiblJwZW1VZ1ptOXlJSEJzWVhsbGNrRnpjR1ZqZEZKaGRHbHZJRDRnZG1sa1pXOUJjM0JsWTNSU1lYUnBieWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEWmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNtRjBhVzhnUFNCd2JHRjVaWEpCYzNCbFkzUlNZWFJwYnlBdklIWnBaR1Z2UVhOd1pXTjBVbUYwYVc4N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV1YjNKdFlXeHBlbVZCYm1SUmRXRnVkR2w2WlZWdWMybG5ibVZrUm5WdVl5QTlJQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VEb2diblZ0WW1WeUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I1T2lCdWRXMWlaWEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwSUQwK0lIUm9hWE11Ym05eWJXRnNhWHBsUVc1a1VYVmhiblJwZW1WVmJuTnBaMjVsWkZCc1lYbGxja0pwWjJkbGNpaDRMQ0I1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTV2Y20xaGJHbDZaVUZ1WkZGMVlXNTBhWHBsVTJsbmJtVmtSblZ1WXlBOUlDaDRPaUJ1ZFcxaVpYSXNJSGs2SUc1MWJXSmxjaWtnUFQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dWIzSnRZV3hwZW1WQmJtUlJkV0Z1ZEdsNlpWTnBaMjVsWkZCc1lYbGxja0pwWjJkbGNpaDRMQ0I1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVJsYm05eWJXRnNhWHBsUVc1a1ZXNXhkV0Z1ZEdsNlpWVnVjMmxuYm1Wa1JuVnVZeUE5SUNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlRG9nYm5WdFltVnlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNU9pQnVkVzFpWlhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcElEMCtJSFJvYVhNdVpHVnViM0p0WVd4cGVtVkJibVJWYm5GMVlXNTBhWHBsVlc1emFXZHVaV1JRYkdGNVpYSkNhV2RuWlhJb2VDd2dlU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1TWIyY29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkVFpYUjFjQ0JPYjNKdFlXeHBlbVVnWVc1a0lGRjFZVzUwYVhwbElHWnZjaUJ3YkdGNVpYSkJjM0JsWTNSU1lYUnBieUE4UFNCMmFXUmxiMEZ6Y0dWamRGSmhkR2x2Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdObHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXlZWFJwYnlBOUlIWnBaR1Z2UVhOd1pXTjBVbUYwYVc4Z0x5QndiR0Y1WlhKQmMzQmxZM1JTWVhScGJ6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG01dmNtMWhiR2w2WlVGdVpGRjFZVzUwYVhwbFZXNXphV2R1WldSR2RXNWpJRDBnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjRPaUJ1ZFcxaVpYSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhrNklHNTFiV0psY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNrZ1BUNGdkR2hwY3k1dWIzSnRZV3hwZW1WQmJtUlJkV0Z1ZEdsNlpWVnVjMmxuYm1Wa1VHeGhlV1Z5VTIxaGJHeGxjaWg0TENCNUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG01dmNtMWhiR2w2WlVGdVpGRjFZVzUwYVhwbFUybG5ibVZrUm5WdVl5QTlJQ2g0T2lCdWRXMWlaWElzSUhrNklHNTFiV0psY2lrZ1BUNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXViM0p0WVd4cGVtVkJibVJSZFdGdWRHbDZaVk5wWjI1bFpGQnNZWGxsY2xOdFlXeHNaWElvZUN3Z2VTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1a1pXNXZjbTFoYkdsNlpVRnVaRlZ1Y1hWaGJuUnBlbVZWYm5OcFoyNWxaRVoxYm1NZ1BTQW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhnNklHNTFiV0psY2l4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlVG9nYm5WdFltVnlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLU0E5UGlCMGFHbHpMbVJsYm05eWJXRnNhWHBsUVc1a1ZXNXhkV0Z1ZEdsNlpWVnVjMmxuYm1Wa1VHeGhlV1Z5VTIxaGJHeGxjaWg0TENCNUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlHNXZjbTFoYkdsNlpVRnVaRkYxWVc1MGFYcGxWVzV6YVdkdVpXUWdabTl5SUhCc1lYbGxja0Z6Y0dWamRGSmhkR2x2SUQ0Z2RtbGtaVzlCYzNCbFkzUlNZWFJwYjF4dUlDQWdJQ0FxSUVCd1lYSmhiU0I0SUMwZ2VDQmhlR2x6SUhCdmFXNTBYRzRnSUNBZ0lDb2dRSEJoY21GdElIa2dMU0I1SUdGNGFYTWdjRzlwYm5SY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J1YjNKdFlXeHBlbVZCYm1SUmRXRnVkR2w2WlZWdWMybG5ibVZrVUd4aGVXVnlRbWxuWjJWeUtGeHVJQ0FnSUNBZ0lDQjRPaUJ1ZFcxaVpYSXNYRzRnSUNBZ0lDQWdJSGs2SUc1MWJXSmxjbHh1SUNBZ0lDazZJRTV2Y20xaGJHbDZaV1JSZFdGdWRHbDZaV1JWYm5OcFoyNWxaRU52YjNKa0lIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2JtOXliV0ZzYVhwbFpGZ2dQU0I0SUM4Z2RHaHBjeTUyYVdSbGIwVnNaVzFsYm5SUVlYSmxiblF1WTJ4cFpXNTBWMmxrZEdnN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUc1dmNtMWhiR2w2WldSWklEMWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjbUYwYVc4Z0tpQW9lU0F2SUhSb2FYTXVkbWxrWlc5RmJHVnRaVzUwVUdGeVpXNTBMbU5zYVdWdWRFaGxhV2RvZENBdElEQXVOU2tnS3lBd0xqVTdYRzRnSUNBZ0lDQWdJR2xtSUNoY2JpQWdJQ0FnSUNBZ0lDQWdJRzV2Y20xaGJHbDZaV1JZSUR3Z01DNHdJSHg4WEc0Z0lDQWdJQ0FnSUNBZ0lDQnViM0p0WVd4cGVtVmtXQ0ErSURFdU1DQjhmRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JtOXliV0ZzYVhwbFpGa2dQQ0F3TGpBZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUc1dmNtMWhiR2w2WldSWklENGdNUzR3WEc0Z0lDQWdJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCT2IzSnRZV3hwZW1Wa1VYVmhiblJwZW1Wa1ZXNXphV2R1WldSRGIyOXlaQ2htWVd4elpTd2dOalUxTXpVc0lEWTFOVE0xS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVG05eWJXRnNhWHBsWkZGMVlXNTBhWHBsWkZWdWMybG5ibVZrUTI5dmNtUW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSEoxWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdWIzSnRZV3hwZW1Wa1dDQXFJRFkxTlRNMkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNXZjbTFoYkdsNlpXUlpJQ29nTmpVMU16WmNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQjFibkYxWVc1MGFYcGxRVzVrUkdWdWIzSnRZV3hwZW1WVmJuTnBaMjVsWkNCbWIzSWdjR3hoZVdWeVFYTndaV04wVW1GMGFXOGdQaUIyYVdSbGIwRnpjR1ZqZEZKaGRHbHZYRzRnSUNBZ0lDb2dRSEJoY21GdElIZ2dMU0I0SUdGNGFYTWdjRzlwYm5SY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZVNBdElIa2dZWGhwY3lCd2IybHVkRnh1SUNBZ0lDQXFMMXh1SUNBZ0lHUmxibTl5YldGc2FYcGxRVzVrVlc1eGRXRnVkR2w2WlZWdWMybG5ibVZrVUd4aGVXVnlRbWxuWjJWeUtIZzZJRzUxYldKbGNpd2dlVG9nYm5WdFltVnlLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRzV2Y20xaGJHbDZaV1JZSUQwZ2VDQXZJRFkxTlRNMk8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdWIzSnRZV3hwZW1Wa1dTQTlJQ2g1SUM4Z05qVTFNellnTFNBd0xqVXBJQzhnZEdocGN5NXlZWFJwYnlBcklEQXVOVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCVmJuRjFZVzUwYVhwbFpFUmxibTl5YldGc2FYcGxaRlZ1YzJsbmJtVmtRMjl2Y21Rb1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1YjNKdFlXeHBlbVZrV0NBcUlIUm9hWE11ZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwTG1Oc2FXVnVkRmRwWkhSb0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnYm05eWJXRnNhWHBsWkZrZ0tpQjBhR2x6TG5acFpHVnZSV3hsYldWdWRGQmhjbVZ1ZEM1amJHbGxiblJJWldsbmFIUmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJ1YjNKdFlXeHBlbVZCYm1SUmRXRnVkR2w2WlZOcFoyNWxaQ0JtYjNJZ2NHeGhlV1Z5UVhOd1pXTjBVbUYwYVc4Z1BpQjJhV1JsYjBGemNHVmpkRkpoZEdsdlhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhnZ0xTQjRJR0Y0YVhNZ2NHOXBiblJjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlU0F0SUhrZ1lYaHBjeUJ3YjJsdWRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUc1dmNtMWhiR2w2WlVGdVpGRjFZVzUwYVhwbFUybG5ibVZrVUd4aGVXVnlRbWxuWjJWeUtIZzZJRzUxYldKbGNpd2dlVG9nYm5WdFltVnlLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRzV2Y20xaGJHbDZaV1JZSUQwZ2VDQXZJQ2d3TGpVZ0tpQjBhR2x6TG5acFpHVnZSV3hsYldWdWRGQmhjbVZ1ZEM1amJHbGxiblJYYVdSMGFDazdYRzRnSUNBZ0lDQWdJR052Ym5OMElHNXZjbTFoYkdsNlpXUlpJRDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDaDBhR2x6TG5KaGRHbHZJQ29nZVNrZ0x5QW9NQzQxSUNvZ2RHaHBjeTUyYVdSbGIwVnNaVzFsYm5SUVlYSmxiblF1WTJ4cFpXNTBTR1ZwWjJoMEtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJPYjNKdFlXeHBlbVZrVVhWaGJuUnBlbVZrVTJsbmJtVmtRMjl2Y21Rb1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1YjNKdFlXeHBlbVZrV0NBcUlETXlOelkzTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdibTl5YldGc2FYcGxaRmtnS2lBek1qYzJOMXh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUc1dmNtMWhiR2w2WlVGdVpGRjFZVzUwYVhwbFZXNXphV2R1WldRZ1ptOXlJSEJzWVhsbGNrRnpjR1ZqZEZKaGRHbHZJRHc5SUhacFpHVnZRWE53WldOMFVtRjBhVzljYmlBZ0lDQWdLaUJBY0dGeVlXMGdlQ0F0SUhnZ1lYaHBjeUJ3YjJsdWRGeHVJQ0FnSUNBcUlFQndZWEpoYlNCNUlDMGdlU0JoZUdseklIQnZhVzUwWEc0Z0lDQWdJQ292WEc0Z0lDQWdibTl5YldGc2FYcGxRVzVrVVhWaGJuUnBlbVZWYm5OcFoyNWxaRkJzWVhsbGNsTnRZV3hzWlhJb2VEb2diblZ0WW1WeUxDQjVPaUJ1ZFcxaVpYSXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdibTl5YldGc2FYcGxaRmdnUFZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1eVlYUnBieUFxSUNoNElDOGdkR2hwY3k1MmFXUmxiMFZzWlcxbGJuUlFZWEpsYm5RdVkyeHBaVzUwVjJsa2RHZ2dMU0F3TGpVcElDc2dNQzQxTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J1YjNKdFlXeHBlbVZrV1NBOUlIa2dMeUIwYUdsekxuWnBaR1Z2Uld4bGJXVnVkRkJoY21WdWRDNWpiR2xsYm5SSVpXbG5hSFE3WEc0Z0lDQWdJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUc1dmNtMWhiR2w2WldSWUlEd2dNQzR3SUh4OFhHNGdJQ0FnSUNBZ0lDQWdJQ0J1YjNKdFlXeHBlbVZrV0NBK0lERXVNQ0I4ZkZ4dUlDQWdJQ0FnSUNBZ0lDQWdibTl5YldGc2FYcGxaRmtnUENBd0xqQWdmSHhjYmlBZ0lDQWdJQ0FnSUNBZ0lHNXZjbTFoYkdsNlpXUlpJRDRnTVM0d1hHNGdJQ0FnSUNBZ0lDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5Qk9iM0p0WVd4cGVtVmtVWFZoYm5ScGVtVmtWVzV6YVdkdVpXUkRiMjl5WkNobVlXeHpaU3dnTmpVMU16VXNJRFkxTlRNMUtUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1RtOXliV0ZzYVhwbFpGRjFZVzUwYVhwbFpGVnVjMmxuYm1Wa1EyOXZjbVFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhKMVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnViM0p0WVd4cGVtVmtXQ0FxSURZMU5UTTJMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzV2Y20xaGJHbDZaV1JaSUNvZ05qVTFNelpjYmlBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUIxYm5GMVlXNTBhWHBsUVc1a1JHVnViM0p0WVd4cGVtVlZibk5wWjI1bFpDQm1iM0lnY0d4aGVXVnlRWE53WldOMFVtRjBhVzhnUEQwZ2RtbGtaVzlCYzNCbFkzUlNZWFJwYjF4dUlDQWdJQ0FxSUVCd1lYSmhiU0I0SUMwZ2VDQmhlR2x6SUhCdmFXNTBYRzRnSUNBZ0lDb2dRSEJoY21GdElIa2dMU0I1SUdGNGFYTWdjRzlwYm5SY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JrWlc1dmNtMWhiR2w2WlVGdVpGVnVjWFZoYm5ScGVtVlZibk5wWjI1bFpGQnNZWGxsY2xOdFlXeHNaWElvZURvZ2JuVnRZbVZ5TENCNU9pQnVkVzFpWlhJcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2JtOXliV0ZzYVhwbFpGZ2dQU0FvZUNBdklEWTFOVE0ySUMwZ01DNDFLU0F2SUhSb2FYTXVjbUYwYVc4Z0t5QXdMalU3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRzV2Y20xaGJHbDZaV1JaSUQwZ2VTQXZJRFkxTlRNMk8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRlZ1Y1hWaGJuUnBlbVZrUkdWdWIzSnRZV3hwZW1Wa1ZXNXphV2R1WldSRGIyOXlaQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lHNXZjbTFoYkdsNlpXUllJQ29nZEdocGN5NTJhV1JsYjBWc1pXMWxiblJRWVhKbGJuUXVZMnhwWlc1MFYybGtkR2dzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnViM0p0WVd4cGVtVmtXU0FxSUhSb2FYTXVkbWxrWlc5RmJHVnRaVzUwVUdGeVpXNTBMbU5zYVdWdWRFaGxhV2RvZEZ4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlHNXZjbTFoYkdsNlpVRnVaRkYxWVc1MGFYcGxVMmxuYm1Wa0lHWnZjaUJ3YkdGNVpYSkJjM0JsWTNSU1lYUnBieUE4UFNCMmFXUmxiMEZ6Y0dWamRGSmhkR2x2WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSGdnTFNCNElHRjRhWE1nY0c5cGJuUmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2VTQXRJSGtnWVhocGN5QndiMmx1ZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJRzV2Y20xaGJHbDZaVUZ1WkZGMVlXNTBhWHBsVTJsbmJtVmtVR3hoZVdWeVUyMWhiR3hsY2loNE9pQnVkVzFpWlhJc0lIazZJRzUxYldKbGNpa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnViM0p0WVd4cGVtVmtXQ0E5WEc0Z0lDQWdJQ0FnSUNBZ0lDQW9kR2hwY3k1eVlYUnBieUFxSUhncElDOGdLREF1TlNBcUlIUm9hWE11ZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwTG1Oc2FXVnVkRmRwWkhSb0tUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2JtOXliV0ZzYVhwbFpGa2dQU0I1SUM4Z0tEQXVOU0FxSUhSb2FYTXVkbWxrWlc5RmJHVnRaVzUwVUdGeVpXNTBMbU5zYVdWdWRFaGxhV2RvZENrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dUbTl5YldGc2FYcGxaRkYxWVc1MGFYcGxaRk5wWjI1bFpFTnZiM0prS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdibTl5YldGc2FYcGxaRmdnS2lBek1qYzJOeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHNXZjbTFoYkdsNlpXUlpJQ29nTXpJM05qZGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1FTQmpiR0Z6Y3lCbWIzSWdUbTl5YldGc2FYcGxRVzVrVVhWaGJuUnBlbVZWYm5OcFoyNWxaQ0J2WW1wbFkzUnpYRzRnS2k5Y2JtVjRjRzl5ZENCamJHRnpjeUJPYjNKdFlXeHBlbVZrVVhWaGJuUnBlbVZrVlc1emFXZHVaV1JEYjI5eVpDQjdYRzRnSUNBZ2FXNVNZVzVuWlRvZ1ltOXZiR1ZoYmp0Y2JpQWdJQ0I0T2lCdWRXMWlaWEk3WEc0Z0lDQWdlVG9nYm5WdFltVnlPMXh1WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvYVc1U1lXNW5aVG9nWW05dmJHVmhiaXdnZURvZ2JuVnRZbVZ5TENCNU9pQnVkVzFpWlhJcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1cGJsSmhibWRsSUQwZ2FXNVNZVzVuWlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTU0SUQwZ2VEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1NUlEMGdlVHRjYmlBZ0lDQjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1FTQmpiR0Z6Y3lCbWIzSWdWVzV4ZFdGdWRHbDZaV1JCYm1SRVpXNXZjbTFoYkdsNlpWVnVjMmxuYm1Wa0lHOWlhbVZqZEhOY2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklGVnVjWFZoYm5ScGVtVmtSR1Z1YjNKdFlXeHBlbVZrVlc1emFXZHVaV1JEYjI5eVpDQjdYRzRnSUNBZ2VEb2diblZ0WW1WeU8xeHVJQ0FnSUhrNklHNTFiV0psY2p0Y2JseHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtIZzZJRzUxYldKbGNpd2dlVG9nYm5WdFltVnlLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVlQ0E5SUhnN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZVNBOUlIazdYRzRnSUNBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUVFZ1kyeGhjM01nWm05eUlFNXZjbTFoYkdsNlpXUlJkV0Z1ZEdsNlpXUlRhV2R1WldSRGIyOXlaQ0J2WW1wbFkzUnpYRzRnS2k5Y2JtVjRjRzl5ZENCamJHRnpjeUJPYjNKdFlXeHBlbVZrVVhWaGJuUnBlbVZrVTJsbmJtVmtRMjl2Y21RZ2UxeHVJQ0FnSUhnNklHNTFiV0psY2p0Y2JpQWdJQ0I1T2lCdWRXMWlaWEk3WEc1Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2loNE9pQnVkVzFpWlhJc0lIazZJRzUxYldKbGNpa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuZ2dQU0I0TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbmtnUFNCNU8xeHVJQ0FnSUgxY2JuMWNiaUlzSW1sdGNHOXlkQ0I3WEc0Z0lDQWdSbXhoWjNOSlpITXNYRzRnSUNBZ1RuVnRaWEpwWTFCaGNtRnRaWFJsY25OSlpITXNYRzRnSUNBZ1QzQjBhVzl1VUdGeVlXMWxkR1Z5YzBsa2N5eGNiaUFnSUNCVVpYaDBVR0Z5WVcxbGRHVnljMGxrYzF4dWZTQm1jbTl0SUNjdUxpOURiMjVtYVdjdlEyOXVabWxuSnp0Y2JtbHRjRzl5ZENCN0lFeGhkR1Z1WTNsVVpYTjBVbVZ6ZFd4MGN5QjlJR1p5YjIwZ0p5NHVMMFJoZEdGRGFHRnVibVZzTDB4aGRHVnVZM2xVWlhOMFVtVnpkV3gwY3ljN1hHNXBiWEJ2Y25RZ2V5QkJaMmR5WldkaGRHVmtVM1JoZEhNZ2ZTQm1jbTl0SUNjdUxpOVFaV1Z5UTI5dWJtVmpkR2x2YmtOdmJuUnliMnhzWlhJdlFXZG5jbVZuWVhSbFpGTjBZWFJ6Snp0Y2JtbHRjRzl5ZENCN0lFbHVhWFJwWVd4VFpYUjBhVzVuY3lCOUlHWnliMjBnSnk0dUwzQnBlR1ZzYzNSeVpXRnRhVzVuWm5KdmJuUmxibVFuTzF4dWFXMXdiM0owSUhzZ1RXVnpjMkZuWlZOMGNtVmhiV1Z5VEdsemRDQjlJR1p5YjIwZ0p5NHVMMWRsWWxOdlkydGxkSE12VFdWemMyRm5aVkpsWTJWcGRtVW5PMXh1YVcxd2IzSjBJSHNnVTJWMGRHbHVaMFpzWVdjZ2ZTQm1jbTl0SUNjdUxpOURiMjVtYVdjdlUyVjBkR2x1WjBac1lXY25PMXh1YVcxd2IzSjBJSHNnVTJWMGRHbHVaMDUxYldKbGNpQjlJR1p5YjIwZ0p5NHVMME52Ym1acFp5OVRaWFIwYVc1blRuVnRZbVZ5Snp0Y2JtbHRjRzl5ZENCN0lGTmxkSFJwYm1kVVpYaDBJSDBnWm5KdmJTQW5MaTR2UTI5dVptbG5MMU5sZEhScGJtZFVaWGgwSnp0Y2JtbHRjRzl5ZENCN0lGTmxkSFJwYm1kUGNIUnBiMjRnZlNCbWNtOXRJQ2N1TGk5RGIyNW1hV2N2VTJWMGRHbHVaMDl3ZEdsdmJpYzdYRzVwYlhCdmNuUWdlMXh1SUNBZ0lFUmhkR0ZEYUdGdWJtVnNUR0YwWlc1amVWUmxjM1JTWlhOd2IyNXpaU3hjYmlBZ0lDQkVZWFJoUTJoaGJtNWxiRXhoZEdWdVkzbFVaWE4wVW1WemRXeDBYRzU5SUdaeWIyMGdYQ0l1TGk5RVlYUmhRMmhoYm01bGJDOUVZWFJoUTJoaGJtNWxiRXhoZEdWdVkzbFVaWE4wVW1WemRXeDBjMXdpTzF4dVhHNHZLaXBjYmlBcUlFRnVJR1YyWlc1MElIUm9ZWFFnYVhNZ1pXMXBkSFJsWkNCM2FHVnVJRUZHU3lCa2FYTmpiMjV1WldOMElHbHpJR0ZpYjNWMElIUnZJR2hoY0hCbGJpNWNiaUFxSUVOaGJpQmlaU0JqWVc1alpXeHNaV1FnWW5rZ1kyRnNiR2x1WnlCMGFHVWdZMkZzYkdKaFkyc2dablZ1WTNScGIyNGdjSEp2ZG1sa1pXUWdZWE1nY0dGeWRDQnZaaUIwYUdVZ1pYWmxiblF1WEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCQlptdFhZWEp1YVc1blFXTjBhWFpoZEdWRmRtVnVkQ0JsZUhSbGJtUnpJRVYyWlc1MElIdGNiaUFnSUNCeVpXRmtiMjVzZVNCMGVYQmxPaUFuWVdaclYyRnlibWx1WjBGamRHbDJZWFJsSnp0Y2JpQWdJQ0J5WldGa2IyNXNlU0JrWVhSaE9pQjdYRzRnSUNBZ0lDQWdJQzhxS2lCSWIzY2diV0Z1ZVNCelpXTnZibVJ6SUhWdWRHbHNJSFJvWlNCelpYTnphVzl1SUdseklHUnBjMk52Ym01bFkzUmxaQ0FxTDF4dUlDQWdJQ0FnSUNCamIzVnVkRVJ2ZDI0NklHNTFiV0psY2p0Y2JpQWdJQ0FnSUNBZ0x5b3FJRU5oYkd4aVlXTnJJR1oxYm1OMGFXOXVJSFJvWVhRZ2JtVmxaSE1nZEc4Z1ltVWdZMkZzYkdWa0lHbG1JSGx2ZFNCM2FYTm9JSFJ2SUdOaGJtTmxiQ0IwYUdVZ1FVWkxJR1JwYzJOdmJtNWxZM1FnZEdsdFpXOTFkQzRnS2k5Y2JpQWdJQ0FnSUNBZ1pHbHpiV2x6YzBGbWF6b2dLQ2tnUFQ0Z2RtOXBaRHRjYmlBZ0lDQjlPMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLR1JoZEdFNklFRm1hMWRoY201cGJtZEJZM1JwZG1GMFpVVjJaVzUwV3lka1lYUmhKMTBwSUh0Y2JpQWdJQ0FnSUNBZ2MzVndaWElvSjJGbWExZGhjbTVwYm1kQlkzUnBkbUYwWlNjcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1SaGRHRWdQU0JrWVhSaE8xeHVJQ0FnSUgxY2JuMWNibHh1THlvcVhHNGdLaUJCYmlCbGRtVnVkQ0IwYUdGMElHbHpJR1Z0YVhSMFpXUWdkMmhsYmlCMGFHVWdRVVpMSUdScGMyTnZibTVsWTNRZ1kyOTFiblJrYjNkdUlHbHpJSFZ3WkdGMFpXUXVYRzRnS2k5Y2JtVjRjRzl5ZENCamJHRnpjeUJCWm10WFlYSnVhVzVuVlhCa1lYUmxSWFpsYm5RZ1pYaDBaVzVrY3lCRmRtVnVkQ0I3WEc0Z0lDQWdjbVZoWkc5dWJIa2dkSGx3WlRvZ0oyRm1hMWRoY201cGJtZFZjR1JoZEdVbk8xeHVJQ0FnSUhKbFlXUnZibXg1SUdSaGRHRTZJSHRjYmlBZ0lDQWdJQ0FnTHlvcUlFaHZkeUJ0WVc1NUlITmxZMjl1WkhNZ2RXNTBhV3dnZEdobElITmxjM05wYjI0Z2FYTWdaR2x6WTI5dWJtVmpkR1ZrSUNvdlhHNGdJQ0FnSUNBZ0lHTnZkVzUwUkc5M2Jqb2diblZ0WW1WeVhHNGdJQ0FnZlR0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2loa1lYUmhPaUJCWm10WFlYSnVhVzVuVlhCa1lYUmxSWFpsYm5SYkoyUmhkR0VuWFNrZ2UxeHVJQ0FnSUNBZ0lDQnpkWEJsY2lnbllXWnJWMkZ5Ym1sdVoxVndaR0YwWlNjcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1SaGRHRWdQU0JrWVhSaE8xeHVJQ0FnSUgxY2JuMWNibHh1THlvcVhHNGdLaUJCYmlCbGRtVnVkQ0IwYUdGMElHbHpJR1Z0YVhSMFpXUWdkMmhsYmlCQlJrc2dkMkZ5Ym1sdVp5QnBjeUJrWldGamRHbDJZWFJsWkM1Y2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklFRm1hMWRoY201cGJtZEVaV0ZqZEdsMllYUmxSWFpsYm5RZ1pYaDBaVzVrY3lCRmRtVnVkQ0I3WEc0Z0lDQWdjbVZoWkc5dWJIa2dkSGx3WlRvZ0oyRm1hMWRoY201cGJtZEVaV0ZqZEdsMllYUmxKenRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWdwSUh0Y2JpQWdJQ0FnSUNBZ2MzVndaWElvSjJGbWExZGhjbTVwYm1kRVpXRmpkR2wyWVhSbEp5azdYRzRnSUNBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUVGdUlHVjJaVzUwSUhSb1lYUWdhWE1nWlcxcGRIUmxaQ0IzYUdWdUlFRkdTeUJqYjNWdWRHUnZkMjRnY21WaFkyaGxjeUF3SUdGdVpDQjBhR1VnZFhObGNpQnBjeUJrYVhOamIyNXVaV04wWldRdVhHNGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5QkJabXRVYVcxbFpFOTFkRVYyWlc1MElHVjRkR1Z1WkhNZ1JYWmxiblFnZTF4dUlDQWdJSEpsWVdSdmJteDVJSFI1Y0dVNklDZGhabXRVYVcxbFpFOTFkQ2M3WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvS1NCN1hHNGdJQ0FnSUNBZ0lITjFjR1Z5S0NkaFptdFVhVzFsWkU5MWRDY3BPMXh1SUNBZ0lIMWNibjFjYmx4dUx5b3FYRzRnS2lCQmJpQmxkbVZ1ZENCMGFHRjBJR2x6SUdWdGFYUjBaV1FnZDJobGJpQjNaU0J5WldObGFYWmxJRzVsZHlCMmFXUmxieUJ4ZFdGc2FYUjVJSFpoYkhWbExseHVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdWbWxrWlc5RmJtTnZaR1Z5UVhablVWQkZkbVZ1ZENCbGVIUmxibVJ6SUVWMlpXNTBJSHRjYmlBZ0lDQnlaV0ZrYjI1c2VTQjBlWEJsT2lBbmRtbGtaVzlGYm1OdlpHVnlRWFpuVVZBbk8xeHVJQ0FnSUhKbFlXUnZibXg1SUdSaGRHRTZJSHRjYmlBZ0lDQWdJQ0FnTHlvcUlFRjJaWEpoWjJVZ2RtbGtaVzhnY1hWaGJHbDBlU0IyWVd4MVpTQXFMMXh1SUNBZ0lDQWdJQ0JoZG1kUlVEb2diblZ0WW1WeVhHNGdJQ0FnZlR0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2loa1lYUmhPaUJXYVdSbGIwVnVZMjlrWlhKQmRtZFJVRVYyWlc1MFd5ZGtZWFJoSjEwcElIdGNiaUFnSUNBZ0lDQWdjM1Z3WlhJb0ozWnBaR1Z2Ulc1amIyUmxja0YyWjFGUUp5azdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpHRjBZU0E5SUdSaGRHRTdYRzRnSUNBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUVGdUlHVjJaVzUwSUhSb1lYUWdhWE1nWlcxcGRIUmxaQ0JoWm5SbGNpQmhJRmRsWWxKMFl5QmpiMjV1WldOMGFXOXVJR2hoY3lCaVpXVnVJRzVsWjI5MGFXRjBaV1F1SUZ4dUlDb3ZYRzVsZUhCdmNuUWdZMnhoYzNNZ1YyVmlVblJqVTJSd1JYWmxiblFnWlhoMFpXNWtjeUJGZG1WdWRDQjdYRzRnSUNBZ2NtVmhaRzl1YkhrZ2RIbHdaVG9nSjNkbFlsSjBZMU5rY0NjN1hHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb0tTQjdYRzRnSUNBZ0lDQWdJSE4xY0dWeUtDZDNaV0pTZEdOVFpIQW5LVHRjYmlBZ0lDQjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1FXNGdaWFpsYm5RZ2RHaGhkQ0JwY3lCbGJXbDBkR1ZrSUhkb1pXNGdZWFYwYnlCamIyNXVaV04wYVc1bkxseHVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdWMlZpVW5SalFYVjBiME52Ym01bFkzUkZkbVZ1ZENCbGVIUmxibVJ6SUVWMlpXNTBJSHRjYmlBZ0lDQnlaV0ZrYjI1c2VTQjBlWEJsT2lBbmQyVmlVblJqUVhWMGIwTnZibTVsWTNRbk8xeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtDa2dlMXh1SUNBZ0lDQWdJQ0J6ZFhCbGNpZ25kMlZpVW5SalFYVjBiME52Ym01bFkzUW5LVHRjYmlBZ0lDQjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1FXNGdaWFpsYm5RZ2RHaGhkQ0JwY3lCbGJXbDBkR1ZrSUhkb1pXNGdjMlZ1WkdsdVp5QmhJRmRsWWxKMFl5QnZabVpsY2k1Y2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklGZGxZbEowWTBOdmJtNWxZM1JwYm1kRmRtVnVkQ0JsZUhSbGJtUnpJRVYyWlc1MElIdGNiaUFnSUNCeVpXRmtiMjVzZVNCMGVYQmxPaUFuZDJWaVVuUmpRMjl1Ym1WamRHbHVaeWM3WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvS1NCN1hHNGdJQ0FnSUNBZ0lITjFjR1Z5S0NkM1pXSlNkR05EYjI1dVpXTjBhVzVuSnlrN1hHNGdJQ0FnZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRUZ1SUdWMlpXNTBJSFJvWVhRZ2FYTWdaVzFwZEhSbFpDQjNhR1Z1SUZkbFlsSjBZeUJqYjI1dVpXTjBhVzl1SUdoaGN5QmlaV1Z1SUdWemRHRmliR2x6YUdWa0xseHVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdWMlZpVW5SalEyOXVibVZqZEdWa1JYWmxiblFnWlhoMFpXNWtjeUJGZG1WdWRDQjdYRzRnSUNBZ2NtVmhaRzl1YkhrZ2RIbHdaVG9nSjNkbFlsSjBZME52Ym01bFkzUmxaQ2M3WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvS1NCN1hHNGdJQ0FnSUNBZ0lITjFjR1Z5S0NkM1pXSlNkR05EYjI1dVpXTjBaV1FuS1R0Y2JpQWdJQ0I5WEc1OVhHNWNiaThxS2x4dUlDb2dRVzRnWlhabGJuUWdkR2hoZENCcGN5QmxiV2wwZEdWa0lHbG1JRmRsWWxKMFl5QmpiMjV1WldOMGFXOXVJR2hoY3lCbVlXbHNaV1F1WEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCWFpXSlNkR05HWVdsc1pXUkZkbVZ1ZENCbGVIUmxibVJ6SUVWMlpXNTBJSHRjYmlBZ0lDQnlaV0ZrYjI1c2VTQjBlWEJsT2lBbmQyVmlVblJqUm1GcGJHVmtKenRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWdwSUh0Y2JpQWdJQ0FnSUNBZ2MzVndaWElvSjNkbFlsSjBZMFpoYVd4bFpDY3BPMXh1SUNBZ0lIMWNibjFjYmx4dUx5b3FYRzRnS2lCQmJpQmxkbVZ1ZENCMGFHRjBJR2x6SUdWdGFYUjBaV1FnYVdZZ1YyVmlVblJqSUdOdmJtNWxZM1JwYjI0Z2FYTWdaR2x6WTI5dWJtVmpkR1ZrTGx4dUlDb3ZYRzVsZUhCdmNuUWdZMnhoYzNNZ1YyVmlVblJqUkdselkyOXVibVZqZEdWa1JYWmxiblFnWlhoMFpXNWtjeUJGZG1WdWRDQjdYRzRnSUNBZ2NtVmhaRzl1YkhrZ2RIbHdaVG9nSjNkbFlsSjBZMFJwYzJOdmJtNWxZM1JsWkNjN1hHNGdJQ0FnY21WaFpHOXViSGtnWkdGMFlUb2dlMXh1SUNBZ0lDQWdJQ0F2S2lvZ1RXVnpjMkZuWlNCa1pYTmpjbWxpYVc1bklIUm9aU0JrYVhOamIyNXVaV04wSUhKbFlYTnZiaUFxTDF4dUlDQWdJQ0FnSUNCbGRtVnVkRk4wY21sdVp6b2djM1J5YVc1bk8xeHVJQ0FnSUNBZ0lDQXZLaW9nZEhKMVpTQnBaaUIwYUdVZ2RYTmxjaUJwY3lCaFlteGxJSFJ2SUhKbFkyOXVibVZqZEN3Z1ptRnNjMlVnYVdZZ1pHbHpZMjl1Ym1WamRHVmtJR0psWTJGMWMyVWdiMllnZFc1eVpXTnZkbVZ5WVdKc1pTQnlaV0Z6YjI1eklHeHBhMlVnYm05MElHRmliR1VnZEc4Z1kyOXVibVZqZENCMGJ5QjBhR1VnYzJsbmJtRnNhVzVuSUhObGNuWmxjaUFxTDF4dUlDQWdJQ0FnSUNCaGJHeHZkME5zYVdOclZHOVNaV052Ym01bFkzUTZJR0p2YjJ4bFlXNDdYRzRnSUNBZ2ZUdGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaGtZWFJoT2lCWFpXSlNkR05FYVhOamIyNXVaV04wWldSRmRtVnVkRnNuWkdGMFlTZGRLU0I3WEc0Z0lDQWdJQ0FnSUhOMWNHVnlLQ2QzWldKU2RHTkVhWE5qYjI1dVpXTjBaV1FuS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVrWVhSaElEMGdaR0YwWVR0Y2JpQWdJQ0I5WEc1OVhHNWNiaThxS2x4dUlDb2dRVzRnWlhabGJuUWdkR2hoZENCcGN5QmxiV2wwZEdWa0lIZG9aVzRnVWxSRFJHRjBZVU5vWVc1dVpXd2dhWE1nYjNCbGJtVmtMbHh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nUkdGMFlVTm9ZVzV1Wld4UGNHVnVSWFpsYm5RZ1pYaDBaVzVrY3lCRmRtVnVkQ0I3WEc0Z0lDQWdjbVZoWkc5dWJIa2dkSGx3WlRvZ0oyUmhkR0ZEYUdGdWJtVnNUM0JsYmljN1hHNGdJQ0FnY21WaFpHOXViSGtnWkdGMFlUb2dlMXh1SUNBZ0lDQWdJQ0F2S2lvZ1JHRjBZU0JqYUdGdWJtVnNJR3hoWW1Wc0xpQlBibVVnYjJZZ0oyUmhkR0ZqYUdGdWJtVnNKeXdnSjNObGJtUXRaR0YwWVdOb1lXNXVaV3duTENBbmNtVmpkaTFrWVhSaFkyaGhibTVsYkNjZ0tpOWNiaUFnSUNBZ0lDQWdiR0ZpWld3NklITjBjbWx1Wnp0Y2JpQWdJQ0FnSUNBZ0x5b3FJRkpVUTBSaGRHRkRhR0Z1Ym1Wc0lHOXVUM0JsYmlCbGRtVnVkQ0FxTDF4dUlDQWdJQ0FnSUNCbGRtVnVkRG9nUlhabGJuUmNiaUFnSUNCOU8xeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtHUmhkR0U2SUVSaGRHRkRhR0Z1Ym1Wc1QzQmxia1YyWlc1MFd5ZGtZWFJoSjEwcElIdGNiaUFnSUNBZ0lDQWdjM1Z3WlhJb0oyUmhkR0ZEYUdGdWJtVnNUM0JsYmljcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1SaGRHRWdQU0JrWVhSaE8xeHVJQ0FnSUgxY2JuMWNibHh1THlvcVhHNGdLaUJCYmlCbGRtVnVkQ0IwYUdGMElHbHpJR1Z0YVhSMFpXUWdkMmhsYmlCU1ZFTkVZWFJoUTJoaGJtNWxiQ0JwY3lCamJHOXpaV1F1WEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCRVlYUmhRMmhoYm01bGJFTnNiM05sUlhabGJuUWdaWGgwWlc1a2N5QkZkbVZ1ZENCN1hHNGdJQ0FnY21WaFpHOXViSGtnZEhsd1pUb2dKMlJoZEdGRGFHRnVibVZzUTJ4dmMyVW5PMXh1SUNBZ0lISmxZV1J2Ym14NUlHUmhkR0U2SUh0Y2JpQWdJQ0FnSUNBZ0x5b3FJRVJoZEdFZ1kyaGhibTVsYkNCc1lXSmxiQzRnVDI1bElHOW1JQ2RrWVhSaFkyaGhibTVsYkNjc0lDZHpaVzVrTFdSaGRHRmphR0Z1Ym1Wc0p5d2dKM0psWTNZdFpHRjBZV05vWVc1dVpXd25JQ292WEc0Z0lDQWdJQ0FnSUd4aFltVnNPaUJ6ZEhKcGJtYzdYRzRnSUNBZ0lDQWdJQzhxS2lCU1ZFTkVZWFJoUTJoaGJtNWxiQ0J2YmtOc2IzTmxJR1YyWlc1MElDb3ZYRzRnSUNBZ0lDQWdJR1YyWlc1ME9pQkZkbVZ1ZEZ4dUlDQWdJSDA3WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvWkdGMFlUb2dSR0YwWVVOb1lXNXVaV3hEYkc5elpVVjJaVzUwV3lka1lYUmhKMTBwSUh0Y2JpQWdJQ0FnSUNBZ2MzVndaWElvSjJSaGRHRkRhR0Z1Ym1Wc1EyeHZjMlVuS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVrWVhSaElEMGdaR0YwWVR0Y2JpQWdJQ0I5WEc1OVhHNWNiaThxS2x4dUlDb2dRVzRnWlhabGJuUWdkR2hoZENCcGN5QmxiV2wwZEdWa0lHOXVJRkpVUTBSaGRHRkRhR0Z1Ym1Wc0lHVnljbTl5Y3k1Y2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklFUmhkR0ZEYUdGdWJtVnNSWEp5YjNKRmRtVnVkQ0JsZUhSbGJtUnpJRVYyWlc1MElIdGNiaUFnSUNCeVpXRmtiMjVzZVNCMGVYQmxPaUFuWkdGMFlVTm9ZVzV1Wld4RmNuSnZjaWM3WEc0Z0lDQWdjbVZoWkc5dWJIa2daR0YwWVRvZ2UxeHVJQ0FnSUNBZ0lDQXZLaW9nUkdGMFlTQmphR0Z1Ym1Wc0lHeGhZbVZzTGlCUGJtVWdiMllnSjJSaGRHRmphR0Z1Ym1Wc0p5d2dKM05sYm1RdFpHRjBZV05vWVc1dVpXd25MQ0FuY21WamRpMWtZWFJoWTJoaGJtNWxiQ2NnS2k5Y2JpQWdJQ0FnSUNBZ2JHRmlaV3c2SUhOMGNtbHVaenRjYmlBZ0lDQWdJQ0FnTHlvcUlGSlVRMFJoZEdGRGFHRnVibVZzSUc5dVJYSnliM0lnWlhabGJuUWdLaTljYmlBZ0lDQWdJQ0FnWlhabGJuUTZJRVYyWlc1MFhHNGdJQ0FnZlR0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2loa1lYUmhPaUJFWVhSaFEyaGhibTVsYkVWeWNtOXlSWFpsYm5SYkoyUmhkR0VuWFNrZ2UxeHVJQ0FnSUNBZ0lDQnpkWEJsY2lnblpHRjBZVU5vWVc1dVpXeEZjbkp2Y2ljcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1SaGRHRWdQU0JrWVhSaE8xeHVJQ0FnSUgxY2JuMWNibHh1THlvcVhHNGdLaUJCYmlCbGRtVnVkQ0IwYUdGMElHbHpJR1Z0YVhSMFpXUWdkMmhsYmlCMGFHVWdkbWxrWlc4Z2MzUnlaV0Z0SUdoaGN5QmlaV1Z1SUdsdWFYUnBZV3hwZW1Wa0xseHVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdWbWxrWlc5SmJtbDBhV0ZzYVhwbFpFVjJaVzUwSUdWNGRHVnVaSE1nUlhabGJuUWdlMXh1SUNBZ0lISmxZV1J2Ym14NUlIUjVjR1U2SUNkMmFXUmxiMGx1YVhScFlXeHBlbVZrSnp0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNiaUFnSUNBZ0lDQWdjM1Z3WlhJb0ozWnBaR1Z2U1c1cGRHbGhiR2w2WldRbktUdGNiaUFnSUNCOVhHNTlYRzVjYmk4cUtseHVJQ29nUVc0Z1pYWmxiblFnZEdoaGRDQnBjeUJsYldsMGRHVmtJSGRvWlc0Z2RtbGtaVzhnYzNSeVpXRnRJR3h2WVdScGJtY2djM1JoY25SekxseHVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdVM1J5WldGdFRHOWhaR2x1WjBWMlpXNTBJR1Y0ZEdWdVpITWdSWFpsYm5RZ2UxeHVJQ0FnSUhKbFlXUnZibXg1SUhSNWNHVTZJQ2R6ZEhKbFlXMU1iMkZrYVc1bkp6dGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpZ3BJSHRjYmlBZ0lDQWdJQ0FnYzNWd1pYSW9KM04wY21WaGJVeHZZV1JwYm1jbktUdGNiaUFnSUNCOVhHNTlYRzVjYmk4cUtseHVJQ29nUVc0Z1pYWmxiblFnZEdoaGRDQnBjeUJsYldsMGRHVmtJSGRvWlc0Z2RtbGtaVzhnYzNSeVpXRnRJR3h2WVdScGJtY2dhR0Z6SUdacGJtbHphR1ZrTGx4dUlDb3ZYRzVsZUhCdmNuUWdZMnhoYzNNZ1UzUnlaV0Z0VUhKbFEyOXVibVZqZEVWMlpXNTBJR1Y0ZEdWdVpITWdSWFpsYm5RZ2UxeHVJQ0FnSUhKbFlXUnZibXg1SUhSNWNHVTZJQ2R6ZEhKbFlXMURiMjV1WldOMEp6dGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpZ3BJSHRjYmlBZ0lDQWdJQ0FnYzNWd1pYSW9KM04wY21WaGJVTnZibTVsWTNRbktUdGNiaUFnSUNCOVhHNTlYRzVjYmk4cUtseHVJQ29nUVc0Z1pYWmxiblFnZEdoaGRDQnBjeUJsYldsMGRHVmtJSGRvWlc0Z2RtbGtaVzhnYzNSeVpXRnRJR2hoY3lCemRHOXdjR1ZrTGx4dUlDb3ZYRzVsZUhCdmNuUWdZMnhoYzNNZ1UzUnlaV0Z0VUhKbFJHbHpZMjl1Ym1WamRFVjJaVzUwSUdWNGRHVnVaSE1nUlhabGJuUWdlMXh1SUNBZ0lISmxZV1J2Ym14NUlIUjVjR1U2SUNkemRISmxZVzFFYVhOamIyNXVaV04wSnp0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNiaUFnSUNBZ0lDQWdjM1Z3WlhJb0ozTjBjbVZoYlVScGMyTnZibTVsWTNRbktUdGNiaUFnSUNCOVhHNTlYRzVjYmk4cUtseHVJQ29nUVc0Z1pYWmxiblFnZEdoaGRDQnBjeUJsYldsMGRHVmtJSGRvWlc0Z2RtbGtaVzhnYzNSeVpXRnRJR2x6SUhKbFkyOXVibVZqZEdsdVp5NWNiaUFxTDF4dVpYaHdiM0owSUdOc1lYTnpJRk4wY21WaGJWSmxZMjl1Ym1WamRFVjJaVzUwSUdWNGRHVnVaSE1nUlhabGJuUWdlMXh1SUNBZ0lISmxZV1J2Ym14NUlIUjVjR1U2SUNkemRISmxZVzFTWldOdmJtNWxZM1FuTzF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHVJQ0FnSUNBZ0lDQnpkWEJsY2lnbmMzUnlaV0Z0VW1WamIyNXVaV04wSnlrN1hHNGdJQ0FnZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRUZ1SUdWMlpXNTBJSFJvWVhRZ2FYTWdaVzFwZEhSbFpDQnBaaUIwYUdWeVpTQmhjbVVnWlhKeWIzSnpJR3h2WVdScGJtY2dkR2hsSUhacFpHVnZJSE4wY21WaGJTNWNiaUFxTDF4dVpYaHdiM0owSUdOc1lYTnpJRkJzWVhsVGRISmxZVzFGY25KdmNrVjJaVzUwSUdWNGRHVnVaSE1nUlhabGJuUWdlMXh1SUNBZ0lISmxZV1J2Ym14NUlIUjVjR1U2SUNkd2JHRjVVM1J5WldGdFJYSnliM0luTzF4dUlDQWdJSEpsWVdSdmJteDVJR1JoZEdFNklIdGNiaUFnSUNBZ0lDQWdMeW9xSUVWeWNtOXlJRzFsYzNOaFoyVWdLaTljYmlBZ0lDQWdJQ0FnYldWemMyRm5aVG9nYzNSeWFXNW5YRzRnSUNBZ2ZUdGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaGtZWFJoT2lCUWJHRjVVM1J5WldGdFJYSnliM0pGZG1WdWRGc25aR0YwWVNkZEtTQjdYRzRnSUNBZ0lDQWdJSE4xY0dWeUtDZHdiR0Y1VTNSeVpXRnRSWEp5YjNJbktUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1a1lYUmhJRDBnWkdGMFlUdGNiaUFnSUNCOVhHNTlYRzVjYmk4cUtseHVJQ29nUVc0Z1pYWmxiblFnZEdoaGRDQnBjeUJsYldsMGRHVmtJR0psWm05eVpTQjBjbmxwYm1jZ2RHOGdjM1JoY25RZ2RtbGtaVzhnY0d4aGVXSmhZMnN1WEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCUWJHRjVVM1J5WldGdFJYWmxiblFnWlhoMFpXNWtjeUJGZG1WdWRDQjdYRzRnSUNBZ2NtVmhaRzl1YkhrZ2RIbHdaVG9nSjNCc1lYbFRkSEpsWVcwbk8xeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtDa2dlMXh1SUNBZ0lDQWdJQ0J6ZFhCbGNpZ25jR3hoZVZOMGNtVmhiU2NwTzF4dUlDQWdJSDFjYm4xY2JseHVMeW9xWEc0Z0tpQkJiaUJsZG1WdWRDQjBhR0YwSUdseklHVnRhWFIwWldRZ2FXWWdkR2hsSUdKeWIzZHpaWElnY21WcVpXTjBjeUIyYVdSbGJ5QndiR0Y1WW1GamF5NGdRMkZ1SUdoaGNIQmxiaUJtYjNJZ1pYaGhiWEJzWlNCcFpseHVJQ29nZG1sa1pXOGdZWFYwYnkxd2JHRjVJSGRwZEdodmRYUWdkWE5sY2lCcGJuUmxjbUZqZEdsdmJpQnBjeUJ5WldaMWMyVmtJR0o1SUhSb1pTQmljbTkzYzJWeUxseHVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdVR3hoZVZOMGNtVmhiVkpsYW1WamRHVmtSWFpsYm5RZ1pYaDBaVzVrY3lCRmRtVnVkQ0I3WEc0Z0lDQWdjbVZoWkc5dWJIa2dkSGx3WlRvZ0ozQnNZWGxUZEhKbFlXMVNaV3BsWTNSbFpDYzdYRzRnSUNBZ2NtVmhaRzl1YkhrZ1pHRjBZVG9nZTF4dUlDQWdJQ0FnSUNBdktpb2dVbVZxWldOMGFXOXVJSEpsWVhOdmJpQXFMMXh1SUNBZ0lDQWdJQ0J5WldGemIyNDZJSFZ1YTI1dmQyNWNiaUFnSUNCOU8xeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtHUmhkR0U2SUZCc1lYbFRkSEpsWVcxU1pXcGxZM1JsWkVWMlpXNTBXeWRrWVhSaEoxMHBJSHRjYmlBZ0lDQWdJQ0FnYzNWd1pYSW9KM0JzWVhsVGRISmxZVzFTWldwbFkzUmxaQ2NwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbVJoZEdFZ1BTQmtZWFJoTzF4dUlDQWdJSDFjYm4xY2JseHVMeW9xWEc0Z0tpQkJiaUJsZG1WdWRDQjBhR0YwSUdseklHVnRhWFIwWldRZ2QyaGxiaUJ5WldObGFYWnBibWNnWVNCbWRXeHNJRVp5WldWNlpVWnlZVzFsSUdsdFlXZGxJR1p5YjIwZ1ZVVXVYRzRnS2k5Y2JtVjRjRzl5ZENCamJHRnpjeUJNYjJGa1JuSmxaWHBsUm5KaGJXVkZkbVZ1ZENCbGVIUmxibVJ6SUVWMlpXNTBJSHRjYmlBZ0lDQnlaV0ZrYjI1c2VTQjBlWEJsT2lBbmJHOWhaRVp5WldWNlpVWnlZVzFsSnp0Y2JpQWdJQ0J5WldGa2IyNXNlU0JrWVhSaE9pQjdYRzRnSUNBZ0lDQWdJQzhxS2lCMGNuVmxJR2xtSUhOb2IzVnNaQ0J6YUc5M0lHTnNhV05yTFhSdkxYQnNZWGtnYjNabGNteGhlU3dnYm05MElIUm9aU0JtY21WbGVtVWdabkpoYldVZ1kyOXVkR1Z1ZEhNZ0tpOWNiaUFnSUNBZ0lDQWdjMmh2ZFd4a1UyaHZkMUJzWVhsUGRtVnliR0Y1T2lCaWIyOXNaV0Z1TzF4dUlDQWdJQ0FnSUNBdktpb2dkSEoxWlNCcFppQjBhR1VnY21WalpXbDJaV1FnYVcxaFoyVWdhWE1nZG1Gc2FXUWdLaTljYmlBZ0lDQWdJQ0FnYVhOV1lXeHBaRG9nWW05dmJHVmhianRjYmlBZ0lDQWdJQ0FnTHlvcUlFbHRZV2RsSUdSaGRHRXVJRU5oYmlCaVpTQmxMbWN1SUdScGMzQnNZWGxsWkNCaWVTQmxibU52WkdsdVp5QmhjeUJoSUdSaGRHRWdkWEpzTGlBcUwxeHVJQ0FnSUNBZ0lDQnFjR1ZuUkdGMFlUODZJRlZwYm5RNFFYSnlZWGs3WEc0Z0lDQWdmVHRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhrWVhSaE9pQk1iMkZrUm5KbFpYcGxSbkpoYldWRmRtVnVkRnNuWkdGMFlTZGRLU0I3WEc0Z0lDQWdJQ0FnSUhOMWNHVnlLQ2RzYjJGa1JuSmxaWHBsUm5KaGJXVW5LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWtZWFJoSUQwZ1pHRjBZVHRjYmlBZ0lDQjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1FXNGdaWFpsYm5RZ2RHaGhkQ0JwY3lCbGJXbDBkR1ZrSUhkb1pXNGdjbVZqWldsMmFXNW5JRlZ1Wm5KbFpYcGxSbkpoYldVZ2JXVnpjMkZuWlNCbWNtOXRJRlZGSUdGdVpDQjJhV1JsYnlCd2JHRjVZbUZqYXlCcGN5QmhZbTkxZENCMGJ5QmlaU0J5WlhOMWJXVmtMbHh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nU0dsa1pVWnlaV1Y2WlVaeVlXMWxSWFpsYm5RZ1pYaDBaVzVrY3lCRmRtVnVkQ0I3WEc0Z0lDQWdjbVZoWkc5dWJIa2dkSGx3WlRvZ0oyaHBaR1ZHY21WbGVtVkdjbUZ0WlNjN1hHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb0tTQjdYRzRnSUNBZ0lDQWdJSE4xY0dWeUtDZG9hV1JsUm5KbFpYcGxSbkpoYldVbktUdGNiaUFnSUNCOVhHNTlYRzVjYmk4cUtseHVJQ29nUVc0Z1pYWmxiblFnZEdoaGRDQnBjeUJsYldsMGRHVmtJSGRvWlc0Z2NtVmpaV2wyYVc1bklGZGxZbEpVUXlCemRHRjBhWE4wYVdOekxseHVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdVM1JoZEhOU1pXTmxhWFpsWkVWMlpXNTBJR1Y0ZEdWdVpITWdSWFpsYm5RZ2UxeHVJQ0FnSUhKbFlXUnZibXg1SUhSNWNHVTZJQ2R6ZEdGMGMxSmxZMlZwZG1Wa0p6dGNiaUFnSUNCeVpXRmtiMjVzZVNCa1lYUmhPaUI3WEc0Z0lDQWdJQ0FnSUM4cUtpQlRkR0YwYVhOMGFXTnpJRzlpYW1WamRDQXFMMXh1SUNBZ0lDQWdJQ0JoWjJkeVpXZGhkR1ZrVTNSaGRITTZJRUZuWjNKbFoyRjBaV1JUZEdGMGMxeHVJQ0FnSUgwN1hHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb1pHRjBZVG9nVTNSaGRITlNaV05sYVhabFpFVjJaVzUwV3lka1lYUmhKMTBwSUh0Y2JpQWdJQ0FnSUNBZ2MzVndaWElvSjNOMFlYUnpVbVZqWldsMlpXUW5LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWtZWFJoSUQwZ1pHRjBZVHRjYmlBZ0lDQjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1FXNGdaWFpsYm5RZ2RHaGhkQ0JwY3lCbGJXbDBkR1ZrSUhkb1pXNGdjM1J5WldGdFpYSWdiR2x6ZENCamFHRnVaMlZ6TGx4dUlDb3ZYRzVsZUhCdmNuUWdZMnhoYzNNZ1UzUnlaV0Z0WlhKTWFYTjBUV1Z6YzJGblpVVjJaVzUwSUdWNGRHVnVaSE1nUlhabGJuUWdlMXh1SUNBZ0lISmxZV1J2Ym14NUlIUjVjR1U2SUNkemRISmxZVzFsY2t4cGMzUk5aWE56WVdkbEp6dGNiaUFnSUNCeVpXRmtiMjVzZVNCa1lYUmhPaUI3WEc0Z0lDQWdJQ0FnSUM4cUtpQlRkSEpsWVcxbGNpQnNhWE4wSUcxbGMzTmhaMlVnWTI5dWRHRnBibWx1WnlCaGJpQmhjbkpoZVNCdlppQnpkSEpsWVcxbGNpQnBaSE1nS2k5Y2JpQWdJQ0FnSUNBZ2JXVnpjMkZuWlZOMGNtVmhiV1Z5VEdsemREb2dUV1Z6YzJGblpWTjBjbVZoYldWeVRHbHpkRHRjYmlBZ0lDQWdJQ0FnTHlvcUlFRjFkRzh0YzJWc1pXTjBaV1FnYzNSeVpXRnRaWElnWm5KdmJTQjBhR1VnYkdsemRDd2diM0lnYm5Wc2JDQnBaaUIxYm1GaWJHVWdkRzhnWVhWMGJ5MXpaV3hsWTNRZ1lXNWtJSFZ6WlhJZ2MyaHZkV3hrSUdKbElIQnliMjF3ZEdWa0lIUnZJSE5sYkdWamRDQXFMMXh1SUNBZ0lDQWdJQ0JoZFhSdlUyVnNaV04wWldSVGRISmxZVzFsY2tsa09pQnpkSEpwYm1jN1hHNGdJQ0FnSUNBZ0lDOHFLaUJYWVc1MFpXUWdjM1J5WldGdFpYSWdhV1FnWm5KdmJTQjJZWEpwYjNWeklHTnZibVpwWjNWeVlYUnBiMjV6TGlBcUwxeHVJQ0FnSUNBZ0lDQjNZVzUwWldSVGRISmxZVzFsY2tsa09pQnpkSEpwYm1jN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2loa1lYUmhPaUJUZEhKbFlXMWxja3hwYzNSTlpYTnpZV2RsUlhabGJuUmJKMlJoZEdFblhTa2dlMXh1SUNBZ0lDQWdJQ0J6ZFhCbGNpZ25jM1J5WldGdFpYSk1hWE4wVFdWemMyRm5aU2NwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbVJoZEdFZ1BTQmtZWFJoTzF4dUlDQWdJSDFjYm4xY2JseHVMeW9xWEc0Z0tpQkJiaUJsZG1WdWRDQjBhR0YwSUdseklHVnRhWFIwWldRZ2QyaGxiaUJoSUhOMVluTmpjbWxpWldRZ2RHOGdjM1J5WldGdFpYSW5jeUJwWkNCamFHRnVaMlZ6TGx4dUlDb3ZYRzVsZUhCdmNuUWdZMnhoYzNNZ1UzUnlaV0Z0WlhKSlJFTm9ZVzVuWldSTlpYTnpZV2RsUlhabGJuUWdaWGgwWlc1a2N5QkZkbVZ1ZENCN1hHNGdJQ0FnY21WaFpHOXViSGtnZEhsd1pUb2dKM04wY21WaGJXVnlTVVJEYUdGdVoyVmtUV1Z6YzJGblpTYzdYRzRnSUNBZ2NtVmhaRzl1YkhrZ1pHRjBZVG9nZTF4dUlDQWdJQ0FnSUNBdktpb2dWR2hsSUc1bGR5QkpSQ0J2WmlCMGFHVWdjM1J5WldGdFpYSXVJQ292WEc0Z0lDQWdJQ0FnSUc1bGQwbEVPaUJ6ZEhKcGJtYzdYRzRnSUNBZ2ZUdGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaGtZWFJoT2lCVGRISmxZVzFsY2tsRVEyaGhibWRsWkUxbGMzTmhaMlZGZG1WdWRGc25aR0YwWVNkZEtTQjdYRzRnSUNBZ0lDQWdJSE4xY0dWeUtDZFRkSEpsWVcxbGNrbEVRMmhoYm1kbFpFMWxjM05oWjJVbktUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1a1lYUmhJRDBnWkdGMFlUdGNiaUFnSUNCOVhHNTlYRzVjYmk4cUtseHVJQ29nUVc0Z1pYWmxiblFnZEdoaGRDQnBjeUJsYldsMGRHVmtJSGRvWlc0Z2NtVmpaV2wyYVc1bklHeGhkR1Z1WTNrZ2RHVnpkQ0J5WlhOMWJIUnpMbHh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nVEdGMFpXNWplVlJsYzNSU1pYTjFiSFJGZG1WdWRDQmxlSFJsYm1SeklFVjJaVzUwSUh0Y2JpQWdJQ0J5WldGa2IyNXNlU0IwZVhCbE9pQW5iR0YwWlc1amVWUmxjM1JTWlhOMWJIUW5PMXh1SUNBZ0lISmxZV1J2Ym14NUlHUmhkR0U2SUh0Y2JpQWdJQ0FnSUNBZ0x5b3FJRXhoZEdWdVkza2dkR1Z6ZENCeVpYTjFiSFFnYjJKcVpXTjBJQ292WEc0Z0lDQWdJQ0FnSUd4aGRHVnVZM2xVYVcxcGJtZHpPaUJNWVhSbGJtTjVWR1Z6ZEZKbGMzVnNkSE5jYmlBZ0lDQjlPMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLR1JoZEdFNklFeGhkR1Z1WTNsVVpYTjBVbVZ6ZFd4MFJYWmxiblJiSjJSaGRHRW5YU2tnZTF4dUlDQWdJQ0FnSUNCemRYQmxjaWduYkdGMFpXNWplVlJsYzNSU1pYTjFiSFFuS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVrWVhSaElEMGdaR0YwWVR0Y2JpQWdJQ0I5WEc1OVhHNWNiaThxS2x4dUlDb2dRVzRnWlhabGJuUWdkR2hoZENCcGN5QmxiV2wwZEdWa0lIZG9aVzRnY21WalpXbDJhVzVuSUdSaGRHRWdZMmhoYm01bGJDQnNZWFJsYm1ONUlIUmxjM1FnY21WemNHOXVjMlVnWm5KdmJTQnpaWEoyWlhJdVhHNGdLaUJVYUdseklHVjJaVzUwSUdseklHaGhibVJzWldRZ1lua2dSR0YwWVVOb1lXNXVaV3hNWVhSbGJtTjVWR1Z6ZEVOdmJuUnliMnhzWlhKY2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklFUmhkR0ZEYUdGdWJtVnNUR0YwWlc1amVWUmxjM1JTWlhOd2IyNXpaVVYyWlc1MElHVjRkR1Z1WkhNZ1JYWmxiblFnZTF4dUlDQWdJSEpsWVdSdmJteDVJSFI1Y0dVNklDZGtZWFJoUTJoaGJtNWxiRXhoZEdWdVkzbFVaWE4wVW1WemNHOXVjMlVuTzF4dUlDQWdJSEpsWVdSdmJteDVJR1JoZEdFNklIdGNiaUFnSUNBZ0lDQWdMeW9xSUV4aGRHVnVZM2tnZEdWemRDQnlaWE4xYkhRZ2IySnFaV04wSUNvdlhHNGdJQ0FnSUNBZ0lISmxjM0J2Ym5ObE9pQkVZWFJoUTJoaGJtNWxiRXhoZEdWdVkzbFVaWE4wVW1WemNHOXVjMlZjYmlBZ0lDQjlPMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLR1JoZEdFNklFUmhkR0ZEYUdGdWJtVnNUR0YwWlc1amVWUmxjM1JTWlhOd2IyNXpaVVYyWlc1MFd5ZGtZWFJoSjEwcElIdGNiaUFnSUNBZ0lDQWdjM1Z3WlhJb0oyUmhkR0ZEYUdGdWJtVnNUR0YwWlc1amVWUmxjM1JTWlhOd2IyNXpaU2NwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbVJoZEdFZ1BTQmtZWFJoTzF4dUlDQWdJSDFjYm4xY2JseHVMeW9xWEc0Z0tpQkJiaUJsZG1WdWRDQjBhR0YwSUdseklHVnRhWFIwWldRZ2QyaGxiaUJrWVhSaElHTm9ZVzV1Wld3Z2JHRjBaVzVqZVNCMFpYTjBJSEpsYzNWc2RITWdZWEpsSUhKbFlXUjVMbHh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nUkdGMFlVTm9ZVzV1Wld4TVlYUmxibU41VkdWemRGSmxjM1ZzZEVWMlpXNTBJR1Y0ZEdWdVpITWdSWFpsYm5RZ2UxeHVJQ0FnSUhKbFlXUnZibXg1SUhSNWNHVTZJQ2RrWVhSaFEyaGhibTVsYkV4aGRHVnVZM2xVWlhOMFVtVnpkV3gwSnp0Y2JpQWdJQ0J5WldGa2IyNXNlU0JrWVhSaE9pQjdYRzRnSUNBZ0lDQWdJQzhxS2lCTVlYUmxibU41SUhSbGMzUWdjbVZ6ZFd4MElHOWlhbVZqZENBcUwxeHVJQ0FnSUNBZ0lDQnlaWE4xYkhRNklFUmhkR0ZEYUdGdWJtVnNUR0YwWlc1amVWUmxjM1JTWlhOMWJIUmNiaUFnSUNCOU8xeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtHUmhkR0U2SUVSaGRHRkRhR0Z1Ym1Wc1RHRjBaVzVqZVZSbGMzUlNaWE4xYkhSRmRtVnVkRnNuWkdGMFlTZGRLU0I3WEc0Z0lDQWdJQ0FnSUhOMWNHVnlLQ2RrWVhSaFEyaGhibTVsYkV4aGRHVnVZM2xVWlhOMFVtVnpkV3gwSnlrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WkdGMFlTQTlJR1JoZEdFN1hHNGdJQ0FnZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRUZ1SUdWMlpXNTBJSFJvWVhRZ2FYTWdaVzFwZEhSbFpDQjNhR1Z1SUhKbFkyVnBkbWx1WnlCcGJtbDBhV0ZzSUhObGRIUnBibWR6SUdaeWIyMGdWVVV1WEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCSmJtbDBhV0ZzVTJWMGRHbHVaM05GZG1WdWRDQmxlSFJsYm1SeklFVjJaVzUwSUh0Y2JpQWdJQ0J5WldGa2IyNXNlU0IwZVhCbE9pQW5hVzVwZEdsaGJGTmxkSFJwYm1kekp6dGNiaUFnSUNCeVpXRmtiMjVzZVNCa1lYUmhPaUI3WEc0Z0lDQWdJQ0FnSUM4cUtpQkpibWwwYVdGc0lITmxkSFJwYm1keklHWnliMjBnVlVVZ0tpOWNiaUFnSUNBZ0lDQWdjMlYwZEdsdVozTTZJRWx1YVhScFlXeFRaWFIwYVc1bmMxeHVJQ0FnSUgwN1hHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb1pHRjBZVG9nU1c1cGRHbGhiRk5sZEhScGJtZHpSWFpsYm5SYkoyUmhkR0VuWFNrZ2UxeHVJQ0FnSUNBZ0lDQnpkWEJsY2lnbmFXNXBkR2xoYkZObGRIUnBibWR6SnlrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WkdGMFlTQTlJR1JoZEdFN1hHNGdJQ0FnZlZ4dWZWeHVYRzVsZUhCdmNuUWdkSGx3WlNCVFpYUjBhVzVuYzBSaGRHRWdQVnh1SUNBZ0lId2dlMXh1SUNBZ0lDQWdJQ0FnSUM4cUtpQkdiR0ZuSUdsa0lDb3ZYRzRnSUNBZ0lDQWdJQ0FnYVdRNklFWnNZV2R6U1dSek8xeHVJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklDZG1iR0ZuSnp0Y2JpQWdJQ0FnSUNBZ0lDQXZLaW9nUm14aFp5QjJZV3gxWlNBcUwxeHVJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQmliMjlzWldGdU8xeHVJQ0FnSUNBZ0lDQWdJQzhxS2lCVFpYUjBhVzVuUm14aFp5QnZZbXBsWTNRZ0tpOWNiaUFnSUNBZ0lDQWdJQ0IwWVhKblpYUTZJRk5sZEhScGJtZEdiR0ZuTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSHdnZTF4dUlDQWdJQ0FnSUNBZ0lDOHFLaUJPZFcxbGNtbGpJSE5sZEhScGJtY2dhV1FnS2k5Y2JpQWdJQ0FnSUNBZ0lDQnBaRG9nVG5WdFpYSnBZMUJoY21GdFpYUmxjbk5KWkhNN1hHNGdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0oyNTFiV0psY2ljN1hHNGdJQ0FnSUNBZ0lDQWdMeW9xSUU1MWJXVnlhV01nYzJWMGRHbHVaeUIyWVd4MVpTQXFMMXh1SUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ1ZFcxaVpYSTdYRzRnSUNBZ0lDQWdJQ0FnTHlvcUlGTmxkSFJwYm1kT2RXMWlaWElnYjJKcVpXTjBJQ292WEc0Z0lDQWdJQ0FnSUNBZ2RHRnlaMlYwT2lCVFpYUjBhVzVuVG5WdFltVnlPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lId2dlMXh1SUNBZ0lDQWdJQ0FnSUM4cUtpQlVaWGgwSUhObGRIUnBibWNnYVdRZ0tpOWNiaUFnSUNBZ0lDQWdJQ0JwWkRvZ1ZHVjRkRkJoY21GdFpYUmxjbk5KWkhNN1hHNGdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0ozUmxlSFFuTzF4dUlDQWdJQ0FnSUNBZ0lDOHFLaUJVWlhoMElITmxkSFJwYm1jZ2RtRnNkV1VnS2k5Y2JpQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2MzUnlhVzVuTzF4dUlDQWdJQ0FnSUNBZ0lDOHFLaUJUWlhSMGFXNW5WR1Y0ZENCdlltcGxZM1FnS2k5Y2JpQWdJQ0FnSUNBZ0lDQjBZWEpuWlhRNklGTmxkSFJwYm1kVVpYaDBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lId2dlMXh1SUNBZ0lDQWdJQ0FnSUM4cUtpQlBjSFJwYjI0Z2MyVjBkR2x1WnlCcFpDQXFMMXh1SUNBZ0lDQWdJQ0FnSUdsa09pQlBjSFJwYjI1UVlYSmhiV1YwWlhKelNXUnpPMXh1SUNBZ0lDQWdJQ0FnSUhSNWNHVTZJQ2R2Y0hScGIyNG5PMXh1SUNBZ0lDQWdJQ0FnSUM4cUtpQlBjSFJwYjI0Z2MyVjBkR2x1WnlCelpXeGxZM1JsWkNCMllXeDFaU0FxTDF4dUlDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCemRISnBibWM3WEc0Z0lDQWdJQ0FnSUNBZ0x5b3FJRk5sZEhScGJtZFBjSFJwYjI0Z2IySnFaV04wSUNvdlhHNGdJQ0FnSUNBZ0lDQWdkR0Z5WjJWME9pQlRaWFIwYVc1blQzQjBhVzl1TzF4dUlDQWdJQ0FnZlR0Y2JseHVMeW9xWEc0Z0tpQkJiaUJsZG1WdWRDQjBhR0YwSUdseklHVnRhWFIwWldRZ2QyaGxiaUJRYVhobGJGTjBjbVZoYldsdVp5QnpaWFIwYVc1bmN5QmphR0Z1WjJVdVhHNGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5QlRaWFIwYVc1bmMwTm9ZVzVuWldSRmRtVnVkQ0JsZUhSbGJtUnpJRVYyWlc1MElIdGNiaUFnSUNCeVpXRmtiMjVzZVNCMGVYQmxPaUFuYzJWMGRHbHVaM05EYUdGdVoyVmtKenRjYmlBZ0lDQnlaV0ZrYjI1c2VTQmtZWFJoT2lCVFpYUjBhVzVuYzBSaGRHRTdYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aR0YwWVRvZ1UyVjBkR2x1WjNORGFHRnVaMlZrUlhabGJuUmJKMlJoZEdFblhTa2dlMXh1SUNBZ0lDQWdJQ0J6ZFhCbGNpZ25jMlYwZEdsdVozTkRhR0Z1WjJWa0p5azdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpHRjBZU0E5SUdSaGRHRTdYRzRnSUNBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUVWMlpXNTBJR1Z0YVhSMFpXUWdkMmhsYmlCaGJpQllVaUJUWlhOemFXOXVJSE4wWVhKMGMxeHVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdXSEpUWlhOemFXOXVVM1JoY25SbFpFVjJaVzUwSUdWNGRHVnVaSE1nUlhabGJuUWdlMXh1SUNBZ0lISmxZV1J2Ym14NUlIUjVjR1U2SUNkNGNsTmxjM05wYjI1VGRHRnlkR1ZrSnp0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNiaUFnSUNBZ0lDQWdjM1Z3WlhJb0ozaHlVMlZ6YzJsdmJsTjBZWEowWldRbktUdGNiaUFnSUNCOVhHNTlYRzVjYmk4cUtseHVJQ29nUlhabGJuUWdaVzFwZEhSbFpDQjNhR1Z1SUdGdUlGaFNJRk5sYzNOcGIyNGdaVzVrYzF4dUlDb3ZYRzVsZUhCdmNuUWdZMnhoYzNNZ1dISlRaWE56YVc5dVJXNWtaV1JGZG1WdWRDQmxlSFJsYm1SeklFVjJaVzUwSUh0Y2JpQWdJQ0J5WldGa2IyNXNlU0IwZVhCbE9pQW5lSEpUWlhOemFXOXVSVzVrWldRbk8xeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtDa2dlMXh1SUNBZ0lDQWdJQ0J6ZFhCbGNpZ25lSEpUWlhOemFXOXVSVzVrWldRbktUdGNiaUFnSUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0IwZVhCbElGaHlSbkpoYldWRVlYUmhJRDBnZTF4dUlDQWdJQzhxS2lCVWFHVWdabkpoYldVZ2RHbHRaWE4wWVcxd0lDQXFMMXh1SUNBZ0lIUnBiV1U2SUVSUFRVaHBaMmhTWlhOVWFXMWxVM1JoYlhBN1hHNGdJQ0FnTHlvcUlGUm9aU0JZVWtaeVlXMWxJQ292WEc0Z0lDQWdabkpoYldVNklGaFNSbkpoYldVN1hHNTlPMXh1WEc0dktpcGNiaUFxSUVWMlpXNTBJR1Z0YVhSMFpXUWdkMmhsYmlCaGJpQllVaUJHY21GdFpTQnBjeUJqYjIxd2JHVjBaVnh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nV0hKR2NtRnRaVVYyWlc1MElHVjRkR1Z1WkhNZ1JYWmxiblFnZTF4dUlDQWdJSEpsWVdSdmJteDVJSFI1Y0dVNklDZDRja1p5WVcxbEp6dGNiaUFnSUNCeVpXRmtiMjVzZVNCa1lYUmhPaUJZY2taeVlXMWxSR0YwWVZ4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0dSaGRHRTZJRmh5Um5KaGJXVkZkbVZ1ZEZzblpHRjBZU2RkS1NCN1hHNGdJQ0FnSUNBZ0lITjFjR1Z5S0NkNGNrWnlZVzFsSnlrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WkdGMFlTQTlJR1JoZEdFN1hHNGdJQ0FnZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRUZ1SUdWMlpXNTBJSFJvWVhRZ2FYTWdaVzFwZEhSbFpDQjNhR1Z1SUhKbFkyVnBkbWx1WnlCaElIQnNZWGxsY2lCamIzVnVkQ0JtY205dElIUm9aU0J6YVdkdVlXeHNhVzVuSUhObGNuWmxjbHh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nVUd4aGVXVnlRMjkxYm5SRmRtVnVkQ0JsZUhSbGJtUnpJRVYyWlc1MElIdGNiaUFnSUNCeVpXRmtiMjVzZVNCMGVYQmxPaUFuY0d4aGVXVnlRMjkxYm5Rbk8xeHVJQ0FnSUhKbFlXUnZibXg1SUdSaGRHRTZJSHRjYmlBZ0lDQWdJQ0FnTHlvcUlHTnZkVzUwSUc5aWFtVmpkQ0FxTDF4dUlDQWdJQ0FnSUNCamIzVnVkRG9nYm5WdFltVnlYRzRnSUNBZ2ZUdGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaGtZWFJoT2lCUWJHRjVaWEpEYjNWdWRFVjJaVzUwV3lka1lYUmhKMTBwSUh0Y2JpQWdJQ0FnSUNBZ2MzVndaWElvSjNCc1lYbGxja052ZFc1MEp5azdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpHRjBZU0E5SUdSaGRHRTdYRzRnSUNBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUVGdUlHVjJaVzUwSUhSb1lYUWdhWE1nWlcxcGRIUmxaQ0IzYUdWdUlIUm9aU0IzWldKU1ZFTWdZMjl1Ym1WamRHbHZibk1nYVhNZ2NtVnNZWGxsWkNCdmRtVnlJRlJEVUM1Y2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklGZGxZbEowWTFSRFVGSmxiR0Y1UkdWMFpXTjBaV1JGZG1WdWRDQmxlSFJsYm1SeklFVjJaVzUwSUh0Y2JpQWdJQ0J5WldGa2IyNXNlU0IwZVhCbE9pQW5kMlZpVW5SalZFTlFVbVZzWVhsRVpYUmxZM1JsWkNjN1hHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb0tTQjdYRzRnSUNBZ0lDQWdJSE4xY0dWeUtDZDNaV0pTZEdOVVExQlNaV3hoZVVSbGRHVmpkR1ZrSnlrN1hHNGdJQ0FnZlZ4dWZWeHVYRzVsZUhCdmNuUWdkSGx3WlNCUWFYaGxiRk4wY21WaGJXbHVaMFYyWlc1MElEMWNiaUFnSUNCOElFRm1hMWRoY201cGJtZEJZM1JwZG1GMFpVVjJaVzUwWEc0Z0lDQWdmQ0JCWm10WFlYSnVhVzVuVlhCa1lYUmxSWFpsYm5SY2JpQWdJQ0I4SUVGbWExZGhjbTVwYm1kRVpXRmpkR2wyWVhSbFJYWmxiblJjYmlBZ0lDQjhJRUZtYTFScGJXVmtUM1YwUlhabGJuUmNiaUFnSUNCOElGWnBaR1Z2Ulc1amIyUmxja0YyWjFGUVJYWmxiblJjYmlBZ0lDQjhJRmRsWWxKMFkxTmtjRVYyWlc1MFhHNGdJQ0FnZkNCWFpXSlNkR05CZFhSdlEyOXVibVZqZEVWMlpXNTBYRzRnSUNBZ2ZDQlhaV0pTZEdORGIyNXVaV04wYVc1blJYWmxiblJjYmlBZ0lDQjhJRmRsWWxKMFkwTnZibTVsWTNSbFpFVjJaVzUwWEc0Z0lDQWdmQ0JYWldKU2RHTkdZV2xzWldSRmRtVnVkRnh1SUNBZ0lId2dWMlZpVW5SalJHbHpZMjl1Ym1WamRHVmtSWFpsYm5SY2JpQWdJQ0I4SUVSaGRHRkRhR0Z1Ym1Wc1QzQmxia1YyWlc1MFhHNGdJQ0FnZkNCRVlYUmhRMmhoYm01bGJFTnNiM05sUlhabGJuUmNiaUFnSUNCOElFUmhkR0ZEYUdGdWJtVnNSWEp5YjNKRmRtVnVkRnh1SUNBZ0lId2dWbWxrWlc5SmJtbDBhV0ZzYVhwbFpFVjJaVzUwWEc0Z0lDQWdmQ0JUZEhKbFlXMU1iMkZrYVc1blJYWmxiblJjYmlBZ0lDQjhJRk4wY21WaGJWQnlaVU52Ym01bFkzUkZkbVZ1ZEZ4dUlDQWdJSHdnVTNSeVpXRnRVbVZqYjI1dVpXTjBSWFpsYm5SY2JpQWdJQ0I4SUZOMGNtVmhiVkJ5WlVScGMyTnZibTVsWTNSRmRtVnVkRnh1SUNBZ0lId2dVR3hoZVZOMGNtVmhiVVZ5Y205eVJYWmxiblJjYmlBZ0lDQjhJRkJzWVhsVGRISmxZVzFGZG1WdWRGeHVJQ0FnSUh3Z1VHeGhlVk4wY21WaGJWSmxhbVZqZEdWa1JYWmxiblJjYmlBZ0lDQjhJRXh2WVdSR2NtVmxlbVZHY21GdFpVVjJaVzUwWEc0Z0lDQWdmQ0JJYVdSbFJuSmxaWHBsUm5KaGJXVkZkbVZ1ZEZ4dUlDQWdJSHdnVTNSaGRITlNaV05sYVhabFpFVjJaVzUwWEc0Z0lDQWdmQ0JUZEhKbFlXMWxja3hwYzNSTlpYTnpZV2RsUlhabGJuUmNiaUFnSUNCOElGTjBjbVZoYldWeVNVUkRhR0Z1WjJWa1RXVnpjMkZuWlVWMlpXNTBYRzRnSUNBZ2ZDQk1ZWFJsYm1ONVZHVnpkRkpsYzNWc2RFVjJaVzUwWEc0Z0lDQWdmQ0JFWVhSaFEyaGhibTVsYkV4aGRHVnVZM2xVWlhOMFVtVnpjRzl1YzJWRmRtVnVkRnh1SUNBZ0lId2dSR0YwWVVOb1lXNXVaV3hNWVhSbGJtTjVWR1Z6ZEZKbGMzVnNkRVYyWlc1MFhHNGdJQ0FnZkNCSmJtbDBhV0ZzVTJWMGRHbHVaM05GZG1WdWRGeHVJQ0FnSUh3Z1UyVjBkR2x1WjNORGFHRnVaMlZrUlhabGJuUmNiaUFnSUNCOElGaHlVMlZ6YzJsdmJsTjBZWEowWldSRmRtVnVkRnh1SUNBZ0lId2dXSEpUWlhOemFXOXVSVzVrWldSRmRtVnVkRnh1SUNBZ0lId2dXSEpHY21GdFpVVjJaVzUwWEc0Z0lDQWdmQ0JRYkdGNVpYSkRiM1Z1ZEVWMlpXNTBYRzRnSUNBZ2ZDQlhaV0pTZEdOVVExQlNaV3hoZVVSbGRHVmpkR1ZrUlhabGJuUTdYRzVjYm1WNGNHOXlkQ0JqYkdGemN5QkZkbVZ1ZEVWdGFYUjBaWElnWlhoMFpXNWtjeUJGZG1WdWRGUmhjbWRsZENCN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1JHbHpjR0YwWTJnZ1lTQnVaWGNnWlhabGJuUXVYRzRnSUNBZ0lDb2dRSEJoY21GdElHVWdaWFpsYm5SY2JpQWdJQ0FnS2lCQWNtVjBkWEp1YzF4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5QmthWE53WVhSamFFVjJaVzUwS0dVNklGQnBlR1ZzVTNSeVpXRnRhVzVuUlhabGJuUXBPaUJpYjI5c1pXRnVJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSE4xY0dWeUxtUnBjM0JoZEdOb1JYWmxiblFvWlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1VtVm5hWE4wWlhJZ1lXNGdaWFpsYm5RZ2FHRnVaR3hsY2k1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZEhsd1pTQmxkbVZ1ZENCdVlXMWxYRzRnSUNBZ0lDb2dRSEJoY21GdElHeHBjM1JsYm1WeUlHVjJaVzUwSUdoaGJtUnNaWElnWm5WdVkzUnBiMjVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ1lXUmtSWFpsYm5STWFYTjBaVzVsY2p4Y2JpQWdJQ0FnSUNBZ1ZDQmxlSFJsYm1SeklGQnBlR1ZzVTNSeVpXRnRhVzVuUlhabGJuUmJKM1I1Y0dVblhTeGNiaUFnSUNBZ0lDQWdSU0JsZUhSbGJtUnpJRkJwZUdWc1UzUnlaV0Z0YVc1blJYWmxiblFnSmlCN0lIUjVjR1U2SUZRZ2ZWeHVJQ0FnSUQ0b2RIbHdaVG9nVkN3Z2JHbHpkR1Z1WlhJNklDaGxPaUJGZG1WdWRDQW1JRVVwSUQwK0lIWnZhV1FwSUh0Y2JpQWdJQ0FnSUNBZ2MzVndaWEl1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWgwZVhCbExDQnNhWE4wWlc1bGNpazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVbVZ0YjNabElHRnVJR1YyWlc1MElHaGhibVJzWlhJdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhSNWNHVWdaWFpsYm5RZ2JtRnRaVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnNhWE4wWlc1bGNpQmxkbVZ1ZENCb1lXNWtiR1Z5SUdaMWJtTjBhVzl1WEc0Z0lDQWdJQ292WEc0Z0lDQWdjSFZpYkdsaklISmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSThYRzRnSUNBZ0lDQWdJRlFnWlhoMFpXNWtjeUJRYVhobGJGTjBjbVZoYldsdVowVjJaVzUwV3lkMGVYQmxKMTBzWEc0Z0lDQWdJQ0FnSUVVZ1pYaDBaVzVrY3lCUWFYaGxiRk4wY21WaGJXbHVaMFYyWlc1MElDWWdleUIwZVhCbE9pQlVJSDFjYmlBZ0lDQStLSFI1Y0dVNklGUXNJR3hwYzNSbGJtVnlPaUFvWlRvZ1JYWmxiblFnSmlCRktTQTlQaUIyYjJsa0tTQjdYRzRnSUNBZ0lDQWdJSE4xY0dWeUxuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9kSGx3WlN3Z2JHbHpkR1Z1WlhJcE8xeHVJQ0FnSUgxY2JuMWNiaUlzSWk4dklFTnZjSGx5YVdkb2RDQkZjR2xqSUVkaGJXVnpMQ0JKYm1NdUlFRnNiQ0JTYVdkb2RITWdVbVZ6WlhKMlpXUXVYRzVjYm1WNGNHOXlkQ0IwZVhCbElGVnVjbVZuYVhOMFpYSkdkVzVqZEdsdmJpQTlJQ2dwSUQwK0lIWnZhV1E3WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJGZG1WdWRFeHBjM1JsYm1WeVZISmhZMnRsY2lCN1hHNGdJQ0FnY0hKcGRtRjBaU0IxYm5KbFoybHpkR1Z5UTJGc2JHSmhZMnR6T2lCVmJuSmxaMmx6ZEdWeVJuVnVZM1JwYjI1YlhUdGNibHh1SUNBZ0lHTnZibk4wY25WamRHOXlLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMblZ1Y21WbmFYTjBaWEpEWVd4c1ltRmphM01nUFNCYlhUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkJaR1FnWVNCdVpYY2dZMkZzYkdKaFkyc2dkR2hoZENCcGN5QmxlR1ZqZFhSbFpDQjNhR1Z1SUhWdWNtVm5hWE4wWlhKQmJHd2dhWE1nWTJGc2JHVmtMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmpZV3hzWW1GamF5QmNiaUFnSUNBZ0tpOWNiaUFnSUNCaFpHUlZibkpsWjJsemRHVnlRMkZzYkdKaFkyc29ZMkZzYkdKaFkyczZJRlZ1Y21WbmFYTjBaWEpHZFc1amRHbHZiaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMblZ1Y21WbmFYTjBaWEpEWVd4c1ltRmphM011Y0hWemFDaGpZV3hzWW1GamF5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSWGhsWTNWMFpTQmhiR3dnWTJGc2JHSmhZMnR6SUdGdVpDQmpiR1ZoY2lCMGFHVWdiR2x6ZEM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0IxYm5KbFoybHpkR1Z5UVd4c0tDa2dlMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tHTnZibk4wSUdOaGJHeGlZV05ySUc5bUlIUm9hWE11ZFc1eVpXZHBjM1JsY2tOaGJHeGlZV05yY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGc2JHSmhZMnNvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjBhR2x6TG5WdWNtVm5hWE4wWlhKRFlXeHNZbUZqYTNNZ1BTQmJYVHRjYmlBZ0lDQjlYRzU5WEc0aUxDSXZMeUJEYjNCNWNtbG5hSFFnUlhCcFl5QkhZVzFsY3l3Z1NXNWpMaUJCYkd3Z1VtbG5hSFJ6SUZKbGMyVnlkbVZrTGx4dVhHNXBiWEJ2Y25RZ2V5Qk1iMmRuWlhJZ2ZTQm1jbTl0SUNjdUxpOU1iMmRuWlhJdlRHOW5aMlZ5Snp0Y2JseHVMeW9xWEc0Z0tpQlZkR2xzYVhSNUlHWjFibU4wYVc5dUlHWnZjaUJ3YjNCMWJHRjBaU0JtYVd4bElHbHVabTl5YldGMGFXOXVJR1p5YjIwZ1lubDBaU0JpZFdabVpYSnpMbHh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nUm1sc1pWVjBhV3dnZTF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZCeWIyTmxjM05sY3lCaElHWnBiR1Z6SUdWNGRHVnVjMmx2YmlCM2FHVnVJSEpsWTJWcGRtVmtJRzkyWlhJZ1pHRjBZU0JqYUdGdWJtVnNYRzRnSUNBZ0lDb2dRSEJoY21GdElIWnBaWGNnTFNCMGFHVWdabWxzWlNCbGVIUmxibk5wYjI0Z1pHRjBZVnh1SUNBZ0lDQXFMMXh1SUNBZ0lITjBZWFJwWXlCelpYUkZlSFJsYm5OcGIyNUdjbTl0UW5sMFpYTW9kbWxsZHpvZ1ZXbHVkRGhCY25KaGVTd2dabWxzWlRvZ1JtbHNaVlJsYlhCc1lYUmxLU0I3WEc0Z0lDQWdJQ0FnSUM4dklGSmxjMlYwSUdacGJHVWdhV1lnZDJVZ1oyOTBJR0VnWm1sc1pTQnRaWE56WVdkbElHRnVaQ0IzWlNCaGNtVWdibTkwSUZ3aWNtVmpaV2wyYVc1blhDSWdhWFFnZVdWMFhHNGdJQ0FnSUNBZ0lHbG1JQ2doWm1sc1pTNXlaV05sYVhacGJtY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnBiR1V1YldsdFpYUjVjR1VnUFNBbkp6dGNiaUFnSUNBZ0lDQWdJQ0FnSUdacGJHVXVaWGgwWlc1emFXOXVJRDBnSnljN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYVd4bExuSmxZMlZwZG1sdVp5QTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYVd4bExuWmhiR2xrSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1hV3hsTG5OcGVtVWdQU0F3TzF4dUlDQWdJQ0FnSUNBZ0lDQWdabWxzWlM1a1lYUmhJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYVd4bExuUnBiV1Z6ZEdGdGNGTjBZWEowSUQwZ2JtVjNJRVJoZEdVb0tTNW5aWFJVYVcxbEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjFKbFkyVnBkbVZrSUdacGNuTjBJR05vZFc1cklHOW1JR1pwYkdVbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEWmNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JqYjI1emRDQmxlSFJsYm5OcGIyNUJjMU4wY21sdVp5QTlJRzVsZHlCVVpYaDBSR1ZqYjJSbGNpZ25kWFJtTFRFMkp5a3VaR1ZqYjJSbEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1sbGR5NXpiR2xqWlNneEtWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0JNYjJkblpYSXVURzluS0V4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NJR1Y0ZEdWdWMybHZia0Z6VTNSeWFXNW5MQ0EyS1R0Y2JpQWdJQ0FnSUNBZ1ptbHNaUzVsZUhSbGJuTnBiMjRnUFNCbGVIUmxibk5wYjI1QmMxTjBjbWx1Wnp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCUWNtOWpaWE56WlhNZ1lTQm1hV3hsY3lCdGFXMWxJSFI1Y0dVZ2QyaGxiaUJ5WldObGFYWmxaQ0J2ZG1WeUlHUmhkR0VnWTJoaGJtNWxiRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjJhV1YzSUMwZ2RHaGxJR1pwYkdVZ2JXbHRaU0IwZVhCbElHUmhkR0ZjYmlBZ0lDQWdLaTljYmlBZ0lDQnpkR0YwYVdNZ2MyVjBUV2x0WlZSNWNHVkdjbTl0UW5sMFpYTW9kbWxsZHpvZ1ZXbHVkRGhCY25KaGVTd2dabWxzWlRvZ1JtbHNaVlJsYlhCc1lYUmxLU0I3WEc0Z0lDQWdJQ0FnSUM4dklGSmxjMlYwSUdacGJHVWdhV1lnZDJVZ1oyOTBJR0VnWm1sc1pTQnRaWE56WVdkbElHRnVaQ0IzWlNCaGNtVWdibTkwSUZ3aWNtVmpaV2wyYVc1blhDSWdhWFFnZVdWMFhHNGdJQ0FnSUNBZ0lHbG1JQ2doWm1sc1pTNXlaV05sYVhacGJtY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnBiR1V1YldsdFpYUjVjR1VnUFNBbkp6dGNiaUFnSUNBZ0lDQWdJQ0FnSUdacGJHVXVaWGgwWlc1emFXOXVJRDBnSnljN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYVd4bExuSmxZMlZwZG1sdVp5QTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYVd4bExuWmhiR2xrSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1hV3hsTG5OcGVtVWdQU0F3TzF4dUlDQWdJQ0FnSUNBZ0lDQWdabWxzWlM1a1lYUmhJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYVd4bExuUnBiV1Z6ZEdGdGNGTjBZWEowSUQwZ2JtVjNJRVJoZEdVb0tTNW5aWFJVYVcxbEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjFKbFkyVnBkbVZrSUdacGNuTjBJR05vZFc1cklHOW1JR1pwYkdVbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEWmNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JqYjI1emRDQnRhVzFsUVhOVGRISnBibWNnUFNCdVpYY2dWR1Y0ZEVSbFkyOWtaWElvSjNWMFppMHhOaWNwTG1SbFkyOWtaU2gyYVdWM0xuTnNhV05sS0RFcEtUdGNiaUFnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExDQnRhVzFsUVhOVGRISnBibWNzSURZcE8xeHVJQ0FnSUNBZ0lDQm1hV3hsTG0xcGJXVjBlWEJsSUQwZ2JXbHRaVUZ6VTNSeWFXNW5PMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRkJ5YjJObGMzTmxjeUJoSUdacGJHVnpJR052Ym5SbGJuUnpJSGRvWlc0Z2NtVmpaV2wyWldRZ2IzWmxjaUJrWVhSaElHTm9ZVzV1Wld4Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZG1sbGR5QXRJSFJvWlNCbWFXeGxJR052Ym5SbGJuUnpJR1JoZEdGY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6ZEdGMGFXTWdjMlYwUTI5dWRHVnVkSE5HY205dFFubDBaWE1vZG1sbGR6b2dWV2x1ZERoQmNuSmhlU3dnWm1sc1pUb2dSbWxzWlZSbGJYQnNZWFJsS1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRWxtSUhkbElHaGhkbVZ1SjNRZ2NtVmpaV2wyWldRZ2RHaGxJR2x1YVhScFlXd2djMlYwZFhBZ2FXNXpkSEoxWTNScGIyNXpMQ0J5WlhSMWNtNWNiaUFnSUNBZ0lDQWdhV1lnS0NGbWFXeGxMbkpsWTJWcGRtbHVaeWtnY21WMGRYSnVPMXh1WEc0Z0lDQWdJQ0FnSUM4dklFVjRkSEpoWTNRZ2RHaGxJSFJ2ZEdGc0lITnBlbVVnYjJZZ2RHaGxJR1pwYkdVZ0tHRmpjbTl6Y3lCaGJHd2dZMmgxYm10ektWeHVJQ0FnSUNBZ0lDQm1hV3hsTG5OcGVtVWdQU0JOWVhSb0xtTmxhV3dvWEc0Z0lDQWdJQ0FnSUNBZ0lDQnVaWGNnUkdGMFlWWnBaWGNvZG1sbGR5NXpiR2xqWlNneExDQTFLUzVpZFdabVpYSXBMbWRsZEVsdWRETXlLREFzSUhSeWRXVXBJQzljYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F4TmpNM09TQXZLaUJVYUdVZ2JXRjRhVzExYlNCdWRXMWlaWElnYjJZZ2NHRjViRzloWkNCaWFYUnpJSEJsY2lCdFpYTnpZV2RsS2k5Y2JpQWdJQ0FnSUNBZ0tUdGNibHh1SUNBZ0lDQWdJQ0F2THlCSFpYUWdkR2hsSUdacGJHVWdjR0Z5ZENCdlppQjBhR1VnY0dGNWJHOWhaRnh1SUNBZ0lDQWdJQ0JqYjI1emRDQm1hV3hsUW5sMFpYTWdQU0IyYVdWM0xuTnNhV05sS0RFZ0t5QTBLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QkJjSEJsYm1RZ2RHOGdaWGhwYzNScGJtY2daR0YwWVNCMGFHRjBJR2h2YkdSeklIUm9aU0JtYVd4bFhHNGdJQ0FnSUNBZ0lHWnBiR1V1WkdGMFlTNXdkWE5vS0dacGJHVkNlWFJsY3lrN1hHNWNiaUFnSUNBZ0lDQWdMeThnVlc1amIyMXRaVzUwSUdadmNpQmtaV0oxWjF4dUlDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktGeHVJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdCU1pXTmxhWFpsWkNCbWFXeGxJR05vZFc1ck9pQWtlMlpwYkdVdVpHRjBZUzVzWlc1bmRHaDlMeVI3Wm1sc1pTNXphWHBsZldBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0EyWEc0Z0lDQWdJQ0FnSUNrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0dacGJHVXVaR0YwWVM1c1pXNW5kR2dnUFQwOUlHWnBiR1V1YzJsNlpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1ptbHNaUzV5WldObGFYWnBibWNnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnBiR1V1ZG1Gc2FXUWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa3h2WnloTWIyZG5aWEl1UjJWMFUzUmhZMnRVY21GalpTZ3BMQ0FuVW1WalpXbDJaV1FnWTI5dGNHeGxkR1VnWm1sc1pTY3NJRFlwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2RISmhibk5tWlhKRWRYSmhkR2x2YmlBOUlHNWxkeUJFWVhSbEtDa3VaMlYwVkdsdFpTZ3BJQzBnWm1sc1pTNTBhVzFsYzNSaGJYQlRkR0Z5ZER0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIUnlZVzV6Wm1WeVFtbDBjbUYwWlNBOUlFMWhkR2d1Y205MWJtUW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLR1pwYkdVdWMybDZaU0FxSURFMklDb2dNVEF5TkNrZ0x5QjBjbUZ1YzJabGNrUjFjbUYwYVc5dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHQkJkbVZ5WVdkbElIUnlZVzV6Wm1WeUlHSnBkSEpoZEdVNklDUjdkSEpoYm5ObVpYSkNhWFJ5WVhSbGZXdGlMM01nYjNabGNpQWtlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGNtRnVjMlpsY2tSMWNtRjBhVzl1SUM4Z01UQXdNRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnYzJWamIyNWtjMkFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTmx4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnUm1sc1pTQnlaV052Ym5OMGNuVmpkR2x2Ymx4dUlDQWdJQ0FnSUNBZ0lDQWdMeW9xWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdLaUJGZUdGdGNHeGxJR052WkdVZ2RHOGdjbVZqYjI1emRISjFZM1FnZEdobElHWnBiR1ZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQXFYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0tpQlVhR2x6SUdOdlpHVWdjbVZqYjI1emRISjFZM1J6SUhSb1pTQnlaV05sYVhabFpDQmtZWFJoSUdsdWRHOGdkR2hsSUc5eWFXZHBibUZzSUdacGJHVWdZbUZ6WldRZ2IyNGdkR2hsSUcxcGJXVWdkSGx3WlNCaGJtUWdaWGgwWlc1emFXOXVJSEJ5YjNacFpHVmtJR0Z1WkNCMGFHVnVJR1J2ZDI1c2IyRmtjeUIwYUdVZ2NtVmpiMjV6ZEhKMVkzUmxaQ0JtYVd4bFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnS2k5Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElISmxZMlZwZG1Wa0lEMGdibVYzSUVKc2IySW9abWxzWlM1a1lYUmhMQ0I3SUhSNWNHVTZJR1pwYkdVdWJXbHRaWFI1Y0dVZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JoSUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duWVNjcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWVM1elpYUkJkSFJ5YVdKMWRHVW9KMmh5WldZbkxDQlZVa3d1WTNKbFlYUmxUMkpxWldOMFZWSk1LSEpsWTJWcGRtVmtLU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhMbk5sZEVGMGRISnBZblYwWlNnblpHOTNibXh2WVdRbkxDQmdkSEpoYm5ObVpYSXVKSHRtYVd4bExtVjRkR1Z1YzJsdmJuMWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtSnZaSGt1WVhCd1pXNWtLR0VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnYVdZZ2VXOTFJR0Z5WlNCemJ5QnBibU5zYVc1bFpDQjBieUJ0WVd0bElHbDBJR0YxZEc4dFpHOTNibXh2WVdRc0lHUnZJSE52YldWMGFHbHVaeUJzYVd0bE9pQmhMbU5zYVdOcktDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCaExuSmxiVzkyWlNncE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR1pwYkdVdVpHRjBZUzVzWlc1bmRHZ2dQaUJtYVd4bExuTnBlbVVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1pwYkdVdWNtVmpaV2wyYVc1bklEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSWEp5YjNJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGtkbGRGTjBZV05yVkhKaFkyVW9LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JnVW1WalpXbDJaV1FnWW1sbloyVnlJR1pwYkdVZ2RHaGhiaUJoWkhabGNuUnBjMlZrT2lBa2UyWnBiR1V1WkdGMFlTNXNaVzVuZEdoOUx5UjdabWxzWlM1emFYcGxmV0JjYmlBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1FTQmpiR0Z6Y3lCMGFHRjBJSEpsY0hKbGMyVnVkSE1nWVNCMFpXMXdiR0YwWlNCbWIzSWdZU0JrYjNkdWJHOWhaR1ZrSUdacGJHVmNiaUFxTDF4dVpYaHdiM0owSUdOc1lYTnpJRVpwYkdWVVpXMXdiR0YwWlNCN1hHNGdJQ0FnYldsdFpYUjVjR1VnUFNBbkp6dGNiaUFnSUNCbGVIUmxibk5wYjI0Z1BTQW5KenRjYmlBZ0lDQnlaV05sYVhacGJtY2dQU0JtWVd4elpUdGNiaUFnSUNCemFYcGxJRDBnTUR0Y2JpQWdJQ0JrWVhSaE9pQkJjbkpoZVR4VmFXNTBPRUZ5Y21GNVBpQTlJRnRkTzF4dUlDQWdJSFpoYkdsa0lEMGdabUZzYzJVN1hHNGdJQ0FnZEdsdFpYTjBZVzF3VTNSaGNuUTZJRzUxYldKbGNqdGNibjFjYmlJc0ltVjRjRzl5ZENCamJHRnpjeUJTVkVOVmRHbHNjeUI3WEc0Z0lDQWdjM1JoZEdsaklHbHpWbWxrWlc5VWNtRnVjMk5wWlhabGNpaDBjbUZ1YzJObGFYWmxjaUE2SUZKVVExSjBjRlJ5WVc1elkyVnBkbVZ5SUh3Z2RXNWtaV1pwYm1Wa0tTQTZJR0p2YjJ4bFlXNGdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1allXNVVjbUZ1YzJObGFYWmxjbEpsWTJWcGRtVldhV1JsYnloMGNtRnVjMk5sYVhabGNpa2dmSHdnZEdocGN5NWpZVzVVY21GdWMyTmxhWFpsY2xObGJtUldhV1JsYnloMGNtRnVjMk5sYVhabGNpazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2MzUmhkR2xqSUdOaGJsUnlZVzV6WTJWcGRtVnlVbVZqWldsMlpWWnBaR1Z2S0hSeVlXNXpZMlZwZG1WeUlEb2dVbFJEVW5Sd1ZISmhibk5qWldsMlpYSWdmQ0IxYm1SbFptbHVaV1FwSURvZ1ltOXZiR1ZoYmlCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBaElYUnlZVzV6WTJWcGRtVnlJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9kSEpoYm5OalpXbDJaWEl1WkdseVpXTjBhVzl1SUQwOVBTQW5jMlZ1WkhKbFkzWW5JSHg4SUhSeVlXNXpZMlZwZG1WeUxtUnBjbVZqZEdsdmJpQTlQVDBnSjNKbFkzWnZibXg1SnlrZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUhSeVlXNXpZMlZwZG1WeUxuSmxZMlZwZG1WeUlDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNCMGNtRnVjMk5sYVhabGNpNXlaV05sYVhabGNpNTBjbUZqYXlBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnZEhKaGJuTmpaV2wyWlhJdWNtVmpaV2wyWlhJdWRISmhZMnN1YTJsdVpDQTlQVDBnSjNacFpHVnZKenNnSUNBZ1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYzNSaGRHbGpJR05oYmxSeVlXNXpZMlZwZG1WeVUyVnVaRlpwWkdWdktIUnlZVzV6WTJWcGRtVnlJRG9nVWxSRFVuUndWSEpoYm5OalpXbDJaWElnZkNCMWJtUmxabWx1WldRcElEb2dZbTl2YkdWaGJpQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQWhJWFJ5WVc1elkyVnBkbVZ5SUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FvZEhKaGJuTmpaV2wyWlhJdVpHbHlaV04wYVc5dUlEMDlQU0FuYzJWdVpISmxZM1luSUh4OElIUnlZVzV6WTJWcGRtVnlMbVJwY21WamRHbHZiaUE5UFQwZ0ozTmxibVJ2Ym14NUp5a2dKaVpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnlZVzV6WTJWcGRtVnlMbk5sYm1SbGNpQW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RISmhibk5qWldsMlpYSXVjMlZ1WkdWeUxuUnlZV05ySUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwY21GdWMyTmxhWFpsY2k1elpXNWtaWEl1ZEhKaFkyc3VhMmx1WkNBOVBUMGdKM1pwWkdWdkp6c2dJQ0FnWEc0Z0lDQWdmVnh1WEc0Z0lDQWdjM1JoZEdsaklHbHpRWFZrYVc5VWNtRnVjMk5wWlhabGNpaDBjbUZ1YzJObGFYWmxjaUE2SUZKVVExSjBjRlJ5WVc1elkyVnBkbVZ5SUh3Z2RXNWtaV1pwYm1Wa0tTQTZJR0p2YjJ4bFlXNGdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1allXNVVjbUZ1YzJObGFYWmxjbEpsWTJWcGRtVkJkV1JwYnloMGNtRnVjMk5sYVhabGNpa2dmSHdnZEdocGN5NWpZVzVVY21GdWMyTmxhWFpsY2xObGJtUkJkV1JwYnloMGNtRnVjMk5sYVhabGNpazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2MzUmhkR2xqSUdOaGJsUnlZVzV6WTJWcGRtVnlVbVZqWldsMlpVRjFaR2x2S0hSeVlXNXpZMlZwZG1WeUlEb2dVbFJEVW5Sd1ZISmhibk5qWldsMlpYSWdmQ0IxYm1SbFptbHVaV1FwSURvZ1ltOXZiR1ZoYmlCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBaElYUnlZVzV6WTJWcGRtVnlJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9kSEpoYm5OalpXbDJaWEl1WkdseVpXTjBhVzl1SUQwOVBTQW5jMlZ1WkhKbFkzWW5JSHg4SUhSeVlXNXpZMlZwZG1WeUxtUnBjbVZqZEdsdmJpQTlQVDBnSjNKbFkzWnZibXg1SnlrZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUhSeVlXNXpZMlZwZG1WeUxuSmxZMlZwZG1WeUlDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNCMGNtRnVjMk5sYVhabGNpNXlaV05sYVhabGNpNTBjbUZqYXlBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnZEhKaGJuTmpaV2wyWlhJdWNtVmpaV2wyWlhJdWRISmhZMnN1YTJsdVpDQTlQVDBnSjJGMVpHbHZKenNnSUNBZ1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYzNSaGRHbGpJR05oYmxSeVlXNXpZMlZwZG1WeVUyVnVaRUYxWkdsdktIUnlZVzV6WTJWcGRtVnlJRG9nVWxSRFVuUndWSEpoYm5OalpXbDJaWElnZkNCMWJtUmxabWx1WldRcElEb2dZbTl2YkdWaGJpQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQWhJWFJ5WVc1elkyVnBkbVZ5SUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FvZEhKaGJuTmpaV2wyWlhJdVpHbHlaV04wYVc5dUlEMDlQU0FuYzJWdVpISmxZM1luSUh4OElIUnlZVzV6WTJWcGRtVnlMbVJwY21WamRHbHZiaUE5UFQwZ0ozTmxibVJ2Ym14NUp5a2dKaVpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnlZVzV6WTJWcGRtVnlMbk5sYm1SbGNpQW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RISmhibk5qWldsMlpYSXVjMlZ1WkdWeUxuUnlZV05ySUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwY21GdWMyTmxhWFpsY2k1elpXNWtaWEl1ZEhKaFkyc3VhMmx1WkNBOVBUMGdKMkYxWkdsdkp6dGNiaUFnSUNCOVhHNTlJaXdpTHk4Z1EyOXdlWEpwWjJoMElFVndhV01nUjJGdFpYTXNJRWx1WXk0Z1FXeHNJRkpwWjJoMGN5QlNaWE5sY25abFpDNWNibHh1YVcxd2IzSjBJSHNnVFc5MWMyVkRiMjUwY205c2JHVnlJSDBnWm5KdmJTQW5MaTR2U1c1d2RYUnpMMDF2ZFhObFEyOXVkSEp2Ykd4bGNpYzdYRzVwYlhCdmNuUWdleUJNYjJkblpYSWdmU0JtY205dElDY3VMaTlNYjJkblpYSXZURzluWjJWeUp6dGNibWx0Y0c5eWRDQjdJRlpwWkdWdlVHeGhlV1Z5SUgwZ1puSnZiU0FuTGk5V2FXUmxiMUJzWVhsbGNpYzdYRzVjYmk4cUtseHVJQ29nVm1sa1pXOGdVR3hoZVdWeUlFTnZiblJ5YjJ4c1pYSWdhR0Z1Wkd4bGN5QjBhR1VnWTNKbFlYUnBiMjRnYjJZZ2RHaGxJSFpwWkdWdklFaFVUVXdnWld4bGJXVnVkQ0JoYm1RZ1lXeHNJR2hoYm1Sc1pYSnpYRzRnS2k5Y2JtVjRjRzl5ZENCamJHRnpjeUJUZEhKbFlXMURiMjUwY205c2JHVnlJSHRjYmlBZ0lDQjJhV1JsYjBWc1pXMWxiblJRY205MmFXUmxjam9nVm1sa1pXOVFiR0Y1WlhJN1hHNGdJQ0FnWVhWa2FXOUZiR1Z0Wlc1ME9pQklWRTFNUVhWa2FXOUZiR1Z0Wlc1ME8xeHVJQ0FnSUcxdmRYTmxRMjl1ZEhKdmJHeGxjam9nVFc5MWMyVkRiMjUwY205c2JHVnlPMXh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSFpwWkdWdlJXeGxiV1Z1ZEZCeWIzWnBaR1Z5SUZacFpHVnZJRkJzWVhsbGNpQnBibk4wWVc1alpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtIWnBaR1Z2Uld4bGJXVnVkRkJ5YjNacFpHVnlPaUJXYVdSbGIxQnNZWGxsY2lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5acFpHVnZSV3hsYldWdWRGQnliM1pwWkdWeUlEMGdkbWxrWlc5RmJHVnRaVzUwVUhKdmRtbGtaWEk3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZWFZrYVc5RmJHVnRaVzUwSUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duUVhWa2FXOG5LU0JoY3lCSVZFMU1RWFZrYVc5RmJHVnRaVzUwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMblpwWkdWdlJXeGxiV1Z1ZEZCeWIzWnBaR1Z5TG5ObGRFRjFaR2x2Uld4bGJXVnVkQ2gwYUdsekxtRjFaR2x2Uld4bGJXVnVkQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nU0dGdVpHeGxjeUIzYUdWdUlIUm9aU0JRWldWeUlHTnZibTVsWTNScGIyNGdhR0Z6SUdFZ2RISmhZMnNnWlhabGJuUmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2NuUmpWSEpoWTJ0RmRtVnVkQ0F0SUZKVVF5QlVjbUZqYXlCRmRtVnVkRnh1SUNBZ0lDQXFMMXh1SUNBZ0lHaGhibVJzWlU5dVZISmhZMnNvY25SalZISmhZMnRGZG1WdWREb2dVbFJEVkhKaFkydEZkbVZ1ZENrZ2UxeHVJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRnh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGtkbGRGTjBZV05yVkhKaFkyVW9LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDZG9ZVzVrYkdWUGJsUnlZV05ySUNjZ0t5QktVMDlPTG5OMGNtbHVaMmxtZVNoeWRHTlVjbUZqYTBWMlpXNTBMbk4wY21WaGJYTXBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ05seHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0F2THlCRWJ5QnViM1FnWVdSa0lIUm9aU0IwY21GamF5QnBaaUIwYUdVZ1NVUWdhWE1nWUhCeWIySmhkRzl5WUNCaGN5QjBhR2x6SUdseklITndaV05wWVd3Z2RISmhZMnNnWTNKbFlYUmxaQ0JpZVNCdFpXUnBZWE52ZFhBZ1ptOXlJR0pwZEhKaGRHVWdjSEp2WW1sdVp5NWNiaUFnSUNBZ0lDQWdMeThnVW1WbVpYSWdkRzhnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDBWd2FXTkhZVzFsYzBWNGRDOVFhWGhsYkZOMGNtVmhiV2x1WjBsdVpuSmhjM1J5ZFdOMGRYSmxMM0IxYkd3dk9EWWdabTl5SUcxdmNtVWdaR1YwWVdsc2N5NWNiaUFnSUNBZ0lDQWdhV1lnS0hKMFkxUnlZV05yUlhabGJuUXVkSEpoWTJzdWFXUWdQVDBnSjNCeWIySmhkRzl5SnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZG1sa1pXOUZiR1Z0Wlc1MElEMGdkR2hwY3k1MmFXUmxiMFZzWlcxbGJuUlFjbTkyYVdSbGNpNW5aWFJXYVdSbGIwVnNaVzFsYm5Rb0tUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2NuUmpWSEpoWTJ0RmRtVnVkQzUwY21GamF5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGt4dlp5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkSGIzUWdkSEpoWTJzZ0xTQW5JQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NuUmpWSEpoWTJ0RmRtVnVkQzUwY21GamF5NXJhVzVrSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKeUJwWkQwbklDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY25SalZISmhZMnRGZG1WdWRDNTBjbUZqYXk1cFpDQXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNjZ2NtVmhaSGxUZEdGMFpUMG5JQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NuUmpWSEpoWTJ0RmRtVnVkQzUwY21GamF5NXlaV0ZrZVZOMFlYUmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRFpjYmlBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCcFppQW9jblJqVkhKaFkydEZkbVZ1ZEM1MGNtRmpheTVyYVc1a0lEMDlJQ2RoZFdScGJ5Y3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11UTNKbFlYUmxRWFZrYVc5VWNtRmpheWh5ZEdOVWNtRmphMFYyWlc1MExuTjBjbVZoYlhOYk1GMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnY25SalZISmhZMnRGZG1WdWRDNTBjbUZqYXk1cmFXNWtJRDA5SUNkMmFXUmxieWNnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJSFpwWkdWdlJXeGxiV1Z1ZEM1emNtTlBZbXBsWTNRZ0lUMDlJSEowWTFSeVlXTnJSWFpsYm5RdWMzUnlaV0Z0YzFzd1hWeHVJQ0FnSUNBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWnBaR1Z2Uld4bGJXVnVkQzV6Y21OUFltcGxZM1FnUFNCeWRHTlVjbUZqYTBWMlpXNTBMbk4wY21WaGJYTmJNRjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0oxTmxkQ0IyYVdSbGJ5QnpiM1Z5WTJVZ1puSnZiU0IyYVdSbGJ5QjBjbUZqYXlCdmJuUnlZV05yTGlkY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkRjbVZoZEdWeklIUm9aU0JoZFdScGJ5QmtaWFpwWTJVZ2QyaGxiaUJ5WldObGFYWnBibWNnWVc0Z1VsUkRWSEpoWTJ0RmRtVnVkQ0IzYVhSb0lIUm9aU0JyYVc1a0lHOW1JRndpWVhWa2FXOWNJbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmhkV1JwYjAxbFpHbGhVM1J5WldGdElDMGdRWFZrYVc4Z1RXVmthV0VnYzNSeVpXRnRJSFJ5WVdOclhHNGdJQ0FnSUNvdlhHNGdJQ0FnUTNKbFlYUmxRWFZrYVc5VWNtRmpheWhoZFdScGIwMWxaR2xoVTNSeVpXRnRPaUJOWldScFlWTjBjbVZoYlNrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCMmFXUmxiMFZzWlcxbGJuUWdQU0IwYUdsekxuWnBaR1Z2Uld4bGJXVnVkRkJ5YjNacFpHVnlMbWRsZEZacFpHVnZSV3hsYldWdWRDZ3BPMXh1WEc0Z0lDQWdJQ0FnSUM4dklHUnZJRzV2ZEdocGJtY2dkR2hsSUhacFpHVnZJR2hoY3lCMGFHVWdjMkZ0WlNCdFpXUnBZU0J6ZEhKbFlXMGdZWE1nZEdobElHRjFaR2x2SUhSeVlXTnJJSGRsSUdoaGRtVWdhR1Z5WlNBb2RHaGxlU0JoY21VZ2JHbHVhMlZrS1Z4dUlDQWdJQ0FnSUNCcFppQW9kbWxrWlc5RmJHVnRaVzUwTG5OeVkwOWlhbVZqZENBOVBTQmhkV1JwYjAxbFpHbGhVM1J5WldGdEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0x5OGdkbWxrWlc4Z1pXeGxiV1Z1ZENCb1lYTWdjMjl0WlNCdmRHaGxjaUJ0WldScFlTQnpkSEpsWVcwZ2RHaGhkQ0JwY3lCdWIzUWdZWE56YjJOcFlYUmxaQ0IzYVhSb0lIUm9hWE1nWVhWa2FXOGdkSEpoWTJ0Y2JpQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyYVdSbGIwVnNaVzFsYm5RdWMzSmpUMkpxWldOMElDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNCMmFXUmxiMFZzWlcxbGJuUXVjM0pqVDJKcVpXTjBJQ0U5UFNCaGRXUnBiMDFsWkdsaFUzUnlaV0Z0WEc0Z0lDQWdJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1kzSmxZWFJsSUdFZ2JtVjNJR0YxWkdsdklHVnNaVzFsYm5SY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVlYVmthVzlGYkdWdFpXNTBMbk55WTA5aWFtVmpkQ0E5SUdGMVpHbHZUV1ZrYVdGVGRISmxZVzA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0owTnlaV0YwWldRZ2JtVjNJR0YxWkdsdklHVnNaVzFsYm5RZ2RHOGdjR3hoZVNCelpYQmhjbUYwWlNCaGRXUnBieUJ6ZEhKbFlXMHVKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibjFjYmlJc0lpOHZJRU52Y0hseWFXZG9kQ0JGY0dsaklFZGhiV1Z6TENCSmJtTXVJRUZzYkNCU2FXZG9kSE1nVW1WelpYSjJaV1F1WEc1Y2JtbHRjRzl5ZENCN0lFTnZibVpwWnl3Z1JteGhaM01nZlNCbWNtOXRJQ2N1TGk5RGIyNW1hV2N2UTI5dVptbG5KenRjYm1sdGNHOXlkQ0I3SUV4dloyZGxjaUI5SUdaeWIyMGdKeTR1TDB4dloyZGxjaTlNYjJkblpYSW5PMXh1WEc0dktpcGNiaUFxSUVWNGRISmhJSFI1Y0dWeklHWnZjaUIwYUdVZ1NGUk5URVZzWlcxbGJuUmNiaUFxTDF4dVpHVmpiR0Z5WlNCbmJHOWlZV3dnZTF4dUlDQWdJR2x1ZEdWeVptRmpaU0JJVkUxTVJXeGxiV1Z1ZENCN1hHNGdJQ0FnSUNBZ0lHMXZlbEpsY1hWbGMzUlFiMmx1ZEdWeVRHOWphejhvS1RvZ2RtOXBaRHRjYmlBZ0lDQjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1ZHaGxJSFpwWkdWdklIQnNZWGxsY2lCb2RHMXNJR1ZzWlcxbGJuUmNiaUFxTDF4dVpYaHdiM0owSUdOc1lYTnpJRlpwWkdWdlVHeGhlV1Z5SUh0Y2JpQWdJQ0J3Y21sMllYUmxJR052Ym1acFp6b2dRMjl1Wm1sbk8xeHVJQ0FnSUhCeWFYWmhkR1VnZG1sa1pXOUZiR1Z0Wlc1ME9pQklWRTFNVm1sa1pXOUZiR1Z0Wlc1ME8xeHVJQ0FnSUhCeWFYWmhkR1VnWVhWa2FXOUZiR1Z0Wlc1MFB6b2dTRlJOVEVGMVpHbHZSV3hsYldWdWREdGNiaUFnSUNCd2NtbDJZWFJsSUc5eWFXVnVkR0YwYVc5dVEyaGhibWRsVkdsdFpXOTFkRG9nYm5WdFltVnlPMXh1SUNBZ0lIQnlhWFpoZEdVZ2JHRnpkRlJwYldWU1pYTnBlbVZrSUQwZ2JtVjNJRVJoZEdVb0tTNW5aWFJVYVcxbEtDazdYRzVjYmlBZ0lDQnZiazFoZEdOb1ZtbGxkM0J2Y25SU1pYTnZiSFYwYVc5dVEyRnNiR0poWTJzNklDaDNhV1IwYURvZ2JuVnRZbVZ5TENCb1pXbG5hSFE2SUc1MWJXSmxjaWtnUFQ0Z2RtOXBaRHRjYmlBZ0lDQnZibEpsYzJsNlpWQnNZWGxsY2tOaGJHeGlZV05yT2lBb0tTQTlQaUIyYjJsa08xeHVJQ0FnSUhKbGMybDZaVlJwYldWdmRYUklZVzVrYkdVNklHNTFiV0psY2p0Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndZWEpoYlNCMmFXUmxiMFZzWlcxbGJuUlFZWEpsYm5RZ2RHaGxJR2gwYld3Z1pHbDJJSFJvWlNCMGFHVWdkbWxrWlc4Z2NHeGhlV1Z5SUhkcGJHd2dZbVVnYVc1cVpXTjBaV1FnYVc1MGIxeHVJQ0FnSUNBcUlFQndZWEpoYlNCamIyNW1hV2NnZEdobElHRndjR3hwWTJGMGFXOXVjeUJqYjI1bWFXZDFjbUYwYVc5dUxpQlhaU2R5WlNCcGJuUmxjbVZ6ZEdWa0lHbHVJSFJvWlNCemRHRnlkRlpwWkdWdlRYVjBaV1FnWm14aFoxeHVJQ0FnSUNBcUwxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtIWnBaR1Z2Uld4bGJXVnVkRkJoY21WdWREb2dTRlJOVEVWc1pXMWxiblFzSUdOdmJtWnBaem9nUTI5dVptbG5LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkbWxrWlc5RmJHVnRaVzUwSUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duZG1sa1pXOG5LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWpiMjVtYVdjZ1BTQmpiMjVtYVdjN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZG1sa1pXOUZiR1Z0Wlc1MExtbGtJRDBnSjNOMGNtVmhiV2x1WjFacFpHVnZKenRjYmlBZ0lDQWdJQ0FnZEdocGN5NTJhV1JsYjBWc1pXMWxiblF1WkdsellXSnNaVkJwWTNSMWNtVkpibEJwWTNSMWNtVWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5acFpHVnZSV3hsYldWdWRDNXdiR0Y1YzBsdWJHbHVaU0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRtbGtaVzlGYkdWdFpXNTBMbk4wZVd4bExuZHBaSFJvSUQwZ0p6RXdNQ1VuTzF4dUlDQWdJQ0FnSUNCMGFHbHpMblpwWkdWdlJXeGxiV1Z1ZEM1emRIbHNaUzVvWldsbmFIUWdQU0FuTVRBd0pTYzdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRtbGtaVzlGYkdWdFpXNTBMbk4wZVd4bExuQnZjMmwwYVc5dUlEMGdKMkZpYzI5c2RYUmxKenRjYmlBZ0lDQWdJQ0FnZEdocGN5NTJhV1JsYjBWc1pXMWxiblF1YzNSNWJHVXVjRzlwYm5SbGNrVjJaVzUwY3lBOUlDZGhiR3duTzF4dUlDQWdJQ0FnSUNCMmFXUmxiMFZzWlcxbGJuUlFZWEpsYm5RdVlYQndaVzVrUTJocGJHUW9kR2hwY3k1MmFXUmxiMFZzWlcxbGJuUXBPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXViMjVTWlhOcGVtVlFiR0Y1WlhKRFlXeHNZbUZqYXlBOUlDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkU1pYTnZiSFYwYVc5dUlHTm9ZVzVuWldRc0lISmxjM1I1YkdsdVp5QndiR0Y1WlhJc0lHUnBaQ0I1YjNVZ1ptOXlaMlYwSUhSdklHOTJaWEp5YVdSbElIUm9hWE1nWm5WdVkzUnBiMjQvSjF4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV2YmsxaGRHTm9WbWxsZDNCdmNuUlNaWE52YkhWMGFXOXVRMkZzYkdKaFkyc2dQU0FvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5VbVZ6YjJ4MWRHbHZiaUJqYUdGdVoyVmtJR0Z1WkNCdFlYUmphQ0IyYVdWM2NHOXlkQ0J5WlhOdmJIVjBhVzl1SUdseklIUjFjbTVsWkNCdmJpd2daR2xrSUhsdmRTQm1iM0puWlhRZ2RHOGdiM1psY25KcFpHVWdkR2hwY3lCbWRXNWpkR2x2Ymo4blhHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCOU8xeHVYRzRnSUNBZ0lDQWdJQzh2SUhObGRDQndiR0Y1SUdadmNpQjJhV1JsYnlBb1lXNWtJR0YxWkdsdktWeHVJQ0FnSUNBZ0lDQjBhR2x6TG5acFpHVnZSV3hsYldWdWRDNXZibU5zYVdOcklEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WVhWa2FXOUZiR1Z0Wlc1MElDRTlJSFZ1WkdWbWFXNWxaQ0FtSmlCMGFHbHpMbUYxWkdsdlJXeGxiV1Z1ZEM1d1lYVnpaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbUYxWkdsdlJXeGxiV1Z1ZEM1d2JHRjVLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1MmFXUmxiMFZzWlcxbGJuUXVjR0YxYzJWa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MmFXUmxiMFZzWlcxbGJuUXVjR3hoZVNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOU8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdWRtbGtaVzlGYkdWdFpXNTBMbTl1Ykc5aFpHVmtiV1YwWVdSaGRHRWdQU0FvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTl1Vm1sa1pXOUpibWwwYVdGc2FYcGxaQ2dwTzF4dUlDQWdJQ0FnSUNCOU8xeHVYRzRnSUNBZ0lDQWdJQzh2SUhObGRDQnlaWE5wZW1VZ1pYWmxiblJ6SUhSdklIUm9aU0IzYVc1a2IzZHpJR2xtSUdsMElHbHpJSEpsYzJsNlpXUWdiM0lnYVhSeklHOXlhV1Z1ZEdGMGFXOXVJR2x6SUdOb1lXNW5aV1JjYmlBZ0lDQWdJQ0FnZDJsdVpHOTNMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KM0psYzJsNlpTY3NJQ2dwSUQwK0lIUm9hWE11Y21WemFYcGxVR3hoZVdWeVUzUjViR1VvS1N3Z2RISjFaU2s3WEc0Z0lDQWdJQ0FnSUhkcGJtUnZkeTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2R2Y21sbGJuUmhkR2x2Ym1Ob1lXNW5aU2NzSUNncElEMCtYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTl1VDNKcFpXNTBZWFJwYjI1RGFHRnVaMlVvS1Z4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhCMVlteHBZeUJ6WlhSQmRXUnBiMFZzWlcxbGJuUW9ZWFZrYVc5RmJHVnRaVzUwT2lCSVZFMU1RWFZrYVc5RmJHVnRaVzUwS1NBNklIWnZhV1FnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbUYxWkdsdlJXeGxiV1Z1ZENBOUlHRjFaR2x2Uld4bGJXVnVkRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJUWlhSeklIVndJSFJvWlNCMmFXUmxieUJsYkdWdFpXNTBJSGRwZEdnZ1lXNTVJR0Z3Y0d4cFkyRjBhVzl1SUdOdmJtWnBaeUJoYm1RZ2NHeGhlWE1nZEdobElIWnBaR1Z2SUdWc1pXMWxiblF1WEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nUVNCd2NtOXRhWE5sSUdadmNpQnBaaUJ3YkdGNWFXNW5JSFJvWlNCMmFXUmxieUIzWVhNZ2MzVmpZMlZ6YzJaMWJDQnZjaUJ1YjNRdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0d4aGVTZ3BPaUJRY205dGFYTmxQSFp2YVdRK0lIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MmFXUmxiMFZzWlcxbGJuUXViWFYwWldRZ1BTQjBhR2x6TG1OdmJtWnBaeTVwYzBac1lXZEZibUZpYkdWa0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnUm14aFozTXVVM1JoY25SV2FXUmxiMDExZEdWa1hHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRtbGtaVzlGYkdWdFpXNTBMbUYxZEc5d2JHRjVJRDBnZEdocGN5NWpiMjVtYVdjdWFYTkdiR0ZuUlc1aFlteGxaQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lFWnNZV2R6TGtGMWRHOVFiR0Y1Vm1sa1pXOWNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWRtbGtaVzlGYkdWdFpXNTBMbkJzWVhrb0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QlVjblZsSUdsbUlIUm9aU0IyYVdSbGJ5QmxiR1Z0Wlc1MElHbHpJSEJoZFhObFpDNWNiaUFnSUNBZ0tpOWNiaUFnSUNCcGMxQmhkWE5sWkNncE9pQmliMjlzWldGdUlIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZG1sa1pXOUZiR1Z0Wlc1MExuQmhkWE5sWkR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lBdElIZG9aWFJvWlhJZ2RHaGxJSFpwWkdWdklHVnNaVzFsYm5RZ2FYTWdjR3hoZVdsdVp5NWNiaUFnSUNBZ0tpOWNiaUFnSUNCcGMxWnBaR1Z2VW1WaFpIa29LVG9nWW05dmJHVmhiaUI3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5acFpHVnZSV3hsYldWdWRDNXlaV0ZrZVZOMFlYUmxJQ0U5UFNCMWJtUmxabWx1WldRZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkbWxrWlc5RmJHVnRaVzUwTG5KbFlXUjVVM1JoZEdVZ1BpQXdYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nVkhKMVpTQnBaaUIwYUdVZ2RtbGtaVzhnWld4bGJXVnVkQ0JvWVhNZ1lTQjJZV3hwWkNCMmFXUmxieUJ6YjNWeVkyVWdLSE55WTA5aWFtVmpkQ2t1WEc0Z0lDQWdJQ292WEc0Z0lDQWdhR0Z6Vm1sa1pXOVRiM1Z5WTJVb0tUb2dZbTl2YkdWaGJpQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblpwWkdWdlJXeGxiV1Z1ZEM1emNtTlBZbXBsWTNRZ0lUMDlJSFZ1WkdWbWFXNWxaQ0FtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MmFXUmxiMFZzWlcxbGJuUXVjM0pqVDJKcVpXTjBJQ0U5UFNCdWRXeHNYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUjJWMElIUm9aU0JqZFhKeVpXNTBJR052Ym5SbGVIUWdiMllnZEdobElHaDBiV3dnZG1sa1pXOGdaV3hsYldWdWRGeHVJQ0FnSUNBcUlFQnlaWFIxY201eklDMGdkR2hsSUdOMWNuSmxiblFnWTI5dWRHVjRkQ0J2WmlCMGFHVWdkbWxrWlc4Z1pXeGxiV1Z1ZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJR2RsZEZacFpHVnZSV3hsYldWdWRDZ3BPaUJJVkUxTVZtbGtaVzlGYkdWdFpXNTBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWRtbGtaVzlGYkdWdFpXNTBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWRsZENCMGFHVWdZM1Z5Y21WdWRDQmpiMjUwWlhoMElHOW1JSFJvWlNCb2RHMXNJSFpwWkdWdklHVnNaVzFsYm5SeklIQmhjbVZ1ZEZ4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUMwZ2RHaGxJR04xY25KbGJuUWdZMjl1ZEdWNGRDQnZaaUIwYUdVZ2RtbGtaVzhnWld4bGJXVnVkSE1nY0dGeVpXNTBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1oyVjBWbWxrWlc5UVlYSmxiblJGYkdWdFpXNTBLQ2s2SUVoVVRVeEZiR1Z0Wlc1MElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZG1sa1pXOUZiR1Z0Wlc1MExuQmhjbVZ1ZEVWc1pXMWxiblE3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVTJWMElIUm9aU0JXYVdSbGJ5QkZiR1Z0Wlc1MGN5QnpjbU1nYjJKcVpXTjBJSFJ5WVdOcmN5QjBieUJsYm1GaWJHVmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1pXNWhZbXhsWkNBdElFVnVZV0pzWlNCVWNtRmphM01nYjI0Z2RHaGxJRk55WXlCUFltcGxZM1JjYmlBZ0lDQWdLaTljYmlBZ0lDQnpaWFJXYVdSbGIwVnVZV0pzWldRb1pXNWhZbXhsWkRvZ1ltOXZiR1ZoYmlrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUIwYUdseklHbHpJR0VnZEdWdGNHOXlZWEo1SUdoaFkyc2dkVzUwYVd3Z2RIbHdaU0J6WTNKcGNIUnpJSFpwWkdWdklHVnNaVzFsYm5RZ2FYTWdkWEJrWVhSbFpDQjBieUJ5Wldac1pXTjBJSFJvWlNCdVpXVmtJR1p2Y2lCMGNtRmphM01nYjI0Z1lTQm9kRzFzSUhacFpHVnZJR1ZzWlcxbGJuUmNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2RtbGtaVzlGYkdWdFpXNTBJRDBnZEdocGN5NTJhV1JsYjBWc1pXMWxiblE3WEc0Z0lDQWdJQ0FnSUNnOFRXVmthV0ZUZEhKbFlXMCtkbWxrWlc5RmJHVnRaVzUwTG5OeVkwOWlhbVZqZENsY2JpQWdJQ0FnSUNBZ0lDQWdJQzVuWlhSVWNtRmphM01vS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdMbVp2Y2tWaFkyZ29LSFJ5WVdOck9pQk5aV1JwWVZOMGNtVmhiVlJ5WVdOcktTQTlQaUFvZEhKaFkyc3VaVzVoWW14bFpDQTlJR1Z1WVdKc1pXUXBLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJCYmlCdmRtVnljbWxrWlNCbWIzSWdkMmhsYmlCMGFHVWdkbWxrWlc4Z2FHRnpJR0psWlc0Z2FXNXBkR2xoYkdsNlpXUWdkMmwwYUNCaElITnlZMDlpYW1WamRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUc5dVZtbGtaVzlKYm1sMGFXRnNhWHBsWkNncElIdGNiaUFnSUNBZ0lDQWdMeThnUkdWbVlYVnNkQ0JHZFc1amRHbHZibUZzYVhSNU9pQkVieUJPYjNSb2FXNW5YRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dUMjRnZEdobElHOXlhV1Z1ZEdGMGFXOXVJR05vWVc1blpTQnZaaUJoSUhkcGJtUnZkeUJqYkdWaGNpQjBhR1VnZEdsdFpXOTFkRnh1SUNBZ0lDQXFMMXh1SUNBZ0lHOXVUM0pwWlc1MFlYUnBiMjVEYUdGdVoyVW9LU0I3WEc0Z0lDQWdJQ0FnSUdOc1pXRnlWR2x0Wlc5MWRDaDBhR2x6TG05eWFXVnVkR0YwYVc5dVEyaGhibWRsVkdsdFpXOTFkQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViM0pwWlc1MFlYUnBiMjVEYUdGdVoyVlVhVzFsYjNWMElEMGdkMmx1Wkc5M0xuTmxkRlJwYldWdmRYUW9LQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXlaWE5wZW1WUWJHRjVaWEpUZEhsc1pTZ3BPMXh1SUNBZ0lDQWdJQ0I5TENBMU1EQXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRkpsYzJsNlpYTWdkR2hsSUhCc1lYbGxjaUJ6ZEhsc1pTQmlZWE5sWkNCdmJpQjBhR1VnZDJsdVpHOTNJR2hsYVdkb2RDQmhibVFnZDJsa2RHaGNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QXRJRzVwYkNCcFppQnlaWEYxYVhKbGJXVnVkSE1nWVhKbElITmhkR2x6Wm1sbFpGeHVJQ0FnSUNBcUwxeHVJQ0FnSUhKbGMybDZaVkJzWVhsbGNsTjBlV3hsS0NrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCMmFXUmxiMFZzWlcxbGJuUlFZWEpsYm5RZ1BTQjBhR2x6TG1kbGRGWnBaR1Z2VUdGeVpXNTBSV3hsYldWdWRDZ3BPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkbWxrWlc5RmJHVnRaVzUwVUdGeVpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0IwYUdsekxuVndaR0YwWlZacFpHVnZVM1J5WldGdFUybDZaU2dwTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2gyYVdSbGIwVnNaVzFsYm5SUVlYSmxiblF1WTJ4aGMzTk1hWE4wTG1OdmJuUmhhVzV6S0NkbWFYaGxaQzF6YVhwbEp5a3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YjI1U1pYTnBlbVZRYkdGNVpYSkRZV3hzWW1GamF5Z3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdMeThnWTI5dWRISnZiSE1nWm05eUlISmxjMmw2YVc1bklIUm9aU0J3YkdGNVpYSmNiaUFnSUNBZ0lDQWdkR2hwY3k1eVpYTnBlbVZRYkdGNVpYSlRkSGxzWlZSdlJtbHNiRkJoY21WdWRFVnNaVzFsYm5Rb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dmJsSmxjMmw2WlZCc1lYbGxja05oYkd4aVlXTnJLQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVW1WemFYcGxjeUIwYUdVZ2NHeGhlV1Z5SUdWc1pXMWxiblFnZEc4Z1ptbHNiQ0IwYUdVZ2NHRnlaVzUwSUdWc1pXMWxiblJjYmlBZ0lDQWdLaTljYmlBZ0lDQnlaWE5wZW1WUWJHRjVaWEpUZEhsc1pWUnZSbWxzYkZCaGNtVnVkRVZzWlcxbGJuUW9LU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFpwWkdWdlJXeGxiV1Z1ZEZCaGNtVnVkQ0E5SUhSb2FYTXVaMlYwVm1sa1pXOVFZWEpsYm5SRmJHVnRaVzUwS0NrN1hHNWNiaUFnSUNBZ0lDQWdMeTlXYVdSbGJ5QnBjeUJ1YjNRZ2FXNXBkR2xoYkdsNlpXUWdlV1YwSUhOdklITmxkQ0IyYVdSbGIwVnNaVzFsYm5SUVlYSmxiblFnZEc4Z2MybDZaU0J2WmlCd1lYSmxiblFnWld4bGJXVnVkRnh1SUNBZ0lDQWdJQ0JqYjI1emRDQnpkSGxzWlZkcFpIUm9JRDBnSnpFd01DVW5PMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnpkSGxzWlVobGFXZG9kQ0E5SUNjeE1EQWxKenRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjM1I1YkdWVWIzQWdQU0F3TzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J6ZEhsc1pVeGxablFnUFNBd08xeHVJQ0FnSUNBZ0lDQjJhV1JsYjBWc1pXMWxiblJRWVhKbGJuUXVjMlYwUVhSMGNtbGlkWFJsS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdKM04wZVd4bEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNkMGIzQTZJQ2NnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMGVXeGxWRzl3SUN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbmNIZzdJR3hsWm5RNklDY2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4wZVd4bFRHVm1kQ0FyWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjNCNE95QjNhV1IwYURvZ0p5QXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM1I1YkdWWGFXUjBhQ0FyWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSnpzZ2FHVnBaMmgwT2lBbklDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkSGxzWlVobGFXZG9kQ0FyWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSnpzZ1kzVnljMjl5T2lCa1pXWmhkV3gwT3lkY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCMWNHUmhkR1ZXYVdSbGIxTjBjbVZoYlZOcGVtVW9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1amIyNW1hV2N1YVhOR2JHRm5SVzVoWW14bFpDaEdiR0ZuY3k1TllYUmphRlpwWlhkd2IzSjBVbVZ6YjJ4MWRHbHZiaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRzV2ZHlBOUlHNWxkeUJFWVhSbEtDa3VaMlYwVkdsdFpTZ3BPMXh1SUNBZ0lDQWdJQ0JwWmlBb2JtOTNJQzBnZEdocGN5NXNZWE4wVkdsdFpWSmxjMmw2WldRZ1BpQXpNREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIWnBaR1Z2Uld4bGJXVnVkRkJoY21WdWRDQTlJSFJvYVhNdVoyVjBWbWxrWlc5UVlYSmxiblJGYkdWdFpXNTBLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVhacFpHVnZSV3hsYldWdWRGQmhjbVZ1ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dmJrMWhkR05vVm1sbGQzQnZjblJTWlhOdmJIVjBhVzl1UTJGc2JHSmhZMnNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwTG1Oc2FXVnVkRmRwWkhSb0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWnBaR1Z2Uld4bGJXVnVkRkJoY21WdWRDNWpiR2xsYm5SSVpXbG5hSFJjYmlBZ0lDQWdJQ0FnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YkdGemRGUnBiV1ZTWlhOcGVtVmtJRDBnYm1WM0lFUmhkR1VvS1M1blpYUlVhVzFsS0NrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVURzluS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMUpsYzJsNmFXNW5JSFJ2YnlCdlpuUmxiaUF0SUhOcmFYQndhVzVuSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBMlhHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMnhsWVhKVWFXMWxiM1YwS0hSb2FYTXVjbVZ6YVhwbFZHbHRaVzkxZEVoaGJtUnNaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5KbGMybDZaVlJwYldWdmRYUklZVzVrYkdVZ1BTQjNhVzVrYjNjdWMyVjBWR2x0Wlc5MWRDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9LU0E5UGlCMGFHbHpMblZ3WkdGMFpWWnBaR1Z2VTNSeVpXRnRVMmw2WlNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lERXdNRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibjFjYmlJc0lpOHZJRU52Y0hseWFXZG9kQ0JGY0dsaklFZGhiV1Z6TENCSmJtTXVJRUZzYkNCU2FXZG9kSE1nVW1WelpYSjJaV1F1WEc1Y2JtbHRjRzl5ZENCN0lGZGxZbE52WTJ0bGRFTnZiblJ5YjJ4c1pYSWdmU0JtY205dElDY3VMaTlYWldKVGIyTnJaWFJ6TDFkbFlsTnZZMnRsZEVOdmJuUnliMnhzWlhJbk8xeHVhVzF3YjNKMElIc2dSWGgwY21GUFptWmxjbEJoY21GdFpYUmxjbk1zSUVWNGRISmhRVzV6ZDJWeVVHRnlZVzFsZEdWeWN5QjlJR1p5YjIwZ0p5NHVMMWRsWWxOdlkydGxkSE12VFdWemMyRm5aVk5sYm1Rbk8xeHVhVzF3YjNKMElIc2dVM1J5WldGdFEyOXVkSEp2Ykd4bGNpQjlJR1p5YjIwZ0p5NHVMMVpwWkdWdlVHeGhlV1Z5TDFOMGNtVmhiVU52Ym5SeWIyeHNaWEluTzF4dWFXMXdiM0owSUh0Y2JpQWdJQ0JOWlhOellXZGxRVzV6ZDJWeUxGeHVJQ0FnSUUxbGMzTmhaMlZQWm1abGNpeGNiaUFnSUNCTlpYTnpZV2RsUTI5dVptbG5MRnh1SUNBZ0lFMWxjM05oWjJWVGRISmxZVzFsY2t4cGMzUXNYRzRnSUNBZ1RXVnpjMkZuWlZOMGNtVmhiV1Z5U1VSRGFHRnVaMlZrWEc1OUlHWnliMjBnSnk0dUwxZGxZbE52WTJ0bGRITXZUV1Z6YzJGblpWSmxZMlZwZG1Vbk8xeHVhVzF3YjNKMElIc2dSbkpsWlhwbFJuSmhiV1ZEYjI1MGNtOXNiR1Z5SUgwZ1puSnZiU0FuTGk0dlJuSmxaWHBsUm5KaGJXVXZSbkpsWlhwbFJuSmhiV1ZEYjI1MGNtOXNiR1Z5Snp0Y2JtbHRjRzl5ZENCN0lFRkdTME52Ym5SeWIyeHNaWElnZlNCbWNtOXRJQ2N1TGk5QlJrc3ZRVVpMUTI5dWRISnZiR3hsY2ljN1hHNXBiWEJ2Y25RZ2V5QkVZWFJoUTJoaGJtNWxiRU52Ym5SeWIyeHNaWElnZlNCbWNtOXRJQ2N1TGk5RVlYUmhRMmhoYm01bGJDOUVZWFJoUTJoaGJtNWxiRU52Ym5SeWIyeHNaWEluTzF4dWFXMXdiM0owSUhzZ1VHVmxja052Ym01bFkzUnBiMjVEYjI1MGNtOXNiR1Z5SUgwZ1puSnZiU0FuTGk0dlVHVmxja052Ym01bFkzUnBiMjVEYjI1MGNtOXNiR1Z5TDFCbFpYSkRiMjV1WldOMGFXOXVRMjl1ZEhKdmJHeGxjaWM3WEc1cGJYQnZjblFnZXlCTFpYbGliMkZ5WkVOdmJuUnliMnhzWlhJZ2ZTQm1jbTl0SUNjdUxpOUpibkIxZEhNdlMyVjVZbTloY21SRGIyNTBjbTlzYkdWeUp6dGNibWx0Y0c5eWRDQjdJRUZuWjNKbFoyRjBaV1JUZEdGMGN5QjlJR1p5YjIwZ0p5NHVMMUJsWlhKRGIyNXVaV04wYVc5dVEyOXVkSEp2Ykd4bGNpOUJaMmR5WldkaGRHVmtVM1JoZEhNbk8xeHVhVzF3YjNKMElIdGNiaUFnSUNCRGIyNW1hV2NzWEc0Z0lDQWdSbXhoWjNNc1hHNGdJQ0FnUTI5dWRISnZiRk5qYUdWdFpWUjVjR1VzWEc0Z0lDQWdWR1Y0ZEZCaGNtRnRaWFJsY25Nc1hHNGdJQ0FnVDNCMGFXOXVVR0Z5WVcxbGRHVnljeXhjYmlBZ0lDQk9kVzFsY21salVHRnlZVzFsZEdWeWMxeHVmU0JtY205dElDY3VMaTlEYjI1bWFXY3ZRMjl1Wm1sbkp6dGNibWx0Y0c5eWRDQjdYRzRnSUNBZ1JXNWpiMlJsY2xObGRIUnBibWR6TEZ4dUlDQWdJRWx1YVhScFlXeFRaWFIwYVc1bmN5eGNiaUFnSUNCWFpXSlNWRU5UWlhSMGFXNW5jMXh1ZlNCbWNtOXRJQ2N1TGk5RVlYUmhRMmhoYm01bGJDOUpibWwwYVdGc1UyVjBkR2x1WjNNbk8xeHVhVzF3YjNKMElIc2dUR0YwWlc1amVWUmxjM1JTWlhOMWJIUnpJSDBnWm5KdmJTQW5MaTR2UkdGMFlVTm9ZVzV1Wld3dlRHRjBaVzVqZVZSbGMzUlNaWE4xYkhSekp6dGNibWx0Y0c5eWRDQjdJRXh2WjJkbGNpQjlJR1p5YjIwZ0p5NHVMMHh2WjJkbGNpOU1iMmRuWlhJbk8xeHVhVzF3YjNKMElIc2dSbWxzWlZSbGJYQnNZWFJsTENCR2FXeGxWWFJwYkNCOUlHWnliMjBnSnk0dUwxVjBhV3d2Um1sc1pWVjBhV3duTzF4dWFXMXdiM0owSUhzZ1NXNXdkWFJEYkdGemMyVnpSbUZqZEc5eWVTQjlJR1p5YjIwZ0p5NHVMMGx1Y0hWMGN5OUpibkIxZEVOc1lYTnpaWE5HWVdOMGIzSjVKenRjYm1sdGNHOXlkQ0I3SUZacFpHVnZVR3hoZVdWeUlIMGdabkp2YlNBbkxpNHZWbWxrWlc5UWJHRjVaWEl2Vm1sa1pXOVFiR0Y1WlhJbk8xeHVhVzF3YjNKMElIdGNiaUFnSUNCVGRISmxZVzFOWlhOellXZGxRMjl1ZEhKdmJHeGxjaXhjYmlBZ0lDQk5aWE56WVdkbFJHbHlaV04wYVc5dVhHNTlJR1p5YjIwZ0p5NHVMMVZsU1c1emRHRnVZMlZOWlhOellXZGxMMU4wY21WaGJVMWxjM05oWjJWRGIyNTBjbTlzYkdWeUp6dGNibWx0Y0c5eWRDQjdJRkpsYzNCdmJuTmxRMjl1ZEhKdmJHeGxjaUI5SUdaeWIyMGdKeTR1TDFWbFNXNXpkR0Z1WTJWTlpYTnpZV2RsTDFKbGMzQnZibk5sUTI5dWRISnZiR3hsY2ljN1hHNXBiWEJ2Y25RZ0tpQmhjeUJOWlhOellXZGxVbVZqWldsMlpTQm1jbTl0SUNjdUxpOVhaV0pUYjJOclpYUnpMMDFsYzNOaFoyVlNaV05sYVhabEp6dGNibWx0Y0c5eWRDQjdJRTFsYzNOaFoyVlBibE5qY21WbGJrdGxlV0p2WVhKa0lIMGdabkp2YlNBbkxpNHZWMlZpVTI5amEyVjBjeTlOWlhOellXZGxVbVZqWldsMlpTYzdYRzVwYlhCdmNuUWdleUJUWlc1a1RXVnpjMkZuWlVOdmJuUnliMnhzWlhJZ2ZTQm1jbTl0SUNjdUxpOVZaVWx1YzNSaGJtTmxUV1Z6YzJGblpTOVRaVzVrVFdWemMyRm5aVU52Ym5SeWIyeHNaWEluTzF4dWFXMXdiM0owSUhzZ1ZHOVRkSEpsWVcxbGNrMWxjM05oWjJWelEyOXVkSEp2Ykd4bGNpQjlJR1p5YjIwZ0p5NHVMMVZsU1c1emRHRnVZMlZOWlhOellXZGxMMVJ2VTNSeVpXRnRaWEpOWlhOellXZGxjME52Ym5SeWIyeHNaWEluTzF4dWFXMXdiM0owSUhzZ1RXOTFjMlZEYjI1MGNtOXNiR1Z5SUgwZ1puSnZiU0FuTGk0dlNXNXdkWFJ6TDAxdmRYTmxRMjl1ZEhKdmJHeGxjaWM3WEc1cGJYQnZjblFnZXlCSFlXMWxVR0ZrUTI5dWRISnZiR3hsY2lCOUlHWnliMjBnSnk0dUwwbHVjSFYwY3k5SFlXMWxjR0ZrUTI5dWRISnZiR3hsY2ljN1hHNXBiWEJ2Y25RZ2V5QkVZWFJoUTJoaGJtNWxiRk5sYm1SbGNpQjlJR1p5YjIwZ0p5NHVMMFJoZEdGRGFHRnVibVZzTDBSaGRHRkRhR0Z1Ym1Wc1UyVnVaR1Z5Snp0Y2JtbHRjRzl5ZENCN1hHNGdJQ0FnUTI5dmNtUnBibUYwWlVOdmJuWmxjblJsY2l4Y2JpQWdJQ0JWYm5GMVlXNTBhWHBsWkVSbGJtOXliV0ZzYVhwbFpGVnVjMmxuYm1Wa1EyOXZjbVJjYm4wZ1puSnZiU0FuTGk0dlZYUnBiQzlEYjI5eVpHbHVZWFJsUTI5dWRtVnlkR1Z5Snp0Y2JtbHRjRzl5ZENCN0lGQnBlR1ZzVTNSeVpXRnRhVzVuSUgwZ1puSnZiU0FuTGk0dlVHbDRaV3hUZEhKbFlXMXBibWN2VUdsNFpXeFRkSEpsWVcxcGJtY25PMXh1YVcxd2IzSjBJSHNnU1ZSdmRXTm9RMjl1ZEhKdmJHeGxjaUI5SUdaeWIyMGdKeTR1TDBsdWNIVjBjeTlKVkc5MVkyaERiMjUwY205c2JHVnlKenRjYm1sdGNHOXlkQ0I3WEc0Z0lDQWdSR0YwWVVOb1lXNXVaV3hEYkc5elpVVjJaVzUwTEZ4dUlDQWdJRVJoZEdGRGFHRnVibVZzUlhKeWIzSkZkbVZ1ZEN4Y2JpQWdJQ0JFWVhSaFEyaGhibTVsYkU5d1pXNUZkbVZ1ZEN4Y2JpQWdJQ0JJYVdSbFJuSmxaWHBsUm5KaGJXVkZkbVZ1ZEN4Y2JpQWdJQ0JNYjJGa1JuSmxaWHBsUm5KaGJXVkZkbVZ1ZEN4Y2JpQWdJQ0JRYkdGNVUzUnlaV0Z0UlhKeWIzSkZkbVZ1ZEN4Y2JpQWdJQ0JRYkdGNVUzUnlaV0Z0UlhabGJuUXNYRzRnSUNBZ1VHeGhlVk4wY21WaGJWSmxhbVZqZEdWa1JYWmxiblFzWEc0Z0lDQWdVM1J5WldGdFpYSk1hWE4wVFdWemMyRm5aVVYyWlc1MExGeHVJQ0FnSUZOMGNtVmhiV1Z5U1VSRGFHRnVaMlZrVFdWemMyRm5aVVYyWlc1MFhHNTlJR1p5YjIwZ0p5NHVMMVYwYVd3dlJYWmxiblJGYldsMGRHVnlKenRjYm1sdGNHOXlkQ0I3WEc0Z0lDQWdSR0YwWVVOb1lXNXVaV3hNWVhSbGJtTjVWR1Z6ZEZKbGNYVmxjM1FzWEc0Z0lDQWdSR0YwWVVOb1lXNXVaV3hNWVhSbGJtTjVWR1Z6ZEZKbGMzQnZibk5sWEc1OUlHWnliMjBnWENJdUxpOUVZWFJoUTJoaGJtNWxiQzlFWVhSaFEyaGhibTVsYkV4aGRHVnVZM2xVWlhOMFVtVnpkV3gwYzF3aU8xeHVMeW9xWEc0Z0tpQkZiblJ5ZVNCd2IybHVkQ0JtYjNJZ2RHaGxJRmRsWWxKVVF5QlFiR0Y1WlhKY2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklGZGxZbEowWTFCc1lYbGxja052Ym5SeWIyeHNaWElnZTF4dUlDQWdJR052Ym1acFp6b2dRMjl1Wm1sbk8xeHVJQ0FnSUhKbGMzQnZibk5sUTI5dWRISnZiR3hsY2pvZ1VtVnpjRzl1YzJWRGIyNTBjbTlzYkdWeU8xeHVJQ0FnSUhOa2NFTnZibk4wY21GcGJuUnpPaUJTVkVOUFptWmxjazl3ZEdsdmJuTTdYRzRnSUNBZ2QyVmlVMjlqYTJWMFEyOXVkSEp2Ykd4bGNqb2dWMlZpVTI5amEyVjBRMjl1ZEhKdmJHeGxjanRjYmlBZ0lDQXZMeUJVYUdVZ2NISnBiV0Z5ZVNCa1lYUmhJR05vWVc1dVpXd3VJRlJvYVhNZ2FYTWdZbWxrYVhKbFkzUnBiMjVoYkNCM2FHVnVJSEF5Y0NCaGJtUWdjMlZ1WkNCdmJteDVJSGRvWlc0Z2RYTnBibWNnWVc0Z1UwWlZYRzRnSUNBZ2MyVnVaSEpsWTNaRVlYUmhRMmhoYm01bGJFTnZiblJ5YjJ4c1pYSTZJRVJoZEdGRGFHRnVibVZzUTI5dWRISnZiR3hsY2p0Y2JpQWdJQ0F2THlCQklISmxZM1lnYjI1c2VTQmtZWFJoSUdOb1lXNXVaV3dnY21WeGRXbHlaV1FnZDJobGJpQjFjMmx1WnlCaGJpQlRSbFZjYmlBZ0lDQnlaV04yUkdGMFlVTm9ZVzV1Wld4RGIyNTBjbTlzYkdWeU9pQkVZWFJoUTJoaGJtNWxiRU52Ym5SeWIyeHNaWEk3WEc0Z0lDQWdaR0YwWVVOb1lXNXVaV3hUWlc1a1pYSTZJRVJoZEdGRGFHRnVibVZzVTJWdVpHVnlPMXh1SUNBZ0lHUmhkR0ZqYUdGdWJtVnNUM0IwYVc5dWN6b2dVbFJEUkdGMFlVTm9ZVzV1Wld4SmJtbDBPMXh1SUNBZ0lIWnBaR1Z2VUd4aGVXVnlPaUJXYVdSbGIxQnNZWGxsY2p0Y2JpQWdJQ0J6ZEhKbFlXMURiMjUwY205c2JHVnlPaUJUZEhKbFlXMURiMjUwY205c2JHVnlPMXh1SUNBZ0lIQmxaWEpEYjI1dVpXTjBhVzl1UTI5dWRISnZiR3hsY2pvZ1VHVmxja052Ym01bFkzUnBiMjVEYjI1MGNtOXNiR1Z5TzF4dUlDQWdJR2x1Y0hWMFEyeGhjM05sYzBaaFkzUnZjbms2SUVsdWNIVjBRMnhoYzNObGMwWmhZM1J2Y25rN1hHNGdJQ0FnWm5KbFpYcGxSbkpoYldWRGIyNTBjbTlzYkdWeU9pQkdjbVZsZW1WR2NtRnRaVU52Ym5SeWIyeHNaWEk3WEc0Z0lDQWdjMmh2ZFd4a1UyaHZkMUJzWVhsUGRtVnliR0Y1SUQwZ2RISjFaVHRjYmlBZ0lDQmhabXREYjI1MGNtOXNiR1Z5T2lCQlJrdERiMjUwY205c2JHVnlPMXh1SUNBZ0lIWnBaR1Z2Uld4bGJXVnVkRkJoY21WdWRFTnNhV1Z1ZEZKbFkzUTZJRVJQVFZKbFkzUTdYRzRnSUNBZ2JHRjBaVzVqZVZOMFlYSjBWR2x0WlRvZ2JuVnRZbVZ5TzF4dUlDQWdJSEJwZUdWc1UzUnlaV0Z0YVc1bk9pQlFhWGhsYkZOMGNtVmhiV2x1Wnp0Y2JpQWdJQ0J6ZEhKbFlXMU5aWE56WVdkbFEyOXVkSEp2Ykd4bGNqb2dVM1J5WldGdFRXVnpjMkZuWlVOdmJuUnliMnhzWlhJN1hHNGdJQ0FnYzJWdVpFMWxjM05oWjJWRGIyNTBjbTlzYkdWeU9pQlRaVzVrVFdWemMyRm5aVU52Ym5SeWIyeHNaWEk3WEc0Z0lDQWdkRzlUZEhKbFlXMWxjazFsYzNOaFoyVnpRMjl1ZEhKdmJHeGxjam9nVkc5VGRISmxZVzFsY2sxbGMzTmhaMlZ6UTI5dWRISnZiR3hsY2p0Y2JpQWdJQ0JyWlhsaWIyRnlaRU52Ym5SeWIyeHNaWEk2SUV0bGVXSnZZWEprUTI5dWRISnZiR3hsY2p0Y2JpQWdJQ0J0YjNWelpVTnZiblJ5YjJ4c1pYSTZJRTF2ZFhObFEyOXVkSEp2Ykd4bGNqdGNiaUFnSUNCMGIzVmphRU52Ym5SeWIyeHNaWEk2SUVsVWIzVmphRU52Ym5SeWIyeHNaWEk3WEc0Z0lDQWdaMkZ0WlZCaFpFTnZiblJ5YjJ4c1pYSTZJRWRoYldWUVlXUkRiMjUwY205c2JHVnlPMXh1SUNBZ0lHTnZiM0prYVc1aGRHVkRiMjUyWlhKMFpYSTZJRU52YjNKa2FXNWhkR1ZEYjI1MlpYSjBaWEk3WEc0Z0lDQWdhWE5WYzJsdVoxTkdWVG9nWW05dmJHVmhianRjYmlBZ0lDQnBjMUYxWVd4cGRIbERiMjUwY205c2JHVnlPaUJpYjI5c1pXRnVPMXh1SUNBZ0lITjBZWFJ6VkdsdFpYSklZVzVrYkdVNklHNTFiV0psY2p0Y2JpQWdJQ0JtYVd4bE9pQkdhV3hsVkdWdGNHeGhkR1U3WEc0Z0lDQWdjSEpsWm1WeWNtVmtRMjlrWldNNklITjBjbWx1Wnp0Y2JpQWdJQ0J3WldWeVEyOXVabWxuT2lCU1ZFTkRiMjVtYVdkMWNtRjBhVzl1TzF4dUlDQWdJSFpwWkdWdlFYWm5VWEE2SUc1MWJXSmxjanRjYmlBZ0lDQnNiMk5oYkd4NVEyeHZjMlZrT2lCaWIyOXNaV0Z1TzF4dUlDQWdJSE5vYjNWc1pGSmxZMjl1Ym1WamREb2dZbTl2YkdWaGJqdGNiaUFnSUNCcGMxSmxZMjl1Ym1WamRHbHVaem9nWW05dmJHVmhianRjYmlBZ0lDQnlaV052Ym01bFkzUkJkSFJsYlhCME9pQnVkVzFpWlhJN1hHNGdJQ0FnWkdselkyOXVibVZqZEUxbGMzTmhaMlU2SUhOMGNtbHVaenRjYmlBZ0lDQnpkV0p6WTNKcFltVmtVM1J5WldGdE9pQnpkSEpwYm1jN1hHNGdJQ0FnYzJsbmJtRnNiR2x1WjFWeWJFSjFhV3hrWlhJNklDZ3BJRDArSUhOMGNtbHVaenRjYmlBZ0lDQmhkWFJ2U205cGJsUnBiV1Z5T2lCU1pYUjFjbTVVZVhCbFBIUjVjR1Z2WmlCelpYUlVhVzFsYjNWMFBpQTlJSFZ1WkdWbWFXNWxaRHRjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhCaGNtRnRJR052Ym1acFp5QXRJSFJvWlNCbWNtOXVkR1Z1WkNCamIyNW1hV2NnYjJKcVpXTjBYRzRnSUNBZ0lDb2dRSEJoY21GdElIQnBlR1ZzVTNSeVpXRnRhVzVuSUMwZ2RHaGxJRkJwZUdWc1UzUnlaV0Z0YVc1bklHOWlhbVZqZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0dOdmJtWnBaem9nUTI5dVptbG5MQ0J3YVhobGJGTjBjbVZoYldsdVp6b2dVR2w0Wld4VGRISmxZVzFwYm1jcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1amIyNW1hV2NnUFNCamIyNW1hV2M3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjR2w0Wld4VGRISmxZVzFwYm1jZ1BTQndhWGhsYkZOMGNtVmhiV2x1Wnp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV5WlhOd2IyNXpaVU52Ym5SeWIyeHNaWElnUFNCdVpYY2dVbVZ6Y0c5dWMyVkRiMjUwY205c2JHVnlLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVabWxzWlNBOUlHNWxkeUJHYVd4bFZHVnRjR3hoZEdVb0tUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxuTmtjRU52Ym5OMGNtRnBiblJ6SUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYjJabVpYSlViMUpsWTJWcGRtVkJkV1JwYnpvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHOW1abVZ5Vkc5U1pXTmxhWFpsVm1sa1pXODZJSFJ5ZFdWY2JpQWdJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdJQ0F2THlCelpYUWdkWEFnZEdobElHRm1heUJzYjJkcFl5QmpiR0Z6Y3lCaGJtUWdZMjl1Ym1WamRDQjFjQ0JwZEhNZ2JXVjBhRzlrSUdadmNpQmpiRzl6YVc1bklIUm9aU0J6YVdkdVlXeHBibWNnYzJWeWRtVnlYRzRnSUNBZ0lDQWdJSFJvYVhNdVlXWnJRMjl1ZEhKdmJHeGxjaUE5SUc1bGR5QkJSa3REYjI1MGNtOXNiR1Z5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amIyNW1hV2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CcGVHVnNVM1J5WldGdGFXNW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV2YmtGbWExUnlhV2RuWlhKbFpDNWlhVzVrS0hSb2FYTXBYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZV1pyUTI5dWRISnZiR3hsY2k1dmJrRkdTMVJwYldWa1QzVjBRMkZzYkdKaFkyc2dQU0FvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU5zYjNObFUybG5ibUZzYVc1blUyVnlkbVZ5S0NkWmIzVWdhR0YyWlNCaVpXVnVJR1JwYzJOdmJtNWxZM1JsWkNCa2RXVWdkRzhnYVc1aFkzUnBkbWwwZVNjcE8xeHVJQ0FnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVabkpsWlhwbFJuSmhiV1ZEYjI1MGNtOXNiR1Z5SUQwZ2JtVjNJRVp5WldWNlpVWnlZVzFsUTI5dWRISnZiR3hsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNHbDRaV3hUZEhKbFlXMXBibWN1ZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwWEc0Z0lDQWdJQ0FnSUNrN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1MmFXUmxiMUJzWVhsbGNpQTlJRzVsZHlCV2FXUmxiMUJzWVhsbGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjR2w0Wld4VGRISmxZVzFwYm1jdWRtbGtaVzlGYkdWdFpXNTBVR0Z5Wlc1MExGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpiMjVtYVdkY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MmFXUmxiMUJzWVhsbGNpNXZibFpwWkdWdlNXNXBkR2xoYkdsNlpXUWdQU0FvS1NBOVBseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NW9ZVzVrYkdWV2FXUmxiMGx1YVhScFlXeHBlbVZrS0NrN1hHNWNiaUFnSUNBZ0lDQWdMeThnVjJobGJpQnBiaUJ0WVhSamFDQjJhV1YzY0c5eWRDQnlaWE52YkhWMGFXOXVJRzF2WkdVc0lIZG9aVzRnZEdobElHSnliM2R6WlhJZ2RtbGxkM0J2Y25RZ2FYTWdjbVZ6YVhwbFpDQjNaU0J6Wlc1a0lHRWdjbVZ6YVhwbElHTnZiVzFoYm1RZ1ltRmpheUIwYnlCVlJTNWNiaUFnSUNBZ0lDQWdkR2hwY3k1MmFXUmxiMUJzWVhsbGNpNXZiazFoZEdOb1ZtbGxkM0J2Y25SU1pYTnZiSFYwYVc5dVEyRnNiR0poWTJzZ1BTQW9YRzRnSUNBZ0lDQWdJQ0FnSUNCM2FXUjBhRG9nYm5WdFltVnlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FHVnBaMmgwT2lCdWRXMWlaWEpjYmlBZ0lDQWdJQ0FnS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JrWlhOamNtbHdkRzl5SUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZFNaWE52YkhWMGFXOXVMbGRwWkhSb0p6b2dkMmxrZEdnc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0oxSmxjMjlzZFhScGIyNHVTR1ZwWjJoMEp6b2dhR1ZwWjJoMFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5TG5SdlUzUnlaV0Z0WlhKSVlXNWtiR1Z5Y3k1blpYUW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKME52YlcxaGJtUW5YRzRnSUNBZ0lDQWdJQ0FnSUNBcEtGdEtVMDlPTG5OMGNtbHVaMmxtZVNoa1pYTmpjbWx3ZEc5eUtWMHBPMXh1SUNBZ0lDQWdJQ0I5TzF4dVhHNGdJQ0FnSUNBZ0lDOHZJRVYyWlhKNUlIUnBiV1VnZG1sa1pXOGdjR3hoZVdWeUlHbHpJSEpsYzJsNlpXUWdhVzRnWW5KdmQzTmxjaUIzWlNCdVpXVmtJSFJ2SUhKbGFXNXBkR2xoYkdsNlpTQjBhR1VnYlc5MWMyVWdZMjl2Y21ScGJtRjBaU0JqYjI1MlpYSnphVzl1SUdGdVpDQm1jbVZsZW1VZ1puSmhiV1VnYzJsNmFXNW5JR3h2WjJsakxseHVJQ0FnSUNBZ0lDQjBhR2x6TG5acFpHVnZVR3hoZVdWeUxtOXVVbVZ6YVhwbFVHeGhlV1Z5UTJGc2JHSmhZMnNnUFNBb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRGVndUVzkxYzJWQmJtUkdjbVZsZW1WR2NtRnRaU2dwTzF4dUlDQWdJQ0FnSUNCOU8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdWMzUnlaV0Z0UTI5dWRISnZiR3hsY2lBOUlHNWxkeUJUZEhKbFlXMURiMjUwY205c2JHVnlLSFJvYVhNdWRtbGtaVzlRYkdGNVpYSXBPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMjl2Y21ScGJtRjBaVU52Ym5abGNuUmxjaUE5SUc1bGR5QkRiMjl5WkdsdVlYUmxRMjl1ZG1WeWRHVnlLSFJvYVhNdWRtbGtaVzlRYkdGNVpYSXBPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlZ1WkhKbFkzWkVZWFJoUTJoaGJtNWxiRU52Ym5SeWIyeHNaWElnUFNCdVpYY2dSR0YwWVVOb1lXNXVaV3hEYjI1MGNtOXNiR1Z5S0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y21WamRrUmhkR0ZEYUdGdWJtVnNRMjl1ZEhKdmJHeGxjaUE5SUc1bGR5QkVZWFJoUTJoaGJtNWxiRU52Ym5SeWIyeHNaWElvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV5WldkcGMzUmxja1JoZEdGRGFHRnVibVZzUlhabGJuUkZiV2wwZEdWeWN5aGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlZ1WkhKbFkzWkVZWFJoUTJoaGJtNWxiRU52Ym5SeWIyeHNaWEpjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV5WldkcGMzUmxja1JoZEdGRGFHRnVibVZzUlhabGJuUkZiV2wwZEdWeWN5aDBhR2x6TG5KbFkzWkVZWFJoUTJoaGJtNWxiRU52Ym5SeWIyeHNaWElwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbVJoZEdGRGFHRnVibVZzVTJWdVpHVnlJRDBnYm1WM0lFUmhkR0ZEYUdGdWJtVnNVMlZ1WkdWeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaVzVrY21WamRrUmhkR0ZEYUdGdWJtVnNRMjl1ZEhKdmJHeGxjbHh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbVJoZEdGRGFHRnVibVZzVTJWdVpHVnlMbkpsYzJWMFFXWnJWMkZ5Ym1sdVoxUnBiV1Z5VDI1RVlYUmhVMlZ1WkNBOUlDZ3BJRDArWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1GbWEwTnZiblJ5YjJ4c1pYSXVjbVZ6WlhSQlptdFhZWEp1YVc1blZHbHRaWElvS1R0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMGNtVmhiVTFsYzNOaFoyVkRiMjUwY205c2JHVnlJRDBnYm1WM0lGTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5S0NrN1hHNWNiaUFnSUNBZ0lDQWdMeThnYzJWMElIVndJSGRsWW5OdlkydGxkQ0J0WlhSb2IyUnpYRzRnSUNBZ0lDQWdJSFJvYVhNdWQyVmlVMjlqYTJWMFEyOXVkSEp2Ykd4bGNpQTlJRzVsZHlCWFpXSlRiMk5yWlhSRGIyNTBjbTlzYkdWeUtDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWQyVmlVMjlqYTJWMFEyOXVkSEp2Ykd4bGNpNXZia052Ym1acFp5QTlJQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lHMWxjM05oWjJWRGIyNW1hV2M2SUUxbGMzTmhaMlZTWldObGFYWmxMazFsYzNOaFoyVkRiMjVtYVdkY2JpQWdJQ0FnSUNBZ0tTQTlQaUIwYUdsekxtaGhibVJzWlU5dVEyOXVabWxuVFdWemMyRm5aU2h0WlhOellXZGxRMjl1Wm1sbktUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1M1pXSlRiMk5yWlhSRGIyNTBjbTlzYkdWeUxtOXVVM1J5WldGdFpYSk1hWE4wSUQwZ0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aVXhwYzNRNklFMWxjM05oWjJWU1pXTmxhWFpsTGsxbGMzTmhaMlZUZEhKbFlXMWxja3hwYzNSY2JpQWdJQ0FnSUNBZ0tTQTlQaUIwYUdsekxtaGhibVJzWlZOMGNtVmhiV1Z5VEdsemRFMWxjM05oWjJVb2JXVnpjMkZuWlV4cGMzUXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuZGxZbE52WTJ0bGRFTnZiblJ5YjJ4c1pYSXViMjVUZEhKbFlXMWxja2xFUTJoaGJtZGxaQ0E5SUNoY2JpQWdJQ0FnSUNBZ0lDQWdJRzFsYzNOaFoyVTZJRTFsYzNOaFoyVlNaV05sYVhabExrMWxjM05oWjJWVGRISmxZVzFsY2tsRVEyaGhibWRsWkZ4dUlDQWdJQ0FnSUNBcElEMCtJSFJvYVhNdWFHRnVaR3hsVTNSeVpXRnRaWEpKUkVOb1lXNW5aV1JOWlhOellXZGxLRzFsYzNOaFoyVXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuZGxZbE52WTJ0bGRFTnZiblJ5YjJ4c1pYSXViMjVRYkdGNVpYSkRiM1Z1ZENBOUlDaHdiR0Y1WlhKRGIzVnVkRG9nVFdWemMyRm5aVkpsWTJWcGRtVXVUV1Z6YzJGblpWQnNZWGxsY2tOdmRXNTBLU0E5UGlCN0lGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdhWGhsYkZOMGNtVmhiV2x1Wnk1ZmIyNVFiR0Y1WlhKRGIzVnVkQ2h3YkdGNVpYSkRiM1Z1ZEM1amIzVnVkQ2s3SUZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5kbFlsTnZZMnRsZEVOdmJuUnliMnhzWlhJdWIyNVBjR1Z1TG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjI5d1pXNG5MQ0FvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JDY205M2MyVnlVMlZ1WkhOUFptWmxjaUE5SUhSb2FYTXVZMjl1Wm1sbkxtbHpSbXhoWjBWdVlXSnNaV1FvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUm14aFozTXVRbkp2ZDNObGNsTmxibVJQWm1abGNseHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtS0NGQ2NtOTNjMlZ5VTJWdVpITlBabVpsY2lsY2JpQWdJQ0FnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuZGxZbE52WTJ0bGRFTnZiblJ5YjJ4c1pYSXVjbVZ4ZFdWemRGTjBjbVZoYldWeVRHbHpkQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUzWldKVGIyTnJaWFJEYjI1MGNtOXNiR1Z5TG05dVEyeHZjMlV1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduWTJ4dmMyVW5MQ0FvWlhabGJuUWdPaUJEZFhOMGIyMUZkbVZ1ZENrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdkMmhsYmlCM1pTQnlaV1p5WlhOb0lIUm9aU0J3WVdkbElHUjFjbWx1WnlCaElITjBjbVZoYlNCM1pTQm5aWFFnZEdobElHZHZhVzVuSUdGM1lYa2dZMjlrWlM1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdsdUlIUm9ZWFFnWTJGelpTQjNaU0JrYjI0bmRDQjNZVzUwSUhSdklISmxZMjl1Ym1WamRDQnphVzVqWlNCM1pTZHlaU0J1WVhacFoyRjBhVzVuSUdGM1lYa3VYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5Qm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNXRiM3BwYkd4aExtOXlaeTlsYmkxVlV5OWtiMk56TDFkbFlpOUJVRWt2UTJ4dmMyVkZkbVZ1ZEM5amIyUmxYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnNhWE4wY3lCaGJHd2dkR2hsSUdOdlpHVnpMaUJjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUVOUFJFVmZSMDlKVGtkZlFWZEJXU0E5SURFd01ERTdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhkcGJHeFVjbmxTWldOdmJtNWxZM1FnUFNCMGFHbHpMbk5vYjNWc1pGSmxZMjl1Ym1WamRGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0ppWWdaWFpsYm5RdVpHVjBZV2xzTG1OdlpHVWdJVDBnUTA5RVJWOUhUMGxPUjE5QlYwRlpYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW1KaUIwYUdsekxtTnZibVpwWnk1blpYUk9kVzFsY21salUyVjBkR2x1WjFaaGJIVmxLRTUxYldWeWFXTlFZWEpoYldWMFpYSnpMazFoZUZKbFkyOXVibVZqZEVGMGRHVnRjSFJ6S1NBK0lEQmNibHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWkdselkyOXVibVZqZEUxbGMzTmhaMlVnUFNCMGFHbHpMbVJwYzJOdmJtNWxZM1JOWlhOellXZGxJRDhnZEdocGN5NWthWE5qYjI1dVpXTjBUV1Z6YzJGblpTQTZJR1YyWlc1MExtUmxkR0ZwYkM1eVpXRnpiMjQ3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CcGVHVnNVM1J5WldGdGFXNW5MbDl2YmtScGMyTnZibTVsWTNRb1pHbHpZMjl1Ym1WamRFMWxjM05oWjJVc0lDRjNhV3hzVkhKNVVtVmpiMjV1WldOMElDWW1JQ0YwYUdsekxtbHpVbVZqYjI1dVpXTjBhVzVuS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWhabXREYjI1MGNtOXNiR1Z5TG5OMGIzQkJabXRYWVhKdWFXNW5WR2x0WlhJb0tUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdjM1J2Y0NCelpXNWthVzVuSUhOMFlYUnpJRzl1SUdsdWRHVnlkbUZzSUdsbUlIZGxJR2hoZG1VZ1kyeHZjMlZrSUc5MWNpQmpiMjV1WldOMGFXOXVYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1emRHRjBjMVJwYldWeVNHRnVaR3hsSUNZbUlIUm9hWE11YzNSaGRITlVhVzFsY2toaGJtUnNaU0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkMmx1Wkc5M0xtTnNaV0Z5U1c1MFpYSjJZV3dvZEdocGN5NXpkR0YwYzFScGJXVnlTR0Z1Wkd4bEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2NtVnpaWFFnZEdobElITjBjbVZoYlNCeGRXRnNhWFI1SUdsamIyNHVYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEZacFpHVnZSVzVqYjJSbGNrRjJaMUZRS0RBcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QjFibkpsWjJsemRHVnlJR0ZzYkNCcGJuQjFkQ0JrWlhacFkyVWdaWFpsYm5RZ2FHRnVaR3hsY25NZ2IyNGdaR2x6WTI5dWJtVmpkRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSVWIzVmphRWx1Y0hWMFJXNWhZbXhsWkNobVlXeHpaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFMXZkWE5sU1c1d2RYUkZibUZpYkdWa0tHWmhiSE5sS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVjBTMlY1WW05aGNtUkpibkIxZEVWdVlXSnNaV1FvWm1Gc2MyVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSSFlXMWxVR0ZrU1c1d2RYUkZibUZpYkdWa0tHWmhiSE5sS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIZHBiR3hVY25sU1pXTnZibTVsWTNRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJ1WldWa0lHRWdjMjFoYkd3Z1pHVnNZWGtnYUdWeVpTQjBieUJ3Y21WMlpXNTBJSEpsWTI5dWJtVmpkQ0J6Y0dGdGJXbHVaMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sZEZScGJXVnZkWFFvS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWx6VW1WamIyNXVaV04wYVc1bklEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1eVpXTnZibTVsWTNSQmRIUmxiWEIwS3lzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRISjVVbVZqYjI1dVpXTjBLR1YyWlc1MExtUmxkR0ZwYkM1eVpXRnpiMjRwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc0lESXdNREFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJ6WlhRZ2RYQWdkR2hsSUdacGJtRnNJSGRsWWxKMFl5QndiR0Y1WlhJZ1kyOXVkSEp2Ykd4bGNpQnRaWFJvYjJSeklHWnliMjBnZDJsMGFHbHVJRzkxY2lCaGNIQnNhV05oZEdsdmJpQnpieUJoSUdOdmJtNWxZM1JwYjI0Z1kyRnVJR0psSUdGamRHbDJZWFJsWkZ4dUlDQWdJQ0FnSUNCMGFHbHpMbk5sYm1STlpYTnpZV2RsUTI5dWRISnZiR3hsY2lBOUlHNWxkeUJUWlc1a1RXVnpjMkZuWlVOdmJuUnliMnhzWlhJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtUmhkR0ZEYUdGdWJtVnNVMlZ1WkdWeUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpkSEpsWVcxTlpYTnpZV2RsUTI5dWRISnZiR3hsY2x4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5SdlUzUnlaV0Z0WlhKTlpYTnpZV2RsYzBOdmJuUnliMnhzWlhJZ1BTQnVaWGNnVkc5VGRISmxZVzFsY2sxbGMzTmhaMlZ6UTI5dWRISnZiR3hsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVnVaRTFsYzNOaFoyVkRiMjUwY205c2JHVnlYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbVZuYVhOMFpYSk5aWE56WVdkbFNHRnVaR3hsY25Nb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1emRISmxZVzFOWlhOellXZGxRMjl1ZEhKdmJHeGxjaTV3YjNCMWJHRjBaVVJsWm1GMWJIUlFjbTkwYjJOdmJDZ3BPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhVzV3ZFhSRGJHRnpjMlZ6Um1GamRHOXllU0E5SUc1bGR5QkpibkIxZEVOc1lYTnpaWE5HWVdOMGIzSjVLRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6ZEhKbFlXMU5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpeGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkbWxrWlc5UWJHRjVaWElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OdmIzSmthVzVoZEdWRGIyNTJaWEowWlhKY2JpQWdJQ0FnSUNBZ0tUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxtbHpWWE5wYm1kVFJsVWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1cGMxRjFZV3hwZEhsRGIyNTBjbTlzYkdWeUlEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y0hKbFptVnljbVZrUTI5a1pXTWdQU0FuSnp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6YUc5MWJHUlNaV052Ym01bFkzUWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1selVtVmpiMjV1WldOMGFXNW5JRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtVmpiMjV1WldOMFFYUjBaVzF3ZENBOUlEQTdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NWpiMjVtYVdjdVgyRmtaRTl1VDNCMGFXOXVVMlYwZEdsdVowTm9ZVzVuWldSTWFYTjBaVzVsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJRTl3ZEdsdmJsQmhjbUZ0WlhSbGNuTXVVM1J5WldGdFpYSkpaQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDaHpkSEpsWVcxbGNtbGtLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWW9jM1J5WldGdFpYSnBaQ0E5UFQwZ1hDSmNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnWTJ4dmMyVWdkR2hsSUdOMWNuSmxiblFnY0dWbGNpQmpiMjV1WldOMGFXOXVJR0Z1WkNCamNtVmhkR1VnWVNCdVpYY2diMjVsWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdaV1Z5UTI5dWJtVmpkR2x2YmtOdmJuUnliMnhzWlhJdWNHVmxja052Ym01bFkzUnBiMjR1WTJ4dmMyVW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQmxaWEpEYjI1dVpXTjBhVzl1UTI5dWRISnZiR3hsY2k1amNtVmhkR1ZRWldWeVEyOXVibVZqZEdsdmJpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdaV1Z5UTI5dVptbG5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJ5WldabGNuSmxaRU52WkdWalhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5OMVluTmpjbWxpWldSVGRISmxZVzBnUFNCemRISmxZVzFsY21sa08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZDJWaVUyOWphMlYwUTI5dWRISnZiR3hsY2k1elpXNWtVM1ZpYzJOeWFXSmxLSE4wY21WaGJXVnlhV1FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FwTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11YzJWMFZtbGtaVzlGYm1OdlpHVnlRWFpuVVZBb0xURXBPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMmxuYm1Gc2JHbHVaMVZ5YkVKMWFXeGtaWElnUFNBZ0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhOcFoyNWhiR3hwYm1kVFpYSjJaWEpWY213Z1BTQjBhR2x6TG1OdmJtWnBaeTVuWlhSVVpYaDBVMlYwZEdsdVoxWmhiSFZsS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZSbGVIUlFZWEpoYldWMFpYSnpMbE5wWjI1aGJHeHBibWRUWlhKMlpYSlZjbXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCSlppQjNaU0JoY21VZ1kyOXVibVZqZEdsdVp5QjBieUIwYUdVZ1UwWlZJR0ZrWkNCaElITndaV05wWVd3Z2RYSnNJSEJoY21GdFpYUmxjaUIwYnlCMGFHVWdkWEpzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWpiMjVtYVdjdWFYTkdiR0ZuUlc1aFlteGxaQ2hHYkdGbmN5NUNjbTkzYzJWeVUyVnVaRTltWm1WeUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5wWjI1aGJHeHBibWRUWlhKMlpYSlZjbXdnS3owZ0p6OG5JQ3NnUm14aFozTXVRbkp2ZDNObGNsTmxibVJQWm1abGNpQXJJQ2M5ZEhKMVpTYzdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJVYUdseklHTnZaR1VnYVhNZ2JtOGdiRzl1WjJWeUlHNWxaV1JsWkN3Z1luVjBJR2x6SUdFZ1oyOXZaQ0JsZUdGdGNHeGxJR1p2Y2lCb2IzY2djM1ZpYzJWeGRXVnVkQ0JqYjI1bWFXY2dabXhoWjNNZ1kyRnVJR0psSUdGd2NHVnVaR1ZrWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJwWmlBb2RHaHBjeTVqYjI1bWFXY3VhWE5HYkdGblJXNWhZbXhsWkNoR2JHRm5jeTVDY205M2MyVnlVMlZ1WkU5bVptVnlLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnSUNBZ0lITnBaMjVoYkd4cGJtZFRaWEoyWlhKVmNtd2dLejBnS0hOcFoyNWhiR3hwYm1kVFpYSjJaWEpWY213dWFXNWpiSFZrWlhNb0p6OG5LU0EvSUNjbUp5QTZJQ2MvSnlrZ0t5QkdiR0ZuY3k1Q2NtOTNjMlZ5VTJWdVpFOW1abVZ5SUNzZ0p6MTBjblZsSnp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUgxY2JpQWdJQ0JjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCemFXZHVZV3hzYVc1blUyVnlkbVZ5VlhKc08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dUV0ZyWlNCaElISmxjWFZsYzNRZ2RHOGdWVzV4ZFdGdWRHbDZaV1JCYm1SRVpXNXZjbTFoYkdsNlpWVnVjMmxuYm1Wa0lHTnZiM0prYVc1aGRHVnpYRzRnSUNBZ0lDb2dRSEJoY21GdElIZ2dlQ0JoZUdseklHTnZiM0prYVc1aGRHVmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2VTQjVJR0Y0YVhNZ1kyOXZjbVJwYm1GMFpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhKbGNYVmxjM1JWYm5GMVlXNTBhWHBsWkVGdVpFUmxibTl5YldGc2FYcGxWVzV6YVdkdVpXUW9YRzRnSUNBZ0lDQWdJSGc2SUc1MWJXSmxjaXhjYmlBZ0lDQWdJQ0FnZVRvZ2JuVnRZbVZ5WEc0Z0lDQWdLVG9nVlc1eGRXRnVkR2w2WldSRVpXNXZjbTFoYkdsNlpXUlZibk5wWjI1bFpFTnZiM0prSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZMjl2Y21ScGJtRjBaVU52Ym5abGNuUmxjaTUxYm5GMVlXNTBhWHBsUVc1a1JHVnViM0p0WVd4cGVtVlZibk5wWjI1bFpDaDRMQ0I1S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSVlXNWtiR1Z6SUhkb1pXNGdZU0J0WlhOellXZGxJR2x6SUhKbFkyVnBkbVZrWEc0Z0lDQWdJQ29nUUhCaGNtRnRJR1YyWlc1MElDMGdUV1Z6YzJGblpTQkZkbVZ1ZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJR2hoYm1Sc1pVOXVUV1Z6YzJGblpTaGxkbVZ1ZERvZ1RXVnpjMkZuWlVWMlpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRzFsYzNOaFoyVWdQU0J1WlhjZ1ZXbHVkRGhCY25KaGVTaGxkbVZ1ZEM1a1lYUmhLVHRjYmlBZ0lDQWdJQ0FnVEc5bloyVnlMa3h2WnloTWIyZG5aWEl1UjJWMFUzUmhZMnRVY21GalpTZ3BMQ0FuVFdWemMyRm5aU0JwYm1OdmJXbHVaem9uSUNzZ2JXVnpjMkZuWlN3Z05pazdYRzVjYmlBZ0lDQWdJQ0FnTHk5MGNua2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnRaWE56WVdkbFZIbHdaU0E5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5OMGNtVmhiVTFsYzNOaFoyVkRiMjUwY205c2JHVnlMbVp5YjIxVGRISmxZVzFsY2sxbGMzTmhaMlZ6TG1kbGRDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbFd6QmRYRzRnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMGNtVmhiVTFsYzNOaFoyVkRiMjUwY205c2JHVnlMbVp5YjIxVGRISmxZVzFsY2toaGJtUnNaWEp6TG1kbGRDaHRaWE56WVdkbFZIbHdaU2tvWEc0Z0lDQWdJQ0FnSUNBZ0lDQmxkbVZ1ZEM1a1lYUmhYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUM4dmZTQmpZWFJqYUNBb1pTa2dlMXh1SUNBZ0lDQWdJQ0F2TDB4dloyZGxjaTVGY25KdmNpaE1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTENCZ1EzVnpkRzl0SUdSaGRHRWdZMmhoYm01bGJDQnRaWE56WVdkbElIZHBkR2dnYldWemMyRm5aU0IwZVhCbElIUm9ZWFFnYVhNZ2RXNXJibTkzYmlCMGJ5QjBhR1VnVUdsNFpXd2dVM1J5WldGdGFXNW5JSEJ5YjNSdlkyOXNMaUJFYjJWeklIbHZkWElnVUdsNFpXeFRkSEpsWVcxcGJtZFFjbTkwYjJOdmJDQnVaV1ZrSUhWd1pHRjBhVzVuUHlCVWFHVWdiV1Z6YzJGblpTQjBlWEJsSUhkaGN6b2dKSHR0WlhOellXZGxXekJkZldBcE8xeHVJQ0FnSUNBZ0lDQXZMMzFjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJTWldkcGMzUmxjaUJ0WlhOellXZGxJR0ZzYkNCb1lXNWtiR1Z5YzF4dUlDQWdJQ0FxTDF4dUlDQWdJSEpsWjJsemRHVnlUV1Z6YzJGblpVaGhibVJzWlhKektDa2dlMXh1SUNBZ0lDQWdJQ0F2THlCR2NtOXRJRk4wY21WaGJXVnlYRzRnSUNBZ0lDQWdJQzh2SUUxbGMzTmhaMlVnWlhabGJuUnpJR1p5YjIwZ2RHaGxJSE4wY21WaGJXVnlJR2hoZG1VZ1lTQmtZWFJoSUhSNWNHVWdiMllnUVhKeVlYbENkV1ptWlhJZ1lYTWdkMlVnWm05eVkyVWdkR2hwY3lCMGVYQmxJR2x1SUhSb1pTQkVZWFJoWTJoaGJtNWxiRU52Ym5SeWIyeHNaWEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXpkSEpsWVcxTlpYTnpZV2RsUTI5dWRISnZiR3hsY2k1eVpXZHBjM1JsY2sxbGMzTmhaMlZJWVc1a2JHVnlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1RXVnpjMkZuWlVScGNtVmpkR2x2Ymk1R2NtOXRVM1J5WldGdFpYSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBblVYVmhiR2wwZVVOdmJuUnliMnhQZDI1bGNuTm9hWEFuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdLR1JoZEdFNklFRnljbUY1UW5WbVptVnlLU0E5UGlCMGFHbHpMbTl1VVhWaGJHbDBlVU52Ym5SeWIyeFBkMjVsY25Ob2FYQW9aR0YwWVNsY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1emRISmxZVzFOWlhOellXZGxRMjl1ZEhKdmJHeGxjaTV5WldkcGMzUmxjazFsYzNOaFoyVklZVzVrYkdWeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnVFdWemMyRm5aVVJwY21WamRHbHZiaTVHY205dFUzUnlaV0Z0WlhJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuVW1WemNHOXVjMlVuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdLR1JoZEdFNklFRnljbUY1UW5WbVptVnlLU0E5UGlCMGFHbHpMbkpsYzNCdmJuTmxRMjl1ZEhKdmJHeGxjaTV2YmxKbGMzQnZibk5sS0dSaGRHRXBYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjM1J5WldGdFRXVnpjMkZuWlVOdmJuUnliMnhzWlhJdWNtVm5hWE4wWlhKTlpYTnpZV2RsU0dGdVpHeGxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lFMWxjM05oWjJWRWFYSmxZM1JwYjI0dVJuSnZiVk4wY21WaGJXVnlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0owTnZiVzFoYm1RbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0dSaGRHRTZJRUZ5Y21GNVFuVm1abVZ5S1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dmJrTnZiVzFoYm1Rb1pHRjBZU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjM1J5WldGdFRXVnpjMkZuWlVOdmJuUnliMnhzWlhJdWNtVm5hWE4wWlhKTlpYTnpZV2RsU0dGdVpHeGxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lFMWxjM05oWjJWRWFYSmxZM1JwYjI0dVJuSnZiVk4wY21WaGJXVnlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0owWnlaV1Y2WlVaeVlXMWxKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDaGtZWFJoT2lCQmNuSmhlVUoxWm1abGNpa2dQVDRnZEdocGN5NXZia1p5WldWNlpVWnlZVzFsVFdWemMyRm5aU2hrWVhSaEtWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5TG5KbFoybHpkR1Z5VFdWemMyRm5aVWhoYm1Sc1pYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNCTlpYTnpZV2RsUkdseVpXTjBhVzl1TGtaeWIyMVRkSEpsWVcxbGNpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNkVmJtWnlaV1Y2WlVaeVlXMWxKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDZ3BJRDArSUhSb2FYTXVhVzUyWVd4cFpHRjBaVVp5WldWNlpVWnlZVzFsUVc1a1JXNWhZbXhsVm1sa1pXOG9LVnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk4wY21WaGJVMWxjM05oWjJWRGIyNTBjbTlzYkdWeUxuSmxaMmx6ZEdWeVRXVnpjMkZuWlVoaGJtUnNaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQk5aWE56WVdkbFJHbHlaV04wYVc5dUxrWnliMjFUZEhKbFlXMWxjaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDZFdhV1JsYjBWdVkyOWtaWEpCZG1kUlVDY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBb1pHRjBZVG9nUVhKeVlYbENkV1ptWlhJcElEMCtJSFJvYVhNdWFHRnVaR3hsVm1sa1pXOUZibU52WkdWeVFYWm5VVkFvWkdGMFlTbGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpkSEpsWVcxTlpYTnpZV2RsUTI5dWRISnZiR3hsY2k1eVpXZHBjM1JsY2sxbGMzTmhaMlZJWVc1a2JHVnlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1RXVnpjMkZuWlVScGNtVmpkR2x2Ymk1R2NtOXRVM1J5WldGdFpYSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBblRHRjBaVzVqZVZSbGMzUW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tHUmhkR0U2SUVGeWNtRjVRblZtWm1WeUtTQTlQaUIwYUdsekxtaGhibVJzWlV4aGRHVnVZM2xVWlhOMFVtVnpkV3gwS0dSaGRHRXBYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjM1J5WldGdFRXVnpjMkZuWlVOdmJuUnliMnhzWlhJdWNtVm5hWE4wWlhKTlpYTnpZV2RsU0dGdVpHeGxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lFMWxjM05oWjJWRWFYSmxZM1JwYjI0dVJuSnZiVk4wY21WaGJXVnlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0owUmhkR0ZEYUdGdWJtVnNUR0YwWlc1amVWUmxjM1FuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdLR1JoZEdFNklFRnljbUY1UW5WbVptVnlLU0E5UGlCMGFHbHpMbWhoYm1Sc1pVUmhkR0ZEYUdGdWJtVnNUR0YwWlc1amVWUmxjM1JTWlhOd2IyNXpaU2hrWVhSaEtWeHVJQ0FnSUNBZ0lDQXBYRzRnSUNBZ0lDQWdJSFJvYVhNdWMzUnlaV0Z0VFdWemMyRm5aVU52Ym5SeWIyeHNaWEl1Y21WbmFYTjBaWEpOWlhOellXZGxTR0Z1Wkd4bGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUUxbGMzTmhaMlZFYVhKbFkzUnBiMjR1Um5KdmJWTjBjbVZoYldWeUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSjBsdWFYUnBZV3hUWlhSMGFXNW5jeWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9aR0YwWVRvZ1FYSnlZWGxDZFdabVpYSXBJRDArSUhSb2FYTXVhR0Z1Wkd4bFNXNXBkR2xoYkZObGRIUnBibWR6S0dSaGRHRXBYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjM1J5WldGdFRXVnpjMkZuWlVOdmJuUnliMnhzWlhJdWNtVm5hWE4wWlhKTlpYTnpZV2RsU0dGdVpHeGxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lFMWxjM05oWjJWRWFYSmxZM1JwYjI0dVJuSnZiVk4wY21WaGJXVnlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0owWnBiR1ZGZUhSbGJuTnBiMjRuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdLR1JoZEdFNklFRnljbUY1UW5WbVptVnlLU0E5UGlCMGFHbHpMbTl1Um1sc1pVVjRkR1Z1YzJsdmJpaGtZWFJoS1Z4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMGNtVmhiVTFsYzNOaFoyVkRiMjUwY205c2JHVnlMbkpsWjJsemRHVnlUV1Z6YzJGblpVaGhibVJzWlhJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JOWlhOellXZGxSR2x5WldOMGFXOXVMa1p5YjIxVGRISmxZVzFsY2l4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2RHYVd4bFRXbHRaVlI1Y0dVbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0dSaGRHRTZJRUZ5Y21GNVFuVm1abVZ5S1NBOVBpQjBhR2x6TG05dVJtbHNaVTFwYldWVWVYQmxLR1JoZEdFcFhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMzUnlaV0Z0VFdWemMyRm5aVU52Ym5SeWIyeHNaWEl1Y21WbmFYTjBaWEpOWlhOellXZGxTR0Z1Wkd4bGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUUxbGMzTmhaMlZFYVhKbFkzUnBiMjR1Um5KdmJWTjBjbVZoYldWeUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSjBacGJHVkRiMjUwWlc1MGN5Y3NYRzRnSUNBZ0lDQWdJQ0FnSUNBb1pHRjBZVG9nUVhKeVlYbENkV1ptWlhJcElEMCtJSFJvYVhNdWIyNUdhV3hsUTI5dWRHVnVkSE1vWkdGMFlTbGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpkSEpsWVcxTlpYTnpZV2RsUTI5dWRISnZiR3hsY2k1eVpXZHBjM1JsY2sxbGMzTmhaMlZJWVc1a2JHVnlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1RXVnpjMkZuWlVScGNtVmpkR2x2Ymk1R2NtOXRVM1J5WldGdFpYSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBblZHVnpkRVZqYUc4bkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUVSdklHNXZkR2hwYm1jZ0tpOWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1emRISmxZVzFOWlhOellXZGxRMjl1ZEhKdmJHeGxjaTV5WldkcGMzUmxjazFsYzNOaFoyVklZVzVrYkdWeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnVFdWemMyRm5aVVJwY21WamRHbHZiaTVHY205dFUzUnlaV0Z0WlhJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuU1c1d2RYUkRiMjUwY205c1QzZHVaWEp6YUdsd0p5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNoa1lYUmhPaUJCY25KaGVVSjFabVpsY2lrZ1BUNGdkR2hwY3k1dmJrbHVjSFYwUTI5dWRISnZiRTkzYm1WeWMyaHBjQ2hrWVhSaEtWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5TG5KbFoybHpkR1Z5VFdWemMyRm5aVWhoYm1Sc1pYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNCTlpYTnpZV2RsUkdseVpXTjBhVzl1TGtaeWIyMVRkSEpsWVcxbGNpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNkSFlXMWxjR0ZrVW1WemNHOXVjMlVuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdLR1JoZEdFNklFRnljbUY1UW5WbVptVnlLU0E5UGlCMGFHbHpMbTl1UjJGdFpYQmhaRkpsYzNCdmJuTmxLR1JoZEdFcFhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMzUnlaV0Z0VFdWemMyRm5aVU52Ym5SeWIyeHNaWEl1Y21WbmFYTjBaWEpOWlhOellXZGxTR0Z1Wkd4bGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUUxbGMzTmhaMlZFYVhKbFkzUnBiMjR1Um5KdmJWTjBjbVZoYldWeUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSjFCeWIzUnZZMjlzSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2hrWVhSaE9pQkJjbkpoZVVKMVptWmxjaWtnUFQ0Z2RHaHBjeTV2YmxCeWIzUnZZMjlzVFdWemMyRm5aU2hrWVhSaEtWeHVJQ0FnSUNBZ0lDQXBPMXh1WEc0Z0lDQWdJQ0FnSUM4dklGUnZJRk4wY21WaGJXVnlYRzRnSUNBZ0lDQWdJSFJvYVhNdWMzUnlaV0Z0VFdWemMyRm5aVU52Ym5SeWIyeHNaWEl1Y21WbmFYTjBaWEpOWlhOellXZGxTR0Z1Wkd4bGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUUxbGMzTmhaMlZFYVhKbFkzUnBiMjR1Vkc5VGRISmxZVzFsY2l4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2RKUm5KaGJXVlNaWEYxWlhOMEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNncElEMCtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpXNWtUV1Z6YzJGblpVTnZiblJ5YjJ4c1pYSXVjMlZ1WkUxbGMzTmhaMlZVYjFOMGNtVmhiV1Z5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5TVVp5WVcxbFVtVnhkV1Z6ZENkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcFhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMzUnlaV0Z0VFdWemMyRm5aVU52Ym5SeWIyeHNaWEl1Y21WbmFYTjBaWEpOWlhOellXZGxTR0Z1Wkd4bGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUUxbGMzTmhaMlZFYVhKbFkzUnBiMjR1Vkc5VGRISmxZVzFsY2l4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2RTWlhGMVpYTjBVWFZoYkdsMGVVTnZiblJ5YjJ3bkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0NrZ1BUNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGJtUk5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpNXpaVzVrVFdWemMyRm5aVlJ2VTNSeVpXRnRaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZFNaWEYxWlhOMFVYVmhiR2wwZVVOdmJuUnliMnduWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1Z4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMGNtVmhiVTFsYzNOaFoyVkRiMjUwY205c2JHVnlMbkpsWjJsemRHVnlUV1Z6YzJGblpVaGhibVJzWlhJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JOWlhOellXZGxSR2x5WldOMGFXOXVMbFJ2VTNSeVpXRnRaWElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5SbkJ6VW1WeGRXVnpkQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9LU0E5UGlCMGFHbHpMbk5sYm1STlpYTnpZV2RsUTI5dWRISnZiR3hsY2k1elpXNWtUV1Z6YzJGblpWUnZVM1J5WldGdFpYSW9KMFp3YzFKbGNYVmxjM1FuS1Z4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMGNtVmhiVTFsYzNOaFoyVkRiMjUwY205c2JHVnlMbkpsWjJsemRHVnlUV1Z6YzJGblpVaGhibVJzWlhJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JOWlhOellXZGxSR2x5WldOMGFXOXVMbFJ2VTNSeVpXRnRaWElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5RWFpsY21GblpVSnBkSEpoZEdWU1pYRjFaWE4wSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2dwSUQwK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6Wlc1a1RXVnpjMkZuWlVOdmJuUnliMnhzWlhJdWMyVnVaRTFsYzNOaFoyVlViMU4wY21WaGJXVnlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblFYWmxjbUZuWlVKcGRISmhkR1ZTWlhGMVpYTjBKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2xjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6ZEhKbFlXMU5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpNXlaV2RwYzNSbGNrMWxjM05oWjJWSVlXNWtiR1Z5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdUV1Z6YzJGblpVUnBjbVZqZEdsdmJpNVViMU4wY21WaGJXVnlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0oxTjBZWEowVTNSeVpXRnRhVzVuSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2dwSUQwK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6Wlc1a1RXVnpjMkZuWlVOdmJuUnliMnhzWlhJdWMyVnVaRTFsYzNOaFoyVlViMU4wY21WaGJXVnlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblUzUmhjblJUZEhKbFlXMXBibWNuWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1Z4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMGNtVmhiVTFsYzNOaFoyVkRiMjUwY205c2JHVnlMbkpsWjJsemRHVnlUV1Z6YzJGblpVaGhibVJzWlhJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JOWlhOellXZGxSR2x5WldOMGFXOXVMbFJ2VTNSeVpXRnRaWElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5VM1J2Y0ZOMGNtVmhiV2x1Wnljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvS1NBOVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzJWdVpFMWxjM05oWjJWRGIyNTBjbTlzYkdWeUxuTmxibVJOWlhOellXZGxWRzlUZEhKbFlXMWxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0oxTjBiM0JUZEhKbFlXMXBibWNuWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1Z4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMGNtVmhiVTFsYzNOaFoyVkRiMjUwY205c2JHVnlMbkpsWjJsemRHVnlUV1Z6YzJGblpVaGhibVJzWlhJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JOWlhOellXZGxSR2x5WldOMGFXOXVMbFJ2VTNSeVpXRnRaWElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5UR0YwWlc1amVWUmxjM1FuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdLR1JoZEdFNklFRnljbUY1UEc1MWJXSmxjaUI4SUhOMGNtbHVaejRwSUQwK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6Wlc1a1RXVnpjMkZuWlVOdmJuUnliMnhzWlhJdWMyVnVaRTFsYzNOaFoyVlViMU4wY21WaGJXVnlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblRHRjBaVzVqZVZSbGMzUW5MQ0JrWVhSaFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5TG5KbFoybHpkR1Z5VFdWemMyRm5aVWhoYm1Sc1pYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNCTlpYTnpZV2RsUkdseVpXTjBhVzl1TGxSdlUzUnlaV0Z0WlhJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuVW1WeGRXVnpkRWx1YVhScFlXeFRaWFIwYVc1bmN5Y3NYRzRnSUNBZ0lDQWdJQ0FnSUNBb0tTQTlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVnVaRTFsYzNOaFoyVkRiMjUwY205c2JHVnlMbk5sYm1STlpYTnpZV2RsVkc5VGRISmxZVzFsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMUpsY1hWbGMzUkpibWwwYVdGc1UyVjBkR2x1WjNNblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5TG5KbFoybHpkR1Z5VFdWemMyRm5aVWhoYm1Sc1pYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNCTlpYTnpZV2RsUkdseVpXTjBhVzl1TGxSdlUzUnlaV0Z0WlhJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuVkdWemRFVmphRzhuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRVJ2SUc1dmRHaHBibWNnS2k5Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6ZEhKbFlXMU5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpNXlaV2RwYzNSbGNrMWxjM05oWjJWSVlXNWtiR1Z5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdUV1Z6YzJGblpVUnBjbVZqZEdsdmJpNVViMU4wY21WaGJXVnlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0oxVkpTVzUwWlhKaFkzUnBiMjRuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdLR1JoZEdFNklFRnljbUY1UEc1MWJXSmxjaUI4SUhOMGNtbHVaejRwSUQwK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6Wlc1a1RXVnpjMkZuWlVOdmJuUnliMnhzWlhJdWMyVnVaRTFsYzNOaFoyVlViMU4wY21WaGJXVnlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblZVbEpiblJsY21GamRHbHZiaWNzSUdSaGRHRmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjM1J5WldGdFRXVnpjMkZuWlVOdmJuUnliMnhzWlhJdWNtVm5hWE4wWlhKTlpYTnpZV2RsU0dGdVpHeGxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lFMWxjM05oWjJWRWFYSmxZM1JwYjI0dVZHOVRkSEpsWVcxbGNpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNkRGIyMXRZVzVrSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2hrWVhSaE9pQkJjbkpoZVR4dWRXMWlaWElnZkNCemRISnBibWMrS1NBOVBpQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGJtUk5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpNXpaVzVrVFdWemMyRm5aVlJ2VTNSeVpXRnRaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZERiMjF0WVc1a0p5d2daR0YwWVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNsY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1emRISmxZVzFOWlhOellXZGxRMjl1ZEhKdmJHeGxjaTV5WldkcGMzUmxjazFsYzNOaFoyVklZVzVrYkdWeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnVFdWemMyRm5aVVJwY21WamRHbHZiaTVVYjFOMGNtVmhiV1Z5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdKMVJsZUhSaWIzaEZiblJ5ZVNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvWkdGMFlUb2dRWEp5WVhrOGJuVnRZbVZ5SUh3Z2MzUnlhVzVuUGlrZ1BUNGdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpXNWtUV1Z6YzJGblpVTnZiblJ5YjJ4c1pYSXVjMlZ1WkUxbGMzTmhaMlZVYjFOMGNtVmhiV1Z5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5WR1Y0ZEdKdmVFVnVkSEo1Snl3Z1pHRjBZVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2xjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6ZEhKbFlXMU5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpNXlaV2RwYzNSbGNrMWxjM05oWjJWSVlXNWtiR1Z5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdUV1Z6YzJGblpVUnBjbVZqZEdsdmJpNVViMU4wY21WaGJXVnlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0owdGxlVVJ2ZDI0bkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0dSaGRHRTZJRUZ5Y21GNVBHNTFiV0psY2lCOElITjBjbWx1Wno0cElEMCtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpXNWtUV1Z6YzJGblpVTnZiblJ5YjJ4c1pYSXVjMlZ1WkUxbGMzTmhaMlZVYjFOMGNtVmhiV1Z5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5TMlY1Ukc5M2JpY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjM1J5WldGdFRXVnpjMkZuWlVOdmJuUnliMnhzWlhJdWNtVm5hWE4wWlhKTlpYTnpZV2RsU0dGdVpHeGxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lFMWxjM05oWjJWRWFYSmxZM1JwYjI0dVZHOVRkSEpsWVcxbGNpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNkTFpYbFZjQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9aR0YwWVRvZ1FYSnlZWGs4Ym5WdFltVnlJSHdnYzNSeWFXNW5QaWtnUFQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sYm1STlpYTnpZV2RsUTI5dWRISnZiR3hsY2k1elpXNWtUV1Z6YzJGblpWUnZVM1J5WldGdFpYSW9KMHRsZVZWd0p5d2daR0YwWVNsY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1emRISmxZVzFOWlhOellXZGxRMjl1ZEhKdmJHeGxjaTV5WldkcGMzUmxjazFsYzNOaFoyVklZVzVrYkdWeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnVFdWemMyRm5aVVJwY21WamRHbHZiaTVVYjFOMGNtVmhiV1Z5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdKMHRsZVZCeVpYTnpKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDaGtZWFJoT2lCQmNuSmhlVHh1ZFcxaVpYSWdmQ0J6ZEhKcGJtYytLU0E5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlZ1WkUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5TG5ObGJtUk5aWE56WVdkbFZHOVRkSEpsWVcxbGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjB0bGVWQnlaWE56Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR0YwWVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNsY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1emRISmxZVzFOWlhOellXZGxRMjl1ZEhKdmJHeGxjaTV5WldkcGMzUmxjazFsYzNOaFoyVklZVzVrYkdWeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnVFdWemMyRm5aVVJwY21WamRHbHZiaTVVYjFOMGNtVmhiV1Z5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdKMDF2ZFhObFJXNTBaWEluTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdLR1JoZEdFNklFRnljbUY1UEc1MWJXSmxjaUI4SUhOMGNtbHVaejRwSUQwK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6Wlc1a1RXVnpjMkZuWlVOdmJuUnliMnhzWlhJdWMyVnVaRTFsYzNOaFoyVlViMU4wY21WaGJXVnlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblRXOTFjMlZGYm5SbGNpY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjM1J5WldGdFRXVnpjMkZuWlVOdmJuUnliMnhzWlhJdWNtVm5hWE4wWlhKTlpYTnpZV2RsU0dGdVpHeGxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lFMWxjM05oWjJWRWFYSmxZM1JwYjI0dVZHOVRkSEpsWVcxbGNpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNkTmIzVnpaVXhsWVhabEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNoa1lYUmhPaUJCY25KaGVUeHVkVzFpWlhJZ2ZDQnpkSEpwYm1jK0tTQTlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVnVaRTFsYzNOaFoyVkRiMjUwY205c2JHVnlMbk5sYm1STlpYTnpZV2RsVkc5VGRISmxZVzFsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMDF2ZFhObFRHVmhkbVVuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtZWFJoWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1Z4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMGNtVmhiVTFsYzNOaFoyVkRiMjUwY205c2JHVnlMbkpsWjJsemRHVnlUV1Z6YzJGblpVaGhibVJzWlhJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JOWlhOellXZGxSR2x5WldOMGFXOXVMbFJ2VTNSeVpXRnRaWElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5UVzkxYzJWRWIzZHVKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDaGtZWFJoT2lCQmNuSmhlVHh1ZFcxaVpYSWdmQ0J6ZEhKcGJtYytLU0E5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlZ1WkUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5TG5ObGJtUk5aWE56WVdkbFZHOVRkSEpsWVcxbGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjAxdmRYTmxSRzkzYmljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JoZEdGY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcFhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMzUnlaV0Z0VFdWemMyRm5aVU52Ym5SeWIyeHNaWEl1Y21WbmFYTjBaWEpOWlhOellXZGxTR0Z1Wkd4bGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUUxbGMzTmhaMlZFYVhKbFkzUnBiMjR1Vkc5VGRISmxZVzFsY2l4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2ROYjNWelpWVndKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDaGtZWFJoT2lCQmNuSmhlVHh1ZFcxaVpYSWdmQ0J6ZEhKcGJtYytLU0E5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlZ1WkUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5TG5ObGJtUk5aWE56WVdkbFZHOVRkSEpsWVcxbGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjAxdmRYTmxWWEFuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtZWFJoWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1Z4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMGNtVmhiVTFsYzNOaFoyVkRiMjUwY205c2JHVnlMbkpsWjJsemRHVnlUV1Z6YzJGblpVaGhibVJzWlhJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JOWlhOellXZGxSR2x5WldOMGFXOXVMbFJ2VTNSeVpXRnRaWElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5UVzkxYzJWTmIzWmxKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDaGtZWFJoT2lCQmNuSmhlVHh1ZFcxaVpYSWdmQ0J6ZEhKcGJtYytLU0E5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlZ1WkUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5TG5ObGJtUk5aWE56WVdkbFZHOVRkSEpsWVcxbGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjAxdmRYTmxUVzkyWlNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JoZEdGY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcFhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMzUnlaV0Z0VFdWemMyRm5aVU52Ym5SeWIyeHNaWEl1Y21WbmFYTjBaWEpOWlhOellXZGxTR0Z1Wkd4bGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUUxbGMzTmhaMlZFYVhKbFkzUnBiMjR1Vkc5VGRISmxZVzFsY2l4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2ROYjNWelpWZG9aV1ZzSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2hrWVhSaE9pQkJjbkpoZVR4dWRXMWlaWElnZkNCemRISnBibWMrS1NBOVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzJWdVpFMWxjM05oWjJWRGIyNTBjbTlzYkdWeUxuTmxibVJOWlhOellXZGxWRzlUZEhKbFlXMWxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0owMXZkWE5sVjJobFpXd25MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLVnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk4wY21WaGJVMWxjM05oWjJWRGIyNTBjbTlzYkdWeUxuSmxaMmx6ZEdWeVRXVnpjMkZuWlVoaGJtUnNaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQk5aWE56WVdkbFJHbHlaV04wYVc5dUxsUnZVM1J5WldGdFpYSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBblRXOTFjMlZFYjNWaWJHVW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tHUmhkR0U2SUVGeWNtRjVQRzUxYldKbGNpQjhJSE4wY21sdVp6NHBJRDArWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaVzVrVFdWemMyRm5aVU52Ym5SeWIyeHNaWEl1YzJWdVpFMWxjM05oWjJWVWIxTjBjbVZoYldWeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuVFc5MWMyVkViM1ZpYkdVbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5TG5KbFoybHpkR1Z5VFdWemMyRm5aVWhoYm1Sc1pYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNCTlpYTnpZV2RsUkdseVpXTjBhVzl1TGxSdlUzUnlaV0Z0WlhJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuVkc5MVkyaFRkR0Z5ZENjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvWkdGMFlUb2dRWEp5WVhrOGJuVnRZbVZ5SUh3Z2MzUnlhVzVuUGlrZ1BUNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGJtUk5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpNXpaVzVrVFdWemMyRm5aVlJ2VTNSeVpXRnRaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZFViM1ZqYUZOMFlYSjBKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2xjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6ZEhKbFlXMU5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpNXlaV2RwYzNSbGNrMWxjM05oWjJWSVlXNWtiR1Z5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdUV1Z6YzJGblpVUnBjbVZqZEdsdmJpNVViMU4wY21WaGJXVnlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0oxUnZkV05vUlc1a0p5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNoa1lYUmhPaUJCY25KaGVUeHVkVzFpWlhJZ2ZDQnpkSEpwYm1jK0tTQTlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVnVaRTFsYzNOaFoyVkRiMjUwY205c2JHVnlMbk5sYm1STlpYTnpZV2RsVkc5VGRISmxZVzFsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMVJ2ZFdOb1JXNWtKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2xjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6ZEhKbFlXMU5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpNXlaV2RwYzNSbGNrMWxjM05oWjJWSVlXNWtiR1Z5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdUV1Z6YzJGblpVUnBjbVZqZEdsdmJpNVViMU4wY21WaGJXVnlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0oxUnZkV05vVFc5MlpTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBb1pHRjBZVG9nUVhKeVlYazhiblZ0WW1WeUlId2djM1J5YVc1blBpa2dQVDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTmxibVJOWlhOellXZGxRMjl1ZEhKdmJHeGxjaTV6Wlc1a1RXVnpjMkZuWlZSdlUzUnlaV0Z0WlhJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RVYjNWamFFMXZkbVVuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtZWFJoWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1Z4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMGNtVmhiVTFsYzNOaFoyVkRiMjUwY205c2JHVnlMbkpsWjJsemRHVnlUV1Z6YzJGblpVaGhibVJzWlhJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JOWlhOellXZGxSR2x5WldOMGFXOXVMbFJ2VTNSeVpXRnRaWElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5SMkZ0WlhCaFpFTnZibTVsWTNSbFpDY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBb0tTQTlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVnVaRTFsYzNOaFoyVkRiMjUwY205c2JHVnlMbk5sYm1STlpYTnpZV2RsVkc5VGRISmxZVzFsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMGRoYldWd1lXUkRiMjV1WldOMFpXUW5YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLVnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk4wY21WaGJVMWxjM05oWjJWRGIyNTBjbTlzYkdWeUxuSmxaMmx6ZEdWeVRXVnpjMkZuWlVoaGJtUnNaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQk5aWE56WVdkbFJHbHlaV04wYVc5dUxsUnZVM1J5WldGdFpYSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBblIyRnRaWEJoWkVKMWRIUnZibEJ5WlhOelpXUW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tHUmhkR0U2SUVGeWNtRjVQRzUxYldKbGNpQjhJSE4wY21sdVp6NHBJRDArWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaVzVrVFdWemMyRm5aVU52Ym5SeWIyeHNaWEl1YzJWdVpFMWxjM05oWjJWVWIxTjBjbVZoYldWeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuUjJGdFpYQmhaRUoxZEhSdmJsQnlaWE56WldRbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5TG5KbFoybHpkR1Z5VFdWemMyRm5aVWhoYm1Sc1pYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNCTlpYTnpZV2RsUkdseVpXTjBhVzl1TGxSdlUzUnlaV0Z0WlhJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuUjJGdFpYQmhaRUoxZEhSdmJsSmxiR1ZoYzJWa0p5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNoa1lYUmhPaUJCY25KaGVUeHVkVzFpWlhJZ2ZDQnpkSEpwYm1jK0tTQTlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVnVaRTFsYzNOaFoyVkRiMjUwY205c2JHVnlMbk5sYm1STlpYTnpZV2RsVkc5VGRISmxZVzFsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMGRoYldWd1lXUkNkWFIwYjI1U1pXeGxZWE5sWkNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JoZEdGY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcFhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMzUnlaV0Z0VFdWemMyRm5aVU52Ym5SeWIyeHNaWEl1Y21WbmFYTjBaWEpOWlhOellXZGxTR0Z1Wkd4bGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUUxbGMzTmhaMlZFYVhKbFkzUnBiMjR1Vkc5VGRISmxZVzFsY2l4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2RIWVcxbGNHRmtRVzVoYkc5bkp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNoa1lYUmhPaUJCY25KaGVUeHVkVzFpWlhJZ2ZDQnpkSEpwYm1jK0tTQTlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVnVaRTFsYzNOaFoyVkRiMjUwY205c2JHVnlMbk5sYm1STlpYTnpZV2RsVkc5VGRISmxZVzFsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMGRoYldWd1lXUkJibUZzYjJjbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5TG5KbFoybHpkR1Z5VFdWemMyRm5aVWhoYm1Sc1pYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNCTlpYTnpZV2RsUkdseVpXTjBhVzl1TGxSdlUzUnlaV0Z0WlhJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuUjJGdFpYQmhaRVJwYzJOdmJtNWxZM1JsWkNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvWkdGMFlUb2dRWEp5WVhrOGJuVnRZbVZ5SUh3Z2MzUnlhVzVuUGlrZ1BUNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGJtUk5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpNXpaVzVrVFdWemMyRm5aVlJ2VTNSeVpXRnRaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZEhZVzFsY0dGa1JHbHpZMjl1Ym1WamRHVmtKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2xjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6ZEhKbFlXMU5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpNXlaV2RwYzNSbGNrMWxjM05oWjJWSVlXNWtiR1Z5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdUV1Z6YzJGblpVUnBjbVZqZEdsdmJpNVViMU4wY21WaGJXVnlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0oxaFNSWGxsVm1sbGQzTW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tHUmhkR0U2SUVGeWNtRjVQRzUxYldKbGNpQjhJSE4wY21sdVp6NHBJRDArWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaVzVrVFdWemMyRm5aVU52Ym5SeWIyeHNaWEl1YzJWdVpFMWxjM05oWjJWVWIxTjBjbVZoYldWeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuV0ZKRmVXVldhV1YzY3ljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JoZEdGY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcFhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMzUnlaV0Z0VFdWemMyRm5aVU52Ym5SeWIyeHNaWEl1Y21WbmFYTjBaWEpOWlhOellXZGxTR0Z1Wkd4bGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUUxbGMzTmhaMlZFYVhKbFkzUnBiMjR1Vkc5VGRISmxZVzFsY2l4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2RZVWtoTlJGUnlZVzV6Wm05eWJTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBb1pHRjBZVG9nUVhKeVlYazhiblZ0WW1WeUlId2djM1J5YVc1blBpa2dQVDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTmxibVJOWlhOellXZGxRMjl1ZEhKdmJHeGxjaTV6Wlc1a1RXVnpjMkZuWlZSdlUzUnlaV0Z0WlhJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RZVWtoTlJGUnlZVzV6Wm05eWJTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjM1J5WldGdFRXVnpjMkZuWlVOdmJuUnliMnhzWlhJdWNtVm5hWE4wWlhKTlpYTnpZV2RsU0dGdVpHeGxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lFMWxjM05oWjJWRWFYSmxZM1JwYjI0dVZHOVRkSEpsWVcxbGNpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNkWVVrTnZiblJ5YjJ4c1pYSlVjbUZ1YzJadmNtMG5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tHUmhkR0U2SUVGeWNtRjVQRzUxYldKbGNpQjhJSE4wY21sdVp6NHBJRDArWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaVzVrVFdWemMyRm5aVU52Ym5SeWIyeHNaWEl1YzJWdVpFMWxjM05oWjJWVWIxTjBjbVZoYldWeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuV0ZKRGIyNTBjbTlzYkdWeVZISmhibk5tYjNKdEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDbGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpkSEpsWVcxTlpYTnpZV2RsUTI5dWRISnZiR3hsY2k1eVpXZHBjM1JsY2sxbGMzTmhaMlZJWVc1a2JHVnlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1RXVnpjMkZuWlVScGNtVmpkR2x2Ymk1VWIxTjBjbVZoYldWeUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSjFoU1UzbHpkR1Z0Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2hrWVhSaE9pQkJjbkpoZVR4dWRXMWlaWElnZkNCemRISnBibWMrS1NBOVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzJWdVpFMWxjM05oWjJWRGIyNTBjbTlzYkdWeUxuTmxibVJOWlhOellXZGxWRzlUZEhKbFlXMWxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0oxaFNVM2x6ZEdWdEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDbGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpkSEpsWVcxTlpYTnpZV2RsUTI5dWRISnZiR3hsY2k1eVpXZHBjM1JsY2sxbGMzTmhaMlZJWVc1a2JHVnlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1RXVnpjMkZuWlVScGNtVmpkR2x2Ymk1VWIxTjBjbVZoYldWeUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSjFoU1FuVjBkRzl1Vkc5MVkyaGxaQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9aR0YwWVRvZ1FYSnlZWGs4Ym5WdFltVnlJSHdnYzNSeWFXNW5QaWtnUFQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sYm1STlpYTnpZV2RsUTI5dWRISnZiR3hsY2k1elpXNWtUV1Z6YzJGblpWUnZVM1J5WldGdFpYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkWVVrSjFkSFJ2YmxSdmRXTm9aV1FuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtZWFJoWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1Z4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMGNtVmhiVTFsYzNOaFoyVkRiMjUwY205c2JHVnlMbkpsWjJsemRHVnlUV1Z6YzJGblpVaGhibVJzWlhJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JOWlhOellXZGxSR2x5WldOMGFXOXVMbFJ2VTNSeVpXRnRaWElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5XRkpDZFhSMGIyNVViM1ZqYUZKbGJHVmhjMlZrSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2hrWVhSaE9pQkJjbkpoZVR4dWRXMWlaWElnZkNCemRISnBibWMrS1NBOVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzJWdVpFMWxjM05oWjJWRGIyNTBjbTlzYkdWeUxuTmxibVJOWlhOellXZGxWRzlUZEhKbFlXMWxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0oxaFNRblYwZEc5dVZHOTFZMmhTWld4bFlYTmxaQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0ZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzNSeVpXRnRUV1Z6YzJGblpVTnZiblJ5YjJ4c1pYSXVjbVZuYVhOMFpYSk5aWE56WVdkbFNHRnVaR3hsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJRTFsYzNOaFoyVkVhWEpsWTNScGIyNHVWRzlUZEhKbFlXMWxjaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDZFlVa0oxZEhSdmJsQnlaWE56WldRbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0dSaGRHRTZJRUZ5Y21GNVBHNTFiV0psY2lCOElITjBjbWx1Wno0cElEMCtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpXNWtUV1Z6YzJGblpVTnZiblJ5YjJ4c1pYSXVjMlZ1WkUxbGMzTmhaMlZVYjFOMGNtVmhiV1Z5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5XRkpDZFhSMGIyNVFjbVZ6YzJWa0p5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDbGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpkSEpsWVcxTlpYTnpZV2RsUTI5dWRISnZiR3hsY2k1eVpXZHBjM1JsY2sxbGMzTmhaMlZJWVc1a2JHVnlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1RXVnpjMkZuWlVScGNtVmpkR2x2Ymk1VWIxTjBjbVZoYldWeUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSjFoU1FuVjBkRzl1VW1Wc1pXRnpaV1FuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdLR1JoZEdFNklFRnljbUY1UEc1MWJXSmxjaUI4SUhOMGNtbHVaejRwSUQwK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6Wlc1a1RXVnpjMkZuWlVOdmJuUnliMnhzWlhJdWMyVnVaRTFsYzNOaFoyVlViMU4wY21WaGJXVnlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbldGSkNkWFIwYjI1U1pXeGxZWE5sWkNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JoZEdGY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcFhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMzUnlaV0Z0VFdWemMyRm5aVU52Ym5SeWIyeHNaWEl1Y21WbmFYTjBaWEpOWlhOellXZGxTR0Z1Wkd4bGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUUxbGMzTmhaMlZFYVhKbFkzUnBiMjR1Vkc5VGRISmxZVzFsY2l4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2RZVWtGdVlXeHZaeWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9aR0YwWVRvZ1FYSnlZWGs4Ym5WdFltVnlJSHdnYzNSeWFXNW5QaWtnUFQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sYm1STlpYTnpZV2RsUTI5dWRISnZiR3hsY2k1elpXNWtUV1Z6YzJGblpWUnZVM1J5WldGdFpYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkWVVrRnVZV3h2Wnljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JoZEdGY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcFhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRV04wYVhaaGRHVWdkR2hsSUd4dloybGpJR0Z6YzI5amFXRjBaV1FnZDJsMGFDQmhJR052YlcxaGJtUWdabkp2YlNCVlJWeHVJQ0FnSUNBcUlFQndZWEpoYlNCdFpYTnpZV2RsWEc0Z0lDQWdJQ292WEc0Z0lDQWdiMjVEYjIxdFlXNWtLRzFsYzNOaFoyVTZJRUZ5Y21GNVFuVm1abVZ5S1NCN1hHNGdJQ0FnSUNBZ0lFeHZaMmRsY2k1TWIyY29YRzRnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1UjJWMFUzUmhZMnRVY21GalpTZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0owUmhkR0ZEYUdGdWJtVnNVbVZqWldsMlpVMWxjM05oWjJWVWVYQmxMa052YlcxaGJtUW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ05seHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmpiMjF0WVc1a1FYTlRkSEpwYm1jZ1BTQnVaWGNnVkdWNGRFUmxZMjlrWlhJb0ozVjBaaTB4TmljcExtUmxZMjlrWlNoY2JpQWdJQ0FnSUNBZ0lDQWdJRzFsYzNOaFoyVXVjMnhwWTJVb01TbGNiaUFnSUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktGeHVJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNkRVlYUmhJRU5vWVc1dVpXd2dRMjl0YldGdVpEb2dKeUFySUdOdmJXMWhibVJCYzFOMGNtbHVaeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lEWmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdZMjl0YldGdVpEb2dUV1Z6YzJGblpVOXVVMk55WldWdVMyVjVZbTloY21RZ1BTQktVMDlPTG5CaGNuTmxLR052YlcxaGJtUkJjMU4wY21sdVp5azdYRzRnSUNBZ0lDQWdJR2xtSUNoamIyMXRZVzVrTG1OdmJXMWhibVFnUFQwOUlDZHZibE5qY21WbGJrdGxlV0p2WVhKa0p5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3YVhobGJGTjBjbVZoYldsdVp5NWZZV04wYVhaaGRHVlBibE5qY21WbGJrdGxlV0p2WVhKa0tHTnZiVzFoYm1RcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dTR0Z1Wkd4bGN5QmhJSEJ5YjNSdlkyOXNJRzFsYzNOaFoyVWdjbVZqWldsMlpXUWdabkp2YlNCMGFHVWdjM1J5WldGdFpYSmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2JXVnpjMkZuWlNCMGFHVWdiV1Z6YzJGblpTQmtZWFJoSUdaeWIyMGdkR2hsSUhOMGNtVmhiV1Z5WEc0Z0lDQWdJQ292WEc0Z0lDQWdiMjVRY205MGIyTnZiRTFsYzNOaFoyVW9iV1Z6YzJGblpUb2dRWEp5WVhsQ2RXWm1aWElwSUh0Y2JpQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhCeWIzUnZZMjlzVTNSeWFXNW5JRDBnYm1WM0lGUmxlSFJFWldOdlpHVnlLQ2QxZEdZdE1UWW5LUzVrWldOdlpHVW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV1Z6YzJGblpTNXpiR2xqWlNneEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIQnliM1J2WTI5c1NsTlBUaUE5SUVwVFQwNHVjR0Z5YzJVb2NISnZkRzlqYjJ4VGRISnBibWNwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNGUFltcGxZM1F1Y0hKdmRHOTBlWEJsTG1oaGMwOTNibEJ5YjNCbGNuUjVMbU5oYkd3b2NISnZkRzlqYjJ4S1UwOU9MQ0FuUkdseVpXTjBhVzl1SnlsY2JpQWdJQ0FnSUNBZ0lDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVGY25KdmNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjAxaGJHWnZjbTFsWkNCd2NtOTBiMk52YkNCeVpXTmxhWFpsWkM0Z1JXNXpkWEpsSUhSb1pTQndjbTkwYjJOdmJDQnRaWE56WVdkbElHTnZiblJoYVc1eklHRWdaR2x5WldOMGFXOXVKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JrYVhKbFkzUnBiMjRnUFNCd2NtOTBiMk52YkVwVFQwNHVSR2x5WldOMGFXOXVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVnNaWFJsSUhCeWIzUnZZMjlzU2xOUFRpNUVhWEpsWTNScGIyNDdYRzRnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWUZKbFkyVnBkbVZrSUc1bGR5QWtlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2FYSmxZM1JwYjI0Z1BUMGdUV1Z6YzJGblpVUnBjbVZqZEdsdmJpNUdjbTl0VTNSeVpXRnRaWEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDhnSjBaeWIyMVRkSEpsWVcxbGNpZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEb2dKMVJ2VTNSeVpXRnRaWEluWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCd2NtOTBiMk52YkM0Z1ZYQmtZWFJwYm1jZ1pYaHBjM1JwYm1jZ2NISnZkRzlqYjJ3dUxpNWdYRzRnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnVDJKcVpXTjBMbXRsZVhNb2NISnZkRzlqYjJ4S1UwOU9LUzVtYjNKRllXTm9LQ2h0WlhOellXZGxWSGx3WlNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHMWxjM05oWjJVZ1BTQndjbTkwYjJOdmJFcFRUMDViYldWemMyRm5aVlI1Y0dWZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjNhWFJqYUNBb1pHbHlaV04wYVc5dUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdUV1Z6YzJGblpVUnBjbVZqZEdsdmJpNVViMU4wY21WaGJXVnlPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnUTJobFkyc2dkR2hoZENCMGFHVWdiV1Z6YzJGblpTQmpiMjUwWVdsdWN5QmhiR3dnZEdobElISmxiR1YyWVc1MElIQmhjbUZ0YzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0ZQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMbWhoYzA5M2JsQnliM0JsY25SNUxtTmhiR3dvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFsYzNOaFoyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZHBaQ2RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSWEp5YjNJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHQlViMU4wY21WaGJXVnlMVDRrZTIxbGMzTmhaMlZVZVhCbGZTQndjbTkwYjJOdmJDQmtaV1pwYm1sMGFXOXVJSGRoY3lCdFlXeG1iM0p0WldRZ1lYTWdhWFFnWkdsa2JpZDBJR052Ym5SaGFXNGdZWFFnYkdWaGMzUWdZVzRnYVdSY1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkVaV1pwYm1sMGFXOXVJSGRoY3pvZ0pIdEtVMDlPTG5OMGNtbHVaMmxtZVNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV1Z6YzJGblpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm5Wc2JDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTWx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNsOVlGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdjbVYwZFhKdUlHbHVJR0VnWm05eVJXRmphQ0JwY3lCbGNYVnBkbUZzWlc1MElIUnZJR0VnWTI5dWRHbHVkV1VnYVc0Z1lTQnViM0p0WVd3Z1ptOXlJR3h2YjNCY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRlZGTlM0eElHRnVaQ0JWUlRVdU1pQmtiMjRuZENCelpXNWtJR0VnYzNSeWRXTjBkWEpsSUdadmNpQjBhR1Z6WlNCdFpYTnpZV2RsSUhSNWNHVnpMQ0JpZFhRZ2RHaGxlU0JoWTNSMVlXeHNlU0JrYnlCb1lYWmxJR0VnYzNSeWRXTjBkWEpsSUhOdklHbG5ibTl5WlNCMWNHUmhkR2x1WnlCMGFHVnRYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaWdvYldWemMyRm5aVlI1Y0dVZ1BUMDlJRndpVlVsSmJuUmxjbUZqZEdsdmJsd2lJSHg4SUcxbGMzTmhaMlZVZVhCbElEMDlQU0JjSWtOdmJXMWhibVJjSWlCOGZDQnRaWE56WVdkbFZIbHdaU0E5UFQwZ1hDSk1ZWFJsYm1ONVZHVnpkRndpS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzNSeVpXRnRUV1Z6YzJGblpVTnZiblJ5YjJ4c1pYSXVkRzlUZEhKbFlXMWxja2hoYm1Sc1pYSnpMbWRsZENoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aVlI1Y0dWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QkpaaUIzWlNkMlpTQnlaV2RwYzNSbGNtVmtJR0VnYUdGdVpHeGxjaUJtYjNJZ2RHaHBjeUJ0WlhOellXZGxJSFI1Y0dVZ2QyVWdZMkZ1SUdGa1pDQnBkQ0IwYnlCdmRYSWdjM1Z3Y0c5eWRHVmtJRzFsYzNOaFoyVnpMaUJwWlNCeVpXZHBjM1JsY2sxbGMzTmhaMlZJWVc1a2JHVnlLQzR1TGlsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5OMGNtVmhiVTFsYzNOaFoyVkRiMjUwY205c2JHVnlMblJ2VTNSeVpXRnRaWEpOWlhOellXZGxjeTV6WlhRb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxbGMzTmhaMlZVZVhCbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFpYTnpZV2RsWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxrVnljbTl5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZ1ZHaGxjbVVnZDJGeklHNXZJSEpsWjJsemRHVnlaV1FnYUdGdVpHeGxjaUJtYjNJZ1hDSWtlMjFsYzNOaFoyVlVlWEJsZlZ3aUlDMGdkSEo1SUdGa1pHbHVaeUJ2Ym1VZ2RYTnBibWNnY21WbmFYTjBaWEpOWlhOellXZGxTR0Z1Wkd4bGNpaE5aWE56WVdkbFJHbHlaV04wYVc5dUxsUnZVM1J5WldGdFpYSXNJRndpSkh0dFpYTnpZV2RsVkhsd1pYMWNJaXdnYlhsSVlXNWtiR1Z5S1dCY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1RXVnpjMkZuWlVScGNtVmpkR2x2Ymk1R2NtOXRVM1J5WldGdFpYSTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJEYUdWamF5QjBhR0YwSUhSb1pTQnRaWE56WVdkbElHTnZiblJoYVc1eklHRnNiQ0IwYUdVZ2NtVnNaWFpoYm5RZ2NHRnlZVzF6WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJVTlpYW1WamRDNXdjbTkwYjNSNWNHVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2h0WlhOellXZGxMQ0FuYVdRbktWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa1Z5Y205eUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1UjJWMFUzUmhZMnRVY21GalpTZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmdSbkp2YlZOMGNtVmhiV1Z5TFQ0a2UyMWxjM05oWjJWVWVYQmxmU0J3Y205MGIyTnZiQ0JrWldacGJtbDBhVzl1SUhkaGN5QnRZV3htYjNKdFpXUWdZWE1nYVhRZ1pHbGtiaWQwSUdOdmJuUmhhVzRnWVhRZ2JHVmhjM1FnWVc0Z2FXUmNYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCRVpXWnBibWwwYVc5dUlIZGhjem9nSkh0S1UwOU9Mbk4wY21sdVoybG1lU2h0WlhOellXZGxMQ0J1ZFd4c0xDQXlLWDFnWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCeVpYUjFjbTRnYVc0Z1lTQm1iM0pGWVdOb0lHbHpJR1Z4ZFdsMllXeGxiblFnZEc4Z1lTQmpiMjUwYVc1MVpTQnBiaUJoSUc1dmNtMWhiQ0JtYjNJZ2JHOXZjRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5OMGNtVmhiVTFsYzNOaFoyVkRiMjUwY205c2JHVnlMbVp5YjIxVGRISmxZVzFsY2toaGJtUnNaWEp6TG1kbGRDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlZSNWNHVmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJKWmlCM1pTZDJaU0J5WldkcGMzUmxjbVZrSUdFZ2FHRnVaR3hsY2lCbWIzSWdkR2hwY3lCdFpYTnpZV2RsSUhSNWNHVXVJR2xsSUhKbFoybHpkR1Z5VFdWemMyRm5aVWhoYm1Sc1pYSW9MaTR1S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzNSeVpXRnRUV1Z6YzJGblpVTnZiblJ5YjJ4c1pYSXVabkp2YlZOMGNtVmhiV1Z5VFdWemMyRm5aWE11YzJWMEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFpYTnpZV2RsTG1sa0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFpYTnpZV2RsVkhsd1pWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVGY25KdmNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGtkbGRGTjBZV05yVkhKaFkyVW9LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZRlJvWlhKbElIZGhjeUJ1YnlCeVpXZHBjM1JsY21Wa0lHaGhibVJzWlhJZ1ptOXlJRndpSkh0dFpYTnpZV2RsZlZ3aUlDMGdkSEo1SUdGa1pHbHVaeUJ2Ym1VZ2RYTnBibWNnY21WbmFYTjBaWEpOWlhOellXZGxTR0Z1Wkd4bGNpaE5aWE56WVdkbFJHbHlaV04wYVc5dUxrWnliMjFUZEhKbFlXMWxjaXdnWENJa2UyMWxjM05oWjJWVWVYQmxmVndpTENCdGVVaGhibVJzWlhJcFlGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdWbVlYVnNkRHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUZjbkp2Y2loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHQlZibXR1YjNkdUlHUnBjbVZqZEdsdmJqb2dKSHRrYVhKbFkzUnBiMjU5WUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1QyNWpaU0IwYUdVZ2NISnZkRzlqYjJ3Z2FHRnpJR0psWlc0Z2NtVmpaV2wyWldRc0lIZGxJR05oYmlCelpXNWtJRzkxY2lCamIyNTBjbTlzSUcxbGMzTmhaMlZ6WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5SdlUzUnlaV0Z0WlhKTlpYTnpZV2RsYzBOdmJuUnliMnhzWlhJdVUyVnVaRkpsY1hWbGMzUkpibWwwYVdGc1UyVjBkR2x1WjNNb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkRzlUZEhKbFlXMWxjazFsYzNOaFoyVnpRMjl1ZEhKdmJHeGxjaTVUWlc1a1VtVnhkV1Z6ZEZGMVlXeHBkSGxEYjI1MGNtOXNLQ2s3WEc0Z0lDQWdJQ0FnSUgwZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVNYjJjb1RHOW5aMlZ5TGtkbGRGTjBZV05yVkhKaFkyVW9LU3dnWlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQklZVzVrYkdWeklHRnVJR2x1Y0hWMElHTnZiblJ5YjJ3Z2JXVnpjMkZuWlNCM2FHVnVJR2wwSUdseklISmxZMlZwZG1Wa0lHWnliMjBnZEdobElITjBjbVZoYldWeVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUcxbGMzTmhaMlVnVkdobElHbHVjSFYwSUdOdmJuUnliMndnYldWemMyRm5aVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHOXVTVzV3ZFhSRGIyNTBjbTlzVDNkdVpYSnphR2x3S0cxbGMzTmhaMlU2SUVGeWNtRjVRblZtWm1WeUtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElIWnBaWGNnUFNCdVpYY2dWV2x1ZERoQmNuSmhlU2h0WlhOellXZGxLVHRjYmlBZ0lDQWdJQ0FnVEc5bloyVnlMa3h2WnloY2JpQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuUkdGMFlVTm9ZVzV1Wld4U1pXTmxhWFpsVFdWemMyRm5aVlI1Y0dVdVNXNXdkWFJEYjI1MGNtOXNUM2R1WlhKemFHbHdKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lEWmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdhVzV3ZFhSRGIyNTBjbTlzVDNkdVpYSnphR2x3SUQwZ2JtVjNJRUp2YjJ4bFlXNG9kbWxsZDFzeFhTa3VkbUZzZFdWUFppZ3BPMXh1SUNBZ0lDQWdJQ0JNYjJkblpYSXVURzluS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJR0JTWldObGFYWmxaQ0JwYm5CMWRDQmpiMjUwY205c2JHVnlJRzFsYzNOaFoyVWdMU0IzYVd4c0lIbHZkWElnYVc1d2RYUWdZMjl1ZEhKdmJDQjBhR1VnYzNSeVpXRnRPaUFrZTJsdWNIVjBRMjl1ZEhKdmJFOTNibVZ5YzJocGNIMWdYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjR2w0Wld4VGRISmxZVzFwYm1jdVgyOXVTVzV3ZFhSRGIyNTBjbTlzVDNkdVpYSnphR2x3S0dsdWNIVjBRMjl1ZEhKdmJFOTNibVZ5YzJocGNDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dYRzRnSUNBZ0lDb2dRSEJoY21GdElHMWxjM05oWjJVZ1hHNGdJQ0FnSUNvdlhHNGdJQ0FnYjI1SFlXMWxjR0ZrVW1WemNHOXVjMlVvYldWemMyRm5aVG9nUVhKeVlYbENkV1ptWlhJcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2NtVnpjRzl1YzJWVGRISnBibWNnUFNCdVpYY2dWR1Y0ZEVSbFkyOWtaWElvSjNWMFppMHhOaWNwTG1SbFkyOWtaU2h0WlhOellXZGxMbk5zYVdObEtERXBLVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjbVZ6Y0c5dWMyVktVMDlPSUQwZ1NsTlBUaTV3WVhKelpTaHlaWE53YjI1elpWTjBjbWx1WnlrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WjJGdFpWQmhaRU52Ym5SeWIyeHNaWEl1YjI1SFlXMWxjR0ZrVW1WemNHOXVjMlZTWldObGFYWmxaQ2h5WlhOd2IyNXpaVXBUVDA0dVkyOXVkSEp2Ykd4bGNrbGtLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnZia0ZtYTFSeWFXZG5aWEpsWkNncE9pQjJiMmxrSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVoWm10RGIyNTBjbTlzYkdWeUxtOXVRV1pyUTJ4cFkyc29LVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QnBaaUIwYUdVZ2MzUnlaV0Z0SUdseklIQmhkWE5sWkNCd2JHRjVJR2wwTENCcFppQjNaU0JqWVc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWRtbGtaVzlRYkdGNVpYSXVhWE5RWVhWelpXUW9LU0FtSmlCMGFHbHpMblpwWkdWdlVHeGhlV1Z5TG1oaGMxWnBaR1Z2VTI5MWNtTmxLQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNHeGhlVk4wY21WaGJTZ3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVTJWMElIZG9aWFJvWlhJZ2QyVWdjMmh2ZFd4a0lIUnBiV1Z2ZFhRZ2QyaGxiaUJoWm1zdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUdGbWEwVnVZV0pzWldRZ1NXWWdkSEoxWlNCM1pTQjBhVzFsYjNWMElIZG9aVzRnYVdSc1pTQm1iM0lnYzI5dFpTQm5hWFpsYmlCaGJXOTFiblFnYjJZZ2RHbHRaUzVjYmlBZ0lDQWdLaTljYmlBZ0lDQnpaWFJCWm10RmJtRmliR1ZrS0dGbWEwVnVZV0pzWldRNklHSnZiMnhsWVc0cE9pQjJiMmxrSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR0ZtYTBWdVlXSnNaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWIyNUJabXRVY21sbloyVnlaV1FvS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVlXWnJRMjl1ZEhKdmJHeGxjaTV6ZEc5d1FXWnJWMkZ5Ym1sdVoxUnBiV1Z5S0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkJkSFJsYlhCMElHRWdjbVZqYjI1dVpXTjBhVzl1SUhSdklIUm9aU0J6YVdkdVlXeHNhVzVuSUhObGNuWmxjbHh1SUNBZ0lDQXFMMXh1SUNBZ0lIUnllVkpsWTI5dWJtVmpkQ2h0WlhOellXZGxPaUJ6ZEhKcGJtY3BJSHRjYmlBZ0lDQWdJQ0FnTHk4Z2FXWWdkR2hsY21VZ2FYTWdibThnZDJWaVUyOWphMlYwUTI5dWRISnZiR3hsY2lCeVpYUjFjbTRnYVcxdFpXUnBZWFJsYkhrZ2IzSWdkR2hwY3lCM2FXeHNJRzV2ZENCM2IzSnJYRzRnSUNBZ0lDQWdJR2xtSUNnaGRHaHBjeTUzWldKVGIyTnJaWFJEYjI1MGNtOXNiR1Z5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVURzluS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMVJvWlNCWFpXSWdVMjlqYTJWMElFTnZiblJ5YjJ4c1pYSWdaRzlsY3lCdWIzUWdaWGhwYzNRZ2MyOGdkR2hwY3lCM2FXeHNJRzV2ZENCM2IzSnJJSEpwWjJoMElHNXZkeTRuWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdMeThnYVdZZ2RHaGxJR052Ym01bFkzUnBiMjRnYVhNZ2IzQmxiaXdnWm1seWMzUWdZMnh2YzJVZ2FYUXVJSGRoYVhRZ2MyOXRaU0IwYVcxbElHRnVaQ0IwY25rZ1lXZGhhVzR1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhWE5TWldOdmJtNWxZM1JwYm1jZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1M1pXSlRiMk5yWlhSRGIyNTBjbTlzYkdWeUxuZGxZbE52WTJ0bGRDQW1KaUIwYUdsekxuZGxZbE52WTJ0bGRFTnZiblJ5YjJ4c1pYSXVkMlZpVTI5amEyVjBMbkpsWVdSNVUzUmhkR1VnSVQwZ1YyVmlVMjlqYTJWMExrTk1UMU5GUkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpiRzl6WlZOcFoyNWhiR2x1WjFObGNuWmxjaWhnSkh0dFpYTnpZV2RsZlNCU1pYTjBZWEowYVc1bklITjBjbVZoYlM0dUxtQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVjBWR2x0Wlc5MWRDZ29LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUwY25sU1pXTnZibTVsWTNRb2JXVnpjMkZuWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TENBek1EQXdLVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y0dsNFpXeFRkSEpsWVcxcGJtY3VYMjl1VjJWaVVuUmpRWFYwYjBOdmJtNWxZM1FvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyOXVibVZqZEZSdlUybG5ibUZzYkdsdVoxTmxjblpsY2lncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dURzloWkhNZ1lTQm1jbVZsZW1VZ1puSmhiV1VnYVdZZ2FYUWdhWE1nY21WeGRXbHlaV1FnYjNSb1pYSjNhWE5sSUhOb2IzZHpJSFJvWlNCd2JHRjVJRzkyWlhKc1lYbGNiaUFnSUNBZ0tpOWNiaUFnSUNCc2IyRmtSbkpsWlhwbFJuSmhiV1ZQY2xOb2IzZFFiR0Y1VDNabGNteGhlU2dwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV3YVhobGJGTjBjbVZoYldsdVp5NWthWE53WVhSamFFVjJaVzUwS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdibVYzSUV4dllXUkdjbVZsZW1WR2NtRnRaVVYyWlc1MEtIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnphRzkxYkdSVGFHOTNVR3hoZVU5MlpYSnNZWGs2SUhSb2FYTXVjMmh2ZFd4a1UyaHZkMUJzWVhsUGRtVnliR0Y1TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdselZtRnNhV1E2SUhSb2FYTXVabkpsWlhwbFJuSmhiV1ZEYjI1MGNtOXNiR1Z5TG5aaGJHbGtMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3B3WldkRVlYUmhPaUIwYUdsekxtWnlaV1Y2WlVaeVlXMWxRMjl1ZEhKdmJHeGxjaTVxY0dWblhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXphRzkxYkdSVGFHOTNVR3hoZVU5MlpYSnNZWGtnUFQwOUlIUnlkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNU1iMmNvVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTd2dKM05vYjNkcGJtY2djR3hoZVNCdmRtVnliR0Y1SnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuSmxjMmw2WlZCc1lYbGxjbE4wZVd4bEtDazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzSUNkemFHOTNhVzVuSUdaeVpXVjZaU0JtY21GdFpTY3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVtY21WbGVtVkdjbUZ0WlVOdmJuUnliMnhzWlhJdWMyaHZkMFp5WldWNlpVWnlZVzFsS0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjMlYwVkdsdFpXOTFkQ2dvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblpwWkdWdlVHeGhlV1Z5TG5ObGRGWnBaR1Z2Ulc1aFlteGxaQ2htWVd4elpTazdYRzRnSUNBZ0lDQWdJSDBzSUhSb2FYTXVabkpsWlhwbFJuSmhiV1ZEYjI1MGNtOXNiR1Z5TG1aeVpXVjZaVVp5WVcxbFJHVnNZWGtwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZCeWIyTmxjM01nZEdobElHWnlaV1Y2WlNCbWNtRnRaU0JoYm1RZ2JHOWhaQ0JwZEZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0J0WlhOellXZGxJRlJvWlNCbWNtVmxlbVVnWm5KaGJXVWdaR0YwWVNCcGJpQmllWFJsYzF4dUlDQWdJQ0FxTDF4dUlDQWdJRzl1Um5KbFpYcGxSbkpoYldWTlpYTnpZV2RsS0cxbGMzTmhaMlU2SUVGeWNtRjVRblZtWm1WeUtTQjdYRzRnSUNBZ0lDQWdJRXh2WjJkbGNpNU1iMmNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdKMFJoZEdGRGFHRnVibVZzVW1WalpXbDJaVTFsYzNOaFoyVlVlWEJsTGtaeVpXVjZaVVp5WVcxbEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSURaY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2RtbGxkeUE5SUc1bGR5QlZhVzUwT0VGeWNtRjVLRzFsYzNOaFoyVXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtWnlaV1Y2WlVaeVlXMWxRMjl1ZEhKdmJHeGxjaTV3Y205alpYTnpSbkpsWlhwbFJuSmhiV1ZOWlhOellXZGxLSFpwWlhjc0lDZ3BJRDArWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG14dllXUkdjbVZsZW1WR2NtRnRaVTl5VTJodmQxQnNZWGxQZG1WeWJHRjVLQ2xjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCRmJtRmliR1VnZEdobElIWnBaR1Z2SUdGbWRHVnlJR2hwWkdsdVp5QmhJR1p5WldWNlpTQm1jbUZ0WlZ4dUlDQWdJQ0FxTDF4dUlDQWdJR2x1ZG1Gc2FXUmhkR1ZHY21WbGVtVkdjbUZ0WlVGdVpFVnVZV0pzWlZacFpHVnZLQ2tnZTF4dUlDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktGeHVJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNkRVlYUmhRMmhoYm01bGJGSmxZMlZwZG1WTlpYTnpZV2RsVkhsd1pTNUdjbVZsZW1WR2NtRnRaU2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQTJYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUhObGRGUnBiV1Z2ZFhRb0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1d2FYaGxiRk4wY21WaGJXbHVaeTVrYVhOd1lYUmphRVYyWlc1MEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNWxkeUJJYVdSbFJuSmxaWHBsUm5KaGJXVkZkbVZ1ZENncFhHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bWNtVmxlbVZHY21GdFpVTnZiblJ5YjJ4c1pYSXVhR2xrWlVaeVpXVjZaVVp5WVcxbEtDazdYRzRnSUNBZ0lDQWdJSDBzSUhSb2FYTXVabkpsWlhwbFJuSmhiV1ZEYjI1MGNtOXNiR1Z5TG1aeVpXVjZaVVp5WVcxbFJHVnNZWGtwTzF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1MmFXUmxiMUJzWVhsbGNpNW5aWFJXYVdSbGIwVnNaVzFsYm5Rb0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUyYVdSbGIxQnNZWGxsY2k1elpYUldhV1JsYjBWdVlXSnNaV1FvZEhKMVpTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJRY21Wd0lHUmhkR0ZqYUdGdWJtVnNJR1JoZEdFZ1ptOXlJSEJ5YjJObGMzTnBibWNnWm1sc1pTQmxlSFJsYm5OcGIyNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1pHRjBZU0IwYUdVZ1ptbHNaU0JsZUhSbGJuTnBiMjRnWkdGMFlWeHVJQ0FnSUNBcUwxeHVJQ0FnSUc5dVJtbHNaVVY0ZEdWdWMybHZiaWhrWVhSaE9pQkJjbkpoZVVKMVptWmxjaWtnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0IyYVdWM0lEMGdibVYzSUZWcGJuUTRRWEp5WVhrb1pHRjBZU2s3WEc0Z0lDQWdJQ0FnSUVacGJHVlZkR2xzTG5ObGRFVjRkR1Z1YzJsdmJrWnliMjFDZVhSbGN5aDJhV1YzTENCMGFHbHpMbVpwYkdVcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGQnlaWEFnWkdGMFlXTm9ZVzV1Wld3Z1pHRjBZU0JtYjNJZ2NISnZZMlZ6YzJsdVp5QjBhR1VnWm1sc1pTQnRhVzFsSUhSNWNHVmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1pHRjBZU0IwYUdVZ1ptbHNaU0J0YVcxbElIUjVjR1VnWkdGMFlWeHVJQ0FnSUNBcUwxeHVJQ0FnSUc5dVJtbHNaVTFwYldWVWVYQmxLR1JoZEdFNklFRnljbUY1UW5WbVptVnlLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFpwWlhjZ1BTQnVaWGNnVldsdWREaEJjbkpoZVNoa1lYUmhLVHRjYmlBZ0lDQWdJQ0FnUm1sc1pWVjBhV3d1YzJWMFRXbHRaVlI1Y0dWR2NtOXRRbmwwWlhNb2RtbGxkeXdnZEdocGN5NW1hV3hsS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCUWNtVndJR1JoZEdGamFHRnVibVZzSUdSaGRHRWdabTl5SUhCeWIyTmxjM05wYm1jZ2RHaGxJR1pwYkdVZ1kyOXVkR1Z1ZEhOY2JpQWdJQ0FnS2lCQWNHRnlZVzBnWkdGMFlTQjBhR1VnWm1sc1pTQmpiMjUwWlc1MGN5QmtZWFJoWEc0Z0lDQWdJQ292WEc0Z0lDQWdiMjVHYVd4bFEyOXVkR1Z1ZEhNb1pHRjBZVG9nUVhKeVlYbENkV1ptWlhJcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2RtbGxkeUE5SUc1bGR5QlZhVzUwT0VGeWNtRjVLR1JoZEdFcE8xeHVJQ0FnSUNBZ0lDQkdhV3hsVlhScGJDNXpaWFJEYjI1MFpXNTBjMFp5YjIxQ2VYUmxjeWgyYVdWM0xDQjBhR2x6TG1acGJHVXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRkJzWVhseklIUm9aU0J6ZEhKbFlXMGdZWFZrYVc4Z1lXNWtJSFpwWkdWdklITnZkWEpqWlNCaGJtUWdjMlYwY3lCMWNDQnZkR2hsY2lCd2FXVmpaWE1nZDJocGJHVWdkR2hsSUhOMGNtVmhiU0J6ZEdGeWRITmNiaUFnSUNBZ0tpOWNiaUFnSUNCd2JHRjVVM1J5WldGdEtDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11ZG1sa1pXOVFiR0Y1WlhJdVoyVjBWbWxrWlc5RmJHVnRaVzUwS0NrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJRzFsYzNOaFoyVWdQVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2REYjNWc1pDQnViM1FnY0d4aGVTQjJhV1JsYnlCemRISmxZVzBnWW1WallYVnpaU0IwYUdVZ2RtbGtaVzhnY0d4aGVXVnlJSGRoY3lCdWIzUWdhVzVwZEdsaGJHbDZaV1FnWTI5eWNtVmpkR3g1TGljN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQnBlR1ZzVTNSeVpXRnRhVzVuTG1ScGMzQmhkR05vUlhabGJuUW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibVYzSUZCc1lYbFRkSEpsWVcxRmNuSnZja1YyWlc1MEtIc2diV1Z6YzJGblpTQjlLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVGY25KdmNpaE1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTENCdFpYTnpZV2RsS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1kyeHZjMlVnZEdobElHTnZibTVsWTNScGIyNWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZMnh2YzJWVGFXZHVZV3hwYm1kVFpYSjJaWElvSjFOMGNtVmhiU0J1YjNRZ2FXNXBkR2xoYkdsNlpXUWdZMjl5Y21WamRHeDVKeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11ZG1sa1pXOVFiR0Y1WlhJdWFHRnpWbWxrWlc5VGIzVnlZMlVvS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMbGRoY201cGJtY29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblEyRnVibTkwSUhCc1lYa2djM1J5WldGdExDQjBhR1VnZG1sa1pXOGdaV3hsYldWdWRDQm9ZWE1nYm04Z2MzSmpUMkpxWldOMElIUnZJSEJzWVhrdUoxeHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlYwVkc5MVkyaEpibkIxZEVWdVlXSnNaV1FvZEdocGN5NWpiMjVtYVdjdWFYTkdiR0ZuUlc1aFlteGxaQ2hHYkdGbmN5NVViM1ZqYUVsdWNIVjBLU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjR2w0Wld4VGRISmxZVzFwYm1jdVpHbHpjR0YwWTJoRmRtVnVkQ2h1WlhjZ1VHeGhlVk4wY21WaGJVVjJaVzUwS0NrcE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbk4wY21WaGJVTnZiblJ5YjJ4c1pYSXVZWFZrYVc5RmJHVnRaVzUwTG5OeVkwOWlhbVZqZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdjM1JoY25STmRYUmxaQ0E5SUhSb2FYTXVZMjl1Wm1sbkxtbHpSbXhoWjBWdVlXSnNaV1FvUm14aFozTXVVM1JoY25SV2FXUmxiMDExZEdWa0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpkSEpsWVcxRGIyNTBjbTlzYkdWeUxtRjFaR2x2Uld4bGJXVnVkQzV0ZFhSbFpDQTlJSE4wWVhKMFRYVjBaV1E3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoemRHRnlkRTExZEdWa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y0d4aGVWWnBaR1Z2S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMzUnlaV0Z0UTI5dWRISnZiR3hsY2k1aGRXUnBiMFZzWlcxbGJuUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG5Cc1lYa29LVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdWRHaGxiaWdvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5Cc1lYbFdhV1JsYnlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVZMkYwWTJnb0tHOXVVbVZxWldOMFpXUlNaV0Z6YjI0cElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNU1iMmNvVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTd2diMjVTWldwbFkzUmxaRkpsWVhOdmJpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjBKeWIzZHpaWElnWkc5bGN5QnViM1FnYzNWd2NHOXlkQ0JoZFhSdmNHeGhlV2x1WnlCMmFXUmxieUIzYVhSb2IzVjBJR2x1ZEdWeVlXTjBhVzl1SUMwZ2RHOGdjbVZ6YjJ4MlpTQjBhR2x6SUhkbElHRnlaU0JuYjJsdVp5QjBieUJ6YUc5M0lIUm9aU0J3YkdGNUlHSjFkSFJ2YmlCdmRtVnliR0Y1TGlkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJwZUdWc1UzUnlaV0Z0YVc1bkxtUnBjM0JoZEdOb1JYWmxiblFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtVjNJRkJzWVhsVGRISmxZVzFTWldwbFkzUmxaRVYyWlc1MEtIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVmhjMjl1T2lCdmJsSmxhbVZqZEdWa1VtVmhjMjl1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1d2JHRjVWbWxrWlc4b0tUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMmh2ZFd4a1UyaHZkMUJzWVhsUGRtVnliR0Y1SUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVabkpsWlhwbFJuSmhiV1ZEYjI1MGNtOXNiR1Z5TG5Ob2IzZEdjbVZsZW1WR2NtRnRaU2dwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZCc1lYbHpJSFJvWlNCMmFXUmxieUJ6ZEhKbFlXMWNiaUFnSUNBZ0tpOWNiaUFnSUNCd2NtbDJZWFJsSUhCc1lYbFdhV1JsYnlncElIdGNiaUFnSUNBZ0lDQWdMeThnYUdGdVpHeGxJSEJzWVhrb0tTQjNhWFJvSUhCeWIyMXBjMlVnWVhNZ2FYUWdhWE1nWVc0Z1lYTjVibU5vY205dWIzVnpJR05oYkd4Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUyYVdSbGIxQnNZWGxsY2k1d2JHRjVLQ2t1WTJGMFkyZ29LRzl1VW1WcVpXTjBaV1JTWldGemIyNDZJSE4wY21sdVp5a2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVjM1J5WldGdFEyOXVkSEp2Ykd4bGNpNWhkV1JwYjBWc1pXMWxiblF1YzNKalQySnFaV04wS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6ZEhKbFlXMURiMjUwY205c2JHVnlMbUYxWkdsdlJXeGxiV1Z1ZEM1d1lYVnpaU2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGt4dlp5aE1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTENCdmJsSmxhbVZqZEdWa1VtVmhjMjl1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNU1iMmNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5Rbkp2ZDNObGNpQmtiMlZ6SUc1dmRDQnpkWEJ3YjNKMElHRjFkRzl3YkdGNWFXNW5JSFpwWkdWdklIZHBkR2h2ZFhRZ2FXNTBaWEpoWTNScGIyNGdMU0IwYnlCeVpYTnZiSFpsSUhSb2FYTWdkMlVnWVhKbElHZHZhVzVuSUhSdklITm9iM2NnZEdobElIQnNZWGtnWW5WMGRHOXVJRzkyWlhKc1lYa3VKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjR2w0Wld4VGRISmxZVzFwYm1jdVpHbHpjR0YwWTJoRmRtVnVkQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WlhjZ1VHeGhlVk4wY21WaGJWSmxhbVZqZEdWa1JYWmxiblFvZXlCeVpXRnpiMjQ2SUc5dVVtVnFaV04wWldSU1pXRnpiMjRnZlNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFVnVZV0pzWlNCMGFHVWdkbWxrWlc4Z2RHOGdjR3hoZVNCaGRYUnZiV0YwYVdOaGJHeDVJR2xtSUdWdVlXSnNaVUYxZEc5d2JHRjVJR2x6SUhSeWRXVmNiaUFnSUNBZ0tpOWNiaUFnSUNCaGRYUnZVR3hoZVZacFpHVnZUM0pUWlhSVmNGQnNZWGxQZG1WeWJHRjVLQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1amIyNW1hV2N1YVhOR2JHRm5SVzVoWW14bFpDaEdiR0ZuY3k1QmRYUnZVR3hoZVZacFpHVnZLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnWVhSMFpXMXdkQ0IwYnlCd2JHRjVJSFJvWlNCMmFXUmxiMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3YkdGNVUzUnlaV0Z0S0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1eVpYTnBlbVZRYkdGNVpYSlRkSGxzWlNncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFTnZibTVsWTNRZ2RHOGdkR2hsSUZOcFoyNWhiR2x1WnlCelpYSjJaWEpjYmlBZ0lDQWdLaTljYmlBZ0lDQmpiMjV1WldOMFZHOVRhV2R1WVd4c2FXNW5VMlZ5ZG1WeUtDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxteHZZMkZzYkhsRGJHOXpaV1FnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXphRzkxYkdSU1pXTnZibTVsWTNRZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbVJwYzJOdmJtNWxZM1JOWlhOellXZGxJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2MybG5ibUZzYkdsdVoxVnliQ0E5SUhSb2FYTXVjMmxuYm1Gc2JHbHVaMVZ5YkVKMWFXeGtaWElvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUzWldKVGIyTnJaWFJEYjI1MGNtOXNiR1Z5TG1OdmJtNWxZM1FvYzJsbmJtRnNiR2x1WjFWeWJDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dWR2hwY3lCM2FXeHNJSE4wWVhKMElIUm9aU0JvWVc1a2MyaGhhMlVnZEc4Z2RHaGxJSE5wWjI1aGJHeHBibWNnYzJWeWRtVnlYRzRnSUNBZ0lDb2dRSEJoY21GdElIQmxaWEpEYjI1bWFXY2dJQzBnVWxSRElFTnZibVpwWjNWeVlYUnBiMjRnVDNCMGFXOXVjeUJtY205dElIUm9aU0JUYVdkdVlXeHBibWNnYzJWeWRtVnlYRzRnSUNBZ0lDb2dRSEpsYldGeWF5QlNWRU1nVUdWbGNpQkRiMjV1WldOMGFXOXVJRzl1SUVsalpTQkRZVzVrYVdSaGRHVWdaWFpsYm5RZ2FHRjJaU0JwZENCb1lXNWtiR1ZrSUdKNUlHaGhibVJzWlNCVFpXNWtJRWxqWlNCRFlXNWthV1JoZEdWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6ZEdGeWRGTmxjM05wYjI0b2NHVmxja052Ym1acFp6b2dVbFJEUTI5dVptbG5kWEpoZEdsdmJpa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuQmxaWEpEYjI1bWFXY2dQU0J3WldWeVEyOXVabWxuTzF4dUlDQWdJQ0FnSUNBdkx5QmphR1ZqYXlCbWIzSWdabTl5WTJsdVp5QjBkWEp1WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1OdmJtWnBaeTVwYzBac1lXZEZibUZpYkdWa0tFWnNZV2R6TGtadmNtTmxWRlZTVGlrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHTm9aV05ySUdadmNpQmhJSFIxY200Z2MyVnlkbVZ5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCb1lYTlVkWEp1VTJWeWRtVnlJRDBnZEdocGN5NWphR1ZqYTFSMWNtNVRaWEoyWlhKQmRtRnBiR0ZpYVd4cGRIa29jR1ZsY2tOdmJtWnBaeWs3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdOc2IzTmxJR0Z1WkNCbGNuSnZjaUJwWmlCMGRYSnVJR2x6SUdadmNtTmxaQ0JoYm1RZ2RHaGxjbVVnYVhNZ2JtOGdkSFZ5YmlCelpYSjJaWEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doYUdGelZIVnlibE5sY25abGNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUpibVp2S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5UbThnZEhWeWJpQnpaWEoyWlhJZ2QyRnpJR1p2ZFc1a0lHbHVJSFJvWlNCUVpXVnlJRU52Ym01bFkzUnBiMjRnVDNCMGFXOXVjeTRnVkZWU1RpQmpZVzV1YjNRZ1ltVWdabTl5WTJWa0xDQmpiRzl6YVc1bklHTnZibTVsWTNScGIyNHVJRkJzWldGelpTQjFjMlVnVTFSVlRpQnBibk4wWldGa0oxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amJHOXpaVk5wWjI1aGJHbHVaMU5sY25abGNpZ25WRlZTVGlCallXNXViM1FnWW1VZ1ptOXlZMlZrTENCamJHOXphVzVuSUdOdmJtNWxZM1JwYjI0dUlGQnNaV0Z6WlNCMWMyVWdVMVJWVGlCcGJuTjBaV0ZrTGljcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDOHZJSE5sZENCMWNDQjBhR1VnY0dWbGNpQmpiMjV1WldOMGFXOXVJR052Ym5SeWIyeHNaWEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXdaV1Z5UTI5dWJtVmpkR2x2YmtOdmJuUnliMnhzWlhJZ1BTQnVaWGNnVUdWbGNrTnZibTVsWTNScGIyNURiMjUwY205c2JHVnlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3WldWeVEyOXVabWxuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amIyNW1hV2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CeVpXWmxjbkpsWkVOdlpHVmpYRzRnSUNBZ0lDQWdJQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdjMlYwSUhWd0lIQmxaWElnWTI5dWJtVmpkR2x2YmlCamIyNTBjbTlzYkdWeUlIWnBaR1Z2SUhOMFlYUnpYRzRnSUNBZ0lDQWdJSFJvYVhNdWNHVmxja052Ym01bFkzUnBiMjVEYjI1MGNtOXNiR1Z5TG05dVZtbGtaVzlUZEdGMGN5QTlJQ2hsZG1WdWREb2dRV2RuY21WbllYUmxaRk4wWVhSektTQTlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVvWVc1a2JHVldhV1JsYjFOMFlYUnpLR1YyWlc1MEtUdGNibHh1SUNBZ0lDQWdJQ0F2S2lCWGFHVnVJSFJvWlNCUVpXVnlJRU52Ym01bFkzUnBiMjRnZDJGdWRITWdkRzhnYzJWdVpDQmhiaUJ2Wm1abGNpQm9ZWFpsSUdsMElHaGhibVJzWldRZ0tpOWNiaUFnSUNBZ0lDQWdkR2hwY3k1d1pXVnlRMjl1Ym1WamRHbHZia052Ym5SeWIyeHNaWEl1YjI1VFpXNWtWMlZpVWxSRFQyWm1aWElnUFNBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2Wm1abGNqb2dVbFJEVTJWemMybHZia1JsYzJOeWFYQjBhVzl1U1c1cGRGeHVJQ0FnSUNBZ0lDQXBJRDArSUhSb2FYTXVhR0Z1Wkd4bFUyVnVaRmRsWWxKVVEwOW1abVZ5S0c5bVptVnlLVHRjYmx4dUlDQWdJQ0FnSUNBdktpQlhhR1Z1SUhSb1pTQlFaV1Z5SUVOdmJtNWxZM1JwYjI0Z2QyRnVkSE1nZEc4Z2MyVnVaQ0JoYmlCaGJuTjNaWElnYUdGMlpTQnBkQ0JvWVc1a2JHVmtJQ292WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjR1ZsY2tOdmJtNWxZM1JwYjI1RGIyNTBjbTlzYkdWeUxtOXVVMlZ1WkZkbFlsSlVRMEZ1YzNkbGNpQTlJQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lHOW1abVZ5T2lCU1ZFTlRaWE56YVc5dVJHVnpZM0pwY0hScGIyNUpibWwwWEc0Z0lDQWdJQ0FnSUNrZ1BUNGdkR2hwY3k1b1lXNWtiR1ZUWlc1a1YyVmlVbFJEUVc1emQyVnlLRzltWm1WeUtUdGNibHh1SUNBZ0lDQWdJQ0F2S2lCWGFHVnVJSFJvWlNCUVpXVnlJRU52Ym01bFkzUnBiMjRnYVdObElHTmhibVJwWkdGMFpTQnBjeUJoWkdSbFpDQm9ZWFpsSUdsMElHaGhibVJzWldRZ0tpOWNiaUFnSUNBZ0lDQWdkR2hwY3k1d1pXVnlRMjl1Ym1WamRHbHZia052Ym5SeWIyeHNaWEl1YjI1UVpXVnlTV05sUTJGdVpHbGtZWFJsSUQwZ0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnY0dWbGNrTnZibTVsWTNScGIyNUpZMlZGZG1WdWREb2dVbFJEVUdWbGNrTnZibTVsWTNScGIyNUpZMlZGZG1WdWRGeHVJQ0FnSUNBZ0lDQXBJRDArSUhSb2FYTXVhR0Z1Wkd4bFUyVnVaRWxqWlVOaGJtUnBaR0YwWlNod1pXVnlRMjl1Ym1WamRHbHZia2xqWlVWMlpXNTBLVHRjYmx4dUlDQWdJQ0FnSUNBdktpQlhhR1Z1SUhSb1pTQlFaV1Z5SUVOdmJtNWxZM1JwYjI0Z2FHRnpJR0VnWkdGMFlTQmphR0Z1Ym1Wc0lHTnlaV0YwWldRZ1ptOXlJR2wwSUdKNUlIUm9aU0JpY205M2MyVnlMQ0JvWVc1a2JHVWdhWFFnS2k5Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV3WldWeVEyOXVibVZqZEdsdmJrTnZiblJ5YjJ4c1pYSXViMjVFWVhSaFEyaGhibTVsYkNBOUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUdSaGRHRmphR0Z1Ym1Wc1JYWmxiblE2SUZKVVEwUmhkR0ZEYUdGdWJtVnNSWFpsYm5SY2JpQWdJQ0FnSUNBZ0tTQTlQaUIwYUdsekxtaGhibVJzWlVSaGRHRkRhR0Z1Ym1Wc0tHUmhkR0ZqYUdGdWJtVnNSWFpsYm5RcE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUhObGRDQjFjQ0IzWldKU2RHTWdkR1Y0ZENCdmRtVnliR0Y1YzF4dUlDQWdJQ0FnSUNCMGFHbHpMbkJsWlhKRGIyNXVaV04wYVc5dVEyOXVkSEp2Ykd4bGNpNXphRzkzVkdWNGRFOTJaWEpzWVhsRGIyNXVaV04wYVc1bklEMGdLQ2tnUFQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNHbDRaV3hUZEhKbFlXMXBibWN1WDI5dVYyVmlVblJqUTI5dWJtVmpkR2x1WnlncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5CbFpYSkRiMjV1WldOMGFXOXVRMjl1ZEhKdmJHeGxjaTV6YUc5M1ZHVjRkRTkyWlhKc1lYbFRaWFIxY0VaaGFXeDFjbVVnUFNBb0tTQTlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3YVhobGJGTjBjbVZoYldsdVp5NWZiMjVYWldKU2RHTkdZV2xzWldRb0tUdGNiaUFnSUNBZ0lDQWdiR1YwSUhkbFlsSjBZME52Ym01bFkzUmxaRk5sYm5RZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV3WldWeVEyOXVibVZqZEdsdmJrTnZiblJ5YjJ4c1pYSXViMjVKWTJWRGIyNXVaV04wYVc5dVUzUmhkR1ZEYUdGdVoyVWdQU0FvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkNjbTkzYzJWeWN5QmxiV2wwSUZ3aVkyOXVibVZqZEdWa1hDSWdkMmhsYmlCblpYUjBhVzVuSUdacGNuTjBJR052Ym01bFkzUnBiMjRnWVc1a0lGd2lZMjl0Y0d4bGRHVmtYQ0lnZDJobGJpQm1hVzVwYzJocGJtZGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHTmhibVJwWkdGMFpTQmphR1ZqYTJsdVp5NGdTRzkzWlhabGNpd2djMjl0WlhScGJXVnpJR0p5YjNkelpYSnpJR05oYmlCemEybHdJRndpWTI5dWJtVmpkR1ZrWENJZ1lXNWtJRzl1YkhrZ1pXMXBkQ0JjSW1OdmJYQnNaWFJsWkZ3aUxseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1ZHaGxjbVZtYjNKbElHNWxaV1FnZEc4Z1kyaGxZMnNnWW05MGFDQmpZWE5sY3lCaGJtUWdaVzFwZENCdmJsZGxZbEowWTBOdmJtNWxZM1JsWkNCdmJteDVJRzl1WTJVZ2IyNGdkR2hsSUdacGNuTjBJR2hwZEM1Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGQyVmlVblJqUTI5dWJtVmpkR1ZrVTJWdWRDQW1KaUJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JiWENKamIyNXVaV04wWldSY0lpd2dYQ0pqYjIxd2JHVjBaV1JjSWwwdWFXNWpiSFZrWlhNb2RHaHBjeTV3WldWeVEyOXVibVZqZEdsdmJrTnZiblJ5YjJ4c1pYSXVjR1ZsY2tOdmJtNWxZM1JwYjI0dWFXTmxRMjl1Ym1WamRHbHZibE4wWVhSbEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNHbDRaV3hUZEhKbFlXMXBibWN1WDI5dVYyVmlVblJqUTI5dWJtVmpkR1ZrS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QyVmlVblJqUTI5dWJtVmpkR1ZrVTJWdWRDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lDQWdMeW9nVWxSRElGQmxaWElnUTI5dWJtVmpkR2x2YmlCdmJpQlVjbUZqYXlCbGRtVnVkQ0F0UGlCb1lXNWtiR1VnYjI0Z2RISmhZMnNnS2k5Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV3WldWeVEyOXVibVZqZEdsdmJrTnZiblJ5YjJ4c1pYSXViMjVVY21GamF5QTlJQ2gwY21GamEwVjJaVzUwT2lCU1ZFTlVjbUZqYTBWMlpXNTBLU0E5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1emRISmxZVzFEYjI1MGNtOXNiR1Z5TG1oaGJtUnNaVTl1VkhKaFkyc29kSEpoWTJ0RmRtVnVkQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0x5b2dVM1JoY25RZ2RHaGxJRWhoYm1RZ2MyaGhhMlVnY0hKdlkyVnpjeUJpZVNCamNtVmhkR2x1WnlCaGJpQlBabVpsY2lBcUwxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCQ2NtOTNjMlZ5VTJWdVpITlBabVpsY2lBOUlIUm9hWE11WTI5dVptbG5MbWx6Um14aFowVnVZV0pzWldRb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JHYkdGbmN5NUNjbTkzYzJWeVUyVnVaRTltWm1WeVhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJR2xtSUNoQ2NtOTNjMlZ5VTJWdVpITlBabVpsY2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1NXWWdZbkp2ZDNObGNpQnBjeUJ6Wlc1a2FXNW5JSFJvWlNCdlptWmxjaXdnWTNKbFlYUmxJR0Z1SUc5bVptVnlJR0Z1WkNCelpXNWtJR2wwSUhSdklIUm9aU0J6ZEhKbFlXMWxjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6Wlc1a2NtVmpka1JoZEdGRGFHRnVibVZzUTI5dWRISnZiR3hsY2k1amNtVmhkR1ZFWVhSaFEyaGhibTVsYkNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJsWlhKRGIyNXVaV04wYVc5dVEyOXVkSEp2Ykd4bGNpNXdaV1Z5UTI5dWJtVmpkR2x2Yml4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblkybHljblZ6Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVJoZEdGamFHRnVibVZzVDNCMGFXOXVjMXh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlZ1WkhKbFkzWkVZWFJoUTJoaGJtNWxiRU52Ym5SeWIyeHNaWEl1YUdGdVpHeGxUMjVOWlhOellXZGxJRDBnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWMk9pQk5aWE56WVdkbFJYWmxiblE4UVhKeVlYbENkV1ptWlhJK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FwSUQwK0lIUm9hWE11YUdGdVpHeGxUMjVOWlhOellXZGxLR1YyS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNHVmxja052Ym01bFkzUnBiMjVEYjI1MGNtOXNiR1Z5TG1OeVpXRjBaVTltWm1WeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzJSd1EyOXVjM1J5WVdsdWRITXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amIyNW1hV2RjYmlBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJEYUdWamEzTWdkR2hsSUhCbFpYSWdZMjl1Ym1WamRHbHZiaUJ2Y0hScGIyNXpJR1p2Y2lCaElIUjFjbTRnYzJWeWRtVnlJR0Z1WkNCeVpYUjFjbTV6SUhSeWRXVWdiM0lnWm1Gc2MyVmNiaUFnSUNBZ0tpOWNiaUFnSUNCamFHVmphMVIxY201VFpYSjJaWEpCZG1GcGJHRmlhV3hwZEhrb2IzQjBhVzl1Y3pvZ1VsUkRRMjl1Wm1sbmRYSmhkR2x2YmlrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJwWmlCcFkyVlRaWEoyWlhKeklHbHpJR1Z0Y0hSNUlISmxkSFZ5YmlCbVlXeHpaU0IwYUdseklITm9iM1ZzWkNCdWIzUWdZbVVnZEdobElHZGxibVZ5WVd3Z2RYTmxJR05oYzJVZ1luVjBJR2x6SUdobGNtVWdhVzVqWVhObFhHNGdJQ0FnSUNBZ0lHbG1JQ2doYjNCMGFXOXVjeTVwWTJWVFpYSjJaWEp6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVTVzVtYnloTWIyZG5aWEl1UjJWMFUzUmhZMnRVY21GalpTZ3BMQ0FuUVNCMGRYSnVJSE5sZG1WeUlIZGhjeUJ1YjNRZ1ptOTFibVFuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQzh2SUd4dmIzQWdkR2h5YjNWbmFDQjBhR1VnYVdObElITmxjblpsY25NZ2RHOGdZMmhsWTJzZ1ptOXlJR0VnZEhWeWJpQjFjbXhjYmlBZ0lDQWdJQ0FnWm05eUlDaGpiMjV6ZENCcFkyVlRaWEoyWlhJZ2IyWWdiM0IwYVc5dWN5NXBZMlZUWlhKMlpYSnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0dOdmJuTjBJSFZ5YkNCdlppQnBZMlZUWlhKMlpYSXVkWEpzY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gxY213dWFXNWpiSFZrWlhNb0ozUjFjbTRuS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVURzluS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHQkJJSFIxY200Z2MyVjJaWElnZDJGeklHWnZkVzVrSUdGMElDUjdkWEpzZldCY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnVEc5bloyVnlMa2x1Wm04b1RHOW5aMlZ5TGtkbGRGTjBZV05yVkhKaFkyVW9LU3dnSjBFZ2RIVnliaUJ6WlhabGNpQjNZWE1nYm05MElHWnZkVzVrSnlrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJJWVc1a2JHVnpJSGRvWlc0Z1lTQkRiMjVtYVdjZ1RXVnpjMkZuWlNCcGN5QnlaV05sYVhabFpDQmpiMjUwWVdsdWN5QjBhR1VnVUdWbGNpQkRiMjV1WldOMGFXOXVJRTl3ZEdsdmJuTWdjbVZ4ZFdseVpXUWdLRk5VVlU0Z1lXNWtJRlJWVWs0Z1UyVnlkbVZ5SUVsdVptOHBYRzRnSUNBZ0lDb2dRSEJoY21GdElHMWxjM05oWjJWRGIyNW1hV2NnTFNCRGIyNW1hV2NnVFdWemMyRm5aU0J5WldObGFYWmxaQ0JtY205dElIUm9aU0J6YVdkdVlXeHBibWNnYzJWeWRtVnlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2FHRnVaR3hsVDI1RGIyNW1hV2ROWlhOellXZGxLRzFsYzNOaFoyVkRiMjVtYVdjNklFMWxjM05oWjJWRGIyNW1hV2NwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV5WlhOcGVtVlFiR0Y1WlhKVGRIbHNaU2dwTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJRlJsYkd3Z2RHaGxJRmRsWWxKMFkwTnZiblJ5YjJ4c1pYSWdkRzhnYzNSaGNuUWdZU0J6WlhOemFXOXVJSGRwZEdnZ2RHaGxJSEJsWlhJZ2IzQjBhVzl1Y3lCelpXNTBJR1p5YjIwZ2RHaGxJSE5wWjI1aGJHbHVaeUJ6WlhKMlpYSmNiaUFnSUNBZ0lDQWdkR2hwY3k1emRHRnlkRk5sYzNOcGIyNG9iV1Z6YzJGblpVTnZibVpwWnk1d1pXVnlRMjl1Ym1WamRHbHZiazl3ZEdsdmJuTXBPMXh1WEc0Z0lDQWdJQ0FnSUM4dklGZG9aVzRnZEdobElITnBaMjVoYkdsdVp5QnpaWEoyWlhJZ2MyVnVaSE1nWVNCWFpXSlNWRU1nUVc1emQyVnlJRzkyWlhJZ2RHaGxJSGRsWW5OdlkydGxkQ0JqYjI1dVpXTjBhVzl1SUdoaGRtVWdkR2hsSUZkbFlsSjBZME52Ym5SeWIyeHNaWElnYUdGdVpHeGxJSFJvWlNCdFpYTnpZV2RsWEc0Z0lDQWdJQ0FnSUhSb2FYTXVkMlZpVTI5amEyVjBRMjl1ZEhKdmJHeGxjaTV2YmxkbFlsSjBZMEZ1YzNkbGNpQTlJQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lHMWxjM05oWjJWQmJuTjNaWEk2SUUxbGMzTmhaMlZTWldObGFYWmxMazFsYzNOaFoyVkJibk4zWlhKY2JpQWdJQ0FnSUNBZ0tTQTlQaUIwYUdsekxtaGhibVJzWlZkbFlsSjBZMEZ1YzNkbGNpaHRaWE56WVdkbFFXNXpkMlZ5S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUzWldKVGIyTnJaWFJEYjI1MGNtOXNiR1Z5TG05dVYyVmlVblJqVDJabVpYSWdQU0FvWEc0Z0lDQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbFQyWm1aWEk2SUUxbGMzTmhaMlZTWldObGFYWmxMazFsYzNOaFoyVlBabVpsY2x4dUlDQWdJQ0FnSUNBcElEMCtJSFJvYVhNdWFHRnVaR3hsVjJWaVVuUmpUMlptWlhJb2JXVnpjMkZuWlU5bVptVnlLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTNaV0pUYjJOclpYUkRiMjUwY205c2JHVnlMbTl1VjJWaVVuUmpVR1ZsY2tSaGRHRkRhR0Z1Ym1Wc2N5QTlJQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lHMWxjM05oWjJWRVlYUmhRMmhoYm01bGJITTZJRTFsYzNOaFoyVlNaV05sYVhabExrMWxjM05oWjJWUVpXVnlSR0YwWVVOb1lXNXVaV3h6WEc0Z0lDQWdJQ0FnSUNrZ1BUNGdkR2hwY3k1b1lXNWtiR1ZYWldKU2RHTlRSbFZRWldWeVJHRjBZV05vWVc1dVpXeHpLRzFsYzNOaFoyVkVZWFJoUTJoaGJtNWxiSE1wTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJRmRvWlc0Z2RHaGxJSE5wWjI1aGJHbHVaeUJ6WlhKMlpYSWdjMlZ1WkhNZ1lTQkpZMlZEWVc1a2FXUmhkR1VnYjNabGNpQjBhR1VnZDJWaWMyOWphMlYwSUdOdmJtNWxZM1JwYjI0Z2FHRjJaU0IwYUdVZ1YyVmlVblJqUTI5dWRISnZiR3hsY2lCb1lXNWtiR1VnZEdobElHMWxjM05oWjJWY2JpQWdJQ0FnSUNBZ2RHaHBjeTUzWldKVGIyTnJaWFJEYjI1MGNtOXNiR1Z5TG05dVNXTmxRMkZ1Wkdsa1lYUmxJRDBnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdhV05sUTJGdVpHbGtZWFJsT2lCU1ZFTkpZMlZEWVc1a2FXUmhkR1ZKYm1sMFhHNGdJQ0FnSUNBZ0lDa2dQVDRnZEdocGN5NW9ZVzVrYkdWSlkyVkRZVzVrYVdSaGRHVW9hV05sUTJGdVpHbGtZWFJsS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSVlXNWtiR1Z6SUhkb1pXNGdkR2hsSUhOcFoyNWhiR3hwYm1jZ2MyVnlkbVZ5SUdkcGRtVnpJSFZ6SUhSb1pTQnNhWE4wSUc5bUlITjBjbVZoYldWeUlHbGtjeTVjYmlBZ0lDQWdLaTljYmlBZ0lDQm9ZVzVrYkdWVGRISmxZVzFsY2t4cGMzUk5aWE56WVdkbEtHMWxjM05oWjJWVGRISmxZVzFsY2t4cGMzUTZJRTFsYzNOaFoyVlRkSEpsWVcxbGNreHBjM1FwSUh0Y2JpQWdJQ0FnSUNBZ1RHOW5aMlZ5TGt4dlp5aGNiaUFnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNCZ1IyOTBJSE4wY21WaGJXVnlJR3hwYzNRZ0pIdHRaWE56WVdkbFUzUnlaV0Z0WlhKTWFYTjBMbWxrYzMxZ0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnTmx4dUlDQWdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQWdJR3hsZENCM1lXNTBaV1JUZEhKbFlXMWxja2xrT2lCemRISnBibWNnUFNCdWRXeHNPMXh1WEc0Z0lDQWdJQ0FnSUM4dklHZGxkQ0IwYUdVZ1kzVnljbVZ1ZENCelpXeGxZM1JsWkNCemRISmxZVzFsY2lCcFpDQnZjSFJwYjI1Y2JpQWdJQ0FnSUNBZ2RtRnlJSE4wY21WaGJXVnlTVVJQY0hScGIyNGdQU0IwYUdsekxtTnZibVpwWnk1blpYUlRaWFIwYVc1blQzQjBhVzl1S0U5d2RHbHZibEJoY21GdFpYUmxjbk11VTNSeVpXRnRaWEpKWkNrN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdWNGFYTjBhVzVuVTJWc1pXTjBhVzl1SUQwZ2MzUnlaV0Z0WlhKSlJFOXdkR2x2Ymk1elpXeGxZM1JsWkM1MGIxTjBjbWx1WnlncExuUnlhVzBvS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0VoWlhocGMzUnBibWRUWld4bFkzUnBiMjRwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdSbFptRjFiSFFnZEc4Z2MyVnNaV04wWldRZ2IzQjBhVzl1SUdsbUlHbDBJR1Y0YVhOMGMxeHVJQ0FnSUNBZ0lDQWdJQ0FnZDJGdWRHVmtVM1J5WldGdFpYSkpaQ0E5SUhOMGNtVmhiV1Z5U1VSUGNIUnBiMjR1YzJWc1pXTjBaV1E3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQXZMeUJoWkdRZ2RHaGxJSE4wY21WaGJXVnljeUIwYnlCMGFHVWdWVWxjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjMlYwZEdsdVowOXdkR2x2Ym5NZ1BTQmJMaTR1YldWemMyRm5aVk4wY21WaGJXVnlUR2x6ZEM1cFpITmRPeUF2THlCamIzQjVJSFJvWlNCdmNtbG5hVzVoYkNCdFpYTnpZV2RsVTNSeVpXRnRaWEpNYVhOMExtbGtjMXh1SUNBZ0lDQWdJQ0J6WlhSMGFXNW5UM0IwYVc5dWN5NTFibk5vYVdaMEtDY25LVHNnTHk4Z1lXUmtJR0Z1SUdWdGNIUjVJRzl3ZEdsdmJpQmhkQ0IwYUdVZ2RHOXdYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyOXVabWxuTG5ObGRFOXdkR2x2YmxObGRIUnBibWRQY0hScGIyNXpLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1QzQjBhVzl1VUdGeVlXMWxkR1Z5Y3k1VGRISmxZVzFsY2tsa0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWMGRHbHVaMDl3ZEdsdmJuTmNiaUFnSUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnSUNCc1pYUWdZWFYwYjFObGJHVmpkR1ZrVTNSeVpXRnRaWEpKWkRvZ2MzUnlhVzVuSUNBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSGRoYVhSR2IzSlRkSEpsWVcxbGNpQTlJSFJvYVhNdVkyOXVabWxuTG1selJteGhaMFZ1WVdKc1pXUW9SbXhoWjNNdVYyRnBkRVp2Y2xOMGNtVmhiV1Z5S1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnY21WamIyNXVaV04wVEdsdGFYUWdQU0IwYUdsekxtTnZibVpwWnk1blpYUk9kVzFsY21salUyVjBkR2x1WjFaaGJIVmxLRTUxYldWeWFXTlFZWEpoYldWMFpYSnpMazFoZUZKbFkyOXVibVZqZEVGMGRHVnRjSFJ6S1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnY21WamIyNXVaV04wUkdWc1lYa2dQU0IwYUdsekxtTnZibVpwWnk1blpYUk9kVzFsY21salUyVjBkR2x1WjFaaGJIVmxLRTUxYldWeWFXTlFZWEpoYldWMFpYSnpMbE4wY21WaGJXVnlRWFYwYjBwdmFXNUpiblJsY25aaGJDazdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1ptbHljM1FnZDJVZ1ptbG5kWEpsSUc5MWRDQmhJSGRoYm5SbFpDQnpkSEpsWVcxbGNpQnBaQ0IwYUhKdmRXZG9JSFpoY21sdmRYTWdiV1ZoYm5OY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZFhObFZYSnNVR0Z5WVcxeklEMGdkR2hwY3k1amIyNW1hV2N1ZFhObFZYSnNVR0Z5WVcxek8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCMWNteFFZWEpoYlhNZ1BTQnVaWGNnVlZKTVUyVmhjbU5vVUdGeVlXMXpLSGRwYm1SdmR5NXNiMk5oZEdsdmJpNXpaV0Z5WTJncE8xeHVJQ0FnSUNBZ0lDQnBaaUFvZFhObFZYSnNVR0Z5WVcxeklDWW1JSFZ5YkZCaGNtRnRjeTVvWVhNb1QzQjBhVzl1VUdGeVlXMWxkR1Z5Y3k1VGRISmxZVzFsY2tsa0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdhV1lnZDJVbmRtVWdjMlYwSUhSb1pTQnpkSEpsWVcxbGNpQnBaQ0J2YmlCMGFHVWdkWEpzSUhkbElHOXViSGtnZDJGdWRDQjBhR0YwSUhOMGNtVmhiV1Z5SUdsa1hHNGdJQ0FnSUNBZ0lDQWdJQ0IzWVc1MFpXUlRkSEpsWVcxbGNrbGtJRDBnZFhKc1VHRnlZVzF6TG1kbGRDaFBjSFJwYjI1UVlYSmhiV1YwWlhKekxsTjBjbVZoYldWeVNXUXBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hSb2FYTXVjM1ZpYzJOeWFXSmxaRk4wY21WaGJTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdkMlVnZDJWeVpTQndjbVYyYVc5MWMyeDVJSE4xWW5OamNtbGlaV1FnZEc4Z1lTQnpkSEpsWVcxbGNpd2dkMlVnZDJGdWRDQjBhR0YwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjNZVzUwWldSVGRISmxZVzFsY2tsa0lEMGdkR2hwY3k1emRXSnpZM0pwWW1Wa1UzUnlaV0Z0TzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdMeThnYm05M0lHeGxkSE1nYzJWbElHbG1JSGRsSUdOaGJpQndhV05ySUdsMExseHVJQ0FnSUNBZ0lDQnBaaUFvZDJGdWRHVmtVM1J5WldGdFpYSkpaQ0FtSmlCdFpYTnpZV2RsVTNSeVpXRnRaWEpNYVhOMExtbGtjeTVwYm1Oc2RXUmxjeWgzWVc1MFpXUlRkSEpsWVcxbGNrbGtLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnYVdZZ2RHaGxJSGRoYm5SbFpDQnpkSEpsWVcwZ2FYTWdhVzRnZEdobElHeHBjM1F1SUhkbElIQnBZMnNnZEdoaGRGeHVJQ0FnSUNBZ0lDQWdJQ0FnWVhWMGIxTmxiR1ZqZEdWa1UzUnlaV0Z0WlhKSlpDQTlJSGRoYm5SbFpGTjBjbVZoYldWeVNXUTdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvS0NGM1lXNTBaV1JUZEhKbFlXMWxja2xrSUh4OElDRjNZV2wwUm05eVUzUnlaV0Z0WlhJcElDWW1JRzFsYzNOaFoyVlRkSEpsWVcxbGNreHBjM1F1YVdSekxteGxibWQwYUNBOVBTQXhLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJ2ZEdobGNuZHBjMlVzSUdsbUlIZGxKM0psSUc1dmRDQjNZV2wwYVc1bklHWnZjaUIwYUdVZ2QyRnVkR1ZrSUhOMGNtVmhiV1Z5SUdGdVpDQjBhR1Z5WlNkeklHOXViSGtnYjI1bElITjBjbVZoYldWeUxDQmpiMjV1WldOMElIUnZJR2wwWEc0Z0lDQWdJQ0FnSUNBZ0lDQmhkWFJ2VTJWc1pXTjBaV1JUZEhKbFlXMWxja2xrSUQwZ2JXVnpjMkZuWlZOMGNtVmhiV1Z5VEdsemRDNXBaSE5iTUYwN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0F2THlCcFppQjNaU0JtYjNWdVpDQmhJSE4wY21WaGJXVnlJR2xrSUhSdklHRjFkRzhnYzJWc1pXTjBMQ0J6Wld4bFkzUWdhWFJjYmlBZ0lDQWdJQ0FnYVdZZ0tHRjFkRzlUWld4bFkzUmxaRk4wY21WaGJXVnlTV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFYTlNaV052Ym01bFkzUnBibWNnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y21WamIyNXVaV04wUVhSMFpXMXdkQ0E5SURBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTnZibVpwWnk1elpYUlBjSFJwYjI1VFpYUjBhVzVuVm1Gc2RXVW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdUM0IwYVc5dVVHRnlZVzFsZEdWeWN5NVRkSEpsWVcxbGNrbGtMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0YxZEc5VFpXeGxZM1JsWkZOMGNtVmhiV1Z5U1dSY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJ1YnlCaGRYUnZJSE5sYkdWamRHVmtJSE4wY21WaGJXVnlMbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdhV1lnZDJVbmNtVWdkMkZwZEdsdVp5Qm1iM0lnWVNCemRISmxZVzFsY2lCMGFHVnVJSFJ5ZVNCeVpXTnZibTVsWTNScGJtZGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDNZV2wwUm05eVUzUnlaV0Z0WlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXlaV052Ym01bFkzUkJkSFJsYlhCMElEd2djbVZqYjI1dVpXTjBUR2x0YVhRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2MzUnBiR3dnY21WamIyNXVaV04wY3lCaGRtRnBiR0ZpYkdWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1cGMxSmxZMjl1Ym1WamRHbHVaeUE5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjbVZqYjI1dVpXTjBRWFIwWlcxd2RDc3JPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpYUlVhVzFsYjNWMEtDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkMlZpVTI5amEyVjBRMjl1ZEhKdmJHeGxjaTV5WlhGMVpYTjBVM1J5WldGdFpYSk1hWE4wS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzSUhKbFkyOXVibVZqZEVSbGJHRjVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QlhaU2QyWlNCbGVHaGhkWE4wWldRZ2IzVnlJSEpsWTI5dWJtVmpkQ0JoZEhSbGJYQjBjeXdnY21WMGRYSnVJSFJ2SUcxaGFXNGdjMk55WldWdVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNtVmpiMjV1WldOMFFYUjBaVzF3ZENBOUlEQTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVhWE5TWldOdmJtNWxZM1JwYm1jZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1emFHOTFiR1JTWldOdmJtNWxZM1FnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBdkx5QmthWE53WVhSamFDQjBhR2x6SUdWMlpXNTBJR1pwYm1Gc2JIbGNiaUFnSUNBZ0lDQWdkR2hwY3k1d2FYaGxiRk4wY21WaGJXbHVaeTVrYVhOd1lYUmphRVYyWlc1MEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnYm1WM0lGTjBjbVZoYldWeVRHbHpkRTFsYzNOaFoyVkZkbVZ1ZENoN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlZOMGNtVmhiV1Z5VEdsemRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhkWFJ2VTJWc1pXTjBaV1JUZEhKbFlXMWxja2xrTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhkaGJuUmxaRk4wY21WaGJXVnlTV1JjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhR0Z1Wkd4bFUzUnlaV0Z0WlhKSlJFTm9ZVzVuWldSTlpYTnpZV2RsS0hOMGNtVmhiV1Z5U1VSRGFHRnVaMlZrVFdWemMyRm5aVG9nVFdWemMyRm5aVk4wY21WaGJXVnlTVVJEYUdGdVoyVmtLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRzVsZDBsRUlEMGdjM1J5WldGdFpYSkpSRU5vWVc1blpXUk5aWE56WVdkbExtNWxkMGxFTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJRzVsWldRZ2RHOGdaV1JwZENCMGFHVWdjMlZzWldOMFpXUWdjM1J5WldGdFpYSWdhVzRnZEdobElITmxkSFJwYm1keklHeHBjM1JjYmlBZ0lDQWdJQ0FnZG1GeUlITjBjbVZoYldWeVRHbHpkRTl3ZEdsdmJuTWdQU0IwYUdsekxtTnZibVpwWnk1blpYUlRaWFIwYVc1blQzQjBhVzl1S0U5d2RHbHZibEJoY21GdFpYUmxjbk11VTNSeVpXRnRaWEpKWkNrN1hHNWNiaUFnSUNBZ0lDQWdMeThnZEdWdGNHOXlZWEpwYkhrZ2NISmxkbVZ1ZENCdmJrTm9ZVzVuWlNCbWNtOXRJR1pwY21sdVp5QW9hWFFnZDI5MWJHUWdkSEo1SUhSdklITjFZbk5qY21saVpTQjBieUIwYUdVZ2MzUnlaV0Z0WlhJZ1lXZGhhVzRwWEc0Z0lDQWdJQ0FnSUhaaGNpQnZiR1JQYmtOb1lXNW5aU0E5SUhOMGNtVmhiV1Z5VEdsemRFOXdkR2x2Ym5NdWIyNURhR0Z1WjJVN1hHNGdJQ0FnSUNBZ0lITjBjbVZoYldWeVRHbHpkRTl3ZEdsdmJuTXViMjVEYUdGdVoyVWdQU0FvS1QwK2UzMDdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1kyaGhibWRsSUhSb1pTQnpaV3hsWTNSbFpDQmxiblJ5ZVM1Y2JpQWdJQ0FnSUNBZ2RtRnlJSE4wY21WaGJXVnlUR2x6ZENBOUlITjBjbVZoYldWeVRHbHpkRTl3ZEdsdmJuTXViM0IwYVc5dWN6dGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0J6ZEhKbFlXMWxja3hwYzNRdWJHVnVaM1JvT3lBcksya3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6ZEhKbFlXMWxja3hwYzNSYmFWMGdQVDBnZEdocGN5NXpkV0p6WTNKcFltVmtVM1J5WldGdEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM1J5WldGdFpYSk1hWE4wVzJsZElEMGdibVYzU1VRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBdkx5QjFjR1JoZEdVZ2RHaGxJR3hwYzNSY2JpQWdJQ0FnSUNBZ2MzUnlaV0Z0WlhKTWFYTjBUM0IwYVc5dWN5NXZjSFJwYjI1eklEMGdjM1J5WldGdFpYSk1hWE4wTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJSFZ3WkdGMFpTQjBhR1VnYzJWc1pXTjBaV1FnWlc1MGNubGNiaUFnSUNBZ0lDQWdjM1J5WldGdFpYSk1hWE4wVDNCMGFXOXVjeTV6Wld4bFkzUmxaQ0E5SUc1bGQwbEVPMXh1WEc0Z0lDQWdJQ0FnSUM4dklISmxjM1J2Y21VZ2RHaGxJRzlzWkNCamFHRnVaMlVnYm05MGFXWnBaWEl1WEc0Z0lDQWdJQ0FnSUhOMGNtVmhiV1Z5VEdsemRFOXdkR2x2Ym5NdWIyNURhR0Z1WjJVZ1BTQnZiR1JQYmtOb1lXNW5aVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QnlaVzFsYldKbGNpQjNhR2xqYUNCemRISmxZVzBnZDJVbmNtVWdjM1ZpYzJOeWFXSmxJSFJ2WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjM1ZpYzJOeWFXSmxaRk4wY21WaGJTQTlJSE4wY21WaGJXVnlTVVJEYUdGdVoyVmtUV1Z6YzJGblpTNXVaWGRKUkR0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJ1YjNScFpua2dZVzU1SUd4cGMzUmxibVZ5YzF4dUlDQWdJQ0FnSUNCMGFHbHpMbkJwZUdWc1UzUnlaV0Z0YVc1bkxtUnBjM0JoZEdOb1JYWmxiblFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQnVaWGNnVTNSeVpXRnRaWEpKUkVOb1lXNW5aV1JOWlhOellXZGxSWFpsYm5Rb2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNWxkMGxFWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVoaGJtUnNaU0IwYUdVZ1VsUkRJRUZ1YzNkbGNpQm1jbTl0SUhSb1pTQnphV2R1WVd4cGJtY2djMlZ5ZG1WeVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUVGdWMzZGxjaUF0SUVGdWMzZGxjaUJUUkZBZ1puSnZiU0IwYUdVZ2NHVmxjaTVjYmlBZ0lDQWdLaTljYmlBZ0lDQm9ZVzVrYkdWWFpXSlNkR05CYm5OM1pYSW9RVzV6ZDJWeU9pQk5aWE56WVdkbFFXNXpkMlZ5S1NCN1hHNGdJQ0FnSUNBZ0lFeHZaMmRsY2k1TWIyY29URzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N3Z1lFZHZkQ0JoYm5OM1pYSWdjMlJ3SUNSN1FXNXpkMlZ5TG5Oa2NIMWdMQ0EyS1R0Y2JseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCelpIQkJibk4zWlhJNklGSlVRMU5sYzNOcGIyNUVaWE5qY21sd2RHbHZia2x1YVhRZ1BTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCelpIQTZJRUZ1YzNkbGNpNXpaSEFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBbllXNXpkMlZ5SjF4dUlDQWdJQ0FnSUNCOU8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdWNHVmxja052Ym01bFkzUnBiMjVEYjI1MGNtOXNiR1Z5TG5KbFkyVnBkbVZCYm5OM1pYSW9jMlJ3UVc1emQyVnlLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NW9ZVzVrYkdWUWIzTjBWMlZpY25SalRtVm5iM1JwWVhScGIyNG9LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJJWVc1a2JHVWdkR2hsSUZKVVF5QnZabVpsY2lCbWNtOXRJR0VnVjJWaVVsUkRJSEJsWlhJZ0tISmxZMlZwZG1Wa0lIUm9jbTkxWjJnZ2RHaGxJSE5wWjI1aGJHeHBibWNnYzJWeWRtVnlLUzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdUMlptWlhJZ0xTQlBabVpsY2lCVFJGQWdabkp2YlNCMGFHVWdjR1ZsY2k1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JvWVc1a2JHVlhaV0pTZEdOUFptWmxjaWhQWm1abGNqb2dUV1Z6YzJGblpVOW1abVZ5S1NCN1hHNGdJQ0FnSUNBZ0lFeHZaMmRsY2k1TWIyY29URzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N3Z1lFZHZkQ0J2Wm1abGNpQnpaSEFnSkh0UFptWmxjaTV6WkhCOVlDd2dOaWs3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVwYzFWemFXNW5VMFpWSUQwZ1QyWm1aWEl1YzJaMUlEOGdUMlptWlhJdWMyWjFJRG9nWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbWx6VlhOcGJtZFRSbFVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUVScGMyRmliR1VnYm1WbmIzUnBZWFJwYm1jZ2QybDBhQ0IwYUdVZ2MyWjFJR0Z6SUhSb1pTQnpablVnYjI1c2VTQnpkWEJ3YjNKMGN5QnZibVVnWTI5a1pXTWdZWFFnWVNCMGFXMWxYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJsWlhKRGIyNXVaV04wYVc5dVEyOXVkSEp2Ykd4bGNpNXdjbVZtWlhKeVpXUkRiMlJsWXlBOUlDY25PMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYzJSd1QyWm1aWEk2SUZKVVExTmxjM05wYjI1RVpYTmpjbWx3ZEdsdmJrbHVhWFFnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6WkhBNklFOW1abVZ5TG5Oa2NDeGNiaUFnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJQ2R2Wm1abGNpZGNiaUFnSUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbkJsWlhKRGIyNXVaV04wYVc5dVEyOXVkSEp2Ykd4bGNpNXlaV05sYVhabFQyWm1aWElvYzJSd1QyWm1aWElzSUhSb2FYTXVZMjl1Wm1sbktUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1b1lXNWtiR1ZRYjNOMFYyVmljblJqVG1WbmIzUnBZWFJwYjI0b0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQklZVzVrYkdVZ2QyaGxiaUIwYUdVZ1UwWlZJSEJ5YjNacFpHVnpJSFJvWlNCd1pXVnlJSGRwZEdnZ2FYUnpJR1JoZEdFZ1kyaGhibTVsYkhOY2JpQWdJQ0FnS2lCQWNHRnlZVzBnUkdGMFlVTm9ZVzV1Wld4eklDMGdWR2hsSUcxbGMzTmhaMlVnWm5KdmJTQjBhR1VnVTBaVklHTnZiblJoYVc1cGJtY2dkR2hsSUdSaGRHRWdZMmhoYm01bGJITWdhV1J6WEc0Z0lDQWdJQ292WEc0Z0lDQWdhR0Z1Wkd4bFYyVmlVblJqVTBaVlVHVmxja1JoZEdGamFHRnVibVZzY3loY2JpQWdJQ0FnSUNBZ1JHRjBZVU5vWVc1dVpXeHpPaUJOWlhOellXZGxVbVZqWldsMlpTNU5aWE56WVdkbFVHVmxja1JoZEdGRGFHRnVibVZzYzF4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JUWlc1a1QzQjBhVzl1Y3pvZ1VsUkRSR0YwWVVOb1lXNXVaV3hKYm1sMElEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2IzSmtaWEpsWkRvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHNWxaMjkwYVdGMFpXUTZJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWkRvZ1JHRjBZVU5vWVc1dVpXeHpMbk5sYm1SVGRISmxZVzFKWkZ4dUlDQWdJQ0FnSUNCOU8xeHVYRzRnSUNBZ0lDQWdJR052Ym5OMElIVnVhV1JwY21WamRHbHZibUZzSUQxY2JpQWdJQ0FnSUNBZ0lDQWdJRVJoZEdGRGFHRnVibVZzY3k1elpXNWtVM1J5WldGdFNXUWdJVDBnUkdGMFlVTm9ZVzV1Wld4ekxuSmxZM1pUZEhKbFlXMUpaRHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbk5sYm1SeVpXTjJSR0YwWVVOb1lXNXVaV3hEYjI1MGNtOXNiR1Z5TG1OeVpXRjBaVVJoZEdGRGFHRnVibVZzS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1d1pXVnlRMjl1Ym1WamRHbHZia052Ym5SeWIyeHNaWEl1Y0dWbGNrTnZibTVsWTNScGIyNHNYRzRnSUNBZ0lDQWdJQ0FnSUNCMWJtbGthWEpsWTNScGIyNWhiQ0EvSUNkelpXNWtMV1JoZEdGamFHRnVibVZzSnlBNklDZGtZWFJoWTJoaGJtNWxiQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQlRaVzVrVDNCMGFXOXVjMXh1SUNBZ0lDQWdJQ0FwTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2gxYm1sa2FYSmxZM1JwYjI1aGJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnVW1WamRrOXdkR2x2Ym5NNklGSlVRMFJoZEdGRGFHRnVibVZzU1c1cGRDQTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2Y21SbGNtVmtPaUIwY25WbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNWxaMjkwYVdGMFpXUTZJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXUTZJRVJoZEdGRGFHRnVibVZzY3k1eVpXTjJVM1J5WldGdFNXUmNiaUFnSUNBZ0lDQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjbVZqZGtSaGRHRkRhR0Z1Ym1Wc1EyOXVkSEp2Ykd4bGNpNWpjbVZoZEdWRVlYUmhRMmhoYm01bGJDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CbFpYSkRiMjV1WldOMGFXOXVRMjl1ZEhKdmJHeGxjaTV3WldWeVEyOXVibVZqZEdsdmJpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5jbVZqZGkxa1lYUmhZMmhoYm01bGJDY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdVbVZqZGs5d2RHbHZibk5jYmlBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkpsWTNaRVlYUmhRMmhoYm01bGJFTnZiblJ5YjJ4c1pYSXVhR0Z1Wkd4bFQyNVBjR1Z1SUQwZ0tDa2dQVDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuZGxZbE52WTJ0bGRFTnZiblJ5YjJ4c1pYSXVjMlZ1WkZOR1ZWSmxZM1pFWVhSaFEyaGhibTVsYkZKbFlXUjVLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJKWmlCM1pTZHlaU0IxYm1rdFpHbHlaV04wYVc5dVlXd3NJRzl1YkhrZ2RHaGxJSEpsWTNZZ1pHRjBZU0JqYUdGdWJtVnNJSE5vYjNWc1pDQm9ZVzVrYkdVZ2FXNWpiMjFwYm1jZ2JXVnpjMkZuWlhOY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNtVmpka1JoZEdGRGFHRnVibVZzUTI5dWRISnZiR3hsY2k1b1lXNWtiR1ZQYmsxbGMzTmhaMlVnUFNBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pYWTZJRTFsYzNOaFoyVkZkbVZ1ZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdLU0E5UGlCMGFHbHpMbWhoYm1Sc1pVOXVUV1Z6YzJGblpTaGxkaWs3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJsYkhObElHOTFjaUJ3Y21sdFlYSjVJR1JoZEdGamFHRnVibVZzSUdseklITmxibVF2Y21WamRpQnpieUJwZENCallXNGdhR0Z1Wkd4bElHbHVZMjl0YVc1bklHMWxjM05oWjJWelhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTmxibVJ5WldOMlJHRjBZVU5vWVc1dVpXeERiMjUwY205c2JHVnlMbWhoYm1Sc1pVOXVUV1Z6YzJGblpTQTlJQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsZGpvZ1RXVnpjMkZuWlVWMlpXNTBYRzRnSUNBZ0lDQWdJQ0FnSUNBcElEMCtJSFJvYVhNdWFHRnVaR3hsVDI1TlpYTnpZV2RsS0dWMktUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lHaGhibVJzWlZCdmMzUlhaV0p5ZEdOT1pXZHZkR2xoZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnTHk4Z2MzUmhjblFnZEdobElHRm1heUIzWVhKdWFXNW5JSFJwYldWeUlHRnpJRkJUSUdseklHNXZkeUJ5ZFc1dWFXNW5YRzRnSUNBZ0lDQWdJSFJvYVhNdVlXWnJRMjl1ZEhKdmJHeGxjaTV6ZEdGeWRFRm1hMWRoY201cGJtZFVhVzFsY2lncE8xeHVJQ0FnSUNBZ0lDQXZMeUJ6YUc5M0lIUm9aU0J2ZG1WeWJHRjVJSFJvWVhRZ2QyVWdhR0YyWlNCdVpXZHZkR2xoZEdWa0lHRWdZMjl1Ym1WamRHbHZibHh1SUNBZ0lDQWdJQ0IwYUdsekxuQnBlR1ZzVTNSeVpXRnRhVzVuTGw5dmJsZGxZbEowWTFOa2NDZ3BPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5OMFlYUnpWR2x0WlhKSVlXNWtiR1VnSmlZZ2RHaHBjeTV6ZEdGMGMxUnBiV1Z5U0dGdVpHeGxJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhkcGJtUnZkeTVqYkdWaGNrbHVkR1Z5ZG1Gc0tIUm9hWE11YzNSaGRITlVhVzFsY2toaGJtUnNaU2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMFlYUnpWR2x0WlhKSVlXNWtiR1VnUFNCM2FXNWtiM2N1YzJWMFNXNTBaWEoyWVd3b0tDa2dQVDRnZEdocGN5NW5aWFJUZEdGMGN5Z3BMQ0F4TURBd0tUdGNibHh1SUNBZ0lDQWdJQ0F2S2lBZ0tpOWNiaUFnSUNBZ0lDQWdkR2hwY3k1elpYUk5iM1Z6WlVsdWNIVjBSVzVoWW14bFpDaDBhR2x6TG1OdmJtWnBaeTVwYzBac1lXZEZibUZpYkdWa0tFWnNZV2R6TGsxdmRYTmxTVzV3ZFhRcEtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1elpYUkxaWGxpYjJGeVpFbHVjSFYwUlc1aFlteGxaQ2gwYUdsekxtTnZibVpwWnk1cGMwWnNZV2RGYm1GaWJHVmtLRVpzWVdkekxrdGxlV0p2WVhKa1NXNXdkWFFwS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSSFlXMWxVR0ZrU1c1d2RYUkZibUZpYkdWa0tIUm9hWE11WTI5dVptbG5MbWx6Um14aFowVnVZV0pzWldRb1JteGhaM011UjJGdFpYQmhaRWx1Y0hWMEtTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dWMmhsYmlCaGJpQnBZMlVnUTJGdVpHbGtZWFJsSUdseklISmxZMlZwZG1Wa0lHWnliMjBnZEdobElGTnBaMjVoYkdsdVp5QnpaWEoyWlhJZ1lXUmtJR2wwSUhSdklIUm9aU0JRWldWeUlFTnZibTVsWTNScGIyNGdRMnhwWlc1MFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUdsalpVTmhibVJwWkdGMFpTQXRJRWxqWlNCRFlXNWthV1JoZEdVZ1puSnZiU0JUWlhKMlpYSmNiaUFnSUNBZ0tpOWNiaUFnSUNCb1lXNWtiR1ZKWTJWRFlXNWthV1JoZEdVb2FXTmxRMkZ1Wkdsa1lYUmxPaUJTVkVOSlkyVkRZVzVrYVdSaGRHVkpibWwwS1NCN1hHNGdJQ0FnSUNBZ0lFeHZaMmRsY2k1TWIyY29YRzRnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1UjJWMFUzUmhZMnRVY21GalpTZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0oxZGxZaUJTVkVNZ1EyOXVkSEp2Ykd4bGNqb2diMjVYWldKU2RHTkpZMlVuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdObHh1SUNBZ0lDQWdJQ0FwTzF4dVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUdOaGJtUnBaR0YwWlNBOUlHNWxkeUJTVkVOSlkyVkRZVzVrYVdSaGRHVW9hV05sUTJGdVpHbGtZWFJsS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV3WldWeVEyOXVibVZqZEdsdmJrTnZiblJ5YjJ4c1pYSXVhR0Z1Wkd4bFQyNUpZMlVvWTJGdVpHbGtZWFJsS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVFpXNWtJSFJvWlNCcFkyVWdRMkZ1Wkdsa1lYUmxJSFJ2SUhSb1pTQnphV2R1WVd4cGJtY2djMlZ5ZG1WeUlIWnBZU0IzWldKemIyTnJaWFJjYmlBZ0lDQWdLaUJBY0dGeVlXMGdhV05sUlhabGJuUWdMU0JTVkVNZ1VHVmxjaUJEYjI1dVpXTjBhVzl1U1dObFJYWmxiblFwSUh0Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JvWVc1a2JHVlRaVzVrU1dObFEyRnVaR2xrWVhSbEtHbGpaVVYyWlc1ME9pQlNWRU5RWldWeVEyOXVibVZqZEdsdmJrbGpaVVYyWlc1MEtTQjdYRzRnSUNBZ0lDQWdJRXh2WjJkbGNpNU1iMmNvVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTd2dKMDl1U1dObFEyRnVaR2xrWVhSbEp5d2dOaWs3WEc0Z0lDQWdJQ0FnSUdsbUlDaHBZMlZGZG1WdWRDNWpZVzVrYVdSaGRHVWdKaVlnYVdObFJYWmxiblF1WTJGdVpHbGtZWFJsTG1OaGJtUnBaR0YwWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTNaV0pUYjJOclpYUkRiMjUwY205c2JHVnlMbk5sYm1SSlkyVkRZVzVrYVdSaGRHVW9hV05sUlhabGJuUXVZMkZ1Wkdsa1lYUmxLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZObGJtUWdkR2hsSUdsalpTQkRZVzVrYVdSaGRHVWdkRzhnZEdobElITnBaMjVoYkdsdVp5QnpaWEoyWlhJZ2RtbGhJSGRsWW5OdlkydGxkRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnBZMlZGZG1WdWRDQXRJRkpVUXlCUVpXVnlJRU52Ym01bFkzUnBiMjVKWTJWRmRtVnVkQ2tnZTF4dUlDQWdJQ0FxTDF4dUlDQWdJR2hoYm1Sc1pVUmhkR0ZEYUdGdWJtVnNLR1JoZEdGamFHRnVibVZzUlhabGJuUTZJRkpVUTBSaGRHRkRhR0Z1Ym1Wc1JYWmxiblFwSUh0Y2JpQWdJQ0FnSUNBZ1RHOW5aMlZ5TGt4dlp5aGNiaUFnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBblJHRjBZU0JqYUdGdWJtVnNJR055WldGMFpXUWdabTl5SUhWeklHSjVJR0p5YjNkelpYSWdZWE1nZDJVZ1lYSmxJR0VnY21WalpXbDJhVzVuSUhCbFpYSXVKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lEWmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaVzVrY21WamRrUmhkR0ZEYUdGdWJtVnNRMjl1ZEhKdmJHeGxjaTVrWVhSaFEyaGhibTVsYkNBOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaFkyaGhibTVsYkVWMlpXNTBMbU5vWVc1dVpXdzdYRzRnSUNBZ0lDQWdJQzh2SUVSaGRHRWdZMmhoYm01bGJDQjNZWE1nWTNKbFlYUmxaQ0JtYjNJZ2RYTXNJSE52SUhkbElHcDFjM1FnYm1WbFpDQjBieUJ6WlhSMWNDQnBkSE1nWTJGc2JHSmhZMnR6SUdGdVpDQmhjbkpoZVNCMGVYQmxYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVnVaSEpsWTNaRVlYUmhRMmhoYm01bGJFTnZiblJ5YjJ4c1pYSXVjMlYwZFhCRVlYUmhRMmhoYm01bGJDZ3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxibVJ5WldOMlJHRjBZVU5vWVc1dVpXeERiMjUwY205c2JHVnlMbWhoYm1Sc1pVOXVUV1Z6YzJGblpTQTlJQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lHVjJPaUJOWlhOellXZGxSWFpsYm5ROFFYSnlZWGxDZFdabVpYSStYRzRnSUNBZ0lDQWdJQ2tnUFQ0Z2RHaHBjeTVvWVc1a2JHVlBiazFsYzNOaFoyVW9aWFlwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZObGJtUWdkR2hsSUZKVVF5QlBabVpsY2lCVFpYTnphVzl1SUhSdklIUm9aU0JUYVdkdVlXeHBibWNnYzJWeWRtVnlJSFpwWVNCM1pXSnpiMk5yWlhSY2JpQWdJQ0FnS2lCQWNHRnlZVzBnYjJabVpYSWdMU0JTVkVNZ1UyVnpjMmx2YmlCRVpYTmpjbWx3ZEdsdmJseHVJQ0FnSUNBcUwxeHVJQ0FnSUdoaGJtUnNaVk5sYm1SWFpXSlNWRU5QWm1abGNpaHZabVpsY2pvZ1VsUkRVMlZ6YzJsdmJrUmxjMk55YVhCMGFXOXVTVzVwZENrZ2UxeHVJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRnh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGtkbGRGTjBZV05yVkhKaFkyVW9LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDZFRaVzVrYVc1bklIUm9aU0J2Wm1abGNpQjBieUIwYUdVZ1UyVnlkbVZ5Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJRFpjYmlBZ0lDQWdJQ0FnS1R0Y2JseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCbGVIUnlZVkJoY21GdGN6b2dSWGgwY21GUFptWmxjbEJoY21GdFpYUmxjbk1nUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0YVc1Q2FYUnlZWFJsUW5Cek9pQXhNREF3SUNvZ2RHaHBjeTVqYjI1bWFXY3VaMlYwVG5WdFpYSnBZMU5sZEhScGJtZFdZV3gxWlNoT2RXMWxjbWxqVUdGeVlXMWxkR1Z5Y3k1WFpXSlNWRU5OYVc1Q2FYUnlZWFJsS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzFoZUVKcGRISmhkR1ZDY0hNNklERXdNREFnS2lCMGFHbHpMbU52Ym1acFp5NW5aWFJPZFcxbGNtbGpVMlYwZEdsdVoxWmhiSFZsS0U1MWJXVnlhV05RWVhKaGJXVjBaWEp6TGxkbFlsSlVRMDFoZUVKcGRISmhkR1VwWEc0Z0lDQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1M1pXSlRiMk5yWlhSRGIyNTBjbTlzYkdWeUxuTmxibVJYWldKU2RHTlBabVpsY2lodlptWmxjaXdnWlhoMGNtRlFZWEpoYlhNcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTmxibVFnZEdobElGSlVReUJQWm1abGNpQlRaWE56YVc5dUlIUnZJSFJvWlNCVGFXZHVZV3hwYm1jZ2MyVnlkbVZ5SUhacFlTQjNaV0p6YjJOclpYUmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1lXNXpkMlZ5SUMwZ1VsUkRJRk5sYzNOcGIyNGdSR1Z6WTNKcGNIUnBiMjVjYmlBZ0lDQWdLaTljYmlBZ0lDQm9ZVzVrYkdWVFpXNWtWMlZpVWxSRFFXNXpkMlZ5S0dGdWMzZGxjam9nVWxSRFUyVnpjMmx2YmtSbGMyTnlhWEIwYVc5dVNXNXBkQ2tnZTF4dUlDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktGeHVJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNkVFpXNWthVzVuSUhSb1pTQmhibk4zWlhJZ2RHOGdkR2hsSUZObGNuWmxjaWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQTJYRzRnSUNBZ0lDQWdJQ2s3WEc1Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWlhoMGNtRlFZWEpoYlhNNklFVjRkSEpoUVc1emQyVnlVR0Z5WVcxbGRHVnljeUE5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzFwYmtKcGRISmhkR1ZDY0hNNklERXdNREFnS2lCMGFHbHpMbU52Ym1acFp5NW5aWFJPZFcxbGNtbGpVMlYwZEdsdVoxWmhiSFZsS0U1MWJXVnlhV05RWVhKaGJXVjBaWEp6TGxkbFlsSlVRMDFwYmtKcGRISmhkR1VwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiV0Y0UW1sMGNtRjBaVUp3Y3pvZ01UQXdNQ0FxSUhSb2FYTXVZMjl1Wm1sbkxtZGxkRTUxYldWeWFXTlRaWFIwYVc1blZtRnNkV1VvVG5WdFpYSnBZMUJoY21GdFpYUmxjbk11VjJWaVVsUkRUV0Y0UW1sMGNtRjBaU2xjYmlBZ0lDQWdJQ0FnZlR0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG5kbFlsTnZZMnRsZEVOdmJuUnliMnhzWlhJdWMyVnVaRmRsWWxKMFkwRnVjM2RsY2loaGJuTjNaWElzSUdWNGRISmhVR0Z5WVcxektUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVwYzFWemFXNW5VMFpWS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuZGxZbE52WTJ0bGRFTnZiblJ5YjJ4c1pYSXVjMlZ1WkZkbFlsSjBZMFJoZEdGamFHRnVibVZzVW1WeGRXVnpkQ2dwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVjBJSFJvWlNCbWNtVmxlbVVnWm5KaGJXVWdiM1psY214aGVTQjBieUIwYUdVZ2NHeGhlV1Z5SUdScGRseHVJQ0FnSUNBcUwxeHVJQ0FnSUhObGRGVndUVzkxYzJWQmJtUkdjbVZsZW1WR2NtRnRaU2dwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdRMkZzWTNWc1lYUnBibWNnWVc1a0lHNXZjbTFoYkdsNmFXNW5JSEJ2YzJsMGFXOXVjeUJrWlhCbGJtUnpJRzl1SUhSb1pTQjNhV1IwYUNCaGJtUWdhR1ZwWjJoMElHOW1JSFJvWlNCd2JHRjVaWEl1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkbWxrWlc5RmJHVnRaVzUwVUdGeVpXNTBRMnhwWlc1MFVtVmpkQ0E5SUhSb2FYTXVkbWxrWlc5UWJHRjVaWEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDNW5aWFJXYVdSbGIxQmhjbVZ1ZEVWc1pXMWxiblFvS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdMbWRsZEVKdmRXNWthVzVuUTJ4cFpXNTBVbVZqZENncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1OdmIzSmthVzVoZEdWRGIyNTJaWEowWlhJdWMyVjBkWEJPYjNKdFlXeHBlbVZCYm1SUmRXRnVkR2w2WlNncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1aeVpXVjZaVVp5WVcxbFEyOXVkSEp2Ykd4bGNpNW1jbVZsZW1WR2NtRnRaUzV5WlhOcGVtVW9LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJEYkc5elpTQjBhR1VnUTI5dWJtVmpkR2x2YmlCMGJ5QjBhR1VnYzJsbmJtRnNhVzVuSUhObGNuWmxjbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHTnNiM05sVTJsbmJtRnNhVzVuVTJWeWRtVnlLRzFsYzNOaFoyVTZJSE4wY21sdVp5a2dlMXh1SUNBZ0lDQWdJQ0F2THlCWFpTQmxlSEJzYVdOcGRHeDVJR05oYkd4bFpDQmpiRzl6WlN3Z2RHaGxjbVZtYjNKbElIZGxJR1J2YmlkMElIZGhiblFnZEc4Z2RISnBaMmRsY2lCaGRYUnZJSEpsWTI5dWJtVmpkRnh1SUNBZ0lDQWdJQ0IwYUdsekxteHZZMkZzYkhsRGJHOXpaV1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTm9iM1ZzWkZKbFkyOXVibVZqZENBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbVJwYzJOdmJtNWxZM1JOWlhOellXZGxJRDBnYldWemMyRm5aVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTNaV0pUYjJOclpYUkRiMjUwY205c2JHVnlQeTVqYkc5elpTZ3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRU5zYjNObElIUm9aU0J3WldWeUlHTnZibTVsWTNScGIyNWNiaUFnSUNBZ0tpOWNiaUFnSUNCamJHOXpaVkJsWlhKRGIyNXVaV04wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuQmxaWEpEYjI1dVpXTjBhVzl1UTI5dWRISnZiR3hsY2o4dVkyeHZjMlVvS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCRGJHOXpaU0JoYkd3Z1kyOXVibVZqZEdsdmJuTmNiaUFnSUNBZ0tpOWNiaUFnSUNCamJHOXpaU2dwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVqYkc5elpWTnBaMjVoYkdsdVoxTmxjblpsY2lnbkp5azdYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyeHZjMlZRWldWeVEyOXVibVZqZEdsdmJpZ3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRVpwY21WeklHRWdWbWxrWlc4Z1UzUmhkSE1nUlhabGJuUWdhVzRnZEdobElGSlVReUJRWldWeUlFTnZibTVsWTNScGIyNWNiaUFnSUNBZ0tpOWNiaUFnSUNCblpYUlRkR0YwY3lncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1d1pXVnlRMjl1Ym1WamRHbHZia052Ym5SeWIyeHNaWEl1WjJWdVpYSmhkR1ZUZEdGMGN5Z3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sYm1RZ1lTQk1ZWFJsYm1ONUlGUmxjM1FnVW1WeGRXVnpkQ0IwYnlCMGFHVWdWVVVnU1c1emRHRnVZMlZjYmlBZ0lDQWdLaTljYmlBZ0lDQnpaVzVrVEdGMFpXNWplVlJsYzNRb0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJHRjBaVzVqZVZOMFlYSjBWR2x0WlNBOUlFUmhkR1V1Ym05M0tDazdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NXpkSEpsWVcxTlpYTnpZV2RsUTI5dWRISnZiR3hsY2k1MGIxTjBjbVZoYldWeVNHRnVaR3hsY25NdVoyVjBLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0oweGhkR1Z1WTNsVVpYTjBKMXh1SUNBZ0lDQWdJQ0FwS0Z0S1UwOU9Mbk4wY21sdVoybG1lU2g3WEc0Z0lDQWdJQ0FnSUNBZ0lDQlRkR0Z5ZEZScGJXVTZJSFJvYVhNdWJHRjBaVzVqZVZOMFlYSjBWR2x0WlZ4dUlDQWdJQ0FnSUNCOUtWMHBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sYm1RZ1lTQkVZWFJoSUVOb1lXNXVaV3dnVEdGMFpXNWplU0JVWlhOMElGSmxjWFZsYzNRZ2RHOGdkR2hsSUZWRklFbHVjM1JoYm1ObFhHNGdJQ0FnSUNvdlhHNGdJQ0FnYzJWdVpFUmhkR0ZEYUdGdWJtVnNUR0YwWlc1amVWUmxjM1FvWkdWelkzSnBjSFJ2Y2pvZ1JHRjBZVU5vWVc1dVpXeE1ZWFJsYm1ONVZHVnpkRkpsY1hWbGMzUXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpkSEpsWVcxTlpYTnpZV2RsUTI5dWRISnZiR3hsY2k1MGIxTjBjbVZoYldWeVNHRnVaR3hsY25NdVoyVjBLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0owUmhkR0ZEYUdGdWJtVnNUR0YwWlc1amVWUmxjM1FuWEc0Z0lDQWdJQ0FnSUNrb1cwcFRUMDR1YzNSeWFXNW5hV1o1S0dSbGMyTnlhWEIwYjNJcFhTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVMlZ1WkNCMGFHVWdUV2x1VVZBZ1pXNWpiMlJsY2lCelpYUjBhVzVuSUhSdklIUm9aU0JWUlNCSmJuTjBZVzVqWlM1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnYldsdVVWQWdMU0JVYUdVZ2JHOTNaWElnWW05MWJtUWdabTl5SUZGUUlIZG9aVzRnWlc1amIyUnBibWRjYmlBZ0lDQWdLaUIyWVd4cFpDQjJZV3gxWlhNZ1lYSmxJQ2d4TFRVeEtTQjNhR1Z5WlRwY2JpQWdJQ0FnS2lBeElEMGdRbVZ6ZENCeGRXRnNhWFI1SUdKMWRDQm9hV2RvWlhOMElHSnBkSEpoZEdVdVhHNGdJQ0FnSUNvZ05URWdQU0JYYjNKemRDQnhkV0ZzYVhSNUlHSjFkQ0JzYjNkbGMzUWdZbWwwY21GMFpTNWNiaUFnSUNBZ0tpQkNlU0JrWldaaGRXeDBJSFJvWlNCdGFXNVJVQ0JwY3lBeElHMWxZVzVwYm1jZ2RHaGxJR1Z1WTI5a1pYSWdhWE1nWm5KbFpWeHVJQ0FnSUNBcUlIUnZJR0ZwYlNCbWIzSWdkR2hsSUdKbGMzUWdjWFZoYkdsMGVTQnBkQ0JqWVc0Z2IyNGdkR2hsSUdkcGRtVnVJRzVsZEhkdmNtc2diR2x1YXk1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6Wlc1a1JXNWpiMlJsY2sxcGJsRlFLRzFwYmxGUU9pQnVkVzFpWlhJcElIdGNiaUFnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExDQmdUV2x1VVZBOUpIdHRhVzVSVUgxY1hHNWdMQ0EyS1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvYldsdVVWQWdJVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6ZEhKbFlXMU5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpNTBiMU4wY21WaGJXVnlTR0Z1Wkd4bGNuTXVaMlYwS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkRGIyMXRZVzVrSjF4dUlDQWdJQ0FnSUNBZ0lDQWdLU2hiU2xOUFRpNXpkSEpwYm1kcFpua29lMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RGYm1OdlpHVnlMazFwYmxGUUp6b2diV2x1VVZCY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwWFNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaVzVrSUhSb1pTQk5ZWGhSVUNCbGJtTnZaR1Z5SUhObGRIUnBibWNnZEc4Z2RHaGxJRlZGSUVsdWMzUmhibU5sTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0J0WVhoUlVDQXRJRlJvWlNCMWNIQmxjaUJpYjNWdVpDQm1iM0lnVVZBZ2QyaGxiaUJsYm1OdlpHbHVaMXh1SUNBZ0lDQXFJSFpoYkdsa0lIWmhiSFZsY3lCaGNtVWdLREV0TlRFcElIZG9aWEpsT2x4dUlDQWdJQ0FxSURFZ1BTQkNaWE4wSUhGMVlXeHBkSGtnWW5WMElHaHBaMmhsYzNRZ1ltbDBjbUYwWlM1Y2JpQWdJQ0FnS2lBMU1TQTlJRmR2Y25OMElIRjFZV3hwZEhrZ1luVjBJR3h2ZDJWemRDQmlhWFJ5WVhSbExseHVJQ0FnSUNBcUlFSjVJR1JsWm1GMWJIUWdkR2hsSUcxaGVGRlFJR2x6SURVeElHMWxZVzVwYm1jZ2RHaGxJR1Z1WTI5a1pYSWdhWE1nWm5KbFpWeHVJQ0FnSUNBcUlIUnZJR1J5YjNBZ2NYVmhiR2wwZVNCaGN5QnNiM2NnWVhNZ2JtVmxaR1ZrSUc5dUlIUm9aU0JuYVhabGJpQnVaWFIzYjNKcklHeHBibXN1WEc0Z0lDQWdJQ292WEc0Z0lDQWdJSE5sYm1SRmJtTnZaR1Z5VFdGNFVWQW9iV0Y0VVZBNklHNTFiV0psY2lrZ2UxeHVJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc0lHQk5ZWGhSVUQwa2UyMWhlRkZRZlZ4Y2JtQXNJRFlwTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2h0WVhoUlVDQWhQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk4wY21WaGJVMWxjM05oWjJWRGIyNTBjbTlzYkdWeUxuUnZVM1J5WldGdFpYSklZVzVrYkdWeWN5NW5aWFFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjBOdmJXMWhibVFuWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBLRnRLVTA5T0xuTjBjbWx1WjJsbWVTaDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMFZ1WTI5a1pYSXVUV0Y0VVZBbk9pQnRZWGhSVUZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU2xkS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTmxibVFnZEdobElIc2dWMlZpVWxSRExrMXBia0pwZEhKaGRHVTZJRk52YldWT2RXMWlaWElnZlgwZ1kyOXRiV0Z1WkNCMGJ5QlZSU0IwYnlCelpYUWdYRzRnSUNBZ0lDb2dkR2hsSUcxcGJtbHRkVzBnWW1sMGNtRjBaU0IwYUdGMElIZGxJR0ZzYkc5M0lGZGxZbEpVUXlCMGJ5QjFjMlVnWEc0Z0lDQWdJQ29nS0c1dmRHVWdjMlYwZEdsdVp5QjBhR2x6SUhSdmJ5Qm9hV2RvSUdsdUlIQnZiM0lnYm1WMGQyOXlhM01nWTJGdUlHSmxJSEJ5YjJKc1pXMWhkR2xqS1M1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnYldsdVFtbDBjbUYwWlNBdElGUm9aU0J0YVc1cGJYVnRJR0pwZEhKaGRHVWdkMlVnZDI5MWJHUWdiR2xyWlNCWFpXSlNWRU1nZEc4Z2JtOTBJR1poYkd3Z1ltVnNiM2N1WEc0Z0lDQWdJQ292WEc0Z0lDQWdjMlZ1WkZkbFlsSlVRMDFwYmtKcGRISmhkR1VvYldsdVFtbDBjbUYwWlRvZ2JuVnRZbVZ5S1NCN1hHNGdJQ0FnSUNBZ0lFeHZaMmRsY2k1TWIyY29URzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N3Z1lGZGxZbEpVUXlCTmFXNGdRbWwwY21GMFpUMGtlMjFwYmtKcGRISmhkR1Y5WUN3Z05pazdYRzRnSUNBZ0lDQWdJR2xtSUNodGFXNUNhWFJ5WVhSbElDRTlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjM1J5WldGdFRXVnpjMkZuWlVOdmJuUnliMnhzWlhJdWRHOVRkSEpsWVcxbGNraGhibVJzWlhKekxtZGxkQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuUTI5dGJXRnVaQ2RjYmlBZ0lDQWdJQ0FnSUNBZ0lDa29XMHBUVDA0dWMzUnlhVzVuYVdaNUtIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5WMlZpVWxSRExrMXBia0pwZEhKaGRHVW5PaUJ0YVc1Q2FYUnlZWFJsWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVjBwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVnVaQ0IwYUdVZ2V5QlhaV0pTVkVNdVRXRjRRbWwwY21GMFpUb2dVMjl0WlU1MWJXSmxjaUI5ZlNCamIyMXRZVzVrSUhSdklGVkZJSFJ2SUhObGRDQmNiaUFnSUNBZ0tpQjBhR1VnYldsdWFXMTFiU0JpYVhSeVlYUmxJSFJvWVhRZ2QyVWdZV3hzYjNjZ1YyVmlVbFJESUhSdklIVnpaU0JjYmlBZ0lDQWdLaUFvYm05MFpTQnpaWFIwYVc1bklIUm9hWE1nZEc5dklHeHZkeUJqYjNWc1pDQnlaWE4xYkhRZ2FXNGdZbXh2WTJ0NUlIWnBaR1Z2S1M1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnYldsdVFtbDBjbUYwWlNBdElGUm9aU0J0YVc1cGJYVnRJR0pwZEhKaGRHVWdkMlVnZDI5MWJHUWdiR2xyWlNCWFpXSlNWRU1nZEc4Z2JtOTBJR1poYkd3Z1ltVnNiM2N1WEc0Z0lDQWdJQ292WEc0Z0lDQWdJSE5sYm1SWFpXSlNWRU5OWVhoQ2FYUnlZWFJsS0cxaGVFSnBkSEpoZEdVNklHNTFiV0psY2lrZ2UxeHVJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc0lHQlhaV0pTVkVNZ1RXRjRJRUpwZEhKaGRHVTlKSHR0WVhoQ2FYUnlZWFJsZldBc0lEWXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2JXRjRRbWwwY21GMFpTQWhQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk4wY21WaGJVMWxjM05oWjJWRGIyNTBjbTlzYkdWeUxuUnZVM1J5WldGdFpYSklZVzVrYkdWeWN5NW5aWFFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjBOdmJXMWhibVFuWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBLRnRLVTA5T0xuTjBjbWx1WjJsbWVTaDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMWRsWWxKVVF5NU5ZWGhDYVhSeVlYUmxKem9nYldGNFFtbDBjbUYwWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU2xkS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTmxibVFnZEdobElIc2dWMlZpVWxSRExrWndjem9nVTI5dFpVNTFiV0psY2lCOWZTQlZSU0ExTGpBclhHNGdJQ0FnSUNvZ1lXNWtJSHNnVjJWaVVsUkRMazFoZUVad2N5QjlJRlZGSURRdU1qY2dZMjl0YldGdVpDQjBieUJ6WlhRZ1hHNGdJQ0FnSUNvZ2RHaGxJRzFoZUdsdGRXMGdabkJ6SUhkbElIZHZkV3hrSUd4cGEyVWdWMlZpVWxSRElIUnZJSE4wY21WaGJTQmhkQzRnWEc0Z0lDQWdJQ29nUUhCaGNtRnRJR1p3Y3lBdElGUm9aU0J0WVhocGJYVnRJSE4wY21WaGJTQm1jSE11WEc0Z0lDQWdJQ292WEc0Z0lDQWdJSE5sYm1SWFpXSlNWRU5HY0hNb1puQnpPaUJ1ZFcxaVpYSXBJSHRjYmlBZ0lDQWdJQ0FnVEc5bloyVnlMa3h2WnloTWIyZG5aWEl1UjJWMFUzUmhZMnRVY21GalpTZ3BMQ0JnVjJWaVVsUkRJRVpRVXowa2UyWndjMzFnTENBMktUdGNiaUFnSUNBZ0lDQWdhV1lnS0dad2N5QWhQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk4wY21WaGJVMWxjM05oWjJWRGIyNTBjbTlzYkdWeUxuUnZVM1J5WldGdFpYSklZVzVrYkdWeWN5NW5aWFFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjBOdmJXMWhibVFuWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBLRnRLVTA5T0xuTjBjbWx1WjJsbWVTaDdKMWRsWWxKVVF5NUdjSE1uT2lCbWNITjlLVjBwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2S2lCVVQwUlBPaUJTWlcxdmRtVWdkMmhsYmlCVlJTQTBMakkzSUhWdWMzVndjRzl5ZEdWa0xpQXFMMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6ZEhKbFlXMU5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpNTBiMU4wY21WaGJXVnlTR0Z1Wkd4bGNuTXVaMlYwS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkRGIyMXRZVzVrSjF4dUlDQWdJQ0FnSUNBZ0lDQWdLU2hiU2xOUFRpNXpkSEpwYm1kcFpua29leWRYWldKU1ZFTXVUV0Y0Um5Cekp6b2dabkJ6ZlNsZEtUc2dYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJUWlc1a2N5QjBhR1VnVlVrZ1JHVnpZM0pwY0hSdmNpQmdjM1JoZENCbWNITmdJSFJ2SUhSb1pTQlZSU0JKYm5OMFlXNWpaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lITmxibVJUYUc5M1JuQnpLQ2s2SUhadmFXUWdlMXh1SUNBZ0lDQWdJQ0JNYjJkblpYSXVURzluS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2N0TFMwdElDQWdVMlZ1WkdsdVp5QnphRzkzSUhOMFlYUWdkRzhnVlVVZ0lDQXRMUzB0Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJRFpjYmlBZ0lDQWdJQ0FnS1R0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMGNtVmhiVTFsYzNOaFoyVkRiMjUwY205c2JHVnlMblJ2VTNSeVpXRnRaWEpJWVc1a2JHVnljeTVuWlhRb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuUTI5dGJXRnVaQ2RjYmlBZ0lDQWdJQ0FnS1NoYlNsTlBUaTV6ZEhKcGJtZHBabmtvZXlBbmMzUmhkQzVtY0hNbk9pQW5KeUI5S1YwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTmxibVFnWVc0Z1NXWnlZVzFsSUhKbGNYVmxjM1FnZEc4Z2RHaGxJSE4wY21WaGJXVnlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MyVnVaRWxtY21GdFpWSmxjWFZsYzNRb0tUb2dkbTlwWkNCN1hHNGdJQ0FnSUNBZ0lFeHZaMmRsY2k1TWIyY29YRzRnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1UjJWMFUzUmhZMnRVY21GalpTZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0p5MHRMUzBnSUNCVFpXNWthVzVuSUZKbGNYVmxjM1FnWm05eUlHRnVJRWxHY21GdFpTQWdMUzB0TFNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0EyWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzNSeVpXRnRUV1Z6YzJGblpVTnZiblJ5YjJ4c1pYSXVkRzlUZEhKbFlXMWxja2hoYm1Sc1pYSnpMbWRsZENnblNVWnlZVzFsVW1WeGRXVnpkQ2NwS0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVnVaQ0JoSUZWSlNXNTBaWEpoWTNScGIyNGdiV1Z6YzJGblpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUdWdGFYUlZTVWx1ZEdWeVlXTjBhVzl1S0dSbGMyTnlhWEIwYjNJNklHOWlhbVZqZENCOElITjBjbWx1WnlrZ2UxeHVJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRnh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGtkbGRGTjBZV05yVkhKaFkyVW9LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDY3RMUzB0SUNBZ1UyVnVaR2x1WnlCamRYTjBiMjBnVlVsSmJuUmxjbUZqZEdsdmJpQnRaWE56WVdkbElDQWdMUzB0TFNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0EyWEc0Z0lDQWdJQ0FnSUNrN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1emRISmxZVzFOWlhOellXZGxRMjl1ZEhKdmJHeGxjaTUwYjFOMGNtVmhiV1Z5U0dGdVpHeGxjbk11WjJWMEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSjFWSlNXNTBaWEpoWTNScGIyNG5YRzRnSUNBZ0lDQWdJQ2tvVzBwVFQwNHVjM1J5YVc1bmFXWjVLR1JsYzJOeWFYQjBiM0lwWFNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVnVaQ0JoSUVOdmJXMWhibVFnYldWemMyRm5aVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHVnRhWFJEYjIxdFlXNWtLR1JsYzJOeWFYQjBiM0k2SUc5aWFtVmpkQ2tnZTF4dUlDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktGeHVJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNjdExTMHRJQ0FnVTJWdVpHbHVaeUJqZFhOMGIyMGdRMjl0YldGdVpDQnRaWE56WVdkbElDQWdMUzB0TFNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0EyWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMGNtVmhiVTFsYzNOaFoyVkRiMjUwY205c2JHVnlMblJ2VTNSeVpXRnRaWEpJWVc1a2JHVnljeTVuWlhRb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuUTI5dGJXRnVaQ2RjYmlBZ0lDQWdJQ0FnS1NoYlNsTlBUaTV6ZEhKcGJtZHBabmtvWkdWelkzSnBjSFJ2Y2lsZEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaVzVrSUdFZ1kyOXVjMjlzWlNCamIyMXRZVzVrSUcxbGMzTmhaMlZjYmlBZ0lDQWdLaTljYmlBZ0lDQmxiV2wwUTI5dWMyOXNaVU52YlcxaGJtUW9ZMjl0YldGdVpEb2djM1J5YVc1bktTQjdYRzRnSUNBZ0lDQWdJRXh2WjJkbGNpNU1iMmNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdKeTB0TFMwZ0lDQlRaVzVrYVc1bklHTjFjM1J2YlNCRGIyMXRZVzVrT2tOdmJuTnZiR1ZEYjIxdFlXNWtJRzFsYzNOaFoyVWdJQ0F0TFMwdEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSURaY2JpQWdJQ0FnSUNBZ0tUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5TG5SdlUzUnlaV0Z0WlhKSVlXNWtiR1Z5Y3k1blpYUW9YRzRnSUNBZ0lDQWdJQ0FnSUNBblEyOXRiV0Z1WkNkY2JpQWdJQ0FnSUNBZ0tTaGJTbE5QVGk1emRISnBibWRwWm5rb2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnUTI5dWMyOXNaVU52YlcxaGJtUTZJR052YlcxaGJtUXNYRzRnSUNBZ0lDQWdJSDBwWFNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVnVaSE1nWVNCeVpYRjFaWE4wSUhSdklIUm9aU0JWUlNCSmJuTjBZVzVqWlNCMGJ5Qm9ZWFpsSUc5M2JtVnljMmhwY0NCdlppQlJkV0ZzYVhSNVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYzJWdVpGSmxjWFZsYzNSUmRXRnNhWFI1UTI5dWRISnZiRTkzYm1WeWMyaHBjQ2dwT2lCMmIybGtJSHRjYmlBZ0lDQWdJQ0FnVEc5bloyVnlMa3h2WnloY2JpQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuTFMwdExTQWdJRk5sYm1ScGJtY2dVbVZ4ZFdWemRDQjBieUJEYjI1MGNtOXNJRkYxWVd4cGRIa2dJQzB0TFMwbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnTmx4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5SdlUzUnlaV0Z0WlhKTlpYTnpZV2RsYzBOdmJuUnliMnhzWlhJdVUyVnVaRkpsY1hWbGMzUlJkV0ZzYVhSNVEyOXVkSEp2YkNncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFaGhibVJzWlhNZ2QyaGxiaUJoSUV4aGRHVnVZM2tnVkdWemRDQlNaWE4xYkhRZ1lYSmxJSEpsWTJWcGRtVmtJR1p5YjIwZ2RHaGxJRlZGSUVsdWMzUmhibU5sWEc0Z0lDQWdJQ29nUUhCaGNtRnRJRzFsYzNOaFoyVWdMU0JNWVhSbGJtTjVJRlJsYzNRZ1ZHbHRhVzVuYzF4dUlDQWdJQ0FxTDF4dUlDQWdJR2hoYm1Sc1pVeGhkR1Z1WTNsVVpYTjBVbVZ6ZFd4MEtHMWxjM05oWjJVNklFRnljbUY1UW5WbVptVnlLU0I3WEc0Z0lDQWdJQ0FnSUV4dloyZGxjaTVNYjJjb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSjBSaGRHRkRhR0Z1Ym1Wc1VtVmpaV2wyWlUxbGMzTmhaMlZVZVhCbExteGhkR1Z1WTNsVVpYTjBKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lEWmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdiR0YwWlc1amVVRnpVM1J5YVc1bklEMGdibVYzSUZSbGVIUkVaV052WkdWeUtDZDFkR1l0TVRZbktTNWtaV052WkdVb1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0WlhOellXZGxMbk5zYVdObEtERXBYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR3hoZEdWdVkzbFVaWE4wVW1WemRXeDBjem9nVEdGMFpXNWplVlJsYzNSU1pYTjFiSFJ6SUQwZ2JtVjNJRXhoZEdWdVkzbFVaWE4wVW1WemRXeDBjeWdwTzF4dUlDQWdJQ0FnSUNCUFltcGxZM1F1WVhOemFXZHVLR3hoZEdWdVkzbFVaWE4wVW1WemRXeDBjeXdnU2xOUFRpNXdZWEp6WlNoc1lYUmxibU41UVhOVGRISnBibWNwS1R0Y2JpQWdJQ0FnSUNBZ2JHRjBaVzVqZVZSbGMzUlNaWE4xYkhSekxuQnliMk5sYzNOR2FXVnNaSE1vS1R0Y2JseHVJQ0FnSUNBZ0lDQnNZWFJsYm1ONVZHVnpkRkpsYzNWc2RITXVkR1Z6ZEZOMFlYSjBWR2x0WlUxeklEMGdkR2hwY3k1c1lYUmxibU41VTNSaGNuUlVhVzFsTzF4dUlDQWdJQ0FnSUNCc1lYUmxibU41VkdWemRGSmxjM1ZzZEhNdVluSnZkM05sY2xKbFkyVnBjSFJVYVcxbFRYTWdQU0JFWVhSbExtNXZkeWdwTzF4dVhHNGdJQ0FnSUNBZ0lHeGhkR1Z1WTNsVVpYTjBVbVZ6ZFd4MGN5NXNZWFJsYm1ONVJYaGpiSFZrYVc1blJHVmpiMlJsSUQwZ2ZuNG9YRzRnSUNBZ0lDQWdJQ0FnSUNCc1lYUmxibU41VkdWemRGSmxjM1ZzZEhNdVluSnZkM05sY2xKbFkyVnBjSFJVYVcxbFRYTWdMVnh1SUNBZ0lDQWdJQ0FnSUNBZ2JHRjBaVzVqZVZSbGMzUlNaWE4xYkhSekxuUmxjM1JUZEdGeWRGUnBiV1ZOYzF4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQnNZWFJsYm1ONVZHVnpkRkpsYzNWc2RITXVkR1Z6ZEVSMWNtRjBhVzl1SUQwZ2ZuNG9YRzRnSUNBZ0lDQWdJQ0FnSUNCc1lYUmxibU41VkdWemRGSmxjM1ZzZEhNdVZISmhibk50YVhOemFXOXVWR2x0WlUxeklDMWNiaUFnSUNBZ0lDQWdJQ0FnSUd4aGRHVnVZM2xVWlhOMFVtVnpkV3gwY3k1U1pXTmxhWEIwVkdsdFpVMXpYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUd4aGRHVnVZM2xVWlhOMFVtVnpkV3gwY3k1dVpYUjNiM0pyVEdGMFpXNWplU0E5SUg1K0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdGMFpXNWplVlJsYzNSU1pYTjFiSFJ6TG14aGRHVnVZM2xGZUdOc2RXUnBibWRFWldOdlpHVWdMVnh1SUNBZ0lDQWdJQ0FnSUNBZ2JHRjBaVzVqZVZSbGMzUlNaWE4xYkhSekxuUmxjM1JFZFhKaGRHbHZibHh1SUNBZ0lDQWdJQ0FwTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGhkR1Z1WTNsVVpYTjBVbVZ6ZFd4MGN5NW1jbUZ0WlVScGMzQnNZWGxFWld4MFlWUnBiV1ZOY3lBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnYkdGMFpXNWplVlJsYzNSU1pYTjFiSFJ6TG1KeWIzZHpaWEpTWldObGFYQjBWR2x0WlUxelhHNGdJQ0FnSUNBZ0lDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHRjBaVzVqZVZSbGMzUlNaWE4xYkhSekxtVnVaRlJ2Ulc1a1RHRjBaVzVqZVNBOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZuNG9iR0YwWlc1amVWUmxjM1JTWlhOMWJIUnpMbVp5WVcxbFJHbHpjR3hoZVVSbGJIUmhWR2x0WlUxeklDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdGMFpXNWplVlJsYzNSU1pYTjFiSFJ6TG01bGRIZHZjbXRNWVhSbGJtTjVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ3RzWVhSbGJtTjVWR1Z6ZEZKbGMzVnNkSE11UTJGd2RIVnlaVlJ2VTJWdVpFMXpLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMGFHbHpMbkJwZUdWc1UzUnlaV0Z0YVc1bkxsOXZia3hoZEdWdVkzbFVaWE4wVW1WemRXeDBLR3hoZEdWdVkzbFVaWE4wVW1WemRXeDBjeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nU0dGdVpHeGxjeUIzYUdWdUlHRWdSR0YwWVNCRGFHRnVibVZzSUV4aGRHVnVZM2tnVkdWemRDQlNaWE53YjI1elpTQnBjeUJ5WldObGFYWmxaQ0JtY205dElIUm9aU0JWUlNCSmJuTjBZVzVqWlZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0J0WlhOellXZGxJQzBnUkdGMFlTQkRhR0Z1Ym1Wc0lFeGhkR1Z1WTNrZ1ZHVnpkQ0JTWlhOd2IyNXpaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHaGhibVJzWlVSaGRHRkRhR0Z1Ym1Wc1RHRjBaVzVqZVZSbGMzUlNaWE53YjI1elpTaHRaWE56WVdkbE9pQkJjbkpoZVVKMVptWmxjaWtnZTF4dUlDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktGeHVJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNkRVlYUmhRMmhoYm01bGJGSmxZMlZwZG1WTlpYTnpZV2RsVkhsd1pTNWtZWFJoUTJoaGJtNWxiRXhoZEdWdVkzbFNaWE53YjI1elpTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBMlhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJR052Ym5OMElISmxjM0J2Ym5ObFFYTlRkSEpwYm1jZ1BTQnVaWGNnVkdWNGRFUmxZMjlrWlhJb0ozVjBaaTB4TmljcExtUmxZMjlrWlNoY2JpQWdJQ0FnSUNBZ0lDQWdJRzFsYzNOaFoyVXVjMnhwWTJVb01TbGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdiR0YwWlc1amVWUmxjM1JTWlhOd2IyNXpaVG9nUkdGMFlVTm9ZVzV1Wld4TVlYUmxibU41VkdWemRGSmxjM0J2Ym5ObElEMGdTbE5QVGk1d1lYSnpaU2h5WlhOd2IyNXpaVUZ6VTNSeWFXNW5LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXdhWGhsYkZOMGNtVmhiV2x1Wnk1ZmIyNUVZWFJoUTJoaGJtNWxiRXhoZEdWdVkzbFVaWE4wVW1WemNHOXVjMlVvYkdGMFpXNWplVlJsYzNSU1pYTndiMjV6WlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1NHRnVaR3hsY3lCM2FHVnVJSFJvWlNCRmJtTnZaR1Z5SUdGdVpDQlhaV0lnVWxSRElGTmxkSFJwYm1keklHRnlaU0J5WldObGFYWmxaQ0JtY205dElIUm9aU0JWUlNCSmJuTjBZVzVqWlZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0J0WlhOellXZGxJQzBnU1c1cGRHbGhiQ0JGYm1OdlpHVnlJR0Z1WkNCWFpXSWdVbFJESUZObGRIUnBibWR6WEc0Z0lDQWdJQ292WEc0Z0lDQWdhR0Z1Wkd4bFNXNXBkR2xoYkZObGRIUnBibWR6S0cxbGMzTmhaMlU2SUVGeWNtRjVRblZtWm1WeUtTQjdYRzRnSUNBZ0lDQWdJRXh2WjJkbGNpNU1iMmNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdKMFJoZEdGRGFHRnVibVZzVW1WalpXbDJaVTFsYzNOaFoyVlVlWEJsTGtsdWFYUnBZV3hUWlhSMGFXNW5jeWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQTJYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSEJoZVd4dllXUkJjMU4wY21sdVp5QTlJRzVsZHlCVVpYaDBSR1ZqYjJSbGNpZ25kWFJtTFRFMkp5a3VaR1ZqYjJSbEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aUzV6YkdsalpTZ3hLVnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J3WVhKelpXUkpibWwwYVdGc1UyVjBkR2x1WjNNZ1BTQktVMDlPTG5CaGNuTmxLSEJoZVd4dllXUkJjMU4wY21sdVp5azdYRzVjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdhVzVwZEdsaGJGTmxkSFJwYm1kek9pQkpibWwwYVdGc1UyVjBkR2x1WjNNZ1BTQnVaWGNnU1c1cGRHbGhiRk5sZEhScGJtZHpLQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSEJoY25ObFpFbHVhWFJwWVd4VFpYUjBhVzVuY3k1RmJtTnZaR1Z5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwYm1sMGFXRnNVMlYwZEdsdVozTXVSVzVqYjJSbGNsTmxkSFJwYm1keklEMGdjR0Z5YzJWa1NXNXBkR2xoYkZObGRIUnBibWR6TGtWdVkyOWtaWEk3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnBaaUFvY0dGeWMyVmtTVzVwZEdsaGJGTmxkSFJwYm1kekxsZGxZbEpVUXlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVc1cGRHbGhiRk5sZEhScGJtZHpMbGRsWWxKVVExTmxkSFJwYm1keklEMGdjR0Z5YzJWa1NXNXBkR2xoYkZObGRIUnBibWR6TGxkbFlsSlVRenRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2h3WVhKelpXUkpibWwwYVdGc1UyVjBkR2x1WjNNdVVHbDRaV3hUZEhKbFlXMXBibWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2x1YVhScFlXeFRaWFIwYVc1bmN5NVFhWGhsYkZOMGNtVmhiV2x1WjFObGRIUnBibWR6SUQxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lYSnpaV1JKYm1sMGFXRnNVMlYwZEdsdVozTXVVR2w0Wld4VGRISmxZVzFwYm1jN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JwWmlBb2NHRnljMlZrU1c1cGRHbGhiRk5sZEhScGJtZHpMa052Ym1acFowOXdkR2x2Ym5NZ0ppWWdjR0Z5YzJWa1NXNXBkR2xoYkZObGRIUnBibWR6TGtOdmJtWnBaMDl3ZEdsdmJuTXVSR1ZtWVhWc2RGUnZTRzkyWlhJZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amIyNW1hV2N1YzJWMFJteGhaMFZ1WVdKc1pXUW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdSbXhoWjNNdVNHOTJaWEpwYm1kTmIzVnpaVTF2WkdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lTRndZWEp6WldSSmJtbDBhV0ZzVTJWMGRHbHVaM011UTI5dVptbG5UM0IwYVc5dWN5NUVaV1poZFd4MFZHOUliM1psY2x4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHbHVhWFJwWVd4VFpYUjBhVzVuY3k1MVpVTnZiWEJoZEdsaWJHVW9LVHRjYmlBZ0lDQWdJQ0FnVEc5bloyVnlMa3h2WnloTWIyZG5aWEl1UjJWMFUzUmhZMnRVY21GalpTZ3BMQ0J3WVhsc2IyRmtRWE5UZEhKcGJtY3NJRFlwTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11Y0dsNFpXeFRkSEpsWVcxcGJtY3VYMjl1U1c1cGRHbGhiRk5sZEhScGJtZHpLR2x1YVhScFlXeFRaWFIwYVc1bmN5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dTR0Z1Wkd4bGN5QjNhR1Z1SUhSb1pTQlJkV0Z1ZEdsNllYUnBiMjRnVUdGeVlXMWxkR1Z5SUdGeVpTQnlaV05sYVhabFpDQm1jbTl0SUhSb1pTQlZSU0JKYm5OMFlXNWpaVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnRaWE56WVdkbElDMGdSVzVqYjJSbGNuTWdVWFZoYm5ScGVtRjBhVzl1SUZCaGNtRnRaWFJsY2x4dUlDQWdJQ0FxTDF4dUlDQWdJR2hoYm1Sc1pWWnBaR1Z2Ulc1amIyUmxja0YyWjFGUUtHMWxjM05oWjJVNklFRnljbUY1UW5WbVptVnlLU0I3WEc0Z0lDQWdJQ0FnSUV4dloyZGxjaTVNYjJjb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSjBSaGRHRkRhR0Z1Ym1Wc1VtVmpaV2wyWlUxbGMzTmhaMlZVZVhCbExsWnBaR1Z2Ulc1amIyUmxja0YyWjFGUUp5eGNiaUFnSUNBZ0lDQWdJQ0FnSURaY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1FYWm5VVkFnUFNCT2RXMWlaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQnVaWGNnVkdWNGRFUmxZMjlrWlhJb0ozVjBaaTB4TmljcExtUmxZMjlrWlNodFpYTnpZV2RsTG5Oc2FXTmxLREVwS1Z4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRGWnBaR1Z2Ulc1amIyUmxja0YyWjFGUUtFRjJaMUZRS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSVlXNWtiR1Z6SUhkb1pXNGdkR2hsSUhacFpHVnZJR1ZzWlcxbGJuUWdhR0Z6SUdKbFpXNGdiRzloWkdWa0lIZHBkR2dnWVNCemNtTlBZbXBsWTNSY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JvWVc1a2JHVldhV1JsYjBsdWFYUnBZV3hwZW1Wa0tDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuQnBlR1ZzVTNSeVpXRnRhVzVuTGw5dmJsWnBaR1Z2U1c1cGRHbGhiR2w2WldRb0tUdGNibHh1SUNBZ0lDQWdJQ0F2THlCbGFYUm9aWElnWVhWMGIzQnNZWGtnZEdobElIWnBaR1Z2SUc5eUlITmxkQ0IxY0NCMGFHVWdjR3hoZVNCdmRtVnliR0Y1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZWFYwYjFCc1lYbFdhV1JsYjA5eVUyVjBWWEJRYkdGNVQzWmxjbXhoZVNncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5KbGMybDZaVkJzWVhsbGNsTjBlV3hsS0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZG1sa1pXOVFiR0Y1WlhJdWRYQmtZWFJsVm1sa1pXOVRkSEpsWVcxVGFYcGxLQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUm14aFp5QnpaWFFnYVdZZ2RHaGxJSFZ6WlhJZ2FHRnpJRkYxWVd4cGRIa2dUM2R1WlhKemFHbHdYRzRnSUNBZ0lDb2dRSEJoY21GdElHMWxjM05oWjJVZ0xTQkViMlZ6SUhSb1pTQmpkWEp5Wlc1MElHTnNhV1Z1ZENCb1lYWmxJRkYxWVd4cGRIa2dUM2R1WlhKemFHbHdYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2IyNVJkV0ZzYVhSNVEyOXVkSEp2YkU5M2JtVnljMmhwY0NodFpYTnpZV2RsT2lCQmNuSmhlVUoxWm1abGNpa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjJhV1YzSUQwZ2JtVjNJRlZwYm5RNFFYSnlZWGtvYldWemMyRm5aU2s3WEc0Z0lDQWdJQ0FnSUV4dloyZGxjaTVNYjJjb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSjBSaGRHRkRhR0Z1Ym1Wc1VtVmpaV2wyWlUxbGMzTmhaMlZVZVhCbExsRjFZV3hwZEhsRGIyNTBjbTlzVDNkdVpYSnphR2x3Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJRFpjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVwYzFGMVlXeHBkSGxEYjI1MGNtOXNiR1Z5SUQwZ2JtVjNJRUp2YjJ4bFlXNG9kbWxsZDFzeFhTa3VkbUZzZFdWUFppZ3BPMXh1SUNBZ0lDQWdJQ0JNYjJkblpYSXVURzluS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJR0JTWldObGFYWmxaQ0J4ZFdGc2FYUjVJR052Ym5SeWIyeHNaWElnYldWemMyRm5aU3dnZDJsc2JDQmpiMjUwY205c0lIRjFZV3hwZEhrNklDUjdkR2hwY3k1cGMxRjFZV3hwZEhsRGIyNTBjbTlzYkdWeWZXQmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXdhWGhsYkZOMGNtVmhiV2x1Wnk1ZmIyNVJkV0ZzYVhSNVEyOXVkSEp2YkU5M2JtVnljMmhwY0NoY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFYTlJkV0ZzYVhSNVEyOXVkSEp2Ykd4bGNseHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWhoYm1Sc1pYTWdkMmhsYmlCMGFHVWdRV2RuY21WbllYUmxaQ0J6ZEdGMGN5QmhjbVVnUTI5c2JHVmpkR1ZrWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSE4wWVhSeklDMGdRV2RuY21WbllYUmxaQ0JUZEdGMGMxeHVJQ0FnSUNBcUwxeHVJQ0FnSUdoaGJtUnNaVlpwWkdWdlUzUmhkSE1vYzNSaGRITTZJRUZuWjNKbFoyRjBaV1JUZEdGMGN5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuQnBlR1ZzVTNSeVpXRnRhVzVuTGw5dmJsWnBaR1Z2VTNSaGRITW9jM1JoZEhNcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGUnZJRkpsYzJsNlpTQjBhR1VnVm1sa1pXOGdVR3hoZVdWeUlHVnNaVzFsYm5SY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J5WlhOcGVtVlFiR0Y1WlhKVGRIbHNaU2dwT2lCMmIybGtJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTJhV1JsYjFCc1lYbGxjaTV5WlhOcGVtVlFiR0Y1WlhKVGRIbHNaU2dwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSE5sZEZCeVpXWmxjbkpsWkVOdlpHVmpLR052WkdWak9pQnpkSEpwYm1jcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1d2NtVm1aWEp5WldSRGIyUmxZeUE5SUdOdlpHVmpPMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV3WldWeVEyOXVibVZqZEdsdmJrTnZiblJ5YjJ4c1pYSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y0dWbGNrTnZibTVsWTNScGIyNURiMjUwY205c2JHVnlMbkJ5WldabGNuSmxaRU52WkdWaklEMGdZMjlrWldNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQmxaWEpEYjI1dVpXTjBhVzl1UTI5dWRISnZiR3hsY2k1MWNHUmhkR1ZEYjJSbFkxTmxiR1ZqZEdsdmJpQTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2MyVjBWbWxrWlc5RmJtTnZaR1Z5UVhablVWQW9ZWFpuVVZBNklHNTFiV0psY2lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5acFpHVnZRWFpuVVhBZ1BTQmhkbWRSVUR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV3YVhobGJGTjBjbVZoYldsdVp5NWZiMjVXYVdSbGIwVnVZMjlrWlhKQmRtZFJVQ2gwYUdsekxuWnBaR1Z2UVhablVYQXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJR1Z1WVdKc1pYTXZaR2x6WVdKc1pYTWdhMlY1WW05aGNtUWdaWFpsYm5RZ2JHbHpkR1Z1WlhKelhHNGdJQ0FnSUNvdlhHNGdJQ0FnYzJWMFMyVjVZbTloY21SSmJuQjFkRVZ1WVdKc1pXUW9hWE5GYm1GaWJHVmtPaUJpYjI5c1pXRnVLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhMlY1WW05aGNtUkRiMjUwY205c2JHVnlQeTUxYm5KbFoybHpkR1Z5UzJWNVFtOWhjbVJGZG1WdWRITW9LVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHbHpSVzVoWW14bFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVyWlhsaWIyRnlaRU52Ym5SeWIyeHNaWElnUFNCMGFHbHpMbWx1Y0hWMFEyeGhjM05sYzBaaFkzUnZjbmt1Y21WbmFYTjBaWEpMWlhsQ2IyRnlaQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTnZibVpwWjF4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUdWdVlXSnNaWE12WkdsellXSnNaWE1nYlc5MWMyVWdaWFpsYm5RZ2JHbHpkR1Z1WlhKelhHNGdJQ0FnSUNvdlhHNGdJQ0FnYzJWMFRXOTFjMlZKYm5CMWRFVnVZV0pzWldRb2FYTkZibUZpYkdWa09pQmliMjlzWldGdUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJXOTFjMlZEYjI1MGNtOXNiR1Z5UHk1MWJuSmxaMmx6ZEdWeVRXOTFjMlZGZG1WdWRITW9LVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHbHpSVzVoWW14bFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYlc5MWMyVk5iMlJsSUQwZ2RHaHBjeTVqYjI1bWFXY3VhWE5HYkdGblJXNWhZbXhsWkNoR2JHRm5jeTVJYjNabGNtbHVaMDF2ZFhObFRXOWtaU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lEOGdRMjl1ZEhKdmJGTmphR1Z0WlZSNWNHVXVTRzkyWlhKcGJtZE5iM1Z6WlZ4dUlDQWdJQ0FnSUNBZ0lDQWdPaUJEYjI1MGNtOXNVMk5vWlcxbFZIbHdaUzVNYjJOclpXUk5iM1Z6WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJXOTFjMlZEYjI1MGNtOXNiR1Z5SUQxY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFXNXdkWFJEYkdGemMyVnpSbUZqZEc5eWVTNXlaV2RwYzNSbGNrMXZkWE5sS0cxdmRYTmxUVzlrWlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQmxibUZpYkdWekwyUnBjMkZpYkdWeklIUnZkV05vSUdWMlpXNTBJR3hwYzNSbGJtVnljMXh1SUNBZ0lDQXFMMXh1SUNBZ0lITmxkRlJ2ZFdOb1NXNXdkWFJGYm1GaWJHVmtLR2x6Ulc1aFlteGxaRG9nWW05dmJHVmhiaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMblJ2ZFdOb1EyOXVkSEp2Ykd4bGNqOHVkVzV5WldkcGMzUmxjbFJ2ZFdOb1JYWmxiblJ6S0NrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hwYzBWdVlXSnNaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRHOTFZMmhEYjI1MGNtOXNiR1Z5SUQwZ2RHaHBjeTVwYm5CMWRFTnNZWE56WlhOR1lXTjBiM0o1TG5KbFoybHpkR1Z5Vkc5MVkyZ29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amIyNW1hV2N1YVhOR2JHRm5SVzVoWW14bFpDaEdiR0ZuY3k1R1lXdGxUVzkxYzJWWGFYUm9WRzkxWTJobGN5a3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MmFXUmxiMFZzWlcxbGJuUlFZWEpsYm5SRGJHbGxiblJTWldOMFhHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1pXNWhZbXhsY3k5a2FYTmhZbXhsY3lCbllXMWxJSEJoWkNCbGRtVnVkQ0JzYVhOMFpXNWxjbk5jYmlBZ0lDQWdLaTljYmlBZ0lDQnpaWFJIWVcxbFVHRmtTVzV3ZFhSRmJtRmliR1ZrS0dselJXNWhZbXhsWkRvZ1ltOXZiR1ZoYmlrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1kaGJXVlFZV1JEYjI1MGNtOXNiR1Z5UHk1MWJuSmxaMmx6ZEdWeVIyRnRaVkJoWkVWMlpXNTBjeWdwTzF4dUlDQWdJQ0FnSUNCcFppQW9hWE5GYm1GaWJHVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1kaGJXVlFZV1JEYjI1MGNtOXNiR1Z5SUQwZ2RHaHBjeTVwYm5CMWRFTnNZWE56WlhOR1lXTjBiM0o1TG5KbFoybHpkR1Z5UjJGdFpWQmhaQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bllXMWxVR0ZrUTI5dWRISnZiR3hsY2k1dmJrZGhiV1Z3WVdSRGIyNXVaV04wWldRZ1BTQW9LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6ZEhKbFlXMU5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpNTBiMU4wY21WaGJXVnlTR0Z1Wkd4bGNuTXVaMlYwS0NkSFlXMWxjR0ZrUTI5dWJtVmpkR1ZrSnlrb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVoyRnRaVkJoWkVOdmJuUnliMnhzWlhJdWIyNUhZVzFsY0dGa1JHbHpZMjl1Ym1WamRHVmtJRDBnS0dOdmJuUnliMnhzWlhKSlpIZzZJRzUxYldKbGNpa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjM1J5WldGdFRXVnpjMkZuWlVOdmJuUnliMnhzWlhJdWRHOVRkSEpsWVcxbGNraGhibVJzWlhKekxtZGxkQ2duUjJGdFpYQmhaRVJwYzJOdmJtNWxZM1JsWkNjcEtGdGpiMjUwY205c2JHVnlTV1I0WFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WldkcGMzUmxja1JoZEdGRGFHRnVibVZzUlhabGJuUkZiV2wwZEdWeWN5aGtZWFJoUTJoaGJtNWxiRG9nUkdGMFlVTm9ZVzV1Wld4RGIyNTBjbTlzYkdWeUtTQjdYRzRnSUNBZ0lDQWdJR1JoZEdGRGFHRnVibVZzTG05dVQzQmxiaUE5SUNoc1lXSmxiQ3dnWlhabGJuUXBJRDArWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CcGVHVnNVM1J5WldGdGFXNW5MbVJwYzNCaGRHTm9SWFpsYm5Rb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtVjNJRVJoZEdGRGFHRnVibVZzVDNCbGJrVjJaVzUwS0hzZ2JHRmlaV3dzSUdWMlpXNTBJSDBwWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0JrWVhSaFEyaGhibTVsYkM1dmJrTnNiM05sSUQwZ0tHeGhZbVZzTENCbGRtVnVkQ2tnUFQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNHbDRaV3hUZEhKbFlXMXBibWN1WkdsemNHRjBZMmhGZG1WdWRDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVaWGNnUkdGMFlVTm9ZVzV1Wld4RGJHOXpaVVYyWlc1MEtIc2diR0ZpWld3c0lHVjJaVzUwSUgwcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCa1lYUmhRMmhoYm01bGJDNXZia1Z5Y205eUlEMGdLR3hoWW1Wc0xDQmxkbVZ1ZENrZ1BUNWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjR2w0Wld4VGRISmxZVzFwYm1jdVpHbHpjR0YwWTJoRmRtVnVkQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WlhjZ1JHRjBZVU5vWVc1dVpXeEZjbkp2Y2tWMlpXNTBLSHNnYkdGaVpXd3NJR1YyWlc1MElIMHBYRzRnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhCMVlteHBZeUJ5WldkcGMzUmxjazFsYzNOaFoyVklZVzVrYkdWeUtHNWhiV1U2SUhOMGNtbHVaeXdnWkdseVpXTjBhVzl1T2lCTlpYTnpZV2RsUkdseVpXTjBhVzl1TENCb1lXNWtiR1Z5UHpvZ0tHUmhkR0U2SUVGeWNtRjVRblZtWm1WeUlId2dRWEp5WVhrOGJuVnRZbVZ5SUh3Z2MzUnlhVzVuUGlrZ1BUNGdkbTlwWkNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaWhrYVhKbFkzUnBiMjRnUFQwOUlFMWxjM05oWjJWRWFYSmxZM1JwYjI0dVJuSnZiVk4wY21WaGJXVnlJQ1ltSUhSNWNHVnZaaUJvWVc1a2JHVnlJRDA5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGxkaGNtNXBibWNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmdWVzVoWW14bElIUnZJSEpsWjJsemRHVnlJR2hoYm1Sc1pYSWdabTl5SUNSN2JtRnRaWDBnWVhNZ2JtOGdhR0Z1Wkd4bGNpQjNZWE1nY0dGemMyVmtZRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNCMGFHbHpMbk4wY21WaGJVMWxjM05oWjJWRGIyNTBjbTlzYkdWeUxuSmxaMmx6ZEdWeVRXVnpjMkZuWlVoaGJtUnNaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQmthWEpsWTNScGIyNHNYRzRnSUNBZ0lDQWdJQ0FnSUNCdVlXMWxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tHUmhkR0U2SUVGeWNtRjVQRzUxYldKbGNpQjhJSE4wY21sdVp6NHBJRDArSUNoMGVYQmxiMllnYUdGdVpHeGxjaUE5UFQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVlnWkdseVpXTjBhVzl1SUQwOVBTQk5aWE56WVdkbFJHbHlaV04wYVc5dUxsUnZVM1J5WldGdFpYSXBJRDhnWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaVzVrVFdWemMyRm5aVU52Ym5SeWIyeHNaWEl1YzJWdVpFMWxjM05oWjJWVWIxTjBjbVZoYldWeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WVcxbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tTQTZJQ0FnWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYUdGdVpHeGxjaWhrWVhSaEtWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lIMWNibjFjYmlJc0lpOHZJRU52Y0hseWFXZG9kQ0JGY0dsaklFZGhiV1Z6TENCSmJtTXVJRUZzYkNCU2FXZG9kSE1nVW1WelpYSjJaV1F1WEc1Y2JpOHFLbHh1SUNvZ1ZHaGxJRlI1Y0dWeklHOW1JRTFsYzNOaFoyVnpJSFJvWVhRZ2QybHNiQ0JpWlNCeVpXTmxhWFpsWkZ4dUlDb3ZYRzVsZUhCdmNuUWdaVzUxYlNCTlpYTnpZV2RsVW1WamRsUjVjR1Z6SUh0Y2JpQWdJQ0JEVDA1R1NVY2dQU0FuWTI5dVptbG5KeXhjYmlBZ0lDQlRWRkpGUVUxRlVsOU1TVk5VSUQwZ0ozTjBjbVZoYldWeVRHbHpkQ2NzWEc0Z0lDQWdVMVJTUlVGTlJWSmZTVVJmUTBoQlRrZEZSQ0E5SUNkemRISmxZVzFsY2tsRVEyaGhibWRsWkNjc1hHNGdJQ0FnVUV4QldVVlNYME5QVlU1VUlEMGdKM0JzWVhsbGNrTnZkVzUwSnl4Y2JpQWdJQ0JQUmtaRlVpQTlJQ2R2Wm1abGNpY3NYRzRnSUNBZ1FVNVRWMFZTSUQwZ0oyRnVjM2RsY2ljc1hHNGdJQ0FnU1VORlgwTkJUa1JKUkVGVVJTQTlJQ2RwWTJWRFlXNWthV1JoZEdVbkxGeHVJQ0FnSUZCRlJWSmZSRUZVUVY5RFNFRk9Ua1ZNVXlBOUlDZHdaV1Z5UkdGMFlVTm9ZVzV1Wld4ekp5eGNiaUFnSUNCUVNVNUhJRDBnSjNCcGJtY25MRnh1SUNBZ0lGZEJVazVKVGtjZ1BTQW5kMkZ5Ym1sdVp5ZGNibjFjYmx4dUx5b3FYRzRnS2lCRGIyNWpjbVYwWlNCU1pXTmxhWFpsWkNCTlpYTnpZV2RsSUhkeVlYQndaWEpjYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUUxbGMzTmhaMlZTWldOMklIdGNiaUFnSUNCMGVYQmxPaUJ6ZEhKcGJtYzdYRzRnSUNBZ2FXUTZJSE4wY21sdVp6dGNibjFjYmx4dUx5b3FYRzRnS2lCQmRYUm9aVzUwYVdOaGRHbHZiaUJTWlhGMWFYSmxaQ0JOWlhOellXZGxJSGR5WVhCd1pYSmNiaUFxTDF4dVpYaHdiM0owSUdOc1lYTnpJRTFsYzNOaFoyVkJkWFJvVW1WeGRXbHlaV1FnWlhoMFpXNWtjeUJOWlhOellXZGxVbVZqZGlCN2ZWeHVYRzR2S2lwY2JpQXFJRU52Ym1acFp5Qk5aWE56WVdkbElGZHlZWEJ3WlhKY2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklFMWxjM05oWjJWRGIyNW1hV2NnWlhoMFpXNWtjeUJOWlhOellXZGxVbVZqZGlCN1hHNGdJQ0FnY0dWbGNrTnZibTVsWTNScGIyNVBjSFJwYjI1ek9pQlNWRU5EYjI1bWFXZDFjbUYwYVc5dU8xeHVmVnh1WEc0dktpcGNiaUFxSUZOMGNtVmhiV1Z5SUV4cGMzUWdUV1Z6YzJGblpTQlhjbUZ3Y0dWeVhHNGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5Qk5aWE56WVdkbFUzUnlaV0Z0WlhKTWFYTjBJR1Y0ZEdWdVpITWdUV1Z6YzJGblpWSmxZM1lnZTF4dUlDQWdJR2xrY3pvZ2MzUnlhVzVuVzEwN1hHNTlYRzVjYmk4cUtseHVJQ29nVTNSeVpXRnRaWElnU1VRZ1EyaGhibWRsWkNCTlpYTnpZV2RsSUZkeVlYQndaWEpjYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUUxbGMzTmhaMlZUZEhKbFlXMWxja2xFUTJoaGJtZGxaQ0JsZUhSbGJtUnpJRTFsYzNOaFoyVlNaV04ySUh0Y2JpQWdJQ0J1WlhkSlJEb2djM1J5YVc1bk8xeHVmVnh1WEc0dktpcGNiaUFxSUZCc1lYbGxjaUJEYjNWdWRDQk5aWE56WVdkbElIZHlZWEJ3WlhKY2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklFMWxjM05oWjJWUWJHRjVaWEpEYjNWdWRDQmxlSFJsYm1SeklFMWxjM05oWjJWU1pXTjJJSHRjYmlBZ0lDQmpiM1Z1ZERvZ2JuVnRZbVZ5TzF4dWZWeHVYRzR2S2lwY2JpQXFJRmRsWWlCU1ZFTWdiMlptWlhJZ1FXNXpkMlZ5SUUxbGMzTmhaMlVnZDNKaGNIQmxjbHh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nVFdWemMyRm5aVUZ1YzNkbGNpQmxlSFJsYm1SeklFMWxjM05oWjJWU1pXTjJJSHRjYmlBZ0lDQnpaSEE2SUhOMGNtbHVaenRjYm4xY2JseHVMeW9xWEc0Z0tpQlhaV0pTVkVNZ2MyUndJRzltWm1WeUlFMWxjM05oWjJVZ2QzSmhjSEJsY2k1Y2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklFMWxjM05oWjJWUFptWmxjaUJsZUhSbGJtUnpJRTFsYzNOaFoyVlNaV04ySUh0Y2JpQWdJQ0J6WkhBNklITjBjbWx1Wnp0Y2JpQWdJQ0J6Wm5VL09pQmliMjlzWldGdU8xeHVJQ0FnSUdSbFptRjFiSFJVYjBodmRtVnlQem9nYzNSeWFXNW5PMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFbGpaU0JEWVc1a2FXUmhkR1VnVFdWemMyRm5aU0IzY21Gd2NHVnlYRzRnS2k5Y2JtVjRjRzl5ZENCamJHRnpjeUJOWlhOellXZGxTV05sUTJGdVpHbGtZWFJsSUdWNGRHVnVaSE1nVFdWemMyRm5aVkpsWTNZZ2UxeHVJQ0FnSUdOaGJtUnBaR0YwWlRvZ1VsUkRTV05sUTJGdVpHbGtZWFJsU1c1cGREdGNibjFjYmx4dUx5b3FYRzRnS2lCUVpXVnlJRVJoZEdFZ1EyaGhibTVsYkhNZ1RXVnpjMkZuWlNCM2NtRndjR1Z5WEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCTlpYTnpZV2RsVUdWbGNrUmhkR0ZEYUdGdWJtVnNjeUJsZUhSbGJtUnpJRTFsYzNOaFoyVlNaV04ySUh0Y2JpQWdJQ0J5WldOMlUzUnlaV0Z0U1dRNklHNTFiV0psY2p0Y2JpQWdJQ0J6Wlc1a1UzUnlaV0Z0U1dRNklHNTFiV0psY2p0Y2JpQWdJQ0IwZVhCbE9pQnpkSEpwYm1jN1hHNTlYRzVjYm1WNGNHOXlkQ0JqYkdGemN5Qk5aWE56WVdkbFQyNVRZM0psWlc1TFpYbGliMkZ5WkNCN1hHNGdJQ0FnWTI5dGJXRnVaRG9nYzNSeWFXNW5PMXh1SUNBZ0lITm9iM2RQYmxOamNtVmxia3RsZVdKdllYSmtPaUJpYjI5c1pXRnVPMXh1SUNBZ0lIZzZJRzUxYldKbGNqdGNiaUFnSUNCNU9pQnVkVzFpWlhJN1hHNTlYRzRpTENJdkx5QkRiM0I1Y21sbmFIUWdSWEJwWXlCSFlXMWxjeXdnU1c1akxpQkJiR3dnVW1sbmFIUnpJRkpsYzJWeWRtVmtMbHh1WEc1cGJYQnZjblFnZXlCTWIyZG5aWElnZlNCbWNtOXRJQ2N1TGk5TWIyZG5aWEl2VEc5bloyVnlKenRjYmx4dUx5b3FYRzRnS2lCVWFHVWdVMlZ1WkNCVWVYQmxjeUIwYUdGMElHRnlaU0J3ZFhOb1pXUWdabkp2YlNCMGFHVWdjMmxuYm1Gc2FXNW5JSE5sY25abGNseHVJQ292WEc1bGVIQnZjblFnWlc1MWJTQk5aWE56WVdkbFUyVnVaRlI1Y0dWeklIdGNiaUFnSUNCTVNWTlVYMU5VVWtWQlRVVlNVeUE5SUNkc2FYTjBVM1J5WldGdFpYSnpKeXhjYmlBZ0lDQlRWVUpUUTFKSlFrVWdQU0FuYzNWaWMyTnlhV0psSnl4Y2JpQWdJQ0JWVGxOVlFsTkRVa2xDUlNBOUlDZDFibk4xWW5OamNtbGlaU2NzWEc0Z0lDQWdTVU5GWDBOQlRrUkpSRUZVUlNBOUlDZHBZMlZEWVc1a2FXUmhkR1VuTEZ4dUlDQWdJRTlHUmtWU0lEMGdKMjltWm1WeUp5eGNiaUFnSUNCQlRsTlhSVklnUFNBbllXNXpkMlZ5Snl4Y2JpQWdJQ0JFUVZSQlEwaEJUazVGVEZKRlVWVkZVMVFnUFNBblpHRjBZVU5vWVc1dVpXeFNaWEYxWlhOMEp5eGNiaUFnSUNCVFJsVlNSVU5XUkVGVVFVTklRVTVPUlV4U1JVRkVXU0E5SUNkd1pXVnlSR0YwWVVOb1lXNXVaV3h6VW1WaFpIa25MRnh1SUNBZ0lGQlBUa2NnUFNBbmNHOXVaeWRjYm4xY2JseHVMeW9xWEc0Z0tpQkJJRmR5WVhCd1pYSWdabTl5SUhSb1pTQnRaWE56WVdkbElIUnZJSE5sYm1RZ2RHOGdkR2hsSUhOcFoyNWhiR2x1WnlCelpYSjJaWEpjYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUUxbGMzTmhaMlZUWlc1a0lHbHRjR3hsYldWdWRITWdVMlZ1WkNCN1hHNGdJQ0FnZEhsd1pUb2djM1J5YVc1bk8xeHVJQ0FnSUhCbFpYSkRiMjV1WldOMGFXOXVUM0IwYVc5dWN6b2diMkpxWldOME8xeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRU0JtYVd4MFpYSWdabTl5SUdOdmJuUnliMnhzYVc1bklIZG9ZWFFnY0dGeVlXMWxkR1Z5Y3lCMGJ5QmhZM1IxWVd4c2VTQnpaVzVrTGx4dUlDQWdJQ0FxSUVkdmIyUWdabTl5SUdWNFkyeDFaR2x1WnlCa1pXWmhkV3gwSUhaaGJIVmxjeUJ2Y2lCb2FXUmtaVzRnYVc1MFpYSnVZV3h6TGx4dUlDQWdJQ0FxSUVWNFlXMXdiR1VnWm05eUlHbHVZMngxWkdsdVp5QmxkbVZ5ZVhSb2FXNW5JR0oxZENCNlpYSnZJR0pwZEhKaGRHVWdabWxsYkdSekxpNHVYRzRnSUNBZ0lDb2djMlZ1WkVacGJIUmxjaWhyWlhrNklITjBjbWx1Wnl3Z2RtRnNkV1U2SUdGdWVTa2dlMXh1SUNBZ0lDQXFJQ0FnYVdZZ0tDaHJaWGtnUFQwZ1hDSnRhVzVDYVhSeVlYUmxYQ0lnZkh3Z2EyVjVJRDA5SUZ3aWJXRjRRbWwwY21GMFpWd2lLU0FtSmlCMllXeDFaU0E4UFNBd0tTQnlaWFIxY200Z2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBcUlDQWdjbVYwZFhKdUlIWmhiSFZsTzF4dUlDQWdJQ0FxSUgxY2JpQWdJQ0FnS2lCU1pYUjFjbTRnZFc1a1pXWnBibVZrSUhSdklHVjRZMngxWkdVZ2RHaGxJSEJ5YjNCbGNuUjVJR052YlhCc1pYUmxiSGt1WEc0Z0lDQWdJQ292WEc0Z0lDQWdjMlZ1WkVacGJIUmxjaWhyWlhrNklITjBjbWx1Wnl3Z2RtRnNkV1U2SUdGdWVTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkbUZzZFdVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1ZIVnlibk1nZEdobElIZHlZWEJ3WlhJZ2FXNTBieUJoSUVwVFQwNGdVM1J5YVc1blhHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ0xTQktVMDlPSUZOMGNtbHVaeUJ2WmlCMGFHVWdUV1Z6YzJGblpTQjBieUJ6Wlc1a1hHNGdJQ0FnSUNvdlhHNGdJQ0FnY0dGNWJHOWhaQ2dwSUh0Y2JpQWdJQ0FnSUNBZ1RHOW5aMlZ5TGt4dlp5aGNiaUFnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBblUyVnVaR2x1WnlBOVBpQmNYRzRuSUNzZ1NsTlBUaTV6ZEhKcGJtZHBabmtvZEdocGN5d2dkR2hwY3k1elpXNWtSbWxzZEdWeUxDQTBLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lEWmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRXBUVDA0dWMzUnlhVzVuYVdaNUtIUm9hWE1zSUhSb2FYTXVjMlZ1WkVacGJIUmxjaWs3WEc0Z0lDQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ2FXNTBaWEptWVdObElGTmxibVFnZTF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZSMWNtNXpJSFJvWlNCM2NtRndjR1Z5SUdsdWRHOGdZU0JLVTA5T0lGTjBjbWx1WjF4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUMwZ1NsTlBUaUJUZEhKcGJtY2diMllnZEdobElFMWxjM05oWjJVZ2RHOGdjMlZ1WkZ4dUlDQWdJQ0FxTDF4dUlDQWdJSEJoZVd4dllXUTZJQ2dwSUQwK0lITjBjbWx1Wnp0Y2JuMWNibHh1Wlhod2IzSjBJR05zWVhOeklFMWxjM05oWjJWTWFYTjBVM1J5WldGdFpYSnpJR1Y0ZEdWdVpITWdUV1Z6YzJGblpWTmxibVFnZTF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHVJQ0FnSUNBZ0lDQnpkWEJsY2lncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5SNWNHVWdQU0JOWlhOellXZGxVMlZ1WkZSNWNHVnpMa3hKVTFSZlUxUlNSVUZOUlZKVE8xeHVJQ0FnSUgxY2JuMWNibHh1Wlhod2IzSjBJR05zWVhOeklFMWxjM05oWjJWVGRXSnpZM0pwWW1VZ1pYaDBaVzVrY3lCTlpYTnpZV2RsVTJWdVpDQjdYRzRnSUNBZ2MzUnlaV0Z0WlhKSlpEb2djM1J5YVc1bk8xeHVYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9jM1J5WldGdFpYSnBaRG9nYzNSeWFXNW5LU0I3WEc0Z0lDQWdJQ0FnSUhOMWNHVnlLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkSGx3WlNBOUlFMWxjM05oWjJWVFpXNWtWSGx3WlhNdVUxVkNVME5TU1VKRk8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMGNtVmhiV1Z5U1dRZ1BTQnpkSEpsWVcxbGNtbGtPMXh1SUNBZ0lIMWNibjFjYmx4dVpYaHdiM0owSUdOc1lYTnpJRTFsYzNOaFoyVlZibk4xWW5OamNtbGlaU0JsZUhSbGJtUnpJRTFsYzNOaFoyVlRaVzVrSUh0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNiaUFnSUNBZ0lDQWdjM1Z3WlhJb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MGVYQmxJRDBnVFdWemMyRm5aVk5sYm1SVWVYQmxjeTVWVGxOVlFsTkRVa2xDUlR0Y2JpQWdJQ0I5WEc1OVhHNWNiaThxS2x4dUlDb2dTVzV6ZEdGdVkyVWdVbVZ4ZFdWemRDQk5aWE56WVdkbElGZHlZWEJ3WlhKY2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklFMWxjM05oWjJWUWIyNW5JR1Y0ZEdWdVpITWdUV1Z6YzJGblpWTmxibVFnZTF4dUlDQWdJSFJwYldVNklHNTFiV0psY2p0Y2JseHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtIUnBiV1U2SUc1MWJXSmxjaWtnZTF4dUlDQWdJQ0FnSUNCemRYQmxjaWdwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMblI1Y0dVZ1BTQk5aWE56WVdkbFUyVnVaRlI1Y0dWekxsQlBUa2M3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkR2x0WlNBOUlIUnBiV1U3WEc0Z0lDQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ2RIbHdaU0JGZUhSeVlVOW1abVZ5VUdGeVlXMWxkR1Z5Y3lBOUlIdGNiaUFnSUNCdGFXNUNhWFJ5WVhSbFFuQnpPaUJ1ZFcxaVpYSTdYRzRnSUNBZ2JXRjRRbWwwY21GMFpVSndjem9nYm5WdFltVnlPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlDQlhaV0lnVWxSRElFOW1abVZ5SUcxbGMzTmhaMlVnZDNKaGNIQmxjbHh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nVFdWemMyRm5aVmRsWWxKVVEwOW1abVZ5SUdWNGRHVnVaSE1nVFdWemMyRm5aVk5sYm1RZ2UxeHVJQ0FnSUhOa2NEb2djM1J5YVc1bk8xeHVJQ0FnSUcxcGJrSnBkSEpoZEdVNklHNTFiV0psY2p0Y2JpQWdJQ0J0WVhoQ2FYUnlZWFJsT2lCdWRXMWlaWEk3WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWNHRnlZVzBnYjJabVpYSWdMU0JIWlc1bGNtRjBaV1FnVjJWaUlGSlVReUJQWm1abGNseHVJQ0FnSUNBcUwxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtHOW1abVZ5T2lCU1ZFTlRaWE56YVc5dVJHVnpZM0pwY0hScGIyNUpibWwwTENCbGVIUnlZVkJoY21GdGN6b2dSWGgwY21GUFptWmxjbEJoY21GdFpYUmxjbk1wSUh0Y2JpQWdJQ0FnSUNBZ2MzVndaWElvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUwZVhCbElEMGdUV1Z6YzJGblpWTmxibVJVZVhCbGN5NVBSa1pGVWp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV0YVc1Q2FYUnlZWFJsSUQwZ01EdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dFlYaENhWFJ5WVhSbElEMGdNRHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9iMlptWlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkSGx3WlNBOUlHOW1abVZ5TG5SNWNHVWdZWE1nVFdWemMyRm5aVk5sYm1SVWVYQmxjenRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzJSd0lEMGdiMlptWlhJdWMyUndPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV0YVc1Q2FYUnlZWFJsSUQwZ1pYaDBjbUZRWVhKaGJYTXViV2x1UW1sMGNtRjBaVUp3Y3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJXRjRRbWwwY21GMFpTQTlJR1Y0ZEhKaFVHRnlZVzF6TG0xaGVFSnBkSEpoZEdWQ2NITTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnpaVzVrUm1sc2RHVnlLR3RsZVRvZ2MzUnlhVzVuTENCMllXeDFaVG9nWVc1NUtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnb2EyVjVJRDA5SUZ3aWJXbHVRbWwwY21GMFpWd2lJSHg4SUd0bGVTQTlQU0JjSW0xaGVFSnBkSEpoZEdWY0lpa2dKaVlnZG1Gc2RXVWdQRDBnTUNrZ2NtVjBkWEp1SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhaaGJIVmxPMXh1SUNBZ0lIMWNibjFjYmx4dVpYaHdiM0owSUhSNWNHVWdSWGgwY21GQmJuTjNaWEpRWVhKaGJXVjBaWEp6SUQwZ2UxeHVJQ0FnSUcxcGJrSnBkSEpoZEdWQ2NITTZJRzUxYldKbGNqdGNiaUFnSUNCdFlYaENhWFJ5WVhSbFFuQnpPaUJ1ZFcxaVpYSTdYRzU5WEc1Y2JpOHFLbHh1SUNvZ0lGZGxZaUJTVkVNZ1FXNXpkMlZ5SUcxbGMzTmhaMlVnZDNKaGNIQmxjbHh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nVFdWemMyRm5aVmRsWWxKVVEwRnVjM2RsY2lCbGVIUmxibVJ6SUUxbGMzTmhaMlZUWlc1a0lIdGNiaUFnSUNCelpIQTZJSE4wY21sdVp6dGNiaUFnSUNCdGFXNUNhWFJ5WVhSbE9pQnVkVzFpWlhJN1hHNGdJQ0FnYldGNFFtbDBjbUYwWlRvZ2JuVnRZbVZ5TzF4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUdGdWMzZGxjaUF0SUVkbGJtVnlZWFJsWkNCWFpXSWdVbFJESUU5bVptVnlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9ZVzV6ZDJWeU9pQlNWRU5UWlhOemFXOXVSR1Z6WTNKcGNIUnBiMjVKYm1sMExDQmxlSFJ5WVZCaGNtRnRjem9nUlhoMGNtRkJibk4zWlhKUVlYSmhiV1YwWlhKektTQjdYRzRnSUNBZ0lDQWdJSE4xY0dWeUtDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRIbHdaU0E5SUUxbGMzTmhaMlZUWlc1a1ZIbHdaWE11UVU1VFYwVlNPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtMXBia0pwZEhKaGRHVWdQU0F3TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbTFoZUVKcGRISmhkR1VnUFNBd08xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoaGJuTjNaWElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRIbHdaU0E5SUdGdWMzZGxjaTUwZVhCbElHRnpJRTFsYzNOaFoyVlRaVzVrVkhsd1pYTTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5rY0NBOUlHRnVjM2RsY2k1elpIQTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTFwYmtKcGRISmhkR1VnUFNCbGVIUnlZVkJoY21GdGN5NXRhVzVDYVhSeVlYUmxRbkJ6TzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dFlYaENhWFJ5WVhSbElEMGdaWGgwY21GUVlYSmhiWE11YldGNFFtbDBjbUYwWlVKd2N6dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lITmxibVJHYVd4MFpYSW9hMlY1T2lCemRISnBibWNzSUhaaGJIVmxPaUJoYm5rcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NoclpYa2dQVDBnWENKdGFXNUNhWFJ5WVhSbFhDSWdmSHdnYTJWNUlEMDlJRndpYldGNFFtbDBjbUYwWlZ3aUtTQW1KaUIyWVd4MVpTQThQU0F3S1NCeVpYUjFjbTRnZFc1a1pXWnBibVZrTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZG1Gc2RXVTdYRzRnSUNBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUNCWFpXSWdVbFJESUVSaGRHRWdZMmhoYm01bGJDQnlaWEYxWlhOMElHMWxjM05oWjJVZ2QzSmhjSEJsY2x4dUlDb3ZYRzVsZUhCdmNuUWdZMnhoYzNNZ1RXVnpjMkZuWlZkbFlsSlVRMFJoZEdGamFHRnVibVZzVW1WeGRXVnpkQ0JsZUhSbGJtUnpJRTFsYzNOaFoyVlRaVzVrSUh0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNiaUFnSUNBZ0lDQWdjM1Z3WlhJb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MGVYQmxJRDBnVFdWemMyRm5aVk5sYm1SVWVYQmxjeTVFUVZSQlEwaEJUazVGVEZKRlVWVkZVMVE3WEc0Z0lDQWdmVnh1ZlZ4dVhHNHZLaXBjYmlBcUlDQlhaV0lnVWxSRElGTkdWU0JFWVhSaElHTm9ZVzV1Wld3Z2NtVmhaSGtnYldWemMyRm5aU0IzY21Gd2NHVnlYRzRnS2k5Y2JtVjRjRzl5ZENCamJHRnpjeUJOWlhOellXZGxVMFpWVW1WamRrUmhkR0ZEYUdGdWJtVnNVbVZoWkhrZ1pYaDBaVzVrY3lCTlpYTnpZV2RsVTJWdVpDQjdYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9LU0I3WEc0Z0lDQWdJQ0FnSUhOMWNHVnlLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkSGx3WlNBOUlFMWxjM05oWjJWVFpXNWtWSGx3WlhNdVUwWlZVa1ZEVmtSQlZFRkRTRUZPVGtWTVVrVkJSRms3WEc0Z0lDQWdmVnh1ZlZ4dVhHNHZLaXBjYmlBcUlGSlVReUJKWTJVZ1EyRnVaR2xrWVhSbElGZHlZWEJ3WlhKY2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklFMWxjM05oWjJWSlkyVkRZVzVrYVdSaGRHVWdhVzF3YkdWdFpXNTBjeUJUWlc1a0lIdGNiaUFnSUNCallXNWthV1JoZEdVNklGSlVRMGxqWlVOaGJtUnBaR0YwWlR0Y2JpQWdJQ0IwZVhCbE9pQk5aWE56WVdkbFUyVnVaRlI1Y0dWek8xeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRSEJoY21GdElHTmhibVJwWkdGMFpTQXRJRkpVUXlCSlkyVWdRMkZ1Wkdsa1lYUmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9ZMkZ1Wkdsa1lYUmxPaUJTVkVOSlkyVkRZVzVrYVdSaGRHVXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTBlWEJsSUQwZ1RXVnpjMkZuWlZObGJtUlVlWEJsY3k1SlEwVmZRMEZPUkVsRVFWUkZPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTmhibVJwWkdGMFpTQTlJR05oYm1ScFpHRjBaVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJVZFhKdWN5QjBhR1VnZDNKaGNIQmxjaUJwYm5SdklHRWdTbE5QVGlCVGRISnBibWRjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUF0SUVwVFQwNGdVM1J5YVc1bklHOW1JSFJvWlNCTlpYTnpZV2RsSUhSdklITmxibVJjYmlBZ0lDQWdLaTljYmlBZ0lDQndZWGxzYjJGa0tDa2dlMXh1SUNBZ0lDQWdJQ0JNYjJkblpYSXVURzluS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2RUWlc1a2FXNW5JRDArSUZ4Y2JpY2dLeUJLVTA5T0xuTjBjbWx1WjJsbWVTaDBhR2x6TENCMWJtUmxabWx1WldRc0lEUXBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ05seHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdTbE5QVGk1emRISnBibWRwWm5rb2RHaHBjeWs3WEc0Z0lDQWdmVnh1ZlZ4dUlpd2lMeThnUTI5d2VYSnBaMmgwSUVWd2FXTWdSMkZ0WlhNc0lFbHVZeTRnUVd4c0lGSnBaMmgwY3lCU1pYTmxjblpsWkM1Y2JseHVhVzF3YjNKMElIc2dURzluWjJWeUlIMGdabkp2YlNBbkxpNHZURzluWjJWeUwweHZaMmRsY2ljN1hHNXBiWEJ2Y25RZ2V5QlhaV0pUYjJOclpYUkRiMjUwY205c2JHVnlJSDBnWm5KdmJTQW5MaTlYWldKVGIyTnJaWFJEYjI1MGNtOXNiR1Z5Snp0Y2JtbHRjRzl5ZENCN1hHNGdJQ0FnVFdWemMyRm5aVkpsWTNaVWVYQmxjeXhjYmlBZ0lDQk5aWE56WVdkbFEyOXVabWxuTEZ4dUlDQWdJRTFsYzNOaFoyVlRkSEpsWVcxbGNreHBjM1FzWEc0Z0lDQWdUV1Z6YzJGblpWTjBjbVZoYldWeVNVUkRhR0Z1WjJWa0xGeHVJQ0FnSUUxbGMzTmhaMlZRYkdGNVpYSkRiM1Z1ZEN4Y2JpQWdJQ0JOWlhOellXZGxRVzV6ZDJWeUxGeHVJQ0FnSUUxbGMzTmhaMlZQWm1abGNpeGNiaUFnSUNCTlpYTnpZV2RsU1dObFEyRnVaR2xrWVhSbExGeHVJQ0FnSUUxbGMzTmhaMlZRWldWeVJHRjBZVU5vWVc1dVpXeHpYRzU5SUdaeWIyMGdKeTR2VFdWemMyRm5aVkpsWTJWcGRtVW5PMXh1YVcxd2IzSjBJSHNnVFdWemMyRm5aVkJ2Ym1jZ2ZTQm1jbTl0SUNjdUwwMWxjM05oWjJWVFpXNWtKenRjYmx4dUx5b3FYRzRnS2lCVGFXZHVZV3hzYVc1bklIQnliM1J2WTI5c0lHWnZjaUJvWVc1a2JHbHVaeUJ0WlhOellXZGxjeUJtY205dElIUm9aU0J6YVdkdVlXeHNhVzVuSUhObGNuWmxjaTVjYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUZOcFoyNWhiR3hwYm1kUWNtOTBiMk52YkNCN1hHNGdJQ0FnY0hKcGRtRjBaU0JHY205dFZVVk5aWE56WVdkbFNHRnVaR3hsY25NNklFMWhjRHh6ZEhKcGJtY3NJQ2h3WVhsc2IyRmtPaUJ6ZEhKcGJtY3BJRDArSUhadmFXUStPMXh1WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Um5KdmJWVkZUV1Z6YzJGblpVaGhibVJzWlhKeklEMGdibVYzSUUxaGNEeGNiaUFnSUNBZ0lDQWdJQ0FnSUhOMGNtbHVaeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDaHdZWGxzYjJGa09pQnpkSEpwYm1jcElEMCtJSFp2YVdSY2JpQWdJQ0FnSUNBZ1BpZ3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHRmtaRTFsYzNOaFoyVklZVzVrYkdWeUtGeHVJQ0FnSUNBZ0lDQnRaWE56WVdkbFNXUTZJSE4wY21sdVp5eGNiaUFnSUNBZ0lDQWdiV1Z6YzJGblpVaGhibVJzWlhJNklDaHdZWGxzYjJGa09pQnpkSEpwYm1jcElEMCtJSFp2YVdSY2JpQWdJQ0FwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVHY205dFZVVk5aWE56WVdkbFNHRnVaR3hsY25NdWMyVjBLRzFsYzNOaFoyVkpaQ3dnYldWemMyRm5aVWhoYm1Sc1pYSXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHaGhibVJzWlUxbGMzTmhaMlVvYldWemMyRm5aVWxrT2lCemRISnBibWNzSUcxbGMzTmhaMlZFWVhSaE9pQnpkSEpwYm1jcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVSbkp2YlZWRlRXVnpjMkZuWlVoaGJtUnNaWEp6TG1oaGN5aHRaWE56WVdkbFNXUXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGtaeWIyMVZSVTFsYzNOaFoyVklZVzVrYkdWeWN5NW5aWFFvYldWemMyRm5aVWxrS1NodFpYTnpZV2RsUkdGMFlTazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1UlhKeWIzSW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZ1RXVnpjMkZuWlNCMGVYQmxJRzltSUNSN2JXVnpjMkZuWlVsa2ZTQmtiMlZ6SUc1dmRDQm9ZWFpsSUdFZ2JXVnpjMkZuWlNCb1lXNWtiR1Z5SUhKbFoybHpkR1Z5WldRZ2IyNGdkR2hsSUdaeWIyNTBaVzVrSUMwZ2FXZHViM0pwYm1jZ2JXVnpjMkZuWlM1Z1hHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVjBkWEFnWVc1NUlHUmxabUYxYkhRZ2MybG5ibUZzYkdsdVp5QnRaWE56WVdkbElHaGhibVJzYVc1bkxDQjBhR1Z6WlNCallXNGdZbVVnYjNabGNuSnBaR1JsYmlCdmNpQmhaR1JwZEdsdmJtRnNJR2hoYm1Sc1pYSnpJR0ZrWkdWa0lIZHBkR2dnWUdGa1pFMWxjM05oWjJWSVlXNWtiR1Z5WUM1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZDJWaWMyOWphMlYwUTI5dWRISnZiR3hsY2lCVWFHVWdZMjl1ZEhKdmJHeGxjaUIwYnlCelpYUjFjQ0IwYUdWelpTQm9ZVzVrYkdWeWN5QnZiaTVjYmlBZ0lDQWdLaTljYmlBZ0lDQnpkR0YwYVdNZ2MyVjBkWEJFWldaaGRXeDBTR0Z1Wkd4bGNuTW9kMlZpYzI5amEyVjBRMjl1ZEhKdmJHeGxjam9nVjJWaVUyOWphMlYwUTI5dWRISnZiR3hsY2lrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJRU1U1SFhHNGdJQ0FnSUNBZ0lIZGxZbk52WTJ0bGRFTnZiblJ5YjJ4c1pYSXVjMmxuYm1Gc2JHbHVaMUJ5YjNSdlkyOXNMbUZrWkUxbGMzTmhaMlZJWVc1a2JHVnlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1RXVnpjMkZuWlZKbFkzWlVlWEJsY3k1UVNVNUhMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tIQnBibWRRWVhsc2IyRmtPaUJ6ZEhKcGJtY3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QnpaVzVrSUc5MWNpQndiMjVuSUhCaGVXeHZZV1FnWW1GamF5QjBieUIwYUdVZ2MybG5ibUZzYkdsdVp5QnpaWEoyWlhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J3YjI1blVHRjViRzloWkNBOUlHNWxkeUJOWlhOellXZGxVRzl1WnloY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibVYzSUVSaGRHVW9LUzVuWlhSVWFXMWxLQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwTG5CaGVXeHZZV1FvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JOWlhOellXZGxVbVZqZGxSNWNHVnpMbEJKVGtjZ0t5QW5PaUFuSUNzZ2NHbHVaMUJoZVd4dllXUXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURaY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZGxZbk52WTJ0bGRFTnZiblJ5YjJ4c1pYSXVkMlZpVTI5amEyVjBMbk5sYm1Rb2NHOXVaMUJoZVd4dllXUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQXBPMXh1WEc0Z0lDQWdJQ0FnSUM4dklFTlBUa1pKUjF4dUlDQWdJQ0FnSUNCM1pXSnpiMk5yWlhSRGIyNTBjbTlzYkdWeUxuTnBaMjVoYkd4cGJtZFFjbTkwYjJOdmJDNWhaR1JOWlhOellXZGxTR0Z1Wkd4bGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUUxbGMzTmhaMlZTWldOMlZIbHdaWE11UTA5T1JrbEhMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tHTnZibVpwWjFCaGVXeHZZV1E2SUhOMGNtbHVaeWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1TWIyY29URzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N3Z1RXVnpjMkZuWlZKbFkzWlVlWEJsY3k1RFQwNUdTVWNzSURZcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdOdmJtWnBaem9nVFdWemMyRm5aVU52Ym1acFp5QTlJRXBUVDA0dWNHRnljMlVvWTI5dVptbG5VR0Y1Ykc5aFpDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkMlZpYzI5amEyVjBRMjl1ZEhKdmJHeGxjaTV2YmtOdmJtWnBaeWhqYjI1bWFXY3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQXBPMXh1WEc0Z0lDQWdJQ0FnSUM4dklGTlVVa1ZCVFVWU1gweEpVMVJjYmlBZ0lDQWdJQ0FnZDJWaWMyOWphMlYwUTI5dWRISnZiR3hsY2k1emFXZHVZV3hzYVc1blVISnZkRzlqYjJ3dVlXUmtUV1Z6YzJGblpVaGhibVJzWlhJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JOWlhOellXZGxVbVZqZGxSNWNHVnpMbE5VVWtWQlRVVlNYMHhKVTFRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvYkdsemRGQmhlV3h2WVdRNklITjBjbWx1WnlrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNU1iMmNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFMWxjM05oWjJWU1pXTjJWSGx3WlhNdVUxUlNSVUZOUlZKZlRFbFRWQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ05seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2MzUnlaV0Z0WlhKTWFYTjBPaUJOWlhOellXZGxVM1J5WldGdFpYSk1hWE4wSUQxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdTbE5QVGk1d1lYSnpaU2hzYVhOMFVHRjViRzloWkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QyVmljMjlqYTJWMFEyOXVkSEp2Ykd4bGNpNXZibE4wY21WaGJXVnlUR2x6ZENoemRISmxZVzFsY2t4cGMzUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQXBPMXh1WEc0Z0lDQWdJQ0FnSUM4dklGTlVVa1ZCVFVWU1gwbEVYME5JUVU1SFJVUmNiaUFnSUNBZ0lDQWdkMlZpYzI5amEyVjBRMjl1ZEhKdmJHeGxjaTV6YVdkdVlXeHNhVzVuVUhKdmRHOWpiMnd1WVdSa1RXVnpjMkZuWlVoaGJtUnNaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQk5aWE56WVdkbFVtVmpkbFI1Y0dWekxsTlVVa1ZCVFVWU1gwbEVYME5JUVU1SFJVUXNYRzRnSUNBZ0lDQWdJQ0FnSUNBb2FXUlFZWGxzYjJGa09pQnpkSEpwYm1jcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVURzluS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk5aWE56WVdkbFVtVmpkbFI1Y0dWekxsTlVVa1ZCVFVWU1gwbEVYME5JUVU1SFJVUXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURaY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhOMGNtVmhiV1Z5U1dSTlpYTnpZV2RsT2lCTlpYTnpZV2RsVTNSeVpXRnRaWEpKUkVOb1lXNW5aV1FnUFZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQktVMDlPTG5CaGNuTmxLR2xrVUdGNWJHOWhaQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZDJWaWMyOWphMlYwUTI5dWRISnZiR3hsY2k1dmJsTjBjbVZoYldWeVNVUkRhR0Z1WjJWa0tITjBjbVZoYldWeVNXUk5aWE56WVdkbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0tUdGNibHh1SUNBZ0lDQWdJQ0F2THlCUVRFRlpSVkpmUTA5VlRsUmNiaUFnSUNBZ0lDQWdkMlZpYzI5amEyVjBRMjl1ZEhKdmJHeGxjaTV6YVdkdVlXeHNhVzVuVUhKdmRHOWpiMnd1WVdSa1RXVnpjMkZuWlVoaGJtUnNaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQk5aWE56WVdkbFVtVmpkbFI1Y0dWekxsQk1RVmxGVWw5RFQxVk9WQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDaHdiR0Y1WlhKRGIzVnVkRkJoZVd4dllXUTZJSE4wY21sdVp5a2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVNYjJjb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRTFsYzNOaFoyVlNaV04yVkhsd1pYTXVVRXhCV1VWU1gwTlBWVTVVTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQndiR0Y1WlhKRGIzVnVkRG9nVFdWemMyRm5aVkJzWVhsbGNrTnZkVzUwSUQxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdTbE5QVGk1d1lYSnpaU2h3YkdGNVpYSkRiM1Z1ZEZCaGVXeHZZV1FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVNYjJjb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RRYkdGNVpYSWdRMjkxYm5RNklDY2dLeUJ3YkdGNVpYSkRiM1Z1ZEM1amIzVnVkQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ05seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkMlZpYzI5amEyVjBRMjl1ZEhKdmJHeGxjaTV2YmxCc1lYbGxja052ZFc1MEtIQnNZWGxsY2tOdmRXNTBLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQXBPMXh1WEc0Z0lDQWdJQ0FnSUM4dklFRk9VMWRGVWx4dUlDQWdJQ0FnSUNCM1pXSnpiMk5yWlhSRGIyNTBjbTlzYkdWeUxuTnBaMjVoYkd4cGJtZFFjbTkwYjJOdmJDNWhaR1JOWlhOellXZGxTR0Z1Wkd4bGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUUxbGMzTmhaMlZTWldOMlZIbHdaWE11UVU1VFYwVlNMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tHRnVjM2RsY2xCaGVXeHZZV1E2SUhOMGNtbHVaeWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJSE5sYm1RZ2IzVnlJSEJ2Ym1jZ2NHRjViRzloWkNCaVlXTnJJSFJ2SUhSb1pTQnphV2R1WVd4c2FXNW5JSE5sY25abGNseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1TWIyY29URzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N3Z1RXVnpjMkZuWlZKbFkzWlVlWEJsY3k1QlRsTlhSVklzSURZcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdGdWMzZGxjam9nVFdWemMyRm5aVUZ1YzNkbGNpQTlJRXBUVDA0dWNHRnljMlVvWVc1emQyVnlVR0Y1Ykc5aFpDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkMlZpYzI5amEyVjBRMjl1ZEhKdmJHeGxjaTV2YmxkbFlsSjBZMEZ1YzNkbGNpaGhibk4zWlhJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUU5R1JrVlNYRzRnSUNBZ0lDQWdJSGRsWW5OdlkydGxkRU52Ym5SeWIyeHNaWEl1YzJsbmJtRnNiR2x1WjFCeWIzUnZZMjlzTG1Ga1pFMWxjM05oWjJWSVlXNWtiR1Z5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdUV1Z6YzJGblpWSmxZM1pVZVhCbGN5NVBSa1pGVWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2h2Wm1abGNsQmhlV3h2WVdRNklITjBjbWx1WnlrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUhObGJtUWdiM1Z5SUhCdmJtY2djR0Y1Ykc5aFpDQmlZV05ySUhSdklIUm9aU0J6YVdkdVlXeHNhVzVuSUhObGNuWmxjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNU1iMmNvVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTd2dUV1Z6YzJGblpWSmxZM1pVZVhCbGN5NVBSa1pGVWl3Z05pazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2IyWm1aWEk2SUUxbGMzTmhaMlZQWm1abGNpQTlJRXBUVDA0dWNHRnljMlVvYjJabVpYSlFZWGxzYjJGa0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNaV0p6YjJOclpYUkRiMjUwY205c2JHVnlMbTl1VjJWaVVuUmpUMlptWlhJb2IyWm1aWElwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FwTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJRWxEUlNCRFFVNUVTVVJCVkVWY2JpQWdJQ0FnSUNBZ2QyVmljMjlqYTJWMFEyOXVkSEp2Ykd4bGNpNXphV2R1WVd4c2FXNW5VSEp2ZEc5amIyd3VZV1JrVFdWemMyRm5aVWhoYm1Sc1pYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNCTlpYTnpZV2RsVW1WamRsUjVjR1Z6TGtsRFJWOURRVTVFU1VSQlZFVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBb2FXTmxRMkZ1Wkdsa1lYUmxVR0Y1Ykc5aFpEb2djM1J5YVc1bktTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2MyVnVaQ0J2ZFhJZ2NHOXVaeUJ3WVhsc2IyRmtJR0poWTJzZ2RHOGdkR2hsSUhOcFoyNWhiR3hwYm1jZ2MyVnlkbVZ5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa3h2WnloY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdUV1Z6YzJGblpWSmxZM1pVZVhCbGN5NUpRMFZmUTBGT1JFbEVRVlJGTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnBZMlZEWVc1a2FXUmhkR1U2SUUxbGMzTmhaMlZKWTJWRFlXNWthV1JoZEdVZ1BWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JLVTA5T0xuQmhjbk5sS0dsalpVTmhibVJwWkdGMFpWQmhlV3h2WVdRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZGxZbk52WTJ0bGRFTnZiblJ5YjJ4c1pYSXViMjVKWTJWRFlXNWthV1JoZEdVb2FXTmxRMkZ1Wkdsa1lYUmxMbU5oYm1ScFpHRjBaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdWMEZTVGtsT1IxeHVJQ0FnSUNBZ0lDQjNaV0p6YjJOclpYUkRiMjUwY205c2JHVnlMbk5wWjI1aGJHeHBibWRRY205MGIyTnZiQzVoWkdSTlpYTnpZV2RsU0dGdVpHeGxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lFMWxjM05oWjJWU1pXTjJWSGx3WlhNdVYwRlNUa2xPUnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2gzWVhKdWFXNW5VR0Y1Ykc5aFpEb2djM1J5YVc1bktTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMbGRoY201cGJtY29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdCWFlYSnVhVzVuSUhKbFkyVnBkbVZrT2lBa2UzZGhjbTVwYm1kUVlYbHNiMkZrZldCY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUZCRlJWSWdSRUZVUVNCRFNFRk9Ua1ZNVTF4dUlDQWdJQ0FnSUNCM1pXSnpiMk5yWlhSRGIyNTBjbTlzYkdWeUxuTnBaMjVoYkd4cGJtZFFjbTkwYjJOdmJDNWhaR1JOWlhOellXZGxTR0Z1Wkd4bGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUUxbGMzTmhaMlZTWldOMlZIbHdaWE11VUVWRlVsOUVRVlJCWDBOSVFVNU9SVXhUTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdLSEJsWlhKRVlYUmhRMmhoYm01bGJITlFZWGxzYjJGa09pQnpkSEpwYm1jcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVURzluS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk5aWE56WVdkbFVtVmpkbFI1Y0dWekxsQkZSVkpmUkVGVVFWOURTRUZPVGtWTVV5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnY0dWbGNrUmhkR0ZEYUdGdWJtVnNjem9nVFdWemMyRm5aVkJsWlhKRVlYUmhRMmhoYm01bGJITWdQU0JLVTA5T0xuQmhjbk5sS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndaV1Z5UkdGMFlVTm9ZVzV1Wld4elVHRjViRzloWkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QyVmljMjlqYTJWMFEyOXVkSEp2Ykd4bGNpNXZibGRsWWxKMFkxQmxaWEpFWVhSaFEyaGhibTVsYkhNb2NHVmxja1JoZEdGRGFHRnVibVZzY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dWZWeHVJaXdpTHk4Z1EyOXdlWEpwWjJoMElFVndhV01nUjJGdFpYTXNJRWx1WXk0Z1FXeHNJRkpwWjJoMGN5QlNaWE5sY25abFpDNWNibHh1YVcxd2IzSjBJSHNnVEc5bloyVnlJSDBnWm5KdmJTQW5MaTR2VEc5bloyVnlMMHh2WjJkbGNpYzdYRzVwYlhCdmNuUWdLaUJoY3lCTlpYTnpZV2RsVW1WalpXbDJaU0JtY205dElDY3VMMDFsYzNOaFoyVlNaV05sYVhabEp6dGNibWx0Y0c5eWRDQXFJR0Z6SUUxbGMzTmhaMlZUWlc1a0lHWnliMjBnSnk0dlRXVnpjMkZuWlZObGJtUW5PMXh1YVcxd2IzSjBJSHNnVTJsbmJtRnNiR2x1WjFCeWIzUnZZMjlzSUgwZ1puSnZiU0FuTGk5VGFXZHVZV3hzYVc1blVISnZkRzlqYjJ3bk8xeHVYRzR2THlCa1pXTnNZWEpsSUhSb1pTQnVaWGNnYldWMGFHOWtJR1p2Y2lCMGFHVWdkMlZpYzI5amEyVjBJR2x1ZEdWeVptRmpaVnh1WkdWamJHRnlaU0JuYkc5aVlXd2dlMXh1SUNBZ0lHbHVkR1Z5Wm1GalpTQlhaV0pUYjJOclpYUWdlMXh1SUNBZ0lDQWdJQ0J2Ym0xbGMzTmhaMlZpYVc1aGNuay9LR1YyWlc1MFB6b2dUV1Z6YzJGblpVVjJaVzUwS1RvZ2RtOXBaRHRjYmlBZ0lDQjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1ZHaGxJR052Ym5SeWIyeHNaWElnWm05eUlIUm9aU0JYWldKVGIyTnJaWFFnWVc1a0lHRnNiQ0JoYzNOdlkybGhkR1ZrSUcxbGRHaHZaSE5jYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUZkbFlsTnZZMnRsZEVOdmJuUnliMnhzWlhJZ2UxeHVJQ0FnSUZkVFgwOVFSVTVmVTFSQlZFVWdQU0F4TzF4dUlDQWdJSGRsWWxOdlkydGxkRG9nVjJWaVUyOWphMlYwTzF4dUlDQWdJRzl1VDNCbGJqb2dSWFpsYm5SVVlYSm5aWFE3WEc0Z0lDQWdiMjVEYkc5elpUb2dSWFpsYm5SVVlYSm5aWFE3WEc0Z0lDQWdjMmxuYm1Gc2JHbHVaMUJ5YjNSdlkyOXNPaUJUYVdkdVlXeHNhVzVuVUhKdmRHOWpiMnc3WEc1Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dmJrOXdaVzRnUFNCdVpYY2dSWFpsYm5SVVlYSm5aWFFvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV2YmtOc2IzTmxJRDBnYm1WM0lFVjJaVzUwVkdGeVoyVjBLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMmxuYm1Gc2JHbHVaMUJ5YjNSdlkyOXNJRDBnYm1WM0lGTnBaMjVoYkd4cGJtZFFjbTkwYjJOdmJDZ3BPMXh1SUNBZ0lDQWdJQ0JUYVdkdVlXeHNhVzVuVUhKdmRHOWpiMnd1YzJWMGRYQkVaV1poZFd4MFNHRnVaR3hsY25Nb2RHaHBjeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUTI5dWJtVmpkQ0IwYnlCMGFHVWdjMmxuYm1Gc2FXNW5JSE5sY25abGNseHVJQ0FnSUNBcUlFQndZWEpoYlNCamIyNXVaV04wYVc5dVZWSk1JQzBnVkdobElFRmtaSEpsYzNNZ2IyWWdkR2hsSUhOcFoyNWhiR2x1WnlCelpYSjJaWEpjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUF0SUVsbUlIUm9aWEpsSUdseklHRWdZMjl1Ym1WamRHbHZibHh1SUNBZ0lDQXFMMXh1SUNBZ0lHTnZibTVsWTNRb1kyOXVibVZqZEdsdmJsVlNURG9nYzNSeWFXNW5LVG9nWW05dmJHVmhiaUI3WEc0Z0lDQWdJQ0FnSUV4dloyZGxjaTVNYjJjb1RHOW5aMlZ5TGtkbGRGTjBZV05yVkhKaFkyVW9LU3dnWTI5dWJtVmpkR2x2YmxWU1RDd2dOaWs3WEc0Z0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbmRsWWxOdlkydGxkQ0E5SUc1bGR5QlhaV0pUYjJOclpYUW9ZMjl1Ym1WamRHbHZibFZTVENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuZGxZbE52WTJ0bGRDNXZibTl3Wlc0Z1BTQW9aWFpsYm5RcElEMCtJSFJvYVhNdWFHRnVaR3hsVDI1UGNHVnVLR1YyWlc1MEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkMlZpVTI5amEyVjBMbTl1WlhKeWIzSWdQU0FvS1NBOVBpQjBhR2x6TG1oaGJtUnNaVTl1UlhKeWIzSW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZDJWaVUyOWphMlYwTG05dVkyeHZjMlVnUFNBb1pYWmxiblFwSUQwK0lIUm9hWE11YUdGdVpHeGxUMjVEYkc5elpTaGxkbVZ1ZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuZGxZbE52WTJ0bGRDNXZibTFsYzNOaFoyVWdQU0FvWlhabGJuUXBJRDArSUhSb2FYTXVhR0Z1Wkd4bFQyNU5aWE56WVdkbEtHVjJaVzUwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWQyVmlVMjlqYTJWMExtOXViV1Z6YzJGblpXSnBibUZ5ZVNBOUlDaGxkbVZ1ZENrZ1BUNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1oaGJtUnNaVTl1VFdWemMyRm5aVUpwYm1GeWVTaGxkbVZ1ZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pYSnliM0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUZjbkp2Y2lobGNuSnZjaXdnWlhKeWIzSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nU0dGdVpHeGxjeUIzYUdGMElHaGhjSEJsYm5NZ2QyaGxiaUJoSUcxbGMzTmhaMlVnYVhNZ2NtVmpaV2wyWldRZ2FXNGdZbWx1WVhKNUlHWnZjbTFjYmlBZ0lDQWdLaUJBY0dGeVlXMGdaWFpsYm5RZ0xTQk5aWE56WVdkbElGSmxZMlZwZG1Wa1hHNGdJQ0FnSUNvdlhHNGdJQ0FnYUdGdVpHeGxUMjVOWlhOellXZGxRbWx1WVhKNUtHVjJaVzUwT2lCTlpYTnpZV2RsUlhabGJuUXBJSHRjYmlBZ0lDQWdJQ0FnTHk4Z2FXWWdkR2hsSUdWMlpXNTBJR2x6SUdWdGNIUjVJSEpsZEhWeWJseHVJQ0FnSUNBZ0lDQnBaaUFvSVdWMlpXNTBJSHg4SUNGbGRtVnVkQzVrWVhSaEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQXZMeUJvWVc1a2JHVWdkR2hsSUdKcGJtRnllU0JoYm1RZ2RHaGxiaUJvWVc1a2JHVWdkR2hsSUcxbGMzTmhaMlZjYmlBZ0lDQWdJQ0FnWlhabGJuUXVaR0YwWVZ4dUlDQWdJQ0FnSUNBZ0lDQWdMblJsZUhRb0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnTG5Sb1pXNG9LRzFsYzNOaFoyVlRkSEpwYm1jNklIVnVhMjV2ZDI0cElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCaWRXbHNaQ0JoSUc1bGR5QnRaWE56WVdkbFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWTI5dWMzUnlkV04wWldSTlpYTnpZV2RsSUQwZ2JtVjNJRTFsYzNOaFoyVkZkbVZ1ZENoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMjFsYzNOaFoyVkdjbTl0UW1sdVlYSjVKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVG9nYldWemMyRm5aVk4wY21sdVoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJSE5sYm1RZ2RHaGxJRzVsZHlCemRISnBibWRwWm1sbFpDQmxkbVZ1ZENCaVlXTnJJR2x1ZEc4Z1lHOXViV1Z6YzJGblpXQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1oaGJtUnNaVTl1VFdWemMyRm5aU2hqYjI1emRISjFZM1JsWkUxbGMzTmhaMlVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDNWpZWFJqYUNnb1pYSnliM0k2SUVWeWNtOXlLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGtWeWNtOXlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1UjJWMFUzUmhZMnRVY21GalpTZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZ1JtRnBiR1ZrSUhSdklIQmhjbk5sSUdKcGJtRnllU0JpYkc5aUlHWnliMjBnZDJWaWMyOWphMlYwTENCeVpXRnpiMjQ2SUNSN1pYSnliM0o5WUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSVlXNWtiR1Z6SUhkb1lYUWdhR0Z3Y0dWdWN5QjNhR1Z1SUdFZ2JXVnpjMkZuWlNCcGN5QnlaV05sYVhabFpGeHVJQ0FnSUNBcUlFQndZWEpoYlNCbGRtVnVkQ0F0SUUxbGMzTmhaMlVnVW1WalpXbDJaV1JjYmlBZ0lDQWdLaTljYmlBZ0lDQm9ZVzVrYkdWUGJrMWxjM05oWjJVb1pYWmxiblE2SUUxbGMzTmhaMlZGZG1WdWRDa2dlMXh1SUNBZ0lDQWdJQ0F2THlCRGFHVmpheUJwWmlCM1pXSnpiMk5yWlhRZ2JXVnpjMkZuWlNCcGN5QmlhVzVoY25rc0lHbG1JSE52TENCemRISnBibWRwWm5rZ2FYUXVYRzRnSUNBZ0lDQWdJR2xtSUNobGRtVnVkQzVrWVhSaElDWW1JR1YyWlc1MExtUmhkR0VnYVc1emRHRnVZMlZ2WmlCQ2JHOWlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1oaGJtUnNaVTl1VFdWemMyRm5aVUpwYm1GeWVTaGxkbVZ1ZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCamIyNXpkQ0J0WlhOellXZGxPaUJOWlhOellXZGxVbVZqWldsMlpTNU5aWE56WVdkbFVtVmpkaUE5SUVwVFQwNHVjR0Z5YzJVb1pYWmxiblF1WkdGMFlTazdYRzRnSUNBZ0lDQWdJRXh2WjJkbGNpNU1iMmNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdKM0psWTJWcGRtVmtJRDArSUZ4Y2JpY2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXBUVDA0dWMzUnlhVzVuYVdaNUtFcFRUMDR1Y0dGeWMyVW9aWFpsYm5RdVpHRjBZU2tzSUhWdVpHVm1hVzVsWkN3Z05Da3NYRzRnSUNBZ0lDQWdJQ0FnSUNBMlhHNGdJQ0FnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1UyVnVaQ0IwYnlCdmRYSWdjMmxuYm1Gc2JHbHVaeUJ3Y205MGIyTnZiQ0IwYnlCb1lXNWtiR1VnZEdobElHbHVZMjl0YVc1bklHMWxjM05oWjJWY2JpQWdJQ0FnSUNBZ2RHaHBjeTV6YVdkdVlXeHNhVzVuVUhKdmRHOWpiMnd1YUdGdVpHeGxUV1Z6YzJGblpTaHRaWE56WVdkbExuUjVjR1VzSUdWMlpXNTBMbVJoZEdFcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFaGhibVJzWlhNZ2QyaGxiaUIwYUdVZ1YyVmljMjlqYTJWMElHbHpJRzl3Wlc1bFpGeHVJQ0FnSUNBcUlFQndZWEpoYlNCbGRtVnVkQ0F0SUU1dmRDQlZjMlZrWEc0Z0lDQWdJQ292WEc0Z0lDQWdMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRibVY0ZEMxc2FXNWxJRUIwZVhCbGMyTnlhWEIwTFdWemJHbHVkQzl1YnkxMWJuVnpaV1F0ZG1GeWMxeHVJQ0FnSUdoaGJtUnNaVTl1VDNCbGJpaGxkbVZ1ZERvZ1JYWmxiblFwSUh0Y2JpQWdJQ0FnSUNBZ1RHOW5aMlZ5TGt4dlp5aGNiaUFnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBblEyOXVibVZqZEdWa0lIUnZJSFJvWlNCemFXZHVZV3hzYVc1bklITmxjblpsY2lCMmFXRWdWMlZpVTI5amEyVjBKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lEWmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXZiazl3Wlc0dVpHbHpjR0YwWTJoRmRtVnVkQ2h1WlhjZ1JYWmxiblFvSjI5d1pXNG5LU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nU0dGdVpHeGxjeUIzYUdWdUlIUm9aWEpsSUdseklHRnVJR1Z5Y205eUlHOXVJSFJvWlNCM1pXSnpiMk5yWlhSY2JpQWdJQ0FnS2lCQWNHRnlZVzBnWlhabGJuUWdMU0JGY25KdmNpQlFZWGxzYjJGa1hHNGdJQ0FnSUNvdlhHNGdJQ0FnYUdGdVpHeGxUMjVGY25KdmNpZ3BJSHRjYmlBZ0lDQWdJQ0FnVEc5bloyVnlMa1Z5Y205eUtFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzSUNkWFpXSlRiMk5yWlhRZ1pYSnliM0luS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSVlXNWtiR1Z6SUhkb1pXNGdkR2hsSUZkbFluTnZZMnRsZENCcGN5QmpiRzl6WldSY2JpQWdJQ0FnS2lCQWNHRnlZVzBnWlhabGJuUWdMU0JEYkc5elpTQkZkbVZ1ZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJR2hoYm1Sc1pVOXVRMnh2YzJVb1pYWmxiblE2SUVOc2IzTmxSWFpsYm5RcElIdGNiaUFnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5SR2x6WTI5dWJtVmpkR1ZrSUhSdklIUm9aU0J6YVdkdVlXeHNhVzVuSUhObGNuWmxjaUIyYVdFZ1YyVmlVMjlqYTJWME9pQW5JQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JLVTA5T0xuTjBjbWx1WjJsbWVTaGxkbVZ1ZEM1amIyUmxLU0FyWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSnlBdElDY2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1YyWlc1MExuSmxZWE52Ymx4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG05dVEyeHZjMlV1WkdsemNHRjBZMmhGZG1WdWRDaHVaWGNnUTNWemRHOXRSWFpsYm5Rb0oyTnNiM05sSnl3Z2V5QW5aR1YwWVdsc0p6b2daWFpsYm5RZ2ZTa3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxjWFZsYzNSVGRISmxZVzFsY2t4cGMzUW9LU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSEJoZVd4dllXUWdQU0J1WlhjZ1RXVnpjMkZuWlZObGJtUXVUV1Z6YzJGblpVeHBjM1JUZEhKbFlXMWxjbk1vS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUzWldKVGIyTnJaWFF1YzJWdVpDaHdZWGxzYjJGa0xuQmhlV3h2WVdRb0tTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2MyVnVaRk4xWW5OamNtbGlaU2h6ZEhKbFlXMWxjbWxrT2lCemRISnBibWNwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnY0dGNWJHOWhaQ0E5SUc1bGR5Qk5aWE56WVdkbFUyVnVaQzVOWlhOellXZGxVM1ZpYzJOeWFXSmxLSE4wY21WaGJXVnlhV1FwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbmRsWWxOdlkydGxkQzV6Wlc1a0tIQmhlV3h2WVdRdWNHRjViRzloWkNncEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCelpXNWtWVzV6ZFdKelkzSnBZbVVvS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhCaGVXeHZZV1FnUFNCdVpYY2dUV1Z6YzJGblpWTmxibVF1VFdWemMyRm5aVlZ1YzNWaWMyTnlhV0psS0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZDJWaVUyOWphMlYwTG5ObGJtUW9jR0Y1Ykc5aFpDNXdZWGxzYjJGa0tDa3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lITmxibVJYWldKU2RHTlBabVpsY2lodlptWmxjam9nVWxSRFUyVnpjMmx2YmtSbGMyTnlhWEIwYVc5dVNXNXBkQ3dnWlhoMGNtRlFZWEpoYlhNNklFMWxjM05oWjJWVFpXNWtMa1Y0ZEhKaFQyWm1aWEpRWVhKaGJXVjBaWEp6S1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhCaGVXeHZZV1FnUFNCdVpYY2dUV1Z6YzJGblpWTmxibVF1VFdWemMyRm5aVmRsWWxKVVEwOW1abVZ5S0c5bVptVnlMQ0JsZUhSeVlWQmhjbUZ0Y3lrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZDJWaVUyOWphMlYwTG5ObGJtUW9jR0Y1Ykc5aFpDNXdZWGxzYjJGa0tDa3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lITmxibVJYWldKU2RHTkJibk4zWlhJb1lXNXpkMlZ5T2lCU1ZFTlRaWE56YVc5dVJHVnpZM0pwY0hScGIyNUpibWwwTENCbGVIUnlZVkJoY21GdGN6b2dUV1Z6YzJGblpWTmxibVF1UlhoMGNtRkJibk4zWlhKUVlYSmhiV1YwWlhKektTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElIQmhlV3h2WVdRZ1BTQnVaWGNnVFdWemMyRm5aVk5sYm1RdVRXVnpjMkZuWlZkbFlsSlVRMEZ1YzNkbGNpaGhibk4zWlhJc0lHVjRkSEpoVUdGeVlXMXpLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTNaV0pUYjJOclpYUXVjMlZ1WkNod1lYbHNiMkZrTG5CaGVXeHZZV1FvS1NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYzJWdVpGZGxZbEowWTBSaGRHRmphR0Z1Ym1Wc1VtVnhkV1Z6ZENncElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2NHRjViRzloWkNBOUlHNWxkeUJOWlhOellXZGxVMlZ1WkM1TlpYTnpZV2RsVjJWaVVsUkRSR0YwWVdOb1lXNXVaV3hTWlhGMVpYTjBLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkMlZpVTI5amEyVjBMbk5sYm1Rb2NHRjViRzloWkM1d1lYbHNiMkZrS0NrcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhObGJtUlRSbFZTWldOMlJHRjBZVU5vWVc1dVpXeFNaV0ZrZVNncElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2NHRjViRzloWkNBOUlHNWxkeUJOWlhOellXZGxVMlZ1WkM1TlpYTnpZV2RsVTBaVlVtVmpka1JoZEdGRGFHRnVibVZzVW1WaFpIa29LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTNaV0pUYjJOclpYUXVjMlZ1WkNod1lYbHNiMkZrTG5CaGVXeHZZV1FvS1NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVnVaSE1nWVc0Z1VsUkRJRWxqWlNCRFlXNWthV1JoZEdVZ2RHOGdkR2hsSUZObGNuWmxjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmpZVzVrYVdSaGRHVWdMU0JTVkVNZ1NXTmxJRU5oYm1ScFpHRjBaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lITmxibVJKWTJWRFlXNWthV1JoZEdVb1kyRnVaR2xrWVhSbE9pQlNWRU5KWTJWRFlXNWthV1JoZEdVcElIdGNiaUFnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExDQW5VMlZ1WkdsdVp5QkpZMlVnUTJGdVpHbGtZWFJsSnlrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZDJWaVUyOWphMlYwSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuZGxZbE52WTJ0bGRDNXlaV0ZrZVZOMFlYUmxJRDA5UFNCMGFHbHpMbGRUWDA5UVJVNWZVMVJCVkVWY2JpQWdJQ0FnSUNBZ0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkwzZHpMbk5sYm1Rb1NsTlBUaTV6ZEhKcGJtZHBabmtvZXlCMGVYQmxPaUFuYVdObFEyRnVaR2xrWVhSbEp5d2dZMkZ1Wkdsa1lYUmxPaUJqWVc1a2FXUmhkR1VnZlNrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdTV05sUTJGdVpHbGtZWFJsSUQwZ2JtVjNJRTFsYzNOaFoyVlRaVzVrTGsxbGMzTmhaMlZKWTJWRFlXNWthV1JoZEdVb1kyRnVaR2xrWVhSbEtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUzWldKVGIyTnJaWFF1YzJWdVpDaEpZMlZEWVc1a2FXUmhkR1V1Y0dGNWJHOWhaQ2dwS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFTnNiM05sY3lCMGFHVWdWMlZpYzI5amEyVjBJR052Ym01bFkzUnBiMjVjYmlBZ0lDQWdLaTljYmlBZ0lDQmpiRzl6WlNncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1M1pXSlRiMk5yWlhRL0xtTnNiM05sS0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1ZHaGxJRTFsYzNOaFoyVWdRMjl1ZEdGcGJuTWdkR2hsSUhCaGVXeHZZV1FnYjJZZ2RHaGxJSEJsWlhJZ1kyOXVibVZqZEdsdmJpQnZjSFJwYjI1eklIVnpaV1FnWm05eUlIUm9aU0JTVkVNZ1VHVmxjaUJvWVc1a0lITm9ZV3RsWEc0Z0lDQWdJQ29nUUhCaGNtRnRJRzFsYzNOaFoyVkRiMjVtYVdjZ0xTQkRiMjVtYVdjZ1RXVnpjMkZuWlNCeVpXTmxhWFpsWkNCbWNtOXRJR2hsSUhOcFoyNWhiR2x1WnlCelpYSjJaWEpjYmlBZ0lDQWdLaTljYmlBZ0lDQXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXVaWGgwTFd4cGJtVWdRSFI1Y0dWelkzSnBjSFF0WlhOc2FXNTBMMjV2TFhWdWRYTmxaQzEyWVhKekxDQkFkSGx3WlhOamNtbHdkQzFsYzJ4cGJuUXZibTh0Wlcxd2RIa3RablZ1WTNScGIyNWNiaUFnSUNCdmJrTnZibVpwWnlodFpYTnpZV2RsUTI5dVptbG5PaUJOWlhOellXZGxVbVZqWldsMlpTNU5aWE56WVdkbFEyOXVabWxuS1NCN2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dWR2hsSUUxbGMzTmhaMlVnWTI5dWRHRnBibk1nWVd4c0lIUm9aU0JwWkhNZ2IyWWdjM1J5WldGdFpYSnpJR0YyWVdsc1lXSnNaU0J2YmlCMGFHVWdjMlZ5ZG1WeUxseHVJQ0FnSUNBcUlFQndZWEpoYlNCdFpYTnpZV2RsVTNSeVpXRnRaWEpNYVhOMElDMGdWR2hsSUcxbGMzTmhaMlVnZDJsMGFDQjBhR1VnYkdsemRDQnZaaUIwYUdVZ1lYWmhhV3hoWW14bElITjBjbVZoYldWeUlHbGtjeTVjYmlBZ0lDQWdLaTljYmlBZ0lDQXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXVaWGgwTFd4cGJtVWdRSFI1Y0dWelkzSnBjSFF0WlhOc2FXNTBMMjV2TFhWdWRYTmxaQzEyWVhKekxDQkFkSGx3WlhOamNtbHdkQzFsYzJ4cGJuUXZibTh0Wlcxd2RIa3RablZ1WTNScGIyNWNiaUFnSUNCdmJsTjBjbVZoYldWeVRHbHpkQ2h0WlhOellXZGxVM1J5WldGdFpYSk1hWE4wT2lCTlpYTnpZV2RsVW1WalpXbDJaUzVOWlhOellXZGxVM1J5WldGdFpYSk1hWE4wS1NCN2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dWR2hsSUUxbGMzTmhaMlVnWTI5dWRHRnBibk1nZEdobElHNWxkeUJwWkNCdlppQmhJSE4xWW5OamNtbGlaV1FnZEc4Z2MzUnlaV0Z0WlhJdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUcxbGMzTmhaMlVnTFNCTlpYTnpZV2RsSUdOdmJtRnBibWx1WnlCMGFHVWdibVYzSUdsa0lHOW1JSFJvWlNCemRISmxZVzFsY2k1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0F2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnUUhSNWNHVnpZM0pwY0hRdFpYTnNhVzUwTDI1dkxYVnVkWE5sWkMxMllYSnpMQ0JBZEhsd1pYTmpjbWx3ZEMxbGMyeHBiblF2Ym04dFpXMXdkSGt0Wm5WdVkzUnBiMjVjYmlBZ0lDQnZibE4wY21WaGJXVnlTVVJEYUdGdVoyVmtLRzFsYzNOaFoyVTZJRTFsYzNOaFoyVlNaV05sYVhabExrMWxjM05oWjJWVGRISmxZVzFsY2tsRVEyaGhibWRsWkNrZ2UzMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnBZMlZEWVc1a2FXUmhkR1VnTFNCSlkyVWdRMkZ1Wkdsa1lYUmxJSE5sYm5RZ1puSnZiU0IwYUdVZ1UybG5ibUZzYVc1bklITmxjblpsY2lCelpYSjJaWEluY3lCU1ZFTWdhR0Z1WkNCemFHRnJaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXNWxlSFF0YkdsdVpTQkFkSGx3WlhOamNtbHdkQzFsYzJ4cGJuUXZibTh0ZFc1MWMyVmtMWFpoY25Nc0lFQjBlWEJsYzJOeWFYQjBMV1Z6YkdsdWRDOXVieTFsYlhCMGVTMW1kVzVqZEdsdmJseHVJQ0FnSUc5dVNXTmxRMkZ1Wkdsa1lYUmxLR2xqWlVOaGJtUnBaR0YwWlRvZ1VsUkRTV05sUTJGdVpHbGtZWFJsU1c1cGRDa2dlMzFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVWMlpXNTBJR2x6SUdacGNtVmtJSGRvWlc0Z2RHaGxJSGRsWW5OdlkydGxkQ0J5WldObGFYWmxjeUIwYUdVZ1lXNXpkMlZ5SUdadmNpQjBhR1VnVWxSRElIQmxaWElnUTI5dWJtVmpkR2x2Ymx4dUlDQWdJQ0FxSUVCd1lYSmhiU0J0WlhOellXZGxRVzV6ZDJWeUlDMGdWR2hsSUZKVVF5QkJibk4zWlhJZ2NHRjViRzloWkNCbWNtOXRJSFJvWlNCemFXZHVZV3hwYm1jZ2MyVnlkbVZ5WEc0Z0lDQWdJQ292WEc0Z0lDQWdMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRibVY0ZEMxc2FXNWxJRUIwZVhCbGMyTnlhWEIwTFdWemJHbHVkQzl1YnkxMWJuVnpaV1F0ZG1GeWN5d2dRSFI1Y0dWelkzSnBjSFF0WlhOc2FXNTBMMjV2TFdWdGNIUjVMV1oxYm1OMGFXOXVYRzRnSUNBZ2IyNVhaV0pTZEdOQmJuTjNaWElvYldWemMyRm5aVUZ1YzNkbGNqb2dUV1Z6YzJGblpWSmxZMlZwZG1VdVRXVnpjMkZuWlVGdWMzZGxjaWtnZTMxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFVjJaVzUwSUdseklHWnBjbVZrSUhkb1pXNGdkR2hsSUhkbFluTnZZMnRsZENCeVpXTmxhWFpsY3lCMGFHVWdiMlptWlhJZ1ptOXlJSFJvWlNCU1ZFTWdjR1ZsY2lCRGIyNXVaV04wYVc5dVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUcxbGMzTmhaMlZQWm1abGNpQXRJRlJvWlNCelpIQWdiMlptWlhKY2JpQWdJQ0FnS2k5Y2JpQWdJQ0F2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnUUhSNWNHVnpZM0pwY0hRdFpYTnNhVzUwTDI1dkxYVnVkWE5sWkMxMllYSnpMQ0JBZEhsd1pYTmpjbWx3ZEMxbGMyeHBiblF2Ym04dFpXMXdkSGt0Wm5WdVkzUnBiMjVjYmlBZ0lDQnZibGRsWWxKMFkwOW1abVZ5S0cxbGMzTmhaMlZQWm1abGNqb2dUV1Z6YzJGblpWSmxZMlZwZG1VdVRXVnpjMkZuWlU5bVptVnlLU0I3ZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1JYWmxiblFnYVhNZ1ptbHlaV1FnZDJobGJpQjBhR1VnZDJWaWMyOWphMlYwSUhKbFkyVnBkbVZ6SUhSb1pTQmtZWFJoSUdOb1lXNXVaV3h6SUdadmNpQjBhR1VnVWxSRElIQmxaWElnUTI5dWJtVmpkR2x2YmlCbWNtOXRJSFJvWlNCVFJsVmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2JXVnpjMkZuWlVSaGRHRkRhR0Z1Ym1Wc2N5QXRJRlJvWlNCa1lYUmhJR05vWVc1dVpXeHpJR1JsZEdGcGJITmNiaUFnSUNBZ0tpOWNiaUFnSUNBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxdVpYaDBMV3hwYm1VZ1FIUjVjR1Z6WTNKcGNIUXRaWE5zYVc1MEwyNXZMWFZ1ZFhObFpDMTJZWEp6TENCQWRIbHdaWE5qY21sd2RDMWxjMnhwYm5RdmJtOHRaVzF3ZEhrdFpuVnVZM1JwYjI1Y2JpQWdJQ0J2YmxkbFlsSjBZMUJsWlhKRVlYUmhRMmhoYm01bGJITW9iV1Z6YzJGblpVUmhkR0ZEYUdGdWJtVnNjem9nVFdWemMyRm5aVkpsWTJWcGRtVXVUV1Z6YzJGblpWQmxaWEpFWVhSaFEyaGhibTVsYkhNcElIdDlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJGZG1WdWRDQnBjeUJtYVhKbFpDQjNhR1Z1SUhSb1pTQjNaV0p6YjJOclpYUWdjbVZqWldsMlpYTWdkR2hsSUdGdUlIVndaR0YwWldRZ2NHeGhlV1Z5SUdOdmRXNTBJR1p5YjIwZ1kybHljblZ6WEc0Z0lDQWdJQ29nUUhCaGNtRnRJRTFsYzNOaFoyVlFiR0Y1WlhKRGIzVnVkQ0F0SUZSb1pTQnVaWGNnY0d4aGVXVnlJR052ZFc1MFhHNGdJQ0FnSUNvdlhHNGdJQ0FnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUVCMGVYQmxjMk55YVhCMExXVnpiR2x1ZEM5dWJ5MTFiblZ6WldRdGRtRnljeXdnUUhSNWNHVnpZM0pwY0hRdFpYTnNhVzUwTDI1dkxXVnRjSFI1TFdaMWJtTjBhVzl1WEc0Z0lDQWdiMjVRYkdGNVpYSkRiM1Z1ZENod2JHRjVaWEpEYjNWdWREb2dUV1Z6YzJGblpWSmxZMlZwZG1VdVRXVnpjMkZuWlZCc1lYbGxja052ZFc1MEtTQjdmVnh1ZlZ4dUlpd2lMeThnUTI5d2VYSnBaMmgwSUVWd2FXTWdSMkZ0WlhNc0lFbHVZeTRnUVd4c0lGSnBaMmgwY3lCU1pYTmxjblpsWkM1Y2JseHVhVzF3YjNKMElIc2dURzluWjJWeUlIMGdabkp2YlNBbkxpNHZURzluWjJWeUwweHZaMmRsY2ljN1hHNXBiWEJ2Y25RZ2V5QlhaV0pTZEdOUWJHRjVaWEpEYjI1MGNtOXNiR1Z5SUgwZ1puSnZiU0FuTGk0dlYyVmlVblJqVUd4aGVXVnlMMWRsWWxKMFkxQnNZWGxsY2tOdmJuUnliMnhzWlhJbk8xeHVhVzF3YjNKMElIc2dXRkpIWVcxbGNHRmtRMjl1ZEhKdmJHeGxjaUI5SUdaeWIyMGdKeTR1TDBsdWNIVjBjeTlZVWtkaGJXVndZV1JEYjI1MGNtOXNiR1Z5Snp0Y2JtbHRjRzl5ZENCN0lGaHlSbkpoYldWRmRtVnVkQ0I5SUdaeWIyMGdKeTR1TDFWMGFXd3ZSWFpsYm5SRmJXbDBkR1Z5SjF4dWFXMXdiM0owSUhzZ1JteGhaM01nZlNCbWNtOXRJQ2N1TGk5d2FYaGxiSE4wY21WaGJXbHVaMlp5YjI1MFpXNWtKenRjYmx4dVpYaHdiM0owSUdOc1lYTnpJRmRsWWxoU1EyOXVkSEp2Ykd4bGNpQjdYRzRnSUNBZ2NISnBkbUYwWlNCNGNsTmxjM05wYjI0NklGaFNVMlZ6YzJsdmJqdGNiaUFnSUNCd2NtbDJZWFJsSUhoeVVtVm1VM0JoWTJVNklGaFNVbVZtWlhKbGJtTmxVM0JoWTJVN1hHNGdJQ0FnY0hKcGRtRjBaU0JuYkRvZ1YyVmlSMHd5VW1WdVpHVnlhVzVuUTI5dWRHVjRkRHRjYmlBZ0lDQndjbWwyWVhSbElIaHlWbWxsZDJWeVVHOXpaU0E2SUZoU1ZtbGxkMlZ5VUc5elpTQTlJRzUxYkd3N1hHNWNiaUFnSUNCd2NtbDJZWFJsSUhCdmMybDBhVzl1VEc5allYUnBiMjQ2SUc1MWJXSmxjanRjYmlBZ0lDQndjbWwyWVhSbElIUmxlR052YjNKa1RHOWpZWFJwYjI0NklHNTFiV0psY2p0Y2JseHVJQ0FnSUhCeWFYWmhkR1VnY0c5emFYUnBiMjVDZFdabVpYSTZJRmRsWWtkTVFuVm1abVZ5TzF4dUlDQWdJSEJ5YVhaaGRHVWdkR1Y0WTI5dmNtUkNkV1ptWlhJNklGZGxZa2RNUW5WbVptVnlPMXh1WEc0Z0lDQWdjSEpwZG1GMFpTQjJhV1JsYjFSbGVIUjFjbVU2SUZkbFlrZE1WR1Y0ZEhWeVpTQTlJRzUxYkd3N1hHNGdJQ0FnY0hKcGRtRjBaU0J3Y21WMlZtbGtaVzlYYVdSMGFEb2diblZ0WW1WeUlEMGdNRHRjYmlBZ0lDQndjbWwyWVhSbElIQnlaWFpXYVdSbGIwaGxhV2RvZERvZ2JuVnRZbVZ5SUQwZ01EdGNibHh1SUNBZ0lIQnlhWFpoZEdVZ2QyVmlVblJqUTI5dWRISnZiR3hsY2pvZ1YyVmlVblJqVUd4aGVXVnlRMjl1ZEhKdmJHeGxjanRjYmlBZ0lDQndjbWwyWVhSbElIaHlSMkZ0WlhCaFpFTnZiblJ5YjJ4c1pYSTZJRmhTUjJGdFpYQmhaRU52Ym5SeWIyeHNaWEk3WEc1Y2JpQWdJQ0J3Y21sMllYUmxJR3hsWm5SV2FXVjNPaUJZVWxacFpYY2dQU0J1ZFd4c08xeHVJQ0FnSUhCeWFYWmhkR1VnY21sbmFIUldhV1YzT2lCWVVsWnBaWGNnUFNCdWRXeHNPMXh1WEc0Z0lDQWdiMjVUWlhOemFXOXVVM1JoY25SbFpEb2dSWFpsYm5SVVlYSm5aWFE3WEc0Z0lDQWdiMjVUWlhOemFXOXVSVzVrWldRNklFVjJaVzUwVkdGeVoyVjBPMXh1SUNBZ0lHOXVSbkpoYldVNklFVjJaVzUwVkdGeVoyVjBPMXh1WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvZDJWaVVuUmpVR3hoZVdWeVEyOXVkSEp2Ykd4bGNqb2dWMlZpVW5SalVHeGhlV1Z5UTI5dWRISnZiR3hsY2lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5oeVUyVnpjMmx2YmlBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkMlZpVW5SalEyOXVkSEp2Ykd4bGNpQTlJSGRsWWxKMFkxQnNZWGxsY2tOdmJuUnliMnhzWlhJN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZUhKSFlXMWxjR0ZrUTI5dWRISnZiR3hsY2lBOUlHNWxkeUJZVWtkaGJXVndZV1JEYjI1MGNtOXNiR1Z5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1M1pXSlNkR05EYjI1MGNtOXNiR1Z5TG5OMGNtVmhiVTFsYzNOaFoyVkRiMjUwY205c2JHVnlYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViMjVUWlhOemFXOXVSVzVrWldRZ1BTQnVaWGNnUlhabGJuUlVZWEpuWlhRb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dmJsTmxjM05wYjI1VGRHRnlkR1ZrSUQwZ2JtVjNJRVYyWlc1MFZHRnlaMlYwS0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YjI1R2NtRnRaU0E5SUc1bGR5QkZkbVZ1ZEZSaGNtZGxkQ2dwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEIxWW14cFl5QjRja05zYVdOclpXUW9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1NGNsTmxjM05wYjI0cElIdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWW9JVzVoZG1sbllYUnZjaTU0Y2lsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGtWeWNtOXlLRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc0lGd2lWR2hwY3lCaWNtOTNjMlZ5SUdSdlpYTWdibTkwSUhOMWNIQnZjblFnV0ZJdVhDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYm1GMmFXZGhkRzl5TG5oeVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dVbVZ4ZFdWemRDQnBiVzFsY25OcGRtVXRkbklnYzJWemMybHZiaUIzYVhSb2IzVjBJR0Z1ZVNCdmNIUnBiMjVoYkNCbVpXRjBkWEpsY3k0Z0tpOWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVjbVZ4ZFdWemRGTmxjM05wYjI0b0oybHRiV1Z5YzJsMlpTMTJjaWNzSUhzZ2IzQjBhVzl1WVd4R1pXRjBkWEpsY3pvZ1cxMGdmU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1ZEdobGJpZ29jMlZ6YzJsdmJqb2dXRkpUWlhOemFXOXVLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWIyNVljbE5sYzNOcGIyNVRkR0Z5ZEdWa0tITmxjM05wYjI0cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTU0Y2xObGMzTnBiMjR1Wlc1a0tDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnZibGh5VTJWemMybHZia1Z1WkdWa0tDa2dlMXh1SUNBZ0lDQWdJQ0JNYjJkblpYSXVURzluS0V4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NJQ2RZVWlCVFpYTnphVzl1SUdWdVpHVmtKeWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVlSEpUWlhOemFXOXVJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dmJsTmxjM05wYjI1RmJtUmxaQzVrYVhOd1lYUmphRVYyWlc1MEtHNWxkeUJGZG1WdWRDZ25lSEpUWlhOemFXOXVSVzVrWldRbktTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXNXBkRWRNS0NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NW5iQ2tnZXlCeVpYUjFjbTQ3SUgxY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWTJGdWRtRnpJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDZ25ZMkZ1ZG1Gekp5azdYRzRnSUNBZ0lDQWdJSFJvYVhNdVoyd2dQU0JqWVc1MllYTXVaMlYwUTI5dWRHVjRkQ2duZDJWaVoyd3lKeXdnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdlSEpEYjIxd1lYUnBZbXhsT2lCMGNuVmxYRzRnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJRk5sZENCdmRYSWdZMnhsWVhJZ1kyOXNiM0pjYmlBZ0lDQWdJQ0FnZEdocGN5NW5iQzVqYkdWaGNrTnZiRzl5S0RBdU1Dd2dNQzR3TENBd0xqQXNJREVwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2x1YVhSVGFHRmtaWEp6S0NrZ2UxeHVYRzRnSUNBZ0lDQWdJQzh2SUhOb1lXUmxjaUJ6YjNWeVkyVWdZMjlrWlZ4dUlDQWdJQ0FnSUNCamIyNXpkQ0IyWlhKMFpYaFRhR0ZrWlhKVGIzVnlZMlU2SUhOMGNtbHVaeUE5WEc0Z0lDQWdJQ0FnSUdCY2JpQWdJQ0FnSUNBZ1lYUjBjbWxpZFhSbElIWmxZeklnWVY5d2IzTnBkR2x2Ymp0Y2JpQWdJQ0FnSUNBZ1lYUjBjbWxpZFhSbElIWmxZeklnWVY5MFpYaERiMjl5WkR0Y2JseHVJQ0FnSUNBZ0lDQXZMeUIyWVhKNWFXNW5jMXh1SUNBZ0lDQWdJQ0IyWVhKNWFXNW5JSFpsWXpJZ2RsOTBaWGhEYjI5eVpEdGNibHh1SUNBZ0lDQWdJQ0IyYjJsa0lHMWhhVzRvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJR2RzWDFCdmMybDBhVzl1SUQwZ2RtVmpOQ2hoWDNCdmMybDBhVzl1TG5nc0lHRmZjRzl6YVhScGIyNHVlU3dnTUN3Z01TazdYRzRnSUNBZ0lDQWdJQ0FnSUM4dklIQmhjM01nZEdobElIUmxlRU52YjNKa0lIUnZJSFJvWlNCbWNtRm5iV1Z1ZENCemFHRmtaWEpjYmlBZ0lDQWdJQ0FnSUNBZ0x5OGdWR2hsSUVkUVZTQjNhV3hzSUdsdWRHVnljRzlzWVhSbElIUm9hWE1nZG1Gc2RXVWdZbVYwZDJWbGJpQndiMmx1ZEhNdVhHNGdJQ0FnSUNBZ0lDQWdJSFpmZEdWNFEyOXZjbVFnUFNCaFgzUmxlRU52YjNKa08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR0E3WEc1Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWm5KaFoyMWxiblJUYUdGa1pYSlRiM1Z5WTJVNklITjBjbWx1WnlBOVhHNGdJQ0FnSUNBZ0lHQmNiaUFnSUNBZ0lDQWdjSEpsWTJsemFXOXVJRzFsWkdsMWJYQWdabXh2WVhRN1hHNWNiaUFnSUNBZ0lDQWdMeThnYjNWeUlIUmxlSFIxY21WY2JpQWdJQ0FnSUNBZ2RXNXBabTl5YlNCellXMXdiR1Z5TWtRZ2RWOXBiV0ZuWlR0Y2JseHVJQ0FnSUNBZ0lDQXZMeUIwYUdVZ2RHVjRRMjl2Y21SeklIQmhjM05sWkNCcGJpQm1jbTl0SUhSb1pTQjJaWEowWlhnZ2MyaGhaR1Z5TGx4dUlDQWdJQ0FnSUNCMllYSjVhVzVuSUhabFl6SWdkbDkwWlhoRGIyOXlaRHRjYmx4dUlDQWdJQ0FnSUNCMmIybGtJRzFoYVc0b0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUdkc1gwWnlZV2REYjJ4dmNpQTlJSFJsZUhSMWNtVXlSQ2gxWDJsdFlXZGxMQ0IyWDNSbGVFTnZiM0prS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmdPMXh1WEc0Z0lDQWdJQ0FnSUM4dklITmxkSFZ3SUhabGNuUmxlQ0J6YUdGa1pYSmNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2RtVnlkR1Y0VTJoaFpHVnlJRDBnZEdocGN5NW5iQzVqY21WaGRHVlRhR0ZrWlhJb2RHaHBjeTVuYkM1V1JWSlVSVmhmVTBoQlJFVlNLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NW5iQzV6YUdGa1pYSlRiM1Z5WTJVb2RtVnlkR1Y0VTJoaFpHVnlMQ0IyWlhKMFpYaFRhR0ZrWlhKVGIzVnlZMlVwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbWRzTG1OdmJYQnBiR1ZUYUdGa1pYSW9kbVZ5ZEdWNFUyaGhaR1Z5S1R0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJ6WlhSMWNDQm1jbUZuYldWdWRDQnphR0ZrWlhKY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWm5KaFoyMWxiblJUYUdGa1pYSWdQU0IwYUdsekxtZHNMbU55WldGMFpWTm9ZV1JsY2loMGFHbHpMbWRzTGtaU1FVZE5SVTVVWDFOSVFVUkZVaWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaMnd1YzJoaFpHVnlVMjkxY21ObEtHWnlZV2R0Wlc1MFUyaGhaR1Z5TENCbWNtRm5iV1Z1ZEZOb1lXUmxjbE52ZFhKalpTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVoyd3VZMjl0Y0dsc1pWTm9ZV1JsY2lobWNtRm5iV1Z1ZEZOb1lXUmxjaWs3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdjMlYwZFhBZ1IweFRUQ0J3Y205bmNtRnRYRzRnSUNBZ0lDQWdJR052Ym5OMElITm9ZV1JsY2xCeWIyZHlZVzBnUFNCMGFHbHpMbWRzTG1OeVpXRjBaVkJ5YjJkeVlXMG9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NW5iQzVoZEhSaFkyaFRhR0ZrWlhJb2MyaGhaR1Z5VUhKdlozSmhiU3dnZG1WeWRHVjRVMmhoWkdWeUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bmJDNWhkSFJoWTJoVGFHRmtaWElvYzJoaFpHVnlVSEp2WjNKaGJTd2dabkpoWjIxbGJuUlRhR0ZrWlhJcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1kc0xteHBibXRRY205bmNtRnRLSE5vWVdSbGNsQnliMmR5WVcwcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1kc0xuVnpaVkJ5YjJkeVlXMG9jMmhoWkdWeVVISnZaM0poYlNrN1hHNWNiaUFnSUNBZ0lDQWdMeThnYkc5dmF5QjFjQ0IzYUdWeVpTQjJaWEowWlhnZ1pHRjBZU0J1WldWa2N5QjBieUJuYjF4dUlDQWdJQ0FnSUNCMGFHbHpMbkJ2YzJsMGFXOXVURzlqWVhScGIyNGdQU0IwYUdsekxtZHNMbWRsZEVGMGRISnBZa3h2WTJGMGFXOXVLRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MyaGhaR1Z5VUhKdlozSmhiU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDZGhYM0J2YzJsMGFXOXVKMXh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMblJsZUdOdmIzSmtURzlqWVhScGIyNGdQU0IwYUdsekxtZHNMbWRsZEVGMGRISnBZa3h2WTJGMGFXOXVLRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MyaGhaR1Z5VUhKdlozSmhiU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDZGhYM1JsZUVOdmIzSmtKMXh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSFZ3WkdGMFpWWnBaR1Z2VkdWNGRIVnlaU2dwZTF4dVhHNGdJQ0FnSUNBZ0lHbG1LQ0YwYUdsekxuWnBaR1Z2VkdWNGRIVnlaU2w3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJEY21WaGRHVWdiM1Z5SUhSbGVIUjFjbVVnZEdoaGRDQjNaU0IxYzJVZ2FXNGdiM1Z5SUhOb1lXUmxjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdZVzVrSUdKcGJtUWdhWFFnYjI1alpTQmlaV05oZFhObElIZGxJRzVsZG1WeUlIVnpaU0JoYm5rZ2IzUm9aWElnZEdWNGRIVnlaUzVjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZG1sa1pXOVVaWGgwZFhKbElEMGdkR2hwY3k1bmJDNWpjbVZoZEdWVVpYaDBkWEpsS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtZHNMbUpwYm1SVVpYaDBkWEpsS0hSb2FYTXVaMnd1VkVWWVZGVlNSVjh5UkN3Z2RHaHBjeTUyYVdSbGIxUmxlSFIxY21VcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlRaWFFnZEdobElIQmhjbUZ0WlhSbGNuTWdjMjhnZDJVZ1kyRnVJSEpsYm1SbGNpQmhibmtnYzJsNlpTQnBiV0ZuWlM1Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVoyd3VkR1Y0VUdGeVlXMWxkR1Z5YVNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWRzTGxSRldGUlZVa1ZmTWtRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVuYkM1VVJWaFVWVkpGWDFkU1FWQmZVeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtZHNMa05NUVUxUVgxUlBYMFZFUjBWY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1kc0xuUmxlRkJoY21GdFpYUmxjbWtvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NW5iQzVVUlZoVVZWSkZYekpFTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaMnd1VkVWWVZGVlNSVjlYVWtGUVgxUXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bmJDNURURUZOVUY5VVQxOUZSRWRGWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVuYkM1MFpYaFFZWEpoYldWMFpYSnBLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVoyd3VWRVZZVkZWU1JWOHlSQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtZHNMbFJGV0ZSVlVrVmZUVWxPWDBaSlRGUkZVaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtZHNMa3hKVGtWQlVseHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVoyd3VkR1Y0VUdGeVlXMWxkR1Z5YVNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWRzTGxSRldGUlZVa1ZmTWtRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVuYkM1VVJWaFVWVkpGWDAxQlIxOUdTVXhVUlZJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVuYkM1TVNVNUZRVkpjYmlBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCc1pYUWdkbWxrWlc5SVpXbG5hSFFnUFNCMGFHbHpMbmRsWWxKMFkwTnZiblJ5YjJ4c1pYSXVkbWxrWlc5UWJHRjVaWEl1WjJWMFZtbGtaVzlGYkdWdFpXNTBLQ2t1ZG1sa1pXOUlaV2xuYUhRN1hHNGdJQ0FnSUNBZ0lHeGxkQ0IyYVdSbGIxZHBaSFJvSUQwZ2RHaHBjeTUzWldKU2RHTkRiMjUwY205c2JHVnlMblpwWkdWdlVHeGhlV1Z5TG1kbGRGWnBaR1Z2Uld4bGJXVnVkQ2dwTG5acFpHVnZWMmxrZEdnN1hHNWNiaUFnSUNBZ0lDQWdhV1lvZEdocGN5NXdjbVYyVm1sa1pXOUlaV2xuYUhRZ0lUMGdkbWxrWlc5SVpXbG5hSFFnZkh3Z2RHaHBjeTV3Y21WMlZtbGtaVzlYYVdSMGFDQWhQU0IyYVdSbGIxZHBaSFJvS1h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUVSdklHWjFiR3dnZFhCa1lYUmxJRzltSUhSbGVIUjFjbVVnYVdZZ1pHbHRaVzV6YVc5dWN5QmtieUJ1YjNRZ2JXRjBZMmhjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WjJ3dWRHVjRTVzFoWjJVeVJDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1kc0xsUkZXRlJWVWtWZk1rUXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtZHNMbEpIUWtFc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtbGtaVzlYYVdSMGFDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJhV1JsYjBobGFXZG9kQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaMnd1VWtkQ1FTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1kc0xsVk9VMGxIVGtWRVgwSlpWRVVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTNaV0pTZEdORGIyNTBjbTlzYkdWeUxuWnBaR1Z2VUd4aGVXVnlMbWRsZEZacFpHVnZSV3hsYldWdWRDZ3BYRzRnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1NXWWdaR2x0Wlc1emFXOXVjeUJ0WVhSamFDQnFkWE4wSUhWd1pHRjBaU0IwYUdVZ2MzVmlJSEpsWjJsdmJseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NW5iQzUwWlhoVGRXSkpiV0ZuWlRKRUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WjJ3dVZFVllWRlZTUlY4eVJDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJREFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMmFXUmxiMWRwWkhSb0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWnBaR1Z2U0dWcFoyaDBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVoyd3VVa2RDUVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWRzTGxWT1UwbEhUa1ZFWDBKWlZFVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1M1pXSlNkR05EYjI1MGNtOXNiR1Z5TG5acFpHVnZVR3hoZVdWeUxtZGxkRlpwWkdWdlJXeGxiV1Z1ZENncFhHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdMeThnVlhCa1lYUmxJSEJ5WlhZZ2RtbGtaVzhnZDJsa2RHZ3ZhR1ZwWjJoMFhHNGdJQ0FnSUNBZ0lIUm9hWE11Y0hKbGRsWnBaR1Z2U0dWcFoyaDBJRDBnZG1sa1pXOUlaV2xuYUhRN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y0hKbGRsWnBaR1Z2VjJsa2RHZ2dQU0IyYVdSbGIxZHBaSFJvTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2x1YVhSQ2RXWm1aWEp6S0NsN1hHNGdJQ0FnSUNBZ0lDOHZJRU55WldGMFpTQnZkWFFnY0c5emFYUnBiMjRnWW5WbVptVnlJR0Z1WkNCcGRITWdkbVZ5ZEdWNElITm9ZV1JsY2lCaGRIUnlhV0oxZEdWY2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1EzSmxZWFJsSUdFZ1luVm1abVZ5SUhSdklIQjFkQ0IwYUdVZ2RHaGxJSFpsY25ScFkyVnpJRzltSUhSb1pTQndiR0Z1WlNCM1pTQjNhV3hzSUdSeVlYY2dkR2hsSUhacFpHVnZJSE4wY21WaGJTQnZiblJ2WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CdmMybDBhVzl1UW5WbVptVnlJRDBnZEdocGN5NW5iQzVqY21WaGRHVkNkV1ptWlhJb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklFSnBibVFnZEdobElIQnZjMmwwYVc5dUlHSjFabVpsY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bmJDNWlhVzVrUW5WbVptVnlLSFJvYVhNdVoyd3VRVkpTUVZsZlFsVkdSa1ZTTENCMGFHbHpMbkJ2YzJsMGFXOXVRblZtWm1WeUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklFVnVZV0pzWlNCZ2NHOXphWFJwYjI1TWIyTmhkR2x2Ym1BZ2RHOGdZbVVnZFhObFpDQmhjeUIyWlhKMFpYZ2djMmhoWkdWeUlHRjBkSEpwWW5WMFpWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NW5iQzVsYm1GaWJHVldaWEowWlhoQmRIUnlhV0pCY25KaGVTaDBhR2x6TG5CdmMybDBhVzl1VEc5allYUnBiMjRwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCT2IzUmxPaUJ3YjNOcGRHbHZibk1nWVhKbElIQmhjM05sWkNCcGJpQmpiR2x3TFhOd1lXTmxJR052YjNKa2FXNWhkR1Z6SUZzdE1TNHVNVjBnYzI4Z2JtOGdibVZsWkNCMGJ5QmpiMjUyWlhKMElHbHVMWE5vWVdSbGNseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2NISmxkSFJwWlhJdGFXZHViM0psWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1kc0xtSjFabVpsY2tSaGRHRW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bmJDNUJVbEpCV1Y5Q1ZVWkdSVklzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1WM0lFWnNiMkYwTXpKQmNuSmhlU2hiWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDMHhMakFzSUNBeExqQXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBeExqQXNJQ0F4TGpBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzB4TGpBc0lDMHhMakFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDMHhMakFzSUMweExqQXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBeExqQXNJQ0F4TGpBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F4TGpBc0lDMHhMakJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JkS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWRzTGxOVVFWUkpRMTlFVWtGWFhHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCVVpXeHNJSEJ2YzJsMGFXOXVJR0YwZEhKcFluVjBaU0J2WmlCMGFHVWdkbVZ5ZEdWNElITm9ZV1JsY2lCb2IzY2dkRzhnWjJWMElHUmhkR0VnYjNWMElHOW1JSFJvWlNCaWIzVnVaQ0JpZFdabVpYSWdLSFJvWlNCd2IzTnBkR2x2YmtKMVptWmxjaWxjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WjJ3dWRtVnlkR1Y0UVhSMGNtbGlVRzlwYm5SbGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CdmMybDBhVzl1VEc5allYUnBiMjRzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTWlBdktuTnBlbVVxTHl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWRzTGtaTVQwRlVJQzhxZEhsd1pTb3ZMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1poYkhObElDOHFibTl5YldGc2FYcGxLaThzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTUNBdktuTjBjbWxrWlNvdkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEQWdMeXB2Wm1aelpYUXFMMXh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUM4dklFTnlaV0YwWlNCdmRYSWdkR1Y0ZEhWeVpTQmpiMjl5WkdsdVlYUmxJR0oxWm1abGNuTWdabTl5SUdGalkyVnpjMmx1WnlCdmRYSWdkR1Y0ZEhWeVpWeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblJsZUdOdmIzSmtRblZtWm1WeUlEMGdkR2hwY3k1bmJDNWpjbVZoZEdWQ2RXWm1aWElvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUVKcGJtUWdkR2hsSUhSbGVIUjFjbVVnWTI5dmNtUnBibUYwWlNCaWRXWm1aWEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WjJ3dVltbHVaRUoxWm1abGNpaDBhR2x6TG1kc0xrRlNVa0ZaWDBKVlJrWkZVaXdnZEdocGN5NTBaWGhqYjI5eVpFSjFabVpsY2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCRmJtRmliR1VnWUhSbGVHTnZiM0prVEc5allYUnBiMjVnSUhSdklHSmxJSFZ6WldRZ1lYTWdZU0IyWlhKMFpYaDBJSE5vWVdSbGNpQmhkSFJ5YVdKMWRHVmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaMnd1Wlc1aFlteGxWbVZ5ZEdWNFFYUjBjbWxpUVhKeVlYa29kR2hwY3k1MFpYaGpiMjl5WkV4dlkyRjBhVzl1S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1ZHaGxJSFJsZUhSMWNtVWdZMjl2Y21ScGJtRjBaWE1nZEc4Z1lYQndiSGtnWm05eUlISmxZM1JoYm1kc1pTQjNaU0JoY21VZ1pISmhkMmx1WjF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bmJDNWlkV1ptWlhKRVlYUmhLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVoyd3VRVkpTUVZsZlFsVkdSa1ZTTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1bGR5QkdiRzloZERNeVFYSnlZWGtvVzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXdMakFzSURBdU1DeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTVM0d0xDQXdMakFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEQXVNQ3dnTVM0d0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F3TGpBc0lERXVNQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ01TNHdMQ0F3TGpBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJREV1TUN3Z01TNHdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYU2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NW5iQzVUVkVGVVNVTmZSRkpCVjF4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnVkdWc2JDQjBaWGgwZFhKbElHTnZiM0prYVc1aGRHVWdZWFIwY21saWRYUmxJRzltSUhSb1pTQjJaWEowWlhnZ2MyaGhaR1Z5SUdodmR5QjBieUJuWlhRZ1pHRjBZU0J2ZFhRZ2IyWWdkR2hsSUdKdmRXNWtJR0oxWm1abGNpQW9kR2hsSUhSbGVHTnZiM0prUW5WbVptVnlLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVuYkM1MlpYSjBaWGhCZEhSeWFXSlFiMmx1ZEdWeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZEdWNFkyOXZjbVJNYjJOaGRHbHZiaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F5SUM4cWMybDZaU292TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaMnd1Umt4UFFWUWdMeXAwZVhCbEtpOHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabUZzYzJVZ0x5cHViM0p0WVd4cGVtVXFMeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F3SUM4cWMzUnlhV1JsS2k4c1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ01DQXZLbTltWm5ObGRDb3ZYRzRnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2IyNVljbE5sYzNOcGIyNVRkR0Z5ZEdWa0tITmxjM05wYjI0NklGaFNVMlZ6YzJsdmJpa2dlMXh1SUNBZ0lDQWdJQ0JNYjJkblpYSXVURzluS0V4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NJQ2RZVWlCVFpYTnphVzl1SUhOMFlYSjBaV1FuS1R0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG5oeVUyVnpjMmx2YmlBOUlITmxjM05wYjI0N1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZUhKVFpYTnphVzl1TG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjJWdVpDY3NJQ2dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViMjVZY2xObGMzTnBiMjVGYm1SbFpDZ3BPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJKYm1sMGFXRnNhWHBoZEdsdmJseHVJQ0FnSUNBZ0lDQjBhR2x6TG1sdWFYUkhUQ2dwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbWx1YVhSVGFHRmtaWEp6S0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YVc1cGRFSjFabVpsY25Nb0tUdGNibHh1SUNBZ0lDQWdJQ0J6WlhOemFXOXVMbkpsY1hWbGMzUlNaV1psY21WdVkyVlRjR0ZqWlNnbmJHOWpZV3duS1M1MGFHVnVLQ2h5WldaVGNHRmpaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTRjbEpsWmxOd1lXTmxJRDBnY21WbVUzQmhZMlU3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUZObGRDQjFjQ0J2ZFhJZ1ltRnpaU0JzWVhsbGNpQW9hUzVsTGlCaElIQnliMnBsWTNScGIyNGdiR0Y1WlhJZ2RHaGhkQ0JtYVd4c2N5QjBhR1VnWlc1MGFYSmxJRmhTSUhacFpYZHdiM0owS1M1Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWVISlRaWE56YVc5dUxuVndaR0YwWlZKbGJtUmxjbE4wWVhSbEtIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlZWE5sVEdGNVpYSTZJRzVsZHlCWVVsZGxZa2RNVEdGNVpYSW9kR2hwY3k1NGNsTmxjM05wYjI0c0lIUm9hWE11WjJ3cFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1ZYQmtZWFJsSUhSaGNtZGxkQ0JtY21GdFpYSmhkR1VnZEc4Z09UQWdabkJ6SUdsbUlEa3dJR1p3Y3lCcGN5QnpkWEJ3YjNKMFpXUWdhVzRnZEdocGN5QllVaUJrWlhacFkyVmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUtIUm9hWE11ZUhKVFpYTnphVzl1TG5OMWNIQnZjblJsWkVaeVlXMWxVbUYwWlhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQm1jbUZ0WlZKaGRHVWdiMllnZEdocGN5NTRjbE5sYzNOcGIyNHVjM1Z3Y0c5eWRHVmtSbkpoYldWU1lYUmxjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaWhtY21GdFpWSmhkR1VnUFQwZ09UQXBlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlZ6YzJsdmJpNTFjR1JoZEdWVVlYSm5aWFJHY21GdFpWSmhkR1VvT1RBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJDYVc1a2FXNW5JSFJ2SUdWaFkyZ2dibVYzSUdaeVlXMWxJSFJ2SUdkbGRDQnNZWFJsYzNRZ1dGSWdkWEJrWVhSbGMxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTRjbE5sYzNOcGIyNHVjbVZ4ZFdWemRFRnVhVzFoZEdsdmJrWnlZVzFsS0hSb2FYTXViMjVZY2taeVlXMWxMbUpwYm1Rb2RHaHBjeWtwTzF4dUlDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxtOXVVMlZ6YzJsdmJsTjBZWEowWldRdVpHbHpjR0YwWTJoRmRtVnVkQ2h1WlhjZ1JYWmxiblFvSjNoeVUyVnpjMmx2YmxOMFlYSjBaV1FuS1NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYzJWdVpGaFNSR0YwWVZSdlZVVW9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUtIUm9hWE11YkdWbWRGWnBaWGNnUFQwZ2JuVnNiQ0I4ZkNCMGFHbHpMbkpwWjJoMFZtbGxkeUE5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JqYjI1emRDQnNaV1owUlhsbFZISmhibk1nUFNCMGFHbHpMbXhsWm5SV2FXVjNMblJ5WVc1elptOXliUzV0WVhSeWFYZzdYRzRnSUNBZ0lDQWdJR052Ym5OMElHeGxablJGZVdWUWNtOXFJRDBnZEdocGN5NXNaV1owVm1sbGR5NXdjbTlxWldOMGFXOXVUV0YwY21sNE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCeWFXZG9kRVY1WlZSeVlXNXpJRDBnZEdocGN5NXlhV2RvZEZacFpYY3VkSEpoYm5ObWIzSnRMbTFoZEhKcGVEdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2NtbG5hSFJGZVdWUWNtOXFJRDBnZEdocGN5NXlhV2RvZEZacFpYY3VjSEp2YW1WamRHbHZiazFoZEhKcGVEczdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z2MyVnVaQ0IwY21GdWMyWnZjbTBnS0RSNE5Da2dZVzVrSUhCeWIycGxZM1JwYjI0Z2JXRjBjbWw0SUNnMGVEUXBJR1JoZEdFZ1ptOXlJR1ZoWTJnZ1pYbGxJQ2hzWldaMElHWnBjbk4wTENCMGFHVnVJSEpwWjJoMEtWeHVJQ0FnSUNBZ0lDQXZMeUJ3Y21WMGRHbGxjaTFwWjI1dmNtVmNiaUFnSUNBZ0lDQWdkR2hwY3k1M1pXSlNkR05EYjI1MGNtOXNiR1Z5TG5OMGNtVmhiVTFsYzNOaFoyVkRiMjUwY205c2JHVnlMblJ2VTNSeVpXRnRaWEpJWVc1a2JHVnljeTVuWlhRb0oxaFNSWGxsVm1sbGQzTW5LU2hiWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJNWldaMElHVjVaU0EwZURRZ2RISmhibk5tYjNKdElHMWhkSEpwZUZ4dUlDQWdJQ0FnSUNBZ0lDQWdiR1ZtZEVWNVpWUnlZVzV6V3pCZExDQnNaV1owUlhsbFZISmhibk5iTkYwc0lHeGxablJGZVdWVWNtRnVjMXM0WFN3Z0lHeGxablJGZVdWVWNtRnVjMXN4TWwwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWldaMFJYbGxWSEpoYm5OYk1WMHNJR3hsWm5SRmVXVlVjbUZ1YzFzMVhTd2diR1ZtZEVWNVpWUnlZVzV6V3psZExDQWdiR1ZtZEVWNVpWUnlZVzV6V3pFelhTeGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bFpuUkZlV1ZVY21GdWMxc3lYU3dnYkdWbWRFVjVaVlJ5WVc1eld6WmRMQ0JzWldaMFJYbGxWSEpoYm5OYk1UQmRMQ0JzWldaMFJYbGxWSEpoYm5OYk1UUmRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVm1kRVY1WlZSeVlXNXpXek5kTENCc1pXWjBSWGxsVkhKaGJuTmJOMTBzSUd4bFpuUkZlV1ZVY21GdWMxc3hNVjBzSUd4bFpuUkZlV1ZVY21GdWMxc3hOVjBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJNWldaMElHVjVaU0EwZURRZ2NISnZhbVZqZEdsdmJpQnRZWFJ5YVhoY2JpQWdJQ0FnSUNBZ0lDQWdJR3hsWm5SRmVXVlFjbTlxV3pCZExDQnNaV1owUlhsbFVISnZhbHMwWFN3Z2JHVm1kRVY1WlZCeWIycGJPRjBzSUNCc1pXWjBSWGxsVUhKdmFsc3hNbDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaV1owUlhsbFVISnZhbHN4WFN3Z2JHVm1kRVY1WlZCeWIycGJOVjBzSUd4bFpuUkZlV1ZRY205cVd6bGRMQ0FnYkdWbWRFVjVaVkJ5YjJwYk1UTmRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVm1kRVY1WlZCeWIycGJNbDBzSUd4bFpuUkZlV1ZRY205cVd6WmRMQ0JzWldaMFJYbGxVSEp2YWxzeE1GMHNJR3hsWm5SRmVXVlFjbTlxV3pFMFhTeGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bFpuUkZlV1ZRY205cVd6TmRMQ0JzWldaMFJYbGxVSEp2YWxzM1hTd2diR1ZtZEVWNVpWQnliMnBiTVRGZExDQnNaV1owUlhsbFVISnZhbHN4TlYwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCU2FXZG9kQ0JsZVdVZ05IZzBJSFJ5WVc1elptOXliU0J0WVhSeWFYaGNiaUFnSUNBZ0lDQWdJQ0FnSUhKcFoyaDBSWGxsVkhKaGJuTmJNRjBzSUhKcFoyaDBSWGxsVkhKaGJuTmJORjBzSUhKcFoyaDBSWGxsVkhKaGJuTmJPRjBzSUNCeWFXZG9kRVY1WlZSeVlXNXpXekV5WFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpwWjJoMFJYbGxWSEpoYm5OYk1WMHNJSEpwWjJoMFJYbGxWSEpoYm5OYk5WMHNJSEpwWjJoMFJYbGxWSEpoYm5OYk9WMHNJQ0J5YVdkb2RFVjVaVlJ5WVc1eld6RXpYU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lISnBaMmgwUlhsbFZISmhibk5iTWwwc0lISnBaMmgwUlhsbFZISmhibk5iTmwwc0lISnBaMmgwUlhsbFZISmhibk5iTVRCZExDQnlhV2RvZEVWNVpWUnlZVzV6V3pFMFhTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhKcFoyaDBSWGxsVkhKaGJuTmJNMTBzSUhKcFoyaDBSWGxsVkhKaGJuTmJOMTBzSUhKcFoyaDBSWGxsVkhKaGJuTmJNVEZkTENCeWFXZG9kRVY1WlZSeVlXNXpXekUxWFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUhKcFoyaDBJR1Y1WlNBMGVEUWdjSEp2YW1WamRHbHZiaUJ0WVhSeWFYaGNiaUFnSUNBZ0lDQWdJQ0FnSUhKcFoyaDBSWGxsVUhKdmFsc3dYU3dnY21sbmFIUkZlV1ZRY205cVd6UmRMQ0J5YVdkb2RFVjVaVkJ5YjJwYk9GMHNJQ0J5YVdkb2RFVjVaVkJ5YjJwYk1USmRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtbG5hSFJGZVdWUWNtOXFXekZkTENCeWFXZG9kRVY1WlZCeWIycGJOVjBzSUhKcFoyaDBSWGxsVUhKdmFsczVYU3dnSUhKcFoyaDBSWGxsVUhKdmFsc3hNMTBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnlhV2RvZEVWNVpWQnliMnBiTWwwc0lISnBaMmgwUlhsbFVISnZhbHMyWFN3Z2NtbG5hSFJGZVdWUWNtOXFXekV3WFN3Z2NtbG5hSFJGZVdWUWNtOXFXekUwWFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpwWjJoMFJYbGxVSEp2YWxzelhTd2djbWxuYUhSRmVXVlFjbTlxV3pkZExDQnlhV2RvZEVWNVpWQnliMnBiTVRGZExDQnlhV2RvZEVWNVpWQnliMnBiTVRWZFhHNGdJQ0FnSUNBZ0lGMHBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHOXVXSEpHY21GdFpTaDBhVzFsT2lCRVQwMUlhV2RvVW1WelZHbHRaVk4wWVcxd0xDQm1jbUZ0WlRvZ1dGSkdjbUZ0WlNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5oeVZtbGxkMlZ5VUc5elpTQTlJR1p5WVcxbExtZGxkRlpwWlhkbGNsQnZjMlVvZEdocGN5NTRjbEpsWmxOd1lXTmxLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11ZUhKV2FXVjNaWEpRYjNObEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblZ3WkdGMFpWWnBaWGR6S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmloMGFHbHpMbXhsWm5SV2FXVjNJRDA5SUc1MWJHd2dmSHdnZEdocGN5NXlhV2RvZEZacFpYY2dQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaVzVrV0ZKRVlYUmhWRzlWUlNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTFjR1JoZEdWV2FXUmxiMVJsZUhSMWNtVW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y21WdVpHVnlLQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NTNaV0pTZEdORGIyNTBjbTlzYkdWeUxtTnZibVpwWnk1cGMwWnNZV2RGYm1GaWJHVmtLRVpzWVdkekxsaFNRMjl1ZEhKdmJHeGxja2x1Y0hWMEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTU0Y2xObGMzTnBiMjR1YVc1d2RYUlRiM1Z5WTJWekxtWnZja1ZoWTJnb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tITnZkWEpqWlRvZ1dGSkpibkIxZEZOdmRYSmpaU3dnYVc1a1pYZzZJRzUxYldKbGNpd2dZWEp5WVhrNklGaFNTVzV3ZFhSVGIzVnlZMlZiWFNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbmh5UjJGdFpYQmhaRU52Ym5SeWIyeHNaWEl1ZFhCa1lYUmxVM1JoZEhWektGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyOTFjbU5sTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm5KaGJXVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5oeVVtVm1VM0JoWTJWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTmNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0IwYUdsekxuaHlVMlZ6YzJsdmJpNXlaWEYxWlhOMFFXNXBiV0YwYVc5dVJuSmhiV1VvWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9kR2x0WlRvZ1JFOU5TR2xuYUZKbGMxUnBiV1ZUZEdGdGNDd2dabkpoYldVNklGaFNSbkpoYldVcElEMCtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dmJsaHlSbkpoYldVb2RHbHRaU3dnWm5KaGJXVXBYRzRnSUNBZ0lDQWdJQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV2YmtaeVlXMWxMbVJwYzNCaGRHTm9SWFpsYm5Rb2JtVjNJRmh5Um5KaGJXVkZkbVZ1ZENoN0lIUnBiV1VzSUdaeVlXMWxJSDBwS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J3Y21sMllYUmxJSFZ3WkdGMFpWWnBaWGR6S0NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaWdoZEdocGN5NTRjbFpwWlhkbGNsQnZjMlVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JtYjNJZ0tHTnZibk4wSUhacFpYY2diMllnZEdocGN5NTRjbFpwWlhkbGNsQnZjMlV1ZG1sbGQzTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gyYVdWM0xtVjVaU0E5UFQwZ1hDSnNaV1owWENJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG14bFpuUldhV1YzSUQwZ2RtbGxkenRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdhV1lvZG1sbGR5NWxlV1VnUFQwOUlGd2ljbWxuYUhSY0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNtbG5hSFJXYVdWM0lEMGdkbWxsZHp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJSEJ5YVhaaGRHVWdjbVZ1WkdWeUtDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11WjJ3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDOHZJRUpwYm1RZ2RHaGxJR1p5WVcxbFluVm1abVZ5SUhSdklIUm9aU0JpWVhObElHeGhlV1Z5SjNNZ1puSmhiV1ZpZFdabVpYSmNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1oyeE1ZWGxsY2lBOUlIUm9hWE11ZUhKVFpYTnphVzl1TG5KbGJtUmxjbE4wWVhSbExtSmhjMlZNWVhsbGNqdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bmJDNWlhVzVrUm5KaGJXVmlkV1ptWlhJb2RHaHBjeTVuYkM1R1VrRk5SVUpWUmtaRlVpd2daMnhNWVhsbGNpNW1jbUZ0WldKMVptWmxjaWs3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdVMlYwSUhSb1pTQnlaV3hsZG1GdWRDQndiM0owYVc5dUlHOW1JR05zYVhBZ2MzQmhZMlZjYmlBZ0lDQWdJQ0FnZEdocGN5NW5iQzUyYVdWM2NHOXlkQ2d3TENBd0xDQm5iRXhoZVdWeUxtWnlZVzFsWW5WbVptVnlWMmxrZEdnc0lHZHNUR0Y1WlhJdVpuSmhiV1ZpZFdabVpYSklaV2xuYUhRcE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUVSeVlYY2dkR2hsSUhKbFkzUmhibWRzWlNCM1pTQjNhV3hzSUhOb2IzY2dkR2hsSUhacFpHVnZJSE4wY21WaGJTQjBaWGgwZFhKbElHOXVYRzRnSUNBZ0lDQWdJSFJvYVhNdVoyd3VaSEpoZDBGeWNtRjVjeWgwYUdsekxtZHNMbFJTU1VGT1IweEZVeUF2S25CeWFXMXBkR2wyWlZSNWNHVXFMeXdnTUNBdkttOW1abk5sZENvdkxDQTJJQzhxWTI5MWJuUXFMeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjM1JoZEdsaklHbHpVMlZ6YzJsdmJsTjFjSEJ2Y25SbFpDaHRiMlJsT2lCWVVsTmxjM05wYjI1TmIyUmxLVG9nVUhKdmJXbHpaVHhpYjI5c1pXRnVQaUI3WEc0Z0lDQWdJQ0FnSUdsbUlDaHNiMk5oZEdsdmJpNXdjbTkwYjJOdmJDQWhQVDBnWENKb2RIUndjenBjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa2x1Wm04b2JuVnNiQ3dnWENKWFpXSllVaUJ5WlhGMWFYSmxjeUJvZEhSd2N5d2dhV1lnZVc5MUlIZGhiblFnVjJWaVdGSWdkWE5sSUdoMGRIQnpMbHdpS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR2xtSUNodVlYWnBaMkYwYjNJdWVISXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVlYWnBaMkYwYjNJdWVISXVhWE5UWlhOemFXOXVVM1Z3Y0c5eWRHVmtLRzF2WkdVcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sUEdKdmIyeGxZVzQrS0NncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JuMWNiaUlzSW5aaGNpQjRJRDBnZVNBOVBpQjdJSFpoY2lCNElEMGdlMzA3SUY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4dVpDaDRMQ0I1S1RzZ2NtVjBkWEp1SUhnN0lIMWNiblpoY2lCNUlEMGdlQ0E5UGlBb0tTQTlQaUI0WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUY5ZlYwVkNVRUZEUzE5RldGUkZVazVCVEY5TlQwUlZURVZmYzJSd1gxODdJaXdpTHk4Z1ZHaGxJRzF2WkhWc1pTQmpZV05vWlZ4dWRtRnlJRjlmZDJWaWNHRmphMTl0YjJSMWJHVmZZMkZqYUdWZlh5QTlJSHQ5TzF4dVhHNHZMeUJVYUdVZ2NtVnhkV2x5WlNCbWRXNWpkR2x2Ymx4dVpuVnVZM1JwYjI0Z1gxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5aHRiMlIxYkdWSlpDa2dlMXh1WEhRdkx5QkRhR1ZqYXlCcFppQnRiMlIxYkdVZ2FYTWdhVzRnWTJGamFHVmNibHgwZG1GeUlHTmhZMmhsWkUxdlpIVnNaU0E5SUY5ZmQyVmljR0ZqYTE5dGIyUjFiR1ZmWTJGamFHVmZYMXR0YjJSMWJHVkpaRjA3WEc1Y2RHbG1JQ2hqWVdOb1pXUk5iMlIxYkdVZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQmpZV05vWldSTmIyUjFiR1V1Wlhod2IzSjBjenRjYmx4MGZWeHVYSFF2THlCRGNtVmhkR1VnWVNCdVpYY2diVzlrZFd4bElDaGhibVFnY0hWMElHbDBJR2x1ZEc4Z2RHaGxJR05oWTJobEtWeHVYSFIyWVhJZ2JXOWtkV3hsSUQwZ1gxOTNaV0p3WVdOclgyMXZaSFZzWlY5allXTm9aVjlmVzIxdlpIVnNaVWxrWFNBOUlIdGNibHgwWEhRdkx5QnVieUJ0YjJSMWJHVXVhV1FnYm1WbFpHVmtYRzVjZEZ4MEx5OGdibThnYlc5a2RXeGxMbXh2WVdSbFpDQnVaV1ZrWldSY2JseDBYSFJsZUhCdmNuUnpPaUI3ZlZ4dVhIUjlPMXh1WEc1Y2RDOHZJRVY0WldOMWRHVWdkR2hsSUcxdlpIVnNaU0JtZFc1amRHbHZibHh1WEhSZlgzZGxZbkJoWTJ0ZmJXOWtkV3hsYzE5ZlcyMXZaSFZzWlVsa1hTaHRiMlIxYkdVc0lHMXZaSFZzWlM1bGVIQnZjblJ6TENCZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZktUdGNibHh1WEhRdkx5QlNaWFIxY200Z2RHaGxJR1Y0Y0c5eWRITWdiMllnZEdobElHMXZaSFZzWlZ4dVhIUnlaWFIxY200Z2JXOWtkV3hsTG1WNGNHOXlkSE03WEc1OVhHNWNiaUlzSWk4dklHUmxabWx1WlNCblpYUjBaWElnWm5WdVkzUnBiMjV6SUdadmNpQm9ZWEp0YjI1NUlHVjRjRzl5ZEhOY2JsOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHVaQ0E5SUNobGVIQnZjblJ6TENCa1pXWnBibWwwYVc5dUtTQTlQaUI3WEc1Y2RHWnZjaWgyWVhJZ2EyVjVJR2x1SUdSbFptbHVhWFJwYjI0cElIdGNibHgwWEhScFppaGZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMbThvWkdWbWFXNXBkR2x2Yml3Z2EyVjVLU0FtSmlBaFgxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5NXZLR1Y0Y0c5eWRITXNJR3RsZVNrcElIdGNibHgwWEhSY2RFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JyWlhrc0lIc2daVzUxYldWeVlXSnNaVG9nZEhKMVpTd2daMlYwT2lCa1pXWnBibWwwYVc5dVcydGxlVjBnZlNrN1hHNWNkRngwZlZ4dVhIUjlYRzU5T3lJc0lsOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHVieUE5SUNodlltb3NJSEJ5YjNBcElEMCtJQ2hQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMbWhoYzA5M2JsQnliM0JsY25SNUxtTmhiR3dvYjJKcUxDQndjbTl3S1NraUxDSXZMeUJrWldacGJtVWdYMTlsYzAxdlpIVnNaU0J2YmlCbGVIQnZjblJ6WEc1ZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxuSWdQU0FvWlhod2IzSjBjeWtnUFQ0Z2UxeHVYSFJwWmloMGVYQmxiMllnVTNsdFltOXNJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QW1KaUJUZVcxaWIyd3VkRzlUZEhKcGJtZFVZV2NwSUh0Y2JseDBYSFJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1UzbHRZbTlzTG5SdlUzUnlhVzVuVkdGbkxDQjdJSFpoYkhWbE9pQW5UVzlrZFd4bEp5QjlLVHRjYmx4MGZWeHVYSFJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z0oxOWZaWE5OYjJSMWJHVW5MQ0I3SUhaaGJIVmxPaUIwY25WbElIMHBPMXh1ZlRzaUxDSXZMeUJEYjNCNWNtbG5hSFFnUlhCcFl5QkhZVzFsY3l3Z1NXNWpMaUJCYkd3Z1VtbG5hSFJ6SUZKbGMyVnlkbVZrTGx4dVhHNWxlSEJ2Y25RZ2V5QlhaV0pTZEdOUWJHRjVaWEpEYjI1MGNtOXNiR1Z5SUgwZ1puSnZiU0FuTGk5WFpXSlNkR05RYkdGNVpYSXZWMlZpVW5SalVHeGhlV1Z5UTI5dWRISnZiR3hsY2ljN1hHNWxlSEJ2Y25RZ2V5QlhaV0pZVWtOdmJuUnliMnhzWlhJZ2ZTQm1jbTl0SUNjdUwxZGxZbGhTTDFkbFlsaFNRMjl1ZEhKdmJHeGxjaWM3WEc1bGVIQnZjblFnZTF4dUlDQWdJRU52Ym1acFp5eGNiaUFnSUNCRGIyNTBjbTlzVTJOb1pXMWxWSGx3WlN4Y2JpQWdJQ0JHYkdGbmN5eGNiaUFnSUNCT2RXMWxjbWxqVUdGeVlXMWxkR1Z5Y3l4Y2JpQWdJQ0JVWlhoMFVHRnlZVzFsZEdWeWN5eGNiaUFnSUNCUGNIUnBiMjVRWVhKaGJXVjBaWEp6TEZ4dUlDQWdJRVpzWVdkelNXUnpMRnh1SUNBZ0lFNTFiV1Z5YVdOUVlYSmhiV1YwWlhKelNXUnpMRnh1SUNBZ0lGUmxlSFJRWVhKaGJXVjBaWEp6U1dSekxGeHVJQ0FnSUU5d2RHbHZibEJoY21GdFpYUmxjbk5KWkhNc1hHNGdJQ0FnUVd4c1UyVjBkR2x1WjNOY2JuMGdabkp2YlNBbkxpOURiMjVtYVdjdlEyOXVabWxuSnp0Y2JtVjRjRzl5ZENCN0lGTmxkSFJwYm1kQ1lYTmxJSDBnWm5KdmJTQW5MaTlEYjI1bWFXY3ZVMlYwZEdsdVowSmhjMlVuTzF4dVpYaHdiM0owSUhzZ1UyVjBkR2x1WjBac1lXY2dmU0JtY205dElDY3VMME52Ym1acFp5OVRaWFIwYVc1blJteGhaeWM3WEc1bGVIQnZjblFnZXlCVFpYUjBhVzVuVG5WdFltVnlJSDBnWm5KdmJTQW5MaTlEYjI1bWFXY3ZVMlYwZEdsdVowNTFiV0psY2ljN1hHNWxlSEJ2Y25RZ2V5QlRaWFIwYVc1blQzQjBhVzl1SUgwZ1puSnZiU0FuTGk5RGIyNW1hV2N2VTJWMGRHbHVaMDl3ZEdsdmJpYzdYRzVsZUhCdmNuUWdleUJUWlhSMGFXNW5WR1Y0ZENCOUlHWnliMjBnSnk0dlEyOXVabWxuTDFObGRIUnBibWRVWlhoMEp6dGNibVY0Y0c5eWRDQjdJRkJwZUdWc1UzUnlaV0Z0YVc1bklIMGdabkp2YlNBbkxpOVFhWGhsYkZOMGNtVmhiV2x1Wnk5UWFYaGxiRk4wY21WaGJXbHVaeWM3WEc1Y2JtVjRjRzl5ZENCN0lFRkdTME52Ym5SeWIyeHNaWElnWVhNZ1FXWnJURzluYVdNZ2ZTQm1jbTl0SUNjdUwwRkdTeTlCUmt0RGIyNTBjbTlzYkdWeUp6dGNibHh1Wlhod2IzSjBJSHNnVEdGMFpXNWplVlJsYzNSU1pYTjFiSFJ6SUgwZ1puSnZiU0FuTGk5RVlYUmhRMmhoYm01bGJDOU1ZWFJsYm1ONVZHVnpkRkpsYzNWc2RITW5PMXh1Wlhod2IzSjBJSHRjYmlBZ0lDQkZibU52WkdWeVUyVjBkR2x1WjNNc1hHNGdJQ0FnU1c1cGRHbGhiRk5sZEhScGJtZHpMRnh1SUNBZ0lGZGxZbEpVUTFObGRIUnBibWR6WEc1OUlHWnliMjBnSnk0dlJHRjBZVU5vWVc1dVpXd3ZTVzVwZEdsaGJGTmxkSFJwYm1kekp6dGNibVY0Y0c5eWRDQjdJRUZuWjNKbFoyRjBaV1JUZEdGMGN5QjlJR1p5YjIwZ0p5NHZVR1ZsY2tOdmJtNWxZM1JwYjI1RGIyNTBjbTlzYkdWeUwwRm5aM0psWjJGMFpXUlRkR0YwY3ljN1hHNWxlSEJ2Y25RZ2V5Qk1iMmRuWlhJZ2ZTQm1jbTl0SUNjdUwweHZaMmRsY2k5TWIyZG5aWEluTzF4dVpYaHdiM0owSUhzZ1ZXNXhkV0Z1ZEdsNlpXUkVaVzV2Y20xaGJHbDZaV1JWYm5OcFoyNWxaRU52YjNKa0lHRnpJRlZ1Y1hWaGJuUnBlbVZrUVc1a1JHVnViM0p0WVd4cGVtVlZibk5wWjI1bFpDQjlJR1p5YjIwZ0p5NHZWWFJwYkM5RGIyOXlaR2x1WVhSbFEyOXVkbVZ5ZEdWeUp6dGNibVY0Y0c5eWRDQjdJRTFsYzNOaFoyVkVhWEpsWTNScGIyNGdmU0JtY205dElDY3VMMVZsU1c1emRHRnVZMlZOWlhOellXZGxMMU4wY21WaGJVMWxjM05oWjJWRGIyNTBjbTlzYkdWeUp6dGNibVY0Y0c5eWRDQjdJRTFsYzNOaFoyVlRaVzVrSUgwZ1puSnZiU0FuTGk5WFpXSlRiMk5yWlhSekwwMWxjM05oWjJWVFpXNWtKenRjYm1WNGNHOXlkQ0I3SUUxbGMzTmhaMlZTWldOMkxDQk5aWE56WVdkbFUzUnlaV0Z0WlhKTWFYTjBJSDBnWm5KdmJTQW5MaTlYWldKVGIyTnJaWFJ6TDAxbGMzTmhaMlZTWldObGFYWmxKenRjYm1WNGNHOXlkQ0I3SUZkbFlsTnZZMnRsZEVOdmJuUnliMnhzWlhJZ2ZTQm1jbTl0SUNjdUwxZGxZbE52WTJ0bGRITXZWMlZpVTI5amEyVjBRMjl1ZEhKdmJHeGxjaWM3WEc1bGVIQnZjblFnZXlCVGFXZHVZV3hzYVc1blVISnZkRzlqYjJ3Z2ZTQm1jbTl0SUNjdUwxZGxZbE52WTJ0bGRITXZVMmxuYm1Gc2JHbHVaMUJ5YjNSdlkyOXNKenRjYmx4dVpYaHdiM0owSUhzZ1EyRnVaR2xrWVhSbFVHRnBjbE4wWVhSeklIMGdabkp2YlNBbkxpOVFaV1Z5UTI5dWJtVmpkR2x2YmtOdmJuUnliMnhzWlhJdlEyRnVaR2xrWVhSbFVHRnBjbE4wWVhSekp6dGNibVY0Y0c5eWRDQjdJRU5oYm1ScFpHRjBaVk4wWVhRZ2ZTQm1jbTl0SUNjdUwxQmxaWEpEYjI1dVpXTjBhVzl1UTI5dWRISnZiR3hsY2k5RFlXNWthV1JoZEdWVGRHRjBKenRjYm1WNGNHOXlkQ0I3SUVSaGRHRkRhR0Z1Ym1Wc1UzUmhkSE1nZlNCbWNtOXRJQ2N1TDFCbFpYSkRiMjV1WldOMGFXOXVRMjl1ZEhKdmJHeGxjaTlFWVhSaFEyaGhibTVsYkZOMFlYUnpKenRjYm1WNGNHOXlkQ0I3WEc0Z0lDQWdTVzVpYjNWdVpFRjFaR2x2VTNSaGRITXNYRzRnSUNBZ1NXNWliM1Z1WkZacFpHVnZVM1JoZEhOY2JuMGdabkp2YlNBbkxpOVFaV1Z5UTI5dWJtVmpkR2x2YmtOdmJuUnliMnhzWlhJdlNXNWliM1Z1WkZKVVVGTjBZWFJ6Snp0Y2JtVjRjRzl5ZENCN0lFOTFkRUp2ZFc1a1ZtbGtaVzlUZEdGMGN5QjlJR1p5YjIwZ0p5NHZVR1ZsY2tOdmJtNWxZM1JwYjI1RGIyNTBjbTlzYkdWeUwwOTFkRUp2ZFc1a1VsUlFVM1JoZEhNbk8xeHVaWGh3YjNKMElDb2dabkp2YlNBbkxpOVZkR2xzTDBWMlpXNTBSVzFwZEhSbGNpYzdYRzRpWFN3aWJtRnRaWE1pT2x0ZExDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPSIsIi8qIGVzbGludC1lbnYgbm9kZSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyBTRFAgaGVscGVycy5cbmNvbnN0IFNEUFV0aWxzID0ge307XG5cbi8vIEdlbmVyYXRlIGFuIGFscGhhbnVtZXJpYyBpZGVudGlmaWVyIGZvciBjbmFtZSBvciBtaWRzLlxuLy8gVE9ETzogdXNlIFVVSURzIGluc3RlYWQ/IGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2plZC85ODI4ODNcblNEUFV0aWxzLmdlbmVyYXRlSWRlbnRpZmllciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIsIDEyKTtcbn07XG5cbi8vIFRoZSBSVENQIENOQU1FIHVzZWQgYnkgYWxsIHBlZXJjb25uZWN0aW9ucyBmcm9tIHRoZSBzYW1lIEpTLlxuU0RQVXRpbHMubG9jYWxDTmFtZSA9IFNEUFV0aWxzLmdlbmVyYXRlSWRlbnRpZmllcigpO1xuXG4vLyBTcGxpdHMgU0RQIGludG8gbGluZXMsIGRlYWxpbmcgd2l0aCBib3RoIENSTEYgYW5kIExGLlxuU0RQVXRpbHMuc3BsaXRMaW5lcyA9IGZ1bmN0aW9uKGJsb2IpIHtcbiAgcmV0dXJuIGJsb2IudHJpbSgpLnNwbGl0KCdcXG4nKS5tYXAobGluZSA9PiBsaW5lLnRyaW0oKSk7XG59O1xuLy8gU3BsaXRzIFNEUCBpbnRvIHNlc3Npb25wYXJ0IGFuZCBtZWRpYXNlY3Rpb25zLiBFbnN1cmVzIENSTEYuXG5TRFBVdGlscy5zcGxpdFNlY3Rpb25zID0gZnVuY3Rpb24oYmxvYikge1xuICBjb25zdCBwYXJ0cyA9IGJsb2Iuc3BsaXQoJ1xcbm09Jyk7XG4gIHJldHVybiBwYXJ0cy5tYXAoKHBhcnQsIGluZGV4KSA9PiAoaW5kZXggPiAwID9cbiAgICAnbT0nICsgcGFydCA6IHBhcnQpLnRyaW0oKSArICdcXHJcXG4nKTtcbn07XG5cbi8vIFJldHVybnMgdGhlIHNlc3Npb24gZGVzY3JpcHRpb24uXG5TRFBVdGlscy5nZXREZXNjcmlwdGlvbiA9IGZ1bmN0aW9uKGJsb2IpIHtcbiAgY29uc3Qgc2VjdGlvbnMgPSBTRFBVdGlscy5zcGxpdFNlY3Rpb25zKGJsb2IpO1xuICByZXR1cm4gc2VjdGlvbnMgJiYgc2VjdGlvbnNbMF07XG59O1xuXG4vLyBSZXR1cm5zIHRoZSBpbmRpdmlkdWFsIG1lZGlhIHNlY3Rpb25zLlxuU0RQVXRpbHMuZ2V0TWVkaWFTZWN0aW9ucyA9IGZ1bmN0aW9uKGJsb2IpIHtcbiAgY29uc3Qgc2VjdGlvbnMgPSBTRFBVdGlscy5zcGxpdFNlY3Rpb25zKGJsb2IpO1xuICBzZWN0aW9ucy5zaGlmdCgpO1xuICByZXR1cm4gc2VjdGlvbnM7XG59O1xuXG4vLyBSZXR1cm5zIGxpbmVzIHRoYXQgc3RhcnQgd2l0aCBhIGNlcnRhaW4gcHJlZml4LlxuU0RQVXRpbHMubWF0Y2hQcmVmaXggPSBmdW5jdGlvbihibG9iLCBwcmVmaXgpIHtcbiAgcmV0dXJuIFNEUFV0aWxzLnNwbGl0TGluZXMoYmxvYikuZmlsdGVyKGxpbmUgPT4gbGluZS5pbmRleE9mKHByZWZpeCkgPT09IDApO1xufTtcblxuLy8gUGFyc2VzIGFuIElDRSBjYW5kaWRhdGUgbGluZS4gU2FtcGxlIGlucHV0OlxuLy8gY2FuZGlkYXRlOjcwMjc4NjM1MCAyIHVkcCA0MTgxOTkwMiA4LjguOC44IDYwNzY5IHR5cCByZWxheSByYWRkciA4LjguOC44XG4vLyBycG9ydCA1NTk5NlwiXG4vLyBJbnB1dCBjYW4gYmUgcHJlZml4ZWQgd2l0aCBhPS5cblNEUFV0aWxzLnBhcnNlQ2FuZGlkYXRlID0gZnVuY3Rpb24obGluZSkge1xuICBsZXQgcGFydHM7XG4gIC8vIFBhcnNlIGJvdGggdmFyaWFudHMuXG4gIGlmIChsaW5lLmluZGV4T2YoJ2E9Y2FuZGlkYXRlOicpID09PSAwKSB7XG4gICAgcGFydHMgPSBsaW5lLnN1YnN0cmluZygxMikuc3BsaXQoJyAnKTtcbiAgfSBlbHNlIHtcbiAgICBwYXJ0cyA9IGxpbmUuc3Vic3RyaW5nKDEwKS5zcGxpdCgnICcpO1xuICB9XG5cbiAgY29uc3QgY2FuZGlkYXRlID0ge1xuICAgIGZvdW5kYXRpb246IHBhcnRzWzBdLFxuICAgIGNvbXBvbmVudDogezE6ICdydHAnLCAyOiAncnRjcCd9W3BhcnRzWzFdXSB8fCBwYXJ0c1sxXSxcbiAgICBwcm90b2NvbDogcGFydHNbMl0udG9Mb3dlckNhc2UoKSxcbiAgICBwcmlvcml0eTogcGFyc2VJbnQocGFydHNbM10sIDEwKSxcbiAgICBpcDogcGFydHNbNF0sXG4gICAgYWRkcmVzczogcGFydHNbNF0sIC8vIGFkZHJlc3MgaXMgYW4gYWxpYXMgZm9yIGlwLlxuICAgIHBvcnQ6IHBhcnNlSW50KHBhcnRzWzVdLCAxMCksXG4gICAgLy8gc2tpcCBwYXJ0c1s2XSA9PSAndHlwJ1xuICAgIHR5cGU6IHBhcnRzWzddLFxuICB9O1xuXG4gIGZvciAobGV0IGkgPSA4OyBpIDwgcGFydHMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICBzd2l0Y2ggKHBhcnRzW2ldKSB7XG4gICAgICBjYXNlICdyYWRkcic6XG4gICAgICAgIGNhbmRpZGF0ZS5yZWxhdGVkQWRkcmVzcyA9IHBhcnRzW2kgKyAxXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdycG9ydCc6XG4gICAgICAgIGNhbmRpZGF0ZS5yZWxhdGVkUG9ydCA9IHBhcnNlSW50KHBhcnRzW2kgKyAxXSwgMTApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RjcHR5cGUnOlxuICAgICAgICBjYW5kaWRhdGUudGNwVHlwZSA9IHBhcnRzW2kgKyAxXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd1ZnJhZyc6XG4gICAgICAgIGNhbmRpZGF0ZS51ZnJhZyA9IHBhcnRzW2kgKyAxXTsgLy8gZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGNhbmRpZGF0ZS51c2VybmFtZUZyYWdtZW50ID0gcGFydHNbaSArIDFdO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6IC8vIGV4dGVuc2lvbiBoYW5kbGluZywgaW4gcGFydGljdWxhciB1ZnJhZy4gRG9uJ3Qgb3ZlcndyaXRlLlxuICAgICAgICBpZiAoY2FuZGlkYXRlW3BhcnRzW2ldXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY2FuZGlkYXRlW3BhcnRzW2ldXSA9IHBhcnRzW2kgKyAxXTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNhbmRpZGF0ZTtcbn07XG5cbi8vIFRyYW5zbGF0ZXMgYSBjYW5kaWRhdGUgb2JqZWN0IGludG8gU0RQIGNhbmRpZGF0ZSBhdHRyaWJ1dGUuXG4vLyBUaGlzIGRvZXMgbm90IGluY2x1ZGUgdGhlIGE9IHByZWZpeCFcblNEUFV0aWxzLndyaXRlQ2FuZGlkYXRlID0gZnVuY3Rpb24oY2FuZGlkYXRlKSB7XG4gIGNvbnN0IHNkcCA9IFtdO1xuICBzZHAucHVzaChjYW5kaWRhdGUuZm91bmRhdGlvbik7XG5cbiAgY29uc3QgY29tcG9uZW50ID0gY2FuZGlkYXRlLmNvbXBvbmVudDtcbiAgaWYgKGNvbXBvbmVudCA9PT0gJ3J0cCcpIHtcbiAgICBzZHAucHVzaCgxKTtcbiAgfSBlbHNlIGlmIChjb21wb25lbnQgPT09ICdydGNwJykge1xuICAgIHNkcC5wdXNoKDIpO1xuICB9IGVsc2Uge1xuICAgIHNkcC5wdXNoKGNvbXBvbmVudCk7XG4gIH1cbiAgc2RwLnB1c2goY2FuZGlkYXRlLnByb3RvY29sLnRvVXBwZXJDYXNlKCkpO1xuICBzZHAucHVzaChjYW5kaWRhdGUucHJpb3JpdHkpO1xuICBzZHAucHVzaChjYW5kaWRhdGUuYWRkcmVzcyB8fCBjYW5kaWRhdGUuaXApO1xuICBzZHAucHVzaChjYW5kaWRhdGUucG9ydCk7XG5cbiAgY29uc3QgdHlwZSA9IGNhbmRpZGF0ZS50eXBlO1xuICBzZHAucHVzaCgndHlwJyk7XG4gIHNkcC5wdXNoKHR5cGUpO1xuICBpZiAodHlwZSAhPT0gJ2hvc3QnICYmIGNhbmRpZGF0ZS5yZWxhdGVkQWRkcmVzcyAmJlxuICAgICAgY2FuZGlkYXRlLnJlbGF0ZWRQb3J0KSB7XG4gICAgc2RwLnB1c2goJ3JhZGRyJyk7XG4gICAgc2RwLnB1c2goY2FuZGlkYXRlLnJlbGF0ZWRBZGRyZXNzKTtcbiAgICBzZHAucHVzaCgncnBvcnQnKTtcbiAgICBzZHAucHVzaChjYW5kaWRhdGUucmVsYXRlZFBvcnQpO1xuICB9XG4gIGlmIChjYW5kaWRhdGUudGNwVHlwZSAmJiBjYW5kaWRhdGUucHJvdG9jb2wudG9Mb3dlckNhc2UoKSA9PT0gJ3RjcCcpIHtcbiAgICBzZHAucHVzaCgndGNwdHlwZScpO1xuICAgIHNkcC5wdXNoKGNhbmRpZGF0ZS50Y3BUeXBlKTtcbiAgfVxuICBpZiAoY2FuZGlkYXRlLnVzZXJuYW1lRnJhZ21lbnQgfHwgY2FuZGlkYXRlLnVmcmFnKSB7XG4gICAgc2RwLnB1c2goJ3VmcmFnJyk7XG4gICAgc2RwLnB1c2goY2FuZGlkYXRlLnVzZXJuYW1lRnJhZ21lbnQgfHwgY2FuZGlkYXRlLnVmcmFnKTtcbiAgfVxuICByZXR1cm4gJ2NhbmRpZGF0ZTonICsgc2RwLmpvaW4oJyAnKTtcbn07XG5cbi8vIFBhcnNlcyBhbiBpY2Utb3B0aW9ucyBsaW5lLCByZXR1cm5zIGFuIGFycmF5IG9mIG9wdGlvbiB0YWdzLlxuLy8gU2FtcGxlIGlucHV0OlxuLy8gYT1pY2Utb3B0aW9uczpmb28gYmFyXG5TRFBVdGlscy5wYXJzZUljZU9wdGlvbnMgPSBmdW5jdGlvbihsaW5lKSB7XG4gIHJldHVybiBsaW5lLnN1YnN0cmluZygxNCkuc3BsaXQoJyAnKTtcbn07XG5cbi8vIFBhcnNlcyBhIHJ0cG1hcCBsaW5lLCByZXR1cm5zIFJUQ1J0cENvZGRlY1BhcmFtZXRlcnMuIFNhbXBsZSBpbnB1dDpcbi8vIGE9cnRwbWFwOjExMSBvcHVzLzQ4MDAwLzJcblNEUFV0aWxzLnBhcnNlUnRwTWFwID0gZnVuY3Rpb24obGluZSkge1xuICBsZXQgcGFydHMgPSBsaW5lLnN1YnN0cmluZyg5KS5zcGxpdCgnICcpO1xuICBjb25zdCBwYXJzZWQgPSB7XG4gICAgcGF5bG9hZFR5cGU6IHBhcnNlSW50KHBhcnRzLnNoaWZ0KCksIDEwKSwgLy8gd2FzOiBpZFxuICB9O1xuXG4gIHBhcnRzID0gcGFydHNbMF0uc3BsaXQoJy8nKTtcblxuICBwYXJzZWQubmFtZSA9IHBhcnRzWzBdO1xuICBwYXJzZWQuY2xvY2tSYXRlID0gcGFyc2VJbnQocGFydHNbMV0sIDEwKTsgLy8gd2FzOiBjbG9ja3JhdGVcbiAgcGFyc2VkLmNoYW5uZWxzID0gcGFydHMubGVuZ3RoID09PSAzID8gcGFyc2VJbnQocGFydHNbMl0sIDEwKSA6IDE7XG4gIC8vIGxlZ2FjeSBhbGlhcywgZ290IHJlbmFtZWQgYmFjayB0byBjaGFubmVscyBpbiBPUlRDLlxuICBwYXJzZWQubnVtQ2hhbm5lbHMgPSBwYXJzZWQuY2hhbm5lbHM7XG4gIHJldHVybiBwYXJzZWQ7XG59O1xuXG4vLyBHZW5lcmF0ZXMgYSBydHBtYXAgbGluZSBmcm9tIFJUQ1J0cENvZGVjQ2FwYWJpbGl0eSBvclxuLy8gUlRDUnRwQ29kZWNQYXJhbWV0ZXJzLlxuU0RQVXRpbHMud3JpdGVSdHBNYXAgPSBmdW5jdGlvbihjb2RlYykge1xuICBsZXQgcHQgPSBjb2RlYy5wYXlsb2FkVHlwZTtcbiAgaWYgKGNvZGVjLnByZWZlcnJlZFBheWxvYWRUeXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICBwdCA9IGNvZGVjLnByZWZlcnJlZFBheWxvYWRUeXBlO1xuICB9XG4gIGNvbnN0IGNoYW5uZWxzID0gY29kZWMuY2hhbm5lbHMgfHwgY29kZWMubnVtQ2hhbm5lbHMgfHwgMTtcbiAgcmV0dXJuICdhPXJ0cG1hcDonICsgcHQgKyAnICcgKyBjb2RlYy5uYW1lICsgJy8nICsgY29kZWMuY2xvY2tSYXRlICtcbiAgICAgIChjaGFubmVscyAhPT0gMSA/ICcvJyArIGNoYW5uZWxzIDogJycpICsgJ1xcclxcbic7XG59O1xuXG4vLyBQYXJzZXMgYSBleHRtYXAgbGluZSAoaGVhZGVyZXh0ZW5zaW9uIGZyb20gUkZDIDUyODUpLiBTYW1wbGUgaW5wdXQ6XG4vLyBhPWV4dG1hcDoyIHVybjppZXRmOnBhcmFtczpydHAtaGRyZXh0OnRvZmZzZXRcbi8vIGE9ZXh0bWFwOjIvc2VuZG9ubHkgdXJuOmlldGY6cGFyYW1zOnJ0cC1oZHJleHQ6dG9mZnNldFxuU0RQVXRpbHMucGFyc2VFeHRtYXAgPSBmdW5jdGlvbihsaW5lKSB7XG4gIGNvbnN0IHBhcnRzID0gbGluZS5zdWJzdHJpbmcoOSkuc3BsaXQoJyAnKTtcbiAgcmV0dXJuIHtcbiAgICBpZDogcGFyc2VJbnQocGFydHNbMF0sIDEwKSxcbiAgICBkaXJlY3Rpb246IHBhcnRzWzBdLmluZGV4T2YoJy8nKSA+IDAgPyBwYXJ0c1swXS5zcGxpdCgnLycpWzFdIDogJ3NlbmRyZWN2JyxcbiAgICB1cmk6IHBhcnRzWzFdLFxuICAgIGF0dHJpYnV0ZXM6IHBhcnRzLnNsaWNlKDIpLmpvaW4oJyAnKSxcbiAgfTtcbn07XG5cbi8vIEdlbmVyYXRlcyBhbiBleHRtYXAgbGluZSBmcm9tIFJUQ1J0cEhlYWRlckV4dGVuc2lvblBhcmFtZXRlcnMgb3Jcbi8vIFJUQ1J0cEhlYWRlckV4dGVuc2lvbi5cblNEUFV0aWxzLndyaXRlRXh0bWFwID0gZnVuY3Rpb24oaGVhZGVyRXh0ZW5zaW9uKSB7XG4gIHJldHVybiAnYT1leHRtYXA6JyArIChoZWFkZXJFeHRlbnNpb24uaWQgfHwgaGVhZGVyRXh0ZW5zaW9uLnByZWZlcnJlZElkKSArXG4gICAgICAoaGVhZGVyRXh0ZW5zaW9uLmRpcmVjdGlvbiAmJiBoZWFkZXJFeHRlbnNpb24uZGlyZWN0aW9uICE9PSAnc2VuZHJlY3YnXG4gICAgICAgID8gJy8nICsgaGVhZGVyRXh0ZW5zaW9uLmRpcmVjdGlvblxuICAgICAgICA6ICcnKSArXG4gICAgICAnICcgKyBoZWFkZXJFeHRlbnNpb24udXJpICtcbiAgICAgIChoZWFkZXJFeHRlbnNpb24uYXR0cmlidXRlcyA/ICcgJyArIGhlYWRlckV4dGVuc2lvbi5hdHRyaWJ1dGVzIDogJycpICtcbiAgICAgICdcXHJcXG4nO1xufTtcblxuLy8gUGFyc2VzIGEgZm10cCBsaW5lLCByZXR1cm5zIGRpY3Rpb25hcnkuIFNhbXBsZSBpbnB1dDpcbi8vIGE9Zm10cDo5NiB2YnI9b247Y25nPW9uXG4vLyBBbHNvIGRlYWxzIHdpdGggdmJyPW9uOyBjbmc9b25cblNEUFV0aWxzLnBhcnNlRm10cCA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgY29uc3QgcGFyc2VkID0ge307XG4gIGxldCBrdjtcbiAgY29uc3QgcGFydHMgPSBsaW5lLnN1YnN0cmluZyhsaW5lLmluZGV4T2YoJyAnKSArIDEpLnNwbGl0KCc7Jyk7XG4gIGZvciAobGV0IGogPSAwOyBqIDwgcGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICBrdiA9IHBhcnRzW2pdLnRyaW0oKS5zcGxpdCgnPScpO1xuICAgIHBhcnNlZFtrdlswXS50cmltKCldID0ga3ZbMV07XG4gIH1cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG5cbi8vIEdlbmVyYXRlcyBhIGZtdHAgbGluZSBmcm9tIFJUQ1J0cENvZGVjQ2FwYWJpbGl0eSBvciBSVENSdHBDb2RlY1BhcmFtZXRlcnMuXG5TRFBVdGlscy53cml0ZUZtdHAgPSBmdW5jdGlvbihjb2RlYykge1xuICBsZXQgbGluZSA9ICcnO1xuICBsZXQgcHQgPSBjb2RlYy5wYXlsb2FkVHlwZTtcbiAgaWYgKGNvZGVjLnByZWZlcnJlZFBheWxvYWRUeXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICBwdCA9IGNvZGVjLnByZWZlcnJlZFBheWxvYWRUeXBlO1xuICB9XG4gIGlmIChjb2RlYy5wYXJhbWV0ZXJzICYmIE9iamVjdC5rZXlzKGNvZGVjLnBhcmFtZXRlcnMpLmxlbmd0aCkge1xuICAgIGNvbnN0IHBhcmFtcyA9IFtdO1xuICAgIE9iamVjdC5rZXlzKGNvZGVjLnBhcmFtZXRlcnMpLmZvckVhY2gocGFyYW0gPT4ge1xuICAgICAgaWYgKGNvZGVjLnBhcmFtZXRlcnNbcGFyYW1dICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcGFyYW1zLnB1c2gocGFyYW0gKyAnPScgKyBjb2RlYy5wYXJhbWV0ZXJzW3BhcmFtXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJhbXMucHVzaChwYXJhbSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgbGluZSArPSAnYT1mbXRwOicgKyBwdCArICcgJyArIHBhcmFtcy5qb2luKCc7JykgKyAnXFxyXFxuJztcbiAgfVxuICByZXR1cm4gbGluZTtcbn07XG5cbi8vIFBhcnNlcyBhIHJ0Y3AtZmIgbGluZSwgcmV0dXJucyBSVENQUnRjcEZlZWRiYWNrIG9iamVjdC4gU2FtcGxlIGlucHV0OlxuLy8gYT1ydGNwLWZiOjk4IG5hY2sgcnBzaVxuU0RQVXRpbHMucGFyc2VSdGNwRmIgPSBmdW5jdGlvbihsaW5lKSB7XG4gIGNvbnN0IHBhcnRzID0gbGluZS5zdWJzdHJpbmcobGluZS5pbmRleE9mKCcgJykgKyAxKS5zcGxpdCgnICcpO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHBhcnRzLnNoaWZ0KCksXG4gICAgcGFyYW1ldGVyOiBwYXJ0cy5qb2luKCcgJyksXG4gIH07XG59O1xuXG4vLyBHZW5lcmF0ZSBhPXJ0Y3AtZmIgbGluZXMgZnJvbSBSVENSdHBDb2RlY0NhcGFiaWxpdHkgb3IgUlRDUnRwQ29kZWNQYXJhbWV0ZXJzLlxuU0RQVXRpbHMud3JpdGVSdGNwRmIgPSBmdW5jdGlvbihjb2RlYykge1xuICBsZXQgbGluZXMgPSAnJztcbiAgbGV0IHB0ID0gY29kZWMucGF5bG9hZFR5cGU7XG4gIGlmIChjb2RlYy5wcmVmZXJyZWRQYXlsb2FkVHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcHQgPSBjb2RlYy5wcmVmZXJyZWRQYXlsb2FkVHlwZTtcbiAgfVxuICBpZiAoY29kZWMucnRjcEZlZWRiYWNrICYmIGNvZGVjLnJ0Y3BGZWVkYmFjay5sZW5ndGgpIHtcbiAgICAvLyBGSVhNRTogc3BlY2lhbCBoYW5kbGluZyBmb3IgdHJyLWludD9cbiAgICBjb2RlYy5ydGNwRmVlZGJhY2suZm9yRWFjaChmYiA9PiB7XG4gICAgICBsaW5lcyArPSAnYT1ydGNwLWZiOicgKyBwdCArICcgJyArIGZiLnR5cGUgK1xuICAgICAgKGZiLnBhcmFtZXRlciAmJiBmYi5wYXJhbWV0ZXIubGVuZ3RoID8gJyAnICsgZmIucGFyYW1ldGVyIDogJycpICtcbiAgICAgICAgICAnXFxyXFxuJztcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gbGluZXM7XG59O1xuXG4vLyBQYXJzZXMgYSBSRkMgNTU3NiBzc3JjIG1lZGlhIGF0dHJpYnV0ZS4gU2FtcGxlIGlucHV0OlxuLy8gYT1zc3JjOjM3MzU5Mjg1NTkgY25hbWU6c29tZXRoaW5nXG5TRFBVdGlscy5wYXJzZVNzcmNNZWRpYSA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgY29uc3Qgc3AgPSBsaW5lLmluZGV4T2YoJyAnKTtcbiAgY29uc3QgcGFydHMgPSB7XG4gICAgc3NyYzogcGFyc2VJbnQobGluZS5zdWJzdHJpbmcoNywgc3ApLCAxMCksXG4gIH07XG4gIGNvbnN0IGNvbG9uID0gbGluZS5pbmRleE9mKCc6Jywgc3ApO1xuICBpZiAoY29sb24gPiAtMSkge1xuICAgIHBhcnRzLmF0dHJpYnV0ZSA9IGxpbmUuc3Vic3RyaW5nKHNwICsgMSwgY29sb24pO1xuICAgIHBhcnRzLnZhbHVlID0gbGluZS5zdWJzdHJpbmcoY29sb24gKyAxKTtcbiAgfSBlbHNlIHtcbiAgICBwYXJ0cy5hdHRyaWJ1dGUgPSBsaW5lLnN1YnN0cmluZyhzcCArIDEpO1xuICB9XG4gIHJldHVybiBwYXJ0cztcbn07XG5cbi8vIFBhcnNlIGEgc3NyYy1ncm91cCBsaW5lIChzZWUgUkZDIDU1NzYpLiBTYW1wbGUgaW5wdXQ6XG4vLyBhPXNzcmMtZ3JvdXA6c2VtYW50aWNzIDEyIDM0XG5TRFBVdGlscy5wYXJzZVNzcmNHcm91cCA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgY29uc3QgcGFydHMgPSBsaW5lLnN1YnN0cmluZygxMykuc3BsaXQoJyAnKTtcbiAgcmV0dXJuIHtcbiAgICBzZW1hbnRpY3M6IHBhcnRzLnNoaWZ0KCksXG4gICAgc3NyY3M6IHBhcnRzLm1hcChzc3JjID0+IHBhcnNlSW50KHNzcmMsIDEwKSksXG4gIH07XG59O1xuXG4vLyBFeHRyYWN0cyB0aGUgTUlEIChSRkMgNTg4OCkgZnJvbSBhIG1lZGlhIHNlY3Rpb24uXG4vLyBSZXR1cm5zIHRoZSBNSUQgb3IgdW5kZWZpbmVkIGlmIG5vIG1pZCBsaW5lIHdhcyBmb3VuZC5cblNEUFV0aWxzLmdldE1pZCA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbikge1xuICBjb25zdCBtaWQgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPW1pZDonKVswXTtcbiAgaWYgKG1pZCkge1xuICAgIHJldHVybiBtaWQuc3Vic3RyaW5nKDYpO1xuICB9XG59O1xuXG4vLyBQYXJzZXMgYSBmaW5nZXJwcmludCBsaW5lIGZvciBEVExTLVNSVFAuXG5TRFBVdGlscy5wYXJzZUZpbmdlcnByaW50ID0gZnVuY3Rpb24obGluZSkge1xuICBjb25zdCBwYXJ0cyA9IGxpbmUuc3Vic3RyaW5nKDE0KS5zcGxpdCgnICcpO1xuICByZXR1cm4ge1xuICAgIGFsZ29yaXRobTogcGFydHNbMF0udG9Mb3dlckNhc2UoKSwgLy8gYWxnb3JpdGhtIGlzIGNhc2Utc2Vuc2l0aXZlIGluIEVkZ2UuXG4gICAgdmFsdWU6IHBhcnRzWzFdLnRvVXBwZXJDYXNlKCksIC8vIHRoZSBkZWZpbml0aW9uIGlzIHVwcGVyLWNhc2UgaW4gUkZDIDQ1NzIuXG4gIH07XG59O1xuXG4vLyBFeHRyYWN0cyBEVExTIHBhcmFtZXRlcnMgZnJvbSBTRFAgbWVkaWEgc2VjdGlvbiBvciBzZXNzaW9ucGFydC5cbi8vIEZJWE1FOiBmb3IgY29uc2lzdGVuY3kgd2l0aCBvdGhlciBmdW5jdGlvbnMgdGhpcyBzaG91bGQgb25seVxuLy8gICBnZXQgdGhlIGZpbmdlcnByaW50IGxpbmUgYXMgaW5wdXQuIFNlZSBhbHNvIGdldEljZVBhcmFtZXRlcnMuXG5TRFBVdGlscy5nZXREdGxzUGFyYW1ldGVycyA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbiwgc2Vzc2lvbnBhcnQpIHtcbiAgY29uc3QgbGluZXMgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24gKyBzZXNzaW9ucGFydCxcbiAgICAnYT1maW5nZXJwcmludDonKTtcbiAgLy8gTm90ZTogYT1zZXR1cCBsaW5lIGlzIGlnbm9yZWQgc2luY2Ugd2UgdXNlIHRoZSAnYXV0bycgcm9sZSBpbiBFZGdlLlxuICByZXR1cm4ge1xuICAgIHJvbGU6ICdhdXRvJyxcbiAgICBmaW5nZXJwcmludHM6IGxpbmVzLm1hcChTRFBVdGlscy5wYXJzZUZpbmdlcnByaW50KSxcbiAgfTtcbn07XG5cbi8vIFNlcmlhbGl6ZXMgRFRMUyBwYXJhbWV0ZXJzIHRvIFNEUC5cblNEUFV0aWxzLndyaXRlRHRsc1BhcmFtZXRlcnMgPSBmdW5jdGlvbihwYXJhbXMsIHNldHVwVHlwZSkge1xuICBsZXQgc2RwID0gJ2E9c2V0dXA6JyArIHNldHVwVHlwZSArICdcXHJcXG4nO1xuICBwYXJhbXMuZmluZ2VycHJpbnRzLmZvckVhY2goZnAgPT4ge1xuICAgIHNkcCArPSAnYT1maW5nZXJwcmludDonICsgZnAuYWxnb3JpdGhtICsgJyAnICsgZnAudmFsdWUgKyAnXFxyXFxuJztcbiAgfSk7XG4gIHJldHVybiBzZHA7XG59O1xuXG4vLyBQYXJzZXMgYT1jcnlwdG8gbGluZXMgaW50b1xuLy8gICBodHRwczovL3Jhd2dpdC5jb20vYWJvYmEvZWRnZXJ0Yy9tYXN0ZXIvbXNvcnRjLXJzNC5odG1sI2RpY3Rpb25hcnktcnRjc3J0cHNkZXNwYXJhbWV0ZXJzLW1lbWJlcnNcblNEUFV0aWxzLnBhcnNlQ3J5cHRvTGluZSA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgY29uc3QgcGFydHMgPSBsaW5lLnN1YnN0cmluZyg5KS5zcGxpdCgnICcpO1xuICByZXR1cm4ge1xuICAgIHRhZzogcGFyc2VJbnQocGFydHNbMF0sIDEwKSxcbiAgICBjcnlwdG9TdWl0ZTogcGFydHNbMV0sXG4gICAga2V5UGFyYW1zOiBwYXJ0c1syXSxcbiAgICBzZXNzaW9uUGFyYW1zOiBwYXJ0cy5zbGljZSgzKSxcbiAgfTtcbn07XG5cblNEUFV0aWxzLndyaXRlQ3J5cHRvTGluZSA9IGZ1bmN0aW9uKHBhcmFtZXRlcnMpIHtcbiAgcmV0dXJuICdhPWNyeXB0bzonICsgcGFyYW1ldGVycy50YWcgKyAnICcgK1xuICAgIHBhcmFtZXRlcnMuY3J5cHRvU3VpdGUgKyAnICcgK1xuICAgICh0eXBlb2YgcGFyYW1ldGVycy5rZXlQYXJhbXMgPT09ICdvYmplY3QnXG4gICAgICA/IFNEUFV0aWxzLndyaXRlQ3J5cHRvS2V5UGFyYW1zKHBhcmFtZXRlcnMua2V5UGFyYW1zKVxuICAgICAgOiBwYXJhbWV0ZXJzLmtleVBhcmFtcykgK1xuICAgIChwYXJhbWV0ZXJzLnNlc3Npb25QYXJhbXMgPyAnICcgKyBwYXJhbWV0ZXJzLnNlc3Npb25QYXJhbXMuam9pbignICcpIDogJycpICtcbiAgICAnXFxyXFxuJztcbn07XG5cbi8vIFBhcnNlcyB0aGUgY3J5cHRvIGtleSBwYXJhbWV0ZXJzIGludG9cbi8vICAgaHR0cHM6Ly9yYXdnaXQuY29tL2Fib2JhL2VkZ2VydGMvbWFzdGVyL21zb3J0Yy1yczQuaHRtbCNydGNzcnRwa2V5cGFyYW0qXG5TRFBVdGlscy5wYXJzZUNyeXB0b0tleVBhcmFtcyA9IGZ1bmN0aW9uKGtleVBhcmFtcykge1xuICBpZiAoa2V5UGFyYW1zLmluZGV4T2YoJ2lubGluZTonKSAhPT0gMCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IHBhcnRzID0ga2V5UGFyYW1zLnN1YnN0cmluZyg3KS5zcGxpdCgnfCcpO1xuICByZXR1cm4ge1xuICAgIGtleU1ldGhvZDogJ2lubGluZScsXG4gICAga2V5U2FsdDogcGFydHNbMF0sXG4gICAgbGlmZVRpbWU6IHBhcnRzWzFdLFxuICAgIG1raVZhbHVlOiBwYXJ0c1syXSA/IHBhcnRzWzJdLnNwbGl0KCc6JylbMF0gOiB1bmRlZmluZWQsXG4gICAgbWtpTGVuZ3RoOiBwYXJ0c1syXSA/IHBhcnRzWzJdLnNwbGl0KCc6JylbMV0gOiB1bmRlZmluZWQsXG4gIH07XG59O1xuXG5TRFBVdGlscy53cml0ZUNyeXB0b0tleVBhcmFtcyA9IGZ1bmN0aW9uKGtleVBhcmFtcykge1xuICByZXR1cm4ga2V5UGFyYW1zLmtleU1ldGhvZCArICc6J1xuICAgICsga2V5UGFyYW1zLmtleVNhbHQgK1xuICAgIChrZXlQYXJhbXMubGlmZVRpbWUgPyAnfCcgKyBrZXlQYXJhbXMubGlmZVRpbWUgOiAnJykgK1xuICAgIChrZXlQYXJhbXMubWtpVmFsdWUgJiYga2V5UGFyYW1zLm1raUxlbmd0aFxuICAgICAgPyAnfCcgKyBrZXlQYXJhbXMubWtpVmFsdWUgKyAnOicgKyBrZXlQYXJhbXMubWtpTGVuZ3RoXG4gICAgICA6ICcnKTtcbn07XG5cbi8vIEV4dHJhY3RzIGFsbCBTREVTIHBhcmFtZXRlcnMuXG5TRFBVdGlscy5nZXRDcnlwdG9QYXJhbWV0ZXJzID0gZnVuY3Rpb24obWVkaWFTZWN0aW9uLCBzZXNzaW9ucGFydCkge1xuICBjb25zdCBsaW5lcyA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiArIHNlc3Npb25wYXJ0LFxuICAgICdhPWNyeXB0bzonKTtcbiAgcmV0dXJuIGxpbmVzLm1hcChTRFBVdGlscy5wYXJzZUNyeXB0b0xpbmUpO1xufTtcblxuLy8gUGFyc2VzIElDRSBpbmZvcm1hdGlvbiBmcm9tIFNEUCBtZWRpYSBzZWN0aW9uIG9yIHNlc3Npb25wYXJ0LlxuLy8gRklYTUU6IGZvciBjb25zaXN0ZW5jeSB3aXRoIG90aGVyIGZ1bmN0aW9ucyB0aGlzIHNob3VsZCBvbmx5XG4vLyAgIGdldCB0aGUgaWNlLXVmcmFnIGFuZCBpY2UtcHdkIGxpbmVzIGFzIGlucHV0LlxuU0RQVXRpbHMuZ2V0SWNlUGFyYW1ldGVycyA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbiwgc2Vzc2lvbnBhcnQpIHtcbiAgY29uc3QgdWZyYWcgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24gKyBzZXNzaW9ucGFydCxcbiAgICAnYT1pY2UtdWZyYWc6JylbMF07XG4gIGNvbnN0IHB3ZCA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiArIHNlc3Npb25wYXJ0LFxuICAgICdhPWljZS1wd2Q6JylbMF07XG4gIGlmICghKHVmcmFnICYmIHB3ZCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4ge1xuICAgIHVzZXJuYW1lRnJhZ21lbnQ6IHVmcmFnLnN1YnN0cmluZygxMiksXG4gICAgcGFzc3dvcmQ6IHB3ZC5zdWJzdHJpbmcoMTApLFxuICB9O1xufTtcblxuLy8gU2VyaWFsaXplcyBJQ0UgcGFyYW1ldGVycyB0byBTRFAuXG5TRFBVdGlscy53cml0ZUljZVBhcmFtZXRlcnMgPSBmdW5jdGlvbihwYXJhbXMpIHtcbiAgbGV0IHNkcCA9ICdhPWljZS11ZnJhZzonICsgcGFyYW1zLnVzZXJuYW1lRnJhZ21lbnQgKyAnXFxyXFxuJyArXG4gICAgICAnYT1pY2UtcHdkOicgKyBwYXJhbXMucGFzc3dvcmQgKyAnXFxyXFxuJztcbiAgaWYgKHBhcmFtcy5pY2VMaXRlKSB7XG4gICAgc2RwICs9ICdhPWljZS1saXRlXFxyXFxuJztcbiAgfVxuICByZXR1cm4gc2RwO1xufTtcblxuLy8gUGFyc2VzIHRoZSBTRFAgbWVkaWEgc2VjdGlvbiBhbmQgcmV0dXJucyBSVENSdHBQYXJhbWV0ZXJzLlxuU0RQVXRpbHMucGFyc2VSdHBQYXJhbWV0ZXJzID0gZnVuY3Rpb24obWVkaWFTZWN0aW9uKSB7XG4gIGNvbnN0IGRlc2NyaXB0aW9uID0ge1xuICAgIGNvZGVjczogW10sXG4gICAgaGVhZGVyRXh0ZW5zaW9uczogW10sXG4gICAgZmVjTWVjaGFuaXNtczogW10sXG4gICAgcnRjcDogW10sXG4gIH07XG4gIGNvbnN0IGxpbmVzID0gU0RQVXRpbHMuc3BsaXRMaW5lcyhtZWRpYVNlY3Rpb24pO1xuICBjb25zdCBtbGluZSA9IGxpbmVzWzBdLnNwbGl0KCcgJyk7XG4gIGZvciAobGV0IGkgPSAzOyBpIDwgbWxpbmUubGVuZ3RoOyBpKyspIHsgLy8gZmluZCBhbGwgY29kZWNzIGZyb20gbWxpbmVbMy4uXVxuICAgIGNvbnN0IHB0ID0gbWxpbmVbaV07XG4gICAgY29uc3QgcnRwbWFwbGluZSA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KFxuICAgICAgbWVkaWFTZWN0aW9uLCAnYT1ydHBtYXA6JyArIHB0ICsgJyAnKVswXTtcbiAgICBpZiAocnRwbWFwbGluZSkge1xuICAgICAgY29uc3QgY29kZWMgPSBTRFBVdGlscy5wYXJzZVJ0cE1hcChydHBtYXBsaW5lKTtcbiAgICAgIGNvbnN0IGZtdHBzID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgoXG4gICAgICAgIG1lZGlhU2VjdGlvbiwgJ2E9Zm10cDonICsgcHQgKyAnICcpO1xuICAgICAgLy8gT25seSB0aGUgZmlyc3QgYT1mbXRwOjxwdD4gaXMgY29uc2lkZXJlZC5cbiAgICAgIGNvZGVjLnBhcmFtZXRlcnMgPSBmbXRwcy5sZW5ndGggPyBTRFBVdGlscy5wYXJzZUZtdHAoZm10cHNbMF0pIDoge307XG4gICAgICBjb2RlYy5ydGNwRmVlZGJhY2sgPSBTRFBVdGlscy5tYXRjaFByZWZpeChcbiAgICAgICAgbWVkaWFTZWN0aW9uLCAnYT1ydGNwLWZiOicgKyBwdCArICcgJylcbiAgICAgICAgLm1hcChTRFBVdGlscy5wYXJzZVJ0Y3BGYik7XG4gICAgICBkZXNjcmlwdGlvbi5jb2RlY3MucHVzaChjb2RlYyk7XG4gICAgICAvLyBwYXJzZSBGRUMgbWVjaGFuaXNtcyBmcm9tIHJ0cG1hcCBsaW5lcy5cbiAgICAgIHN3aXRjaCAoY29kZWMubmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICAgIGNhc2UgJ1JFRCc6XG4gICAgICAgIGNhc2UgJ1VMUEZFQyc6XG4gICAgICAgICAgZGVzY3JpcHRpb24uZmVjTWVjaGFuaXNtcy5wdXNoKGNvZGVjLm5hbWUudG9VcHBlckNhc2UoKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IC8vIG9ubHkgUkVEIGFuZCBVTFBGRUMgYXJlIHJlY29nbml6ZWQgYXMgRkVDIG1lY2hhbmlzbXMuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2E9ZXh0bWFwOicpLmZvckVhY2gobGluZSA9PiB7XG4gICAgZGVzY3JpcHRpb24uaGVhZGVyRXh0ZW5zaW9ucy5wdXNoKFNEUFV0aWxzLnBhcnNlRXh0bWFwKGxpbmUpKTtcbiAgfSk7XG4gIGNvbnN0IHdpbGRjYXJkUnRjcEZiID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnYT1ydGNwLWZiOiogJylcbiAgICAubWFwKFNEUFV0aWxzLnBhcnNlUnRjcEZiKTtcbiAgZGVzY3JpcHRpb24uY29kZWNzLmZvckVhY2goY29kZWMgPT4ge1xuICAgIHdpbGRjYXJkUnRjcEZiLmZvckVhY2goZmI9PiB7XG4gICAgICBjb25zdCBkdXBsaWNhdGUgPSBjb2RlYy5ydGNwRmVlZGJhY2suZmluZChleGlzdGluZ0ZlZWRiYWNrID0+IHtcbiAgICAgICAgcmV0dXJuIGV4aXN0aW5nRmVlZGJhY2sudHlwZSA9PT0gZmIudHlwZSAmJlxuICAgICAgICAgIGV4aXN0aW5nRmVlZGJhY2sucGFyYW1ldGVyID09PSBmYi5wYXJhbWV0ZXI7XG4gICAgICB9KTtcbiAgICAgIGlmICghZHVwbGljYXRlKSB7XG4gICAgICAgIGNvZGVjLnJ0Y3BGZWVkYmFjay5wdXNoKGZiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIC8vIEZJWE1FOiBwYXJzZSBydGNwLlxuICByZXR1cm4gZGVzY3JpcHRpb247XG59O1xuXG4vLyBHZW5lcmF0ZXMgcGFydHMgb2YgdGhlIFNEUCBtZWRpYSBzZWN0aW9uIGRlc2NyaWJpbmcgdGhlIGNhcGFiaWxpdGllcyAvXG4vLyBwYXJhbWV0ZXJzLlxuU0RQVXRpbHMud3JpdGVSdHBEZXNjcmlwdGlvbiA9IGZ1bmN0aW9uKGtpbmQsIGNhcHMpIHtcbiAgbGV0IHNkcCA9ICcnO1xuXG4gIC8vIEJ1aWxkIHRoZSBtbGluZS5cbiAgc2RwICs9ICdtPScgKyBraW5kICsgJyAnO1xuICBzZHAgKz0gY2Fwcy5jb2RlY3MubGVuZ3RoID4gMCA/ICc5JyA6ICcwJzsgLy8gcmVqZWN0IGlmIG5vIGNvZGVjcy5cbiAgc2RwICs9ICcgVURQL1RMUy9SVFAvU0FWUEYgJztcbiAgc2RwICs9IGNhcHMuY29kZWNzLm1hcChjb2RlYyA9PiB7XG4gICAgaWYgKGNvZGVjLnByZWZlcnJlZFBheWxvYWRUeXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBjb2RlYy5wcmVmZXJyZWRQYXlsb2FkVHlwZTtcbiAgICB9XG4gICAgcmV0dXJuIGNvZGVjLnBheWxvYWRUeXBlO1xuICB9KS5qb2luKCcgJykgKyAnXFxyXFxuJztcblxuICBzZHAgKz0gJ2M9SU4gSVA0IDAuMC4wLjBcXHJcXG4nO1xuICBzZHAgKz0gJ2E9cnRjcDo5IElOIElQNCAwLjAuMC4wXFxyXFxuJztcblxuICAvLyBBZGQgYT1ydHBtYXAgbGluZXMgZm9yIGVhY2ggY29kZWMuIEFsc28gZm10cCBhbmQgcnRjcC1mYi5cbiAgY2Fwcy5jb2RlY3MuZm9yRWFjaChjb2RlYyA9PiB7XG4gICAgc2RwICs9IFNEUFV0aWxzLndyaXRlUnRwTWFwKGNvZGVjKTtcbiAgICBzZHAgKz0gU0RQVXRpbHMud3JpdGVGbXRwKGNvZGVjKTtcbiAgICBzZHAgKz0gU0RQVXRpbHMud3JpdGVSdGNwRmIoY29kZWMpO1xuICB9KTtcbiAgbGV0IG1heHB0aW1lID0gMDtcbiAgY2Fwcy5jb2RlY3MuZm9yRWFjaChjb2RlYyA9PiB7XG4gICAgaWYgKGNvZGVjLm1heHB0aW1lID4gbWF4cHRpbWUpIHtcbiAgICAgIG1heHB0aW1lID0gY29kZWMubWF4cHRpbWU7XG4gICAgfVxuICB9KTtcbiAgaWYgKG1heHB0aW1lID4gMCkge1xuICAgIHNkcCArPSAnYT1tYXhwdGltZTonICsgbWF4cHRpbWUgKyAnXFxyXFxuJztcbiAgfVxuXG4gIGlmIChjYXBzLmhlYWRlckV4dGVuc2lvbnMpIHtcbiAgICBjYXBzLmhlYWRlckV4dGVuc2lvbnMuZm9yRWFjaChleHRlbnNpb24gPT4ge1xuICAgICAgc2RwICs9IFNEUFV0aWxzLndyaXRlRXh0bWFwKGV4dGVuc2lvbik7XG4gICAgfSk7XG4gIH1cbiAgLy8gRklYTUU6IHdyaXRlIGZlY01lY2hhbmlzbXMuXG4gIHJldHVybiBzZHA7XG59O1xuXG4vLyBQYXJzZXMgdGhlIFNEUCBtZWRpYSBzZWN0aW9uIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mXG4vLyBSVENSdHBFbmNvZGluZ1BhcmFtZXRlcnMuXG5TRFBVdGlscy5wYXJzZVJ0cEVuY29kaW5nUGFyYW1ldGVycyA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbikge1xuICBjb25zdCBlbmNvZGluZ1BhcmFtZXRlcnMgPSBbXTtcbiAgY29uc3QgZGVzY3JpcHRpb24gPSBTRFBVdGlscy5wYXJzZVJ0cFBhcmFtZXRlcnMobWVkaWFTZWN0aW9uKTtcbiAgY29uc3QgaGFzUmVkID0gZGVzY3JpcHRpb24uZmVjTWVjaGFuaXNtcy5pbmRleE9mKCdSRUQnKSAhPT0gLTE7XG4gIGNvbnN0IGhhc1VscGZlYyA9IGRlc2NyaXB0aW9uLmZlY01lY2hhbmlzbXMuaW5kZXhPZignVUxQRkVDJykgIT09IC0xO1xuXG4gIC8vIGZpbHRlciBhPXNzcmM6Li4uIGNuYW1lOiwgaWdub3JlIFBsYW5CLW1zaWRcbiAgY29uc3Qgc3NyY3MgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPXNzcmM6JylcbiAgICAubWFwKGxpbmUgPT4gU0RQVXRpbHMucGFyc2VTc3JjTWVkaWEobGluZSkpXG4gICAgLmZpbHRlcihwYXJ0cyA9PiBwYXJ0cy5hdHRyaWJ1dGUgPT09ICdjbmFtZScpO1xuICBjb25zdCBwcmltYXJ5U3NyYyA9IHNzcmNzLmxlbmd0aCA+IDAgJiYgc3NyY3NbMF0uc3NyYztcbiAgbGV0IHNlY29uZGFyeVNzcmM7XG5cbiAgY29uc3QgZmxvd3MgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPXNzcmMtZ3JvdXA6RklEJylcbiAgICAubWFwKGxpbmUgPT4ge1xuICAgICAgY29uc3QgcGFydHMgPSBsaW5lLnN1YnN0cmluZygxNykuc3BsaXQoJyAnKTtcbiAgICAgIHJldHVybiBwYXJ0cy5tYXAocGFydCA9PiBwYXJzZUludChwYXJ0LCAxMCkpO1xuICAgIH0pO1xuICBpZiAoZmxvd3MubGVuZ3RoID4gMCAmJiBmbG93c1swXS5sZW5ndGggPiAxICYmIGZsb3dzWzBdWzBdID09PSBwcmltYXJ5U3NyYykge1xuICAgIHNlY29uZGFyeVNzcmMgPSBmbG93c1swXVsxXTtcbiAgfVxuXG4gIGRlc2NyaXB0aW9uLmNvZGVjcy5mb3JFYWNoKGNvZGVjID0+IHtcbiAgICBpZiAoY29kZWMubmFtZS50b1VwcGVyQ2FzZSgpID09PSAnUlRYJyAmJiBjb2RlYy5wYXJhbWV0ZXJzLmFwdCkge1xuICAgICAgbGV0IGVuY1BhcmFtID0ge1xuICAgICAgICBzc3JjOiBwcmltYXJ5U3NyYyxcbiAgICAgICAgY29kZWNQYXlsb2FkVHlwZTogcGFyc2VJbnQoY29kZWMucGFyYW1ldGVycy5hcHQsIDEwKSxcbiAgICAgIH07XG4gICAgICBpZiAocHJpbWFyeVNzcmMgJiYgc2Vjb25kYXJ5U3NyYykge1xuICAgICAgICBlbmNQYXJhbS5ydHggPSB7c3NyYzogc2Vjb25kYXJ5U3NyY307XG4gICAgICB9XG4gICAgICBlbmNvZGluZ1BhcmFtZXRlcnMucHVzaChlbmNQYXJhbSk7XG4gICAgICBpZiAoaGFzUmVkKSB7XG4gICAgICAgIGVuY1BhcmFtID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShlbmNQYXJhbSkpO1xuICAgICAgICBlbmNQYXJhbS5mZWMgPSB7XG4gICAgICAgICAgc3NyYzogcHJpbWFyeVNzcmMsXG4gICAgICAgICAgbWVjaGFuaXNtOiBoYXNVbHBmZWMgPyAncmVkK3VscGZlYycgOiAncmVkJyxcbiAgICAgICAgfTtcbiAgICAgICAgZW5jb2RpbmdQYXJhbWV0ZXJzLnB1c2goZW5jUGFyYW0pO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIGlmIChlbmNvZGluZ1BhcmFtZXRlcnMubGVuZ3RoID09PSAwICYmIHByaW1hcnlTc3JjKSB7XG4gICAgZW5jb2RpbmdQYXJhbWV0ZXJzLnB1c2goe1xuICAgICAgc3NyYzogcHJpbWFyeVNzcmMsXG4gICAgfSk7XG4gIH1cblxuICAvLyB3ZSBzdXBwb3J0IGJvdGggYj1BUyBhbmQgYj1USUFTIGJ1dCBpbnRlcnByZXQgQVMgYXMgVElBUy5cbiAgbGV0IGJhbmR3aWR0aCA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2I9Jyk7XG4gIGlmIChiYW5kd2lkdGgubGVuZ3RoKSB7XG4gICAgaWYgKGJhbmR3aWR0aFswXS5pbmRleE9mKCdiPVRJQVM6JykgPT09IDApIHtcbiAgICAgIGJhbmR3aWR0aCA9IHBhcnNlSW50KGJhbmR3aWR0aFswXS5zdWJzdHJpbmcoNyksIDEwKTtcbiAgICB9IGVsc2UgaWYgKGJhbmR3aWR0aFswXS5pbmRleE9mKCdiPUFTOicpID09PSAwKSB7XG4gICAgICAvLyB1c2UgZm9ybXVsYSBmcm9tIEpTRVAgdG8gY29udmVydCBiPUFTIHRvIFRJQVMgdmFsdWUuXG4gICAgICBiYW5kd2lkdGggPSBwYXJzZUludChiYW5kd2lkdGhbMF0uc3Vic3RyaW5nKDUpLCAxMCkgKiAxMDAwICogMC45NVxuICAgICAgICAgIC0gKDUwICogNDAgKiA4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgYmFuZHdpZHRoID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbmNvZGluZ1BhcmFtZXRlcnMuZm9yRWFjaChwYXJhbXMgPT4ge1xuICAgICAgcGFyYW1zLm1heEJpdHJhdGUgPSBiYW5kd2lkdGg7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGVuY29kaW5nUGFyYW1ldGVycztcbn07XG5cbi8vIHBhcnNlcyBodHRwOi8vZHJhZnQub3J0Yy5vcmcvI3J0Y3J0Y3BwYXJhbWV0ZXJzKlxuU0RQVXRpbHMucGFyc2VSdGNwUGFyYW1ldGVycyA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbikge1xuICBjb25zdCBydGNwUGFyYW1ldGVycyA9IHt9O1xuXG4gIC8vIEdldHMgdGhlIGZpcnN0IFNTUkMuIE5vdGUgdGhhdCB3aXRoIFJUWCB0aGVyZSBtaWdodCBiZSBtdWx0aXBsZVxuICAvLyBTU1JDcy5cbiAgY29uc3QgcmVtb3RlU3NyYyA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2E9c3NyYzonKVxuICAgIC5tYXAobGluZSA9PiBTRFBVdGlscy5wYXJzZVNzcmNNZWRpYShsaW5lKSlcbiAgICAuZmlsdGVyKG9iaiA9PiBvYmouYXR0cmlidXRlID09PSAnY25hbWUnKVswXTtcbiAgaWYgKHJlbW90ZVNzcmMpIHtcbiAgICBydGNwUGFyYW1ldGVycy5jbmFtZSA9IHJlbW90ZVNzcmMudmFsdWU7XG4gICAgcnRjcFBhcmFtZXRlcnMuc3NyYyA9IHJlbW90ZVNzcmMuc3NyYztcbiAgfVxuXG4gIC8vIEVkZ2UgdXNlcyB0aGUgY29tcG91bmQgYXR0cmlidXRlIGluc3RlYWQgb2YgcmVkdWNlZFNpemVcbiAgLy8gY29tcG91bmQgaXMgIXJlZHVjZWRTaXplXG4gIGNvbnN0IHJzaXplID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnYT1ydGNwLXJzaXplJyk7XG4gIHJ0Y3BQYXJhbWV0ZXJzLnJlZHVjZWRTaXplID0gcnNpemUubGVuZ3RoID4gMDtcbiAgcnRjcFBhcmFtZXRlcnMuY29tcG91bmQgPSByc2l6ZS5sZW5ndGggPT09IDA7XG5cbiAgLy8gcGFyc2VzIHRoZSBydGNwLW11eCBhdHRy0ZZidXRlLlxuICAvLyBOb3RlIHRoYXQgRWRnZSBkb2VzIG5vdCBzdXBwb3J0IHVubXV4ZWQgUlRDUC5cbiAgY29uc3QgbXV4ID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnYT1ydGNwLW11eCcpO1xuICBydGNwUGFyYW1ldGVycy5tdXggPSBtdXgubGVuZ3RoID4gMDtcblxuICByZXR1cm4gcnRjcFBhcmFtZXRlcnM7XG59O1xuXG5TRFBVdGlscy53cml0ZVJ0Y3BQYXJhbWV0ZXJzID0gZnVuY3Rpb24ocnRjcFBhcmFtZXRlcnMpIHtcbiAgbGV0IHNkcCA9ICcnO1xuICBpZiAocnRjcFBhcmFtZXRlcnMucmVkdWNlZFNpemUpIHtcbiAgICBzZHAgKz0gJ2E9cnRjcC1yc2l6ZVxcclxcbic7XG4gIH1cbiAgaWYgKHJ0Y3BQYXJhbWV0ZXJzLm11eCkge1xuICAgIHNkcCArPSAnYT1ydGNwLW11eFxcclxcbic7XG4gIH1cbiAgaWYgKHJ0Y3BQYXJhbWV0ZXJzLnNzcmMgIT09IHVuZGVmaW5lZCAmJiBydGNwUGFyYW1ldGVycy5jbmFtZSkge1xuICAgIHNkcCArPSAnYT1zc3JjOicgKyBydGNwUGFyYW1ldGVycy5zc3JjICtcbiAgICAgICcgY25hbWU6JyArIHJ0Y3BQYXJhbWV0ZXJzLmNuYW1lICsgJ1xcclxcbic7XG4gIH1cbiAgcmV0dXJuIHNkcDtcbn07XG5cblxuLy8gcGFyc2VzIGVpdGhlciBhPW1zaWQ6IG9yIGE9c3NyYzouLi4gbXNpZCBsaW5lcyBhbmQgcmV0dXJuc1xuLy8gdGhlIGlkIG9mIHRoZSBNZWRpYVN0cmVhbSBhbmQgTWVkaWFTdHJlYW1UcmFjay5cblNEUFV0aWxzLnBhcnNlTXNpZCA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbikge1xuICBsZXQgcGFydHM7XG4gIGNvbnN0IHNwZWMgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPW1zaWQ6Jyk7XG4gIGlmIChzcGVjLmxlbmd0aCA9PT0gMSkge1xuICAgIHBhcnRzID0gc3BlY1swXS5zdWJzdHJpbmcoNykuc3BsaXQoJyAnKTtcbiAgICByZXR1cm4ge3N0cmVhbTogcGFydHNbMF0sIHRyYWNrOiBwYXJ0c1sxXX07XG4gIH1cbiAgY29uc3QgcGxhbkIgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPXNzcmM6JylcbiAgICAubWFwKGxpbmUgPT4gU0RQVXRpbHMucGFyc2VTc3JjTWVkaWEobGluZSkpXG4gICAgLmZpbHRlcihtc2lkUGFydHMgPT4gbXNpZFBhcnRzLmF0dHJpYnV0ZSA9PT0gJ21zaWQnKTtcbiAgaWYgKHBsYW5CLmxlbmd0aCA+IDApIHtcbiAgICBwYXJ0cyA9IHBsYW5CWzBdLnZhbHVlLnNwbGl0KCcgJyk7XG4gICAgcmV0dXJuIHtzdHJlYW06IHBhcnRzWzBdLCB0cmFjazogcGFydHNbMV19O1xuICB9XG59O1xuXG4vLyBTQ1RQXG4vLyBwYXJzZXMgZHJhZnQtaWV0Zi1tbXVzaWMtc2N0cC1zZHAtMjYgZmlyc3QgYW5kIGZhbGxzIGJhY2tcbi8vIHRvIGRyYWZ0LWlldGYtbW11c2ljLXNjdHAtc2RwLTA1XG5TRFBVdGlscy5wYXJzZVNjdHBEZXNjcmlwdGlvbiA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbikge1xuICBjb25zdCBtbGluZSA9IFNEUFV0aWxzLnBhcnNlTUxpbmUobWVkaWFTZWN0aW9uKTtcbiAgY29uc3QgbWF4U2l6ZUxpbmUgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPW1heC1tZXNzYWdlLXNpemU6Jyk7XG4gIGxldCBtYXhNZXNzYWdlU2l6ZTtcbiAgaWYgKG1heFNpemVMaW5lLmxlbmd0aCA+IDApIHtcbiAgICBtYXhNZXNzYWdlU2l6ZSA9IHBhcnNlSW50KG1heFNpemVMaW5lWzBdLnN1YnN0cmluZygxOSksIDEwKTtcbiAgfVxuICBpZiAoaXNOYU4obWF4TWVzc2FnZVNpemUpKSB7XG4gICAgbWF4TWVzc2FnZVNpemUgPSA2NTUzNjtcbiAgfVxuICBjb25zdCBzY3RwUG9ydCA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2E9c2N0cC1wb3J0OicpO1xuICBpZiAoc2N0cFBvcnQubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiB7XG4gICAgICBwb3J0OiBwYXJzZUludChzY3RwUG9ydFswXS5zdWJzdHJpbmcoMTIpLCAxMCksXG4gICAgICBwcm90b2NvbDogbWxpbmUuZm10LFxuICAgICAgbWF4TWVzc2FnZVNpemUsXG4gICAgfTtcbiAgfVxuICBjb25zdCBzY3RwTWFwTGluZXMgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPXNjdHBtYXA6Jyk7XG4gIGlmIChzY3RwTWFwTGluZXMubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IHBhcnRzID0gc2N0cE1hcExpbmVzWzBdXG4gICAgICAuc3Vic3RyaW5nKDEwKVxuICAgICAgLnNwbGl0KCcgJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBvcnQ6IHBhcnNlSW50KHBhcnRzWzBdLCAxMCksXG4gICAgICBwcm90b2NvbDogcGFydHNbMV0sXG4gICAgICBtYXhNZXNzYWdlU2l6ZSxcbiAgICB9O1xuICB9XG59O1xuXG4vLyBTQ1RQXG4vLyBvdXRwdXRzIHRoZSBkcmFmdC1pZXRmLW1tdXNpYy1zY3RwLXNkcC0yNiB2ZXJzaW9uIHRoYXQgYWxsIGJyb3dzZXJzXG4vLyBzdXBwb3J0IGJ5IG5vdyByZWNlaXZpbmcgaW4gdGhpcyBmb3JtYXQsIHVubGVzcyB3ZSBvcmlnaW5hbGx5IHBhcnNlZFxuLy8gYXMgdGhlIGRyYWZ0LWlldGYtbW11c2ljLXNjdHAtc2RwLTA1IGZvcm1hdCAoaW5kaWNhdGVkIGJ5IHRoZSBtLWxpbmVcbi8vIHByb3RvY29sIG9mIERUTFMvU0NUUCAtLSB3aXRob3V0IFVEUC8gb3IgVENQLylcblNEUFV0aWxzLndyaXRlU2N0cERlc2NyaXB0aW9uID0gZnVuY3Rpb24obWVkaWEsIHNjdHApIHtcbiAgbGV0IG91dHB1dCA9IFtdO1xuICBpZiAobWVkaWEucHJvdG9jb2wgIT09ICdEVExTL1NDVFAnKSB7XG4gICAgb3V0cHV0ID0gW1xuICAgICAgJ209JyArIG1lZGlhLmtpbmQgKyAnIDkgJyArIG1lZGlhLnByb3RvY29sICsgJyAnICsgc2N0cC5wcm90b2NvbCArICdcXHJcXG4nLFxuICAgICAgJ2M9SU4gSVA0IDAuMC4wLjBcXHJcXG4nLFxuICAgICAgJ2E9c2N0cC1wb3J0OicgKyBzY3RwLnBvcnQgKyAnXFxyXFxuJyxcbiAgICBdO1xuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IFtcbiAgICAgICdtPScgKyBtZWRpYS5raW5kICsgJyA5ICcgKyBtZWRpYS5wcm90b2NvbCArICcgJyArIHNjdHAucG9ydCArICdcXHJcXG4nLFxuICAgICAgJ2M9SU4gSVA0IDAuMC4wLjBcXHJcXG4nLFxuICAgICAgJ2E9c2N0cG1hcDonICsgc2N0cC5wb3J0ICsgJyAnICsgc2N0cC5wcm90b2NvbCArICcgNjU1MzVcXHJcXG4nLFxuICAgIF07XG4gIH1cbiAgaWYgKHNjdHAubWF4TWVzc2FnZVNpemUgIT09IHVuZGVmaW5lZCkge1xuICAgIG91dHB1dC5wdXNoKCdhPW1heC1tZXNzYWdlLXNpemU6JyArIHNjdHAubWF4TWVzc2FnZVNpemUgKyAnXFxyXFxuJyk7XG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKTtcbn07XG5cbi8vIEdlbmVyYXRlIGEgc2Vzc2lvbiBJRCBmb3IgU0RQLlxuLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL2RyYWZ0LWlldGYtcnRjd2ViLWpzZXAtMjAjc2VjdGlvbi01LjIuMVxuLy8gcmVjb21tZW5kcyB1c2luZyBhIGNyeXB0b2dyYXBoaWNhbGx5IHJhbmRvbSArdmUgNjQtYml0IHZhbHVlXG4vLyBidXQgcmlnaHQgbm93IHRoaXMgc2hvdWxkIGJlIGFjY2VwdGFibGUgYW5kIHdpdGhpbiB0aGUgcmlnaHQgcmFuZ2VcblNEUFV0aWxzLmdlbmVyYXRlU2Vzc2lvbklkID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKCkuc3Vic3RyKDIsIDIyKTtcbn07XG5cbi8vIFdyaXRlIGJvaWxlciBwbGF0ZSBmb3Igc3RhcnQgb2YgU0RQXG4vLyBzZXNzSWQgYXJndW1lbnQgaXMgb3B0aW9uYWwgLSBpZiBub3Qgc3VwcGxpZWQgaXQgd2lsbFxuLy8gYmUgZ2VuZXJhdGVkIHJhbmRvbWx5XG4vLyBzZXNzVmVyc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gMlxuLy8gc2Vzc1VzZXIgaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvICd0aGlzaXNhZGFwdGVyb3J0YydcblNEUFV0aWxzLndyaXRlU2Vzc2lvbkJvaWxlcnBsYXRlID0gZnVuY3Rpb24oc2Vzc0lkLCBzZXNzVmVyLCBzZXNzVXNlcikge1xuICBsZXQgc2Vzc2lvbklkO1xuICBjb25zdCB2ZXJzaW9uID0gc2Vzc1ZlciAhPT0gdW5kZWZpbmVkID8gc2Vzc1ZlciA6IDI7XG4gIGlmIChzZXNzSWQpIHtcbiAgICBzZXNzaW9uSWQgPSBzZXNzSWQ7XG4gIH0gZWxzZSB7XG4gICAgc2Vzc2lvbklkID0gU0RQVXRpbHMuZ2VuZXJhdGVTZXNzaW9uSWQoKTtcbiAgfVxuICBjb25zdCB1c2VyID0gc2Vzc1VzZXIgfHwgJ3RoaXNpc2FkYXB0ZXJvcnRjJztcbiAgLy8gRklYTUU6IHNlc3MtaWQgc2hvdWxkIGJlIGFuIE5UUCB0aW1lc3RhbXAuXG4gIHJldHVybiAndj0wXFxyXFxuJyArXG4gICAgICAnbz0nICsgdXNlciArICcgJyArIHNlc3Npb25JZCArICcgJyArIHZlcnNpb24gK1xuICAgICAgICAnIElOIElQNCAxMjcuMC4wLjFcXHJcXG4nICtcbiAgICAgICdzPS1cXHJcXG4nICtcbiAgICAgICd0PTAgMFxcclxcbic7XG59O1xuXG4vLyBHZXRzIHRoZSBkaXJlY3Rpb24gZnJvbSB0aGUgbWVkaWFTZWN0aW9uIG9yIHRoZSBzZXNzaW9ucGFydC5cblNEUFV0aWxzLmdldERpcmVjdGlvbiA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbiwgc2Vzc2lvbnBhcnQpIHtcbiAgLy8gTG9vayBmb3Igc2VuZHJlY3YsIHNlbmRvbmx5LCByZWN2b25seSwgaW5hY3RpdmUsIGRlZmF1bHQgdG8gc2VuZHJlY3YuXG4gIGNvbnN0IGxpbmVzID0gU0RQVXRpbHMuc3BsaXRMaW5lcyhtZWRpYVNlY3Rpb24pO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgc3dpdGNoIChsaW5lc1tpXSkge1xuICAgICAgY2FzZSAnYT1zZW5kcmVjdic6XG4gICAgICBjYXNlICdhPXNlbmRvbmx5JzpcbiAgICAgIGNhc2UgJ2E9cmVjdm9ubHknOlxuICAgICAgY2FzZSAnYT1pbmFjdGl2ZSc6XG4gICAgICAgIHJldHVybiBsaW5lc1tpXS5zdWJzdHJpbmcoMik7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICAvLyBGSVhNRTogV2hhdCBzaG91bGQgaGFwcGVuIGhlcmU/XG4gICAgfVxuICB9XG4gIGlmIChzZXNzaW9ucGFydCkge1xuICAgIHJldHVybiBTRFBVdGlscy5nZXREaXJlY3Rpb24oc2Vzc2lvbnBhcnQpO1xuICB9XG4gIHJldHVybiAnc2VuZHJlY3YnO1xufTtcblxuU0RQVXRpbHMuZ2V0S2luZCA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbikge1xuICBjb25zdCBsaW5lcyA9IFNEUFV0aWxzLnNwbGl0TGluZXMobWVkaWFTZWN0aW9uKTtcbiAgY29uc3QgbWxpbmUgPSBsaW5lc1swXS5zcGxpdCgnICcpO1xuICByZXR1cm4gbWxpbmVbMF0uc3Vic3RyaW5nKDIpO1xufTtcblxuU0RQVXRpbHMuaXNSZWplY3RlZCA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbikge1xuICByZXR1cm4gbWVkaWFTZWN0aW9uLnNwbGl0KCcgJywgMilbMV0gPT09ICcwJztcbn07XG5cblNEUFV0aWxzLnBhcnNlTUxpbmUgPSBmdW5jdGlvbihtZWRpYVNlY3Rpb24pIHtcbiAgY29uc3QgbGluZXMgPSBTRFBVdGlscy5zcGxpdExpbmVzKG1lZGlhU2VjdGlvbik7XG4gIGNvbnN0IHBhcnRzID0gbGluZXNbMF0uc3Vic3RyaW5nKDIpLnNwbGl0KCcgJyk7XG4gIHJldHVybiB7XG4gICAga2luZDogcGFydHNbMF0sXG4gICAgcG9ydDogcGFyc2VJbnQocGFydHNbMV0sIDEwKSxcbiAgICBwcm90b2NvbDogcGFydHNbMl0sXG4gICAgZm10OiBwYXJ0cy5zbGljZSgzKS5qb2luKCcgJyksXG4gIH07XG59O1xuXG5TRFBVdGlscy5wYXJzZU9MaW5lID0gZnVuY3Rpb24obWVkaWFTZWN0aW9uKSB7XG4gIGNvbnN0IGxpbmUgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdvPScpWzBdO1xuICBjb25zdCBwYXJ0cyA9IGxpbmUuc3Vic3RyaW5nKDIpLnNwbGl0KCcgJyk7XG4gIHJldHVybiB7XG4gICAgdXNlcm5hbWU6IHBhcnRzWzBdLFxuICAgIHNlc3Npb25JZDogcGFydHNbMV0sXG4gICAgc2Vzc2lvblZlcnNpb246IHBhcnNlSW50KHBhcnRzWzJdLCAxMCksXG4gICAgbmV0VHlwZTogcGFydHNbM10sXG4gICAgYWRkcmVzc1R5cGU6IHBhcnRzWzRdLFxuICAgIGFkZHJlc3M6IHBhcnRzWzVdLFxuICB9O1xufTtcblxuLy8gYSB2ZXJ5IG5haXZlIGludGVycHJldGF0aW9uIG9mIGEgdmFsaWQgU0RQLlxuU0RQVXRpbHMuaXNWYWxpZFNEUCA9IGZ1bmN0aW9uKGJsb2IpIHtcbiAgaWYgKHR5cGVvZiBibG9iICE9PSAnc3RyaW5nJyB8fCBibG9iLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBsaW5lcyA9IFNEUFV0aWxzLnNwbGl0TGluZXMoYmxvYik7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobGluZXNbaV0ubGVuZ3RoIDwgMiB8fCBsaW5lc1tpXS5jaGFyQXQoMSkgIT09ICc9Jykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBUT0RPOiBjaGVjayB0aGUgbW9kaWZpZXIgYSBiaXQgbW9yZS5cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8vIEV4cG9zZSBwdWJsaWMgbWV0aG9kcy5cbmlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jykge1xuICBtb2R1bGUuZXhwb3J0cyA9IFNEUFV0aWxzO1xufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbmltcG9ydCB7IENvbmZpZywgUGl4ZWxTdHJlYW1pbmcgfSBmcm9tICdAZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS40JztcclxuZG9jdW1lbnQuYm9keS5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyBFeGFtcGxlIG9mIGhvdyB0byBzZXQgdGhlIGxvZ2dlciBsZXZlbFxyXG4gICAgLy8gTG9nZ2VyLlNldExvZ2dlclZlcmJvc2l0eSgxMCk7XHJcbiAgICAvLyBDcmVhdGUgYSBjb25maWcgb2JqZWN0XHJcbiAgICB2YXIgY29uZmlnID0gbmV3IENvbmZpZyh7XHJcbiAgICAgICAgaW5pdGlhbFNldHRpbmdzOiB7XHJcbiAgICAgICAgICAgIEF1dG9QbGF5VmlkZW86IHRydWUsXHJcbiAgICAgICAgICAgIEF1dG9Db25uZWN0OiB0cnVlLFxyXG4gICAgICAgICAgICBzczogXCJ3czovL2xvY2FsaG9zdDo4MFwiLFxyXG4gICAgICAgICAgICBTdGFydFZpZGVvTXV0ZWQ6IHRydWUsXHJcbiAgICAgICAgICAgIFdhaXRGb3JTdHJlYW1lcjogdHJ1ZSxcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIC8vIENyZWF0ZSBhIFBpeGVsU3RyZWFtaW5nIGluc3RhbmNlIGFuZCBhdHRhY2ggdGhlIHZpZGVvIGVsZW1lbnQgdG8gYW4gZXhpc3RpbmcgcGFyZW50IGRpdlxyXG4gICAgdmFyIHBpeGVsU3RyZWFtaW5nID0gbmV3IFBpeGVsU3RyZWFtaW5nKGNvbmZpZywgeyB2aWRlb0VsZW1lbnRQYXJlbnQ6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidmlkZW9QYXJlbnRFbGVtZW50XCIpIH0pO1xyXG4gICAgLy8gSWYgYnJvd3NlciBkZW5pZXMgYXV0b3BsYXksIHNob3cgXCJDbGljayB0byBwbGF5XCIgYW5kIHJlZ2lzdGVyIGEgY2xpY2stdG8tcGxheSBoYW5kbGVyXHJcbiAgICBwaXhlbFN0cmVhbWluZy5hZGRFdmVudExpc3RlbmVyKFwicGxheVN0cmVhbVJlamVjdGVkXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgY2xpY2tUb1BsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNsaWNrVG9QbGF5RWxlbWVudFwiKTtcclxuICAgICAgICBjbGlja1RvUGxheS5jbGFzc05hbWUgPSBcInZpc2libGVcIjtcclxuICAgICAgICBjbGlja1RvUGxheS5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBwaXhlbFN0cmVhbWluZy5wbGF5KCk7XHJcbiAgICAgICAgICAgIGNsaWNrVG9QbGF5LmNsYXNzTmFtZSA9IFwiXCI7XHJcbiAgICAgICAgICAgIGNsaWNrVG9QbGF5Lm9uY2xpY2sgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfTtcclxuICAgIH0pO1xyXG59O1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=
